{"id":"0a75da15e6ae4409433f3e4faee79649","_format":"hh-sol-build-info-1","solcVersion":"0.8.27","solcLongVersion":"0.8.27+commit.40a35a09","input":{"language":"Solidity","sources":{"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n/// @notice Simple interface for permissioned calling of external functions.\ninterface IAuthentication {\n    /// @notice The sender does not have permission to call a function.\n    error SenderNotAllowed();\n\n    /**\n     * @notice Returns the action identifier associated with the external function described by `selector`.\n     * @param selector The 4-byte selector of the permissioned function\n     * @return actionId The computed actionId\n     */\n    function getActionId(bytes4 selector) external view returns (bytes32 actionId);\n}\n"},"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n/// @notice General interface for token exchange rates.\ninterface IRateProvider {\n    /**\n     * @notice An 18 decimal fixed point number representing the exchange rate of one token to another related token.\n     * @dev The meaning of this rate depends on the context. Note that there may be an error associated with a token\n     * rate, and the caller might require a certain rounding direction to ensure correctness. This (legacy) interface\n     * does not take a rounding direction or return an error, so great care must be taken when interpreting and using\n     * rates in downstream computations.\n     *\n     * @return rate The current token rate\n     */\n    function getRate() external view returns (uint256 rate);\n}\n"},"@balancer-labs/v3-interfaces/contracts/standalone-utils/IBalancerContractRegistry.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n/// @notice Registered contracts must be one of these types.\nenum ContractType {\n    OTHER, // a blank entry will have a 0-value type, and it's safest to return this in that case\n    POOL_FACTORY,\n    ROUTER,\n    HOOK,\n    ERC4626\n}\n\ninterface IBalancerContractRegistry {\n    /**\n     * @notice Store the state of a registered Balancer contract.\n     * @dev Contracts can be deprecated, so we store an active flag indicating the status. With two flags, we can\n     * differentiate between deprecated and non-existent. The same contract address can have multiple names, but\n     * only one type. If a contract is legitimately multiple types (e.g., a hook that also acts as a router), set\n     * the type to its \"primary\" function: hook, in this case. The \"Other\" type is intended as a catch-all for\n     * things that don't find into the standard types (e.g., helper contracts).\n     *\n     * @param contractType The type of contract (e.g., Router or Hook)\n     * @param isRegistered This flag indicates whether there is an entry for the associated address\n     * @param isActive If there is an entry, this flag indicates whether it is active or deprecated\n     */\n    struct ContractInfo {\n        ContractType contractType;\n        bool isRegistered;\n        bool isActive;\n    }\n\n    /**\n     * @notice Emitted when a new contract is registered.\n     * @param contractType The type of contract being registered\n     * @param contractName The name of the contract being registered\n     * @param contractAddress The address of the contract being registered\n     */\n    event BalancerContractRegistered(\n        ContractType indexed contractType,\n        string indexed contractName,\n        address indexed contractAddress\n    );\n\n    /**\n     * @notice Emitted when a new contract is deregistered (deleted).\n     * @param contractType The type of contract being deregistered\n     * @param contractName The name of the contract being deregistered\n     * @param contractAddress The address of the contract being deregistered\n     */\n    event BalancerContractDeregistered(\n        ContractType indexed contractType,\n        string indexed contractName,\n        address indexed contractAddress\n    );\n\n    /**\n     * @notice Emitted when a registered contract is deprecated.\n     * @dev This sets the `isActive` flag to false.\n     * @param contractAddress The address of the contract being deprecated\n     */\n    event BalancerContractDeprecated(address indexed contractAddress);\n\n    /**\n     * @notice Emitted when an alias is added or updated.\n     * @param contractAlias The alias name\n     * @param contractAddress The address of the contract being deprecated\n     */\n    event ContractAliasUpdated(string indexed contractAlias, address indexed contractAddress);\n\n    /**\n     * @notice A contract has already been registered under the given address.\n     * @dev Both names and addresses must be unique in the primary registration mapping. Though there are two mappings\n     * to accommodate searching by either name or address, conceptually there is a single guaranteed-consistent\n     * name => address => state mapping.\n     *\n     * @param contractType The contract type, provided for documentation purposes\n     * @param contractAddress The address of the previously registered contract\n     */\n    error ContractAddressAlreadyRegistered(ContractType contractType, address contractAddress);\n\n    /**\n     * @notice A contract has already been registered under the given name.\n     * @dev Note that names must be unique; it is not possible to register two contracts with the same name and\n     * different types, or the same name and different addresses.\n     *\n     * @param contractType The registered contract type, provided for documentation purposes\n     * @param contractName The name of the previously registered contract\n     */\n    error ContractNameAlreadyRegistered(ContractType contractType, string contractName);\n\n    /**\n     * @notice The proposed contract name has already been added as an alias.\n     * @dev This could lead to inconsistent (or at least redundant) internal state if allowed.\n     * @param contractName The name of the previously registered contract\n     * @param contractAddress The address of the previously registered contract\n     */\n    error ContractNameInUseAsAlias(string contractName, address contractAddress);\n\n    /**\n     * @notice The proposed alias has already been registered as a contract.\n     * @dev This could lead to inconsistent (or at least redundant) internal state if allowed.\n     * @param contractType The registered contract type, provided for documentation purposes\n     * @param contractName The name of the previously registered contract (and proposed alias)\n     */\n    error ContractAliasInUseAsName(ContractType contractType, string contractName);\n\n    /**\n     * @notice Thrown when attempting to deregister a contract that was not previously registered.\n     * @param contractName The name of the unregistered contract\n     */\n    error ContractNameNotRegistered(string contractName);\n\n    /**\n     * @notice An operation that requires a valid contract specified an unrecognized address.\n     * @dev A contract being deprecated was never registered, or the target of an alias isn't a previously\n     * registered contract.\n     *\n     * @param contractAddress The address of the contract that was not registered\n     */\n    error ContractAddressNotRegistered(address contractAddress);\n\n    /**\n     * @notice Contracts can only be deprecated once.\n     * @param contractAddress The address of the previously deprecated contract\n     */\n    error ContractAlreadyDeprecated(address contractAddress);\n\n    /// @notice Cannot register or deprecate contracts, or add an alias targeting the zero address.\n    error ZeroContractAddress();\n\n    /// @notice Cannot register (or deregister) a contract with an empty string as a name.\n    error InvalidContractName();\n\n    /// @notice Cannot add an empty string as an alias.\n    error InvalidContractAlias();\n\n    /**\n     * @notice Register an official Balancer contract (e.g., a trusted router, standard pool factory, or hook).\n     * @dev This is a permissioned function, and does only basic validation of the address (non-zero) and the name\n     * (not blank). Governance must ensure this is called with valid information. Emits the\n     * `BalancerContractRegistered` event if successful. Reverts if either the name or address is invalid or\n     * already in use.\n     *\n     * @param contractType The type of contract being registered\n     * @param contractName A text description of the contract, usually the deployed version (e.g., \"v3-pool-weighted\")\n     * @param contractAddress The address of the contract\n     */\n    function registerBalancerContract(\n        ContractType contractType,\n        string memory contractName,\n        address contractAddress\n    ) external;\n\n    /**\n     * @notice Deregister an official Balancer contract (e.g., a trusted router, standard pool factory, or hook).\n     * @dev This is a permissioned function, and makes it possible to correct errors without complex update logic.\n     * If a contract was registered with an incorrect type, name, or address, this allows governance to simply delete\n     * it, and register it again with the correct data. It must start with the name, as this is the registry key,\n     * required for complete deletion.\n     *\n     * Note that there might still be an alias targeting the address being deleted, but accessing it will just return\n     * inactive, and this orphan alias can simply be overwritten with `addOrUpdateBalancerContractAlias` to point to\n     * the correct address.\n     *\n     * @param contractName The name of the contract being deprecated (cannot be an alias)\n     */\n    function deregisterBalancerContract(string memory contractName) external;\n\n    /**\n     * @notice Deprecate an official Balancer contract.\n     * @dev This is a permissioned function that sets the `isActive` flag to false in the contract info. It uses the\n     * address instead of the name for maximum clarity, and to avoid having to handle aliases. Addresses and names are\n     * enforced unique, so either the name or address could be specified in principle.\n     *\n     * @param contractAddress The address of the contract being deprecated\n     */\n    function deprecateBalancerContract(address contractAddress) external;\n\n    /**\n     * @notice Add an alias for a registered contract.\n     * @dev This is a permissioned function to support querying by a contract alias. For instance, we might create a\n     * `WeightedPool` alias meaning the \"latest\" version of the `WeightedPoolFactory`, so that off-chain users don't\n     * need to track specific versions. Once added, an alias can also be updated to point to a different address\n     * (e.g., when migrating from the v2 to the v3 weighted pool).\n     *\n     * @param contractAlias An alternate name that can be used to fetch a contract address\n     * @param existingContract The target address of the contract alias\n     */\n    function addOrUpdateBalancerContractAlias(string memory contractAlias, address existingContract) external;\n\n    /**\n     * @notice Determine whether an address is an official contract of the specified type.\n     * @param contractType The type of contract\n     * @param contractAddress The address of the contract\n     * @return isActive True if the given address is a registered and active contract of the specified type\n     */\n    function isActiveBalancerContract(\n        ContractType contractType,\n        address contractAddress\n    ) external view returns (bool isActive);\n\n    /**\n     * @notice Look up a registered contract by type and name.\n     * @dev This could target a particular version (e.g. `20241205-v3-weighted-pool`), or a contract alias\n     * (e.g., `WeightedPool`).\n     *\n     * @param contractType The type of the contract\n     * @param contractName The name of the contract\n     * @return contractAddress The address of the associated contract, if registered, or zero\n     * @return isActive True if the contract was registered and not deprecated\n     */\n    function getBalancerContract(\n        ContractType contractType,\n        string memory contractName\n    ) external view returns (address contractAddress, bool isActive);\n\n    /**\n     * @notice Look up complete information about a registered contract by address.\n     * @param contractAddress The address of the associated contract\n     * @return info ContractInfo struct corresponding to the address\n     */\n    function getBalancerContractInfo(address contractAddress) external view returns (ContractInfo memory info);\n\n    /// @notice Returns `true` if the given address is an active contract under the ROUTER type.\n    function isTrustedRouter(address router) external view returns (bool);\n}\n"},"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IProtocolFeeBurner {\n    event ProtocolFeeBurned(\n        address indexed pool,\n        IERC20 indexed feeToken,\n        uint256 feeTokenAmount,\n        IERC20 indexed targetToken,\n        uint256 targetTokenAmount,\n        address recipient\n    );\n\n    /**\n     * @notice Swap an exact amount of `feeToken` for the `targetToken`, and send proceeds to the `recipient`.\n     * @dev Assumes the sweeper has transferred the tokens to the burner prior to the call.\n     * @param pool The pool the fees came from (only used for documentation in the event)\n     * @param feeToken The feeToken collected from the pool\n     * @param feeTokenAmount The number of fee tokens collected\n     * @param targetToken The desired target token (token out of the swap)\n     * @param recipient The recipient of the swap proceeds\n     */\n    function burn(\n        address pool,\n        IERC20 feeToken,\n        uint256 feeTokenAmount,\n        IERC20 targetToken,\n        address recipient\n    ) external;\n}\n"},"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeSweeper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IProtocolFeeController } from \"../vault/IProtocolFeeController.sol\";\nimport { IProtocolFeeBurner } from \"./IProtocolFeeBurner.sol\";\n\ninterface IProtocolFeeSweeper {\n    /**\n     * @notice Emitted when the target token is set or updated.\n     * @param token The preferred token for receiving protocol fees\n     */\n    event TargetTokenSet(IERC20 indexed token);\n\n    /**\n     * @notice Emitted when the fee recipient address is set or updated.\n     * @param feeRecipient The final destination of collected protocol fees\n     */\n    event FeeRecipientSet(address indexed feeRecipient);\n\n    /**\n     * @notice Emitted when the protocol fee burner contract is set or updated.\n     * @param protocolFeeBurner The contract used to \"burn\" protocol fees (i.e., convert them to the target token)\n     */\n    event ProtocolFeeBurnerSet(address indexed protocolFeeBurner);\n\n    /**\n     * @notice Emitted when a fee token is transferred directly, vs. calling the burner.\n     * @dev This can happen if no target token or burner contract was specified, or the fee token is the target token.\n     * @param pool The pool on which the fee was collected\n     * @param feeToken The token the fee was collected in (also the target token in this case; no swap necessary)\n     * @param feeTokenAmount The number of feeTokens\n     * @param recipient The recipient of the fee tokens\n     */\n    event ProtocolFeeSwept(address indexed pool, IERC20 indexed feeToken, uint256 feeTokenAmount, address recipient);\n\n    /// @notice The fee recipient is invalid.\n    error InvalidFeeRecipient();\n\n    /// @notice The target token is invalid.\n    error InvalidTargetToken();\n\n    /**\n     * @notice Withdraw, convert, and forward protocol fees for a given pool and token.\n     * @dev This will withdraw the fee token from the controller to this contract, and attempt to convert and forward\n     * the proceeds to the fee recipient. Note that this requires governance to grant this contract permission to call\n     * `withdrawProtocolFeesForToken` on the `ProtocolFeeController`. Since the general idea is to sweep when the token\n     * value crosses a certain threshold, we expect that this might be the most commonly used sweeping function.\n     *\n     * This is a permissioned call, since it involves a swap and a permissionless sweep could be triggered at times\n     * disadvantageous to the protocol (e.g., flash crashes).\n     *\n     * @param pool The pool that incurred the fees we're withdrawing\n     * @param feeToken The fee token in the pool\n     */\n    function sweepProtocolFeesForToken(address pool, IERC20 feeToken) external;\n\n    /**\n     * @notice Withdraw, convert, and forward protocol fees for a given pool.\n     * @dev This will withdraw all fee tokens from the controller to this contract, and attempt to convert and forward\n     * the proceeds to the fee recipient. Note that this requires governance to grant this contract permission to call\n     * `withdrawProtocolFees` on the `ProtocolFeeController`.\n     *\n     * This is a permissioned call, since it involves a swap and a permissionless sweep could be triggered at times\n     * disadvantageous to the protocol (e.g., flash crashes).\n     *\n     * @param pool The pool that incurred the fees we're withdrawing\n     */\n    function sweepProtocolFees(address pool) external;\n\n    /**\n     * @notice Return the address of the current `ProtocolFeeController` from the Vault.\n     * @dev It is not immutable in the Vault, so we need to fetch it every time.\n     * @return protocolFeeController The address of the current `ProtocolFeeController`\n     */\n    function getProtocolFeeController() external view returns (IProtocolFeeController);\n\n    /**\n     * @notice Getter for the target token.\n     * @dev This is the token the burner will swap all fee tokens for. Can be changed by `setTargetToken`.\n     * @return targetToken The current target token\n     */\n    function getTargetToken() external view returns (IERC20);\n\n    /**\n     * @notice Getter for the current fee recipient.\n     * @dev Can be changed by `setFeeRecipient`.\n     * @return feeRecipient The current fee recipient\n     */\n    function getFeeRecipient() external view returns (address);\n\n    /**\n     * @notice Getter for the current protocol fee burner.\n     * @dev Can be changed by `setProtocolFeeBurner`.\n     * @return protocolFeeBurner The currently active protocol fee burner\n     */\n    function getProtocolFeeBurner() external view returns (IProtocolFeeBurner);\n\n    /**\n     * @notice Update the fee recipient address.\n     * @dev This is a permissioned function.\n     * @param feeRecipient The address of the new fee recipient\n     */\n    function setFeeRecipient(address feeRecipient) external;\n\n    /**\n     * @notice Update the address of the protocol fee burner, used to convert protocol fees to a target token.\n     * @dev This is a permissioned function. If it is not set, the contract will fall back to forwarding all fee tokens\n     * directly to the fee recipient. Note that if this function is called, `setTargetToken` must be called as well,\n     * or any sweep operations using the burner will revert with `InvalidTargetToken`.\n     *\n     * @param protocolFeeBurner The address of the current protocol fee burner\n     */\n    function setProtocolFeeBurner(IProtocolFeeBurner protocolFeeBurner) external;\n\n    /**\n     * @notice Update the address of the target token.\n     * @dev This is the token for which the burner will attempt to swap all collected fee tokens.\n     * @param targetToken The address of the target token\n     */\n    function setTargetToken(IERC20 targetToken) external;\n\n    /**\n     * @notice Retrieve any tokens \"stuck\" in this contract (e.g., dust, or failed conversions).\n     * @dev It will recover the full balance of all the tokens. This can only be called by the `feeRecipient`.\n     * @param feeTokens The tokens to recover\n     */\n    function recoverProtocolFees(IERC20[] memory feeTokens) external;\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n/// @notice Interface to the Vault's permission system.\ninterface IAuthorizer {\n    /**\n     * @notice Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n     * @param actionId Identifier for the action to be performed\n     * @param account Account trying to perform the action\n     * @param where Target contract for the action\n     * @return success True if the action is permitted\n     */\n    function canPerform(bytes32 actionId, address account, address where) external view returns (bool success);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n// Explicitly import VaultTypes structs because we expect this interface to be heavily used by external developers.\n// Internally, when this list gets too long, we usually just do a simple import to keep things tidy.\nimport {\n    TokenConfig,\n    LiquidityManagement,\n    PoolSwapParams,\n    AfterSwapParams,\n    HookFlags,\n    AddLiquidityKind,\n    RemoveLiquidityKind,\n    SwapKind\n} from \"./VaultTypes.sol\";\n\n/**\n * @notice Interface for pool hooks.\n * @dev Hooks are functions invoked by the Vault at specific points in the flow of each operation. This guarantees that\n * they are called in the correct order, and with the correct arguments. To maintain this security, these functions\n * should only be called by the Vault. The recommended way to do this is to derive the hook contract from `BaseHooks`,\n * then use the `onlyVault` modifier from `VaultGuard`. (See the examples in /pool-hooks.)\n */\ninterface IHooks {\n    /***************************************************************************\n                                   Register\n    ***************************************************************************/\n\n    /**\n     * @notice Hook executed when a pool is registered with a non-zero hooks contract.\n     * @dev Returns true if registration was successful, and false to revert the pool registration.\n     * Make sure this function is properly implemented (e.g. check the factory, and check that the\n     * given pool is from the factory). The Vault address will be msg.sender.\n     *\n     * @param factory Address of the pool factory (contract deploying the pool)\n     * @param pool Address of the pool\n     * @param tokenConfig An array of descriptors for the tokens the pool will manage\n     * @param liquidityManagement Liquidity management flags indicating which functions are enabled\n     * @return success True if the hook allowed the registration, false otherwise\n     */\n    function onRegister(\n        address factory,\n        address pool,\n        TokenConfig[] memory tokenConfig,\n        LiquidityManagement calldata liquidityManagement\n    ) external returns (bool success);\n\n    /**\n     * @notice Return the set of hooks implemented by the contract.\n     * @dev The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined\n     * (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero).\n     * `onRegister` is the only \"mandatory\" hook.\n     *\n     * @return hookFlags Flags indicating which hooks the contract supports\n     */\n    function getHookFlags() external view returns (HookFlags memory hookFlags);\n\n    /***************************************************************************\n                                   Initialize\n    ***************************************************************************/\n\n    /**\n     * @notice Hook executed before pool initialization.\n     * @dev Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param exactAmountsIn Exact amounts of input tokens\n     * @param userData Optional, arbitrary data sent with the encoded request\n     * @return success True if the pool wishes to proceed with initialization\n     */\n    function onBeforeInitialize(uint256[] memory exactAmountsIn, bytes memory userData) external returns (bool success);\n\n    /**\n     * @notice Hook to be executed after pool initialization.\n     * @dev Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param exactAmountsIn Exact amounts of input tokens\n     * @param bptAmountOut Amount of pool tokens minted during initialization\n     * @param userData Optional, arbitrary data sent with the encoded request\n     * @return success True if the pool accepts the initialization results\n     */\n    function onAfterInitialize(\n        uint256[] memory exactAmountsIn,\n        uint256 bptAmountOut,\n        bytes memory userData\n    ) external returns (bool success);\n\n    /***************************************************************************\n                                   Add Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Hook to be executed before adding liquidity.\n     * @dev Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n     * @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n     * @param kind The add liquidity operation type (e.g., proportional, custom)\n     * @param maxAmountsInScaled18 Maximum amounts of input tokens\n     * @param minBptAmountOut Minimum amount of output pool tokens\n     * @param balancesScaled18 Current pool balances, sorted in token registration order\n     * @param userData Optional, arbitrary data sent with the encoded request\n     * @return success True if the pool wishes to proceed with settlement\n     */\n    function onBeforeAddLiquidity(\n        address router,\n        address pool,\n        AddLiquidityKind kind,\n        uint256[] memory maxAmountsInScaled18,\n        uint256 minBptAmountOut,\n        uint256[] memory balancesScaled18,\n        bytes memory userData\n    ) external returns (bool success);\n\n    /**\n     * @notice Hook to be executed after adding liquidity.\n     * @dev Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore\n     * `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n     * `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n     * @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n     * @param kind The add liquidity operation type (e.g., proportional, custom)\n     * @param amountsInScaled18 Actual amounts of tokens added, sorted in token registration order\n     * @param amountsInRaw Actual amounts of tokens added, sorted in token registration order\n     * @param bptAmountOut Amount of pool tokens minted\n     * @param balancesScaled18 Current pool balances, sorted in token registration order\n     * @param userData Additional (optional) data provided by the user\n     * @return success True if the pool wishes to proceed with settlement\n     * @return hookAdjustedAmountsInRaw New amountsInRaw, potentially modified by the hook\n     */\n    function onAfterAddLiquidity(\n        address router,\n        address pool,\n        AddLiquidityKind kind,\n        uint256[] memory amountsInScaled18,\n        uint256[] memory amountsInRaw,\n        uint256 bptAmountOut,\n        uint256[] memory balancesScaled18,\n        bytes memory userData\n    ) external returns (bool success, uint256[] memory hookAdjustedAmountsInRaw);\n\n    /***************************************************************************\n                                 Remove Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Hook to be executed before removing liquidity.\n     * @dev Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n     * @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n     * @param kind The type of remove liquidity operation (e.g., proportional, custom)\n     * @param maxBptAmountIn Maximum amount of input pool tokens\n     * @param minAmountsOutScaled18 Minimum output amounts, sorted in token registration order\n     * @param balancesScaled18 Current pool balances, sorted in token registration order\n     * @param userData Optional, arbitrary data sent with the encoded request\n     * @return success True if the pool wishes to proceed with settlement\n     */\n    function onBeforeRemoveLiquidity(\n        address router,\n        address pool,\n        RemoveLiquidityKind kind,\n        uint256 maxBptAmountIn,\n        uint256[] memory minAmountsOutScaled18,\n        uint256[] memory balancesScaled18,\n        bytes memory userData\n    ) external returns (bool success);\n\n    /**\n     * @notice Hook to be executed after removing liquidity.\n     * @dev Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore\n     * `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n     * `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n     * @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n     * @param kind The type of remove liquidity operation (e.g., proportional, custom)\n     * @param bptAmountIn Amount of pool tokens to burn\n     * @param amountsOutScaled18 Scaled amount of tokens to receive, sorted in token registration order\n     * @param amountsOutRaw Actual amount of tokens to receive, sorted in token registration order\n     * @param balancesScaled18 Current pool balances, sorted in token registration order\n     * @param userData Additional (optional) data provided by the user\n     * @return success True if the pool wishes to proceed with settlement\n     * @return hookAdjustedAmountsOutRaw New amountsOutRaw, potentially modified by the hook\n     */\n    function onAfterRemoveLiquidity(\n        address router,\n        address pool,\n        RemoveLiquidityKind kind,\n        uint256 bptAmountIn,\n        uint256[] memory amountsOutScaled18,\n        uint256[] memory amountsOutRaw,\n        uint256[] memory balancesScaled18,\n        bytes memory userData\n    ) external returns (bool success, uint256[] memory hookAdjustedAmountsOutRaw);\n\n    /***************************************************************************\n                                    Swap\n    ***************************************************************************/\n\n    /**\n     * @notice Called before a swap to give the Pool an opportunity to perform actions.\n     * @dev Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the\n     * `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param params Swap parameters (see PoolSwapParams for struct definition)\n     * @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n     * @return success True if the pool wishes to proceed with settlement\n     */\n    function onBeforeSwap(PoolSwapParams calldata params, address pool) external returns (bool success);\n\n    /**\n     * @notice Called after a swap to perform further actions once the balances have been updated by the swap.\n     * @dev Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore\n     * `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should\n     * use the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param params Swap parameters (see above for struct definition)\n     * @return success True if the pool wishes to proceed with settlement\n     * @return hookAdjustedAmountCalculatedRaw New amount calculated, potentially modified by the hook\n     */\n    function onAfterSwap(\n        AfterSwapParams calldata params\n    ) external returns (bool success, uint256 hookAdjustedAmountCalculatedRaw);\n\n    /**\n     * @notice Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees.\n     * @dev Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param params Swap parameters (see PoolSwapParams for struct definition)\n     * @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n     * @param staticSwapFeePercentage 18-decimal FP value of the static swap fee percentage, for reference\n     * @return success True if the pool wishes to proceed with settlement\n     * @return dynamicSwapFeePercentage Value of the swap fee percentage, as an 18-decimal FP value\n     */\n    function onComputeDynamicSwapFeePercentage(\n        PoolSwapParams calldata params,\n        address pool,\n        uint256 staticSwapFeePercentage\n    ) external view returns (bool success, uint256 dynamicSwapFeePercentage);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IVault } from \"./IVault.sol\";\n\n/// @notice Contract that handles protocol and pool creator fees for the Vault.\ninterface IProtocolFeeController {\n    /**\n     * @notice Emitted when the protocol swap fee percentage is updated.\n     * @param swapFeePercentage The updated protocol swap fee percentage\n     */\n    event GlobalProtocolSwapFeePercentageChanged(uint256 swapFeePercentage);\n\n    /**\n     * @notice Emitted when the protocol yield fee percentage is updated.\n     * @param yieldFeePercentage The updated protocol yield fee percentage\n     */\n    event GlobalProtocolYieldFeePercentageChanged(uint256 yieldFeePercentage);\n\n    /**\n     * @notice Emitted when the protocol swap fee percentage is updated for a specific pool.\n     * @param pool The pool whose protocol swap fee will be changed\n     * @param swapFeePercentage The updated protocol swap fee percentage\n     */\n    event ProtocolSwapFeePercentageChanged(address indexed pool, uint256 swapFeePercentage);\n\n    /**\n     * @notice Emitted when the protocol yield fee percentage is updated for a specific pool.\n     * @param pool The pool whose protocol yield fee will be changed\n     * @param yieldFeePercentage The updated protocol yield fee percentage\n     */\n    event ProtocolYieldFeePercentageChanged(address indexed pool, uint256 yieldFeePercentage);\n\n    /**\n     * @notice Emitted when the pool creator swap fee percentage of a pool is updated.\n     * @param pool The pool whose pool creator swap fee will be changed\n     * @param poolCreatorSwapFeePercentage The new pool creator swap fee percentage for the pool\n     */\n    event PoolCreatorSwapFeePercentageChanged(address indexed pool, uint256 poolCreatorSwapFeePercentage);\n\n    /**\n     * @notice Emitted when the pool creator yield fee percentage of a pool is updated.\n     * @param pool The pool whose pool creator yield fee will be changed\n     * @param poolCreatorYieldFeePercentage The new pool creator yield fee percentage for the pool\n     */\n    event PoolCreatorYieldFeePercentageChanged(address indexed pool, uint256 poolCreatorYieldFeePercentage);\n\n    /**\n     * @notice Logs the collection of protocol swap fees in a specific token and amount.\n     * @dev Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs\n     * in the Vault, but fee collection happens in the ProtocolFeeController, the swap fees reported here may encompass\n     * multiple operations.\n     *\n     * @param pool The pool on which the swap fee was charged\n     * @param token The token in which the swap fee was charged\n     * @param amount The amount of the token collected in fees\n     */\n    event ProtocolSwapFeeCollected(address indexed pool, IERC20 indexed token, uint256 amount);\n\n    /**\n     * @notice Logs the collection of protocol yield fees in a specific token and amount.\n     * @dev Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs\n     * in the Vault, but fee collection happens in the ProtocolFeeController, the yield fees reported here may encompass\n     * multiple operations.\n     *\n     * @param pool The pool on which the yield fee was charged\n     * @param token The token in which the yield fee was charged\n     * @param amount The amount of the token collected in fees\n     */\n    event ProtocolYieldFeeCollected(address indexed pool, IERC20 indexed token, uint256 amount);\n\n    /**\n     * @notice Logs the withdrawal of protocol fees in a specific token and amount.\n     * @param pool The pool from which protocol fees are being withdrawn\n     * @param token The token being withdrawn\n     * @param recipient The recipient of the funds\n     * @param amount The amount of the fee token that was withdrawn\n     */\n    event ProtocolFeesWithdrawn(address indexed pool, IERC20 indexed token, address indexed recipient, uint256 amount);\n\n    /**\n     * @notice Logs the withdrawal of pool creator fees in a specific token and amount.\n     * @param pool The pool from which pool creator fees are being withdrawn\n     * @param token The token being withdrawn\n     * @param recipient The recipient of the funds (the pool creator if permissionless, or another account)\n     * @param amount The amount of the fee token that was withdrawn\n     */\n    event PoolCreatorFeesWithdrawn(\n        address indexed pool,\n        IERC20 indexed token,\n        address indexed recipient,\n        uint256 amount\n    );\n\n    /**\n     * @notice Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\n     * @dev Note that this is checked for both the global and pool-specific protocol swap fee percentages.\n     */\n    error ProtocolSwapFeePercentageTooHigh();\n\n    /**\n     * @notice Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\n     * @dev Note that this is checked for both the global and pool-specific protocol yield fee percentages.\n     */\n    error ProtocolYieldFeePercentageTooHigh();\n\n    /**\n     * @notice Error raised if there is no pool creator on a withdrawal attempt from the given pool.\n     * @param pool The pool with no creator\n     */\n    error PoolCreatorNotRegistered(address pool);\n\n    /**\n     * @notice Error raised if the wrong account attempts to withdraw pool creator fees.\n     * @param caller The account attempting to withdraw pool creator fees\n     * @param pool The pool the caller tried to withdraw from\n     */\n    error CallerIsNotPoolCreator(address caller, address pool);\n\n    /// @notice Error raised when the pool creator swap or yield fee percentage exceeds the maximum allowed value.\n    error PoolCreatorFeePercentageTooHigh();\n\n    /**\n     * @notice Get the address of the main Vault contract.\n     * @return vault The Vault address\n     */\n    function vault() external view returns (IVault);\n\n    /**\n     * @notice Collects aggregate fees from the Vault for a given pool.\n     * @param pool The pool with aggregate fees\n     */\n    function collectAggregateFees(address pool) external;\n\n    /**\n     * @notice Getter for the current global protocol swap fee.\n     * @return protocolSwapFeePercentage The global protocol swap fee percentage\n     */\n    function getGlobalProtocolSwapFeePercentage() external view returns (uint256 protocolSwapFeePercentage);\n\n    /**\n     * @notice Getter for the current global protocol yield fee.\n     * @return protocolYieldFeePercentage The global protocol yield fee percentage\n     */\n    function getGlobalProtocolYieldFeePercentage() external view returns (uint256 protocolYieldFeePercentage);\n\n    /**\n     * @notice Getter for the current protocol swap fee for a given pool.\n     * @param pool The address of the pool\n     * @return protocolSwapFeePercentage The global protocol swap fee percentage\n     * @return isOverride True if the protocol fee has been overridden\n     */\n    function getPoolProtocolSwapFeeInfo(\n        address pool\n    ) external view returns (uint256 protocolSwapFeePercentage, bool isOverride);\n\n    /**\n     * @notice Getter for the current protocol yield fee for a given pool.\n     * @param pool The address of the pool\n     * @return protocolYieldFeePercentage The global protocol yield fee percentage\n     * @return isOverride True if the protocol fee has been overridden\n     */\n    function getPoolProtocolYieldFeeInfo(\n        address pool\n    ) external view returns (uint256 protocolYieldFeePercentage, bool isOverride);\n\n    /**\n     * @notice Returns the amount of each pool token allocated to the protocol for withdrawal.\n     * @dev Includes both swap and yield fees.\n     * @param pool The address of the pool on which fees were collected\n     * @return feeAmounts The total amounts of each token available for withdrawal, sorted in token registration order\n     */\n    function getProtocolFeeAmounts(address pool) external view returns (uint256[] memory feeAmounts);\n\n    /**\n     * @notice Returns the amount of each pool token allocated to the pool creator for withdrawal.\n     * @dev Includes both swap and yield fees.\n     * @param pool The address of the pool on which fees were collected\n     * @return feeAmounts The total amounts of each token available for withdrawal, sorted in token registration order\n     */\n    function getPoolCreatorFeeAmounts(address pool) external view returns (uint256[] memory feeAmounts);\n\n    /**\n     * @notice Returns a calculated aggregate percentage from protocol and pool creator fee percentages.\n     * @dev Not tied to any particular pool; this just performs the low-level \"additive fee\" calculation. Note that\n     * pool creator fees are calculated based on creatorAndLpFees, and not in totalFees. Since aggregate fees are\n     * stored in the Vault with 24-bit precision, this will truncate any values that require greater precision.\n     * It is expected that pool creators will negotiate with the DAO and agree on reasonable values for these fee\n     * components, but the truncation ensures it will not revert for any valid set of fee percentages.\n     *\n     * See example below:\n     *\n     * tokenOutAmount = 10000; poolSwapFeePct = 10%; protocolFeePct = 40%; creatorFeePct = 60%\n     * totalFees = tokenOutAmount * poolSwapFeePct = 10000 * 10% = 1000\n     * protocolFees = totalFees * protocolFeePct = 1000 * 40% = 400\n     * creatorAndLpFees = totalFees - protocolFees = 1000 - 400 = 600\n     * creatorFees = creatorAndLpFees * creatorFeePct = 600 * 60% = 360\n     * lpFees (will stay in the pool) = creatorAndLpFees - creatorFees = 600 - 360 = 240\n     *\n     * @param protocolFeePercentage The protocol portion of the aggregate fee percentage\n     * @param poolCreatorFeePercentage The pool creator portion of the aggregate fee percentage\n     * @return aggregateFeePercentage The computed aggregate percentage\n     */\n    function computeAggregateFeePercentage(\n        uint256 protocolFeePercentage,\n        uint256 poolCreatorFeePercentage\n    ) external pure returns (uint256 aggregateFeePercentage);\n\n    /**\n     * @notice Override the protocol swap fee percentage for a specific pool.\n     * @dev This is a permissionless call, and will set the pool's fee to the current global fee, if it is different\n     * from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\n     *\n     * @param pool The pool for which we are setting the protocol swap fee\n     */\n    function updateProtocolSwapFeePercentage(address pool) external;\n\n    /**\n     * @notice Override the protocol yield fee percentage for a specific pool.\n     * @dev This is a permissionless call, and will set the pool's fee to the current global fee, if it is different\n     * from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\n     *\n     * @param pool The pool for which we are setting the protocol yield fee\n     */\n    function updateProtocolYieldFeePercentage(address pool) external;\n\n    /***************************************************************************\n                                Permissioned Functions\n    ***************************************************************************/\n\n    /**\n     * @notice Add pool-specific entries to the protocol swap and yield percentages.\n     * @dev This must be called from the Vault during pool registration. It will initialize the pool to the global\n     * protocol fee percentage values (or 0, if the `protocolFeeExempt` flags is set), and return the initial aggregate\n     * fee percentages, based on an initial pool creator fee of 0.\n     *\n     * @param pool The address of the pool being registered\n     * @param poolCreator The address of the pool creator (or 0 if there won't be a pool creator fee)\n     * @param protocolFeeExempt If true, the pool is initially exempt from protocol fees\n     * @return aggregateSwapFeePercentage The initial aggregate swap fee percentage\n     * @return aggregateYieldFeePercentage The initial aggregate yield fee percentage\n     */\n    function registerPool(\n        address pool,\n        address poolCreator,\n        bool protocolFeeExempt\n    ) external returns (uint256 aggregateSwapFeePercentage, uint256 aggregateYieldFeePercentage);\n\n    /**\n     * @notice Set the global protocol swap fee percentage, used by standard pools.\n     * @param newProtocolSwapFeePercentage The new protocol swap fee percentage\n     */\n    function setGlobalProtocolSwapFeePercentage(uint256 newProtocolSwapFeePercentage) external;\n\n    /**\n     * @notice Set the global protocol yield fee percentage, used by standard pools.\n     * @param newProtocolYieldFeePercentage The new protocol yield fee percentage\n     */\n    function setGlobalProtocolYieldFeePercentage(uint256 newProtocolYieldFeePercentage) external;\n\n    /**\n     * @notice Override the protocol swap fee percentage for a specific pool.\n     * @param pool The address of the pool for which we are setting the protocol swap fee\n     * @param newProtocolSwapFeePercentage The new protocol swap fee percentage for the pool\n     */\n    function setProtocolSwapFeePercentage(address pool, uint256 newProtocolSwapFeePercentage) external;\n\n    /**\n     * @notice Override the protocol yield fee percentage for a specific pool.\n     * @param pool The address of the pool for which we are setting the protocol yield fee\n     * @param newProtocolYieldFeePercentage The new protocol yield fee percentage for the pool\n     */\n    function setProtocolYieldFeePercentage(address pool, uint256 newProtocolYieldFeePercentage) external;\n\n    /**\n     * @notice Assigns a new pool creator swap fee percentage to the specified pool.\n     * @dev Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to\n     * the \"net\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the\n     * pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\n     *\n     * @param pool The address of the pool for which the pool creator fee will be changed\n     * @param poolCreatorSwapFeePercentage The new pool creator swap fee percentage to apply to the pool\n     */\n    function setPoolCreatorSwapFeePercentage(address pool, uint256 poolCreatorSwapFeePercentage) external;\n\n    /**\n     * @notice Assigns a new pool creator yield fee percentage to the specified pool.\n     * @dev Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to\n     * the \"net\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the\n     * pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\n     *\n     * @param pool The address of the pool for which the pool creator fee will be changed\n     * @param poolCreatorYieldFeePercentage The new pool creator yield fee percentage to apply to the pool\n     */\n    function setPoolCreatorYieldFeePercentage(address pool, uint256 poolCreatorYieldFeePercentage) external;\n\n    /**\n     * @notice Withdraw collected protocol fees for a given pool (all tokens). This is a permissioned function.\n     * @dev Sends swap and yield protocol fees to the recipient.\n     * @param pool The pool on which fees were collected\n     * @param recipient Address to send the tokens\n     */\n    function withdrawProtocolFees(address pool, address recipient) external;\n\n    /**\n     * @notice Withdraw collected protocol fees for a given pool and a given token. This is a permissioned function.\n     * @dev Sends swap and yield protocol fees to the recipient.\n     * @param pool The pool on which fees were collected\n     * @param recipient Address to send the tokens\n     * @param token Token to withdraw\n     */\n    function withdrawProtocolFeesForToken(address pool, address recipient, IERC20 token) external;\n\n    /**\n     * @notice Withdraw collected pool creator fees for a given pool. This is a permissioned function.\n     * @dev Sends swap and yield pool creator fees to the recipient.\n     * @param pool The pool on which fees were collected\n     * @param recipient Address to send the tokens\n     */\n    function withdrawPoolCreatorFees(address pool, address recipient) external;\n\n    /**\n     * @notice Withdraw collected pool creator fees for a given pool.\n     * @dev Sends swap and yield pool creator fees to the registered poolCreator. Since this is a known and immutable\n     * value, this function is permissionless.\n     *\n     * @param pool The pool on which fees were collected\n     */\n    function withdrawPoolCreatorFees(address pool) external;\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { AddLiquidityKind, RemoveLiquidityKind, SwapKind } from \"./VaultTypes.sol\";\n\n/// @notice User-friendly interface to basic Vault operations: swap, add/remove liquidity, and associated queries.\ninterface IRouter {\n    /***************************************************************************\n                                Pool Initialization\n    ***************************************************************************/\n\n    /**\n     * @notice Data for the pool initialization hook.\n     * @param sender Account originating the pool initialization operation\n     * @param pool Address of the liquidity pool\n     * @param tokens Pool tokens, in token registration order\n     * @param exactAmountsIn Exact amounts of tokens to be added, sorted in token registration order\n     * @param minBptAmountOut Minimum amount of pool tokens to be received\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the request to add initial liquidity\n     */\n    struct InitializeHookParams {\n        address sender;\n        address pool;\n        IERC20[] tokens;\n        uint256[] exactAmountsIn;\n        uint256 minBptAmountOut;\n        bool wethIsEth;\n        bytes userData;\n    }\n\n    /**\n     * @notice Initialize a liquidity pool.\n     * @param pool Address of the liquidity pool\n     * @param tokens Pool tokens, in token registration order\n     * @param exactAmountsIn Exact amounts of tokens to be added, sorted in token registration order\n     * @param minBptAmountOut Minimum amount of pool tokens to be received\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the request to add initial liquidity\n     * @return bptAmountOut Actual amount of pool tokens minted in exchange for initial liquidity\n     */\n    function initialize(\n        address pool,\n        IERC20[] memory tokens,\n        uint256[] memory exactAmountsIn,\n        uint256 minBptAmountOut,\n        bool wethIsEth,\n        bytes memory userData\n    ) external payable returns (uint256 bptAmountOut);\n\n    /***************************************************************************\n                                   Add Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Adds liquidity to a pool with proportional token amounts, receiving an exact amount of pool tokens.\n     * @param pool Address of the liquidity pool\n     * @param maxAmountsIn Maximum amounts of tokens to be added, sorted in token registration order\n     * @param exactBptAmountOut Exact amount of pool tokens to be received\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the request to add liquidity\n     * @return amountsIn Actual amounts of tokens added, sorted in token registration order\n     */\n    function addLiquidityProportional(\n        address pool,\n        uint256[] memory maxAmountsIn,\n        uint256 exactBptAmountOut,\n        bool wethIsEth,\n        bytes memory userData\n    ) external payable returns (uint256[] memory amountsIn);\n\n    /**\n     * @notice Adds liquidity to a pool with arbitrary token amounts.\n     * @param pool Address of the liquidity pool\n     * @param exactAmountsIn Exact amounts of tokens to be added, sorted in token registration order\n     * @param minBptAmountOut Minimum amount of pool tokens to be received\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the request to add liquidity\n     * @return bptAmountOut Actual amount of pool tokens received\n     */\n    function addLiquidityUnbalanced(\n        address pool,\n        uint256[] memory exactAmountsIn,\n        uint256 minBptAmountOut,\n        bool wethIsEth,\n        bytes memory userData\n    ) external payable returns (uint256 bptAmountOut);\n\n    /**\n     * @notice Adds liquidity to a pool in a single token, receiving an exact amount of pool tokens.\n     * @param pool Address of the liquidity pool\n     * @param tokenIn Token used to add liquidity\n     * @param maxAmountIn Maximum amount of tokens to be added\n     * @param exactBptAmountOut Exact amount of pool tokens to be received\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the request to add liquidity\n     * @return amountIn Actual amount of tokens added\n     */\n    function addLiquiditySingleTokenExactOut(\n        address pool,\n        IERC20 tokenIn,\n        uint256 maxAmountIn,\n        uint256 exactBptAmountOut,\n        bool wethIsEth,\n        bytes memory userData\n    ) external payable returns (uint256 amountIn);\n\n    /**\n     * @notice Adds liquidity to a pool by donating the amounts in (no BPT out).\n     * @dev To support donation, the pool config `enableDonation` flag must be set to true.\n     * @param pool Address of the liquidity pool\n     * @param amountsIn Amounts of tokens to be donated, sorted in token registration order\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the request to donate liquidity\n     */\n    function donate(address pool, uint256[] memory amountsIn, bool wethIsEth, bytes memory userData) external payable;\n\n    /**\n     * @notice Adds liquidity to a pool with a custom request.\n     * @dev The given maximum and minimum amounts given may be interpreted as exact depending on the pool type.\n     * In any case the caller can expect them to be hard boundaries for the request.\n     *\n     * @param pool Address of the liquidity pool\n     * @param maxAmountsIn Maximum amounts of tokens to be added, sorted in token registration order\n     * @param minBptAmountOut Minimum amount of pool tokens to be received\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the request to add liquidity\n     * @return amountsIn Actual amounts of tokens added, sorted in token registration order\n     * @return bptAmountOut Actual amount of pool tokens received\n     * @return returnData Arbitrary (optional) data with an encoded response from the pool\n     */\n    function addLiquidityCustom(\n        address pool,\n        uint256[] memory maxAmountsIn,\n        uint256 minBptAmountOut,\n        bool wethIsEth,\n        bytes memory userData\n    ) external payable returns (uint256[] memory amountsIn, uint256 bptAmountOut, bytes memory returnData);\n\n    /***************************************************************************\n                                 Remove Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Removes liquidity with proportional token amounts from a pool, burning an exact pool token amount.\n     * @param pool Address of the liquidity pool\n     * @param exactBptAmountIn Exact amount of pool tokens provided\n     * @param minAmountsOut Minimum amounts of tokens to be received, sorted in token registration order\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the request to remove liquidity\n     * @return amountsOut Actual amounts of tokens received, sorted in token registration order\n     */\n    function removeLiquidityProportional(\n        address pool,\n        uint256 exactBptAmountIn,\n        uint256[] memory minAmountsOut,\n        bool wethIsEth,\n        bytes memory userData\n    ) external payable returns (uint256[] memory amountsOut);\n\n    /**\n     * @notice Removes liquidity from a pool via a single token, burning an exact pool token amount.\n     * @param pool Address of the liquidity pool\n     * @param exactBptAmountIn Exact amount of pool tokens provided\n     * @param tokenOut Token used to remove liquidity\n     * @param minAmountOut Minimum amount of tokens to be received\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the request to remove liquidity\n     * @return amountOut Actual amount of tokens received\n     */\n    function removeLiquiditySingleTokenExactIn(\n        address pool,\n        uint256 exactBptAmountIn,\n        IERC20 tokenOut,\n        uint256 minAmountOut,\n        bool wethIsEth,\n        bytes memory userData\n    ) external payable returns (uint256 amountOut);\n\n    /**\n     * @notice Removes liquidity from a pool via a single token, specifying the exact amount of tokens to receive.\n     * @param pool Address of the liquidity pool\n     * @param maxBptAmountIn Maximum amount of pool tokens provided\n     * @param tokenOut Token used to remove liquidity\n     * @param exactAmountOut Exact amount of tokens to be received\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the request to remove liquidity\n     * @return bptAmountIn Actual amount of pool tokens burned\n     */\n    function removeLiquiditySingleTokenExactOut(\n        address pool,\n        uint256 maxBptAmountIn,\n        IERC20 tokenOut,\n        uint256 exactAmountOut,\n        bool wethIsEth,\n        bytes memory userData\n    ) external payable returns (uint256 bptAmountIn);\n\n    /**\n     * @notice Removes liquidity from a pool with a custom request.\n     * @dev The given maximum and minimum amounts given may be interpreted as exact depending on the pool type.\n     * In any case the caller can expect them to be hard boundaries for the request.\n     *\n     * @param pool Address of the liquidity pool\n     * @param maxBptAmountIn Maximum amount of pool tokens provided\n     * @param minAmountsOut Minimum amounts of tokens to be received, sorted in token registration order\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the request to remove liquidity\n     * @return bptAmountIn Actual amount of pool tokens burned\n     * @return amountsOut Actual amounts of tokens received, sorted in token registration order\n     * @return returnData Arbitrary (optional) data with an encoded response from the pool\n     */\n    function removeLiquidityCustom(\n        address pool,\n        uint256 maxBptAmountIn,\n        uint256[] memory minAmountsOut,\n        bool wethIsEth,\n        bytes memory userData\n    ) external payable returns (uint256 bptAmountIn, uint256[] memory amountsOut, bytes memory returnData);\n\n    /**\n     * @notice Removes liquidity proportionally, burning an exact pool token amount. Only available in Recovery Mode.\n     * @param pool Address of the liquidity pool\n     * @param exactBptAmountIn Exact amount of pool tokens provided\n     * @param minAmountsOut Minimum amounts of tokens to be received, sorted in token registration order\n     * @return amountsOut Actual amounts of tokens received, sorted in token registration order\n     */\n    function removeLiquidityRecovery(\n        address pool,\n        uint256 exactBptAmountIn,\n        uint256[] memory minAmountsOut\n    ) external payable returns (uint256[] memory amountsOut);\n\n    /***************************************************************************\n                                       Swaps\n    ***************************************************************************/\n\n    /**\n     * @notice Data for the swap hook.\n     * @param sender Account initiating the swap operation\n     * @param kind Type of swap (exact in or exact out)\n     * @param pool Address of the liquidity pool\n     * @param tokenIn Token to be swapped from\n     * @param tokenOut Token to be swapped to\n     * @param amountGiven Amount given based on kind of the swap (e.g., tokenIn for exact in)\n     * @param limit Maximum or minimum amount based on the kind of swap (e.g., maxAmountIn for exact out)\n     * @param deadline Deadline for the swap, after which it will revert\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the swap request\n     */\n    struct SwapSingleTokenHookParams {\n        address sender;\n        SwapKind kind;\n        address pool;\n        IERC20 tokenIn;\n        IERC20 tokenOut;\n        uint256 amountGiven;\n        uint256 limit;\n        uint256 deadline;\n        bool wethIsEth;\n        bytes userData;\n    }\n\n    /**\n     * @notice Executes a swap operation specifying an exact input token amount.\n     * @param pool Address of the liquidity pool\n     * @param tokenIn Token to be swapped from\n     * @param tokenOut Token to be swapped to\n     * @param exactAmountIn Exact amounts of input tokens to send\n     * @param minAmountOut Minimum amount of tokens to be received\n     * @param deadline Deadline for the swap, after which it will revert\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @param userData Additional (optional) data sent with the swap request\n     * @return amountOut Calculated amount of output tokens to be received in exchange for the given input tokens\n     */\n    function swapSingleTokenExactIn(\n        address pool,\n        IERC20 tokenIn,\n        IERC20 tokenOut,\n        uint256 exactAmountIn,\n        uint256 minAmountOut,\n        uint256 deadline,\n        bool wethIsEth,\n        bytes calldata userData\n    ) external payable returns (uint256 amountOut);\n\n    /**\n     * @notice Executes a swap operation specifying an exact output token amount.\n     * @param pool Address of the liquidity pool\n     * @param tokenIn Token to be swapped from\n     * @param tokenOut Token to be swapped to\n     * @param exactAmountOut Exact amounts of input tokens to receive\n     * @param maxAmountIn Maximum amount of tokens to be sent\n     * @param deadline Deadline for the swap, after which it will revert\n     * @param userData Additional (optional) data sent with the swap request\n     * @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n     * @return amountIn Calculated amount of input tokens to be sent in exchange for the requested output tokens\n     */\n    function swapSingleTokenExactOut(\n        address pool,\n        IERC20 tokenIn,\n        IERC20 tokenOut,\n        uint256 exactAmountOut,\n        uint256 maxAmountIn,\n        uint256 deadline,\n        bool wethIsEth,\n        bytes calldata userData\n    ) external payable returns (uint256 amountIn);\n\n    /***************************************************************************\n                                      Queries\n    ***************************************************************************/\n\n    /**\n     * @notice Queries an `addLiquidityProportional` operation without actually executing it.\n     * @param pool Address of the liquidity pool\n     * @param exactBptAmountOut Exact amount of pool tokens to be received\n     * @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n     * @param userData Additional (optional) data sent with the query request\n     * @return amountsIn Expected amounts of tokens to add, sorted in token registration order\n     */\n    function queryAddLiquidityProportional(\n        address pool,\n        uint256 exactBptAmountOut,\n        address sender,\n        bytes memory userData\n    ) external returns (uint256[] memory amountsIn);\n\n    /**\n     * @notice Queries an `addLiquidityUnbalanced` operation without actually executing it.\n     * @param pool Address of the liquidity pool\n     * @param exactAmountsIn Exact amounts of tokens to be added, sorted in token registration order\n     * @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n     * @param userData Additional (optional) data sent with the query request\n     * @return bptAmountOut Expected amount of pool tokens to receive\n     */\n    function queryAddLiquidityUnbalanced(\n        address pool,\n        uint256[] memory exactAmountsIn,\n        address sender,\n        bytes memory userData\n    ) external returns (uint256 bptAmountOut);\n\n    /**\n     * @notice Queries an `addLiquiditySingleTokenExactOut` operation without actually executing it.\n     * @param pool Address of the liquidity pool\n     * @param tokenIn Token used to add liquidity\n     * @param exactBptAmountOut Expected exact amount of pool tokens to receive\n     * @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n     * @param userData Additional (optional) data sent with the query request\n     * @return amountIn Expected amount of tokens to add\n     */\n    function queryAddLiquiditySingleTokenExactOut(\n        address pool,\n        IERC20 tokenIn,\n        uint256 exactBptAmountOut,\n        address sender,\n        bytes memory userData\n    ) external returns (uint256 amountIn);\n\n    /**\n     * @notice Queries an `addLiquidityCustom` operation without actually executing it.\n     * @param pool Address of the liquidity pool\n     * @param maxAmountsIn Maximum amounts of tokens to be added, sorted in token registration order\n     * @param minBptAmountOut Expected minimum amount of pool tokens to receive\n     * @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n     * @param userData Additional (optional) data sent with the query request\n     * @return amountsIn Expected amounts of tokens to add, sorted in token registration order\n     * @return bptAmountOut Expected amount of pool tokens to receive\n     * @return returnData Arbitrary (optional) data with an encoded response from the pool\n     */\n    function queryAddLiquidityCustom(\n        address pool,\n        uint256[] memory maxAmountsIn,\n        uint256 minBptAmountOut,\n        address sender,\n        bytes memory userData\n    ) external returns (uint256[] memory amountsIn, uint256 bptAmountOut, bytes memory returnData);\n\n    /**\n     * @notice Queries a `removeLiquidityProportional` operation without actually executing it.\n     * @param pool Address of the liquidity pool\n     * @param exactBptAmountIn Exact amount of pool tokens provided for the query\n     * @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n     * @param userData Additional (optional) data sent with the query request\n     * @return amountsOut Expected amounts of tokens to receive, sorted in token registration order\n     */\n    function queryRemoveLiquidityProportional(\n        address pool,\n        uint256 exactBptAmountIn,\n        address sender,\n        bytes memory userData\n    ) external returns (uint256[] memory amountsOut);\n\n    /**\n     * @notice Queries a `removeLiquiditySingleTokenExactIn` operation without actually executing it.\n     * @param pool Address of the liquidity pool\n     * @param exactBptAmountIn Exact amount of pool tokens provided for the query\n     * @param tokenOut Token used to remove liquidity\n     * @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n     * @param userData Additional (optional) data sent with the query request\n     * @return amountOut Expected amount of tokens to receive\n     */\n    function queryRemoveLiquiditySingleTokenExactIn(\n        address pool,\n        uint256 exactBptAmountIn,\n        IERC20 tokenOut,\n        address sender,\n        bytes memory userData\n    ) external returns (uint256 amountOut);\n\n    /**\n     * @notice Queries a `removeLiquiditySingleTokenExactOut` operation without actually executing it.\n     * @param pool Address of the liquidity pool\n     * @param tokenOut Token used to remove liquidity\n     * @param exactAmountOut Expected exact amount of tokens to receive\n     * @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n     * @param userData Additional (optional) data sent with the query request\n     * @return bptAmountIn Expected amount of pool tokens to burn\n     */\n    function queryRemoveLiquiditySingleTokenExactOut(\n        address pool,\n        IERC20 tokenOut,\n        uint256 exactAmountOut,\n        address sender,\n        bytes memory userData\n    ) external returns (uint256 bptAmountIn);\n\n    /**\n     * @notice Queries a `removeLiquidityCustom` operation without actually executing it.\n     * @param pool Address of the liquidity pool\n     * @param maxBptAmountIn Maximum amount of pool tokens provided\n     * @param minAmountsOut Expected minimum amounts of tokens to receive, sorted in token registration order\n     * @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n     * @param userData Additional (optional) data sent with the query request\n     * @return bptAmountIn Expected amount of pool tokens to burn\n     * @return amountsOut Expected amounts of tokens to receive, sorted in token registration order\n     * @return returnData Arbitrary (optional) data with an encoded response from the pool\n     */\n    function queryRemoveLiquidityCustom(\n        address pool,\n        uint256 maxBptAmountIn,\n        uint256[] memory minAmountsOut,\n        address sender,\n        bytes memory userData\n    ) external returns (uint256 bptAmountIn, uint256[] memory amountsOut, bytes memory returnData);\n\n    /**\n     * @notice Queries a `removeLiquidityRecovery` operation without actually executing it.\n     * @param pool Address of the liquidity pool\n     * @param exactBptAmountIn Exact amount of pool tokens provided for the query\n     * @return amountsOut Expected amounts of tokens to receive, sorted in token registration order\n     */\n    function queryRemoveLiquidityRecovery(\n        address pool,\n        uint256 exactBptAmountIn\n    ) external returns (uint256[] memory amountsOut);\n\n    /**\n     * @notice Queries a swap operation specifying an exact input token amount without actually executing it.\n     * @param pool Address of the liquidity pool\n     * @param tokenIn Token to be swapped from\n     * @param tokenOut Token to be swapped to\n     * @param exactAmountIn Exact amounts of input tokens to send\n     * @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n     * @param userData Additional (optional) data sent with the query request\n     * @return amountOut Calculated amount of output tokens to be received in exchange for the given input tokens\n     */\n    function querySwapSingleTokenExactIn(\n        address pool,\n        IERC20 tokenIn,\n        IERC20 tokenOut,\n        uint256 exactAmountIn,\n        address sender,\n        bytes calldata userData\n    ) external returns (uint256 amountOut);\n\n    /**\n     * @notice Queries a swap operation specifying an exact output token amount without actually executing it.\n     * @param pool Address of the liquidity pool\n     * @param tokenIn Token to be swapped from\n     * @param tokenOut Token to be swapped to\n     * @param exactAmountOut Exact amounts of input tokens to receive\n     * @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n     * @param userData Additional (optional) data sent with the query request\n     * @return amountIn Calculated amount of input tokens to be sent in exchange for the requested output tokens\n     */\n    function querySwapSingleTokenExactOut(\n        address pool,\n        IERC20 tokenIn,\n        IERC20 tokenOut,\n        uint256 exactAmountOut,\n        address sender,\n        bytes calldata userData\n    ) external returns (uint256 amountIn);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IAuthentication } from \"../solidity-utils/helpers/IAuthentication.sol\";\nimport { IVaultExtension } from \"./IVaultExtension.sol\";\nimport { IVaultErrors } from \"./IVaultErrors.sol\";\nimport { IVaultEvents } from \"./IVaultEvents.sol\";\nimport { IVaultAdmin } from \"./IVaultAdmin.sol\";\nimport { IVaultMain } from \"./IVaultMain.sol\";\n\n/// @notice Composite interface for all Vault operations: swap, add/remove liquidity, and associated queries.\ninterface IVault is IVaultMain, IVaultExtension, IVaultAdmin, IVaultErrors, IVaultEvents, IAuthentication {\n    /// @return vault The main Vault address.\n    function vault() external view override(IVaultAdmin, IVaultExtension) returns (IVault);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\n\nimport { IProtocolFeeController } from \"./IProtocolFeeController.sol\";\nimport { IAuthorizer } from \"./IAuthorizer.sol\";\nimport { IVault } from \"./IVault.sol\";\n\n/**\n * @notice Interface for functions defined on the `VaultAdmin` contract.\n * @dev `VaultAdmin` is the Proxy extension of `VaultExtension`, and handles the least critical operations,\n * as two delegate calls add gas to each call. Most of the permissioned calls are here.\n */\ninterface IVaultAdmin {\n    /*******************************************************************************\n                               Constants and immutables\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the main Vault address.\n     * @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n     * @return vault The address of the main Vault\n     */\n    function vault() external view returns (IVault);\n\n    /**\n     * @notice Returns the Vault's pause window end time.\n     * @dev This value is immutable, and represents the timestamp after which the Vault can no longer be paused\n     * by governance. Balancer timestamps are 32 bits.\n     *\n     * @return pauseWindowEndTime The timestamp when the Vault's pause window ends\n     */\n    function getPauseWindowEndTime() external view returns (uint32 pauseWindowEndTime);\n\n    /**\n     * @notice Returns the Vault's buffer period duration.\n     * @dev This value is immutable. It represents the period during which, if paused, the Vault will remain paused.\n     * This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer\n     * timestamps are 32 bits.\n     *\n     * @return bufferPeriodDuration The length of the buffer period in seconds\n     */\n    function getBufferPeriodDuration() external view returns (uint32 bufferPeriodDuration);\n\n    /**\n     * @notice Returns the Vault's buffer period end time.\n     * @dev This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer\n     * timestamps are 32 bits.\n     *\n     * @return bufferPeriodEndTime The timestamp after which the Vault remains permanently unpaused\n     */\n    function getBufferPeriodEndTime() external view returns (uint32 bufferPeriodEndTime);\n\n    /**\n     * @notice Get the minimum number of tokens in a pool.\n     * @dev We expect the vast majority of pools to be 2-token.\n     * @return minTokens The minimum token count of a pool\n     */\n    function getMinimumPoolTokens() external pure returns (uint256 minTokens);\n\n    /**\n     * @notice Get the maximum number of tokens in a pool.\n     * @return maxTokens The maximum token count of a pool\n     */\n    function getMaximumPoolTokens() external pure returns (uint256 maxTokens);\n\n    /**\n     * @notice Get the minimum total supply of pool tokens (BPT) for an initialized pool.\n     * @dev This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT\n     * is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\n     *\n     * @return poolMinimumTotalSupply The minimum total supply a pool can have after initialization\n     */\n    function getPoolMinimumTotalSupply() external pure returns (uint256 poolMinimumTotalSupply);\n\n    /**\n     * @notice Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\n     * @dev This prevents buffers from being completely drained. When the buffer is initialized, this minimum number\n     * of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal\n     * to the Vault, as buffers are not tokenized.\n     *\n     * @return bufferMinimumTotalSupply The minimum total supply a buffer can have after initialization\n     */\n    function getBufferMinimumTotalSupply() external pure returns (uint256 bufferMinimumTotalSupply);\n\n    /**\n     * @notice Get the minimum trade amount in a pool operation.\n     * @dev This limit is applied to the 18-decimal \"upscaled\" amount in any operation (swap, add/remove liquidity).\n     * @return minimumTradeAmount The minimum trade amount as an 18-decimal floating point number\n     */\n    function getMinimumTradeAmount() external view returns (uint256 minimumTradeAmount);\n\n    /**\n     * @notice Get the minimum wrap amount in a buffer operation.\n     * @dev This limit is applied to the wrap operation amount, in native underlying token decimals.\n     * @return minimumWrapAmount The minimum wrap amount in native underlying token decimals\n     */\n    function getMinimumWrapAmount() external view returns (uint256 minimumWrapAmount);\n\n    /*******************************************************************************\n                                    Vault Pausing\n    *******************************************************************************/\n\n    /**\n     * @notice Indicates whether the Vault is paused.\n     * @dev If the Vault is paused, all non-Recovery Mode state-changing operations on pools will revert. Note that\n     * ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not\n     * also pause buffers (though we anticipate they would likely be paused and unpaused together). Call\n     * `areBuffersPaused` to check the pause state of the buffers.\n     *\n     * @return vaultPaused True if the Vault is paused\n     */\n    function isVaultPaused() external view returns (bool vaultPaused);\n\n    /**\n     * @notice Returns the paused status, and end times of the Vault's pause window and buffer period.\n     * @dev Balancer timestamps are 32 bits.\n     * @return vaultPaused True if the Vault is paused\n     * @return vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\n     * @return vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period\n     */\n    function getVaultPausedState()\n        external\n        view\n        returns (bool vaultPaused, uint32 vaultPauseWindowEndTime, uint32 vaultBufferPeriodEndTime);\n\n    /**\n     * @notice Pause the Vault: an emergency action which disables all operational state-changing functions on pools.\n     * @dev This is a permissioned function that will only work during the Pause Window set during deployment.\n     * Note that ERC4626 buffer operations have an independent pause mechanism, which is not affected by pausing\n     * the Vault. Custom routers could still wrap/unwrap using buffers while the Vault is paused, unless buffers\n     * are also paused (with `pauseVaultBuffers`).\n     */\n    function pauseVault() external;\n\n    /**\n     * @notice Reverse a `pause` operation, and restore Vault pool operations to normal functionality.\n     * @dev This is a permissioned function that will only work on a paused Vault within the Buffer Period set during\n     * deployment. Note that the Vault will automatically unpause after the Buffer Period expires. As noted above,\n     * ERC4626 buffers and Vault operations on pools are independent. Unpausing the Vault does not reverse\n     * `pauseVaultBuffers`. If buffers were also paused, they will remain in that state until explicitly unpaused.\n     */\n    function unpauseVault() external;\n\n    /*******************************************************************************\n                                    Pool Pausing\n    *******************************************************************************/\n\n    /**\n     * @notice Pause the Pool: an emergency action which disables all pool functions.\n     * @dev This is a permissioned function that will only work during the Pause Window set during pool factory\n     * deployment.\n     *\n     * @param pool The pool being paused\n     */\n    function pausePool(address pool) external;\n\n    /**\n     * @notice Reverse a `pause` operation, and restore the Pool to normal functionality.\n     * @dev This is a permissioned function that will only work on a paused Pool within the Buffer Period set during\n     * deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\n     *\n     * @param pool The pool being unpaused\n     */\n    function unpausePool(address pool) external;\n\n    /*******************************************************************************\n                                         Fees\n    *******************************************************************************/\n\n    /**\n     * @notice Assigns a new static swap fee percentage to the specified pool.\n     * @dev This is a permissioned function, disabled if the pool is paused. The swap fee percentage must be within\n     * the bounds specified by the pool's implementation of `ISwapFeePercentageBounds`.\n     * Emits the SwapFeePercentageChanged event.\n     *\n     * @param pool The address of the pool for which the static swap fee will be changed\n     * @param swapFeePercentage The new swap fee percentage to apply to the pool\n     */\n    function setStaticSwapFeePercentage(address pool, uint256 swapFeePercentage) external;\n\n    /**\n     * @notice Collects accumulated aggregate swap and yield fees for the specified pool.\n     * @dev Fees are sent to the ProtocolFeeController address.\n     * @param pool The pool on which all aggregate fees should be collected\n     * @return swapFeeAmounts An array with the total swap fees collected, sorted in token registration order\n     * @return yieldFeeAmounts An array with the total yield fees collected, sorted in token registration order\n     */\n    function collectAggregateFees(\n        address pool\n    ) external returns (uint256[] memory swapFeeAmounts, uint256[] memory yieldFeeAmounts);\n\n    /**\n     * @notice Update an aggregate swap fee percentage.\n     * @dev Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee\n     * for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's\n     * fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also\n     * that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol).\n     * Emits an `AggregateSwapFeePercentageChanged` event.\n     *\n     * @param pool The pool whose swap fee percentage will be updated\n     * @param newAggregateSwapFeePercentage The new aggregate swap fee percentage\n     */\n    function updateAggregateSwapFeePercentage(address pool, uint256 newAggregateSwapFeePercentage) external;\n\n    /**\n     * @notice Update an aggregate yield fee percentage.\n     * @dev Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee\n     * for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's\n     * fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also\n     * that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol).\n     * Emits an `AggregateYieldFeePercentageChanged` event.\n     *\n     * @param pool The pool whose yield fee percentage will be updated\n     * @param newAggregateYieldFeePercentage The new aggregate yield fee percentage\n     */\n    function updateAggregateYieldFeePercentage(address pool, uint256 newAggregateYieldFeePercentage) external;\n\n    /**\n     * @notice Sets a new Protocol Fee Controller for the Vault.\n     * @dev This is a permissioned call. Emits a `ProtocolFeeControllerChanged` event.\n     * @param newProtocolFeeController The address of the new Protocol Fee Controller\n     */\n    function setProtocolFeeController(IProtocolFeeController newProtocolFeeController) external;\n\n    /*******************************************************************************\n                                    Recovery Mode\n    *******************************************************************************/\n\n    /**\n     * @notice Enable recovery mode for a pool.\n     * @dev This is a permissioned function. It enables a safe proportional withdrawal, with no external calls.\n     * Since there are no external calls, ensuring that entering Recovery Mode cannot fail, we cannot compute and so\n     * must forfeit any yield fees between the last operation and enabling Recovery Mode. For the same reason, live\n     * balances cannot be updated while in Recovery Mode, as doing so might cause withdrawals to fail.\n     *\n     * @param pool The address of the pool\n     */\n    function enableRecoveryMode(address pool) external;\n\n    /**\n     * @notice Disable recovery mode for a pool.\n     * @dev This is a permissioned function. It re-syncs live balances (which could not be updated during\n     * Recovery Mode), forfeiting any yield fees that accrued while enabled. It makes external calls, and could\n     * potentially fail if there is an issue with any associated Rate Providers.\n     *\n     * @param pool The address of the pool\n     */\n    function disableRecoveryMode(address pool) external;\n\n    /*******************************************************************************\n                                  Query Functionality\n    *******************************************************************************/\n\n    /**\n     * @notice Disables query functionality on the Vault. Can only be called by governance.\n     * @dev The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from\n     * settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable\n     * queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2).\n     * This function can be acted upon as an emergency measure in ambiguous contexts where it's not 100% clear whether\n     * disabling queries is completely necessary; queries can still be re-enabled after this call.\n     */\n    function disableQuery() external;\n\n    /**\n     * @notice Disables query functionality permanently on the Vault. Can only be called by governance.\n     * @dev Shall only be used when there is no doubt that queries pose a fundamental threat to the system.\n     */\n    function disableQueryPermanently() external;\n\n    /**\n     * @notice Enables query functionality on the Vault. Can only be called by governance.\n     * @dev Only works if queries are not permanently disabled.\n     */\n    function enableQuery() external;\n\n    /*******************************************************************************\n                                  ERC4626 Buffers\n    *******************************************************************************/\n\n    /**\n     * @notice Indicates whether the Vault buffers are paused.\n     * @dev When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true)\n     * will revert. Pausing buffers is reversible. Note that ERC4626 buffers and the Vault have separate and\n     * independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they\n     * would likely be paused and unpaused together). Call `isVaultPaused` to check the pause state of the Vault.\n     *\n     * @return buffersPaused True if the Vault buffers are paused\n     */\n    function areBuffersPaused() external view returns (bool buffersPaused);\n\n    /**\n     * @notice Pauses native vault buffers globally.\n     * @dev When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's\n     * `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. Currently it's not\n     * possible to pause vault buffers individually.\n     *\n     * This is a permissioned call, and is reversible (see `unpauseVaultBuffers`). Note that the Vault has a separate\n     * and independent pausing mechanism. It is possible to pause the Vault (i.e. pool operations), without affecting\n     * buffers, and vice versa.\n     */\n    function pauseVaultBuffers() external;\n\n    /**\n     * @notice Unpauses native vault buffers globally.\n     * @dev When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's\n     * `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. As noted above,\n     * ERC4626 buffers and Vault operations on pools are independent. Unpausing buffers does not reverse `pauseVault`.\n     * If the Vault was also paused, it will remain in that state until explicitly unpaused.\n     *\n     * This is a permissioned call.\n     */\n    function unpauseVaultBuffers() external;\n\n    /**\n     * @notice Initializes buffer for the given wrapped token.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param amountUnderlyingRaw Amount of underlying tokens that will be deposited into the buffer\n     * @param amountWrappedRaw Amount of wrapped tokens that will be deposited into the buffer\n     * @param minIssuedShares Minimum amount of shares to receive from the buffer, expressed in underlying token\n     * native decimals\n     * @param sharesOwner Address that will own the deposited liquidity. Only this address will be able to remove\n     * liquidity from the buffer\n     * @return issuedShares the amount of tokens sharesOwner has in the buffer, expressed in underlying token amounts.\n     * (it is the BPT of an internal ERC4626 buffer). It is expressed in underlying token native decimals.\n     */\n    function initializeBuffer(\n        IERC4626 wrappedToken,\n        uint256 amountUnderlyingRaw,\n        uint256 amountWrappedRaw,\n        uint256 minIssuedShares,\n        address sharesOwner\n    ) external returns (uint256 issuedShares);\n\n    /**\n     * @notice Adds liquidity to an internal ERC4626 buffer in the Vault, proportionally.\n     * @dev The buffer needs to be initialized beforehand.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param maxAmountUnderlyingInRaw Maximum amount of underlying tokens to add to the buffer. It is expressed in\n     * underlying token native decimals\n     * @param maxAmountWrappedInRaw Maximum amount of wrapped tokens to add to the buffer. It is expressed in wrapped\n     * token native decimals\n     * @param exactSharesToIssue The value in underlying tokens that `sharesOwner` wants to add to the buffer,\n     * in underlying token decimals\n     * @param sharesOwner Address that will own the deposited liquidity. Only this address will be able to remove\n     * liquidity from the buffer\n     * @return amountUnderlyingRaw Amount of underlying tokens deposited into the buffer\n     * @return amountWrappedRaw Amount of wrapped tokens deposited into the buffer\n     */\n    function addLiquidityToBuffer(\n        IERC4626 wrappedToken,\n        uint256 maxAmountUnderlyingInRaw,\n        uint256 maxAmountWrappedInRaw,\n        uint256 exactSharesToIssue,\n        address sharesOwner\n    ) external returns (uint256 amountUnderlyingRaw, uint256 amountWrappedRaw);\n\n    /**\n     * @notice Removes liquidity from an internal ERC4626 buffer in the Vault.\n     * @dev Only proportional exits are supported, and the sender has to be the owner of the shares.\n     * This function unlocks the Vault just for this operation; it does not work with a Router as an entrypoint.\n     *\n     * Pre-conditions:\n     * - The buffer needs to be initialized.\n     * - sharesOwner is the original msg.sender, it needs to be checked in the Router. That's why\n     *   this call is authenticated; only routers approved by the DAO can remove the liquidity of a buffer.\n     * - The buffer needs to have some liquidity and have its asset registered in `_bufferAssets` storage.\n     *\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param sharesToRemove Amount of shares to remove from the buffer. Cannot be greater than sharesOwner's\n     * total shares. It is expressed in underlying token native decimals\n     * @param minAmountUnderlyingOutRaw Minimum amount of underlying tokens to receive from the buffer. It is expressed\n     * in underlying token native decimals\n     * @param minAmountWrappedOutRaw Minimum amount of wrapped tokens to receive from the buffer. It is expressed in\n     * wrapped token native decimals\n     * @return removedUnderlyingBalanceRaw Amount of underlying tokens returned to the user\n     * @return removedWrappedBalanceRaw Amount of wrapped tokens returned to the user\n     */\n    function removeLiquidityFromBuffer(\n        IERC4626 wrappedToken,\n        uint256 sharesToRemove,\n        uint256 minAmountUnderlyingOutRaw,\n        uint256 minAmountWrappedOutRaw\n    ) external returns (uint256 removedUnderlyingBalanceRaw, uint256 removedWrappedBalanceRaw);\n\n    /**\n     * @notice Returns the asset registered for a given wrapped token.\n     * @dev The asset can never change after buffer initialization.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return underlyingToken Address of the underlying token registered for the wrapper; `address(0)` if the buffer\n     * has not been initialized.\n     */\n    function getBufferAsset(IERC4626 wrappedToken) external view returns (address underlyingToken);\n\n    /**\n     * @notice Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets\n     * in the buffer.\n     *\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param liquidityOwner Address of the user that owns liquidity in the wrapped token's buffer\n     * @return ownerShares Amount of shares allocated to the liquidity owner, in native underlying token decimals\n     */\n    function getBufferOwnerShares(\n        IERC4626 wrappedToken,\n        address liquidityOwner\n    ) external view returns (uint256 ownerShares);\n\n    /**\n     * @notice Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return bufferShares Amount of supply shares of the buffer, in native underlying token decimals\n     */\n    function getBufferTotalShares(IERC4626 wrappedToken) external view returns (uint256 bufferShares);\n\n    /**\n     * @notice Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\n     * @dev All values are in native token decimals of the wrapped or underlying tokens.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return underlyingBalanceRaw Amount of underlying tokens deposited into the buffer, in native token decimals\n     * @return wrappedBalanceRaw Amount of wrapped tokens deposited into the buffer, in native token decimals\n     */\n    function getBufferBalance(\n        IERC4626 wrappedToken\n    ) external view returns (uint256 underlyingBalanceRaw, uint256 wrappedBalanceRaw);\n\n    /*******************************************************************************\n                                Authentication\n    *******************************************************************************/\n\n    /**\n     * @notice Sets a new Authorizer for the Vault.\n     * @dev This is a permissioned call. Emits an `AuthorizerChanged` event.\n     * @param newAuthorizer The address of the new authorizer\n     */\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @notice Errors are declared inside an interface (namespace) to improve DX with Typechain.\ninterface IVaultErrors {\n    /*******************************************************************************\n                            Registration and Initialization\n    *******************************************************************************/\n\n    /**\n     * @notice A pool has already been registered. `registerPool` may only be called once.\n     * @param pool The already registered pool\n     */\n    error PoolAlreadyRegistered(address pool);\n\n    /**\n     * @notice A pool has already been initialized. `initialize` may only be called once.\n     * @param pool The already initialized pool\n     */\n    error PoolAlreadyInitialized(address pool);\n\n    /**\n     * @notice A pool has not been registered.\n     * @param pool The unregistered pool\n     */\n    error PoolNotRegistered(address pool);\n\n    /**\n     * @notice A referenced pool has not been initialized.\n     * @param pool The uninitialized pool\n     */\n    error PoolNotInitialized(address pool);\n\n    /**\n     * @notice A hook contract rejected a pool on registration.\n     * @param poolHooksContract Address of the hook contract that rejected the pool registration\n     * @param pool Address of the rejected pool\n     * @param poolFactory Address of the pool factory\n     */\n    error HookRegistrationFailed(address poolHooksContract, address pool, address poolFactory);\n\n    /**\n     * @notice A token was already registered (i.e., it is a duplicate in the pool).\n     * @param token The duplicate token\n     */\n    error TokenAlreadyRegistered(IERC20 token);\n\n    /// @notice The token count is below the minimum allowed.\n    error MinTokens();\n\n    /// @notice The token count is above the maximum allowed.\n    error MaxTokens();\n\n    /// @notice Invalid tokens (e.g., zero) cannot be registered.\n    error InvalidToken();\n\n    /// @notice The token type given in a TokenConfig during pool registration is invalid.\n    error InvalidTokenType();\n\n    /// @notice The data in a TokenConfig struct is inconsistent or unsupported.\n    error InvalidTokenConfiguration();\n\n    /// @notice Tokens with more than 18 decimals are not supported.\n    error InvalidTokenDecimals();\n\n    /**\n     * @notice The token list passed into an operation does not match the pool tokens in the pool.\n     * @param pool Address of the pool\n     * @param expectedToken The correct token at a given index in the pool\n     * @param actualToken The actual token found at that index\n     */\n    error TokensMismatch(address pool, address expectedToken, address actualToken);\n\n    /*******************************************************************************\n                                 Transient Accounting\n    *******************************************************************************/\n\n    /// @notice A transient accounting operation completed with outstanding token deltas.\n    error BalanceNotSettled();\n\n    /// @notice A user called a Vault function (swap, add/remove liquidity) outside the lock context.\n    error VaultIsNotUnlocked();\n\n    /// @notice The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\n    error DynamicSwapFeeHookFailed();\n\n    /// @notice The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\n    error BeforeSwapHookFailed();\n\n    /// @notice The pool has returned false to the afterSwap hook, indicating the transaction should revert.\n    error AfterSwapHookFailed();\n\n    /// @notice The pool has returned false to the beforeInitialize hook, indicating the transaction should revert.\n    error BeforeInitializeHookFailed();\n\n    /// @notice The pool has returned false to the afterInitialize hook, indicating the transaction should revert.\n    error AfterInitializeHookFailed();\n\n    /// @notice The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert.\n    error BeforeAddLiquidityHookFailed();\n\n    /// @notice The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert.\n    error AfterAddLiquidityHookFailed();\n\n    /// @notice The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert.\n    error BeforeRemoveLiquidityHookFailed();\n\n    /// @notice The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert.\n    error AfterRemoveLiquidityHookFailed();\n\n    /// @notice An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance).\n    error RouterNotTrusted();\n\n    /*******************************************************************************\n                                        Swaps\n    *******************************************************************************/\n\n    /// @notice The user tried to swap zero tokens.\n    error AmountGivenZero();\n\n    /// @notice The user attempted to swap a token for itself.\n    error CannotSwapSameToken();\n\n    /**\n     * @notice The user attempted to operate with a token that is not in the pool.\n     * @param token The unregistered token\n     */\n    error TokenNotRegistered(IERC20 token);\n\n    /**\n     * @notice An amount in or out has exceeded the limit specified in the swap request.\n     * @param amount The total amount in or out\n     * @param limit The amount of the limit that has been exceeded\n     */\n    error SwapLimit(uint256 amount, uint256 limit);\n\n    /**\n     * @notice A hook adjusted amount in or out has exceeded the limit specified in the swap request.\n     * @param amount The total amount in or out\n     * @param limit The amount of the limit that has been exceeded\n     */\n    error HookAdjustedSwapLimit(uint256 amount, uint256 limit);\n\n    /// @notice The amount given or calculated for an operation is below the minimum limit.\n    error TradeAmountTooSmall();\n\n    /*******************************************************************************\n                                    Add Liquidity\n    *******************************************************************************/\n\n    /// @notice Add liquidity kind not supported.\n    error InvalidAddLiquidityKind();\n\n    /**\n     * @notice A required amountIn exceeds the maximum limit specified for the operation.\n     * @param tokenIn The incoming token\n     * @param amountIn The total token amount in\n     * @param maxAmountIn The amount of the limit that has been exceeded\n     */\n    error AmountInAboveMax(IERC20 tokenIn, uint256 amountIn, uint256 maxAmountIn);\n\n    /**\n     * @notice A hook adjusted amountIn exceeds the maximum limit specified for the operation.\n     * @param tokenIn The incoming token\n     * @param amountIn The total token amount in\n     * @param maxAmountIn The amount of the limit that has been exceeded\n     */\n    error HookAdjustedAmountInAboveMax(IERC20 tokenIn, uint256 amountIn, uint256 maxAmountIn);\n\n    /**\n     * @notice The BPT amount received from adding liquidity is below the minimum specified for the operation.\n     * @param amountOut The total BPT amount out\n     * @param minAmountOut The amount of the limit that has been exceeded\n     */\n    error BptAmountOutBelowMin(uint256 amountOut, uint256 minAmountOut);\n\n    /// @notice Pool does not support adding liquidity with a customized input.\n    error DoesNotSupportAddLiquidityCustom();\n\n    /// @notice Pool does not support adding liquidity through donation.\n    error DoesNotSupportDonation();\n\n    /*******************************************************************************\n                                    Remove Liquidity\n    *******************************************************************************/\n\n    /// @notice Remove liquidity kind not supported.\n    error InvalidRemoveLiquidityKind();\n\n    /**\n     * @notice The actual amount out is below the minimum limit specified for the operation.\n     * @param tokenOut The outgoing token\n     * @param amountOut The total BPT amount out\n     * @param minAmountOut The amount of the limit that has been exceeded\n     */\n    error AmountOutBelowMin(IERC20 tokenOut, uint256 amountOut, uint256 minAmountOut);\n\n    /**\n     * @notice The hook adjusted amount out is below the minimum limit specified for the operation.\n     * @param tokenOut The outgoing token\n     * @param amountOut The total BPT amount out\n     * @param minAmountOut The amount of the limit that has been exceeded\n     */\n    error HookAdjustedAmountOutBelowMin(IERC20 tokenOut, uint256 amountOut, uint256 minAmountOut);\n\n    /**\n     * @notice The required BPT amount in exceeds the maximum limit specified for the operation.\n     * @param amountIn The total BPT amount in\n     * @param maxAmountIn The amount of the limit that has been exceeded\n     */\n    error BptAmountInAboveMax(uint256 amountIn, uint256 maxAmountIn);\n\n    /// @notice Pool does not support removing liquidity with a customized input.\n    error DoesNotSupportRemoveLiquidityCustom();\n\n    /*******************************************************************************\n                                     Fees\n    *******************************************************************************/\n\n    /**\n     * @notice Error raised when there is an overflow in the fee calculation.\n     * @dev This occurs when the sum of the parts (aggregate swap or yield fee) is greater than the whole\n     * (total swap or yield fee). Also validated when the protocol fee controller updates aggregate fee\n     * percentages in the Vault.\n     */\n    error ProtocolFeesExceedTotalCollected();\n\n    /**\n     * @notice Error raised when the swap fee percentage is less than the minimum allowed value.\n     * @dev The Vault itself does not impose a universal minimum. Rather, it validates against the\n     * range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error\n     * if it is below the minimum value returned by the pool.\n     *\n     * Pools with dynamic fees do not check these limits.\n     */\n    error SwapFeePercentageTooLow();\n\n    /**\n     * @notice Error raised when the swap fee percentage is greater than the maximum allowed value.\n     * @dev The Vault itself does not impose a universal minimum. Rather, it validates against the\n     * range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error\n     * if it is above the maximum value returned by the pool.\n     *\n     * Pools with dynamic fees do not check these limits.\n     */\n    error SwapFeePercentageTooHigh();\n\n    /**\n     * @notice Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\n     * @dev Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit\n     * precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which\n     * corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%).\n     * Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between\n     * the aggregate fee calculated here and that stored in the Vault.\n     */\n    error FeePrecisionTooHigh();\n\n    /// @notice A given percentage is above the maximum (usually a value close to FixedPoint.ONE, or 1e18 wei).\n    error PercentageAboveMax();\n\n    /*******************************************************************************\n                                    Queries\n    *******************************************************************************/\n\n    /// @notice A user tried to execute a query operation when they were disabled.\n    error QueriesDisabled();\n\n    /// @notice An admin tried to re-enable queries, but they were disabled permanently.\n    error QueriesDisabledPermanently();\n\n    /*******************************************************************************\n                                Recovery Mode\n    *******************************************************************************/\n\n    /**\n     * @notice Cannot enable recovery mode when already enabled.\n     * @param pool The pool\n     */\n    error PoolInRecoveryMode(address pool);\n\n    /**\n     * @notice Cannot disable recovery mode when not enabled.\n     * @param pool The pool\n     */\n    error PoolNotInRecoveryMode(address pool);\n\n    /*******************************************************************************\n                                Authentication\n    *******************************************************************************/\n\n    /**\n     * @notice Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\n     * @param sender The account attempting to call a permissioned function\n     */\n    error SenderIsNotVault(address sender);\n\n    /*******************************************************************************\n                                        Pausing\n    *******************************************************************************/\n\n    /// @notice The caller specified a pause window period longer than the maximum.\n    error VaultPauseWindowDurationTooLarge();\n\n    /// @notice The caller specified a buffer period longer than the maximum.\n    error PauseBufferPeriodDurationTooLarge();\n\n    /// @notice A user tried to perform an operation while the Vault was paused.\n    error VaultPaused();\n\n    /// @notice Governance tried to unpause the Vault when it was not paused.\n    error VaultNotPaused();\n\n    /// @notice Governance tried to pause the Vault after the pause period expired.\n    error VaultPauseWindowExpired();\n\n    /**\n     * @notice A user tried to perform an operation involving a paused Pool.\n     * @param pool The paused pool\n     */\n    error PoolPaused(address pool);\n\n    /**\n     * @notice Governance tried to unpause the Pool when it was not paused.\n     * @param pool The unpaused pool\n     */\n    error PoolNotPaused(address pool);\n\n    /**\n     * @notice Governance tried to pause a Pool after the pause period expired.\n     * @param pool The pool\n     */\n    error PoolPauseWindowExpired(address pool);\n\n    /*******************************************************************************\n                                ERC4626 token buffers\n    *******************************************************************************/\n\n    /**\n     * @notice The buffer for the given wrapped token was already initialized.\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     */\n    error BufferAlreadyInitialized(IERC4626 wrappedToken);\n\n    /**\n     * @notice The buffer for the given wrapped token was not initialized.\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     */\n    error BufferNotInitialized(IERC4626 wrappedToken);\n\n    /// @notice The user is trying to remove more than their allocated shares from the buffer.\n    error NotEnoughBufferShares();\n\n    /**\n     * @notice The wrapped token asset does not match the underlying token.\n     * @dev This should never happen, but a malicious wrapper contract might not return the correct address.\n     * Legitimate wrapper contracts should make the asset a constant or immutable value.\n     *\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     * @param underlyingToken The underlying token returned by `asset`\n     */\n    error WrongUnderlyingToken(IERC4626 wrappedToken, address underlyingToken);\n\n    /**\n     * @notice A wrapped token reported the zero address as its underlying token asset.\n     * @dev This should never happen, but a malicious wrapper contract might do this (e.g., in an attempt to\n     * re-initialize the buffer).\n     *\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     */\n    error InvalidUnderlyingToken(IERC4626 wrappedToken);\n\n    /**\n     * @notice The amount given to wrap/unwrap was too small, which can introduce rounding issues.\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     */\n    error WrapAmountTooSmall(IERC4626 wrappedToken);\n\n    /// @notice Buffer operation attempted while vault buffers are paused.\n    error VaultBuffersArePaused();\n\n    /// @notice Buffer shares were minted to the zero address.\n    error BufferSharesInvalidReceiver();\n\n    /// @notice Buffer shares were burned from the zero address.\n    error BufferSharesInvalidOwner();\n\n    /**\n     * @notice The total supply of a buffer can't be lower than the absolute minimum.\n     * @param totalSupply The total supply value that was below the minimum\n     */\n    error BufferTotalSupplyTooLow(uint256 totalSupply);\n\n    /// @dev A wrap/unwrap operation consumed more or returned less underlying tokens than it should.\n    error NotEnoughUnderlying(IERC4626 wrappedToken, uint256 expectedUnderlyingAmount, uint256 actualUnderlyingAmount);\n\n    /// @dev A wrap/unwrap operation consumed more or returned less wrapped tokens than it should.\n    error NotEnoughWrapped(IERC4626 wrappedToken, uint256 expectedWrappedAmount, uint256 actualWrappedAmount);\n\n    /// @dev Shares issued during initialization are below the requested amount.\n    error IssuedSharesBelowMin(uint256 issuedShares, uint256 minIssuedShares);\n\n    /*******************************************************************************\n                                    Miscellaneous\n    *******************************************************************************/\n\n    /// @notice Pool does not support adding / removing liquidity with an unbalanced input.\n    error DoesNotSupportUnbalancedLiquidity();\n\n    /// @notice The contract should not receive ETH.\n    error CannotReceiveEth();\n\n    /**\n     * @notice The `VaultExtension` contract was called by an account directly.\n     * @dev It can only be called by the Vault via delegatecall.\n     */\n    error NotVaultDelegateCall();\n\n    /// @notice The `VaultExtension` contract was configured with an incorrect Vault address.\n    error WrongVaultExtensionDeployment();\n\n    /// @notice The `ProtocolFeeController` contract was configured with an incorrect Vault address.\n    error WrongProtocolFeeControllerDeployment();\n\n    /// @notice The `VaultAdmin` contract was configured with an incorrect Vault address.\n    error WrongVaultAdminDeployment();\n\n    /// @notice Quote reverted with a reserved error code.\n    error QuoteResultSpoofed();\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IProtocolFeeController } from \"./IProtocolFeeController.sol\";\nimport { IAuthorizer } from \"./IAuthorizer.sol\";\nimport { IHooks } from \"./IHooks.sol\";\nimport \"./VaultTypes.sol\";\n\n/// @dev Events are declared inside an interface (namespace) to improve DX with Typechain.\ninterface IVaultEvents {\n    /**\n     * @notice A Pool was registered by calling `registerPool`.\n     * @param pool The pool being registered\n     * @param factory The factory creating the pool\n     * @param tokenConfig An array of descriptors for the tokens the pool will manage\n     * @param swapFeePercentage The static swap fee of the pool\n     * @param pauseWindowEndTime The pool's pause window end time\n     * @param roleAccounts Addresses the Vault will allow to change certain pool settings\n     * @param hooksConfig Flags indicating which hooks the pool supports and address of hooks contract\n     * @param liquidityManagement Supported liquidity management hook flags\n     */\n    event PoolRegistered(\n        address indexed pool,\n        address indexed factory,\n        TokenConfig[] tokenConfig,\n        uint256 swapFeePercentage,\n        uint32 pauseWindowEndTime,\n        PoolRoleAccounts roleAccounts,\n        HooksConfig hooksConfig,\n        LiquidityManagement liquidityManagement\n    );\n\n    /**\n     * @notice A Pool was initialized by calling `initialize`.\n     * @param pool The pool being initialized\n     */\n    event PoolInitialized(address indexed pool);\n\n    /**\n     * @notice A swap has occurred.\n     * @param pool The pool with the tokens being swapped\n     * @param tokenIn The token entering the Vault (balance increases)\n     * @param tokenOut The token leaving the Vault (balance decreases)\n     * @param amountIn Number of tokenIn tokens\n     * @param amountOut Number of tokenOut tokens\n     * @param swapFeePercentage Swap fee percentage applied (can differ if dynamic)\n     * @param swapFeeAmount Swap fee amount paid\n     */\n    event Swap(\n        address indexed pool,\n        IERC20 indexed tokenIn,\n        IERC20 indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut,\n        uint256 swapFeePercentage,\n        uint256 swapFeeAmount\n    );\n\n    /**\n     * @notice A wrap operation has occurred.\n     * @param wrappedToken The wrapped token address\n     * @param depositedUnderlying Number of underlying tokens deposited\n     * @param mintedShares Number of shares (wrapped tokens) minted\n     * @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)\n     */\n    event Wrap(\n        IERC4626 indexed wrappedToken,\n        uint256 depositedUnderlying,\n        uint256 mintedShares,\n        bytes32 bufferBalances\n    );\n\n    /**\n     * @notice An unwrap operation has occurred.\n     * @param wrappedToken The wrapped token address\n     * @param burnedShares Number of shares (wrapped tokens) burned\n     * @param withdrawnUnderlying Number of underlying tokens withdrawn\n     * @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)\n     */\n    event Unwrap(\n        IERC4626 indexed wrappedToken,\n        uint256 burnedShares,\n        uint256 withdrawnUnderlying,\n        bytes32 bufferBalances\n    );\n\n    /**\n     * @notice Liquidity has been added to a pool (including initialization).\n     * @param pool The pool with liquidity added\n     * @param liquidityProvider The user performing the operation\n     * @param kind The add liquidity operation type (e.g., proportional, custom)\n     * @param totalSupply The total supply of the pool after the operation\n     * @param amountsAddedRaw The amount of each token that was added, sorted in token registration order\n     * @param swapFeeAmountsRaw The total swap fees charged, sorted in token registration order\n     */\n    event LiquidityAdded(\n        address indexed pool,\n        address indexed liquidityProvider,\n        AddLiquidityKind indexed kind,\n        uint256 totalSupply,\n        uint256[] amountsAddedRaw,\n        uint256[] swapFeeAmountsRaw\n    );\n\n    /**\n     * @notice Liquidity has been removed from a pool.\n     * @param pool The pool with liquidity removed\n     * @param liquidityProvider The user performing the operation\n     * @param kind The remove liquidity operation type (e.g., proportional, custom)\n     * @param totalSupply The total supply of the pool after the operation\n     * @param amountsRemovedRaw The amount of each token that was removed, sorted in token registration order\n     * @param swapFeeAmountsRaw The total swap fees charged, sorted in token registration order\n     */\n    event LiquidityRemoved(\n        address indexed pool,\n        address indexed liquidityProvider,\n        RemoveLiquidityKind indexed kind,\n        uint256 totalSupply,\n        uint256[] amountsRemovedRaw,\n        uint256[] swapFeeAmountsRaw\n    );\n\n    /**\n     * @notice The Vault's pause status has changed.\n     * @param paused True if the Vault was paused\n     */\n    event VaultPausedStateChanged(bool paused);\n\n    /// @notice `disableQuery` has been called on the Vault, disabling query functionality.\n    event VaultQueriesDisabled();\n\n    /// @notice `enableQuery` has been called on the Vault, enabling query functionality.\n    event VaultQueriesEnabled();\n\n    /**\n     * @notice A Pool's pause status has changed.\n     * @param pool The pool that was just paused or unpaused\n     * @param paused True if the pool was paused\n     */\n    event PoolPausedStateChanged(address indexed pool, bool paused);\n\n    /**\n     * @notice Emitted when the swap fee percentage of a pool is updated.\n     * @param swapFeePercentage The new swap fee percentage for the pool\n     */\n    event SwapFeePercentageChanged(address indexed pool, uint256 swapFeePercentage);\n\n    /**\n     * @notice Recovery mode has been enabled or disabled for a pool.\n     * @param pool The pool\n     * @param recoveryMode True if recovery mode was enabled\n     */\n    event PoolRecoveryModeStateChanged(address indexed pool, bool recoveryMode);\n\n    /**\n     * @notice A protocol or pool creator fee has changed, causing an update to the aggregate swap fee.\n     * @dev The `ProtocolFeeController` will emit an event with the underlying change.\n     * @param pool The pool whose aggregate swap fee percentage changed\n     * @param aggregateSwapFeePercentage The new aggregate swap fee percentage\n     */\n    event AggregateSwapFeePercentageChanged(address indexed pool, uint256 aggregateSwapFeePercentage);\n\n    /**\n     * @notice A protocol or pool creator fee has changed, causing an update to the aggregate yield fee.\n     * @dev The `ProtocolFeeController` will emit an event with the underlying change.\n     * @param pool The pool whose aggregate yield fee percentage changed\n     * @param aggregateYieldFeePercentage The new aggregate yield fee percentage\n     */\n    event AggregateYieldFeePercentageChanged(address indexed pool, uint256 aggregateYieldFeePercentage);\n\n    /**\n     * @notice A new authorizer is set by `setAuthorizer`.\n     * @param newAuthorizer The address of the new authorizer\n     */\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\n\n    /**\n     * @notice A new protocol fee controller is set by `setProtocolFeeController`.\n     * @param newProtocolFeeController The address of the new protocol fee controller\n     */\n    event ProtocolFeeControllerChanged(IProtocolFeeController indexed newProtocolFeeController);\n\n    /**\n     * @notice Liquidity was added to an ERC4626 buffer corresponding to the given wrapped token.\n     * @dev The underlying token can be derived from the wrapped token, so it's not included here.\n     *\n     * @param wrappedToken The wrapped token that identifies the buffer\n     * @param amountUnderlying The amount of the underlying token that was deposited\n     * @param amountWrapped The amount of the wrapped token that was deposited\n     * @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)\n     */\n    event LiquidityAddedToBuffer(\n        IERC4626 indexed wrappedToken,\n        uint256 amountUnderlying,\n        uint256 amountWrapped,\n        bytes32 bufferBalances\n    );\n\n    /**\n     * @notice Buffer shares were minted for an ERC4626 buffer corresponding to a given wrapped token.\n     * @dev The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares`\n     * retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the\n     * \"totalSupply\" of a buffer.\n     *\n     * @param wrappedToken The wrapped token that identifies the buffer\n     * @param to The owner of the minted shares\n     * @param issuedShares The amount of \"internal BPT\" shares created\n     */\n    event BufferSharesMinted(IERC4626 indexed wrappedToken, address indexed to, uint256 issuedShares);\n\n    /**\n     * @notice Buffer shares were burned for an ERC4626 buffer corresponding to a given wrapped token.\n     * @dev The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares`\n     * retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the\n     * \"totalSupply\" of a buffer.\n     *\n     * @param wrappedToken The wrapped token that identifies the buffer\n     * @param from The owner of the burned shares\n     * @param burnedShares The amount of \"internal BPT\" shares burned\n     */\n    event BufferSharesBurned(IERC4626 indexed wrappedToken, address indexed from, uint256 burnedShares);\n\n    /**\n     * @notice Liquidity was removed from an ERC4626 buffer.\n     * @dev The underlying token can be derived from the wrapped token, so it's not included here.\n     * @param wrappedToken The wrapped token that identifies the buffer\n     * @param amountUnderlying The amount of the underlying token that was withdrawn\n     * @param amountWrapped The amount of the wrapped token that was withdrawn\n     * @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)\n     */\n    event LiquidityRemovedFromBuffer(\n        IERC4626 indexed wrappedToken,\n        uint256 amountUnderlying,\n        uint256 amountWrapped,\n        bytes32 bufferBalances\n    );\n\n    /**\n     * @notice The Vault buffers pause status has changed.\n     * @dev If buffers all paused, all buffer operations (i.e., all calls through the Router with `isBuffer`\n     * set to true) will revert.\n     *\n     * @param paused True if the Vault buffers were paused\n     */\n    event VaultBuffersPausedStateChanged(bool paused);\n\n    /**\n     * @notice Pools can use this event to emit event data from the Vault.\n     * @param pool Pool address\n     * @param eventKey Event key\n     * @param eventData Encoded event data\n     */\n    event VaultAuxiliary(address indexed pool, bytes32 indexed eventKey, bytes eventData);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IAuthorizer } from \"./IAuthorizer.sol\";\nimport { IProtocolFeeController } from \"./IProtocolFeeController.sol\";\nimport { IVault } from \"./IVault.sol\";\nimport { IHooks } from \"./IHooks.sol\";\nimport \"./VaultTypes.sol\";\n\n/**\n * @notice Interface for functions defined on the `VaultExtension` contract.\n * @dev `VaultExtension` handles less critical or frequently used functions, since delegate calls through\n * the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and\n * liquidity operations.\n */\ninterface IVaultExtension {\n    /*******************************************************************************\n                              Constants and immutables\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the main Vault address.\n     * @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n     * @return vault The address of the main Vault\n     */\n    function vault() external view returns (IVault);\n\n    /**\n     * @notice Returns the VaultAdmin contract address.\n     * @dev The VaultAdmin contract mostly implements permissioned functions.\n     * @return vaultAdmin The address of the Vault admin\n     */\n    function getVaultAdmin() external view returns (address vaultAdmin);\n\n    /*******************************************************************************\n                              Transient Accounting\n    *******************************************************************************/\n\n    /**\n     * @notice Returns whether the Vault is unlocked (i.e., executing an operation).\n     * @dev The Vault must be unlocked to perform state-changing liquidity operations.\n     * @return unlocked True if the Vault is unlocked, false otherwise\n     */\n    function isUnlocked() external view returns (bool unlocked);\n\n    /**\n     *  @notice Returns the count of non-zero deltas.\n     *  @return nonzeroDeltaCount The current value of `_nonzeroDeltaCount`\n     */\n    function getNonzeroDeltaCount() external view returns (uint256 nonzeroDeltaCount);\n\n    /**\n     * @notice Retrieves the token delta for a specific token.\n     * @dev This function allows reading the value from the `_tokenDeltas` mapping.\n     * @param token The token for which the delta is being fetched\n     * @return tokenDelta The delta of the specified token\n     */\n    function getTokenDelta(IERC20 token) external view returns (int256 tokenDelta);\n\n    /**\n     * @notice Retrieves the reserve (i.e., total Vault balance) of a given token.\n     * @param token The token for which to retrieve the reserve\n     * @return reserveAmount The amount of reserves for the given token\n     */\n    function getReservesOf(IERC20 token) external view returns (uint256 reserveAmount);\n\n    /**\n     * @notice This flag is used to detect and tax \"round-trip\" interactions (adding and removing liquidity in the\n     * same pool).\n     * @dev Taxing remove liquidity proportional whenever liquidity was added in the same `unlock` call adds an extra\n     * layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional\n     * is the only standard way to exit a position without fees, and this flag is used to enable fees in that case.\n     * It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse\n     * than a simple swap for every pool type.\n     *\n     * @param pool Address of the pool to check\n     * @return liquidityAdded True if liquidity has been added to this pool in the current transaction\n     \n     * Note that there is no `sessionId` argument; it always returns the value for the current (i.e., latest) session.\n     */\n    function getAddLiquidityCalledFlag(address pool) external view returns (bool liquidityAdded);\n\n    /*******************************************************************************\n                                    Pool Registration\n    *******************************************************************************/\n\n    /**\n     * @notice Registers a pool, associating it with its factory and the tokens it manages.\n     * @dev A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely\n     * by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an\n     * additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused\n     * pool will automatically unpause. Balancer timestamps are 32 bits.\n     *\n     * A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a\n     * multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to\n     * the Vault.\n     *\n     * If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the\n     * authorizer.\n     *\n     * @param pool The address of the pool being registered\n     * @param tokenConfig An array of descriptors for the tokens the pool will manage\n     * @param swapFeePercentage The initial static swap fee percentage of the pool\n     * @param pauseWindowEndTime The timestamp after which it is no longer possible to pause the pool\n     * @param protocolFeeExempt If true, the pool's initial aggregate fees will be set to 0\n     * @param roleAccounts Addresses the Vault will allow to change certain pool settings\n     * @param poolHooksContract Contract that implements the hooks for the pool\n     * @param liquidityManagement Liquidity management flags with implemented methods\n     */\n    function registerPool(\n        address pool,\n        TokenConfig[] memory tokenConfig,\n        uint256 swapFeePercentage,\n        uint32 pauseWindowEndTime,\n        bool protocolFeeExempt,\n        PoolRoleAccounts calldata roleAccounts,\n        address poolHooksContract,\n        LiquidityManagement calldata liquidityManagement\n    ) external;\n\n    /**\n     * @notice Checks whether a pool is registered.\n     * @param pool Address of the pool to check\n     * @return registered True if the pool is registered, false otherwise\n     */\n    function isPoolRegistered(address pool) external view returns (bool registered);\n\n    /**\n     * @notice Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\n     * @param pool Address of the pool to initialize\n     * @param to Address that will receive the output BPT\n     * @param tokens Tokens used to seed the pool (must match the registered tokens)\n     * @param exactAmountsIn Exact amounts of input tokens\n     * @param minBptAmountOut Minimum amount of output pool tokens\n     * @param userData Additional (optional) data required for adding initial liquidity\n     * @return bptAmountOut Output pool token amount\n     */\n    function initialize(\n        address pool,\n        address to,\n        IERC20[] memory tokens,\n        uint256[] memory exactAmountsIn,\n        uint256 minBptAmountOut,\n        bytes memory userData\n    ) external returns (uint256 bptAmountOut);\n\n    /*******************************************************************************\n                                    Pool Information\n    *******************************************************************************/\n\n    /**\n     * @notice Checks whether a pool is initialized.\n     * @dev An initialized pool can be considered registered as well.\n     * @param pool Address of the pool to check\n     * @return initialized True if the pool is initialized, false otherwise\n     */\n    function isPoolInitialized(address pool) external view returns (bool initialized);\n\n    /**\n     * @notice Gets the tokens registered to a pool.\n     * @param pool Address of the pool\n     * @return tokens List of tokens in the pool\n     */\n    function getPoolTokens(address pool) external view returns (IERC20[] memory tokens);\n\n    /**\n     * @notice Gets pool token rates.\n     * @dev This function performs external calls if tokens are yield-bearing. All returned arrays are in token\n     * registration order.\n     *\n     * @param pool Address of the pool\n     * @return decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n     * calculations. FP(1) for 18-decimal tokens\n     * @return tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\n     */\n    function getPoolTokenRates(\n        address pool\n    ) external view returns (uint256[] memory decimalScalingFactors, uint256[] memory tokenRates);\n\n    /**\n     * @notice Returns comprehensive pool data for the given pool.\n     * @dev This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\n     * @param pool The address of the pool\n     * @return poolData The `PoolData` result\n     */\n    function getPoolData(address pool) external view returns (PoolData memory poolData);\n\n    /**\n     * @notice Gets the raw data for a pool: tokens, raw balances, scaling factors.\n     * @param pool Address of the pool\n     * @return tokens The pool tokens, sorted in registration order\n     * @return tokenInfo Token info structs (type, rate provider, yield flag), sorted in token registration order\n     * @return balancesRaw Current native decimal balances of the pool tokens, sorted in token registration order\n     * @return lastBalancesLiveScaled18 Last saved live balances, sorted in token registration order\n     */\n    function getPoolTokenInfo(\n        address pool\n    )\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            TokenInfo[] memory tokenInfo,\n            uint256[] memory balancesRaw,\n            uint256[] memory lastBalancesLiveScaled18\n        );\n\n    /**\n     * @notice Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in\n     * registration order.\n     *\n     * @param pool Address of the pool\n     * @return balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates\n     */\n    function getCurrentLiveBalances(address pool) external view returns (uint256[] memory balancesLiveScaled18);\n\n    /**\n     * @notice Gets the configuration parameters of a pool.\n     * @dev The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\n     * @param pool Address of the pool\n     * @return poolConfig The pool configuration as a `PoolConfig` struct\n     */\n    function getPoolConfig(address pool) external view returns (PoolConfig memory poolConfig);\n\n    /**\n     * @notice Gets the hooks configuration parameters of a pool.\n     * @dev The `HooksConfig` contains flags indicating which pool hooks are implemented.\n     * @param pool Address of the pool\n     * @return hooksConfig The hooks configuration as a `HooksConfig` struct\n     */\n    function getHooksConfig(address pool) external view returns (HooksConfig memory hooksConfig);\n\n    /**\n     * @notice The current rate of a pool token (BPT) = invariant / totalSupply.\n     * @param pool Address of the pool\n     * @return rate BPT rate\n     */\n    function getBptRate(address pool) external view returns (uint256 rate);\n\n    /*******************************************************************************\n                                 Balancer Pool Tokens\n    *******************************************************************************/\n\n    /**\n     * @notice Gets the total supply of a given ERC20 token.\n     * @param token The token address\n     * @return tokenTotalSupply Total supply of the token\n     */\n    function totalSupply(address token) external view returns (uint256 tokenTotalSupply);\n\n    /**\n     * @notice Gets the balance of an account for a given ERC20 token.\n     * @param token Address of the token\n     * @param account Address of the account\n     * @return tokenBalance Token balance of the account\n     */\n    function balanceOf(address token, address account) external view returns (uint256 tokenBalance);\n\n    /**\n     * @notice Gets the allowance of a spender for a given ERC20 token and owner.\n     * @param token Address of the token\n     * @param owner Address of the owner\n     * @param spender Address of the spender\n     * @return tokenAllowance Amount of tokens the spender is allowed to spend\n     */\n    function allowance(address token, address owner, address spender) external view returns (uint256 tokenAllowance);\n\n    /**\n     * @notice Approves a spender to spend pool tokens on behalf of sender.\n     * @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n     * the pool contract, so msg.sender is used as the token address.\n     *\n     * @param owner Address of the owner\n     * @param spender Address of the spender\n     * @param amount Amount of tokens to approve\n     * @return success True if successful, false otherwise\n     */\n    function approve(address owner, address spender, uint256 amount) external returns (bool success);\n\n    /*******************************************************************************\n                                     Pool Pausing\n    *******************************************************************************/\n\n    /**\n     * @notice Indicates whether a pool is paused.\n     * @dev If a pool is paused, all non-Recovery Mode state-changing operations will revert.\n     * @param pool The pool to be checked\n     * @return poolPaused True if the pool is paused\n     */\n    function isPoolPaused(address pool) external view returns (bool poolPaused);\n\n    /**\n     * @notice Returns the paused status, and end times of the Pool's pause window and buffer period.\n     * @dev Note that even when set to a paused state, the pool will automatically unpause at the end of\n     * the buffer period. Balancer timestamps are 32 bits.\n     *\n     * @param pool The pool whose data is requested\n     * @return poolPaused True if the Pool is paused\n     * @return poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\n     * @return poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\n     * @return pauseManager The pause manager, or the zero address\n     */\n    function getPoolPausedState(\n        address pool\n    )\n        external\n        view\n        returns (bool poolPaused, uint32 poolPauseWindowEndTime, uint32 poolBufferPeriodEndTime, address pauseManager);\n\n    /*******************************************************************************\n                                   ERC4626 Buffers\n    *******************************************************************************/\n\n    /**\n     * @notice Checks if the wrapped token has an initialized buffer in the Vault.\n     * @dev An initialized buffer should have an asset registered in the Vault.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return isBufferInitialized True if the ERC4626 buffer is initialized\n     */\n    function isERC4626BufferInitialized(IERC4626 wrappedToken) external view returns (bool isBufferInitialized);\n\n    /**\n     * @notice Gets the registered asset for a given buffer.\n     * @dev To avoid malicious wrappers (e.g., that might potentially change their asset after deployment), routers\n     * should never call `wrapper.asset()` directly, at least without checking it against the asset registered with\n     * the Vault on initialization.\n     *\n     * @param wrappedToken The wrapped token specifying the buffer\n     * @return asset The underlying asset of the wrapped token\n     */\n    function getERC4626BufferAsset(IERC4626 wrappedToken) external view returns (address asset);\n\n    /*******************************************************************************\n                                          Fees\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\n     * @param pool The address of the pool for which aggregate fees have been collected\n     * @param token The address of the token in which fees have been accumulated\n     * @return swapFeeAmount The total amount of fees accumulated in the specified token\n     */\n    function getAggregateSwapFeeAmount(address pool, IERC20 token) external view returns (uint256 swapFeeAmount);\n\n    /**\n     * @notice Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\n     * @param pool The address of the pool for which aggregate fees have been collected\n     * @param token The address of the token in which fees have been accumulated\n     * @return yieldFeeAmount The total amount of fees accumulated in the specified token\n     */\n    function getAggregateYieldFeeAmount(address pool, IERC20 token) external view returns (uint256 yieldFeeAmount);\n\n    /**\n     * @notice Fetches the static swap fee percentage for a given pool.\n     * @param pool The address of the pool whose static swap fee percentage is being queried\n     * @return swapFeePercentage The current static swap fee percentage for the specified pool\n     */\n    function getStaticSwapFeePercentage(address pool) external view returns (uint256 swapFeePercentage);\n\n    /**\n     * @notice Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\n     * @param pool The address of the pool whose roles are being queried\n     * @return roleAccounts A struct containing the role accounts for the pool (or 0 if unassigned)\n     */\n    function getPoolRoleAccounts(address pool) external view returns (PoolRoleAccounts memory roleAccounts);\n\n    /**\n     * @notice Query the current dynamic swap fee percentage of a pool, given a set of swap parameters.\n     * @dev Reverts if the hook doesn't return the success flag set to `true`.\n     * @param pool The pool\n     * @param swapParams The swap parameters used to compute the fee\n     * @return dynamicSwapFeePercentage The dynamic swap fee percentage\n     */\n    function computeDynamicSwapFeePercentage(\n        address pool,\n        PoolSwapParams memory swapParams\n    ) external view returns (uint256 dynamicSwapFeePercentage);\n\n    /**\n     * @notice Returns the Protocol Fee Controller address.\n     * @return protocolFeeController Address of the ProtocolFeeController\n     */\n    function getProtocolFeeController() external view returns (IProtocolFeeController protocolFeeController);\n\n    /*******************************************************************************\n                                     Recovery Mode\n    *******************************************************************************/\n\n    /**\n     * @notice Checks whether a pool is in Recovery Mode.\n     * @dev Recovery Mode enables a safe proportional withdrawal path, with no external calls.\n     * @param pool Address of the pool to check\n     * @return inRecoveryMode True if the pool is in Recovery Mode, false otherwise\n     */\n    function isPoolInRecoveryMode(address pool) external view returns (bool inRecoveryMode);\n\n    /**\n     * @notice Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out.\n     * The request is implemented by the Vault without any interaction with the pool, ensuring that\n     * it works the same for all pools, and cannot be disabled by a new pool type.\n     *\n     * @param pool Address of the pool\n     * @param from Address of user to burn pool tokens from\n     * @param exactBptAmountIn Input pool token amount\n     * @param minAmountsOut Minimum amounts of tokens to be received, sorted in token registration order\n     * @return amountsOut Actual calculated amounts of output tokens, sorted in token registration order\n     */\n    function removeLiquidityRecovery(\n        address pool,\n        address from,\n        uint256 exactBptAmountIn,\n        uint256[] memory minAmountsOut\n    ) external returns (uint256[] memory amountsOut);\n\n    /*******************************************************************************\n                                    Queries\n    *******************************************************************************/\n\n    /**\n     * @notice Performs a callback on msg.sender with arguments provided in `data`.\n     * @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\n     * anything else will revert.\n     *\n     * Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier.\n     *\n     * Allows the external calling of a function via the Vault contract to\n     * access Vault's functions guarded by `onlyWhenUnlocked`.\n     * `transient` modifier ensuring balances changes within the Vault are settled.\n     *\n     * @param data Contains function signature and args to be passed to the msg.sender\n     * @return result Resulting data from the call\n     */\n    function quote(bytes calldata data) external returns (bytes memory result);\n\n    /**\n     * @notice Performs a callback on msg.sender with arguments provided in `data`.\n     * @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\n     * anything else will revert.\n     *\n     * Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier.\n     *\n     * Allows the external calling of a function via the Vault contract to\n     * access Vault's functions guarded by `onlyWhenUnlocked`.\n     * `transient` modifier ensuring balances changes within the Vault are settled.\n     *\n     * This call always reverts, returning the result in the revert reason.\n     *\n     * @param data Contains function signature and args to be passed to the msg.sender\n     */\n    function quoteAndRevert(bytes calldata data) external;\n\n    /**\n     * @notice Returns true if queries are disabled on the Vault.\n     * @dev If true, queries might either be disabled temporarily or permanently.\n     * @return queryDisabled True if query functionality is reversibly disabled\n     */\n    function isQueryDisabled() external view returns (bool queryDisabled);\n\n    /**\n     * @notice Returns true if queries are disabled permanently; false if they are enabled.\n     * @dev This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\n     * @return queryDisabledPermanently True if query functionality is permanently disabled\n     */\n    function isQueryDisabledPermanently() external view returns (bool queryDisabledPermanently);\n\n    /**\n     * @notice Pools can use this event to emit event data from the Vault.\n     * @param eventKey Event key\n     * @param eventData Encoded event data\n     */\n    function emitAuxiliaryEvent(bytes32 eventKey, bytes calldata eventData) external;\n\n    /*******************************************************************************\n                                Authentication\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the Authorizer address.\n     * @dev The authorizer holds the permissions granted by governance. It is set on Vault deployment,\n     * and can be changed through a permissioned call.\n     *\n     * @return authorizer Address of the authorizer contract\n     */\n    function getAuthorizer() external view returns (IAuthorizer authorizer);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./VaultTypes.sol\";\n\n/**\n * @notice Interface for functions defined on the main Vault contract.\n * @dev These are generally \"critical path\" functions (swap, add/remove liquidity) that are in the main contract\n * for technical or performance reasons.\n */\ninterface IVaultMain {\n    /*******************************************************************************\n                              Transient Accounting\n    *******************************************************************************/\n\n    /**\n     * @notice Creates a context for a sequence of operations (i.e., \"unlocks\" the Vault).\n     * @dev Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`,\n     * meaning all balances for the caller have to be settled at the end.\n     *\n     * @param data Contains function signature and args to be passed to the msg.sender\n     * @return result Resulting data from the call\n     */\n    function unlock(bytes calldata data) external returns (bytes memory result);\n\n    /**\n     * @notice Settles deltas for a token; must be successful for the current lock to be released.\n     * @dev Protects the caller against leftover dust in the Vault for the token being settled. The caller\n     * should know in advance how many tokens were paid to the Vault, so it can provide it as a hint to discard any\n     * excess in the Vault balance.\n     *\n     * If the given hint is equal to or higher than the difference in reserves, the difference in reserves is given as\n     * credit to the caller. If it's higher, the caller sent fewer tokens than expected, so settlement would fail.\n     *\n     * If the given hint is lower than the difference in reserves, the hint is given as credit to the caller.\n     * In this case, the excess would be absorbed by the Vault (and reflected correctly in the reserves), but would\n     * not affect settlement.\n     *\n     * The credit supplied by the Vault can be calculated as `min(reserveDifference, amountHint)`, where the reserve\n     * difference equals current balance of the token minus existing reserves of the token when the function is called.\n     *\n     * @param token Address of the token\n     * @param amountHint Amount paid as reported by the caller\n     * @return credit Credit received in return of the payment\n     */\n    function settle(IERC20 token, uint256 amountHint) external returns (uint256 credit);\n\n    /**\n     * @notice Sends tokens to a recipient.\n     * @dev There is no inverse operation for this function. Transfer funds to the Vault and call `settle` to cancel\n     * debts.\n     *\n     * @param token Address of the token\n     * @param to Recipient address\n     * @param amount Amount of tokens to send\n     */\n    function sendTo(IERC20 token, address to, uint256 amount) external;\n\n    /***************************************************************************\n                                       Swaps\n    ***************************************************************************/\n\n    /**\n     * @notice Swaps tokens based on provided parameters.\n     * @dev All parameters are given in raw token decimal encoding.\n     * @param vaultSwapParams Parameters for the swap (see above for struct definition)\n     * @return amountCalculatedRaw Calculated swap amount\n     * @return amountInRaw Amount of input tokens for the swap\n     * @return amountOutRaw Amount of output tokens from the swap\n     */\n    function swap(\n        VaultSwapParams memory vaultSwapParams\n    ) external returns (uint256 amountCalculatedRaw, uint256 amountInRaw, uint256 amountOutRaw);\n\n    /***************************************************************************\n                                   Add Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Adds liquidity to a pool.\n     * @dev Caution should be exercised when adding liquidity because the Vault has the capability\n     * to transfer tokens from any user, given that it holds all allowances.\n     *\n     * @param params Parameters for the add liquidity (see above for struct definition)\n     * @return amountsIn Actual amounts of input tokens\n     * @return bptAmountOut Output pool token amount\n     * @return returnData Arbitrary (optional) data with an encoded response from the pool\n     */\n    function addLiquidity(\n        AddLiquidityParams memory params\n    ) external returns (uint256[] memory amountsIn, uint256 bptAmountOut, bytes memory returnData);\n\n    /***************************************************************************\n                                 Remove Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Removes liquidity from a pool.\n     * @dev Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user.\n     * Untrusted routers require prior approval from the user. This is the only function allowed to call\n     * _queryModeBalanceIncrease (and only in a query context).\n     *\n     * @param params Parameters for the remove liquidity (see above for struct definition)\n     * @return bptAmountIn Actual amount of BPT burned\n     * @return amountsOut Actual amounts of output tokens\n     * @return returnData Arbitrary (optional) data with an encoded response from the pool\n     */\n    function removeLiquidity(\n        RemoveLiquidityParams memory params\n    ) external returns (uint256 bptAmountIn, uint256[] memory amountsOut, bytes memory returnData);\n\n    /*******************************************************************************\n                                    Pool Information\n    *******************************************************************************/\n\n    /**\n     * @notice Gets the index of a token in a given pool.\n     * @dev Reverts if the pool is not registered, or if the token does not belong to the pool.\n     * @param pool Address of the pool\n     * @param token Address of the token\n     * @return tokenCount Number of tokens in the pool\n     * @return index Index corresponding to the given token in the pool's token list\n     */\n    function getPoolTokenCountAndIndexOfToken(\n        address pool,\n        IERC20 token\n    ) external view returns (uint256 tokenCount, uint256 index);\n\n    /*******************************************************************************\n                                 Balancer Pool Tokens\n    *******************************************************************************/\n\n    /**\n     * @notice Transfers pool token from owner to a recipient.\n     * @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n     * the pool contract, so msg.sender is used as the token address.\n     *\n     * @param owner Address of the owner\n     * @param to Address of the recipient\n     * @param amount Amount of tokens to transfer\n     * @return success True if successful, false otherwise\n     */\n    function transfer(address owner, address to, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Transfers pool token from a sender to a recipient using an allowance.\n     * @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n     * the pool contract, so msg.sender is used as the token address.\n     *\n     * @param spender Address allowed to perform the transfer\n     * @param from Address of the sender\n     * @param to Address of the recipient\n     * @param amount Amount of tokens to transfer\n     * @return success True if successful, false otherwise\n     */\n    function transferFrom(address spender, address from, address to, uint256 amount) external returns (bool success);\n\n    /*******************************************************************************\n                                  ERC4626 Buffers\n    *******************************************************************************/\n\n    /**\n     * @notice Wraps/unwraps tokens based on the parameters provided.\n     * @dev All parameters are given in raw token decimal encoding. It requires the buffer to be initialized,\n     * and uses the internal wrapped token buffer when it has enough liquidity to avoid external calls.\n     *\n     * @param params Parameters for the wrap/unwrap operation (see struct definition)\n     * @return amountCalculatedRaw Calculated swap amount\n     * @return amountInRaw Amount of input tokens for the swap\n     * @return amountOutRaw Amount of output tokens from the swap\n     */\n    function erc4626BufferWrapOrUnwrap(\n        BufferWrapOrUnwrapParams memory params\n    ) external returns (uint256 amountCalculatedRaw, uint256 amountInRaw, uint256 amountOutRaw);\n\n    /*******************************************************************************\n                                     Miscellaneous\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the VaultExtension contract address.\n     * @dev Function is in the main Vault contract. The VaultExtension handles less critical or frequently used\n     * functions, since delegate calls through the Vault are more expensive than direct calls.\n     *\n     * @return vaultExtension Address of the VaultExtension\n     */\n    function getVaultExtension() external view returns (address vaultExtension);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\n\nimport { IRateProvider } from \"../solidity-utils/helpers/IRateProvider.sol\";\n\n/**\n * @notice Represents a pool's liquidity management configuration.\n * @param disableUnbalancedLiquidity If set, liquidity can only be added or removed proportionally\n * @param enableAddLiquidityCustom If set, the pool has implemented `onAddLiquidityCustom`\n * @param enableRemoveLiquidityCustom If set, the pool has implemented `onRemoveLiquidityCustom`\n * @param enableDonation If set, the pool will not revert if liquidity is added with AddLiquidityKind.DONATION\n */\nstruct LiquidityManagement {\n    bool disableUnbalancedLiquidity;\n    bool enableAddLiquidityCustom;\n    bool enableRemoveLiquidityCustom;\n    bool enableDonation;\n}\n\n// @notice Custom type to store the entire configuration of the pool.\ntype PoolConfigBits is bytes32;\n\n/**\n * @notice Represents a pool's configuration (hooks configuration are separated in another struct).\n * @param liquidityManagement Flags related to adding/removing liquidity\n * @param staticSwapFeePercentage The pool's native swap fee\n * @param aggregateSwapFeePercentage The total swap fee charged, including protocol and pool creator components\n * @param aggregateYieldFeePercentage The total swap fee charged, including protocol and pool creator components\n * @param tokenDecimalDiffs Compressed storage of the token decimals of each pool token\n * @param pauseWindowEndTime Timestamp after which the pool cannot be paused\n * @param isPoolRegistered If true, the pool has been registered with the Vault\n * @param isPoolInitialized If true, the pool has been initialized with liquidity, and is available for trading\n * @param isPoolPaused If true, the pool has been paused (by governance or the pauseManager)\n * @param isPoolInRecoveryMode If true, the pool has been placed in recovery mode, enabling recovery mode withdrawals\n */\nstruct PoolConfig {\n    LiquidityManagement liquidityManagement;\n    uint256 staticSwapFeePercentage;\n    uint256 aggregateSwapFeePercentage;\n    uint256 aggregateYieldFeePercentage;\n    uint40 tokenDecimalDiffs;\n    uint32 pauseWindowEndTime;\n    bool isPoolRegistered;\n    bool isPoolInitialized;\n    bool isPoolPaused;\n    bool isPoolInRecoveryMode;\n}\n\n/**\n * @notice The flag portion of the `HooksConfig`.\n * @dev `enableHookAdjustedAmounts` must be true for all contracts that modify the `amountCalculated`\n * in after hooks. Otherwise, the Vault will ignore any \"hookAdjusted\" amounts. Setting any \"shouldCall\"\n * flags to true will cause the Vault to call the corresponding hook during operations.\n */\nstruct HookFlags {\n    bool enableHookAdjustedAmounts;\n    bool shouldCallBeforeInitialize;\n    bool shouldCallAfterInitialize;\n    bool shouldCallComputeDynamicSwapFee;\n    bool shouldCallBeforeSwap;\n    bool shouldCallAfterSwap;\n    bool shouldCallBeforeAddLiquidity;\n    bool shouldCallAfterAddLiquidity;\n    bool shouldCallBeforeRemoveLiquidity;\n    bool shouldCallAfterRemoveLiquidity;\n}\n\n/// @notice Represents a hook contract configuration for a pool (HookFlags + hooksContract address).\nstruct HooksConfig {\n    bool enableHookAdjustedAmounts;\n    bool shouldCallBeforeInitialize;\n    bool shouldCallAfterInitialize;\n    bool shouldCallComputeDynamicSwapFee;\n    bool shouldCallBeforeSwap;\n    bool shouldCallAfterSwap;\n    bool shouldCallBeforeAddLiquidity;\n    bool shouldCallAfterAddLiquidity;\n    bool shouldCallBeforeRemoveLiquidity;\n    bool shouldCallAfterRemoveLiquidity;\n    address hooksContract;\n}\n\n/**\n * @notice Represents temporary state used during a swap operation.\n * @param indexIn The zero-based index of tokenIn\n * @param indexOut The zero-based index of tokenOut\n * @param amountGivenScaled18 The amountGiven (i.e., tokenIn for ExactIn), adjusted for token decimals\n * @param swapFeePercentage The swap fee to be applied (might be static or dynamic)\n */\nstruct SwapState {\n    uint256 indexIn;\n    uint256 indexOut;\n    uint256 amountGivenScaled18;\n    uint256 swapFeePercentage;\n}\n\n/**\n * @notice Represents the Vault's configuration.\n * @param isQueryDisabled If set to true, disables query functionality of the Vault. Can be modified by governance\n * @param isVaultPaused If set to true, swaps and add/remove liquidity operations are halted\n * @param areBuffersPaused If set to true, the Vault wrap/unwrap primitives associated with buffers will be disabled\n */\nstruct VaultState {\n    bool isQueryDisabled;\n    bool isVaultPaused;\n    bool areBuffersPaused;\n}\n\n/**\n * @notice Represents the accounts holding certain roles for a given pool. This is passed in on pool registration.\n * @param pauseManager Account empowered to pause/unpause the pool (note that governance can always pause a pool)\n * @param swapFeeManager Account empowered to set static swap fees for a pool (or 0 to delegate to governance)\n * @param poolCreator Account empowered to set the pool creator fee (or 0 if all fees go to the protocol and LPs)\n */\nstruct PoolRoleAccounts {\n    address pauseManager;\n    address swapFeeManager;\n    address poolCreator;\n}\n\n/*******************************************************************************\n                                   Tokens\n*******************************************************************************/\n\n// Note that the following tokens are unsupported by the Vault. This list is not meant to be exhaustive, but covers\n// many common types of tokens that will not work with the Vault architecture. (See https://github.com/d-xo/weird-erc20\n// for examples of token features that are problematic for many protocols.)\n//\n// * Rebasing tokens (e.g., aDAI). The Vault keeps track of token balances in its internal accounting; any token whose\n//   balance changes asynchronously (i.e., outside a swap or liquidity operation), would get out-of-sync with this\n//   internal accounting. This category would also include \"airdrop\" tokens, whose balances can change unexpectedly.\n//\n// * Double entrypoint (e.g., old Synthetix tokens, now fixed). These could likewise bypass internal accounting by\n//   registering the token under one address, then accessing it through another. This is especially troublesome\n//   in v3, with the introduction of ERC4626 buffers.\n//\n// * Fee on transfer (e.g., PAXG). The Vault issues credits and debits according to given and calculated token amounts,\n//   and settlement assumes that the send/receive transfer functions transfer exactly the given number of tokens.\n//   If this is not the case, transactions will not settle. Unlike with the other types, which are fundamentally\n//   incompatible, it would be possible to design a Router to handle this - but we didn't try it. In any case, it's\n//   not supported in the current Routers.\n//\n// * Tokens with more than 18 decimals (e.g., YAM-V2). The Vault handles token scaling: i.e., handling I/O for\n//   amounts in native token decimals, but doing calculations with full 18-decimal precision. This requires reading\n//   and storing the decimals for each token. Since virtually all tokens are 18 or fewer decimals, and we have limited\n//   storage space, 18 was a reasonable maximum. Unlike the other types, this is enforceable by the Vault. Attempting\n//   to register such tokens will revert with `InvalidTokenDecimals`. Of course, we must also be able to read the token\n//   decimals, so the Vault only supports tokens that implement `IERC20Metadata.decimals`, and return a value less than\n//   or equal to 18.\n//\n//  * Token decimals are checked and stored only once, on registration. Valid tokens store their decimals as immutable\n//    variables or constants. Malicious tokens that don't respect this basic property would not work anywhere in DeFi.\n//\n// These types of tokens are supported but discouraged, as they don't tend to play well with AMMs generally.\n//\n// * Very low-decimal tokens (e.g., GUSD). The Vault has been extensively tested with 6-decimal tokens (e.g., USDC),\n//   but going much below that may lead to unanticipated effects due to precision loss, especially with smaller trade\n//   values.\n//\n// * Revert on zero value approval/transfer. The Vault has been tested against these, but peripheral contracts, such\n//   as hooks, might not have been designed with this in mind.\n//\n// * Other types from \"weird-erc20,\" such as upgradeable, pausable, or tokens with blocklists. We have seen cases\n//   where a token upgrade fails, \"bricking\" the token - and many operations on pools containing that token. Any\n//   sort of \"permissioned\" token that can make transfers fail can cause operations on pools containing them to\n//   revert. Even Recovery Mode cannot help then, as it does a proportional withdrawal of all tokens. If one of\n//   them is bricked, the whole operation will revert. Since v3 does not have \"internal balances\" like v2, there\n//   is no recourse.\n//\n//   Of course, many tokens in common use have some of these \"features\" (especially centralized stable coins), so\n//   we have to support them anyway. Working with common centralized tokens is a risk common to all of DeFi.\n\n/**\n * @notice Token types supported by the Vault.\n * @dev In general, pools may contain any combination of these tokens.\n *\n * STANDARD tokens (e.g., BAL, WETH) have no rate provider.\n * WITH_RATE tokens (e.g., wstETH) require a rate provider. These may be tokens like wstETH, which need to be wrapped\n * because the underlying stETH token is rebasing, and such tokens are unsupported by the Vault. They may also be\n * tokens like sEUR, which track an underlying asset, but are not yield-bearing. Finally, this encompasses\n * yield-bearing ERC4626 tokens, which can be used to facilitate swaps without requiring wrapping or unwrapping\n * in most cases. The `paysYieldFees` flag can be used to indicate whether a token is yield-bearing (e.g., waDAI),\n * not yield-bearing (e.g., sEUR), or yield-bearing but exempt from fees (e.g., in certain nested pools, where\n * yield fees are charged elsewhere).\n *\n * NB: STANDARD must always be the first enum element, so that newly initialized data structures default to Standard.\n */\nenum TokenType {\n    STANDARD,\n    WITH_RATE\n}\n\n/**\n * @notice Encapsulate the data required for the Vault to support a token of the given type.\n * @dev For STANDARD tokens, the rate provider address must be 0, and paysYieldFees must be false. All WITH_RATE tokens\n * need a rate provider, and may or may not be yield-bearing.\n *\n * At registration time, it is useful to include the token address along with the token parameters in the structure\n * passed to `registerPool`, as the alternative would be parallel arrays, which would be error prone and require\n * validation checks. `TokenConfig` is only used for registration, and is never put into storage (see `TokenInfo`).\n *\n * @param token The token address\n * @param tokenType The token type (see the enum for supported types)\n * @param rateProvider The rate provider for a token (see further documentation above)\n * @param paysYieldFees Flag indicating whether yield fees should be charged on this token\n */\nstruct TokenConfig {\n    IERC20 token;\n    TokenType tokenType;\n    IRateProvider rateProvider;\n    bool paysYieldFees;\n}\n\n/**\n * @notice This data structure is stored in `_poolTokenInfo`, a nested mapping from pool -> (token -> TokenInfo).\n * @dev Since the token is already the key of the nested mapping, it would be redundant (and an extra SLOAD) to store\n * it again in the struct. When we construct PoolData, the tokens are separated into their own array.\n *\n * @param tokenType The token type (see the enum for supported types)\n * @param rateProvider The rate provider for a token (see further documentation above)\n * @param paysYieldFees Flag indicating whether yield fees should be charged on this token\n */\nstruct TokenInfo {\n    TokenType tokenType;\n    IRateProvider rateProvider;\n    bool paysYieldFees;\n}\n\n/**\n * @notice Data structure used to represent the current pool state in memory\n * @param poolConfigBits Custom type to store the entire configuration of the pool.\n * @param tokens Pool tokens, sorted in token registration order\n * @param tokenInfo Configuration data for each token, sorted in token registration order\n * @param balancesRaw Token balances in native decimals\n * @param balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates\n * @param tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\n * @param decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n * calculations. It is 1e18 (FP 1) for 18-decimal tokens\n */\nstruct PoolData {\n    PoolConfigBits poolConfigBits;\n    IERC20[] tokens;\n    TokenInfo[] tokenInfo;\n    uint256[] balancesRaw;\n    uint256[] balancesLiveScaled18;\n    uint256[] tokenRates;\n    uint256[] decimalScalingFactors;\n}\n\nenum Rounding {\n    ROUND_UP,\n    ROUND_DOWN\n}\n\n/*******************************************************************************\n                                    Swaps\n*******************************************************************************/\n\nenum SwapKind {\n    EXACT_IN,\n    EXACT_OUT\n}\n\n// There are two \"SwapParams\" structs defined below. `VaultSwapParams` corresponds to the external swap API defined\n// in the Router contracts, which uses explicit token addresses, the amount given and limit on the calculated amount\n// expressed in native token decimals, and optional user data passed in from the caller.\n//\n// `PoolSwapParams` passes some of this information through (kind, userData), but \"translates\" the parameters to fit\n// the internal swap API used by `IBasePool`. It scales amounts to full 18-decimal precision, adds the token balances,\n// converts the raw token addresses to indices, and adds the address of the Router originating the request. It does\n// not need the limit, since this is checked at the Router level.\n\n/**\n * @notice Data passed into primary Vault `swap` operations.\n * @param kind Type of swap (Exact In or Exact Out)\n * @param pool The pool with the tokens being swapped\n * @param tokenIn The token entering the Vault (balance increases)\n * @param tokenOut The token leaving the Vault (balance decreases)\n * @param amountGivenRaw Amount specified for tokenIn or tokenOut (depending on the type of swap)\n * @param limitRaw Minimum or maximum value of the calculated amount (depending on the type of swap)\n * @param userData Additional (optional) user data\n */\nstruct VaultSwapParams {\n    SwapKind kind;\n    address pool;\n    IERC20 tokenIn;\n    IERC20 tokenOut;\n    uint256 amountGivenRaw;\n    uint256 limitRaw;\n    bytes userData;\n}\n\n/**\n * @notice Data for a swap operation, used by contracts implementing `IBasePool`.\n * @param kind Type of swap (exact in or exact out)\n * @param amountGivenScaled18 Amount given based on kind of the swap (e.g., tokenIn for EXACT_IN)\n * @param balancesScaled18 Current pool balances\n * @param indexIn Index of tokenIn\n * @param indexOut Index of tokenOut\n * @param router The address (usually a router contract) that initiated a swap operation on the Vault\n * @param userData Additional (optional) data required for the swap\n */\nstruct PoolSwapParams {\n    SwapKind kind;\n    uint256 amountGivenScaled18;\n    uint256[] balancesScaled18;\n    uint256 indexIn;\n    uint256 indexOut;\n    address router;\n    bytes userData;\n}\n\n/**\n * @notice Data for the hook after a swap operation.\n * @param kind Type of swap (exact in or exact out)\n * @param tokenIn Token to be swapped from\n * @param tokenOut Token to be swapped to\n * @param amountInScaled18 Amount of tokenIn (entering the Vault)\n * @param amountOutScaled18 Amount of tokenOut (leaving the Vault)\n * @param tokenInBalanceScaled18 Updated (after swap) balance of tokenIn\n * @param tokenOutBalanceScaled18 Updated (after swap) balance of tokenOut\n * @param amountCalculatedScaled18 Token amount calculated by the swap\n * @param amountCalculatedRaw Token amount calculated by the swap\n * @param router The address (usually a router contract) that initiated a swap operation on the Vault\n * @param pool Pool address\n * @param userData Additional (optional) data required for the swap\n */\nstruct AfterSwapParams {\n    SwapKind kind;\n    IERC20 tokenIn;\n    IERC20 tokenOut;\n    uint256 amountInScaled18;\n    uint256 amountOutScaled18;\n    uint256 tokenInBalanceScaled18;\n    uint256 tokenOutBalanceScaled18;\n    uint256 amountCalculatedScaled18;\n    uint256 amountCalculatedRaw;\n    address router;\n    address pool;\n    bytes userData;\n}\n\n/*******************************************************************************\n                                Add liquidity\n*******************************************************************************/\n\nenum AddLiquidityKind {\n    PROPORTIONAL,\n    UNBALANCED,\n    SINGLE_TOKEN_EXACT_OUT,\n    DONATION,\n    CUSTOM\n}\n\n/**\n * @notice Data for an add liquidity operation.\n * @param pool Address of the pool\n * @param to Address of user to mint to\n * @param maxAmountsIn Maximum amounts of input tokens\n * @param minBptAmountOut Minimum amount of output pool tokens\n * @param kind Add liquidity kind\n * @param userData Optional user data\n */\nstruct AddLiquidityParams {\n    address pool;\n    address to;\n    uint256[] maxAmountsIn;\n    uint256 minBptAmountOut;\n    AddLiquidityKind kind;\n    bytes userData;\n}\n\n/*******************************************************************************\n                                Remove liquidity\n*******************************************************************************/\n\nenum RemoveLiquidityKind {\n    PROPORTIONAL,\n    SINGLE_TOKEN_EXACT_IN,\n    SINGLE_TOKEN_EXACT_OUT,\n    CUSTOM\n}\n\n/**\n * @notice Data for an remove liquidity operation.\n * @param pool Address of the pool\n * @param from Address of user to burn from\n * @param maxBptAmountIn Maximum amount of input pool tokens\n * @param minAmountsOut Minimum amounts of output tokens\n * @param kind Remove liquidity kind\n * @param userData Optional user data\n */\nstruct RemoveLiquidityParams {\n    address pool;\n    address from;\n    uint256 maxBptAmountIn;\n    uint256[] minAmountsOut;\n    RemoveLiquidityKind kind;\n    bytes userData;\n}\n\n/*******************************************************************************\n                                Remove liquidity\n*******************************************************************************/\n\nenum WrappingDirection {\n    WRAP,\n    UNWRAP\n}\n\n/**\n * @notice Data for a wrap/unwrap operation.\n * @param kind Type of swap (Exact In or Exact Out)\n * @param direction Direction of the wrapping operation (Wrap or Unwrap)\n * @param wrappedToken Wrapped token, compatible with interface ERC4626\n * @param amountGivenRaw Amount specified for tokenIn or tokenOut (depends on the type of swap and wrapping direction)\n * @param limitRaw Minimum or maximum amount specified for the other token (depends on the type of swap and wrapping\n * direction)\n */\nstruct BufferWrapOrUnwrapParams {\n    SwapKind kind;\n    WrappingDirection direction;\n    IERC4626 wrappedToken;\n    uint256 amountGivenRaw;\n    uint256 limitRaw;\n}\n\n// Protocol Fees are 24-bit values. We transform them by multiplying by 1e11, so that they can be set to any value\n// between 0% and 100% (step 0.00001%). Protocol and pool creator fees are set in the `ProtocolFeeController`, and\n// ensure both constituent and aggregate fees do not exceed this precision.\nuint256 constant FEE_BITLENGTH = 24;\nuint256 constant FEE_SCALING_FACTOR = 1e11;\n// Used to ensure the safety of fee-related math (e.g., pools or hooks don't set it greater than 100%).\n// This value should work for practical purposes and is well within the max precision requirements.\nuint256 constant MAX_FEE_PERCENTAGE = 99.9999e16; // 99.9999%\n"},"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IAuthentication } from \"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\";\n\n/**\n * @notice Building block for performing access control on external functions.\n * @dev This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be\n * applied to external functions to make them only callable by authorized accounts.\n *\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\n */\nabstract contract Authentication is IAuthentication {\n    bytes32 private immutable _actionIdDisambiguator;\n\n    /**\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\n     * multi-contract systems.\n     *\n     * There are two main uses for it:\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\n     *    unique. The contract's own address is a good option.\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\n     *    shared by the entire family (and no other contract) should be used instead.\n     */\n    constructor(bytes32 actionIdDisambiguator) {\n        _actionIdDisambiguator = actionIdDisambiguator;\n    }\n\n    /// @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\n    modifier authenticate() {\n        _authenticateCaller();\n        _;\n    }\n\n    /// @dev Reverts unless the caller is allowed to call the entry point function.\n    function _authenticateCaller() internal view {\n        bytes32 actionId = getActionId(msg.sig);\n\n        if (!_canPerform(actionId, msg.sender)) {\n            revert SenderNotAllowed();\n        }\n    }\n\n    /// @inheritdoc IAuthentication\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\n        // multiple contracts.\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\n    }\n\n    /**\n     * @dev Derived contracts must implement this function to perform the actual access control logic.\n     * @param actionId The action identifier associated with an external function\n     * @param user The account performing the action\n     * @return success True if the action is permitted\n     */\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\n}\n"},"@balancer-labs/v3-solidity-utils/contracts/helpers/RevertCodec.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n// solhint-disable no-inline-assembly\n\n/// @notice Support `quoteAndRevert`: a v2-style query which always reverts, and returns the result in the return data.\nlibrary RevertCodec {\n    /**\n     * @notice On success of the primary operation in a `quoteAndRevert`, this error is thrown with the return data.\n     * @param result The result of the query operation\n     */\n    error Result(bytes result);\n\n    /// @notice Handle the \"reverted without a reason\" case (i.e., no return data).\n    error ErrorSelectorNotFound();\n\n    function catchEncodedResult(bytes memory resultRaw) internal pure returns (bytes memory) {\n        bytes4 errorSelector = RevertCodec.parseSelector(resultRaw);\n        if (errorSelector != Result.selector) {\n            // Bubble up error message if the revert reason is not the expected one.\n            RevertCodec.bubbleUpRevert(resultRaw);\n        }\n\n        uint256 resultRawLength = resultRaw.length;\n        assembly (\"memory-safe\") {\n            resultRaw := add(resultRaw, 0x04) // Slice the sighash\n            mstore(resultRaw, sub(resultRawLength, 4)) // Set proper length\n        }\n\n        return abi.decode(resultRaw, (bytes));\n    }\n\n    /// @dev Returns the first 4 bytes in an array, reverting if the length is < 4.\n    function parseSelector(bytes memory callResult) internal pure returns (bytes4 errorSelector) {\n        if (callResult.length < 4) {\n            revert ErrorSelectorNotFound();\n        }\n        assembly (\"memory-safe\") {\n            errorSelector := mload(add(callResult, 0x20)) // Load the first 4 bytes from data (skip length offset)\n        }\n    }\n\n    /// @dev Taken from Openzeppelin's Address.\n    function bubbleUpRevert(bytes memory returnData) internal pure {\n        // Look for revert reason and bubble it up if present.\n        if (returnData.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly.\n\n            assembly (\"memory-safe\") {\n                let return_data_size := mload(returnData)\n                revert(add(32, returnData), return_data_size)\n            }\n        } else {\n            revert ErrorSelectorNotFound();\n        }\n    }\n}\n"},"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { LogExpMath } from \"./LogExpMath.sol\";\n\n/// @notice Support 18-decimal fixed point arithmetic. All Vault calculations use this for high and uniform precision.\nlibrary FixedPoint {\n    /// @notice Attempted division by zero.\n    error ZeroDivision();\n\n    // solhint-disable no-inline-assembly\n    // solhint-disable private-vars-leading-underscore\n\n    uint256 internal constant ONE = 1e18; // 18 decimal places\n    uint256 internal constant TWO = 2 * ONE;\n    uint256 internal constant FOUR = 4 * ONE;\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\n\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Multiplication overflow protection is provided by Solidity 0.8.x.\n        uint256 product = a * b;\n\n        return product / ONE;\n    }\n\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\n        // Multiplication overflow protection is provided by Solidity 0.8.x.\n        uint256 product = a * b;\n\n        // Equivalent to:\n        // result = product == 0 ? 0 : ((product - 1) / FixedPoint.ONE) + 1\n        assembly (\"memory-safe\") {\n            result := mul(iszero(iszero(product)), add(div(sub(product, 1), ONE), 1))\n        }\n    }\n\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity 0.8 reverts with a Panic code (0x11) if the multiplication overflows.\n        uint256 aInflated = a * ONE;\n\n        // Solidity 0.8 reverts with a \"Division by Zero\" Panic code (0x12) if b is zero\n        return aInflated / b;\n    }\n\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\n        return mulDivUp(a, ONE, b);\n    }\n\n    /// @dev Return (a * b) / c, rounding up.\n    function mulDivUp(uint256 a, uint256 b, uint256 c) internal pure returns (uint256 result) {\n        // This check is required because Yul's `div` doesn't revert on c==0.\n        if (c == 0) {\n            revert ZeroDivision();\n        }\n\n        // Multiple overflow protection is done by Solidity 0.8.x.\n        uint256 product = a * b;\n\n        // The traditional divUp formula is:\n        // divUp(x, y) := (x + y - 1) / y\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\n        // divUp(x, y) := (x - 1) / y + 1\n        // Note that this requires x != 0, if x == 0 then the result is zero\n        //\n        // Equivalent to:\n        // result = a == 0 ? 0 : (a * b - 1) / c + 1\n        assembly (\"memory-safe\") {\n            result := mul(iszero(iszero(product)), add(div(sub(product, 1), c), 1))\n        }\n    }\n\n    /**\n     * @dev Version of divUp when the input is raw (i.e., already \"inflated\"). For instance,\n     * invariant * invariant (36 decimals) vs. invariant.mulDown(invariant) (18 decimal FP).\n     * This can occur in calculations with many successive multiplications and divisions, and\n     * we want to minimize the number of operations by avoiding unnecessary scaling by ONE.\n     */\n    function divUpRaw(uint256 a, uint256 b) internal pure returns (uint256 result) {\n        // This check is required because Yul's `div` doesn't revert on b==0.\n        if (b == 0) {\n            revert ZeroDivision();\n        }\n\n        // Equivalent to:\n        // result = a == 0 ? 0 : 1 + (a - 1) / b\n        assembly (\"memory-safe\") {\n            result := mul(iszero(iszero(a)), add(1, div(sub(a, 1), b)))\n        }\n    }\n\n    /**\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\n     * the true value (that is, the error function expected - actual is always positive).\n     */\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        // Optimize for when y equals 1.0, 2.0 or 4.0, as those are very simple to implement and occur often in 50/50\n        // and 80/20 Weighted Pools\n        if (y == ONE) {\n            return x;\n        } else if (y == TWO) {\n            return mulDown(x, x);\n        } else if (y == FOUR) {\n            uint256 square = mulDown(x, x);\n            return mulDown(square, square);\n        } else {\n            uint256 raw = LogExpMath.pow(x, y);\n            uint256 maxError = mulUp(raw, MAX_POW_RELATIVE_ERROR) + 1;\n\n            if (raw < maxError) {\n                return 0;\n            } else {\n                unchecked {\n                    return raw - maxError;\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\n     * the true value (that is, the error function expected - actual is always negative).\n     */\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        // Optimize for when y equals 1.0, 2.0 or 4.0, as those are very simple to implement and occur often in 50/50\n        // and 80/20 Weighted Pools\n        if (y == ONE) {\n            return x;\n        } else if (y == TWO) {\n            return mulUp(x, x);\n        } else if (y == FOUR) {\n            uint256 square = mulUp(x, x);\n            return mulUp(square, square);\n        } else {\n            uint256 raw = LogExpMath.pow(x, y);\n            uint256 maxError = mulUp(raw, MAX_POW_RELATIVE_ERROR) + 1;\n\n            return raw + maxError;\n        }\n    }\n\n    /**\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\n     *\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\n     * prevents intermediate negative values.\n     */\n    function complement(uint256 x) internal pure returns (uint256 result) {\n        // Equivalent to:\n        // result = (x < ONE) ? (ONE - x) : 0\n        assembly (\"memory-safe\") {\n            result := mul(lt(x, ONE), sub(ONE, x))\n        }\n    }\n}\n"},"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\n// solhint-disable\n\n/**\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\n *\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\n * exponentiation and logarithm (where the base is Euler's number).\n *\n * All math operations are unchecked in order to save gas.\n *\n * @author Fernando Martinelli - @fernandomartinelli\n * @author Sergio Yuhjtman     - @sergioyuhjtman\n * @author Daniel Fernandez    - @dmf7z\n */\nlibrary LogExpMath {\n    /// @notice This error is thrown when a base is not within an acceptable range.\n    error BaseOutOfBounds();\n\n    /// @notice This error is thrown when a exponent is not within an acceptable range.\n    error ExponentOutOfBounds();\n\n    /// @notice This error is thrown when the exponent * ln(base) is not within an acceptable range.\n    error ProductOutOfBounds();\n\n    /// @notice This error is thrown when an exponent used in the exp function is not within an acceptable range.\n    error InvalidExponent();\n\n    /// @notice This error is thrown when a variable or result is not within the acceptable bounds defined in the function.\n    error OutOfBounds();\n\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\n    // two numbers, and multiply by ONE when dividing them.\n\n    // All arguments and return values are 18 decimal fixed point numbers.\n    int256 constant ONE_18 = 1e18;\n\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\n    // case of ln36, 36 decimals.\n    int256 constant ONE_20 = 1e20;\n    int256 constant ONE_36 = 1e36;\n\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\n    //\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\n    // The smallest possible result is 10^(-18), which makes largest negative argument\n    // ln(10^(-18)) = -41.446531673892822312.\n    // We use 130.0 and -41.0 to have some safety margin.\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\n\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\n    // 256 bit integer.\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\n\n    uint256 constant MILD_EXPONENT_BOUND = 2 ** 254 / uint256(ONE_20);\n\n    // 18 decimal constants\n    int256 constant x0 = 128000000000000000000; // 2ˆ7\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // eˆ(x0) (no decimals)\n    int256 constant x1 = 64000000000000000000; // 2ˆ6\n    int256 constant a1 = 6235149080811616882910000000; // eˆ(x1) (no decimals)\n\n    // 20 decimal constants\n    int256 constant x2 = 3200000000000000000000; // 2ˆ5\n    int256 constant a2 = 7896296018268069516100000000000000; // eˆ(x2)\n    int256 constant x3 = 1600000000000000000000; // 2ˆ4\n    int256 constant a3 = 888611052050787263676000000; // eˆ(x3)\n    int256 constant x4 = 800000000000000000000; // 2ˆ3\n    int256 constant a4 = 298095798704172827474000; // eˆ(x4)\n    int256 constant x5 = 400000000000000000000; // 2ˆ2\n    int256 constant a5 = 5459815003314423907810; // eˆ(x5)\n    int256 constant x6 = 200000000000000000000; // 2ˆ1\n    int256 constant a6 = 738905609893065022723; // eˆ(x6)\n    int256 constant x7 = 100000000000000000000; // 2ˆ0\n    int256 constant a7 = 271828182845904523536; // eˆ(x7)\n    int256 constant x8 = 50000000000000000000; // 2ˆ-1\n    int256 constant a8 = 164872127070012814685; // eˆ(x8)\n    int256 constant x9 = 25000000000000000000; // 2ˆ-2\n    int256 constant a9 = 128402541668774148407; // eˆ(x9)\n    int256 constant x10 = 12500000000000000000; // 2ˆ-3\n    int256 constant a10 = 113314845306682631683; // eˆ(x10)\n    int256 constant x11 = 6250000000000000000; // 2ˆ-4\n    int256 constant a11 = 106449445891785942956; // eˆ(x11)\n\n    /**\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\n     *\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\n     */\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\n        if (y == 0) {\n            // We solve the 0^0 indetermination by making it equal one.\n            return uint256(ONE_18);\n        }\n\n        if (x == 0) {\n            return 0;\n        }\n\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\n        // x^y = exp(y * ln(x)).\n\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\n        if (x >> 255 != 0) {\n            revert BaseOutOfBounds();\n        }\n        int256 x_int256 = int256(x);\n\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\n\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\n        if (y >= MILD_EXPONENT_BOUND) {\n            revert ExponentOutOfBounds();\n        }\n        int256 y_int256 = int256(y);\n\n        int256 logx_times_y;\n        unchecked {\n            if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\n                int256 ln_36_x = _ln_36(x_int256);\n\n                // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\n                // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\n                // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\n                // (downscaled) last 18 decimals.\n                logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\n            } else {\n                logx_times_y = _ln(x_int256) * y_int256;\n            }\n            logx_times_y /= ONE_18;\n        }\n\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\n        if (!(MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT)) {\n            revert ProductOutOfBounds();\n        }\n\n        return uint256(exp(logx_times_y));\n    }\n\n    /**\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\n     *\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\n     */\n    function exp(int256 x) internal pure returns (int256) {\n        if (!(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT)) {\n            revert InvalidExponent();\n        }\n\n        // We avoid using recursion here because zkSync doesn't support it.\n        bool negativeExponent = false;\n\n        if (x < 0) {\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT). In the negative\n            // exponent case, compute e^x, then return 1 / result.\n            unchecked {\n                x = -x;\n            }\n            negativeExponent = true;\n        }\n\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\n        // decomposition.\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\n        // decomposition, which will be lower than the smallest x_n.\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\n\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\n        // decomposition.\n\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\n        // it and compute the accumulated product.\n\n        int256 firstAN;\n        unchecked {\n            if (x >= x0) {\n                x -= x0;\n                firstAN = a0;\n            } else if (x >= x1) {\n                x -= x1;\n                firstAN = a1;\n            } else {\n                firstAN = 1; // One with no decimal places\n            }\n\n            // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\n            // smaller terms.\n            x *= 100;\n        }\n\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\n        int256 product = ONE_20;\n\n        unchecked {\n            if (x >= x2) {\n                x -= x2;\n                product = (product * a2) / ONE_20;\n            }\n            if (x >= x3) {\n                x -= x3;\n                product = (product * a3) / ONE_20;\n            }\n            if (x >= x4) {\n                x -= x4;\n                product = (product * a4) / ONE_20;\n            }\n            if (x >= x5) {\n                x -= x5;\n                product = (product * a5) / ONE_20;\n            }\n            if (x >= x6) {\n                x -= x6;\n                product = (product * a6) / ONE_20;\n            }\n            if (x >= x7) {\n                x -= x7;\n                product = (product * a7) / ONE_20;\n            }\n            if (x >= x8) {\n                x -= x8;\n                product = (product * a8) / ONE_20;\n            }\n            if (x >= x9) {\n                x -= x9;\n                product = (product * a9) / ONE_20;\n            }\n        }\n\n        // x10 and x11 are unnecessary here since we have high enough precision already.\n\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\n\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\n\n        // The first term is simply x.\n        term = x;\n        unchecked {\n            seriesSum += term;\n\n            // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\n            // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\n\n            term = ((term * x) / ONE_20) / 2;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 3;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 4;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 5;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 6;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 7;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 8;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 9;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 10;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 11;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 12;\n            seriesSum += term;\n\n            // 12 Taylor terms are sufficient for 18 decimal precision.\n\n            // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\n            // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\n            // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\n            // and then drop two digits to return an 18 decimal value.\n\n            int256 result = (((product * seriesSum) / ONE_20) * firstAN) / 100;\n\n            // We avoid using recursion here because zkSync doesn't support it.\n            return negativeExponent ? (ONE_18 * ONE_18) / result : result;\n        }\n    }\n\n    /// @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\n    function log(int256 arg, int256 base) internal pure returns (int256) {\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\n\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\n        // upscaling.\n\n        int256 logBase;\n        unchecked {\n            if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\n                logBase = _ln_36(base);\n            } else {\n                logBase = _ln(base) * ONE_18;\n            }\n        }\n\n        int256 logArg;\n        unchecked {\n            if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\n                logArg = _ln_36(arg);\n            } else {\n                logArg = _ln(arg) * ONE_18;\n            }\n\n            // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\n            return (logArg * ONE_18) / logBase;\n        }\n    }\n\n    /// @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n    function ln(int256 a) internal pure returns (int256) {\n        // The real natural logarithm is not defined for negative numbers or zero.\n        if (a <= 0) {\n            revert OutOfBounds();\n        }\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\n            unchecked {\n                return _ln_36(a) / ONE_18;\n            }\n        } else {\n            return _ln(a);\n        }\n    }\n\n    /// @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n    function _ln(int256 a) private pure returns (int256) {\n        // We avoid using recursion here because zkSync doesn't support it.\n        bool negativeExponent = false;\n\n        if (a < ONE_18) {\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\n            // than one, 1/a will be greater than one, so in this case we compute ln(1/a) and negate the final result.\n            unchecked {\n                a = (ONE_18 * ONE_18) / a;\n            }\n            negativeExponent = true;\n        }\n\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\n        // decomposition, which will be lower than the smallest a_n.\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\n\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\n        // ONE_18 to convert them to fixed point.\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\n        // by it and compute the accumulated sum.\n\n        int256 sum = 0;\n        unchecked {\n            if (a >= a0 * ONE_18) {\n                a /= a0; // Integer, not fixed point division\n                sum += x0;\n            }\n\n            if (a >= a1 * ONE_18) {\n                a /= a1; // Integer, not fixed point division\n                sum += x1;\n            }\n\n            // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\n            sum *= 100;\n            a *= 100;\n\n            // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\n\n            if (a >= a2) {\n                a = (a * ONE_20) / a2;\n                sum += x2;\n            }\n\n            if (a >= a3) {\n                a = (a * ONE_20) / a3;\n                sum += x3;\n            }\n\n            if (a >= a4) {\n                a = (a * ONE_20) / a4;\n                sum += x4;\n            }\n\n            if (a >= a5) {\n                a = (a * ONE_20) / a5;\n                sum += x5;\n            }\n\n            if (a >= a6) {\n                a = (a * ONE_20) / a6;\n                sum += x6;\n            }\n\n            if (a >= a7) {\n                a = (a * ONE_20) / a7;\n                sum += x7;\n            }\n\n            if (a >= a8) {\n                a = (a * ONE_20) / a8;\n                sum += x8;\n            }\n\n            if (a >= a9) {\n                a = (a * ONE_20) / a9;\n                sum += x9;\n            }\n\n            if (a >= a10) {\n                a = (a * ONE_20) / a10;\n                sum += x10;\n            }\n\n            if (a >= a11) {\n                a = (a * ONE_20) / a11;\n                sum += x11;\n            }\n        }\n\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\n        // Let z = (a - 1) / (a + 1).\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\n        // division by ONE_20.\n        unchecked {\n            int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\n            int256 z_squared = (z * z) / ONE_20;\n\n            // num is the numerator of the series: the z^(2 * n + 1) term\n            int256 num = z;\n\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n            int256 seriesSum = num;\n\n            // In each step, the numerator is multiplied by z^2\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 3;\n\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 5;\n\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 7;\n\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 9;\n\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 11;\n\n            // 6 Taylor terms are sufficient for 36 decimal precision.\n\n            // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\n            seriesSum *= 2;\n\n            // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\n            // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\n            // value.\n\n            int256 result = (sum + seriesSum) / 100;\n\n            // We avoid using recursion here because zkSync doesn't support it.\n            return negativeExponent ? -result : result;\n        }\n    }\n\n    /**\n     * @dev Internal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\n     * for x close to one.\n     *\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\n     */\n    function _ln_36(int256 x) private pure returns (int256) {\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\n        // worthwhile.\n\n        // First, we transform x to a 36 digit fixed point value.\n        unchecked {\n            x *= ONE_18;\n\n            // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\n            // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n            // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\n            // division by ONE_36.\n            int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\n            int256 z_squared = (z * z) / ONE_36;\n\n            // num is the numerator of the series: the z^(2 * n + 1) term\n            int256 num = z;\n\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n            int256 seriesSum = num;\n\n            // In each step, the numerator is multiplied by z^2\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 3;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 5;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 7;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 9;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 11;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 13;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 15;\n\n            // 8 Taylor terms are sufficient for 36 decimal precision.\n\n            // All that remains is multiplying by 2 (non fixed point).\n            return seriesSum * 2;\n        }\n    }\n}\n"},"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport { StorageSlotExtension } from \"./StorageSlotExtension.sol\";\n\n/**\n * @notice Variant of {ReentrancyGuard} that uses transient storage.\n * @dev NOTE: This variant only works on networks where EIP-1153 is available.\n */\nabstract contract ReentrancyGuardTransient {\n    using StorageSlotExtension for *;\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant _REENTRANCY_GUARD_STORAGE =\n        0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    /// @notice Unauthorized reentrant call.\n    error ReentrancyGuardReentrantCall();\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED.\n        if (_reentrancyGuardEntered()) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail.\n        _REENTRANCY_GUARD_STORAGE.asBoolean().tstore(true);\n    }\n\n    function _nonReentrantAfter() private {\n        _REENTRANCY_GUARD_STORAGE.asBoolean().tstore(false);\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _REENTRANCY_GUARD_STORAGE.asBoolean().tload();\n    }\n}\n"},"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\n/**\n * @notice Library for reading and writing primitive types to specific storage slots. Based on OpenZeppelin; just adding support for int256.\n * @dev TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlotExtension {\n    struct Int256Slot {\n        int256 value;\n    }\n\n    /// @dev Returns an `Int256Slot` with member `value` located at `slot`.\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /// @dev Custom type that represents a slot holding an address.\n    type AddressSlotType is bytes32;\n\n    /// @dev Cast an arbitrary slot to a AddressSlotType.\n    function asAddress(bytes32 slot) internal pure returns (AddressSlotType) {\n        return AddressSlotType.wrap(slot);\n    }\n\n    /// @dev Custom type that represents a slot holding a boolean.\n    type BooleanSlotType is bytes32;\n\n    /// @dev Cast an arbitrary slot to a BooleanSlotType.\n    function asBoolean(bytes32 slot) internal pure returns (BooleanSlotType) {\n        return BooleanSlotType.wrap(slot);\n    }\n\n    /// @dev Custom type that represents a slot holding a bytes32.\n    type Bytes32SlotType is bytes32;\n\n    /// @dev Cast an arbitrary slot to a Bytes32SlotType.\n    function asBytes32(bytes32 slot) internal pure returns (Bytes32SlotType) {\n        return Bytes32SlotType.wrap(slot);\n    }\n\n    /// @dev Custom type that represents a slot holding a uint256.\n    type Uint256SlotType is bytes32;\n\n    /// @dev Cast an arbitrary slot to a Uint256SlotType.\n    function asUint256(bytes32 slot) internal pure returns (Uint256SlotType) {\n        return Uint256SlotType.wrap(slot);\n    }\n\n    /// @dev Custom type that represents a slot holding an int256.\n    type Int256SlotType is bytes32;\n\n    /// @dev Cast an arbitrary slot to an Int256SlotType.\n    function asInt256(bytes32 slot) internal pure returns (Int256SlotType) {\n        return Int256SlotType.wrap(slot);\n    }\n\n    /// @dev Load the value held at location `slot` in transient storage.\n    function tload(AddressSlotType slot) internal view returns (address value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /// @dev Store `value` at location `slot` in transient storage.\n    function tstore(AddressSlotType slot, address value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /// @dev Load the value held at location `slot` in transient storage.\n    function tload(BooleanSlotType slot) internal view returns (bool value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /// @dev Store `value` at location `slot` in transient storage.\n    function tstore(BooleanSlotType slot, bool value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /// @dev Load the value held at location `slot` in transient storage.\n    function tload(Bytes32SlotType slot) internal view returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /// @dev Store `value` at location `slot` in transient storage.\n    function tstore(Bytes32SlotType slot, bytes32 value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /// @dev Load the value held at location `slot` in transient storage.\n    function tload(Uint256SlotType slot) internal view returns (uint256 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /// @dev Store `value` at location `slot` in transient storage.\n    function tstore(Uint256SlotType slot, uint256 value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /// @dev Load the value held at location `slot` in transient storage.\n    function tload(Int256SlotType slot) internal view returns (int256 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /// @dev Store `value` at location `slot` in transient storage.\n    function tstore(Int256SlotType slot, int256 value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n}\n"},"@balancer-labs/v3-solidity-utils/contracts/test/ERC20TestToken.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20TestToken is ERC20 {\n    uint8 private immutable _decimals;\n\n    /// @dev Simulate tokens that don't allow zero transfers.\n    error ZeroTransfer();\n\n    constructor(string memory name, string memory symbol, uint8 decimals_) ERC20(name, symbol) {\n        _decimals = decimals_;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function mint(address recipient, uint256 amount) external {\n        _mint(recipient, amount);\n    }\n\n    function burn(address sender, uint256 amount) external {\n        _burn(sender, amount);\n    }\n\n    function transfer(address to, uint256 value) public override returns (bool) {\n        if (value == 0) {\n            revert ZeroTransfer();\n        }\n\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public override returns (bool) {\n        if (value == 0) {\n            revert ZeroTransfer();\n        }\n\n        return super.transferFrom(from, to, value);\n    }\n}\n"},"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IAuthorizer } from \"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\";\nimport { IVault } from \"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\";\n\nimport { Authentication } from \"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\";\n\n/**\n * @notice Base contract suitable for Singleton contracts (e.g., pool factories) that have permissioned functions.\n * @dev The disambiguator is the contract's own address. This is used in the construction of actionIds for permissioned\n * functions, to avoid conflicts when multiple contracts (or multiple versions of the same contract) use the same\n * function name.\n */\nabstract contract SingletonAuthentication is Authentication {\n    IVault private immutable _vault;\n\n    // Use the contract's own address to disambiguate action identifiers.\n    constructor(IVault vault) Authentication(bytes32(uint256(uint160(address(this))))) {\n        _vault = vault;\n    }\n\n    /**\n     * @notice Get the address of the Balancer Vault.\n     * @return vault An interface pointer to the Vault\n     */\n    function getVault() public view returns (IVault) {\n        return _vault;\n    }\n\n    /**\n     * @notice Get the address of the Authorizer.\n     * @return authorizer An interface pointer to the Authorizer\n     */\n    function getAuthorizer() public view returns (IAuthorizer) {\n        return getVault().getAuthorizer();\n    }\n\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\n        return getAuthorizer().canPerform(actionId, account, address(this));\n    }\n\n    function _canPerform(bytes32 actionId, address account, address where) internal view returns (bool) {\n        return getAuthorizer().canPerform(actionId, account, where);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/interfaces/IERC4626.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n"},"contracts/BalancerContractRegistry.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport {\n    IBalancerContractRegistry,\n    ContractType\n} from \"@balancer-labs/v3-interfaces/contracts/standalone-utils/IBalancerContractRegistry.sol\";\nimport { IVault } from \"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\";\n\nimport { SingletonAuthentication } from \"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol\";\n\n/**\n * @notice On-chain registry of standard Balancer contracts.\n * @dev Maintain a registry of official Balancer Factories, Routers, Hooks, and valid ERC4626 tokens, for two main\n * purposes. The first is to support the many instances where we need to know that a contract is \"trusted\" (i.e.,\n * is safe and behaves in the required manner). For instance, some hooks depend critically on the identity of the\n * msg.sender, which must be passed down through the Router. Since Routers are permissionless, a malicious one could\n * spoof the sender and \"fool\" the hook. The hook must therefore \"trust\" the Router.\n *\n * It is also important for the front-end to know when a particular wrapped token should be used with buffers. Not all\n * \"ERC4626\" wrapped tokens are fully conforming, and buffer operations with non-conforming tokens may fail in various\n * unexpected ways. It is not enough to simply check whether a buffer exists (e.g., by calling `getBufferAsset`),\n * since best practice is for the pool creator to initialize buffers for all such tokens regardless. They are\n * permissionless, and could otherwise be initialized by anyone in unexpected ways. This registry could be used to\n * keep track of \"known good\" buffers, such that `isActiveBalancerContract(ContractType.ERC4626, <address>)` returns\n * true for fully-compliant tokens with properly initialized buffers.\n *\n * Current solutions involve passing in the address of the trusted Router on deployment: but what if it needs to\n * support multiple Routers? Or if the Router is deprecated and replaced? Instead, we can pass the registry address,\n * and query this contract to determine whether the Router is a \"trusted\" one.\n *\n * The second use case is for off-chain queries, or other protocols that need to easily determine, say, the \"latest\"\n * Weighted Pool Factory. This contract provides `isActiveBalancerContract(type, address)` for the first case, and\n * `getBalancerContract(type, name)` for the second. It is also possible to query all known information about an\n * address, using `getBalancerContractInfo(address)`, which returns a struct with the detailed state.\n *\n * Note that the `SingletonAuthentication` base contract provides `getVault`, so it is also possible to ask this\n * contract for the Vault address, so it doesn't need to be a type.\n */\ncontract BalancerContractRegistry is IBalancerContractRegistry, SingletonAuthentication {\n    // ContractId is the hash of contract name. Names must be unique (cannot have the same name with different types).\n    mapping(bytes32 contractId => address addr) private _contractRegistry;\n\n    // Given an address, store the contract state (i.e., type, and active or deprecated).\n    //\n    // Conceptually, we maintain a <unique name> => <unique address> => <contract info> registry of contracts.\n    // The only thing that can change is the `isActive` flag, when a contract is deprecated. If a contract is\n    // registered in error (e.g., wrong type or address), the remedy is to deregister (delete) it, and then register\n    // the correct one.\n    //\n    // We also maintain a registry of aliases: <unique alias> => <unique registered address>, where the target address\n    // must be in the main registry, and the alias cannot match a unique registered contract name. Aliases can be\n    // overwritten (e.g., when the `WeightedPool` alias migrates from v2 to v3). See `_contractAliases` below.\n    mapping(address addr => ContractInfo info) private _contractInfo;\n\n    // ContractAliasId is the hash of the alias (e.g., \"WeightedPool\").\n    // This is separate from the main contract registry to enforce different rules (e.g., prevent corrupting the\n    // contract state by overwriting a registry entry with an \"alias\" that matches a different contract).\n    mapping(bytes32 contractAliasId => address addr) private _contractAliases;\n\n    /**\n     * @notice A `_contractRegistry` entry has no corresponding `_contractInfo`.\n     * @dev This should never happen.\n     * @param contractName The name of the contract that has a registry entry but no contract info\n     * @param contractAddress The address of the contract with missing state\n     */\n    error InconsistentState(string contractName, address contractAddress);\n\n    constructor(IVault vault) SingletonAuthentication(vault) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /*\n     * Example usage:\n     *\n     * // Register both the named version and the \"latest\" Weighted Pool Factory.\n     * registerBalancerContract(\n     *      ContractType.POOL_FACTORY, '20241205-v3-weighted-pool', 0x201efd508c8DfE9DE1a13c2452863A78CB2a86Cc\n     * );\n     * addOrUpdateBalancerContractAlias('WeightedPool', 0x201efd508c8DfE9DE1a13c2452863A78CB2a86Cc);\n     *\n     * // Register the Routers (two of them anyway).\n     * registerBalancerContract(ContractType.ROUTER, '20241205-v3-router', 0x5C6fb490BDFD3246EB0bB062c168DeCAF4bD9FDd);\n     * registerBalancerContract(\n     *      ContractType.ROUTER, '20241205-v3-batch-router', 0x136f1EFcC3f8f88516B9E94110D56FDBfB1778d1\n     * );\n     *\n     * // Now, hooks that require trusted routers can be deployed with the registry address, and query the router to\n     * // see whether it's \"trusted\" (i.e., registered by governance):\n     *\n     * isActiveBalancerContract(ContractType.ROUTER, 0x5C6fb490BDFD3246EB0bB062c168DeCAF4bD9FDd) would return true.\n     *\n     * Off-chain processes that wanted to know the current address of the Weighted Pool Factory could query by either\n     * name:\n     *\n     * (address, active) = getBalancerContract(ContractType.POOL_FACTORY, '20241205-v3-weighted-pool');\n     * (address, active) = getBalancerContract(ContractType.POOL_FACTORY, 'WeightedPool');\n     *\n     * These would return the same result.\n     *\n     * If we replaced `20241205-v3-weighted-pool` with `20250107-v3-weighted-pool-v2`, governance would call:\n     *\n     * deprecateBalancerContract(0x201efd508c8DfE9DE1a13c2452863A78CB2a86Cc);\n     * registerBalancerContract(\n     *      ContractType.POOL_FACTORY, '20250107-v3-weighted-pool-v2', 0x9FC3da866e7DF3a1c57adE1a97c9f00a70f010c8)\n     * );\n     * addOrUpdateBalancerContractAlias('WeightedPool', 0x9FC3da866e7DF3a1c57adE1a97c9f00a70f010c8);\n     *\n     * At that point,\n     * getBalancerContract(ContractType.POOL_FACTORY, '20241205-v3-weighted-pool') returns active=false,\n     * isActiveBalancerContract(ContractType.POOL_FACTORY, 0x201efd508c8DfE9DE1a13c2452863A78CB2a86Cc) returns false,\n     * getBalancerContract(ContractType.POOL_FACTORY, 'WeightedPool') returns the v2 address (and active=true).\n     */\n\n    /// @inheritdoc IBalancerContractRegistry\n    function registerBalancerContract(\n        ContractType contractType,\n        string memory contractName,\n        address contractAddress\n    ) external authenticate {\n        // Ensure arguments are valid.\n        if (contractAddress == address(0)) {\n            revert ZeroContractAddress();\n        }\n\n        if (bytes(contractName).length == 0) {\n            revert InvalidContractName();\n        }\n\n        // Ensure address isn't already in use.\n        ContractInfo memory info = _contractInfo[contractAddress];\n        if (info.isRegistered) {\n            revert ContractAddressAlreadyRegistered(info.contractType, contractAddress);\n        }\n\n        // Ensure name isn't already in use as a registered contract name.\n        bytes32 contractId = _getContractId(contractName);\n        address existingRegistryAddress = _contractRegistry[contractId];\n        if (existingRegistryAddress != address(0)) {\n            info = _contractInfo[existingRegistryAddress];\n\n            revert ContractNameAlreadyRegistered(info.contractType, contractName);\n        }\n\n        // Also check that it isn't an existing alias.\n        address existingAliasAddress = _contractAliases[contractId];\n        if (existingAliasAddress != address(0)) {\n            revert ContractNameInUseAsAlias(contractName, existingAliasAddress);\n        }\n\n        // Store the address in the registry, under the unique name.\n        _contractRegistry[contractId] = contractAddress;\n\n        // Record the address as active. The `isActive` flag enables differentiating between unregistered and deprecated\n        // addresses.\n        _contractInfo[contractAddress] = ContractInfo({\n            contractType: contractType,\n            isRegistered: true,\n            isActive: true\n        });\n\n        emit BalancerContractRegistered(contractType, contractName, contractAddress);\n    }\n\n    /// @inheritdoc IBalancerContractRegistry\n    function deregisterBalancerContract(string memory contractName) external authenticate {\n        if (bytes(contractName).length == 0) {\n            revert InvalidContractName();\n        }\n\n        // Ensure the name is registered\n        bytes32 contractId = _getContractId(contractName);\n        address contractAddress = _contractRegistry[contractId];\n\n        if (contractAddress == address(0)) {\n            revert ContractNameNotRegistered(contractName);\n        }\n\n        ContractInfo memory info = _contractInfo[contractAddress];\n        // This should be impossible: the registry and info mappings must be in sync.\n        if (info.isRegistered == false) {\n            revert InconsistentState(contractName, contractAddress);\n        }\n\n        delete _contractRegistry[contractId];\n        delete _contractInfo[contractAddress];\n\n        emit BalancerContractDeregistered(info.contractType, contractName, contractAddress);\n    }\n\n    /// @inheritdoc IBalancerContractRegistry\n    function deprecateBalancerContract(address contractAddress) external authenticate {\n        if (contractAddress == address(0)) {\n            revert ZeroContractAddress();\n        }\n\n        ContractInfo memory info = _contractInfo[contractAddress];\n\n        // Check that the address has been registered.\n        if (info.isRegistered == false) {\n            revert ContractAddressNotRegistered(contractAddress);\n        }\n\n        // If it was registered, check that it has not already been deprecated.\n        if (info.isActive == false) {\n            revert ContractAlreadyDeprecated(contractAddress);\n        }\n\n        // Set active to false to indicate that it's now deprecated. This is currently a one-way operation, since\n        // deprecation is considered permanent. For instance, calling `disable` to deprecate a factory (preventing\n        // new pool creation) is permanent.\n        info.isActive = false;\n        _contractInfo[contractAddress] = info;\n\n        emit BalancerContractDeprecated(contractAddress);\n    }\n\n    /// @inheritdoc IBalancerContractRegistry\n    function addOrUpdateBalancerContractAlias(\n        string memory contractAlias,\n        address contractAddress\n    ) external authenticate {\n        // Ensure arguments are valid.\n        if (bytes(contractAlias).length == 0) {\n            revert InvalidContractAlias();\n        }\n\n        if (contractAddress == address(0)) {\n            revert ZeroContractAddress();\n        }\n\n        // Ensure the address was already registered.\n        ContractInfo memory info = _contractInfo[contractAddress];\n        if (info.isRegistered == false) {\n            revert ContractAddressNotRegistered(contractAddress);\n        }\n\n        // Ensure the proposed alias is not in use (i.e., no collision with existing registered contracts).\n        // It can match an existing alias: that's the \"update\" case. For instance, if we wanted to migrate\n        // the `WeightedPool` alias from v2 to v3. If the name is not already in `_contractAliases`, we are\n        // adding a new alias.\n        bytes32 contractId = _getContractId(contractAlias);\n        address existingRegistryAddress = _contractRegistry[contractId];\n        if (existingRegistryAddress != address(0)) {\n            info = _contractInfo[existingRegistryAddress];\n\n            revert ContractAliasInUseAsName(info.contractType, contractAlias);\n        }\n\n        // This will either add a new or overwrite an existing alias.\n        _contractAliases[contractId] = contractAddress;\n\n        emit ContractAliasUpdated(contractAlias, contractAddress);\n    }\n\n    /// @inheritdoc IBalancerContractRegistry\n    function isActiveBalancerContract(ContractType contractType, address contractAddress) external view returns (bool) {\n        return _isActiveBalancerContract(contractType, contractAddress);\n    }\n\n    function _isActiveBalancerContract(\n        ContractType contractType,\n        address contractAddress\n    ) internal view returns (bool) {\n        ContractInfo memory info = _contractInfo[contractAddress];\n\n        // Ensure the address was registered as the given type - and that it's still active.\n        return info.isActive && info.contractType == contractType;\n    }\n\n    /// @inheritdoc IBalancerContractRegistry\n    function getBalancerContract(\n        ContractType contractType,\n        string memory contractName\n    ) external view returns (address contractAddress, bool isActive) {\n        bytes32 contractId = _getContractId(contractName);\n        address registeredAddress = _contractRegistry[contractId];\n\n        // Also check the aliases, if not found in the primary registry.\n        if (registeredAddress == address(0)) {\n            registeredAddress = _contractAliases[contractId];\n        }\n\n        ContractInfo memory info = _contractInfo[registeredAddress];\n        // It is possible to register a contract and alias, then deregister the contract, leaving a \"stale\" alias\n        // reference. In this case, `isRegistered` will be false. Only return the contract address if it is still\n        // valid and of the correct type.\n        if (info.isRegistered && info.contractType == contractType) {\n            contractAddress = registeredAddress;\n            isActive = info.isActive;\n        }\n    }\n\n    /// @inheritdoc IBalancerContractRegistry\n    function getBalancerContractInfo(address contractAddress) external view returns (ContractInfo memory info) {\n        return _contractInfo[contractAddress];\n    }\n\n    /// @inheritdoc IBalancerContractRegistry\n    function isTrustedRouter(address router) external view returns (bool) {\n        return _isActiveBalancerContract(ContractType.ROUTER, router);\n    }\n\n    function _getContractId(string memory contractName) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(contractName));\n    }\n}\n"},"contracts/CallAndRevert.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport { RevertCodec } from \"@balancer-labs/v3-solidity-utils/contracts/helpers/RevertCodec.sol\";\n\ncontract CallAndRevert {\n    error QuoteResultSpoofed();\n\n    function _callAndRevert(address target, bytes memory data) internal returns (bytes memory) {\n        try CallAndRevert(address(this)).callAndRevertHook(target, data) {\n            revert(\"Unexpected success\");\n        } catch (bytes memory result) {\n            return RevertCodec.catchEncodedResult(result);\n        }\n    }\n\n    function callAndRevertHook(address target, bytes memory data) external {\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory result) = (target).call(data);\n        if (success) {\n            // This will only revert if result is empty and sender account has no code.\n            Address.verifyCallResultFromTarget(msg.sender, success, result);\n            // Send result in revert reason.\n            revert RevertCodec.Result(result);\n        } else {\n            // If the call reverted with a spoofed `QuoteResult`, we catch it and bubble up a different reason.\n            bytes4 errorSelector = RevertCodec.parseSelector(result);\n            if (errorSelector == RevertCodec.Result.selector) {\n                revert QuoteResultSpoofed();\n            }\n\n            // Otherwise we bubble up the original revert reason.\n            RevertCodec.bubbleUpRevert(result);\n        }\n    }\n}\n"},"contracts/PriceImpactHelper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport { IVault } from \"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\";\nimport { IRouter } from \"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol\";\n\nimport { FixedPoint } from \"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol\";\n\nimport { CallAndRevert } from \"./CallAndRevert.sol\";\n\ncontract PriceImpactHelper is CallAndRevert {\n    using FixedPoint for uint256;\n    using SafeCast for *;\n\n    IVault internal immutable _vault;\n    IRouter internal immutable _router;\n\n    constructor(IVault vault, IRouter router) {\n        _vault = vault;\n        _router = router;\n    }\n\n    /*******************************************************************************\n                                Price Impact\n    *******************************************************************************/\n\n    function calculateAddLiquidityUnbalancedPriceImpact(\n        address pool,\n        uint256[] memory exactAmountsIn,\n        address sender\n    ) external returns (uint256 priceImpact) {\n        uint256 bptAmountOut = _queryAddLiquidityUnbalanced(pool, exactAmountsIn, sender);\n        uint256[] memory proportionalAmountsOut = _queryRemoveLiquidityProportional(pool, bptAmountOut, sender);\n\n        // get deltas between exactAmountsIn and proportionalAmountsOut\n        int256[] memory deltas = new int256[](exactAmountsIn.length);\n        for (uint256 i = 0; i < exactAmountsIn.length; i++) {\n            deltas[i] = proportionalAmountsOut[i].toInt256() - exactAmountsIn[i].toInt256();\n        }\n\n        // query add liquidity for each delta, so we know how unbalanced each amount in is in terms of BPT\n        int256[] memory deltaBPTs = new int256[](exactAmountsIn.length);\n        for (uint256 i = 0; i < exactAmountsIn.length; i++) {\n            deltaBPTs[i] = _queryAddLiquidityUnbalancedForTokenDeltas(pool, i, deltas, sender);\n        }\n\n        // zero out deltas leaving only a remaining delta within a single token\n        uint256 remainingDeltaIndex = _zeroOutDeltas(pool, deltas, deltaBPTs, sender);\n\n        // calculate price impact ABA with remaining delta and its respective exactAmountIn\n        // remaining delta is always negative, so by multiplying by -1 we get a positive number\n        uint256 delta = (-deltas[remainingDeltaIndex]).toUint256();\n        return delta.divDown(exactAmountsIn[remainingDeltaIndex]) / 2;\n    }\n\n    /*******************************************************************************\n                                Router Queries\n    *******************************************************************************/\n\n    function _queryAddLiquidityUnbalanced(\n        address pool,\n        uint256[] memory exactAmountsIn,\n        address sender\n    ) internal returns (uint256) {\n        return\n            abi.decode(\n                _callAndRevert(\n                    address(_router),\n                    abi.encodeWithSelector(\n                        _router.queryAddLiquidityUnbalanced.selector,\n                        pool,\n                        exactAmountsIn,\n                        sender,\n                        \"\"\n                    )\n                ),\n                (uint256)\n            );\n    }\n\n    function _queryRemoveLiquidityProportional(\n        address pool,\n        uint256 bptAmountOut,\n        address sender\n    ) internal returns (uint256[] memory) {\n        return\n            abi.decode(\n                _callAndRevert(\n                    address(_router),\n                    abi.encodeWithSelector(\n                        _router.queryRemoveLiquidityProportional.selector,\n                        pool,\n                        bptAmountOut,\n                        sender,\n                        \"\"\n                    )\n                ),\n                (uint256[])\n            );\n    }\n\n    function _querySwapSingleTokenExactIn(\n        address pool,\n        IERC20 tokenIn,\n        IERC20 tokenOut,\n        uint256 amountIn,\n        address sender\n    ) internal returns (uint256) {\n        return\n            abi.decode(\n                _callAndRevert(\n                    address(_router),\n                    abi.encodeWithSelector(\n                        _router.querySwapSingleTokenExactIn.selector,\n                        pool,\n                        tokenIn,\n                        tokenOut,\n                        amountIn,\n                        sender,\n                        \"\"\n                    )\n                ),\n                (uint256)\n            );\n    }\n\n    function _querySwapSingleTokenExactOut(\n        address pool,\n        IERC20 tokenIn,\n        IERC20 tokenOut,\n        uint256 amountOut,\n        address sender\n    ) internal returns (uint256) {\n        return\n            abi.decode(\n                _callAndRevert(\n                    address(_router),\n                    abi.encodeWithSelector(\n                        _router.querySwapSingleTokenExactOut.selector,\n                        pool,\n                        tokenIn,\n                        tokenOut,\n                        amountOut,\n                        sender,\n                        \"\"\n                    )\n                ),\n                (uint256)\n            );\n    }\n\n    /*******************************************************************************\n                                    Helpers\n    *******************************************************************************/\n\n    function _queryAddLiquidityUnbalancedForTokenDeltas(\n        address pool,\n        uint256 tokenIndex,\n        int256[] memory deltas,\n        address sender\n    ) internal returns (int256) {\n        uint256[] memory zerosWithSingleDelta = new uint256[](deltas.length);\n        int256 delta = deltas[tokenIndex];\n\n        if (delta == 0) {\n            return 0;\n        }\n\n        zerosWithSingleDelta[tokenIndex] = uint256(delta > 0 ? delta : -delta);\n        int256 result = int256(_queryAddLiquidityUnbalanced(pool, zerosWithSingleDelta, sender));\n\n        return delta > 0 ? result : -result;\n    }\n\n    function _zeroOutDeltas(\n        address pool,\n        int256[] memory deltas,\n        int256[] memory deltaBPTs,\n        address sender\n    ) internal returns (uint256) {\n        // Index of closest from 0 negative number in deltaBPTs array.\n        uint256 maxNegativeDeltaIndex = 0;\n        IERC20[] memory poolTokens = _vault.getPoolTokens(pool);\n\n        for (uint256 i = 0; i < deltas.length - 1; i++) {\n            // get minPositiveDeltaIndex and maxNegativeDeltaIndex\n            uint256 minPositiveDeltaIndex = _minPositiveIndex(deltaBPTs);\n            maxNegativeDeltaIndex = _maxNegativeIndex(deltaBPTs);\n\n            uint256 givenTokenIndex;\n            uint256 resultTokenIndex;\n            uint256 resultAmount;\n\n            if (deltaBPTs[minPositiveDeltaIndex] < -deltaBPTs[maxNegativeDeltaIndex]) {\n                givenTokenIndex = minPositiveDeltaIndex;\n                resultTokenIndex = maxNegativeDeltaIndex;\n                resultAmount = _querySwapSingleTokenExactIn(\n                    pool,\n                    poolTokens[givenTokenIndex],\n                    poolTokens[resultTokenIndex],\n                    deltas[givenTokenIndex].toUint256(),\n                    sender\n                );\n            } else {\n                givenTokenIndex = maxNegativeDeltaIndex;\n                resultTokenIndex = minPositiveDeltaIndex;\n                resultAmount = _querySwapSingleTokenExactOut(\n                    pool,\n                    poolTokens[resultTokenIndex],\n                    poolTokens[givenTokenIndex],\n                    (-deltas[givenTokenIndex]).toUint256(),\n                    sender\n                );\n            }\n\n            // Update deltas and deltaBPTs\n            deltas[givenTokenIndex] = 0;\n            deltaBPTs[givenTokenIndex] = 0;\n            deltas[resultTokenIndex] += resultAmount.toInt256();\n            deltaBPTs[resultTokenIndex] = _queryAddLiquidityUnbalancedForTokenDeltas(\n                pool,\n                resultTokenIndex,\n                deltas,\n                sender\n            );\n        }\n\n        return maxNegativeDeltaIndex;\n    }\n\n    // returns the index of the smallest positive integer in an array - i.e. [3, 2, -2, -3] returns 1\n    function _minPositiveIndex(int256[] memory array) internal pure returns (uint256 index) {\n        int256 min = type(int256).max;\n        for (uint256 i = 0; i < array.length; i++) {\n            if (array[i] > 0 && array[i] < min) {\n                min = array[i];\n                index = i;\n            }\n        }\n    }\n\n    // returns the index of the biggest negative integer in an array - i.e. [3, 1, -2, -3] returns 2\n    function _maxNegativeIndex(int256[] memory array) internal pure returns (uint256 index) {\n        int256 max = type(int256).min;\n        for (uint256 i = 0; i < array.length; i++) {\n            if (array[i] < 0 && array[i] > max) {\n                max = array[i];\n                index = i;\n            }\n        }\n    }\n}\n"},"contracts/ProtocolFeeSweeper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IProtocolFeeSweeper } from \"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeSweeper.sol\";\nimport { IProtocolFeeBurner } from \"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol\";\nimport { IProtocolFeeController } from \"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\";\nimport { IVault } from \"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\";\n\nimport { SingletonAuthentication } from \"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol\";\nimport {\n    ReentrancyGuardTransient\n} from \"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol\";\n\n/**\n * @notice Withdraw protocol fees, convert them to a target token, and forward to a recipient.\n * @dev This withdraws all protocol fees previously collected and allocated to the protocol by the\n * `ProtocolFeeController`, processes them with a configurable \"burner\" (e.g., from CowSwap) and forwards them to\n * a recipient address.\n *\n * An off-chain process can call `collectAggregateFees(pool)` on the fee controller for a given pool, which will\n * collect and allocate the fees to the protocol and pool creator. `getProtocolFeeAmounts(pool)` returns the fee\n * amounts available for withdrawal. If these are great enough, `sweepProtocolFees(pool)` here will withdraw,\n * convert, and forward them to the final recipient. There is also a `sweepProtocolFeesForToken` function to\n * target a single token within a pool.\n */\ncontract ProtocolFeeSweeper is IProtocolFeeSweeper, SingletonAuthentication, ReentrancyGuardTransient {\n    using SafeERC20 for IERC20;\n\n    /// @notice All pool tokens are ERC20, so this contract should not handle ETH.\n    error CannotReceiveEth();\n\n    // Preferred token for receiving protocol fees. Passed to the fee burner as the target of fee token swaps.\n    IERC20 private _targetToken;\n\n    // Final destination of the collected protocol fees.\n    address private _feeRecipient;\n\n    // Address of the current \"burner\" contract (i.e., swapping fee tokens to the target).\n    IProtocolFeeBurner private _protocolFeeBurner;\n\n    // The default configuration on deployment simply forwards all fee tokens to the `feeRecipient`.\n    constructor(IVault vault, address feeRecipient) SingletonAuthentication(vault) {\n        _setFeeRecipient(feeRecipient);\n    }\n\n    /// @inheritdoc IProtocolFeeSweeper\n    function sweepProtocolFeesForToken(address pool, IERC20 feeToken) external nonReentrant authenticate {\n        IProtocolFeeBurner feeBurner = _getValidBurner();\n\n        uint256 withdrawnBalance = _withdrawProtocolFeesForToken(pool, feeToken);\n\n        _sweepFeeToken(pool, feeToken, withdrawnBalance, feeBurner);\n    }\n\n    function _withdrawProtocolFeesForToken(address pool, IERC20 feeToken) internal returns (uint256 withdrawnBalance) {\n        // There could be tokens \"left over\" from uncompleted burns from previous sweeps. Only process the \"new\"\n        // fees collected from the current withdrawal.\n        uint256 existingBalance = feeToken.balanceOf(address(this));\n\n        // Withdraw protocol fees to this contract. Note that governance will need to grant this contract permission\n        // to call `withdrawProtocolFeesForToken` on the `ProtocolFeeController.\n        getProtocolFeeController().withdrawProtocolFeesForToken(pool, address(this), feeToken);\n\n        withdrawnBalance = feeToken.balanceOf(address(this)) - existingBalance;\n    }\n\n    /// @inheritdoc IProtocolFeeSweeper\n    function sweepProtocolFees(address pool) external nonReentrant authenticate {\n        IProtocolFeeBurner feeBurner = _getValidBurner();\n\n        (IERC20[] memory poolTokens, uint256[] memory withdrawnBalances) = _withdrawProtocolFees(pool);\n\n        for (uint256 i = 0; i < poolTokens.length; ++i) {\n            _sweepFeeToken(pool, poolTokens[i], withdrawnBalances[i], feeBurner);\n        }\n    }\n\n    function _withdrawProtocolFees(\n        address pool\n    ) internal returns (IERC20[] memory poolTokens, uint256[] memory withdrawnBalances) {\n        poolTokens = getVault().getPoolTokens(pool);\n        uint256 numTokens = poolTokens.length;\n\n        // There could be tokens \"left over\" from uncompleted burns from previous sweeps. Only process the \"new\"\n        // fees collected from the current withdrawal.\n        uint256[] memory existingBalances = new uint256[](numTokens);\n        for (uint256 i = 0; i < numTokens; ++i) {\n            existingBalances[i] = poolTokens[i].balanceOf(address(this));\n        }\n\n        // Withdraw protocol fees to this contract. Note that governance will need to grant this contract permission\n        // to call `withdrawProtocolFees` on the `ProtocolFeeController.\n        getProtocolFeeController().withdrawProtocolFees(pool, address(this));\n\n        withdrawnBalances = new uint256[](numTokens);\n        for (uint256 i = 0; i < numTokens; ++i) {\n            withdrawnBalances[i] = poolTokens[i].balanceOf(address(this)) - existingBalances[i];\n        }\n    }\n\n    // Convert the given token to the target token (if the fee burner is enabled), and forward to the fee recipient.\n    function _sweepFeeToken(\n        address pool,\n        IERC20 feeToken,\n        uint256 withdrawnTokenBalance,\n        IProtocolFeeBurner feeBurner\n    ) internal {\n        // Short-circuit if nothing to do.\n        if (withdrawnTokenBalance == 0) {\n            return;\n        }\n\n        // If no burner has been set, fall back on direct transfer of the fee token.\n        if (address(feeBurner) == address(0)) {\n            _transferFeeToken(pool, feeToken, withdrawnTokenBalance);\n        } else {\n            IERC20 targetToken = _targetToken;\n\n            // If the fee token is already the target, there's no need to swap. Simply transfer it.\n            if (feeToken == targetToken) {\n                _transferFeeToken(pool, feeToken, withdrawnTokenBalance);\n            } else {\n                // Transfer the tokens directly to avoid \"hanging approvals,\" in case the burn is unsuccessful.\n                feeToken.safeTransfer(address(feeBurner), withdrawnTokenBalance);\n                // This is asynchronous; the burner will complete the action and emit an event.\n                feeBurner.burn(pool, feeToken, withdrawnTokenBalance, targetToken, _feeRecipient);\n            }\n        }\n    }\n\n    function _transferFeeToken(address pool, IERC20 feeToken, uint256 withdrawnTokenBalance) private {\n        address recipient = _feeRecipient;\n        feeToken.safeTransfer(recipient, withdrawnTokenBalance);\n\n        emit ProtocolFeeSwept(pool, feeToken, withdrawnTokenBalance, recipient);\n    }\n\n    function _getValidBurner() private view returns (IProtocolFeeBurner feeBurner) {\n        feeBurner = _protocolFeeBurner;\n\n        if (address(feeBurner) != address(0)) {\n            if (address(_targetToken) == address(0)) {\n                revert InvalidTargetToken();\n            }\n        }\n    }\n\n    /// @inheritdoc IProtocolFeeSweeper\n    function getProtocolFeeController() public view returns (IProtocolFeeController) {\n        return getVault().getProtocolFeeController();\n    }\n\n    /// @inheritdoc IProtocolFeeSweeper\n    function getTargetToken() external view returns (IERC20) {\n        return _targetToken;\n    }\n\n    /// @inheritdoc IProtocolFeeSweeper\n    function getFeeRecipient() external view returns (address) {\n        return _feeRecipient;\n    }\n\n    /// @inheritdoc IProtocolFeeSweeper\n    function getProtocolFeeBurner() external view returns (IProtocolFeeBurner) {\n        return _protocolFeeBurner;\n    }\n\n    /***************************************************************************\n                                Permissioned Functions\n    ***************************************************************************/\n\n    /// @inheritdoc IProtocolFeeSweeper\n    function setFeeRecipient(address feeRecipient) external authenticate {\n        _setFeeRecipient(feeRecipient);\n    }\n\n    function _setFeeRecipient(address feeRecipient) internal {\n        // Best effort to at least ensure the fee recipient isn't the zero address (so it doesn't literally burn all\n        // protocol fees). Governance must ensure this is a valid address, as sweeping is permissionless.\n        //\n        // We could use a 2-step claim process like the `TimelockAuthorizer` here, but the consequences here are less\n        // severe, so that might be overkill. Nothing can be bricked; the worst that can happen is loss of protocol\n        // fees until the recipient is updated again.\n        if (feeRecipient == address(0)) {\n            revert InvalidFeeRecipient();\n        }\n\n        _feeRecipient = feeRecipient;\n\n        emit FeeRecipientSet(feeRecipient);\n    }\n\n    /// @inheritdoc IProtocolFeeSweeper\n    function setProtocolFeeBurner(IProtocolFeeBurner protocolFeeBurner) external authenticate {\n        _protocolFeeBurner = protocolFeeBurner;\n\n        emit ProtocolFeeBurnerSet(address(protocolFeeBurner));\n    }\n\n    /// @inheritdoc IProtocolFeeSweeper\n    function setTargetToken(IERC20 targetToken) external authenticate {\n        _targetToken = targetToken;\n\n        emit TargetTokenSet(targetToken);\n    }\n\n    /// @inheritdoc IProtocolFeeSweeper\n    function recoverProtocolFees(IERC20[] memory feeTokens) external nonReentrant {\n        if (msg.sender != _feeRecipient) {\n            revert SenderNotAllowed();\n        }\n\n        for (uint256 i = 0; i < feeTokens.length; ++i) {\n            IERC20 feeToken = feeTokens[i];\n            uint256 tokenBalance = feeToken.balanceOf(address(this));\n\n            if (tokenBalance > 0) {\n                feeToken.safeTransfer(msg.sender, tokenBalance);\n            }\n        }\n    }\n\n    /*******************************************************************************\n                                     Default handlers\n    *******************************************************************************/\n\n    // Maybe these aren't needed, but given the general sensitivity of this contract, preemptively disallow any\n    // ETH-related shenanigans. Tokens are always ERC20, so there should be no ETH involved in any operations.\n\n    receive() external payable {\n        revert CannotReceiveEth();\n    }\n\n    // solhint-disable no-complex-fallback\n\n    fallback() external payable {\n        if (msg.value > 0) {\n            revert CannotReceiveEth();\n        }\n\n        revert(\"Not implemented\");\n    }\n}\n"},"contracts/test/PriceImpactHelperMock.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IVault } from \"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\";\nimport { IRouter } from \"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol\";\n\nimport { PriceImpactHelper } from \"../PriceImpactHelper.sol\";\n\ncontract PriceImpactHelperMock is PriceImpactHelper {\n    constructor(IVault vault, IRouter router) PriceImpactHelper(vault, router) {}\n\n    function queryAddLiquidityUnbalancedForTokenDeltas(\n        address pool,\n        uint256 tokenIndex,\n        int256[] memory deltas,\n        address sender\n    ) external returns (int256 deltaBPT) {\n        return _queryAddLiquidityUnbalancedForTokenDeltas(pool, tokenIndex, deltas, sender);\n    }\n\n    function zeroOutDeltas(\n        address pool,\n        int256[] memory deltas,\n        int256[] memory deltaBPTs,\n        address sender\n    ) external returns (uint256) {\n        return _zeroOutDeltas(pool, deltas, deltaBPTs, sender);\n    }\n\n    function minPositiveIndex(int256[] memory array) external pure returns (uint256) {\n        return _minPositiveIndex(array);\n    }\n\n    function maxNegativeIndex(int256[] memory array) external pure returns (uint256) {\n        return _maxNegativeIndex(array);\n    }\n}\n"},"contracts/test/ProtocolFeeBurnerMock.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IProtocolFeeBurner } from \"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol\";\n\nimport { ERC20TestToken } from \"@balancer-labs/v3-solidity-utils/contracts/test/ERC20TestToken.sol\";\n\ncontract ProtocolFeeBurnerMock is IProtocolFeeBurner {\n    /// @inheritdoc IProtocolFeeBurner\n    function burn(\n        address pool,\n        IERC20 feeToken,\n        uint256 feeTokenAmount,\n        IERC20 targetToken,\n        address recipient\n    ) external {\n        // Simulate the swap by minting the same amount of target to the recipient.\n        ERC20TestToken(address(targetToken)).mint(recipient, feeTokenAmount);\n\n        // Just emit the event, simulating the tokens being exchanged at 1-to-1.\n        emit ProtocolFeeBurned(pool, feeToken, feeTokenAmount, targetToken, feeTokenAmount, recipient);\n    }\n}\n"}},"settings":{"viaIR":true,"evmVersion":"cancun","optimizer":{"enabled":true,"runs":9999,"details":{"yulDetails":{"optimizerSteps":"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu"}}},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":"2394","formattedMessage":"Warning: Transient storage as defined by EIP-1153 can break the composability of smart contracts: Since transient storage is cleared only at the end of the transaction and not at the end of the outermost call frame to the contract within a transaction, your contract may unintentionally misbehave when invoked multiple times in a complex transaction. To avoid this, be sure to clear all transient storage at the end of any call to your contract. The use of transient storage for reentrancy guards that are cleared at the end of the call is safe.\n  --> @balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol:74:13:\n   |\n74 |             tstore(slot, value)\n   |             ^^^^^^\n\n","message":"Transient storage as defined by EIP-1153 can break the composability of smart contracts: Since transient storage is cleared only at the end of the transaction and not at the end of the outermost call frame to the contract within a transaction, your contract may unintentionally misbehave when invoked multiple times in a complex transaction. To avoid this, be sure to clear all transient storage at the end of any call to your contract. The use of transient storage for reentrancy guards that are cleared at the end of the call is safe.","severity":"warning","sourceLocation":{"end":2572,"file":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol","start":2566},"type":"Warning"}],"sources":{"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","exportedSymbols":{"IAuthentication":[14]},"id":15,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IAuthentication","contractDependencies":[],"contractKind":"interface","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"72:77:0","text":"@notice Simple interface for permissioned calling of external functions."},"fullyImplemented":false,"id":14,"linearizedBaseContracts":[14],"name":"IAuthentication","nameLocation":"159:15:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"181:67:0","text":"@notice The sender does not have permission to call a function."},"errorSelector":"23dada53","id":5,"name":"SenderNotAllowed","nameLocation":"259:16:0","nodeType":"ErrorDefinition","parameters":{"id":4,"nodeType":"ParameterList","parameters":[],"src":"275:2:0"},"src":"253:25:0"},{"documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"284:237:0","text":" @notice Returns the action identifier associated with the external function described by `selector`.\n @param selector The 4-byte selector of the permissioned function\n @return actionId The computed actionId"},"functionSelector":"851c1bb3","id":13,"implemented":false,"kind":"function","modifiers":[],"name":"getActionId","nameLocation":"535:11:0","nodeType":"FunctionDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8,"mutability":"mutable","name":"selector","nameLocation":"554:8:0","nodeType":"VariableDeclaration","scope":13,"src":"547:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":7,"name":"bytes4","nodeType":"ElementaryTypeName","src":"547:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"546:17:0"},"returnParameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"actionId","nameLocation":"595:8:0","nodeType":"VariableDeclaration","scope":13,"src":"587:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":10,"name":"bytes32","nodeType":"ElementaryTypeName","src":"587:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"586:18:0"},"scope":14,"src":"526:79:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":15,"src":"149:458:0","usedErrors":[5],"usedEvents":[]}],"src":"46:562:0"},"id":0},"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol","exportedSymbols":{"IRateProvider":[24]},"id":25,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":16,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IRateProvider","contractDependencies":[],"contractKind":"interface","documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"72:56:1","text":"@notice General interface for token exchange rates."},"fullyImplemented":false,"id":24,"linearizedBaseContracts":[24],"name":"IRateProvider","nameLocation":"138:13:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":18,"nodeType":"StructuredDocumentation","src":"158:573:1","text":" @notice An 18 decimal fixed point number representing the exchange rate of one token to another related token.\n @dev The meaning of this rate depends on the context. Note that there may be an error associated with a token\n rate, and the caller might require a certain rounding direction to ensure correctness. This (legacy) interface\n does not take a rounding direction or return an error, so great care must be taken when interpreting and using\n rates in downstream computations.\n @return rate The current token rate"},"functionSelector":"679aefce","id":23,"implemented":false,"kind":"function","modifiers":[],"name":"getRate","nameLocation":"745:7:1","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"752:2:1"},"returnParameters":{"id":22,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"rate","nameLocation":"786:4:1","nodeType":"VariableDeclaration","scope":23,"src":"778:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":20,"name":"uint256","nodeType":"ElementaryTypeName","src":"778:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"777:14:1"},"scope":24,"src":"736:56:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":25,"src":"128:666:1","usedErrors":[],"usedEvents":[]}],"src":"46:749:1"},"id":1},"@balancer-labs/v3-interfaces/contracts/standalone-utils/IBalancerContractRegistry.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/standalone-utils/IBalancerContractRegistry.sol","exportedSymbols":{"ContractType":[33],"IBalancerContractRegistry":[202]},"id":203,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":26,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:2"},{"canonicalName":"ContractType","documentation":{"id":27,"nodeType":"StructuredDocumentation","src":"72:61:2","text":"@notice Registered contracts must be one of these types."},"id":33,"members":[{"id":28,"name":"OTHER","nameLocation":"157:5:2","nodeType":"EnumValue","src":"157:5:2"},{"id":29,"name":"POOL_FACTORY","nameLocation":"255:12:2","nodeType":"EnumValue","src":"255:12:2"},{"id":30,"name":"ROUTER","nameLocation":"273:6:2","nodeType":"EnumValue","src":"273:6:2"},{"id":31,"name":"HOOK","nameLocation":"285:4:2","nodeType":"EnumValue","src":"285:4:2"},{"id":32,"name":"ERC4626","nameLocation":"295:7:2","nodeType":"EnumValue","src":"295:7:2"}],"name":"ContractType","nameLocation":"138:12:2","nodeType":"EnumDefinition","src":"133:171:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IBalancerContractRegistry","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":202,"linearizedBaseContracts":[202],"name":"IBalancerContractRegistry","nameLocation":"316:25:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IBalancerContractRegistry.ContractInfo","documentation":{"id":34,"nodeType":"StructuredDocumentation","src":"348:887:2","text":" @notice Store the state of a registered Balancer contract.\n @dev Contracts can be deprecated, so we store an active flag indicating the status. With two flags, we can\n differentiate between deprecated and non-existent. The same contract address can have multiple names, but\n only one type. If a contract is legitimately multiple types (e.g., a hook that also acts as a router), set\n the type to its \"primary\" function: hook, in this case. The \"Other\" type is intended as a catch-all for\n things that don't find into the standard types (e.g., helper contracts).\n @param contractType The type of contract (e.g., Router or Hook)\n @param isRegistered This flag indicates whether there is an entry for the associated address\n @param isActive If there is an entry, this flag indicates whether it is active or deprecated"},"id":42,"members":[{"constant":false,"id":37,"mutability":"mutable","name":"contractType","nameLocation":"1283:12:2","nodeType":"VariableDeclaration","scope":42,"src":"1270:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":36,"nodeType":"UserDefinedTypeName","pathNode":{"id":35,"name":"ContractType","nameLocations":["1270:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"1270:12:2"},"referencedDeclaration":33,"src":"1270:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":39,"mutability":"mutable","name":"isRegistered","nameLocation":"1310:12:2","nodeType":"VariableDeclaration","scope":42,"src":"1305:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":38,"name":"bool","nodeType":"ElementaryTypeName","src":"1305:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":41,"mutability":"mutable","name":"isActive","nameLocation":"1337:8:2","nodeType":"VariableDeclaration","scope":42,"src":"1332:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":40,"name":"bool","nodeType":"ElementaryTypeName","src":"1332:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"ContractInfo","nameLocation":"1247:12:2","nodeType":"StructDefinition","scope":202,"src":"1240:112:2","visibility":"public"},{"anonymous":false,"documentation":{"id":43,"nodeType":"StructuredDocumentation","src":"1358:278:2","text":" @notice Emitted when a new contract is registered.\n @param contractType The type of contract being registered\n @param contractName The name of the contract being registered\n @param contractAddress The address of the contract being registered"},"eventSelector":"b12ed936cf481273b3ed037dc706d110c49bd7ba6743e67082cd772a6e9102e2","id":52,"name":"BalancerContractRegistered","nameLocation":"1647:26:2","nodeType":"EventDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[{"constant":false,"id":46,"indexed":true,"mutability":"mutable","name":"contractType","nameLocation":"1704:12:2","nodeType":"VariableDeclaration","scope":52,"src":"1683:33:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":45,"nodeType":"UserDefinedTypeName","pathNode":{"id":44,"name":"ContractType","nameLocations":["1683:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"1683:12:2"},"referencedDeclaration":33,"src":"1683:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":48,"indexed":true,"mutability":"mutable","name":"contractName","nameLocation":"1741:12:2","nodeType":"VariableDeclaration","scope":52,"src":"1726:27:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":47,"name":"string","nodeType":"ElementaryTypeName","src":"1726:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":50,"indexed":true,"mutability":"mutable","name":"contractAddress","nameLocation":"1779:15:2","nodeType":"VariableDeclaration","scope":52,"src":"1763:31:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49,"name":"address","nodeType":"ElementaryTypeName","src":"1763:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1673:127:2"},"src":"1641:160:2"},{"anonymous":false,"documentation":{"id":53,"nodeType":"StructuredDocumentation","src":"1807:296:2","text":" @notice Emitted when a new contract is deregistered (deleted).\n @param contractType The type of contract being deregistered\n @param contractName The name of the contract being deregistered\n @param contractAddress The address of the contract being deregistered"},"eventSelector":"fa2e7bfe3791287aa74ffe867372b78e61b60e0516978c4952f83f7416fafb7c","id":62,"name":"BalancerContractDeregistered","nameLocation":"2114:28:2","nodeType":"EventDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"indexed":true,"mutability":"mutable","name":"contractType","nameLocation":"2173:12:2","nodeType":"VariableDeclaration","scope":62,"src":"2152:33:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":55,"nodeType":"UserDefinedTypeName","pathNode":{"id":54,"name":"ContractType","nameLocations":["2152:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"2152:12:2"},"referencedDeclaration":33,"src":"2152:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":58,"indexed":true,"mutability":"mutable","name":"contractName","nameLocation":"2210:12:2","nodeType":"VariableDeclaration","scope":62,"src":"2195:27:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":57,"name":"string","nodeType":"ElementaryTypeName","src":"2195:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":60,"indexed":true,"mutability":"mutable","name":"contractAddress","nameLocation":"2248:15:2","nodeType":"VariableDeclaration","scope":62,"src":"2232:31:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":59,"name":"address","nodeType":"ElementaryTypeName","src":"2232:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2142:127:2"},"src":"2108:162:2"},{"anonymous":false,"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"2276:203:2","text":" @notice Emitted when a registered contract is deprecated.\n @dev This sets the `isActive` flag to false.\n @param contractAddress The address of the contract being deprecated"},"eventSelector":"07b81cace396ea12f83465895486ac006cd17917e41b9759ad5e663404f1497b","id":67,"name":"BalancerContractDeprecated","nameLocation":"2490:26:2","nodeType":"EventDefinition","parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"indexed":true,"mutability":"mutable","name":"contractAddress","nameLocation":"2533:15:2","nodeType":"VariableDeclaration","scope":67,"src":"2517:31:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"2517:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2516:33:2"},"src":"2484:66:2"},{"anonymous":false,"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"2556:187:2","text":" @notice Emitted when an alias is added or updated.\n @param contractAlias The alias name\n @param contractAddress The address of the contract being deprecated"},"eventSelector":"06618a6a1a6a413a59097e7c362ee8260afae8f07bd94bc0938e573058465483","id":74,"name":"ContractAliasUpdated","nameLocation":"2754:20:2","nodeType":"EventDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"indexed":true,"mutability":"mutable","name":"contractAlias","nameLocation":"2790:13:2","nodeType":"VariableDeclaration","scope":74,"src":"2775:28:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":69,"name":"string","nodeType":"ElementaryTypeName","src":"2775:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":72,"indexed":true,"mutability":"mutable","name":"contractAddress","nameLocation":"2821:15:2","nodeType":"VariableDeclaration","scope":74,"src":"2805:31:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":71,"name":"address","nodeType":"ElementaryTypeName","src":"2805:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2774:63:2"},"src":"2748:90:2"},{"documentation":{"id":75,"nodeType":"StructuredDocumentation","src":"2844:531:2","text":" @notice A contract has already been registered under the given address.\n @dev Both names and addresses must be unique in the primary registration mapping. Though there are two mappings\n to accommodate searching by either name or address, conceptually there is a single guaranteed-consistent\n name => address => state mapping.\n @param contractType The contract type, provided for documentation purposes\n @param contractAddress The address of the previously registered contract"},"errorSelector":"25a14e0c","id":82,"name":"ContractAddressAlreadyRegistered","nameLocation":"3386:32:2","nodeType":"ErrorDefinition","parameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"contractType","nameLocation":"3432:12:2","nodeType":"VariableDeclaration","scope":82,"src":"3419:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":77,"nodeType":"UserDefinedTypeName","pathNode":{"id":76,"name":"ContractType","nameLocations":["3419:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"3419:12:2"},"referencedDeclaration":33,"src":"3419:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"contractAddress","nameLocation":"3454:15:2","nodeType":"VariableDeclaration","scope":82,"src":"3446:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":79,"name":"address","nodeType":"ElementaryTypeName","src":"3446:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3418:52:2"},"src":"3380:91:2"},{"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"3477:439:2","text":" @notice A contract has already been registered under the given name.\n @dev Note that names must be unique; it is not possible to register two contracts with the same name and\n different types, or the same name and different addresses.\n @param contractType The registered contract type, provided for documentation purposes\n @param contractName The name of the previously registered contract"},"errorSelector":"a1e69ed3","id":90,"name":"ContractNameAlreadyRegistered","nameLocation":"3927:29:2","nodeType":"ErrorDefinition","parameters":{"id":89,"nodeType":"ParameterList","parameters":[{"constant":false,"id":86,"mutability":"mutable","name":"contractType","nameLocation":"3970:12:2","nodeType":"VariableDeclaration","scope":90,"src":"3957:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":85,"nodeType":"UserDefinedTypeName","pathNode":{"id":84,"name":"ContractType","nameLocations":["3957:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"3957:12:2"},"referencedDeclaration":33,"src":"3957:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":88,"mutability":"mutable","name":"contractName","nameLocation":"3991:12:2","nodeType":"VariableDeclaration","scope":90,"src":"3984:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":87,"name":"string","nodeType":"ElementaryTypeName","src":"3984:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3956:48:2"},"src":"3921:84:2"},{"documentation":{"id":91,"nodeType":"StructuredDocumentation","src":"4011:338:2","text":" @notice The proposed contract name has already been added as an alias.\n @dev This could lead to inconsistent (or at least redundant) internal state if allowed.\n @param contractName The name of the previously registered contract\n @param contractAddress The address of the previously registered contract"},"errorSelector":"6d4f9990","id":97,"name":"ContractNameInUseAsAlias","nameLocation":"4360:24:2","nodeType":"ErrorDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":93,"mutability":"mutable","name":"contractName","nameLocation":"4392:12:2","nodeType":"VariableDeclaration","scope":97,"src":"4385:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":92,"name":"string","nodeType":"ElementaryTypeName","src":"4385:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":95,"mutability":"mutable","name":"contractAddress","nameLocation":"4414:15:2","nodeType":"VariableDeclaration","scope":97,"src":"4406:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":94,"name":"address","nodeType":"ElementaryTypeName","src":"4406:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4384:46:2"},"src":"4354:77:2"},{"documentation":{"id":98,"nodeType":"StructuredDocumentation","src":"4437:371:2","text":" @notice The proposed alias has already been registered as a contract.\n @dev This could lead to inconsistent (or at least redundant) internal state if allowed.\n @param contractType The registered contract type, provided for documentation purposes\n @param contractName The name of the previously registered contract (and proposed alias)"},"errorSelector":"4466cf0c","id":105,"name":"ContractAliasInUseAsName","nameLocation":"4819:24:2","nodeType":"ErrorDefinition","parameters":{"id":104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"contractType","nameLocation":"4857:12:2","nodeType":"VariableDeclaration","scope":105,"src":"4844:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":100,"nodeType":"UserDefinedTypeName","pathNode":{"id":99,"name":"ContractType","nameLocations":["4844:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"4844:12:2"},"referencedDeclaration":33,"src":"4844:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":103,"mutability":"mutable","name":"contractName","nameLocation":"4878:12:2","nodeType":"VariableDeclaration","scope":105,"src":"4871:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":102,"name":"string","nodeType":"ElementaryTypeName","src":"4871:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4843:48:2"},"src":"4813:79:2"},{"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"4898:175:2","text":" @notice Thrown when attempting to deregister a contract that was not previously registered.\n @param contractName The name of the unregistered contract"},"errorSelector":"cd3599f9","id":110,"name":"ContractNameNotRegistered","nameLocation":"5084:25:2","nodeType":"ErrorDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"contractName","nameLocation":"5117:12:2","nodeType":"VariableDeclaration","scope":110,"src":"5110:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":107,"name":"string","nodeType":"ElementaryTypeName","src":"5110:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5109:21:2"},"src":"5078:53:2"},{"documentation":{"id":111,"nodeType":"StructuredDocumentation","src":"5137:329:2","text":" @notice An operation that requires a valid contract specified an unrecognized address.\n @dev A contract being deprecated was never registered, or the target of an alias isn't a previously\n registered contract.\n @param contractAddress The address of the contract that was not registered"},"errorSelector":"f5b5d364","id":115,"name":"ContractAddressNotRegistered","nameLocation":"5477:28:2","nodeType":"ErrorDefinition","parameters":{"id":114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"contractAddress","nameLocation":"5514:15:2","nodeType":"VariableDeclaration","scope":115,"src":"5506:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"5506:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5505:25:2"},"src":"5471:60:2"},{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"5537:145:2","text":" @notice Contracts can only be deprecated once.\n @param contractAddress The address of the previously deprecated contract"},"errorSelector":"1f118c35","id":120,"name":"ContractAlreadyDeprecated","nameLocation":"5693:25:2","nodeType":"ErrorDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"contractAddress","nameLocation":"5727:15:2","nodeType":"VariableDeclaration","scope":120,"src":"5719:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":117,"name":"address","nodeType":"ElementaryTypeName","src":"5719:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5718:25:2"},"src":"5687:57:2"},{"documentation":{"id":121,"nodeType":"StructuredDocumentation","src":"5750:95:2","text":"@notice Cannot register or deprecate contracts, or add an alias targeting the zero address."},"errorSelector":"b4d92c53","id":123,"name":"ZeroContractAddress","nameLocation":"5856:19:2","nodeType":"ErrorDefinition","parameters":{"id":122,"nodeType":"ParameterList","parameters":[],"src":"5875:2:2"},"src":"5850:28:2"},{"documentation":{"id":124,"nodeType":"StructuredDocumentation","src":"5884:86:2","text":"@notice Cannot register (or deregister) a contract with an empty string as a name."},"errorSelector":"830c907e","id":126,"name":"InvalidContractName","nameLocation":"5981:19:2","nodeType":"ErrorDefinition","parameters":{"id":125,"nodeType":"ParameterList","parameters":[],"src":"6000:2:2"},"src":"5975:28:2"},{"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"6009:51:2","text":"@notice Cannot add an empty string as an alias."},"errorSelector":"907f9fd9","id":129,"name":"InvalidContractAlias","nameLocation":"6071:20:2","nodeType":"ErrorDefinition","parameters":{"id":128,"nodeType":"ParameterList","parameters":[],"src":"6091:2:2"},"src":"6065:29:2"},{"documentation":{"id":130,"nodeType":"StructuredDocumentation","src":"6100:711:2","text":" @notice Register an official Balancer contract (e.g., a trusted router, standard pool factory, or hook).\n @dev This is a permissioned function, and does only basic validation of the address (non-zero) and the name\n (not blank). Governance must ensure this is called with valid information. Emits the\n `BalancerContractRegistered` event if successful. Reverts if either the name or address is invalid or\n already in use.\n @param contractType The type of contract being registered\n @param contractName A text description of the contract, usually the deployed version (e.g., \"v3-pool-weighted\")\n @param contractAddress The address of the contract"},"functionSelector":"e0376ab4","id":140,"implemented":false,"kind":"function","modifiers":[],"name":"registerBalancerContract","nameLocation":"6825:24:2","nodeType":"FunctionDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":133,"mutability":"mutable","name":"contractType","nameLocation":"6872:12:2","nodeType":"VariableDeclaration","scope":140,"src":"6859:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":132,"nodeType":"UserDefinedTypeName","pathNode":{"id":131,"name":"ContractType","nameLocations":["6859:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"6859:12:2"},"referencedDeclaration":33,"src":"6859:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":135,"mutability":"mutable","name":"contractName","nameLocation":"6908:12:2","nodeType":"VariableDeclaration","scope":140,"src":"6894:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":134,"name":"string","nodeType":"ElementaryTypeName","src":"6894:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":137,"mutability":"mutable","name":"contractAddress","nameLocation":"6938:15:2","nodeType":"VariableDeclaration","scope":140,"src":"6930:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":136,"name":"address","nodeType":"ElementaryTypeName","src":"6930:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6849:110:2"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[],"src":"6968:0:2"},"scope":202,"src":"6816:153:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":141,"nodeType":"StructuredDocumentation","src":"6975:878:2","text":" @notice Deregister an official Balancer contract (e.g., a trusted router, standard pool factory, or hook).\n @dev This is a permissioned function, and makes it possible to correct errors without complex update logic.\n If a contract was registered with an incorrect type, name, or address, this allows governance to simply delete\n it, and register it again with the correct data. It must start with the name, as this is the registry key,\n required for complete deletion.\n Note that there might still be an alias targeting the address being deleted, but accessing it will just return\n inactive, and this orphan alias can simply be overwritten with `addOrUpdateBalancerContractAlias` to point to\n the correct address.\n @param contractName The name of the contract being deprecated (cannot be an alias)"},"functionSelector":"c7f90793","id":146,"implemented":false,"kind":"function","modifiers":[],"name":"deregisterBalancerContract","nameLocation":"7867:26:2","nodeType":"FunctionDefinition","parameters":{"id":144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":143,"mutability":"mutable","name":"contractName","nameLocation":"7908:12:2","nodeType":"VariableDeclaration","scope":146,"src":"7894:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":142,"name":"string","nodeType":"ElementaryTypeName","src":"7894:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7893:28:2"},"returnParameters":{"id":145,"nodeType":"ParameterList","parameters":[],"src":"7930:0:2"},"scope":202,"src":"7858:73:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"7937:472:2","text":" @notice Deprecate an official Balancer contract.\n @dev This is a permissioned function that sets the `isActive` flag to false in the contract info. It uses the\n address instead of the name for maximum clarity, and to avoid having to handle aliases. Addresses and names are\n enforced unique, so either the name or address could be specified in principle.\n @param contractAddress The address of the contract being deprecated"},"functionSelector":"44969a9c","id":152,"implemented":false,"kind":"function","modifiers":[],"name":"deprecateBalancerContract","nameLocation":"8423:25:2","nodeType":"FunctionDefinition","parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"contractAddress","nameLocation":"8457:15:2","nodeType":"VariableDeclaration","scope":152,"src":"8449:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":148,"name":"address","nodeType":"ElementaryTypeName","src":"8449:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8448:25:2"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[],"src":"8482:0:2"},"scope":202,"src":"8414:69:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":153,"nodeType":"StructuredDocumentation","src":"8489:650:2","text":" @notice Add an alias for a registered contract.\n @dev This is a permissioned function to support querying by a contract alias. For instance, we might create a\n `WeightedPool` alias meaning the \"latest\" version of the `WeightedPoolFactory`, so that off-chain users don't\n need to track specific versions. Once added, an alias can also be updated to point to a different address\n (e.g., when migrating from the v2 to the v3 weighted pool).\n @param contractAlias An alternate name that can be used to fetch a contract address\n @param existingContract The target address of the contract alias"},"functionSelector":"2967af96","id":160,"implemented":false,"kind":"function","modifiers":[],"name":"addOrUpdateBalancerContractAlias","nameLocation":"9153:32:2","nodeType":"FunctionDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"contractAlias","nameLocation":"9200:13:2","nodeType":"VariableDeclaration","scope":160,"src":"9186:27:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":154,"name":"string","nodeType":"ElementaryTypeName","src":"9186:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":157,"mutability":"mutable","name":"existingContract","nameLocation":"9223:16:2","nodeType":"VariableDeclaration","scope":160,"src":"9215:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":156,"name":"address","nodeType":"ElementaryTypeName","src":"9215:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9185:55:2"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"9249:0:2"},"scope":202,"src":"9144:106:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":161,"nodeType":"StructuredDocumentation","src":"9256:316:2","text":" @notice Determine whether an address is an official contract of the specified type.\n @param contractType The type of contract\n @param contractAddress The address of the contract\n @return isActive True if the given address is a registered and active contract of the specified type"},"functionSelector":"ae2733a4","id":171,"implemented":false,"kind":"function","modifiers":[],"name":"isActiveBalancerContract","nameLocation":"9586:24:2","nodeType":"FunctionDefinition","parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"contractType","nameLocation":"9633:12:2","nodeType":"VariableDeclaration","scope":171,"src":"9620:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":163,"nodeType":"UserDefinedTypeName","pathNode":{"id":162,"name":"ContractType","nameLocations":["9620:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"9620:12:2"},"referencedDeclaration":33,"src":"9620:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"contractAddress","nameLocation":"9663:15:2","nodeType":"VariableDeclaration","scope":171,"src":"9655:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"9655:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9610:74:2"},"returnParameters":{"id":170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"isActive","nameLocation":"9713:8:2","nodeType":"VariableDeclaration","scope":171,"src":"9708:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":168,"name":"bool","nodeType":"ElementaryTypeName","src":"9708:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9707:15:2"},"scope":202,"src":"9577:146:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":172,"nodeType":"StructuredDocumentation","src":"9729:496:2","text":" @notice Look up a registered contract by type and name.\n @dev This could target a particular version (e.g. `20241205-v3-weighted-pool`), or a contract alias\n (e.g., `WeightedPool`).\n @param contractType The type of the contract\n @param contractName The name of the contract\n @return contractAddress The address of the associated contract, if registered, or zero\n @return isActive True if the contract was registered and not deprecated"},"functionSelector":"41d8c0bb","id":184,"implemented":false,"kind":"function","modifiers":[],"name":"getBalancerContract","nameLocation":"10239:19:2","nodeType":"FunctionDefinition","parameters":{"id":178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":175,"mutability":"mutable","name":"contractType","nameLocation":"10281:12:2","nodeType":"VariableDeclaration","scope":184,"src":"10268:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":174,"nodeType":"UserDefinedTypeName","pathNode":{"id":173,"name":"ContractType","nameLocations":["10268:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"10268:12:2"},"referencedDeclaration":33,"src":"10268:12:2","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":177,"mutability":"mutable","name":"contractName","nameLocation":"10317:12:2","nodeType":"VariableDeclaration","scope":184,"src":"10303:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":176,"name":"string","nodeType":"ElementaryTypeName","src":"10303:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10258:77:2"},"returnParameters":{"id":183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":180,"mutability":"mutable","name":"contractAddress","nameLocation":"10367:15:2","nodeType":"VariableDeclaration","scope":184,"src":"10359:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":179,"name":"address","nodeType":"ElementaryTypeName","src":"10359:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":182,"mutability":"mutable","name":"isActive","nameLocation":"10389:8:2","nodeType":"VariableDeclaration","scope":184,"src":"10384:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":181,"name":"bool","nodeType":"ElementaryTypeName","src":"10384:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10358:40:2"},"scope":202,"src":"10230:169:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"10405:233:2","text":" @notice Look up complete information about a registered contract by address.\n @param contractAddress The address of the associated contract\n @return info ContractInfo struct corresponding to the address"},"functionSelector":"8554c327","id":193,"implemented":false,"kind":"function","modifiers":[],"name":"getBalancerContractInfo","nameLocation":"10652:23:2","nodeType":"FunctionDefinition","parameters":{"id":188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"contractAddress","nameLocation":"10684:15:2","nodeType":"VariableDeclaration","scope":193,"src":"10676:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":186,"name":"address","nodeType":"ElementaryTypeName","src":"10676:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10675:25:2"},"returnParameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":191,"mutability":"mutable","name":"info","nameLocation":"10744:4:2","nodeType":"VariableDeclaration","scope":193,"src":"10724:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"},"typeName":{"id":190,"nodeType":"UserDefinedTypeName","pathNode":{"id":189,"name":"ContractInfo","nameLocations":["10724:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":42,"src":"10724:12:2"},"referencedDeclaration":42,"src":"10724:12:2","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"}},"visibility":"internal"}],"src":"10723:26:2"},"scope":202,"src":"10643:107:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":194,"nodeType":"StructuredDocumentation","src":"10756:92:2","text":"@notice Returns `true` if the given address is an active contract under the ROUTER type."},"functionSelector":"264e97e0","id":201,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedRouter","nameLocation":"10862:15:2","nodeType":"FunctionDefinition","parameters":{"id":197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":196,"mutability":"mutable","name":"router","nameLocation":"10886:6:2","nodeType":"VariableDeclaration","scope":201,"src":"10878:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":195,"name":"address","nodeType":"ElementaryTypeName","src":"10878:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10877:16:2"},"returnParameters":{"id":200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":199,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":201,"src":"10917:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":198,"name":"bool","nodeType":"ElementaryTypeName","src":"10917:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10916:6:2"},"scope":202,"src":"10853:70:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":203,"src":"306:10619:2","usedErrors":[82,90,97,105,110,115,120,123,126,129],"usedEvents":[52,62,67,74]}],"src":"46:10880:2"},"id":2},"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol","exportedSymbols":{"IERC20":[6383],"IProtocolFeeBurner":[239]},"id":240,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":204,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":206,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":240,"sourceUnit":6384,"src":"72:72:3","symbolAliases":[{"foreign":{"id":205,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"81:6:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IProtocolFeeBurner","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":239,"linearizedBaseContracts":[239],"name":"IProtocolFeeBurner","nameLocation":"156:18:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"77a7b034dbb42c9087518e95b49c02a17704a521555779f3f9d7f1b26df5ce8d","id":222,"name":"ProtocolFeeBurned","nameLocation":"187:17:3","nodeType":"EventDefinition","parameters":{"id":221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":208,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"230:4:3","nodeType":"VariableDeclaration","scope":222,"src":"214:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":207,"name":"address","nodeType":"ElementaryTypeName","src":"214:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":211,"indexed":true,"mutability":"mutable","name":"feeToken","nameLocation":"259:8:3","nodeType":"VariableDeclaration","scope":222,"src":"244:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":210,"nodeType":"UserDefinedTypeName","pathNode":{"id":209,"name":"IERC20","nameLocations":["244:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"244:6:3"},"referencedDeclaration":6383,"src":"244:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":213,"indexed":false,"mutability":"mutable","name":"feeTokenAmount","nameLocation":"285:14:3","nodeType":"VariableDeclaration","scope":222,"src":"277:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":212,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":216,"indexed":true,"mutability":"mutable","name":"targetToken","nameLocation":"324:11:3","nodeType":"VariableDeclaration","scope":222,"src":"309:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":215,"nodeType":"UserDefinedTypeName","pathNode":{"id":214,"name":"IERC20","nameLocations":["309:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"309:6:3"},"referencedDeclaration":6383,"src":"309:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":218,"indexed":false,"mutability":"mutable","name":"targetTokenAmount","nameLocation":"353:17:3","nodeType":"VariableDeclaration","scope":222,"src":"345:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"345:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":220,"indexed":false,"mutability":"mutable","name":"recipient","nameLocation":"388:9:3","nodeType":"VariableDeclaration","scope":222,"src":"380:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":219,"name":"address","nodeType":"ElementaryTypeName","src":"380:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"204:199:3"},"src":"181:223:3"},{"documentation":{"id":223,"nodeType":"StructuredDocumentation","src":"410:562:3","text":" @notice Swap an exact amount of `feeToken` for the `targetToken`, and send proceeds to the `recipient`.\n @dev Assumes the sweeper has transferred the tokens to the burner prior to the call.\n @param pool The pool the fees came from (only used for documentation in the event)\n @param feeToken The feeToken collected from the pool\n @param feeTokenAmount The number of fee tokens collected\n @param targetToken The desired target token (token out of the swap)\n @param recipient The recipient of the swap proceeds"},"functionSelector":"54caad00","id":238,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"986:4:3","nodeType":"FunctionDefinition","parameters":{"id":236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"pool","nameLocation":"1008:4:3","nodeType":"VariableDeclaration","scope":238,"src":"1000:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":224,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":228,"mutability":"mutable","name":"feeToken","nameLocation":"1029:8:3","nodeType":"VariableDeclaration","scope":238,"src":"1022:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":227,"nodeType":"UserDefinedTypeName","pathNode":{"id":226,"name":"IERC20","nameLocations":["1022:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"1022:6:3"},"referencedDeclaration":6383,"src":"1022:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":230,"mutability":"mutable","name":"feeTokenAmount","nameLocation":"1055:14:3","nodeType":"VariableDeclaration","scope":238,"src":"1047:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":229,"name":"uint256","nodeType":"ElementaryTypeName","src":"1047:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"targetToken","nameLocation":"1086:11:3","nodeType":"VariableDeclaration","scope":238,"src":"1079:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":232,"nodeType":"UserDefinedTypeName","pathNode":{"id":231,"name":"IERC20","nameLocations":["1079:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"1079:6:3"},"referencedDeclaration":6383,"src":"1079:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":235,"mutability":"mutable","name":"recipient","nameLocation":"1115:9:3","nodeType":"VariableDeclaration","scope":238,"src":"1107:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":234,"name":"address","nodeType":"ElementaryTypeName","src":"1107:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"990:140:3"},"returnParameters":{"id":237,"nodeType":"ParameterList","parameters":[],"src":"1139:0:3"},"scope":239,"src":"977:163:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":240,"src":"146:996:3","usedErrors":[],"usedEvents":[222]}],"src":"46:1097:3"},"id":3},"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeSweeper.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeSweeper.sol","exportedSymbols":{"IERC20":[6383],"IProtocolFeeBurner":[239],"IProtocolFeeController":[857],"IProtocolFeeSweeper":[352]},"id":353,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":241,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":243,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":353,"sourceUnit":6384,"src":"72:72:4","symbolAliases":[{"foreign":{"id":242,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"81:6:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"../vault/IProtocolFeeController.sol","id":245,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":353,"sourceUnit":858,"src":"146:77:4","symbolAliases":[{"foreign":{"id":244,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"155:22:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol","file":"./IProtocolFeeBurner.sol","id":247,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":353,"sourceUnit":240,"src":"224:62:4","symbolAliases":[{"foreign":{"id":246,"name":"IProtocolFeeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"233:18:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IProtocolFeeSweeper","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":352,"linearizedBaseContracts":[352],"name":"IProtocolFeeSweeper","nameLocation":"298:19:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":248,"nodeType":"StructuredDocumentation","src":"324:143:4","text":" @notice Emitted when the target token is set or updated.\n @param token The preferred token for receiving protocol fees"},"eventSelector":"873950c2ac59c570001b99d815ffb260542df229d07132922e2e6f9941fd3da6","id":253,"name":"TargetTokenSet","nameLocation":"478:14:4","nodeType":"EventDefinition","parameters":{"id":252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"508:5:4","nodeType":"VariableDeclaration","scope":253,"src":"493:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":250,"nodeType":"UserDefinedTypeName","pathNode":{"id":249,"name":"IERC20","nameLocations":["493:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"493:6:4"},"referencedDeclaration":6383,"src":"493:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"492:22:4"},"src":"472:43:4"},{"anonymous":false,"documentation":{"id":254,"nodeType":"StructuredDocumentation","src":"521:160:4","text":" @notice Emitted when the fee recipient address is set or updated.\n @param feeRecipient The final destination of collected protocol fees"},"eventSelector":"bf9a9534339a9d6b81696e05dcfb614b7dc518a31d48be3cfb757988381fb323","id":258,"name":"FeeRecipientSet","nameLocation":"692:15:4","nodeType":"EventDefinition","parameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":256,"indexed":true,"mutability":"mutable","name":"feeRecipient","nameLocation":"724:12:4","nodeType":"VariableDeclaration","scope":258,"src":"708:28:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"708:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"707:30:4"},"src":"686:52:4"},{"anonymous":false,"documentation":{"id":259,"nodeType":"StructuredDocumentation","src":"744:206:4","text":" @notice Emitted when the protocol fee burner contract is set or updated.\n @param protocolFeeBurner The contract used to \"burn\" protocol fees (i.e., convert them to the target token)"},"eventSelector":"6dd63e026b620e01b87e78897f638f7a04877f832707e6a0ee9818ac02d51b51","id":263,"name":"ProtocolFeeBurnerSet","nameLocation":"961:20:4","nodeType":"EventDefinition","parameters":{"id":262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":261,"indexed":true,"mutability":"mutable","name":"protocolFeeBurner","nameLocation":"998:17:4","nodeType":"VariableDeclaration","scope":263,"src":"982:33:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":260,"name":"address","nodeType":"ElementaryTypeName","src":"982:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"981:35:4"},"src":"955:62:4"},{"anonymous":false,"documentation":{"id":264,"nodeType":"StructuredDocumentation","src":"1023:501:4","text":" @notice Emitted when a fee token is transferred directly, vs. calling the burner.\n @dev This can happen if no target token or burner contract was specified, or the fee token is the target token.\n @param pool The pool on which the fee was collected\n @param feeToken The token the fee was collected in (also the target token in this case; no swap necessary)\n @param feeTokenAmount The number of feeTokens\n @param recipient The recipient of the fee tokens"},"eventSelector":"d6b9382ec1786c32610e376e8ee8f2f16abeda4ace3b6276ac958193c75bbbc8","id":275,"name":"ProtocolFeeSwept","nameLocation":"1535:16:4","nodeType":"EventDefinition","parameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":266,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1568:4:4","nodeType":"VariableDeclaration","scope":275,"src":"1552:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":265,"name":"address","nodeType":"ElementaryTypeName","src":"1552:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":269,"indexed":true,"mutability":"mutable","name":"feeToken","nameLocation":"1589:8:4","nodeType":"VariableDeclaration","scope":275,"src":"1574:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":268,"nodeType":"UserDefinedTypeName","pathNode":{"id":267,"name":"IERC20","nameLocations":["1574:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"1574:6:4"},"referencedDeclaration":6383,"src":"1574:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":271,"indexed":false,"mutability":"mutable","name":"feeTokenAmount","nameLocation":"1607:14:4","nodeType":"VariableDeclaration","scope":275,"src":"1599:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":270,"name":"uint256","nodeType":"ElementaryTypeName","src":"1599:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":273,"indexed":false,"mutability":"mutable","name":"recipient","nameLocation":"1631:9:4","nodeType":"VariableDeclaration","scope":275,"src":"1623:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":272,"name":"address","nodeType":"ElementaryTypeName","src":"1623:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1551:90:4"},"src":"1529:113:4"},{"documentation":{"id":276,"nodeType":"StructuredDocumentation","src":"1648:41:4","text":"@notice The fee recipient is invalid."},"errorSelector":"768dc598","id":278,"name":"InvalidFeeRecipient","nameLocation":"1700:19:4","nodeType":"ErrorDefinition","parameters":{"id":277,"nodeType":"ParameterList","parameters":[],"src":"1719:2:4"},"src":"1694:28:4"},{"documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"1728:40:4","text":"@notice The target token is invalid."},"errorSelector":"8562eb45","id":281,"name":"InvalidTargetToken","nameLocation":"1779:18:4","nodeType":"ErrorDefinition","parameters":{"id":280,"nodeType":"ParameterList","parameters":[],"src":"1797:2:4"},"src":"1773:27:4"},{"documentation":{"id":282,"nodeType":"StructuredDocumentation","src":"1806:879:4","text":" @notice Withdraw, convert, and forward protocol fees for a given pool and token.\n @dev This will withdraw the fee token from the controller to this contract, and attempt to convert and forward\n the proceeds to the fee recipient. Note that this requires governance to grant this contract permission to call\n `withdrawProtocolFeesForToken` on the `ProtocolFeeController`. Since the general idea is to sweep when the token\n value crosses a certain threshold, we expect that this might be the most commonly used sweeping function.\n This is a permissioned call, since it involves a swap and a permissionless sweep could be triggered at times\n disadvantageous to the protocol (e.g., flash crashes).\n @param pool The pool that incurred the fees we're withdrawing\n @param feeToken The fee token in the pool"},"functionSelector":"c414dbd4","id":290,"implemented":false,"kind":"function","modifiers":[],"name":"sweepProtocolFeesForToken","nameLocation":"2699:25:4","nodeType":"FunctionDefinition","parameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":284,"mutability":"mutable","name":"pool","nameLocation":"2733:4:4","nodeType":"VariableDeclaration","scope":290,"src":"2725:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":283,"name":"address","nodeType":"ElementaryTypeName","src":"2725:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":287,"mutability":"mutable","name":"feeToken","nameLocation":"2746:8:4","nodeType":"VariableDeclaration","scope":290,"src":"2739:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":286,"nodeType":"UserDefinedTypeName","pathNode":{"id":285,"name":"IERC20","nameLocations":["2739:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2739:6:4"},"referencedDeclaration":6383,"src":"2739:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"2724:31:4"},"returnParameters":{"id":289,"nodeType":"ParameterList","parameters":[],"src":"2764:0:4"},"scope":352,"src":"2690:75:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":291,"nodeType":"StructuredDocumentation","src":"2771:650:4","text":" @notice Withdraw, convert, and forward protocol fees for a given pool.\n @dev This will withdraw all fee tokens from the controller to this contract, and attempt to convert and forward\n the proceeds to the fee recipient. Note that this requires governance to grant this contract permission to call\n `withdrawProtocolFees` on the `ProtocolFeeController`.\n This is a permissioned call, since it involves a swap and a permissionless sweep could be triggered at times\n disadvantageous to the protocol (e.g., flash crashes).\n @param pool The pool that incurred the fees we're withdrawing"},"functionSelector":"5884e804","id":296,"implemented":false,"kind":"function","modifiers":[],"name":"sweepProtocolFees","nameLocation":"3435:17:4","nodeType":"FunctionDefinition","parameters":{"id":294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":293,"mutability":"mutable","name":"pool","nameLocation":"3461:4:4","nodeType":"VariableDeclaration","scope":296,"src":"3453:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"3453:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3452:14:4"},"returnParameters":{"id":295,"nodeType":"ParameterList","parameters":[],"src":"3475:0:4"},"scope":352,"src":"3426:50:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":297,"nodeType":"StructuredDocumentation","src":"3482:269:4","text":" @notice Return the address of the current `ProtocolFeeController` from the Vault.\n @dev It is not immutable in the Vault, so we need to fetch it every time.\n @return protocolFeeController The address of the current `ProtocolFeeController`"},"functionSelector":"85f2dbd4","id":303,"implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeeController","nameLocation":"3765:24:4","nodeType":"FunctionDefinition","parameters":{"id":298,"nodeType":"ParameterList","parameters":[],"src":"3789:2:4"},"returnParameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":303,"src":"3815:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"},"typeName":{"id":300,"nodeType":"UserDefinedTypeName","pathNode":{"id":299,"name":"IProtocolFeeController","nameLocations":["3815:22:4"],"nodeType":"IdentifierPath","referencedDeclaration":857,"src":"3815:22:4"},"referencedDeclaration":857,"src":"3815:22:4","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"src":"3814:24:4"},"scope":352,"src":"3756:83:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":304,"nodeType":"StructuredDocumentation","src":"3845:214:4","text":" @notice Getter for the target token.\n @dev This is the token the burner will swap all fee tokens for. Can be changed by `setTargetToken`.\n @return targetToken The current target token"},"functionSelector":"80db0d51","id":310,"implemented":false,"kind":"function","modifiers":[],"name":"getTargetToken","nameLocation":"4073:14:4","nodeType":"FunctionDefinition","parameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"4087:2:4"},"returnParameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":310,"src":"4113:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":307,"nodeType":"UserDefinedTypeName","pathNode":{"id":306,"name":"IERC20","nameLocations":["4113:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"4113:6:4"},"referencedDeclaration":6383,"src":"4113:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"4112:8:4"},"scope":352,"src":"4064:57:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":311,"nodeType":"StructuredDocumentation","src":"4127:167:4","text":" @notice Getter for the current fee recipient.\n @dev Can be changed by `setFeeRecipient`.\n @return feeRecipient The current fee recipient"},"functionSelector":"4ccb20c0","id":316,"implemented":false,"kind":"function","modifiers":[],"name":"getFeeRecipient","nameLocation":"4308:15:4","nodeType":"FunctionDefinition","parameters":{"id":312,"nodeType":"ParameterList","parameters":[],"src":"4323:2:4"},"returnParameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":316,"src":"4349:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":313,"name":"address","nodeType":"ElementaryTypeName","src":"4349:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4348:9:4"},"scope":352,"src":"4299:59:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":317,"nodeType":"StructuredDocumentation","src":"4364:198:4","text":" @notice Getter for the current protocol fee burner.\n @dev Can be changed by `setProtocolFeeBurner`.\n @return protocolFeeBurner The currently active protocol fee burner"},"functionSelector":"55f90510","id":323,"implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeeBurner","nameLocation":"4576:20:4","nodeType":"FunctionDefinition","parameters":{"id":318,"nodeType":"ParameterList","parameters":[],"src":"4596:2:4"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":323,"src":"4622:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"},"typeName":{"id":320,"nodeType":"UserDefinedTypeName","pathNode":{"id":319,"name":"IProtocolFeeBurner","nameLocations":["4622:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":239,"src":"4622:18:4"},"referencedDeclaration":239,"src":"4622:18:4","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"visibility":"internal"}],"src":"4621:20:4"},"scope":352,"src":"4567:75:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":324,"nodeType":"StructuredDocumentation","src":"4648:169:4","text":" @notice Update the fee recipient address.\n @dev This is a permissioned function.\n @param feeRecipient The address of the new fee recipient"},"functionSelector":"e74b981b","id":329,"implemented":false,"kind":"function","modifiers":[],"name":"setFeeRecipient","nameLocation":"4831:15:4","nodeType":"FunctionDefinition","parameters":{"id":327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":326,"mutability":"mutable","name":"feeRecipient","nameLocation":"4855:12:4","nodeType":"VariableDeclaration","scope":329,"src":"4847:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":325,"name":"address","nodeType":"ElementaryTypeName","src":"4847:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4846:22:4"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[],"src":"4877:0:4"},"scope":352,"src":"4822:56:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"4884:532:4","text":" @notice Update the address of the protocol fee burner, used to convert protocol fees to a target token.\n @dev This is a permissioned function. If it is not set, the contract will fall back to forwarding all fee tokens\n directly to the fee recipient. Note that if this function is called, `setTargetToken` must be called as well,\n or any sweep operations using the burner will revert with `InvalidTargetToken`.\n @param protocolFeeBurner The address of the current protocol fee burner"},"functionSelector":"e651a319","id":336,"implemented":false,"kind":"function","modifiers":[],"name":"setProtocolFeeBurner","nameLocation":"5430:20:4","nodeType":"FunctionDefinition","parameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":333,"mutability":"mutable","name":"protocolFeeBurner","nameLocation":"5470:17:4","nodeType":"VariableDeclaration","scope":336,"src":"5451:36:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"},"typeName":{"id":332,"nodeType":"UserDefinedTypeName","pathNode":{"id":331,"name":"IProtocolFeeBurner","nameLocations":["5451:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":239,"src":"5451:18:4"},"referencedDeclaration":239,"src":"5451:18:4","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"visibility":"internal"}],"src":"5450:38:4"},"returnParameters":{"id":335,"nodeType":"ParameterList","parameters":[],"src":"5497:0:4"},"scope":352,"src":"5421:77:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":337,"nodeType":"StructuredDocumentation","src":"5504:222:4","text":" @notice Update the address of the target token.\n @dev This is the token for which the burner will attempt to swap all collected fee tokens.\n @param targetToken The address of the target token"},"functionSelector":"1b66cb00","id":343,"implemented":false,"kind":"function","modifiers":[],"name":"setTargetToken","nameLocation":"5740:14:4","nodeType":"FunctionDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":340,"mutability":"mutable","name":"targetToken","nameLocation":"5762:11:4","nodeType":"VariableDeclaration","scope":343,"src":"5755:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":339,"nodeType":"UserDefinedTypeName","pathNode":{"id":338,"name":"IERC20","nameLocations":["5755:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"5755:6:4"},"referencedDeclaration":6383,"src":"5755:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"5754:20:4"},"returnParameters":{"id":342,"nodeType":"ParameterList","parameters":[],"src":"5783:0:4"},"scope":352,"src":"5731:53:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":344,"nodeType":"StructuredDocumentation","src":"5790:265:4","text":" @notice Retrieve any tokens \"stuck\" in this contract (e.g., dust, or failed conversions).\n @dev It will recover the full balance of all the tokens. This can only be called by the `feeRecipient`.\n @param feeTokens The tokens to recover"},"functionSelector":"b0edcc53","id":351,"implemented":false,"kind":"function","modifiers":[],"name":"recoverProtocolFees","nameLocation":"6069:19:4","nodeType":"FunctionDefinition","parameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"feeTokens","nameLocation":"6105:9:4","nodeType":"VariableDeclaration","scope":351,"src":"6089:25:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":346,"nodeType":"UserDefinedTypeName","pathNode":{"id":345,"name":"IERC20","nameLocations":["6089:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"6089:6:4"},"referencedDeclaration":6383,"src":"6089:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":347,"nodeType":"ArrayTypeName","src":"6089:8:4","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"6088:27:4"},"returnParameters":{"id":350,"nodeType":"ParameterList","parameters":[],"src":"6124:0:4"},"scope":352,"src":"6060:65:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":353,"src":"288:5839:4","usedErrors":[278,281],"usedEvents":[253,258,263,275]}],"src":"46:6082:4"},"id":4},"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","exportedSymbols":{"IAuthorizer":[368]},"id":369,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":354,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IAuthorizer","contractDependencies":[],"contractKind":"interface","documentation":{"id":355,"nodeType":"StructuredDocumentation","src":"72:56:5","text":"@notice Interface to the Vault's permission system."},"fullyImplemented":false,"id":368,"linearizedBaseContracts":[368],"name":"IAuthorizer","nameLocation":"138:11:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":356,"nodeType":"StructuredDocumentation","src":"156:354:5","text":" @notice Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n @param actionId Identifier for the action to be performed\n @param account Account trying to perform the action\n @param where Target contract for the action\n @return success True if the action is permitted"},"functionSelector":"9be2a884","id":367,"implemented":false,"kind":"function","modifiers":[],"name":"canPerform","nameLocation":"524:10:5","nodeType":"FunctionDefinition","parameters":{"id":363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"actionId","nameLocation":"543:8:5","nodeType":"VariableDeclaration","scope":367,"src":"535:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"535:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":360,"mutability":"mutable","name":"account","nameLocation":"561:7:5","nodeType":"VariableDeclaration","scope":367,"src":"553:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":359,"name":"address","nodeType":"ElementaryTypeName","src":"553:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":362,"mutability":"mutable","name":"where","nameLocation":"578:5:5","nodeType":"VariableDeclaration","scope":367,"src":"570:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":361,"name":"address","nodeType":"ElementaryTypeName","src":"570:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"534:50:5"},"returnParameters":{"id":366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":365,"mutability":"mutable","name":"success","nameLocation":"613:7:5","nodeType":"VariableDeclaration","scope":367,"src":"608:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":364,"name":"bool","nodeType":"ElementaryTypeName","src":"608:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"607:14:5"},"scope":368,"src":"515:107:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":369,"src":"128:496:5","usedErrors":[],"usedEvents":[]}],"src":"46:579:5"},"id":5},"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol","exportedSymbols":{"AddLiquidityKind":[3088],"AfterSwapParams":[3082],"HookFlags":[2908],"IHooks":[570],"LiquidityManagement":[2861],"PoolSwapParams":[3053],"RemoveLiquidityKind":[3109],"SwapKind":[3016],"TokenConfig":[2975]},"id":571,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":370,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:6"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":379,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":571,"sourceUnit":3153,"src":"289:193:6","symbolAliases":[{"foreign":{"id":371,"name":"TokenConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"302:11:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":372,"name":"LiquidityManagement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"319:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":373,"name":"PoolSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"344:14:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":374,"name":"AfterSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"364:15:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":375,"name":"HookFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"385:9:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":376,"name":"AddLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"400:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":377,"name":"RemoveLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"422:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":378,"name":"SwapKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"447:8:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IHooks","contractDependencies":[],"contractKind":"interface","documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"484:490:6","text":" @notice Interface for pool hooks.\n @dev Hooks are functions invoked by the Vault at specific points in the flow of each operation. This guarantees that\n they are called in the correct order, and with the correct arguments. To maintain this security, these functions\n should only be called by the Vault. The recommended way to do this is to derive the hook contract from `BaseHooks`,\n then use the `onlyVault` modifier from `VaultGuard`. (See the examples in /pool-hooks.)"},"fullyImplemented":false,"id":570,"linearizedBaseContracts":[570],"name":"IHooks","nameLocation":"985:6:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":381,"nodeType":"StructuredDocumentation","src":"1205:769:6","text":" @notice Hook executed when a pool is registered with a non-zero hooks contract.\n @dev Returns true if registration was successful, and false to revert the pool registration.\n Make sure this function is properly implemented (e.g. check the factory, and check that the\n given pool is from the factory). The Vault address will be msg.sender.\n @param factory Address of the pool factory (contract deploying the pool)\n @param pool Address of the pool\n @param tokenConfig An array of descriptors for the tokens the pool will manage\n @param liquidityManagement Liquidity management flags indicating which functions are enabled\n @return success True if the hook allowed the registration, false otherwise"},"functionSelector":"0b89f182","id":397,"implemented":false,"kind":"function","modifiers":[],"name":"onRegister","nameLocation":"1988:10:6","nodeType":"FunctionDefinition","parameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"factory","nameLocation":"2016:7:6","nodeType":"VariableDeclaration","scope":397,"src":"2008:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":382,"name":"address","nodeType":"ElementaryTypeName","src":"2008:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"pool","nameLocation":"2041:4:6","nodeType":"VariableDeclaration","scope":397,"src":"2033:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":384,"name":"address","nodeType":"ElementaryTypeName","src":"2033:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":389,"mutability":"mutable","name":"tokenConfig","nameLocation":"2076:11:6","nodeType":"VariableDeclaration","scope":397,"src":"2055:32:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2975_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenConfig[]"},"typeName":{"baseType":{"id":387,"nodeType":"UserDefinedTypeName","pathNode":{"id":386,"name":"TokenConfig","nameLocations":["2055:11:6"],"nodeType":"IdentifierPath","referencedDeclaration":2975,"src":"2055:11:6"},"referencedDeclaration":2975,"src":"2055:11:6","typeDescriptions":{"typeIdentifier":"t_struct$_TokenConfig_$2975_storage_ptr","typeString":"struct TokenConfig"}},"id":388,"nodeType":"ArrayTypeName","src":"2055:13:6","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2975_storage_$dyn_storage_ptr","typeString":"struct TokenConfig[]"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"liquidityManagement","nameLocation":"2126:19:6","nodeType":"VariableDeclaration","scope":397,"src":"2097:48:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2861_calldata_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":391,"nodeType":"UserDefinedTypeName","pathNode":{"id":390,"name":"LiquidityManagement","nameLocations":["2097:19:6"],"nodeType":"IdentifierPath","referencedDeclaration":2861,"src":"2097:19:6"},"referencedDeclaration":2861,"src":"2097:19:6","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2861_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"}],"src":"1998:153:6"},"returnParameters":{"id":396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":395,"mutability":"mutable","name":"success","nameLocation":"2175:7:6","nodeType":"VariableDeclaration","scope":397,"src":"2170:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":394,"name":"bool","nodeType":"ElementaryTypeName","src":"2170:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2169:14:6"},"scope":570,"src":"1979:205:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"2190:412:6","text":" @notice Return the set of hooks implemented by the contract.\n @dev The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined\n (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero).\n `onRegister` is the only \"mandatory\" hook.\n @return hookFlags Flags indicating which hooks the contract supports"},"functionSelector":"d77153a7","id":404,"implemented":false,"kind":"function","modifiers":[],"name":"getHookFlags","nameLocation":"2616:12:6","nodeType":"FunctionDefinition","parameters":{"id":399,"nodeType":"ParameterList","parameters":[],"src":"2628:2:6"},"returnParameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"hookFlags","nameLocation":"2671:9:6","nodeType":"VariableDeclaration","scope":404,"src":"2654:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_HookFlags_$2908_memory_ptr","typeString":"struct HookFlags"},"typeName":{"id":401,"nodeType":"UserDefinedTypeName","pathNode":{"id":400,"name":"HookFlags","nameLocations":["2654:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":2908,"src":"2654:9:6"},"referencedDeclaration":2908,"src":"2654:9:6","typeDescriptions":{"typeIdentifier":"t_struct$_HookFlags_$2908_storage_ptr","typeString":"struct HookFlags"}},"visibility":"internal"}],"src":"2653:28:6"},"scope":570,"src":"2607:75:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":405,"nodeType":"StructuredDocumentation","src":"2897:484:6","text":" @notice Hook executed before pool initialization.\n @dev Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param exactAmountsIn Exact amounts of input tokens\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool wishes to proceed with initialization"},"functionSelector":"1c149e28","id":415,"implemented":false,"kind":"function","modifiers":[],"name":"onBeforeInitialize","nameLocation":"3395:18:6","nodeType":"FunctionDefinition","parameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":408,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"3431:14:6","nodeType":"VariableDeclaration","scope":415,"src":"3414:31:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":406,"name":"uint256","nodeType":"ElementaryTypeName","src":"3414:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":407,"nodeType":"ArrayTypeName","src":"3414:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":410,"mutability":"mutable","name":"userData","nameLocation":"3460:8:6","nodeType":"VariableDeclaration","scope":415,"src":"3447:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":409,"name":"bytes","nodeType":"ElementaryTypeName","src":"3447:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3413:56:6"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"success","nameLocation":"3493:7:6","nodeType":"VariableDeclaration","scope":415,"src":"3488:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":412,"name":"bool","nodeType":"ElementaryTypeName","src":"3488:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3487:14:6"},"scope":570,"src":"3386:116:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"3508:563:6","text":" @notice Hook to be executed after pool initialization.\n @dev Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param exactAmountsIn Exact amounts of input tokens\n @param bptAmountOut Amount of pool tokens minted during initialization\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool accepts the initialization results"},"functionSelector":"38be241d","id":428,"implemented":false,"kind":"function","modifiers":[],"name":"onAfterInitialize","nameLocation":"4085:17:6","nodeType":"FunctionDefinition","parameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":419,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"4129:14:6","nodeType":"VariableDeclaration","scope":428,"src":"4112:31:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":417,"name":"uint256","nodeType":"ElementaryTypeName","src":"4112:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":418,"nodeType":"ArrayTypeName","src":"4112:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":421,"mutability":"mutable","name":"bptAmountOut","nameLocation":"4161:12:6","nodeType":"VariableDeclaration","scope":428,"src":"4153:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":420,"name":"uint256","nodeType":"ElementaryTypeName","src":"4153:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":423,"mutability":"mutable","name":"userData","nameLocation":"4196:8:6","nodeType":"VariableDeclaration","scope":428,"src":"4183:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":422,"name":"bytes","nodeType":"ElementaryTypeName","src":"4183:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4102:108:6"},"returnParameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"mutability":"mutable","name":"success","nameLocation":"4234:7:6","nodeType":"VariableDeclaration","scope":428,"src":"4229:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":425,"name":"bool","nodeType":"ElementaryTypeName","src":"4229:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4228:14:6"},"scope":570,"src":"4076:167:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":429,"nodeType":"StructuredDocumentation","src":"4461:953:6","text":" @notice Hook to be executed before adding liquidity.\n @dev Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The add liquidity operation type (e.g., proportional, custom)\n @param maxAmountsInScaled18 Maximum amounts of input tokens\n @param minBptAmountOut Minimum amount of output pool tokens\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool wishes to proceed with settlement"},"functionSelector":"45421ec7","id":451,"implemented":false,"kind":"function","modifiers":[],"name":"onBeforeAddLiquidity","nameLocation":"5428:20:6","nodeType":"FunctionDefinition","parameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":431,"mutability":"mutable","name":"router","nameLocation":"5466:6:6","nodeType":"VariableDeclaration","scope":451,"src":"5458:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":430,"name":"address","nodeType":"ElementaryTypeName","src":"5458:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":433,"mutability":"mutable","name":"pool","nameLocation":"5490:4:6","nodeType":"VariableDeclaration","scope":451,"src":"5482:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":432,"name":"address","nodeType":"ElementaryTypeName","src":"5482:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":436,"mutability":"mutable","name":"kind","nameLocation":"5521:4:6","nodeType":"VariableDeclaration","scope":451,"src":"5504:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$3088","typeString":"enum AddLiquidityKind"},"typeName":{"id":435,"nodeType":"UserDefinedTypeName","pathNode":{"id":434,"name":"AddLiquidityKind","nameLocations":["5504:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":3088,"src":"5504:16:6"},"referencedDeclaration":3088,"src":"5504:16:6","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$3088","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"maxAmountsInScaled18","nameLocation":"5552:20:6","nodeType":"VariableDeclaration","scope":451,"src":"5535:37:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":437,"name":"uint256","nodeType":"ElementaryTypeName","src":"5535:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":438,"nodeType":"ArrayTypeName","src":"5535:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":441,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"5590:15:6","nodeType":"VariableDeclaration","scope":451,"src":"5582:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":440,"name":"uint256","nodeType":"ElementaryTypeName","src":"5582:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":444,"mutability":"mutable","name":"balancesScaled18","nameLocation":"5632:16:6","nodeType":"VariableDeclaration","scope":451,"src":"5615:33:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":442,"name":"uint256","nodeType":"ElementaryTypeName","src":"5615:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":443,"nodeType":"ArrayTypeName","src":"5615:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":446,"mutability":"mutable","name":"userData","nameLocation":"5671:8:6","nodeType":"VariableDeclaration","scope":451,"src":"5658:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":445,"name":"bytes","nodeType":"ElementaryTypeName","src":"5658:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5448:237:6"},"returnParameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"mutability":"mutable","name":"success","nameLocation":"5709:7:6","nodeType":"VariableDeclaration","scope":451,"src":"5704:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":448,"name":"bool","nodeType":"ElementaryTypeName","src":"5704:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5703:14:6"},"scope":570,"src":"5419:299:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":452,"nodeType":"StructuredDocumentation","src":"5724:1250:6","text":" @notice Hook to be executed after adding liquidity.\n @dev Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore\n `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The add liquidity operation type (e.g., proportional, custom)\n @param amountsInScaled18 Actual amounts of tokens added, sorted in token registration order\n @param amountsInRaw Actual amounts of tokens added, sorted in token registration order\n @param bptAmountOut Amount of pool tokens minted\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Additional (optional) data provided by the user\n @return success True if the pool wishes to proceed with settlement\n @return hookAdjustedAmountsInRaw New amountsInRaw, potentially modified by the hook"},"functionSelector":"976907cc","id":480,"implemented":false,"kind":"function","modifiers":[],"name":"onAfterAddLiquidity","nameLocation":"6988:19:6","nodeType":"FunctionDefinition","parameters":{"id":473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":454,"mutability":"mutable","name":"router","nameLocation":"7025:6:6","nodeType":"VariableDeclaration","scope":480,"src":"7017:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"7017:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":456,"mutability":"mutable","name":"pool","nameLocation":"7049:4:6","nodeType":"VariableDeclaration","scope":480,"src":"7041:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":455,"name":"address","nodeType":"ElementaryTypeName","src":"7041:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":459,"mutability":"mutable","name":"kind","nameLocation":"7080:4:6","nodeType":"VariableDeclaration","scope":480,"src":"7063:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$3088","typeString":"enum AddLiquidityKind"},"typeName":{"id":458,"nodeType":"UserDefinedTypeName","pathNode":{"id":457,"name":"AddLiquidityKind","nameLocations":["7063:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":3088,"src":"7063:16:6"},"referencedDeclaration":3088,"src":"7063:16:6","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$3088","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":462,"mutability":"mutable","name":"amountsInScaled18","nameLocation":"7111:17:6","nodeType":"VariableDeclaration","scope":480,"src":"7094:34:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":460,"name":"uint256","nodeType":"ElementaryTypeName","src":"7094:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":461,"nodeType":"ArrayTypeName","src":"7094:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":465,"mutability":"mutable","name":"amountsInRaw","nameLocation":"7155:12:6","nodeType":"VariableDeclaration","scope":480,"src":"7138:29:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":463,"name":"uint256","nodeType":"ElementaryTypeName","src":"7138:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":464,"nodeType":"ArrayTypeName","src":"7138:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":467,"mutability":"mutable","name":"bptAmountOut","nameLocation":"7185:12:6","nodeType":"VariableDeclaration","scope":480,"src":"7177:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":466,"name":"uint256","nodeType":"ElementaryTypeName","src":"7177:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":470,"mutability":"mutable","name":"balancesScaled18","nameLocation":"7224:16:6","nodeType":"VariableDeclaration","scope":480,"src":"7207:33:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":468,"name":"uint256","nodeType":"ElementaryTypeName","src":"7207:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":469,"nodeType":"ArrayTypeName","src":"7207:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":472,"mutability":"mutable","name":"userData","nameLocation":"7263:8:6","nodeType":"VariableDeclaration","scope":480,"src":"7250:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":471,"name":"bytes","nodeType":"ElementaryTypeName","src":"7250:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7007:270:6"},"returnParameters":{"id":479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":475,"mutability":"mutable","name":"success","nameLocation":"7301:7:6","nodeType":"VariableDeclaration","scope":480,"src":"7296:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":474,"name":"bool","nodeType":"ElementaryTypeName","src":"7296:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":478,"mutability":"mutable","name":"hookAdjustedAmountsInRaw","nameLocation":"7327:24:6","nodeType":"VariableDeclaration","scope":480,"src":"7310:41:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":476,"name":"uint256","nodeType":"ElementaryTypeName","src":"7310:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":477,"nodeType":"ArrayTypeName","src":"7310:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"7295:57:6"},"scope":570,"src":"6979:374:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":481,"nodeType":"StructuredDocumentation","src":"7572:992:6","text":" @notice Hook to be executed before removing liquidity.\n @dev Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The type of remove liquidity operation (e.g., proportional, custom)\n @param maxBptAmountIn Maximum amount of input pool tokens\n @param minAmountsOutScaled18 Minimum output amounts, sorted in token registration order\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool wishes to proceed with settlement"},"functionSelector":"ba5f9f40","id":503,"implemented":false,"kind":"function","modifiers":[],"name":"onBeforeRemoveLiquidity","nameLocation":"8578:23:6","nodeType":"FunctionDefinition","parameters":{"id":499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":483,"mutability":"mutable","name":"router","nameLocation":"8619:6:6","nodeType":"VariableDeclaration","scope":503,"src":"8611:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":482,"name":"address","nodeType":"ElementaryTypeName","src":"8611:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":485,"mutability":"mutable","name":"pool","nameLocation":"8643:4:6","nodeType":"VariableDeclaration","scope":503,"src":"8635:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":484,"name":"address","nodeType":"ElementaryTypeName","src":"8635:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":488,"mutability":"mutable","name":"kind","nameLocation":"8677:4:6","nodeType":"VariableDeclaration","scope":503,"src":"8657:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$3109","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":487,"nodeType":"UserDefinedTypeName","pathNode":{"id":486,"name":"RemoveLiquidityKind","nameLocations":["8657:19:6"],"nodeType":"IdentifierPath","referencedDeclaration":3109,"src":"8657:19:6"},"referencedDeclaration":3109,"src":"8657:19:6","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$3109","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"maxBptAmountIn","nameLocation":"8699:14:6","nodeType":"VariableDeclaration","scope":503,"src":"8691:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":489,"name":"uint256","nodeType":"ElementaryTypeName","src":"8691:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":493,"mutability":"mutable","name":"minAmountsOutScaled18","nameLocation":"8740:21:6","nodeType":"VariableDeclaration","scope":503,"src":"8723:38:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":491,"name":"uint256","nodeType":"ElementaryTypeName","src":"8723:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":492,"nodeType":"ArrayTypeName","src":"8723:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":496,"mutability":"mutable","name":"balancesScaled18","nameLocation":"8788:16:6","nodeType":"VariableDeclaration","scope":503,"src":"8771:33:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":494,"name":"uint256","nodeType":"ElementaryTypeName","src":"8771:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":495,"nodeType":"ArrayTypeName","src":"8771:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":498,"mutability":"mutable","name":"userData","nameLocation":"8827:8:6","nodeType":"VariableDeclaration","scope":503,"src":"8814:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":497,"name":"bytes","nodeType":"ElementaryTypeName","src":"8814:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8601:240:6"},"returnParameters":{"id":502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"mutability":"mutable","name":"success","nameLocation":"8865:7:6","nodeType":"VariableDeclaration","scope":503,"src":"8860:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":500,"name":"bool","nodeType":"ElementaryTypeName","src":"8860:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8859:14:6"},"scope":570,"src":"8569:305:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"8880:1276:6","text":" @notice Hook to be executed after removing liquidity.\n @dev Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore\n `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The type of remove liquidity operation (e.g., proportional, custom)\n @param bptAmountIn Amount of pool tokens to burn\n @param amountsOutScaled18 Scaled amount of tokens to receive, sorted in token registration order\n @param amountsOutRaw Actual amount of tokens to receive, sorted in token registration order\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Additional (optional) data provided by the user\n @return success True if the pool wishes to proceed with settlement\n @return hookAdjustedAmountsOutRaw New amountsOutRaw, potentially modified by the hook"},"functionSelector":"2754888d","id":532,"implemented":false,"kind":"function","modifiers":[],"name":"onAfterRemoveLiquidity","nameLocation":"10170:22:6","nodeType":"FunctionDefinition","parameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"router","nameLocation":"10210:6:6","nodeType":"VariableDeclaration","scope":532,"src":"10202:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":505,"name":"address","nodeType":"ElementaryTypeName","src":"10202:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"pool","nameLocation":"10234:4:6","nodeType":"VariableDeclaration","scope":532,"src":"10226:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":507,"name":"address","nodeType":"ElementaryTypeName","src":"10226:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":511,"mutability":"mutable","name":"kind","nameLocation":"10268:4:6","nodeType":"VariableDeclaration","scope":532,"src":"10248:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$3109","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":510,"nodeType":"UserDefinedTypeName","pathNode":{"id":509,"name":"RemoveLiquidityKind","nameLocations":["10248:19:6"],"nodeType":"IdentifierPath","referencedDeclaration":3109,"src":"10248:19:6"},"referencedDeclaration":3109,"src":"10248:19:6","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$3109","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":513,"mutability":"mutable","name":"bptAmountIn","nameLocation":"10290:11:6","nodeType":"VariableDeclaration","scope":532,"src":"10282:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":512,"name":"uint256","nodeType":"ElementaryTypeName","src":"10282:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":516,"mutability":"mutable","name":"amountsOutScaled18","nameLocation":"10328:18:6","nodeType":"VariableDeclaration","scope":532,"src":"10311:35:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":514,"name":"uint256","nodeType":"ElementaryTypeName","src":"10311:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":515,"nodeType":"ArrayTypeName","src":"10311:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":519,"mutability":"mutable","name":"amountsOutRaw","nameLocation":"10373:13:6","nodeType":"VariableDeclaration","scope":532,"src":"10356:30:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":517,"name":"uint256","nodeType":"ElementaryTypeName","src":"10356:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":518,"nodeType":"ArrayTypeName","src":"10356:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":522,"mutability":"mutable","name":"balancesScaled18","nameLocation":"10413:16:6","nodeType":"VariableDeclaration","scope":532,"src":"10396:33:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":520,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":521,"nodeType":"ArrayTypeName","src":"10396:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":524,"mutability":"mutable","name":"userData","nameLocation":"10452:8:6","nodeType":"VariableDeclaration","scope":532,"src":"10439:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":523,"name":"bytes","nodeType":"ElementaryTypeName","src":"10439:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10192:274:6"},"returnParameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":527,"mutability":"mutable","name":"success","nameLocation":"10490:7:6","nodeType":"VariableDeclaration","scope":532,"src":"10485:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":526,"name":"bool","nodeType":"ElementaryTypeName","src":"10485:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"hookAdjustedAmountsOutRaw","nameLocation":"10516:25:6","nodeType":"VariableDeclaration","scope":532,"src":"10499:42:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":528,"name":"uint256","nodeType":"ElementaryTypeName","src":"10499:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":529,"nodeType":"ArrayTypeName","src":"10499:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10484:58:6"},"scope":570,"src":"10161:382:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":533,"nodeType":"StructuredDocumentation","src":"10753:556:6","text":" @notice Called before a swap to give the Pool an opportunity to perform actions.\n @dev Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the\n `onlyVault` modifier to guarantee this is only called by the Vault.\n @param params Swap parameters (see PoolSwapParams for struct definition)\n @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n @return success True if the pool wishes to proceed with settlement"},"functionSelector":"5211fa77","id":543,"implemented":false,"kind":"function","modifiers":[],"name":"onBeforeSwap","nameLocation":"11323:12:6","nodeType":"FunctionDefinition","parameters":{"id":539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":536,"mutability":"mutable","name":"params","nameLocation":"11360:6:6","nodeType":"VariableDeclaration","scope":543,"src":"11336:30:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$3053_calldata_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":535,"nodeType":"UserDefinedTypeName","pathNode":{"id":534,"name":"PoolSwapParams","nameLocations":["11336:14:6"],"nodeType":"IdentifierPath","referencedDeclaration":3053,"src":"11336:14:6"},"referencedDeclaration":3053,"src":"11336:14:6","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$3053_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"},{"constant":false,"id":538,"mutability":"mutable","name":"pool","nameLocation":"11376:4:6","nodeType":"VariableDeclaration","scope":543,"src":"11368:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":537,"name":"address","nodeType":"ElementaryTypeName","src":"11368:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11335:46:6"},"returnParameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"mutability":"mutable","name":"success","nameLocation":"11405:7:6","nodeType":"VariableDeclaration","scope":543,"src":"11400:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":540,"name":"bool","nodeType":"ElementaryTypeName","src":"11400:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11399:14:6"},"scope":570,"src":"11314:100:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":544,"nodeType":"StructuredDocumentation","src":"11420:671:6","text":" @notice Called after a swap to perform further actions once the balances have been updated by the swap.\n @dev Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore\n `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should\n use the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param params Swap parameters (see above for struct definition)\n @return success True if the pool wishes to proceed with settlement\n @return hookAdjustedAmountCalculatedRaw New amount calculated, potentially modified by the hook"},"functionSelector":"18b6eb55","id":554,"implemented":false,"kind":"function","modifiers":[],"name":"onAfterSwap","nameLocation":"12105:11:6","nodeType":"FunctionDefinition","parameters":{"id":548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":547,"mutability":"mutable","name":"params","nameLocation":"12151:6:6","nodeType":"VariableDeclaration","scope":554,"src":"12126:31:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AfterSwapParams_$3082_calldata_ptr","typeString":"struct AfterSwapParams"},"typeName":{"id":546,"nodeType":"UserDefinedTypeName","pathNode":{"id":545,"name":"AfterSwapParams","nameLocations":["12126:15:6"],"nodeType":"IdentifierPath","referencedDeclaration":3082,"src":"12126:15:6"},"referencedDeclaration":3082,"src":"12126:15:6","typeDescriptions":{"typeIdentifier":"t_struct$_AfterSwapParams_$3082_storage_ptr","typeString":"struct AfterSwapParams"}},"visibility":"internal"}],"src":"12116:47:6"},"returnParameters":{"id":553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":550,"mutability":"mutable","name":"success","nameLocation":"12187:7:6","nodeType":"VariableDeclaration","scope":554,"src":"12182:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":549,"name":"bool","nodeType":"ElementaryTypeName","src":"12182:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":552,"mutability":"mutable","name":"hookAdjustedAmountCalculatedRaw","nameLocation":"12204:31:6","nodeType":"VariableDeclaration","scope":554,"src":"12196:39:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":551,"name":"uint256","nodeType":"ElementaryTypeName","src":"12196:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12181:55:6"},"scope":570,"src":"12096:141:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":555,"nodeType":"StructuredDocumentation","src":"12243:795:6","text":" @notice Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees.\n @dev Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param params Swap parameters (see PoolSwapParams for struct definition)\n @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n @param staticSwapFeePercentage 18-decimal FP value of the static swap fee percentage, for reference\n @return success True if the pool wishes to proceed with settlement\n @return dynamicSwapFeePercentage Value of the swap fee percentage, as an 18-decimal FP value"},"functionSelector":"a0e8f5ac","id":569,"implemented":false,"kind":"function","modifiers":[],"name":"onComputeDynamicSwapFeePercentage","nameLocation":"13052:33:6","nodeType":"FunctionDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":558,"mutability":"mutable","name":"params","nameLocation":"13119:6:6","nodeType":"VariableDeclaration","scope":569,"src":"13095:30:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$3053_calldata_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":557,"nodeType":"UserDefinedTypeName","pathNode":{"id":556,"name":"PoolSwapParams","nameLocations":["13095:14:6"],"nodeType":"IdentifierPath","referencedDeclaration":3053,"src":"13095:14:6"},"referencedDeclaration":3053,"src":"13095:14:6","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$3053_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"},{"constant":false,"id":560,"mutability":"mutable","name":"pool","nameLocation":"13143:4:6","nodeType":"VariableDeclaration","scope":569,"src":"13135:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":559,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":562,"mutability":"mutable","name":"staticSwapFeePercentage","nameLocation":"13165:23:6","nodeType":"VariableDeclaration","scope":569,"src":"13157:31:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":561,"name":"uint256","nodeType":"ElementaryTypeName","src":"13157:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13085:109:6"},"returnParameters":{"id":568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"success","nameLocation":"13223:7:6","nodeType":"VariableDeclaration","scope":569,"src":"13218:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":564,"name":"bool","nodeType":"ElementaryTypeName","src":"13218:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":567,"mutability":"mutable","name":"dynamicSwapFeePercentage","nameLocation":"13240:24:6","nodeType":"VariableDeclaration","scope":569,"src":"13232:32:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":566,"name":"uint256","nodeType":"ElementaryTypeName","src":"13232:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13217:48:6"},"scope":570,"src":"13043:223:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":571,"src":"975:12293:6","usedErrors":[],"usedEvents":[]}],"src":"46:13223:6"},"id":6},"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","exportedSymbols":{"IERC20":[6383],"IProtocolFeeController":[857],"IVault":[1392]},"id":858,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":572,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:7"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":574,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":858,"sourceUnit":6384,"src":"72:72:7","symbolAliases":[{"foreign":{"id":573,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"81:6:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"./IVault.sol","id":576,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":858,"sourceUnit":1393,"src":"146:38:7","symbolAliases":[{"foreign":{"id":575,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"155:6:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IProtocolFeeController","contractDependencies":[],"contractKind":"interface","documentation":{"id":577,"nodeType":"StructuredDocumentation","src":"186:80:7","text":"@notice Contract that handles protocol and pool creator fees for the Vault."},"fullyImplemented":false,"id":857,"linearizedBaseContracts":[857],"name":"IProtocolFeeController","nameLocation":"276:22:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":578,"nodeType":"StructuredDocumentation","src":"305:157:7","text":" @notice Emitted when the protocol swap fee percentage is updated.\n @param swapFeePercentage The updated protocol swap fee percentage"},"eventSelector":"bf5ac0fc89bbf8819be79f280146b65ea2af2a9705cd9cfe0c9d93f6e87f307d","id":582,"name":"GlobalProtocolSwapFeePercentageChanged","nameLocation":"473:38:7","nodeType":"EventDefinition","parameters":{"id":581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":580,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"520:17:7","nodeType":"VariableDeclaration","scope":582,"src":"512:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":579,"name":"uint256","nodeType":"ElementaryTypeName","src":"512:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"511:27:7"},"src":"467:72:7"},{"anonymous":false,"documentation":{"id":583,"nodeType":"StructuredDocumentation","src":"545:160:7","text":" @notice Emitted when the protocol yield fee percentage is updated.\n @param yieldFeePercentage The updated protocol yield fee percentage"},"eventSelector":"48c5c3ccec54c4e0ea08d83d838fa9bb725eb0b52c591cb00bd6e63bca8c44f6","id":587,"name":"GlobalProtocolYieldFeePercentageChanged","nameLocation":"716:39:7","nodeType":"EventDefinition","parameters":{"id":586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":585,"indexed":false,"mutability":"mutable","name":"yieldFeePercentage","nameLocation":"764:18:7","nodeType":"VariableDeclaration","scope":587,"src":"756:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":584,"name":"uint256","nodeType":"ElementaryTypeName","src":"756:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"755:28:7"},"src":"710:74:7"},{"anonymous":false,"documentation":{"id":588,"nodeType":"StructuredDocumentation","src":"790:245:7","text":" @notice Emitted when the protocol swap fee percentage is updated for a specific pool.\n @param pool The pool whose protocol swap fee will be changed\n @param swapFeePercentage The updated protocol swap fee percentage"},"eventSelector":"97cff4b6e6d80e307faab8b730d9f69264e860f2e0e10cfb8cdaf8a2f44e839e","id":594,"name":"ProtocolSwapFeePercentageChanged","nameLocation":"1046:32:7","nodeType":"EventDefinition","parameters":{"id":593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":590,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1095:4:7","nodeType":"VariableDeclaration","scope":594,"src":"1079:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":589,"name":"address","nodeType":"ElementaryTypeName","src":"1079:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":592,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"1109:17:7","nodeType":"VariableDeclaration","scope":594,"src":"1101:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":591,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1078:49:7"},"src":"1040:88:7"},{"anonymous":false,"documentation":{"id":595,"nodeType":"StructuredDocumentation","src":"1134:249:7","text":" @notice Emitted when the protocol yield fee percentage is updated for a specific pool.\n @param pool The pool whose protocol yield fee will be changed\n @param yieldFeePercentage The updated protocol yield fee percentage"},"eventSelector":"af47449d1c3597ccc9f5ec3acad03cef57aa90a719000441b320687087948efd","id":601,"name":"ProtocolYieldFeePercentageChanged","nameLocation":"1394:33:7","nodeType":"EventDefinition","parameters":{"id":600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1444:4:7","nodeType":"VariableDeclaration","scope":601,"src":"1428:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":596,"name":"address","nodeType":"ElementaryTypeName","src":"1428:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":599,"indexed":false,"mutability":"mutable","name":"yieldFeePercentage","nameLocation":"1458:18:7","nodeType":"VariableDeclaration","scope":601,"src":"1450:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":598,"name":"uint256","nodeType":"ElementaryTypeName","src":"1450:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1427:50:7"},"src":"1388:90:7"},{"anonymous":false,"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"1484:267:7","text":" @notice Emitted when the pool creator swap fee percentage of a pool is updated.\n @param pool The pool whose pool creator swap fee will be changed\n @param poolCreatorSwapFeePercentage The new pool creator swap fee percentage for the pool"},"eventSelector":"b7cf36369623c01ed7b2eafc4025224e924a2836d5fb49428a0f65417586bf5c","id":608,"name":"PoolCreatorSwapFeePercentageChanged","nameLocation":"1762:35:7","nodeType":"EventDefinition","parameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1814:4:7","nodeType":"VariableDeclaration","scope":608,"src":"1798:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":603,"name":"address","nodeType":"ElementaryTypeName","src":"1798:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":606,"indexed":false,"mutability":"mutable","name":"poolCreatorSwapFeePercentage","nameLocation":"1828:28:7","nodeType":"VariableDeclaration","scope":608,"src":"1820:36:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":605,"name":"uint256","nodeType":"ElementaryTypeName","src":"1820:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1797:60:7"},"src":"1756:102:7"},{"anonymous":false,"documentation":{"id":609,"nodeType":"StructuredDocumentation","src":"1864:271:7","text":" @notice Emitted when the pool creator yield fee percentage of a pool is updated.\n @param pool The pool whose pool creator yield fee will be changed\n @param poolCreatorYieldFeePercentage The new pool creator yield fee percentage for the pool"},"eventSelector":"47f70ddbc624c299cef7841aaea0a86b677c800203e953104e958c9ec9bdab34","id":615,"name":"PoolCreatorYieldFeePercentageChanged","nameLocation":"2146:36:7","nodeType":"EventDefinition","parameters":{"id":614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":611,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"2199:4:7","nodeType":"VariableDeclaration","scope":615,"src":"2183:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":610,"name":"address","nodeType":"ElementaryTypeName","src":"2183:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":613,"indexed":false,"mutability":"mutable","name":"poolCreatorYieldFeePercentage","nameLocation":"2213:29:7","nodeType":"VariableDeclaration","scope":615,"src":"2205:37:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":612,"name":"uint256","nodeType":"ElementaryTypeName","src":"2205:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:61:7"},"src":"2140:104:7"},{"anonymous":false,"documentation":{"id":616,"nodeType":"StructuredDocumentation","src":"2250:560:7","text":" @notice Logs the collection of protocol swap fees in a specific token and amount.\n @dev Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs\n in the Vault, but fee collection happens in the ProtocolFeeController, the swap fees reported here may encompass\n multiple operations.\n @param pool The pool on which the swap fee was charged\n @param token The token in which the swap fee was charged\n @param amount The amount of the token collected in fees"},"eventSelector":"ae7ebad9fc3d1d17965f063fa520d393595e2ef6c8e22ae8413b60900444e19f","id":625,"name":"ProtocolSwapFeeCollected","nameLocation":"2821:24:7","nodeType":"EventDefinition","parameters":{"id":624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":618,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"2862:4:7","nodeType":"VariableDeclaration","scope":625,"src":"2846:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":617,"name":"address","nodeType":"ElementaryTypeName","src":"2846:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":621,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"2883:5:7","nodeType":"VariableDeclaration","scope":625,"src":"2868:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":620,"nodeType":"UserDefinedTypeName","pathNode":{"id":619,"name":"IERC20","nameLocations":["2868:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2868:6:7"},"referencedDeclaration":6383,"src":"2868:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":623,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2898:6:7","nodeType":"VariableDeclaration","scope":625,"src":"2890:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":622,"name":"uint256","nodeType":"ElementaryTypeName","src":"2890:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2845:60:7"},"src":"2815:91:7"},{"anonymous":false,"documentation":{"id":626,"nodeType":"StructuredDocumentation","src":"2912:564:7","text":" @notice Logs the collection of protocol yield fees in a specific token and amount.\n @dev Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs\n in the Vault, but fee collection happens in the ProtocolFeeController, the yield fees reported here may encompass\n multiple operations.\n @param pool The pool on which the yield fee was charged\n @param token The token in which the yield fee was charged\n @param amount The amount of the token collected in fees"},"eventSelector":"e505e41b0d437b47350a9990142ccf38acb11ffa0e5af8f973b9e172f3d5d5e2","id":635,"name":"ProtocolYieldFeeCollected","nameLocation":"3487:25:7","nodeType":"EventDefinition","parameters":{"id":634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"3529:4:7","nodeType":"VariableDeclaration","scope":635,"src":"3513:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":627,"name":"address","nodeType":"ElementaryTypeName","src":"3513:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":631,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3550:5:7","nodeType":"VariableDeclaration","scope":635,"src":"3535:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":630,"nodeType":"UserDefinedTypeName","pathNode":{"id":629,"name":"IERC20","nameLocations":["3535:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"3535:6:7"},"referencedDeclaration":6383,"src":"3535:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":633,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3565:6:7","nodeType":"VariableDeclaration","scope":635,"src":"3557:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":632,"name":"uint256","nodeType":"ElementaryTypeName","src":"3557:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3512:60:7"},"src":"3481:92:7"},{"anonymous":false,"documentation":{"id":636,"nodeType":"StructuredDocumentation","src":"3579:333:7","text":" @notice Logs the withdrawal of protocol fees in a specific token and amount.\n @param pool The pool from which protocol fees are being withdrawn\n @param token The token being withdrawn\n @param recipient The recipient of the funds\n @param amount The amount of the fee token that was withdrawn"},"eventSelector":"1c2887fcb98f75e66bb9a36311f2d3d22fb204e6362106f30e9df7eaf63131b5","id":647,"name":"ProtocolFeesWithdrawn","nameLocation":"3923:21:7","nodeType":"EventDefinition","parameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"3961:4:7","nodeType":"VariableDeclaration","scope":647,"src":"3945:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"3945:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":641,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3982:5:7","nodeType":"VariableDeclaration","scope":647,"src":"3967:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":640,"nodeType":"UserDefinedTypeName","pathNode":{"id":639,"name":"IERC20","nameLocations":["3967:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"3967:6:7"},"referencedDeclaration":6383,"src":"3967:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":643,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4005:9:7","nodeType":"VariableDeclaration","scope":647,"src":"3989:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":642,"name":"address","nodeType":"ElementaryTypeName","src":"3989:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":645,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"4024:6:7","nodeType":"VariableDeclaration","scope":647,"src":"4016:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":644,"name":"uint256","nodeType":"ElementaryTypeName","src":"4016:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3944:87:7"},"src":"3917:115:7"},{"anonymous":false,"documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"4038:398:7","text":" @notice Logs the withdrawal of pool creator fees in a specific token and amount.\n @param pool The pool from which pool creator fees are being withdrawn\n @param token The token being withdrawn\n @param recipient The recipient of the funds (the pool creator if permissionless, or another account)\n @param amount The amount of the fee token that was withdrawn"},"eventSelector":"938f3a3a03ee425ccc0f8010b0468938cbafd3750fa43bbdf09c6f75e97e51f9","id":659,"name":"PoolCreatorFeesWithdrawn","nameLocation":"4447:24:7","nodeType":"EventDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":650,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"4497:4:7","nodeType":"VariableDeclaration","scope":659,"src":"4481:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":649,"name":"address","nodeType":"ElementaryTypeName","src":"4481:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":653,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"4526:5:7","nodeType":"VariableDeclaration","scope":659,"src":"4511:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":652,"nodeType":"UserDefinedTypeName","pathNode":{"id":651,"name":"IERC20","nameLocations":["4511:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"4511:6:7"},"referencedDeclaration":6383,"src":"4511:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":655,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4557:9:7","nodeType":"VariableDeclaration","scope":659,"src":"4541:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"4541:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":657,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"4584:6:7","nodeType":"VariableDeclaration","scope":659,"src":"4576:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":656,"name":"uint256","nodeType":"ElementaryTypeName","src":"4576:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4471:125:7"},"src":"4441:156:7"},{"documentation":{"id":660,"nodeType":"StructuredDocumentation","src":"4603:219:7","text":" @notice Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\n @dev Note that this is checked for both the global and pool-specific protocol swap fee percentages."},"errorSelector":"7e6eb7fb","id":662,"name":"ProtocolSwapFeePercentageTooHigh","nameLocation":"4833:32:7","nodeType":"ErrorDefinition","parameters":{"id":661,"nodeType":"ParameterList","parameters":[],"src":"4865:2:7"},"src":"4827:41:7"},{"documentation":{"id":663,"nodeType":"StructuredDocumentation","src":"4874:221:7","text":" @notice Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\n @dev Note that this is checked for both the global and pool-specific protocol yield fee percentages."},"errorSelector":"a7849e8e","id":665,"name":"ProtocolYieldFeePercentageTooHigh","nameLocation":"5106:33:7","nodeType":"ErrorDefinition","parameters":{"id":664,"nodeType":"ParameterList","parameters":[],"src":"5139:2:7"},"src":"5100:42:7"},{"documentation":{"id":666,"nodeType":"StructuredDocumentation","src":"5148:156:7","text":" @notice Error raised if there is no pool creator on a withdrawal attempt from the given pool.\n @param pool The pool with no creator"},"errorSelector":"8bcbf353","id":670,"name":"PoolCreatorNotRegistered","nameLocation":"5315:24:7","nodeType":"ErrorDefinition","parameters":{"id":669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":668,"mutability":"mutable","name":"pool","nameLocation":"5348:4:7","nodeType":"VariableDeclaration","scope":670,"src":"5340:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":667,"name":"address","nodeType":"ElementaryTypeName","src":"5340:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5339:14:7"},"src":"5309:45:7"},{"documentation":{"id":671,"nodeType":"StructuredDocumentation","src":"5360:236:7","text":" @notice Error raised if the wrong account attempts to withdraw pool creator fees.\n @param caller The account attempting to withdraw pool creator fees\n @param pool The pool the caller tried to withdraw from"},"errorSelector":"fbecdbf4","id":677,"name":"CallerIsNotPoolCreator","nameLocation":"5607:22:7","nodeType":"ErrorDefinition","parameters":{"id":676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":673,"mutability":"mutable","name":"caller","nameLocation":"5638:6:7","nodeType":"VariableDeclaration","scope":677,"src":"5630:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":672,"name":"address","nodeType":"ElementaryTypeName","src":"5630:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":675,"mutability":"mutable","name":"pool","nameLocation":"5654:4:7","nodeType":"VariableDeclaration","scope":677,"src":"5646:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":674,"name":"address","nodeType":"ElementaryTypeName","src":"5646:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5629:30:7"},"src":"5601:59:7"},{"documentation":{"id":678,"nodeType":"StructuredDocumentation","src":"5666:110:7","text":"@notice Error raised when the pool creator swap or yield fee percentage exceeds the maximum allowed value."},"errorSelector":"0370da74","id":680,"name":"PoolCreatorFeePercentageTooHigh","nameLocation":"5787:31:7","nodeType":"ErrorDefinition","parameters":{"id":679,"nodeType":"ParameterList","parameters":[],"src":"5818:2:7"},"src":"5781:40:7"},{"documentation":{"id":681,"nodeType":"StructuredDocumentation","src":"5827:109:7","text":" @notice Get the address of the main Vault contract.\n @return vault The Vault address"},"functionSelector":"fbfa77cf","id":687,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"5950:5:7","nodeType":"FunctionDefinition","parameters":{"id":682,"nodeType":"ParameterList","parameters":[],"src":"5955:2:7"},"returnParameters":{"id":686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":685,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":687,"src":"5981:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"},"typeName":{"id":684,"nodeType":"UserDefinedTypeName","pathNode":{"id":683,"name":"IVault","nameLocations":["5981:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"5981:6:7"},"referencedDeclaration":1392,"src":"5981:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"visibility":"internal"}],"src":"5980:8:7"},"scope":857,"src":"5941:48:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":688,"nodeType":"StructuredDocumentation","src":"5995:131:7","text":" @notice Collects aggregate fees from the Vault for a given pool.\n @param pool The pool with aggregate fees"},"functionSelector":"8f4ab9ca","id":693,"implemented":false,"kind":"function","modifiers":[],"name":"collectAggregateFees","nameLocation":"6140:20:7","nodeType":"FunctionDefinition","parameters":{"id":691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":690,"mutability":"mutable","name":"pool","nameLocation":"6169:4:7","nodeType":"VariableDeclaration","scope":693,"src":"6161:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":689,"name":"address","nodeType":"ElementaryTypeName","src":"6161:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6160:14:7"},"returnParameters":{"id":692,"nodeType":"ParameterList","parameters":[],"src":"6183:0:7"},"scope":857,"src":"6131:53:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":694,"nodeType":"StructuredDocumentation","src":"6190:156:7","text":" @notice Getter for the current global protocol swap fee.\n @return protocolSwapFeePercentage The global protocol swap fee percentage"},"functionSelector":"7869ee18","id":699,"implemented":false,"kind":"function","modifiers":[],"name":"getGlobalProtocolSwapFeePercentage","nameLocation":"6360:34:7","nodeType":"FunctionDefinition","parameters":{"id":695,"nodeType":"ParameterList","parameters":[],"src":"6394:2:7"},"returnParameters":{"id":698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":697,"mutability":"mutable","name":"protocolSwapFeePercentage","nameLocation":"6428:25:7","nodeType":"VariableDeclaration","scope":699,"src":"6420:33:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":696,"name":"uint256","nodeType":"ElementaryTypeName","src":"6420:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6419:35:7"},"scope":857,"src":"6351:104:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":700,"nodeType":"StructuredDocumentation","src":"6461:159:7","text":" @notice Getter for the current global protocol yield fee.\n @return protocolYieldFeePercentage The global protocol yield fee percentage"},"functionSelector":"55fb76af","id":705,"implemented":false,"kind":"function","modifiers":[],"name":"getGlobalProtocolYieldFeePercentage","nameLocation":"6634:35:7","nodeType":"FunctionDefinition","parameters":{"id":701,"nodeType":"ParameterList","parameters":[],"src":"6669:2:7"},"returnParameters":{"id":704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":703,"mutability":"mutable","name":"protocolYieldFeePercentage","nameLocation":"6703:26:7","nodeType":"VariableDeclaration","scope":705,"src":"6695:34:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":702,"name":"uint256","nodeType":"ElementaryTypeName","src":"6695:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6694:36:7"},"scope":857,"src":"6625:106:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":706,"nodeType":"StructuredDocumentation","src":"6737:280:7","text":" @notice Getter for the current protocol swap fee for a given pool.\n @param pool The address of the pool\n @return protocolSwapFeePercentage The global protocol swap fee percentage\n @return isOverride True if the protocol fee has been overridden"},"functionSelector":"5c15a0b4","id":715,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolProtocolSwapFeeInfo","nameLocation":"7031:26:7","nodeType":"FunctionDefinition","parameters":{"id":709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":708,"mutability":"mutable","name":"pool","nameLocation":"7075:4:7","nodeType":"VariableDeclaration","scope":715,"src":"7067:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":707,"name":"address","nodeType":"ElementaryTypeName","src":"7067:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7057:28:7"},"returnParameters":{"id":714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":711,"mutability":"mutable","name":"protocolSwapFeePercentage","nameLocation":"7117:25:7","nodeType":"VariableDeclaration","scope":715,"src":"7109:33:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":710,"name":"uint256","nodeType":"ElementaryTypeName","src":"7109:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":713,"mutability":"mutable","name":"isOverride","nameLocation":"7149:10:7","nodeType":"VariableDeclaration","scope":715,"src":"7144:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":712,"name":"bool","nodeType":"ElementaryTypeName","src":"7144:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7108:52:7"},"scope":857,"src":"7022:139:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"7167:283:7","text":" @notice Getter for the current protocol yield fee for a given pool.\n @param pool The address of the pool\n @return protocolYieldFeePercentage The global protocol yield fee percentage\n @return isOverride True if the protocol fee has been overridden"},"functionSelector":"7a2b97dc","id":725,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolProtocolYieldFeeInfo","nameLocation":"7464:27:7","nodeType":"FunctionDefinition","parameters":{"id":719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":718,"mutability":"mutable","name":"pool","nameLocation":"7509:4:7","nodeType":"VariableDeclaration","scope":725,"src":"7501:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":717,"name":"address","nodeType":"ElementaryTypeName","src":"7501:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7491:28:7"},"returnParameters":{"id":724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":721,"mutability":"mutable","name":"protocolYieldFeePercentage","nameLocation":"7551:26:7","nodeType":"VariableDeclaration","scope":725,"src":"7543:34:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":720,"name":"uint256","nodeType":"ElementaryTypeName","src":"7543:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":723,"mutability":"mutable","name":"isOverride","nameLocation":"7584:10:7","nodeType":"VariableDeclaration","scope":725,"src":"7579:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":722,"name":"bool","nodeType":"ElementaryTypeName","src":"7579:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7542:53:7"},"scope":857,"src":"7455:141:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":726,"nodeType":"StructuredDocumentation","src":"7602:344:7","text":" @notice Returns the amount of each pool token allocated to the protocol for withdrawal.\n @dev Includes both swap and yield fees.\n @param pool The address of the pool on which fees were collected\n @return feeAmounts The total amounts of each token available for withdrawal, sorted in token registration order"},"functionSelector":"8df44c54","id":734,"implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeeAmounts","nameLocation":"7960:21:7","nodeType":"FunctionDefinition","parameters":{"id":729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":728,"mutability":"mutable","name":"pool","nameLocation":"7990:4:7","nodeType":"VariableDeclaration","scope":734,"src":"7982:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":727,"name":"address","nodeType":"ElementaryTypeName","src":"7982:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7981:14:7"},"returnParameters":{"id":733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":732,"mutability":"mutable","name":"feeAmounts","nameLocation":"8036:10:7","nodeType":"VariableDeclaration","scope":734,"src":"8019:27:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":730,"name":"uint256","nodeType":"ElementaryTypeName","src":"8019:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":731,"nodeType":"ArrayTypeName","src":"8019:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"8018:29:7"},"scope":857,"src":"7951:97:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":735,"nodeType":"StructuredDocumentation","src":"8054:348:7","text":" @notice Returns the amount of each pool token allocated to the pool creator for withdrawal.\n @dev Includes both swap and yield fees.\n @param pool The address of the pool on which fees were collected\n @return feeAmounts The total amounts of each token available for withdrawal, sorted in token registration order"},"functionSelector":"9e95f3fd","id":743,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolCreatorFeeAmounts","nameLocation":"8416:24:7","nodeType":"FunctionDefinition","parameters":{"id":738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":737,"mutability":"mutable","name":"pool","nameLocation":"8449:4:7","nodeType":"VariableDeclaration","scope":743,"src":"8441:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":736,"name":"address","nodeType":"ElementaryTypeName","src":"8441:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8440:14:7"},"returnParameters":{"id":742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":741,"mutability":"mutable","name":"feeAmounts","nameLocation":"8495:10:7","nodeType":"VariableDeclaration","scope":743,"src":"8478:27:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":739,"name":"uint256","nodeType":"ElementaryTypeName","src":"8478:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":740,"nodeType":"ArrayTypeName","src":"8478:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"8477:29:7"},"scope":857,"src":"8407:100:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":744,"nodeType":"StructuredDocumentation","src":"8513:1445:7","text":" @notice Returns a calculated aggregate percentage from protocol and pool creator fee percentages.\n @dev Not tied to any particular pool; this just performs the low-level \"additive fee\" calculation. Note that\n pool creator fees are calculated based on creatorAndLpFees, and not in totalFees. Since aggregate fees are\n stored in the Vault with 24-bit precision, this will truncate any values that require greater precision.\n It is expected that pool creators will negotiate with the DAO and agree on reasonable values for these fee\n components, but the truncation ensures it will not revert for any valid set of fee percentages.\n See example below:\n tokenOutAmount = 10000; poolSwapFeePct = 10%; protocolFeePct = 40%; creatorFeePct = 60%\n totalFees = tokenOutAmount * poolSwapFeePct = 10000 * 10% = 1000\n protocolFees = totalFees * protocolFeePct = 1000 * 40% = 400\n creatorAndLpFees = totalFees - protocolFees = 1000 - 400 = 600\n creatorFees = creatorAndLpFees * creatorFeePct = 600 * 60% = 360\n lpFees (will stay in the pool) = creatorAndLpFees - creatorFees = 600 - 360 = 240\n @param protocolFeePercentage The protocol portion of the aggregate fee percentage\n @param poolCreatorFeePercentage The pool creator portion of the aggregate fee percentage\n @return aggregateFeePercentage The computed aggregate percentage"},"functionSelector":"0ddd60c6","id":753,"implemented":false,"kind":"function","modifiers":[],"name":"computeAggregateFeePercentage","nameLocation":"9972:29:7","nodeType":"FunctionDefinition","parameters":{"id":749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":746,"mutability":"mutable","name":"protocolFeePercentage","nameLocation":"10019:21:7","nodeType":"VariableDeclaration","scope":753,"src":"10011:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":745,"name":"uint256","nodeType":"ElementaryTypeName","src":"10011:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":748,"mutability":"mutable","name":"poolCreatorFeePercentage","nameLocation":"10058:24:7","nodeType":"VariableDeclaration","scope":753,"src":"10050:32:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":747,"name":"uint256","nodeType":"ElementaryTypeName","src":"10050:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10001:87:7"},"returnParameters":{"id":752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":751,"mutability":"mutable","name":"aggregateFeePercentage","nameLocation":"10120:22:7","nodeType":"VariableDeclaration","scope":753,"src":"10112:30:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":750,"name":"uint256","nodeType":"ElementaryTypeName","src":"10112:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10111:32:7"},"scope":857,"src":"9963:181:7","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":754,"nodeType":"StructuredDocumentation","src":"10150:398:7","text":" @notice Override the protocol swap fee percentage for a specific pool.\n @dev This is a permissionless call, and will set the pool's fee to the current global fee, if it is different\n from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\n @param pool The pool for which we are setting the protocol swap fee"},"functionSelector":"71ecc8fb","id":759,"implemented":false,"kind":"function","modifiers":[],"name":"updateProtocolSwapFeePercentage","nameLocation":"10562:31:7","nodeType":"FunctionDefinition","parameters":{"id":757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":756,"mutability":"mutable","name":"pool","nameLocation":"10602:4:7","nodeType":"VariableDeclaration","scope":759,"src":"10594:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":755,"name":"address","nodeType":"ElementaryTypeName","src":"10594:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10593:14:7"},"returnParameters":{"id":758,"nodeType":"ParameterList","parameters":[],"src":"10616:0:7"},"scope":857,"src":"10553:64:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":760,"nodeType":"StructuredDocumentation","src":"10623:400:7","text":" @notice Override the protocol yield fee percentage for a specific pool.\n @dev This is a permissionless call, and will set the pool's fee to the current global fee, if it is different\n from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\n @param pool The pool for which we are setting the protocol yield fee"},"functionSelector":"71447ea8","id":765,"implemented":false,"kind":"function","modifiers":[],"name":"updateProtocolYieldFeePercentage","nameLocation":"11037:32:7","nodeType":"FunctionDefinition","parameters":{"id":763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"mutability":"mutable","name":"pool","nameLocation":"11078:4:7","nodeType":"VariableDeclaration","scope":765,"src":"11070:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":761,"name":"address","nodeType":"ElementaryTypeName","src":"11070:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11069:14:7"},"returnParameters":{"id":764,"nodeType":"ParameterList","parameters":[],"src":"11092:0:7"},"scope":857,"src":"11028:65:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":766,"nodeType":"StructuredDocumentation","src":"11317:826:7","text":" @notice Add pool-specific entries to the protocol swap and yield percentages.\n @dev This must be called from the Vault during pool registration. It will initialize the pool to the global\n protocol fee percentage values (or 0, if the `protocolFeeExempt` flags is set), and return the initial aggregate\n fee percentages, based on an initial pool creator fee of 0.\n @param pool The address of the pool being registered\n @param poolCreator The address of the pool creator (or 0 if there won't be a pool creator fee)\n @param protocolFeeExempt If true, the pool is initially exempt from protocol fees\n @return aggregateSwapFeePercentage The initial aggregate swap fee percentage\n @return aggregateYieldFeePercentage The initial aggregate yield fee percentage"},"functionSelector":"77ff76e7","id":779,"implemented":false,"kind":"function","modifiers":[],"name":"registerPool","nameLocation":"12157:12:7","nodeType":"FunctionDefinition","parameters":{"id":773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":768,"mutability":"mutable","name":"pool","nameLocation":"12187:4:7","nodeType":"VariableDeclaration","scope":779,"src":"12179:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":767,"name":"address","nodeType":"ElementaryTypeName","src":"12179:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":770,"mutability":"mutable","name":"poolCreator","nameLocation":"12209:11:7","nodeType":"VariableDeclaration","scope":779,"src":"12201:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"12201:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":772,"mutability":"mutable","name":"protocolFeeExempt","nameLocation":"12235:17:7","nodeType":"VariableDeclaration","scope":779,"src":"12230:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":771,"name":"bool","nodeType":"ElementaryTypeName","src":"12230:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12169:89:7"},"returnParameters":{"id":778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"12285:26:7","nodeType":"VariableDeclaration","scope":779,"src":"12277:34:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":774,"name":"uint256","nodeType":"ElementaryTypeName","src":"12277:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"12321:27:7","nodeType":"VariableDeclaration","scope":779,"src":"12313:35:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"12313:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12276:73:7"},"scope":857,"src":"12148:202:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":780,"nodeType":"StructuredDocumentation","src":"12356:175:7","text":" @notice Set the global protocol swap fee percentage, used by standard pools.\n @param newProtocolSwapFeePercentage The new protocol swap fee percentage"},"functionSelector":"8a3c5c69","id":785,"implemented":false,"kind":"function","modifiers":[],"name":"setGlobalProtocolSwapFeePercentage","nameLocation":"12545:34:7","nodeType":"FunctionDefinition","parameters":{"id":783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":782,"mutability":"mutable","name":"newProtocolSwapFeePercentage","nameLocation":"12588:28:7","nodeType":"VariableDeclaration","scope":785,"src":"12580:36:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":781,"name":"uint256","nodeType":"ElementaryTypeName","src":"12580:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12579:38:7"},"returnParameters":{"id":784,"nodeType":"ParameterList","parameters":[],"src":"12626:0:7"},"scope":857,"src":"12536:91:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":786,"nodeType":"StructuredDocumentation","src":"12633:178:7","text":" @notice Set the global protocol yield fee percentage, used by standard pools.\n @param newProtocolYieldFeePercentage The new protocol yield fee percentage"},"functionSelector":"a93df2a4","id":791,"implemented":false,"kind":"function","modifiers":[],"name":"setGlobalProtocolYieldFeePercentage","nameLocation":"12825:35:7","nodeType":"FunctionDefinition","parameters":{"id":789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":788,"mutability":"mutable","name":"newProtocolYieldFeePercentage","nameLocation":"12869:29:7","nodeType":"VariableDeclaration","scope":791,"src":"12861:37:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":787,"name":"uint256","nodeType":"ElementaryTypeName","src":"12861:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12860:39:7"},"returnParameters":{"id":790,"nodeType":"ParameterList","parameters":[],"src":"12908:0:7"},"scope":857,"src":"12816:93:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":792,"nodeType":"StructuredDocumentation","src":"12915:272:7","text":" @notice Override the protocol swap fee percentage for a specific pool.\n @param pool The address of the pool for which we are setting the protocol swap fee\n @param newProtocolSwapFeePercentage The new protocol swap fee percentage for the pool"},"functionSelector":"fd267f39","id":799,"implemented":false,"kind":"function","modifiers":[],"name":"setProtocolSwapFeePercentage","nameLocation":"13201:28:7","nodeType":"FunctionDefinition","parameters":{"id":797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":794,"mutability":"mutable","name":"pool","nameLocation":"13238:4:7","nodeType":"VariableDeclaration","scope":799,"src":"13230:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":793,"name":"address","nodeType":"ElementaryTypeName","src":"13230:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":796,"mutability":"mutable","name":"newProtocolSwapFeePercentage","nameLocation":"13252:28:7","nodeType":"VariableDeclaration","scope":799,"src":"13244:36:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":795,"name":"uint256","nodeType":"ElementaryTypeName","src":"13244:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13229:52:7"},"returnParameters":{"id":798,"nodeType":"ParameterList","parameters":[],"src":"13290:0:7"},"scope":857,"src":"13192:99:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":800,"nodeType":"StructuredDocumentation","src":"13297:276:7","text":" @notice Override the protocol yield fee percentage for a specific pool.\n @param pool The address of the pool for which we are setting the protocol yield fee\n @param newProtocolYieldFeePercentage The new protocol yield fee percentage for the pool"},"functionSelector":"abaa3356","id":807,"implemented":false,"kind":"function","modifiers":[],"name":"setProtocolYieldFeePercentage","nameLocation":"13587:29:7","nodeType":"FunctionDefinition","parameters":{"id":805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":802,"mutability":"mutable","name":"pool","nameLocation":"13625:4:7","nodeType":"VariableDeclaration","scope":807,"src":"13617:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":801,"name":"address","nodeType":"ElementaryTypeName","src":"13617:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":804,"mutability":"mutable","name":"newProtocolYieldFeePercentage","nameLocation":"13639:29:7","nodeType":"VariableDeclaration","scope":807,"src":"13631:37:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":803,"name":"uint256","nodeType":"ElementaryTypeName","src":"13631:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13616:53:7"},"returnParameters":{"id":806,"nodeType":"ParameterList","parameters":[],"src":"13678:0:7"},"scope":857,"src":"13578:101:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":808,"nodeType":"StructuredDocumentation","src":"13685:623:7","text":" @notice Assigns a new pool creator swap fee percentage to the specified pool.\n @dev Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to\n the \"net\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the\n pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\n @param pool The address of the pool for which the pool creator fee will be changed\n @param poolCreatorSwapFeePercentage The new pool creator swap fee percentage to apply to the pool"},"functionSelector":"1377c16c","id":815,"implemented":false,"kind":"function","modifiers":[],"name":"setPoolCreatorSwapFeePercentage","nameLocation":"14322:31:7","nodeType":"FunctionDefinition","parameters":{"id":813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":810,"mutability":"mutable","name":"pool","nameLocation":"14362:4:7","nodeType":"VariableDeclaration","scope":815,"src":"14354:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":809,"name":"address","nodeType":"ElementaryTypeName","src":"14354:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":812,"mutability":"mutable","name":"poolCreatorSwapFeePercentage","nameLocation":"14376:28:7","nodeType":"VariableDeclaration","scope":815,"src":"14368:36:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":811,"name":"uint256","nodeType":"ElementaryTypeName","src":"14368:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14353:52:7"},"returnParameters":{"id":814,"nodeType":"ParameterList","parameters":[],"src":"14414:0:7"},"scope":857,"src":"14313:102:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":816,"nodeType":"StructuredDocumentation","src":"14421:626:7","text":" @notice Assigns a new pool creator yield fee percentage to the specified pool.\n @dev Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to\n the \"net\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the\n pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\n @param pool The address of the pool for which the pool creator fee will be changed\n @param poolCreatorYieldFeePercentage The new pool creator yield fee percentage to apply to the pool"},"functionSelector":"3af52712","id":823,"implemented":false,"kind":"function","modifiers":[],"name":"setPoolCreatorYieldFeePercentage","nameLocation":"15061:32:7","nodeType":"FunctionDefinition","parameters":{"id":821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":818,"mutability":"mutable","name":"pool","nameLocation":"15102:4:7","nodeType":"VariableDeclaration","scope":823,"src":"15094:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":817,"name":"address","nodeType":"ElementaryTypeName","src":"15094:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":820,"mutability":"mutable","name":"poolCreatorYieldFeePercentage","nameLocation":"15116:29:7","nodeType":"VariableDeclaration","scope":823,"src":"15108:37:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":819,"name":"uint256","nodeType":"ElementaryTypeName","src":"15108:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15093:53:7"},"returnParameters":{"id":822,"nodeType":"ParameterList","parameters":[],"src":"15155:0:7"},"scope":857,"src":"15052:104:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":824,"nodeType":"StructuredDocumentation","src":"15162:296:7","text":" @notice Withdraw collected protocol fees for a given pool (all tokens). This is a permissioned function.\n @dev Sends swap and yield protocol fees to the recipient.\n @param pool The pool on which fees were collected\n @param recipient Address to send the tokens"},"functionSelector":"cf7b287f","id":831,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawProtocolFees","nameLocation":"15472:20:7","nodeType":"FunctionDefinition","parameters":{"id":829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":826,"mutability":"mutable","name":"pool","nameLocation":"15501:4:7","nodeType":"VariableDeclaration","scope":831,"src":"15493:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":825,"name":"address","nodeType":"ElementaryTypeName","src":"15493:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":828,"mutability":"mutable","name":"recipient","nameLocation":"15515:9:7","nodeType":"VariableDeclaration","scope":831,"src":"15507:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":827,"name":"address","nodeType":"ElementaryTypeName","src":"15507:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15492:33:7"},"returnParameters":{"id":830,"nodeType":"ParameterList","parameters":[],"src":"15534:0:7"},"scope":857,"src":"15463:72:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":832,"nodeType":"StructuredDocumentation","src":"15541:339:7","text":" @notice Withdraw collected protocol fees for a given pool and a given token. This is a permissioned function.\n @dev Sends swap and yield protocol fees to the recipient.\n @param pool The pool on which fees were collected\n @param recipient Address to send the tokens\n @param token Token to withdraw"},"functionSelector":"b53a70b2","id":842,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawProtocolFeesForToken","nameLocation":"15894:28:7","nodeType":"FunctionDefinition","parameters":{"id":840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":834,"mutability":"mutable","name":"pool","nameLocation":"15931:4:7","nodeType":"VariableDeclaration","scope":842,"src":"15923:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":833,"name":"address","nodeType":"ElementaryTypeName","src":"15923:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":836,"mutability":"mutable","name":"recipient","nameLocation":"15945:9:7","nodeType":"VariableDeclaration","scope":842,"src":"15937:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":835,"name":"address","nodeType":"ElementaryTypeName","src":"15937:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":839,"mutability":"mutable","name":"token","nameLocation":"15963:5:7","nodeType":"VariableDeclaration","scope":842,"src":"15956:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":838,"nodeType":"UserDefinedTypeName","pathNode":{"id":837,"name":"IERC20","nameLocations":["15956:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"15956:6:7"},"referencedDeclaration":6383,"src":"15956:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"15922:47:7"},"returnParameters":{"id":841,"nodeType":"ParameterList","parameters":[],"src":"15978:0:7"},"scope":857,"src":"15885:94:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":843,"nodeType":"StructuredDocumentation","src":"15985:291:7","text":" @notice Withdraw collected pool creator fees for a given pool. This is a permissioned function.\n @dev Sends swap and yield pool creator fees to the recipient.\n @param pool The pool on which fees were collected\n @param recipient Address to send the tokens"},"functionSelector":"f7061445","id":850,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawPoolCreatorFees","nameLocation":"16290:23:7","nodeType":"FunctionDefinition","parameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":845,"mutability":"mutable","name":"pool","nameLocation":"16322:4:7","nodeType":"VariableDeclaration","scope":850,"src":"16314:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":844,"name":"address","nodeType":"ElementaryTypeName","src":"16314:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":847,"mutability":"mutable","name":"recipient","nameLocation":"16336:9:7","nodeType":"VariableDeclaration","scope":850,"src":"16328:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":846,"name":"address","nodeType":"ElementaryTypeName","src":"16328:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16313:33:7"},"returnParameters":{"id":849,"nodeType":"ParameterList","parameters":[],"src":"16355:0:7"},"scope":857,"src":"16281:75:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":851,"nodeType":"StructuredDocumentation","src":"16362:310:7","text":" @notice Withdraw collected pool creator fees for a given pool.\n @dev Sends swap and yield pool creator fees to the registered poolCreator. Since this is a known and immutable\n value, this function is permissionless.\n @param pool The pool on which fees were collected"},"functionSelector":"52f125f0","id":856,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawPoolCreatorFees","nameLocation":"16686:23:7","nodeType":"FunctionDefinition","parameters":{"id":854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"pool","nameLocation":"16718:4:7","nodeType":"VariableDeclaration","scope":856,"src":"16710:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":852,"name":"address","nodeType":"ElementaryTypeName","src":"16710:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16709:14:7"},"returnParameters":{"id":855,"nodeType":"ParameterList","parameters":[],"src":"16732:0:7"},"scope":857,"src":"16677:56:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":858,"src":"266:16469:7","usedErrors":[662,665,670,677,680],"usedEvents":[582,587,594,601,608,615,625,635,647,659]}],"src":"46:16690:7"},"id":7},"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol","exportedSymbols":{"AddLiquidityKind":[3088],"IERC20":[6383],"IERC4626":[5653],"IRouter":[1354],"RemoveLiquidityKind":[3109],"SwapKind":[3016]},"id":1355,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":859,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:8"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":861,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1355,"sourceUnit":5654,"src":"72:75:8","symbolAliases":[{"foreign":{"id":860,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5653,"src":"81:8:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":863,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1355,"sourceUnit":6384,"src":"148:72:8","symbolAliases":[{"foreign":{"id":862,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"157:6:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":867,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1355,"sourceUnit":3153,"src":"222:83:8","symbolAliases":[{"foreign":{"id":864,"name":"AddLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"231:16:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":865,"name":"RemoveLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"249:19:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":866,"name":"SwapKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"270:8:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IRouter","contractDependencies":[],"contractKind":"interface","documentation":{"id":868,"nodeType":"StructuredDocumentation","src":"307:115:8","text":"@notice User-friendly interface to basic Vault operations: swap, add/remove liquidity, and associated queries."},"fullyImplemented":false,"id":1354,"linearizedBaseContracts":[1354],"name":"IRouter","nameLocation":"432:7:8","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IRouter.InitializeHookParams","documentation":{"id":869,"nodeType":"StructuredDocumentation","src":"661:637:8","text":" @notice Data for the pool initialization hook.\n @param sender Account originating the pool initialization operation\n @param pool Address of the liquidity pool\n @param tokens Pool tokens, in token registration order\n @param exactAmountsIn Exact amounts of tokens to be added, sorted in token registration order\n @param minBptAmountOut Minimum amount of pool tokens to be received\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the request to add initial liquidity"},"id":887,"members":[{"constant":false,"id":871,"mutability":"mutable","name":"sender","nameLocation":"1349:6:8","nodeType":"VariableDeclaration","scope":887,"src":"1341:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":870,"name":"address","nodeType":"ElementaryTypeName","src":"1341:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":873,"mutability":"mutable","name":"pool","nameLocation":"1373:4:8","nodeType":"VariableDeclaration","scope":887,"src":"1365:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":872,"name":"address","nodeType":"ElementaryTypeName","src":"1365:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"tokens","nameLocation":"1396:6:8","nodeType":"VariableDeclaration","scope":887,"src":"1387:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":875,"nodeType":"UserDefinedTypeName","pathNode":{"id":874,"name":"IERC20","nameLocations":["1387:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"1387:6:8"},"referencedDeclaration":6383,"src":"1387:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":876,"nodeType":"ArrayTypeName","src":"1387:8:8","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":880,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"1422:14:8","nodeType":"VariableDeclaration","scope":887,"src":"1412:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":878,"name":"uint256","nodeType":"ElementaryTypeName","src":"1412:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":879,"nodeType":"ArrayTypeName","src":"1412:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":882,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"1454:15:8","nodeType":"VariableDeclaration","scope":887,"src":"1446:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":881,"name":"uint256","nodeType":"ElementaryTypeName","src":"1446:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":884,"mutability":"mutable","name":"wethIsEth","nameLocation":"1484:9:8","nodeType":"VariableDeclaration","scope":887,"src":"1479:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":883,"name":"bool","nodeType":"ElementaryTypeName","src":"1479:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":886,"mutability":"mutable","name":"userData","nameLocation":"1509:8:8","nodeType":"VariableDeclaration","scope":887,"src":"1503:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":885,"name":"bytes","nodeType":"ElementaryTypeName","src":"1503:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"InitializeHookParams","nameLocation":"1310:20:8","nodeType":"StructDefinition","scope":1354,"src":"1303:221:8","visibility":"public"},{"documentation":{"id":888,"nodeType":"StructuredDocumentation","src":"1530:650:8","text":" @notice Initialize a liquidity pool.\n @param pool Address of the liquidity pool\n @param tokens Pool tokens, in token registration order\n @param exactAmountsIn Exact amounts of tokens to be added, sorted in token registration order\n @param minBptAmountOut Minimum amount of pool tokens to be received\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the request to add initial liquidity\n @return bptAmountOut Actual amount of pool tokens minted in exchange for initial liquidity"},"functionSelector":"026b3d95","id":908,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"2194:10:8","nodeType":"FunctionDefinition","parameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":890,"mutability":"mutable","name":"pool","nameLocation":"2222:4:8","nodeType":"VariableDeclaration","scope":908,"src":"2214:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":889,"name":"address","nodeType":"ElementaryTypeName","src":"2214:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":894,"mutability":"mutable","name":"tokens","nameLocation":"2252:6:8","nodeType":"VariableDeclaration","scope":908,"src":"2236:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":892,"nodeType":"UserDefinedTypeName","pathNode":{"id":891,"name":"IERC20","nameLocations":["2236:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2236:6:8"},"referencedDeclaration":6383,"src":"2236:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":893,"nodeType":"ArrayTypeName","src":"2236:8:8","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":897,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"2285:14:8","nodeType":"VariableDeclaration","scope":908,"src":"2268:31:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":895,"name":"uint256","nodeType":"ElementaryTypeName","src":"2268:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":896,"nodeType":"ArrayTypeName","src":"2268:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":899,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"2317:15:8","nodeType":"VariableDeclaration","scope":908,"src":"2309:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":898,"name":"uint256","nodeType":"ElementaryTypeName","src":"2309:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":901,"mutability":"mutable","name":"wethIsEth","nameLocation":"2347:9:8","nodeType":"VariableDeclaration","scope":908,"src":"2342:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":900,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":903,"mutability":"mutable","name":"userData","nameLocation":"2379:8:8","nodeType":"VariableDeclaration","scope":908,"src":"2366:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":902,"name":"bytes","nodeType":"ElementaryTypeName","src":"2366:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2204:189:8"},"returnParameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"bptAmountOut","nameLocation":"2428:12:8","nodeType":"VariableDeclaration","scope":908,"src":"2420:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":905,"name":"uint256","nodeType":"ElementaryTypeName","src":"2420:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2419:22:8"},"scope":1354,"src":"2185:257:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":909,"nodeType":"StructuredDocumentation","src":"2660:645:8","text":" @notice Adds liquidity to a pool with proportional token amounts, receiving an exact amount of pool tokens.\n @param pool Address of the liquidity pool\n @param maxAmountsIn Maximum amounts of tokens to be added, sorted in token registration order\n @param exactBptAmountOut Exact amount of pool tokens to be received\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the request to add liquidity\n @return amountsIn Actual amounts of tokens added, sorted in token registration order"},"functionSelector":"724dba33","id":926,"implemented":false,"kind":"function","modifiers":[],"name":"addLiquidityProportional","nameLocation":"3319:24:8","nodeType":"FunctionDefinition","parameters":{"id":921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":911,"mutability":"mutable","name":"pool","nameLocation":"3361:4:8","nodeType":"VariableDeclaration","scope":926,"src":"3353:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":910,"name":"address","nodeType":"ElementaryTypeName","src":"3353:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":914,"mutability":"mutable","name":"maxAmountsIn","nameLocation":"3392:12:8","nodeType":"VariableDeclaration","scope":926,"src":"3375:29:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":912,"name":"uint256","nodeType":"ElementaryTypeName","src":"3375:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":913,"nodeType":"ArrayTypeName","src":"3375:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":916,"mutability":"mutable","name":"exactBptAmountOut","nameLocation":"3422:17:8","nodeType":"VariableDeclaration","scope":926,"src":"3414:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":915,"name":"uint256","nodeType":"ElementaryTypeName","src":"3414:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":918,"mutability":"mutable","name":"wethIsEth","nameLocation":"3454:9:8","nodeType":"VariableDeclaration","scope":926,"src":"3449:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":917,"name":"bool","nodeType":"ElementaryTypeName","src":"3449:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":920,"mutability":"mutable","name":"userData","nameLocation":"3486:8:8","nodeType":"VariableDeclaration","scope":926,"src":"3473:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":919,"name":"bytes","nodeType":"ElementaryTypeName","src":"3473:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3343:157:8"},"returnParameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"amountsIn","nameLocation":"3544:9:8","nodeType":"VariableDeclaration","scope":926,"src":"3527:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":922,"name":"uint256","nodeType":"ElementaryTypeName","src":"3527:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":923,"nodeType":"ArrayTypeName","src":"3527:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3526:28:8"},"scope":1354,"src":"3310:245:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":927,"nodeType":"StructuredDocumentation","src":"3561:574:8","text":" @notice Adds liquidity to a pool with arbitrary token amounts.\n @param pool Address of the liquidity pool\n @param exactAmountsIn Exact amounts of tokens to be added, sorted in token registration order\n @param minBptAmountOut Minimum amount of pool tokens to be received\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the request to add liquidity\n @return bptAmountOut Actual amount of pool tokens received"},"functionSelector":"c08bc851","id":943,"implemented":false,"kind":"function","modifiers":[],"name":"addLiquidityUnbalanced","nameLocation":"4149:22:8","nodeType":"FunctionDefinition","parameters":{"id":939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"pool","nameLocation":"4189:4:8","nodeType":"VariableDeclaration","scope":943,"src":"4181:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":928,"name":"address","nodeType":"ElementaryTypeName","src":"4181:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":932,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"4220:14:8","nodeType":"VariableDeclaration","scope":943,"src":"4203:31:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":930,"name":"uint256","nodeType":"ElementaryTypeName","src":"4203:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":931,"nodeType":"ArrayTypeName","src":"4203:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":934,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"4252:15:8","nodeType":"VariableDeclaration","scope":943,"src":"4244:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":933,"name":"uint256","nodeType":"ElementaryTypeName","src":"4244:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":936,"mutability":"mutable","name":"wethIsEth","nameLocation":"4282:9:8","nodeType":"VariableDeclaration","scope":943,"src":"4277:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":935,"name":"bool","nodeType":"ElementaryTypeName","src":"4277:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":938,"mutability":"mutable","name":"userData","nameLocation":"4314:8:8","nodeType":"VariableDeclaration","scope":943,"src":"4301:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":937,"name":"bytes","nodeType":"ElementaryTypeName","src":"4301:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4171:157:8"},"returnParameters":{"id":942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":941,"mutability":"mutable","name":"bptAmountOut","nameLocation":"4363:12:8","nodeType":"VariableDeclaration","scope":943,"src":"4355:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":940,"name":"uint256","nodeType":"ElementaryTypeName","src":"4355:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4354:22:8"},"scope":1354,"src":"4140:237:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":944,"nodeType":"StructuredDocumentation","src":"4383:605:8","text":" @notice Adds liquidity to a pool in a single token, receiving an exact amount of pool tokens.\n @param pool Address of the liquidity pool\n @param tokenIn Token used to add liquidity\n @param maxAmountIn Maximum amount of tokens to be added\n @param exactBptAmountOut Exact amount of pool tokens to be received\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the request to add liquidity\n @return amountIn Actual amount of tokens added"},"functionSelector":"72657d17","id":962,"implemented":false,"kind":"function","modifiers":[],"name":"addLiquiditySingleTokenExactOut","nameLocation":"5002:31:8","nodeType":"FunctionDefinition","parameters":{"id":958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":946,"mutability":"mutable","name":"pool","nameLocation":"5051:4:8","nodeType":"VariableDeclaration","scope":962,"src":"5043:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":945,"name":"address","nodeType":"ElementaryTypeName","src":"5043:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":949,"mutability":"mutable","name":"tokenIn","nameLocation":"5072:7:8","nodeType":"VariableDeclaration","scope":962,"src":"5065:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":948,"nodeType":"UserDefinedTypeName","pathNode":{"id":947,"name":"IERC20","nameLocations":["5065:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"5065:6:8"},"referencedDeclaration":6383,"src":"5065:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":951,"mutability":"mutable","name":"maxAmountIn","nameLocation":"5097:11:8","nodeType":"VariableDeclaration","scope":962,"src":"5089:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":950,"name":"uint256","nodeType":"ElementaryTypeName","src":"5089:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":953,"mutability":"mutable","name":"exactBptAmountOut","nameLocation":"5126:17:8","nodeType":"VariableDeclaration","scope":962,"src":"5118:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":952,"name":"uint256","nodeType":"ElementaryTypeName","src":"5118:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":955,"mutability":"mutable","name":"wethIsEth","nameLocation":"5158:9:8","nodeType":"VariableDeclaration","scope":962,"src":"5153:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":954,"name":"bool","nodeType":"ElementaryTypeName","src":"5153:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":957,"mutability":"mutable","name":"userData","nameLocation":"5190:8:8","nodeType":"VariableDeclaration","scope":962,"src":"5177:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":956,"name":"bytes","nodeType":"ElementaryTypeName","src":"5177:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5033:171:8"},"returnParameters":{"id":961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":960,"mutability":"mutable","name":"amountIn","nameLocation":"5239:8:8","nodeType":"VariableDeclaration","scope":962,"src":"5231:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":959,"name":"uint256","nodeType":"ElementaryTypeName","src":"5231:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5230:18:8"},"scope":1354,"src":"4993:256:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":963,"nodeType":"StructuredDocumentation","src":"5255:530:8","text":" @notice Adds liquidity to a pool by donating the amounts in (no BPT out).\n @dev To support donation, the pool config `enableDonation` flag must be set to true.\n @param pool Address of the liquidity pool\n @param amountsIn Amounts of tokens to be donated, sorted in token registration order\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the request to donate liquidity"},"functionSelector":"bf6ee3fd","id":975,"implemented":false,"kind":"function","modifiers":[],"name":"donate","nameLocation":"5799:6:8","nodeType":"FunctionDefinition","parameters":{"id":973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":965,"mutability":"mutable","name":"pool","nameLocation":"5814:4:8","nodeType":"VariableDeclaration","scope":975,"src":"5806:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":964,"name":"address","nodeType":"ElementaryTypeName","src":"5806:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":968,"mutability":"mutable","name":"amountsIn","nameLocation":"5837:9:8","nodeType":"VariableDeclaration","scope":975,"src":"5820:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":966,"name":"uint256","nodeType":"ElementaryTypeName","src":"5820:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":967,"nodeType":"ArrayTypeName","src":"5820:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":970,"mutability":"mutable","name":"wethIsEth","nameLocation":"5853:9:8","nodeType":"VariableDeclaration","scope":975,"src":"5848:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":969,"name":"bool","nodeType":"ElementaryTypeName","src":"5848:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":972,"mutability":"mutable","name":"userData","nameLocation":"5877:8:8","nodeType":"VariableDeclaration","scope":975,"src":"5864:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":971,"name":"bytes","nodeType":"ElementaryTypeName","src":"5864:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5805:81:8"},"returnParameters":{"id":974,"nodeType":"ParameterList","parameters":[],"src":"5903:0:8"},"scope":1354,"src":"5790:114:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":976,"nodeType":"StructuredDocumentation","src":"5910:954:8","text":" @notice Adds liquidity to a pool with a custom request.\n @dev The given maximum and minimum amounts given may be interpreted as exact depending on the pool type.\n In any case the caller can expect them to be hard boundaries for the request.\n @param pool Address of the liquidity pool\n @param maxAmountsIn Maximum amounts of tokens to be added, sorted in token registration order\n @param minBptAmountOut Minimum amount of pool tokens to be received\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the request to add liquidity\n @return amountsIn Actual amounts of tokens added, sorted in token registration order\n @return bptAmountOut Actual amount of pool tokens received\n @return returnData Arbitrary (optional) data with an encoded response from the pool"},"functionSelector":"0ca078ec","id":997,"implemented":false,"kind":"function","modifiers":[],"name":"addLiquidityCustom","nameLocation":"6878:18:8","nodeType":"FunctionDefinition","parameters":{"id":988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":978,"mutability":"mutable","name":"pool","nameLocation":"6914:4:8","nodeType":"VariableDeclaration","scope":997,"src":"6906:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":977,"name":"address","nodeType":"ElementaryTypeName","src":"6906:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":981,"mutability":"mutable","name":"maxAmountsIn","nameLocation":"6945:12:8","nodeType":"VariableDeclaration","scope":997,"src":"6928:29:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":979,"name":"uint256","nodeType":"ElementaryTypeName","src":"6928:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":980,"nodeType":"ArrayTypeName","src":"6928:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":983,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"6975:15:8","nodeType":"VariableDeclaration","scope":997,"src":"6967:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"6967:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":985,"mutability":"mutable","name":"wethIsEth","nameLocation":"7005:9:8","nodeType":"VariableDeclaration","scope":997,"src":"7000:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":984,"name":"bool","nodeType":"ElementaryTypeName","src":"7000:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":987,"mutability":"mutable","name":"userData","nameLocation":"7037:8:8","nodeType":"VariableDeclaration","scope":997,"src":"7024:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":986,"name":"bytes","nodeType":"ElementaryTypeName","src":"7024:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6896:155:8"},"returnParameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"amountsIn","nameLocation":"7095:9:8","nodeType":"VariableDeclaration","scope":997,"src":"7078:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":989,"name":"uint256","nodeType":"ElementaryTypeName","src":"7078:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":990,"nodeType":"ArrayTypeName","src":"7078:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":993,"mutability":"mutable","name":"bptAmountOut","nameLocation":"7114:12:8","nodeType":"VariableDeclaration","scope":997,"src":"7106:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":992,"name":"uint256","nodeType":"ElementaryTypeName","src":"7106:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":995,"mutability":"mutable","name":"returnData","nameLocation":"7141:10:8","nodeType":"VariableDeclaration","scope":997,"src":"7128:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":994,"name":"bytes","nodeType":"ElementaryTypeName","src":"7128:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7077:75:8"},"scope":1354,"src":"6869:284:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":998,"nodeType":"StructuredDocumentation","src":"7372:648:8","text":" @notice Removes liquidity with proportional token amounts from a pool, burning an exact pool token amount.\n @param pool Address of the liquidity pool\n @param exactBptAmountIn Exact amount of pool tokens provided\n @param minAmountsOut Minimum amounts of tokens to be received, sorted in token registration order\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the request to remove liquidity\n @return amountsOut Actual amounts of tokens received, sorted in token registration order"},"functionSelector":"51682750","id":1015,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityProportional","nameLocation":"8034:27:8","nodeType":"FunctionDefinition","parameters":{"id":1010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1000,"mutability":"mutable","name":"pool","nameLocation":"8079:4:8","nodeType":"VariableDeclaration","scope":1015,"src":"8071:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"8071:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1002,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"8101:16:8","nodeType":"VariableDeclaration","scope":1015,"src":"8093:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1001,"name":"uint256","nodeType":"ElementaryTypeName","src":"8093:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1005,"mutability":"mutable","name":"minAmountsOut","nameLocation":"8144:13:8","nodeType":"VariableDeclaration","scope":1015,"src":"8127:30:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1003,"name":"uint256","nodeType":"ElementaryTypeName","src":"8127:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1004,"nodeType":"ArrayTypeName","src":"8127:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1007,"mutability":"mutable","name":"wethIsEth","nameLocation":"8172:9:8","nodeType":"VariableDeclaration","scope":1015,"src":"8167:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1006,"name":"bool","nodeType":"ElementaryTypeName","src":"8167:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1009,"mutability":"mutable","name":"userData","nameLocation":"8204:8:8","nodeType":"VariableDeclaration","scope":1015,"src":"8191:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1008,"name":"bytes","nodeType":"ElementaryTypeName","src":"8191:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8061:157:8"},"returnParameters":{"id":1014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"mutability":"mutable","name":"amountsOut","nameLocation":"8262:10:8","nodeType":"VariableDeclaration","scope":1015,"src":"8245:27:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1011,"name":"uint256","nodeType":"ElementaryTypeName","src":"8245:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1012,"nodeType":"ArrayTypeName","src":"8245:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"8244:29:8"},"scope":1354,"src":"8025:249:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1016,"nodeType":"StructuredDocumentation","src":"8280:613:8","text":" @notice Removes liquidity from a pool via a single token, burning an exact pool token amount.\n @param pool Address of the liquidity pool\n @param exactBptAmountIn Exact amount of pool tokens provided\n @param tokenOut Token used to remove liquidity\n @param minAmountOut Minimum amount of tokens to be received\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the request to remove liquidity\n @return amountOut Actual amount of tokens received"},"functionSelector":"ecb2182c","id":1034,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquiditySingleTokenExactIn","nameLocation":"8907:33:8","nodeType":"FunctionDefinition","parameters":{"id":1030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1018,"mutability":"mutable","name":"pool","nameLocation":"8958:4:8","nodeType":"VariableDeclaration","scope":1034,"src":"8950:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1017,"name":"address","nodeType":"ElementaryTypeName","src":"8950:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1020,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"8980:16:8","nodeType":"VariableDeclaration","scope":1034,"src":"8972:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1019,"name":"uint256","nodeType":"ElementaryTypeName","src":"8972:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1023,"mutability":"mutable","name":"tokenOut","nameLocation":"9013:8:8","nodeType":"VariableDeclaration","scope":1034,"src":"9006:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1022,"nodeType":"UserDefinedTypeName","pathNode":{"id":1021,"name":"IERC20","nameLocations":["9006:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"9006:6:8"},"referencedDeclaration":6383,"src":"9006:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1025,"mutability":"mutable","name":"minAmountOut","nameLocation":"9039:12:8","nodeType":"VariableDeclaration","scope":1034,"src":"9031:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1024,"name":"uint256","nodeType":"ElementaryTypeName","src":"9031:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1027,"mutability":"mutable","name":"wethIsEth","nameLocation":"9066:9:8","nodeType":"VariableDeclaration","scope":1034,"src":"9061:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1026,"name":"bool","nodeType":"ElementaryTypeName","src":"9061:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1029,"mutability":"mutable","name":"userData","nameLocation":"9098:8:8","nodeType":"VariableDeclaration","scope":1034,"src":"9085:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1028,"name":"bytes","nodeType":"ElementaryTypeName","src":"9085:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8940:172:8"},"returnParameters":{"id":1033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1032,"mutability":"mutable","name":"amountOut","nameLocation":"9147:9:8","nodeType":"VariableDeclaration","scope":1034,"src":"9139:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1031,"name":"uint256","nodeType":"ElementaryTypeName","src":"9139:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9138:19:8"},"scope":1354,"src":"8898:260:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1035,"nodeType":"StructuredDocumentation","src":"9164:632:8","text":" @notice Removes liquidity from a pool via a single token, specifying the exact amount of tokens to receive.\n @param pool Address of the liquidity pool\n @param maxBptAmountIn Maximum amount of pool tokens provided\n @param tokenOut Token used to remove liquidity\n @param exactAmountOut Exact amount of tokens to be received\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the request to remove liquidity\n @return bptAmountIn Actual amount of pool tokens burned"},"functionSelector":"e7326def","id":1053,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquiditySingleTokenExactOut","nameLocation":"9810:34:8","nodeType":"FunctionDefinition","parameters":{"id":1049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"mutability":"mutable","name":"pool","nameLocation":"9862:4:8","nodeType":"VariableDeclaration","scope":1053,"src":"9854:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1036,"name":"address","nodeType":"ElementaryTypeName","src":"9854:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1039,"mutability":"mutable","name":"maxBptAmountIn","nameLocation":"9884:14:8","nodeType":"VariableDeclaration","scope":1053,"src":"9876:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1038,"name":"uint256","nodeType":"ElementaryTypeName","src":"9876:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1042,"mutability":"mutable","name":"tokenOut","nameLocation":"9915:8:8","nodeType":"VariableDeclaration","scope":1053,"src":"9908:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1041,"nodeType":"UserDefinedTypeName","pathNode":{"id":1040,"name":"IERC20","nameLocations":["9908:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"9908:6:8"},"referencedDeclaration":6383,"src":"9908:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1044,"mutability":"mutable","name":"exactAmountOut","nameLocation":"9941:14:8","nodeType":"VariableDeclaration","scope":1053,"src":"9933:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1043,"name":"uint256","nodeType":"ElementaryTypeName","src":"9933:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1046,"mutability":"mutable","name":"wethIsEth","nameLocation":"9970:9:8","nodeType":"VariableDeclaration","scope":1053,"src":"9965:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1045,"name":"bool","nodeType":"ElementaryTypeName","src":"9965:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"userData","nameLocation":"10002:8:8","nodeType":"VariableDeclaration","scope":1053,"src":"9989:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1047,"name":"bytes","nodeType":"ElementaryTypeName","src":"9989:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9844:172:8"},"returnParameters":{"id":1052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1051,"mutability":"mutable","name":"bptAmountIn","nameLocation":"10051:11:8","nodeType":"VariableDeclaration","scope":1053,"src":"10043:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1050,"name":"uint256","nodeType":"ElementaryTypeName","src":"10043:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10042:21:8"},"scope":1354,"src":"9801:263:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1054,"nodeType":"StructuredDocumentation","src":"10070:960:8","text":" @notice Removes liquidity from a pool with a custom request.\n @dev The given maximum and minimum amounts given may be interpreted as exact depending on the pool type.\n In any case the caller can expect them to be hard boundaries for the request.\n @param pool Address of the liquidity pool\n @param maxBptAmountIn Maximum amount of pool tokens provided\n @param minAmountsOut Minimum amounts of tokens to be received, sorted in token registration order\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the request to remove liquidity\n @return bptAmountIn Actual amount of pool tokens burned\n @return amountsOut Actual amounts of tokens received, sorted in token registration order\n @return returnData Arbitrary (optional) data with an encoded response from the pool"},"functionSelector":"82bf2b24","id":1075,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityCustom","nameLocation":"11044:21:8","nodeType":"FunctionDefinition","parameters":{"id":1066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1056,"mutability":"mutable","name":"pool","nameLocation":"11083:4:8","nodeType":"VariableDeclaration","scope":1075,"src":"11075:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1055,"name":"address","nodeType":"ElementaryTypeName","src":"11075:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1058,"mutability":"mutable","name":"maxBptAmountIn","nameLocation":"11105:14:8","nodeType":"VariableDeclaration","scope":1075,"src":"11097:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1057,"name":"uint256","nodeType":"ElementaryTypeName","src":"11097:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1061,"mutability":"mutable","name":"minAmountsOut","nameLocation":"11146:13:8","nodeType":"VariableDeclaration","scope":1075,"src":"11129:30:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1059,"name":"uint256","nodeType":"ElementaryTypeName","src":"11129:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1060,"nodeType":"ArrayTypeName","src":"11129:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1063,"mutability":"mutable","name":"wethIsEth","nameLocation":"11174:9:8","nodeType":"VariableDeclaration","scope":1075,"src":"11169:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1062,"name":"bool","nodeType":"ElementaryTypeName","src":"11169:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1065,"mutability":"mutable","name":"userData","nameLocation":"11206:8:8","nodeType":"VariableDeclaration","scope":1075,"src":"11193:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1064,"name":"bytes","nodeType":"ElementaryTypeName","src":"11193:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11065:155:8"},"returnParameters":{"id":1074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1068,"mutability":"mutable","name":"bptAmountIn","nameLocation":"11255:11:8","nodeType":"VariableDeclaration","scope":1075,"src":"11247:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1067,"name":"uint256","nodeType":"ElementaryTypeName","src":"11247:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1071,"mutability":"mutable","name":"amountsOut","nameLocation":"11285:10:8","nodeType":"VariableDeclaration","scope":1075,"src":"11268:27:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"11268:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1070,"nodeType":"ArrayTypeName","src":"11268:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1073,"mutability":"mutable","name":"returnData","nameLocation":"11310:10:8","nodeType":"VariableDeclaration","scope":1075,"src":"11297:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1072,"name":"bytes","nodeType":"ElementaryTypeName","src":"11297:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11246:75:8"},"scope":1354,"src":"11035:287:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1076,"nodeType":"StructuredDocumentation","src":"11328:447:8","text":" @notice Removes liquidity proportionally, burning an exact pool token amount. Only available in Recovery Mode.\n @param pool Address of the liquidity pool\n @param exactBptAmountIn Exact amount of pool tokens provided\n @param minAmountsOut Minimum amounts of tokens to be received, sorted in token registration order\n @return amountsOut Actual amounts of tokens received, sorted in token registration order"},"functionSelector":"08c04793","id":1089,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityRecovery","nameLocation":"11789:23:8","nodeType":"FunctionDefinition","parameters":{"id":1084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1078,"mutability":"mutable","name":"pool","nameLocation":"11830:4:8","nodeType":"VariableDeclaration","scope":1089,"src":"11822:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1077,"name":"address","nodeType":"ElementaryTypeName","src":"11822:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1080,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"11852:16:8","nodeType":"VariableDeclaration","scope":1089,"src":"11844:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1079,"name":"uint256","nodeType":"ElementaryTypeName","src":"11844:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1083,"mutability":"mutable","name":"minAmountsOut","nameLocation":"11895:13:8","nodeType":"VariableDeclaration","scope":1089,"src":"11878:30:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1081,"name":"uint256","nodeType":"ElementaryTypeName","src":"11878:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1082,"nodeType":"ArrayTypeName","src":"11878:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11812:102:8"},"returnParameters":{"id":1088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1087,"mutability":"mutable","name":"amountsOut","nameLocation":"11958:10:8","nodeType":"VariableDeclaration","scope":1089,"src":"11941:27:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1085,"name":"uint256","nodeType":"ElementaryTypeName","src":"11941:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1086,"nodeType":"ArrayTypeName","src":"11941:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11940:29:8"},"scope":1354,"src":"11780:190:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"IRouter.SwapSingleTokenHookParams","documentation":{"id":1090,"nodeType":"StructuredDocumentation","src":"12184:770:8","text":" @notice Data for the swap hook.\n @param sender Account initiating the swap operation\n @param kind Type of swap (exact in or exact out)\n @param pool Address of the liquidity pool\n @param tokenIn Token to be swapped from\n @param tokenOut Token to be swapped to\n @param amountGiven Amount given based on kind of the swap (e.g., tokenIn for exact in)\n @param limit Maximum or minimum amount based on the kind of swap (e.g., maxAmountIn for exact out)\n @param deadline Deadline for the swap, after which it will revert\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the swap request"},"id":1114,"members":[{"constant":false,"id":1092,"mutability":"mutable","name":"sender","nameLocation":"13010:6:8","nodeType":"VariableDeclaration","scope":1114,"src":"13002:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1091,"name":"address","nodeType":"ElementaryTypeName","src":"13002:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1095,"mutability":"mutable","name":"kind","nameLocation":"13035:4:8","nodeType":"VariableDeclaration","scope":1114,"src":"13026:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3016","typeString":"enum SwapKind"},"typeName":{"id":1094,"nodeType":"UserDefinedTypeName","pathNode":{"id":1093,"name":"SwapKind","nameLocations":["13026:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":3016,"src":"13026:8:8"},"referencedDeclaration":3016,"src":"13026:8:8","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3016","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":1097,"mutability":"mutable","name":"pool","nameLocation":"13057:4:8","nodeType":"VariableDeclaration","scope":1114,"src":"13049:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1096,"name":"address","nodeType":"ElementaryTypeName","src":"13049:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1100,"mutability":"mutable","name":"tokenIn","nameLocation":"13078:7:8","nodeType":"VariableDeclaration","scope":1114,"src":"13071:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1099,"nodeType":"UserDefinedTypeName","pathNode":{"id":1098,"name":"IERC20","nameLocations":["13071:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"13071:6:8"},"referencedDeclaration":6383,"src":"13071:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1103,"mutability":"mutable","name":"tokenOut","nameLocation":"13102:8:8","nodeType":"VariableDeclaration","scope":1114,"src":"13095:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1102,"nodeType":"UserDefinedTypeName","pathNode":{"id":1101,"name":"IERC20","nameLocations":["13095:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"13095:6:8"},"referencedDeclaration":6383,"src":"13095:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1105,"mutability":"mutable","name":"amountGiven","nameLocation":"13128:11:8","nodeType":"VariableDeclaration","scope":1114,"src":"13120:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1104,"name":"uint256","nodeType":"ElementaryTypeName","src":"13120:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1107,"mutability":"mutable","name":"limit","nameLocation":"13157:5:8","nodeType":"VariableDeclaration","scope":1114,"src":"13149:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1106,"name":"uint256","nodeType":"ElementaryTypeName","src":"13149:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1109,"mutability":"mutable","name":"deadline","nameLocation":"13180:8:8","nodeType":"VariableDeclaration","scope":1114,"src":"13172:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1108,"name":"uint256","nodeType":"ElementaryTypeName","src":"13172:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"wethIsEth","nameLocation":"13203:9:8","nodeType":"VariableDeclaration","scope":1114,"src":"13198:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1110,"name":"bool","nodeType":"ElementaryTypeName","src":"13198:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1113,"mutability":"mutable","name":"userData","nameLocation":"13228:8:8","nodeType":"VariableDeclaration","scope":1114,"src":"13222:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1112,"name":"bytes","nodeType":"ElementaryTypeName","src":"13222:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"SwapSingleTokenHookParams","nameLocation":"12966:25:8","nodeType":"StructDefinition","scope":1354,"src":"12959:284:8","visibility":"public"},{"documentation":{"id":1115,"nodeType":"StructuredDocumentation","src":"13249:744:8","text":" @notice Executes a swap operation specifying an exact input token amount.\n @param pool Address of the liquidity pool\n @param tokenIn Token to be swapped from\n @param tokenOut Token to be swapped to\n @param exactAmountIn Exact amounts of input tokens to send\n @param minAmountOut Minimum amount of tokens to be received\n @param deadline Deadline for the swap, after which it will revert\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data sent with the swap request\n @return amountOut Calculated amount of output tokens to be received in exchange for the given input tokens"},"functionSelector":"750283bc","id":1138,"implemented":false,"kind":"function","modifiers":[],"name":"swapSingleTokenExactIn","nameLocation":"14007:22:8","nodeType":"FunctionDefinition","parameters":{"id":1134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1117,"mutability":"mutable","name":"pool","nameLocation":"14047:4:8","nodeType":"VariableDeclaration","scope":1138,"src":"14039:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1116,"name":"address","nodeType":"ElementaryTypeName","src":"14039:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1120,"mutability":"mutable","name":"tokenIn","nameLocation":"14068:7:8","nodeType":"VariableDeclaration","scope":1138,"src":"14061:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1119,"nodeType":"UserDefinedTypeName","pathNode":{"id":1118,"name":"IERC20","nameLocations":["14061:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"14061:6:8"},"referencedDeclaration":6383,"src":"14061:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1123,"mutability":"mutable","name":"tokenOut","nameLocation":"14092:8:8","nodeType":"VariableDeclaration","scope":1138,"src":"14085:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1122,"nodeType":"UserDefinedTypeName","pathNode":{"id":1121,"name":"IERC20","nameLocations":["14085:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"14085:6:8"},"referencedDeclaration":6383,"src":"14085:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1125,"mutability":"mutable","name":"exactAmountIn","nameLocation":"14118:13:8","nodeType":"VariableDeclaration","scope":1138,"src":"14110:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1124,"name":"uint256","nodeType":"ElementaryTypeName","src":"14110:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1127,"mutability":"mutable","name":"minAmountOut","nameLocation":"14149:12:8","nodeType":"VariableDeclaration","scope":1138,"src":"14141:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1126,"name":"uint256","nodeType":"ElementaryTypeName","src":"14141:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1129,"mutability":"mutable","name":"deadline","nameLocation":"14179:8:8","nodeType":"VariableDeclaration","scope":1138,"src":"14171:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1128,"name":"uint256","nodeType":"ElementaryTypeName","src":"14171:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1131,"mutability":"mutable","name":"wethIsEth","nameLocation":"14202:9:8","nodeType":"VariableDeclaration","scope":1138,"src":"14197:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1130,"name":"bool","nodeType":"ElementaryTypeName","src":"14197:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1133,"mutability":"mutable","name":"userData","nameLocation":"14236:8:8","nodeType":"VariableDeclaration","scope":1138,"src":"14221:23:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1132,"name":"bytes","nodeType":"ElementaryTypeName","src":"14221:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14029:221:8"},"returnParameters":{"id":1137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1136,"mutability":"mutable","name":"amountOut","nameLocation":"14285:9:8","nodeType":"VariableDeclaration","scope":1138,"src":"14277:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1135,"name":"uint256","nodeType":"ElementaryTypeName","src":"14277:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14276:19:8"},"scope":1354,"src":"13998:298:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"14302:743:8","text":" @notice Executes a swap operation specifying an exact output token amount.\n @param pool Address of the liquidity pool\n @param tokenIn Token to be swapped from\n @param tokenOut Token to be swapped to\n @param exactAmountOut Exact amounts of input tokens to receive\n @param maxAmountIn Maximum amount of tokens to be sent\n @param deadline Deadline for the swap, after which it will revert\n @param userData Additional (optional) data sent with the swap request\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @return amountIn Calculated amount of input tokens to be sent in exchange for the requested output tokens"},"functionSelector":"94e86ef8","id":1162,"implemented":false,"kind":"function","modifiers":[],"name":"swapSingleTokenExactOut","nameLocation":"15059:23:8","nodeType":"FunctionDefinition","parameters":{"id":1158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"pool","nameLocation":"15100:4:8","nodeType":"VariableDeclaration","scope":1162,"src":"15092:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"15092:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1144,"mutability":"mutable","name":"tokenIn","nameLocation":"15121:7:8","nodeType":"VariableDeclaration","scope":1162,"src":"15114:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1143,"nodeType":"UserDefinedTypeName","pathNode":{"id":1142,"name":"IERC20","nameLocations":["15114:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"15114:6:8"},"referencedDeclaration":6383,"src":"15114:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1147,"mutability":"mutable","name":"tokenOut","nameLocation":"15145:8:8","nodeType":"VariableDeclaration","scope":1162,"src":"15138:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1146,"nodeType":"UserDefinedTypeName","pathNode":{"id":1145,"name":"IERC20","nameLocations":["15138:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"15138:6:8"},"referencedDeclaration":6383,"src":"15138:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1149,"mutability":"mutable","name":"exactAmountOut","nameLocation":"15171:14:8","nodeType":"VariableDeclaration","scope":1162,"src":"15163:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1148,"name":"uint256","nodeType":"ElementaryTypeName","src":"15163:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1151,"mutability":"mutable","name":"maxAmountIn","nameLocation":"15203:11:8","nodeType":"VariableDeclaration","scope":1162,"src":"15195:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1150,"name":"uint256","nodeType":"ElementaryTypeName","src":"15195:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1153,"mutability":"mutable","name":"deadline","nameLocation":"15232:8:8","nodeType":"VariableDeclaration","scope":1162,"src":"15224:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1152,"name":"uint256","nodeType":"ElementaryTypeName","src":"15224:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1155,"mutability":"mutable","name":"wethIsEth","nameLocation":"15255:9:8","nodeType":"VariableDeclaration","scope":1162,"src":"15250:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1154,"name":"bool","nodeType":"ElementaryTypeName","src":"15250:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1157,"mutability":"mutable","name":"userData","nameLocation":"15289:8:8","nodeType":"VariableDeclaration","scope":1162,"src":"15274:23:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1156,"name":"bytes","nodeType":"ElementaryTypeName","src":"15274:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15082:221:8"},"returnParameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1160,"mutability":"mutable","name":"amountIn","nameLocation":"15338:8:8","nodeType":"VariableDeclaration","scope":1162,"src":"15330:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1159,"name":"uint256","nodeType":"ElementaryTypeName","src":"15330:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15329:18:8"},"scope":1354,"src":"15050:298:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1163,"nodeType":"StructuredDocumentation","src":"15563:518:8","text":" @notice Queries an `addLiquidityProportional` operation without actually executing it.\n @param pool Address of the liquidity pool\n @param exactBptAmountOut Exact amount of pool tokens to be received\n @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n @param userData Additional (optional) data sent with the query request\n @return amountsIn Expected amounts of tokens to add, sorted in token registration order"},"functionSelector":"9de90518","id":1177,"implemented":false,"kind":"function","modifiers":[],"name":"queryAddLiquidityProportional","nameLocation":"16095:29:8","nodeType":"FunctionDefinition","parameters":{"id":1172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"pool","nameLocation":"16142:4:8","nodeType":"VariableDeclaration","scope":1177,"src":"16134:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1164,"name":"address","nodeType":"ElementaryTypeName","src":"16134:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1167,"mutability":"mutable","name":"exactBptAmountOut","nameLocation":"16164:17:8","nodeType":"VariableDeclaration","scope":1177,"src":"16156:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1166,"name":"uint256","nodeType":"ElementaryTypeName","src":"16156:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1169,"mutability":"mutable","name":"sender","nameLocation":"16199:6:8","nodeType":"VariableDeclaration","scope":1177,"src":"16191:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1168,"name":"address","nodeType":"ElementaryTypeName","src":"16191:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1171,"mutability":"mutable","name":"userData","nameLocation":"16228:8:8","nodeType":"VariableDeclaration","scope":1177,"src":"16215:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1170,"name":"bytes","nodeType":"ElementaryTypeName","src":"16215:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16124:118:8"},"returnParameters":{"id":1176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1175,"mutability":"mutable","name":"amountsIn","nameLocation":"16278:9:8","nodeType":"VariableDeclaration","scope":1177,"src":"16261:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1173,"name":"uint256","nodeType":"ElementaryTypeName","src":"16261:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1174,"nodeType":"ArrayTypeName","src":"16261:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"16260:28:8"},"scope":1354,"src":"16086:203:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1178,"nodeType":"StructuredDocumentation","src":"16295:517:8","text":" @notice Queries an `addLiquidityUnbalanced` operation without actually executing it.\n @param pool Address of the liquidity pool\n @param exactAmountsIn Exact amounts of tokens to be added, sorted in token registration order\n @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n @param userData Additional (optional) data sent with the query request\n @return bptAmountOut Expected amount of pool tokens to receive"},"functionSelector":"da001f7d","id":1192,"implemented":false,"kind":"function","modifiers":[],"name":"queryAddLiquidityUnbalanced","nameLocation":"16826:27:8","nodeType":"FunctionDefinition","parameters":{"id":1188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1180,"mutability":"mutable","name":"pool","nameLocation":"16871:4:8","nodeType":"VariableDeclaration","scope":1192,"src":"16863:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1179,"name":"address","nodeType":"ElementaryTypeName","src":"16863:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1183,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"16902:14:8","nodeType":"VariableDeclaration","scope":1192,"src":"16885:31:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1181,"name":"uint256","nodeType":"ElementaryTypeName","src":"16885:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1182,"nodeType":"ArrayTypeName","src":"16885:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1185,"mutability":"mutable","name":"sender","nameLocation":"16934:6:8","nodeType":"VariableDeclaration","scope":1192,"src":"16926:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1184,"name":"address","nodeType":"ElementaryTypeName","src":"16926:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1187,"mutability":"mutable","name":"userData","nameLocation":"16963:8:8","nodeType":"VariableDeclaration","scope":1192,"src":"16950:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1186,"name":"bytes","nodeType":"ElementaryTypeName","src":"16950:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16853:124:8"},"returnParameters":{"id":1191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"bptAmountOut","nameLocation":"17004:12:8","nodeType":"VariableDeclaration","scope":1192,"src":"16996:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1189,"name":"uint256","nodeType":"ElementaryTypeName","src":"16996:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16995:22:8"},"scope":1354,"src":"16817:201:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1193,"nodeType":"StructuredDocumentation","src":"17024:542:8","text":" @notice Queries an `addLiquiditySingleTokenExactOut` operation without actually executing it.\n @param pool Address of the liquidity pool\n @param tokenIn Token used to add liquidity\n @param exactBptAmountOut Expected exact amount of pool tokens to receive\n @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n @param userData Additional (optional) data sent with the query request\n @return amountIn Expected amount of tokens to add"},"functionSelector":"1d56798d","id":1209,"implemented":false,"kind":"function","modifiers":[],"name":"queryAddLiquiditySingleTokenExactOut","nameLocation":"17580:36:8","nodeType":"FunctionDefinition","parameters":{"id":1205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1195,"mutability":"mutable","name":"pool","nameLocation":"17634:4:8","nodeType":"VariableDeclaration","scope":1209,"src":"17626:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1194,"name":"address","nodeType":"ElementaryTypeName","src":"17626:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1198,"mutability":"mutable","name":"tokenIn","nameLocation":"17655:7:8","nodeType":"VariableDeclaration","scope":1209,"src":"17648:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1197,"nodeType":"UserDefinedTypeName","pathNode":{"id":1196,"name":"IERC20","nameLocations":["17648:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"17648:6:8"},"referencedDeclaration":6383,"src":"17648:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1200,"mutability":"mutable","name":"exactBptAmountOut","nameLocation":"17680:17:8","nodeType":"VariableDeclaration","scope":1209,"src":"17672:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1199,"name":"uint256","nodeType":"ElementaryTypeName","src":"17672:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1202,"mutability":"mutable","name":"sender","nameLocation":"17715:6:8","nodeType":"VariableDeclaration","scope":1209,"src":"17707:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1201,"name":"address","nodeType":"ElementaryTypeName","src":"17707:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1204,"mutability":"mutable","name":"userData","nameLocation":"17744:8:8","nodeType":"VariableDeclaration","scope":1209,"src":"17731:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1203,"name":"bytes","nodeType":"ElementaryTypeName","src":"17731:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17616:142:8"},"returnParameters":{"id":1208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1207,"mutability":"mutable","name":"amountIn","nameLocation":"17785:8:8","nodeType":"VariableDeclaration","scope":1209,"src":"17777:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1206,"name":"uint256","nodeType":"ElementaryTypeName","src":"17777:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17776:18:8"},"scope":1354,"src":"17571:224:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1210,"nodeType":"StructuredDocumentation","src":"17801:779:8","text":" @notice Queries an `addLiquidityCustom` operation without actually executing it.\n @param pool Address of the liquidity pool\n @param maxAmountsIn Maximum amounts of tokens to be added, sorted in token registration order\n @param minBptAmountOut Expected minimum amount of pool tokens to receive\n @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n @param userData Additional (optional) data sent with the query request\n @return amountsIn Expected amounts of tokens to add, sorted in token registration order\n @return bptAmountOut Expected amount of pool tokens to receive\n @return returnData Arbitrary (optional) data with an encoded response from the pool"},"functionSelector":"452db952","id":1231,"implemented":false,"kind":"function","modifiers":[],"name":"queryAddLiquidityCustom","nameLocation":"18594:23:8","nodeType":"FunctionDefinition","parameters":{"id":1222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"pool","nameLocation":"18635:4:8","nodeType":"VariableDeclaration","scope":1231,"src":"18627:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1211,"name":"address","nodeType":"ElementaryTypeName","src":"18627:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1215,"mutability":"mutable","name":"maxAmountsIn","nameLocation":"18666:12:8","nodeType":"VariableDeclaration","scope":1231,"src":"18649:29:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1213,"name":"uint256","nodeType":"ElementaryTypeName","src":"18649:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1214,"nodeType":"ArrayTypeName","src":"18649:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1217,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"18696:15:8","nodeType":"VariableDeclaration","scope":1231,"src":"18688:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1216,"name":"uint256","nodeType":"ElementaryTypeName","src":"18688:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1219,"mutability":"mutable","name":"sender","nameLocation":"18729:6:8","nodeType":"VariableDeclaration","scope":1231,"src":"18721:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1218,"name":"address","nodeType":"ElementaryTypeName","src":"18721:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1221,"mutability":"mutable","name":"userData","nameLocation":"18758:8:8","nodeType":"VariableDeclaration","scope":1231,"src":"18745:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1220,"name":"bytes","nodeType":"ElementaryTypeName","src":"18745:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18617:155:8"},"returnParameters":{"id":1230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1225,"mutability":"mutable","name":"amountsIn","nameLocation":"18808:9:8","nodeType":"VariableDeclaration","scope":1231,"src":"18791:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1223,"name":"uint256","nodeType":"ElementaryTypeName","src":"18791:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1224,"nodeType":"ArrayTypeName","src":"18791:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1227,"mutability":"mutable","name":"bptAmountOut","nameLocation":"18827:12:8","nodeType":"VariableDeclaration","scope":1231,"src":"18819:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1226,"name":"uint256","nodeType":"ElementaryTypeName","src":"18819:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1229,"mutability":"mutable","name":"returnData","nameLocation":"18854:10:8","nodeType":"VariableDeclaration","scope":1231,"src":"18841:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1228,"name":"bytes","nodeType":"ElementaryTypeName","src":"18841:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18790:75:8"},"scope":1354,"src":"18585:281:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1232,"nodeType":"StructuredDocumentation","src":"18872:532:8","text":" @notice Queries a `removeLiquidityProportional` operation without actually executing it.\n @param pool Address of the liquidity pool\n @param exactBptAmountIn Exact amount of pool tokens provided for the query\n @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n @param userData Additional (optional) data sent with the query request\n @return amountsOut Expected amounts of tokens to receive, sorted in token registration order"},"functionSelector":"0f710888","id":1246,"implemented":false,"kind":"function","modifiers":[],"name":"queryRemoveLiquidityProportional","nameLocation":"19418:32:8","nodeType":"FunctionDefinition","parameters":{"id":1241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1234,"mutability":"mutable","name":"pool","nameLocation":"19468:4:8","nodeType":"VariableDeclaration","scope":1246,"src":"19460:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1233,"name":"address","nodeType":"ElementaryTypeName","src":"19460:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1236,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"19490:16:8","nodeType":"VariableDeclaration","scope":1246,"src":"19482:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1235,"name":"uint256","nodeType":"ElementaryTypeName","src":"19482:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1238,"mutability":"mutable","name":"sender","nameLocation":"19524:6:8","nodeType":"VariableDeclaration","scope":1246,"src":"19516:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1237,"name":"address","nodeType":"ElementaryTypeName","src":"19516:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1240,"mutability":"mutable","name":"userData","nameLocation":"19553:8:8","nodeType":"VariableDeclaration","scope":1246,"src":"19540:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1239,"name":"bytes","nodeType":"ElementaryTypeName","src":"19540:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19450:117:8"},"returnParameters":{"id":1245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1244,"mutability":"mutable","name":"amountsOut","nameLocation":"19603:10:8","nodeType":"VariableDeclaration","scope":1246,"src":"19586:27:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1242,"name":"uint256","nodeType":"ElementaryTypeName","src":"19586:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1243,"nodeType":"ArrayTypeName","src":"19586:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"19585:29:8"},"scope":1354,"src":"19409:206:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1247,"nodeType":"StructuredDocumentation","src":"19621:554:8","text":" @notice Queries a `removeLiquiditySingleTokenExactIn` operation without actually executing it.\n @param pool Address of the liquidity pool\n @param exactBptAmountIn Exact amount of pool tokens provided for the query\n @param tokenOut Token used to remove liquidity\n @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n @param userData Additional (optional) data sent with the query request\n @return amountOut Expected amount of tokens to receive"},"functionSelector":"23b39241","id":1263,"implemented":false,"kind":"function","modifiers":[],"name":"queryRemoveLiquiditySingleTokenExactIn","nameLocation":"20189:38:8","nodeType":"FunctionDefinition","parameters":{"id":1259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1249,"mutability":"mutable","name":"pool","nameLocation":"20245:4:8","nodeType":"VariableDeclaration","scope":1263,"src":"20237:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1248,"name":"address","nodeType":"ElementaryTypeName","src":"20237:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1251,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"20267:16:8","nodeType":"VariableDeclaration","scope":1263,"src":"20259:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1250,"name":"uint256","nodeType":"ElementaryTypeName","src":"20259:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1254,"mutability":"mutable","name":"tokenOut","nameLocation":"20300:8:8","nodeType":"VariableDeclaration","scope":1263,"src":"20293:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1253,"nodeType":"UserDefinedTypeName","pathNode":{"id":1252,"name":"IERC20","nameLocations":["20293:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"20293:6:8"},"referencedDeclaration":6383,"src":"20293:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1256,"mutability":"mutable","name":"sender","nameLocation":"20326:6:8","nodeType":"VariableDeclaration","scope":1263,"src":"20318:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1255,"name":"address","nodeType":"ElementaryTypeName","src":"20318:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1258,"mutability":"mutable","name":"userData","nameLocation":"20355:8:8","nodeType":"VariableDeclaration","scope":1263,"src":"20342:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1257,"name":"bytes","nodeType":"ElementaryTypeName","src":"20342:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20227:142:8"},"returnParameters":{"id":1262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1261,"mutability":"mutable","name":"amountOut","nameLocation":"20396:9:8","nodeType":"VariableDeclaration","scope":1263,"src":"20388:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1260,"name":"uint256","nodeType":"ElementaryTypeName","src":"20388:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20387:19:8"},"scope":1354,"src":"20180:227:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1264,"nodeType":"StructuredDocumentation","src":"20413:549:8","text":" @notice Queries a `removeLiquiditySingleTokenExactOut` operation without actually executing it.\n @param pool Address of the liquidity pool\n @param tokenOut Token used to remove liquidity\n @param exactAmountOut Expected exact amount of tokens to receive\n @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n @param userData Additional (optional) data sent with the query request\n @return bptAmountIn Expected amount of pool tokens to burn"},"functionSelector":"53d0bb98","id":1280,"implemented":false,"kind":"function","modifiers":[],"name":"queryRemoveLiquiditySingleTokenExactOut","nameLocation":"20976:39:8","nodeType":"FunctionDefinition","parameters":{"id":1276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1266,"mutability":"mutable","name":"pool","nameLocation":"21033:4:8","nodeType":"VariableDeclaration","scope":1280,"src":"21025:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1265,"name":"address","nodeType":"ElementaryTypeName","src":"21025:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1269,"mutability":"mutable","name":"tokenOut","nameLocation":"21054:8:8","nodeType":"VariableDeclaration","scope":1280,"src":"21047:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1268,"nodeType":"UserDefinedTypeName","pathNode":{"id":1267,"name":"IERC20","nameLocations":["21047:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"21047:6:8"},"referencedDeclaration":6383,"src":"21047:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1271,"mutability":"mutable","name":"exactAmountOut","nameLocation":"21080:14:8","nodeType":"VariableDeclaration","scope":1280,"src":"21072:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1270,"name":"uint256","nodeType":"ElementaryTypeName","src":"21072:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1273,"mutability":"mutable","name":"sender","nameLocation":"21112:6:8","nodeType":"VariableDeclaration","scope":1280,"src":"21104:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1272,"name":"address","nodeType":"ElementaryTypeName","src":"21104:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1275,"mutability":"mutable","name":"userData","nameLocation":"21141:8:8","nodeType":"VariableDeclaration","scope":1280,"src":"21128:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1274,"name":"bytes","nodeType":"ElementaryTypeName","src":"21128:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21015:140:8"},"returnParameters":{"id":1279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1278,"mutability":"mutable","name":"bptAmountIn","nameLocation":"21182:11:8","nodeType":"VariableDeclaration","scope":1280,"src":"21174:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1277,"name":"uint256","nodeType":"ElementaryTypeName","src":"21174:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21173:21:8"},"scope":1354,"src":"20967:228:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1281,"nodeType":"StructuredDocumentation","src":"21201:779:8","text":" @notice Queries a `removeLiquidityCustom` operation without actually executing it.\n @param pool Address of the liquidity pool\n @param maxBptAmountIn Maximum amount of pool tokens provided\n @param minAmountsOut Expected minimum amounts of tokens to receive, sorted in token registration order\n @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n @param userData Additional (optional) data sent with the query request\n @return bptAmountIn Expected amount of pool tokens to burn\n @return amountsOut Expected amounts of tokens to receive, sorted in token registration order\n @return returnData Arbitrary (optional) data with an encoded response from the pool"},"functionSelector":"c330c7be","id":1302,"implemented":false,"kind":"function","modifiers":[],"name":"queryRemoveLiquidityCustom","nameLocation":"21994:26:8","nodeType":"FunctionDefinition","parameters":{"id":1293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1283,"mutability":"mutable","name":"pool","nameLocation":"22038:4:8","nodeType":"VariableDeclaration","scope":1302,"src":"22030:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1282,"name":"address","nodeType":"ElementaryTypeName","src":"22030:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1285,"mutability":"mutable","name":"maxBptAmountIn","nameLocation":"22060:14:8","nodeType":"VariableDeclaration","scope":1302,"src":"22052:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1284,"name":"uint256","nodeType":"ElementaryTypeName","src":"22052:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1288,"mutability":"mutable","name":"minAmountsOut","nameLocation":"22101:13:8","nodeType":"VariableDeclaration","scope":1302,"src":"22084:30:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1286,"name":"uint256","nodeType":"ElementaryTypeName","src":"22084:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1287,"nodeType":"ArrayTypeName","src":"22084:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1290,"mutability":"mutable","name":"sender","nameLocation":"22132:6:8","nodeType":"VariableDeclaration","scope":1302,"src":"22124:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1289,"name":"address","nodeType":"ElementaryTypeName","src":"22124:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1292,"mutability":"mutable","name":"userData","nameLocation":"22161:8:8","nodeType":"VariableDeclaration","scope":1302,"src":"22148:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1291,"name":"bytes","nodeType":"ElementaryTypeName","src":"22148:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"22020:155:8"},"returnParameters":{"id":1301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1295,"mutability":"mutable","name":"bptAmountIn","nameLocation":"22202:11:8","nodeType":"VariableDeclaration","scope":1302,"src":"22194:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1294,"name":"uint256","nodeType":"ElementaryTypeName","src":"22194:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1298,"mutability":"mutable","name":"amountsOut","nameLocation":"22232:10:8","nodeType":"VariableDeclaration","scope":1302,"src":"22215:27:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1296,"name":"uint256","nodeType":"ElementaryTypeName","src":"22215:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1297,"nodeType":"ArrayTypeName","src":"22215:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1300,"mutability":"mutable","name":"returnData","nameLocation":"22257:10:8","nodeType":"VariableDeclaration","scope":1302,"src":"22244:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1299,"name":"bytes","nodeType":"ElementaryTypeName","src":"22244:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"22193:75:8"},"scope":1354,"src":"21985:284:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1303,"nodeType":"StructuredDocumentation","src":"22275:334:8","text":" @notice Queries a `removeLiquidityRecovery` operation without actually executing it.\n @param pool Address of the liquidity pool\n @param exactBptAmountIn Exact amount of pool tokens provided for the query\n @return amountsOut Expected amounts of tokens to receive, sorted in token registration order"},"functionSelector":"b037ed36","id":1313,"implemented":false,"kind":"function","modifiers":[],"name":"queryRemoveLiquidityRecovery","nameLocation":"22623:28:8","nodeType":"FunctionDefinition","parameters":{"id":1308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"pool","nameLocation":"22669:4:8","nodeType":"VariableDeclaration","scope":1313,"src":"22661:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1304,"name":"address","nodeType":"ElementaryTypeName","src":"22661:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1307,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"22691:16:8","nodeType":"VariableDeclaration","scope":1313,"src":"22683:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1306,"name":"uint256","nodeType":"ElementaryTypeName","src":"22683:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22651:62:8"},"returnParameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1311,"mutability":"mutable","name":"amountsOut","nameLocation":"22749:10:8","nodeType":"VariableDeclaration","scope":1313,"src":"22732:27:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1309,"name":"uint256","nodeType":"ElementaryTypeName","src":"22732:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1310,"nodeType":"ArrayTypeName","src":"22732:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"22731:29:8"},"scope":1354,"src":"22614:147:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1314,"nodeType":"StructuredDocumentation","src":"22767:637:8","text":" @notice Queries a swap operation specifying an exact input token amount without actually executing it.\n @param pool Address of the liquidity pool\n @param tokenIn Token to be swapped from\n @param tokenOut Token to be swapped to\n @param exactAmountIn Exact amounts of input tokens to send\n @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n @param userData Additional (optional) data sent with the query request\n @return amountOut Calculated amount of output tokens to be received in exchange for the given input tokens"},"functionSelector":"3ebc54e5","id":1333,"implemented":false,"kind":"function","modifiers":[],"name":"querySwapSingleTokenExactIn","nameLocation":"23418:27:8","nodeType":"FunctionDefinition","parameters":{"id":1329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1316,"mutability":"mutable","name":"pool","nameLocation":"23463:4:8","nodeType":"VariableDeclaration","scope":1333,"src":"23455:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1315,"name":"address","nodeType":"ElementaryTypeName","src":"23455:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1319,"mutability":"mutable","name":"tokenIn","nameLocation":"23484:7:8","nodeType":"VariableDeclaration","scope":1333,"src":"23477:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1318,"nodeType":"UserDefinedTypeName","pathNode":{"id":1317,"name":"IERC20","nameLocations":["23477:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"23477:6:8"},"referencedDeclaration":6383,"src":"23477:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1322,"mutability":"mutable","name":"tokenOut","nameLocation":"23508:8:8","nodeType":"VariableDeclaration","scope":1333,"src":"23501:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1321,"nodeType":"UserDefinedTypeName","pathNode":{"id":1320,"name":"IERC20","nameLocations":["23501:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"23501:6:8"},"referencedDeclaration":6383,"src":"23501:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1324,"mutability":"mutable","name":"exactAmountIn","nameLocation":"23534:13:8","nodeType":"VariableDeclaration","scope":1333,"src":"23526:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1323,"name":"uint256","nodeType":"ElementaryTypeName","src":"23526:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1326,"mutability":"mutable","name":"sender","nameLocation":"23565:6:8","nodeType":"VariableDeclaration","scope":1333,"src":"23557:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1325,"name":"address","nodeType":"ElementaryTypeName","src":"23557:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1328,"mutability":"mutable","name":"userData","nameLocation":"23596:8:8","nodeType":"VariableDeclaration","scope":1333,"src":"23581:23:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1327,"name":"bytes","nodeType":"ElementaryTypeName","src":"23581:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"23445:165:8"},"returnParameters":{"id":1332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"amountOut","nameLocation":"23637:9:8","nodeType":"VariableDeclaration","scope":1333,"src":"23629:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1330,"name":"uint256","nodeType":"ElementaryTypeName","src":"23629:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23628:19:8"},"scope":1354,"src":"23409:239:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1334,"nodeType":"StructuredDocumentation","src":"23654:641:8","text":" @notice Queries a swap operation specifying an exact output token amount without actually executing it.\n @param pool Address of the liquidity pool\n @param tokenIn Token to be swapped from\n @param tokenOut Token to be swapped to\n @param exactAmountOut Exact amounts of input tokens to receive\n @param sender The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\n @param userData Additional (optional) data sent with the query request\n @return amountIn Calculated amount of input tokens to be sent in exchange for the requested output tokens"},"functionSelector":"175d4408","id":1353,"implemented":false,"kind":"function","modifiers":[],"name":"querySwapSingleTokenExactOut","nameLocation":"24309:28:8","nodeType":"FunctionDefinition","parameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"pool","nameLocation":"24355:4:8","nodeType":"VariableDeclaration","scope":1353,"src":"24347:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1335,"name":"address","nodeType":"ElementaryTypeName","src":"24347:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1339,"mutability":"mutable","name":"tokenIn","nameLocation":"24376:7:8","nodeType":"VariableDeclaration","scope":1353,"src":"24369:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1338,"nodeType":"UserDefinedTypeName","pathNode":{"id":1337,"name":"IERC20","nameLocations":["24369:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"24369:6:8"},"referencedDeclaration":6383,"src":"24369:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1342,"mutability":"mutable","name":"tokenOut","nameLocation":"24400:8:8","nodeType":"VariableDeclaration","scope":1353,"src":"24393:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1341,"nodeType":"UserDefinedTypeName","pathNode":{"id":1340,"name":"IERC20","nameLocations":["24393:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"24393:6:8"},"referencedDeclaration":6383,"src":"24393:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1344,"mutability":"mutable","name":"exactAmountOut","nameLocation":"24426:14:8","nodeType":"VariableDeclaration","scope":1353,"src":"24418:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1343,"name":"uint256","nodeType":"ElementaryTypeName","src":"24418:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1346,"mutability":"mutable","name":"sender","nameLocation":"24458:6:8","nodeType":"VariableDeclaration","scope":1353,"src":"24450:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1345,"name":"address","nodeType":"ElementaryTypeName","src":"24450:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1348,"mutability":"mutable","name":"userData","nameLocation":"24489:8:8","nodeType":"VariableDeclaration","scope":1353,"src":"24474:23:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1347,"name":"bytes","nodeType":"ElementaryTypeName","src":"24474:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"24337:166:8"},"returnParameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"amountIn","nameLocation":"24530:8:8","nodeType":"VariableDeclaration","scope":1353,"src":"24522:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1350,"name":"uint256","nodeType":"ElementaryTypeName","src":"24522:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24521:18:8"},"scope":1354,"src":"24300:240:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1355,"src":"422:24120:8","usedErrors":[],"usedEvents":[]}],"src":"46:24497:8"},"id":8},"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","exportedSymbols":{"IAuthentication":[14],"IVault":[1392],"IVaultAdmin":[1682],"IVaultErrors":[2049],"IVaultEvents":[2288],"IVaultExtension":[2707],"IVaultMain":[2843]},"id":1393,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1356,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:9"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","file":"../solidity-utils/helpers/IAuthentication.sol","id":1358,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1393,"sourceUnit":15,"src":"72:80:9","symbolAliases":[{"foreign":{"id":1357,"name":"IAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"81:15:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol","file":"./IVaultExtension.sol","id":1360,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1393,"sourceUnit":2708,"src":"153:56:9","symbolAliases":[{"foreign":{"id":1359,"name":"IVaultExtension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"162:15:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol","file":"./IVaultErrors.sol","id":1362,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1393,"sourceUnit":2050,"src":"210:50:9","symbolAliases":[{"foreign":{"id":1361,"name":"IVaultErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"219:12:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol","file":"./IVaultEvents.sol","id":1364,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1393,"sourceUnit":2289,"src":"261:50:9","symbolAliases":[{"foreign":{"id":1363,"name":"IVaultEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2288,"src":"270:12:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol","file":"./IVaultAdmin.sol","id":1366,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1393,"sourceUnit":1683,"src":"312:48:9","symbolAliases":[{"foreign":{"id":1365,"name":"IVaultAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"321:11:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol","file":"./IVaultMain.sol","id":1368,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1393,"sourceUnit":2844,"src":"361:46:9","symbolAliases":[{"foreign":{"id":1367,"name":"IVaultMain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"370:10:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1370,"name":"IVaultMain","nameLocations":["539:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":2843,"src":"539:10:9"},"id":1371,"nodeType":"InheritanceSpecifier","src":"539:10:9"},{"baseName":{"id":1372,"name":"IVaultExtension","nameLocations":["551:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":2707,"src":"551:15:9"},"id":1373,"nodeType":"InheritanceSpecifier","src":"551:15:9"},{"baseName":{"id":1374,"name":"IVaultAdmin","nameLocations":["568:11:9"],"nodeType":"IdentifierPath","referencedDeclaration":1682,"src":"568:11:9"},"id":1375,"nodeType":"InheritanceSpecifier","src":"568:11:9"},{"baseName":{"id":1376,"name":"IVaultErrors","nameLocations":["581:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"581:12:9"},"id":1377,"nodeType":"InheritanceSpecifier","src":"581:12:9"},{"baseName":{"id":1378,"name":"IVaultEvents","nameLocations":["595:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":2288,"src":"595:12:9"},"id":1379,"nodeType":"InheritanceSpecifier","src":"595:12:9"},{"baseName":{"id":1380,"name":"IAuthentication","nameLocations":["609:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":14,"src":"609:15:9"},"id":1381,"nodeType":"InheritanceSpecifier","src":"609:15:9"}],"canonicalName":"IVault","contractDependencies":[],"contractKind":"interface","documentation":{"id":1369,"nodeType":"StructuredDocumentation","src":"409:110:9","text":"@notice Composite interface for all Vault operations: swap, add/remove liquidity, and associated queries."},"fullyImplemented":false,"id":1392,"linearizedBaseContracts":[1392,14,2288,2049,1682,2707,2843],"name":"IVault","nameLocation":"529:6:9","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1410,2311],"documentation":{"id":1382,"nodeType":"StructuredDocumentation","src":"631:41:9","text":"@return vault The main Vault address."},"functionSelector":"fbfa77cf","id":1391,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"686:5:9","nodeType":"FunctionDefinition","overrides":{"id":1386,"nodeType":"OverrideSpecifier","overrides":[{"id":1384,"name":"IVaultAdmin","nameLocations":["717:11:9"],"nodeType":"IdentifierPath","referencedDeclaration":1682,"src":"717:11:9"},{"id":1385,"name":"IVaultExtension","nameLocations":["730:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":2707,"src":"730:15:9"}],"src":"708:38:9"},"parameters":{"id":1383,"nodeType":"ParameterList","parameters":[],"src":"691:2:9"},"returnParameters":{"id":1390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1391,"src":"756:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"},"typeName":{"id":1388,"nodeType":"UserDefinedTypeName","pathNode":{"id":1387,"name":"IVault","nameLocations":["756:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"756:6:9"},"referencedDeclaration":1392,"src":"756:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"visibility":"internal"}],"src":"755:8:9"},"scope":1392,"src":"677:87:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1393,"src":"519:247:9","usedErrors":[5,1694,1699,1704,1709,1718,1724,1727,1730,1733,1736,1739,1742,1751,1754,1757,1760,1763,1766,1769,1772,1775,1778,1781,1784,1787,1790,1793,1799,1806,1813,1816,1819,1829,1839,1846,1849,1852,1855,1865,1875,1882,1885,1888,1891,1894,1897,1900,1903,1906,1911,1916,1921,1924,1927,1930,1933,1936,1941,1946,1951,1957,1963,1966,1974,1980,1986,1989,1992,1995,2000,2010,2020,2027,2030,2033,2036,2039,2042,2045,2048],"usedEvents":[2087,2092,2111,2123,2135,2153,2171,2176,2179,2182,2189,2196,2203,2210,2217,2223,2229,2241,2251,2261,2273,2278,2287]}],"src":"46:721:9"},"id":9},"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol","exportedSymbols":{"IAuthorizer":[368],"IERC4626":[5653],"IProtocolFeeController":[857],"IVault":[1392],"IVaultAdmin":[1682]},"id":1683,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1394,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:10"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":1396,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1683,"sourceUnit":5654,"src":"72:75:10","symbolAliases":[{"foreign":{"id":1395,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5653,"src":"81:8:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"./IProtocolFeeController.sol","id":1398,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1683,"sourceUnit":858,"src":"149:70:10","symbolAliases":[{"foreign":{"id":1397,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"158:22:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","file":"./IAuthorizer.sol","id":1400,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1683,"sourceUnit":369,"src":"220:48:10","symbolAliases":[{"foreign":{"id":1399,"name":"IAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"229:11:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"./IVault.sol","id":1402,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1683,"sourceUnit":1393,"src":"269:38:10","symbolAliases":[{"foreign":{"id":1401,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"278:6:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultAdmin","contractDependencies":[],"contractKind":"interface","documentation":{"id":1403,"nodeType":"StructuredDocumentation","src":"309:276:10","text":" @notice Interface for functions defined on the `VaultAdmin` contract.\n @dev `VaultAdmin` is the Proxy extension of `VaultExtension`, and handles the least critical operations,\n as two delegate calls add gas to each call. Most of the permissioned calls are here."},"fullyImplemented":false,"id":1682,"linearizedBaseContracts":[1682],"name":"IVaultAdmin","nameLocation":"596:11:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1404,"nodeType":"StructuredDocumentation","src":"841:206:10","text":" @notice Returns the main Vault address.\n @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n @return vault The address of the main Vault"},"functionSelector":"fbfa77cf","id":1410,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"1061:5:10","nodeType":"FunctionDefinition","parameters":{"id":1405,"nodeType":"ParameterList","parameters":[],"src":"1066:2:10"},"returnParameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1408,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1410,"src":"1092:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"},"typeName":{"id":1407,"nodeType":"UserDefinedTypeName","pathNode":{"id":1406,"name":"IVault","nameLocations":["1092:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"1092:6:10"},"referencedDeclaration":1392,"src":"1092:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"visibility":"internal"}],"src":"1091:8:10"},"scope":1682,"src":"1052:48:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1411,"nodeType":"StructuredDocumentation","src":"1106:326:10","text":" @notice Returns the Vault's pause window end time.\n @dev This value is immutable, and represents the timestamp after which the Vault can no longer be paused\n by governance. Balancer timestamps are 32 bits.\n @return pauseWindowEndTime The timestamp when the Vault's pause window ends"},"functionSelector":"8a8d123a","id":1416,"implemented":false,"kind":"function","modifiers":[],"name":"getPauseWindowEndTime","nameLocation":"1446:21:10","nodeType":"FunctionDefinition","parameters":{"id":1412,"nodeType":"ParameterList","parameters":[],"src":"1467:2:10"},"returnParameters":{"id":1415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1414,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"1500:18:10","nodeType":"VariableDeclaration","scope":1416,"src":"1493:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1413,"name":"uint32","nodeType":"ElementaryTypeName","src":"1493:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1492:27:10"},"scope":1682,"src":"1437:83:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1417,"nodeType":"StructuredDocumentation","src":"1526:414:10","text":" @notice Returns the Vault's buffer period duration.\n @dev This value is immutable. It represents the period during which, if paused, the Vault will remain paused.\n This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer\n timestamps are 32 bits.\n @return bufferPeriodDuration The length of the buffer period in seconds"},"functionSelector":"20c1fb7a","id":1422,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferPeriodDuration","nameLocation":"1954:23:10","nodeType":"FunctionDefinition","parameters":{"id":1418,"nodeType":"ParameterList","parameters":[],"src":"1977:2:10"},"returnParameters":{"id":1421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1420,"mutability":"mutable","name":"bufferPeriodDuration","nameLocation":"2010:20:10","nodeType":"VariableDeclaration","scope":1422,"src":"2003:27:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1419,"name":"uint32","nodeType":"ElementaryTypeName","src":"2003:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2002:29:10"},"scope":1682,"src":"1945:87:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1423,"nodeType":"StructuredDocumentation","src":"2038:321:10","text":" @notice Returns the Vault's buffer period end time.\n @dev This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer\n timestamps are 32 bits.\n @return bufferPeriodEndTime The timestamp after which the Vault remains permanently unpaused"},"functionSelector":"cd51c12f","id":1428,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferPeriodEndTime","nameLocation":"2373:22:10","nodeType":"FunctionDefinition","parameters":{"id":1424,"nodeType":"ParameterList","parameters":[],"src":"2395:2:10"},"returnParameters":{"id":1427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1426,"mutability":"mutable","name":"bufferPeriodEndTime","nameLocation":"2428:19:10","nodeType":"VariableDeclaration","scope":1428,"src":"2421:26:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1425,"name":"uint32","nodeType":"ElementaryTypeName","src":"2421:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2420:28:10"},"scope":1682,"src":"2364:85:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1429,"nodeType":"StructuredDocumentation","src":"2455:193:10","text":" @notice Get the minimum number of tokens in a pool.\n @dev We expect the vast majority of pools to be 2-token.\n @return minTokens The minimum token count of a pool"},"functionSelector":"a8175b27","id":1434,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumPoolTokens","nameLocation":"2662:20:10","nodeType":"FunctionDefinition","parameters":{"id":1430,"nodeType":"ParameterList","parameters":[],"src":"2682:2:10"},"returnParameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1432,"mutability":"mutable","name":"minTokens","nameLocation":"2716:9:10","nodeType":"VariableDeclaration","scope":1434,"src":"2708:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1431,"name":"uint256","nodeType":"ElementaryTypeName","src":"2708:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2707:19:10"},"scope":1682,"src":"2653:74:10","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":1435,"nodeType":"StructuredDocumentation","src":"2733:129:10","text":" @notice Get the maximum number of tokens in a pool.\n @return maxTokens The maximum token count of a pool"},"functionSelector":"2e42f4d5","id":1440,"implemented":false,"kind":"function","modifiers":[],"name":"getMaximumPoolTokens","nameLocation":"2876:20:10","nodeType":"FunctionDefinition","parameters":{"id":1436,"nodeType":"ParameterList","parameters":[],"src":"2896:2:10"},"returnParameters":{"id":1439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1438,"mutability":"mutable","name":"maxTokens","nameLocation":"2930:9:10","nodeType":"VariableDeclaration","scope":1440,"src":"2922:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1437,"name":"uint256","nodeType":"ElementaryTypeName","src":"2922:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2921:19:10"},"scope":1682,"src":"2867:74:10","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":1441,"nodeType":"StructuredDocumentation","src":"2947:439:10","text":" @notice Get the minimum total supply of pool tokens (BPT) for an initialized pool.\n @dev This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT\n is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\n @return poolMinimumTotalSupply The minimum total supply a pool can have after initialization"},"functionSelector":"d0965a6b","id":1446,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolMinimumTotalSupply","nameLocation":"3400:25:10","nodeType":"FunctionDefinition","parameters":{"id":1442,"nodeType":"ParameterList","parameters":[],"src":"3425:2:10"},"returnParameters":{"id":1445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1444,"mutability":"mutable","name":"poolMinimumTotalSupply","nameLocation":"3459:22:10","nodeType":"VariableDeclaration","scope":1446,"src":"3451:30:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1443,"name":"uint256","nodeType":"ElementaryTypeName","src":"3451:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3450:32:10"},"scope":1682,"src":"3391:92:10","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":1447,"nodeType":"StructuredDocumentation","src":"3489:502:10","text":" @notice Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\n @dev This prevents buffers from being completely drained. When the buffer is initialized, this minimum number\n of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal\n to the Vault, as buffers are not tokenized.\n @return bufferMinimumTotalSupply The minimum total supply a buffer can have after initialization"},"functionSelector":"26a8a991","id":1452,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferMinimumTotalSupply","nameLocation":"4005:27:10","nodeType":"FunctionDefinition","parameters":{"id":1448,"nodeType":"ParameterList","parameters":[],"src":"4032:2:10"},"returnParameters":{"id":1451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1450,"mutability":"mutable","name":"bufferMinimumTotalSupply","nameLocation":"4066:24:10","nodeType":"VariableDeclaration","scope":1452,"src":"4058:32:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1449,"name":"uint256","nodeType":"ElementaryTypeName","src":"4058:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4057:34:10"},"scope":1682,"src":"3996:96:10","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":1453,"nodeType":"StructuredDocumentation","src":"4098:291:10","text":" @notice Get the minimum trade amount in a pool operation.\n @dev This limit is applied to the 18-decimal \"upscaled\" amount in any operation (swap, add/remove liquidity).\n @return minimumTradeAmount The minimum trade amount as an 18-decimal floating point number"},"functionSelector":"e2cb0ba0","id":1458,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumTradeAmount","nameLocation":"4403:21:10","nodeType":"FunctionDefinition","parameters":{"id":1454,"nodeType":"ParameterList","parameters":[],"src":"4424:2:10"},"returnParameters":{"id":1457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"minimumTradeAmount","nameLocation":"4458:18:10","nodeType":"VariableDeclaration","scope":1458,"src":"4450:26:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1455,"name":"uint256","nodeType":"ElementaryTypeName","src":"4450:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4449:28:10"},"scope":1682,"src":"4394:84:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1459,"nodeType":"StructuredDocumentation","src":"4484:271:10","text":" @notice Get the minimum wrap amount in a buffer operation.\n @dev This limit is applied to the wrap operation amount, in native underlying token decimals.\n @return minimumWrapAmount The minimum wrap amount in native underlying token decimals"},"functionSelector":"53956aa2","id":1464,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumWrapAmount","nameLocation":"4769:20:10","nodeType":"FunctionDefinition","parameters":{"id":1460,"nodeType":"ParameterList","parameters":[],"src":"4789:2:10"},"returnParameters":{"id":1463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1462,"mutability":"mutable","name":"minimumWrapAmount","nameLocation":"4823:17:10","nodeType":"VariableDeclaration","scope":1464,"src":"4815:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1461,"name":"uint256","nodeType":"ElementaryTypeName","src":"4815:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4814:27:10"},"scope":1682,"src":"4760:82:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1465,"nodeType":"StructuredDocumentation","src":"5069:529:10","text":" @notice Indicates whether the Vault is paused.\n @dev If the Vault is paused, all non-Recovery Mode state-changing operations on pools will revert. Note that\n ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not\n also pause buffers (though we anticipate they would likely be paused and unpaused together). Call\n `areBuffersPaused` to check the pause state of the buffers.\n @return vaultPaused True if the Vault is paused"},"functionSelector":"098401f5","id":1470,"implemented":false,"kind":"function","modifiers":[],"name":"isVaultPaused","nameLocation":"5612:13:10","nodeType":"FunctionDefinition","parameters":{"id":1466,"nodeType":"ParameterList","parameters":[],"src":"5625:2:10"},"returnParameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"vaultPaused","nameLocation":"5656:11:10","nodeType":"VariableDeclaration","scope":1470,"src":"5651:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1467,"name":"bool","nodeType":"ElementaryTypeName","src":"5651:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5650:18:10"},"scope":1682,"src":"5603:66:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1471,"nodeType":"StructuredDocumentation","src":"5675:400:10","text":" @notice Returns the paused status, and end times of the Vault's pause window and buffer period.\n @dev Balancer timestamps are 32 bits.\n @return vaultPaused True if the Vault is paused\n @return vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\n @return vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period"},"functionSelector":"85c8c015","id":1480,"implemented":false,"kind":"function","modifiers":[],"name":"getVaultPausedState","nameLocation":"6089:19:10","nodeType":"FunctionDefinition","parameters":{"id":1472,"nodeType":"ParameterList","parameters":[],"src":"6108:2:10"},"returnParameters":{"id":1479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1474,"mutability":"mutable","name":"vaultPaused","nameLocation":"6163:11:10","nodeType":"VariableDeclaration","scope":1480,"src":"6158:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1473,"name":"bool","nodeType":"ElementaryTypeName","src":"6158:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1476,"mutability":"mutable","name":"vaultPauseWindowEndTime","nameLocation":"6183:23:10","nodeType":"VariableDeclaration","scope":1480,"src":"6176:30:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1475,"name":"uint32","nodeType":"ElementaryTypeName","src":"6176:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1478,"mutability":"mutable","name":"vaultBufferPeriodEndTime","nameLocation":"6215:24:10","nodeType":"VariableDeclaration","scope":1480,"src":"6208:31:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1477,"name":"uint32","nodeType":"ElementaryTypeName","src":"6208:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"6157:83:10"},"scope":1682,"src":"6080:161:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1481,"nodeType":"StructuredDocumentation","src":"6247:517:10","text":" @notice Pause the Vault: an emergency action which disables all operational state-changing functions on pools.\n @dev This is a permissioned function that will only work during the Pause Window set during deployment.\n Note that ERC4626 buffer operations have an independent pause mechanism, which is not affected by pausing\n the Vault. Custom routers could still wrap/unwrap using buffers while the Vault is paused, unless buffers\n are also paused (with `pauseVaultBuffers`)."},"functionSelector":"9e0879c2","id":1484,"implemented":false,"kind":"function","modifiers":[],"name":"pauseVault","nameLocation":"6778:10:10","nodeType":"FunctionDefinition","parameters":{"id":1482,"nodeType":"ParameterList","parameters":[],"src":"6788:2:10"},"returnParameters":{"id":1483,"nodeType":"ParameterList","parameters":[],"src":"6799:0:10"},"scope":1682,"src":"6769:31:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1485,"nodeType":"StructuredDocumentation","src":"6806:569:10","text":" @notice Reverse a `pause` operation, and restore Vault pool operations to normal functionality.\n @dev This is a permissioned function that will only work on a paused Vault within the Buffer Period set during\n deployment. Note that the Vault will automatically unpause after the Buffer Period expires. As noted above,\n ERC4626 buffers and Vault operations on pools are independent. Unpausing the Vault does not reverse\n `pauseVaultBuffers`. If buffers were also paused, they will remain in that state until explicitly unpaused."},"functionSelector":"0b7562be","id":1488,"implemented":false,"kind":"function","modifiers":[],"name":"unpauseVault","nameLocation":"7389:12:10","nodeType":"FunctionDefinition","parameters":{"id":1486,"nodeType":"ParameterList","parameters":[],"src":"7401:2:10"},"returnParameters":{"id":1487,"nodeType":"ParameterList","parameters":[],"src":"7412:0:10"},"scope":1682,"src":"7380:33:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1489,"nodeType":"StructuredDocumentation","src":"7639:276:10","text":" @notice Pause the Pool: an emergency action which disables all pool functions.\n @dev This is a permissioned function that will only work during the Pause Window set during pool factory\n deployment.\n @param pool The pool being paused"},"functionSelector":"55aca1ec","id":1494,"implemented":false,"kind":"function","modifiers":[],"name":"pausePool","nameLocation":"7929:9:10","nodeType":"FunctionDefinition","parameters":{"id":1492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1491,"mutability":"mutable","name":"pool","nameLocation":"7947:4:10","nodeType":"VariableDeclaration","scope":1494,"src":"7939:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1490,"name":"address","nodeType":"ElementaryTypeName","src":"7939:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7938:14:10"},"returnParameters":{"id":1493,"nodeType":"ParameterList","parameters":[],"src":"7961:0:10"},"scope":1682,"src":"7920:42:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1495,"nodeType":"StructuredDocumentation","src":"7968:366:10","text":" @notice Reverse a `pause` operation, and restore the Pool to normal functionality.\n @dev This is a permissioned function that will only work on a paused Pool within the Buffer Period set during\n deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\n @param pool The pool being unpaused"},"functionSelector":"f21c38cd","id":1500,"implemented":false,"kind":"function","modifiers":[],"name":"unpausePool","nameLocation":"8348:11:10","nodeType":"FunctionDefinition","parameters":{"id":1498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1497,"mutability":"mutable","name":"pool","nameLocation":"8368:4:10","nodeType":"VariableDeclaration","scope":1500,"src":"8360:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1496,"name":"address","nodeType":"ElementaryTypeName","src":"8360:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8359:14:10"},"returnParameters":{"id":1499,"nodeType":"ParameterList","parameters":[],"src":"8382:0:10"},"scope":1682,"src":"8339:44:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1501,"nodeType":"StructuredDocumentation","src":"8606:520:10","text":" @notice Assigns a new static swap fee percentage to the specified pool.\n @dev This is a permissioned function, disabled if the pool is paused. The swap fee percentage must be within\n the bounds specified by the pool's implementation of `ISwapFeePercentageBounds`.\n Emits the SwapFeePercentageChanged event.\n @param pool The address of the pool for which the static swap fee will be changed\n @param swapFeePercentage The new swap fee percentage to apply to the pool"},"functionSelector":"d15126ba","id":1508,"implemented":false,"kind":"function","modifiers":[],"name":"setStaticSwapFeePercentage","nameLocation":"9140:26:10","nodeType":"FunctionDefinition","parameters":{"id":1506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1503,"mutability":"mutable","name":"pool","nameLocation":"9175:4:10","nodeType":"VariableDeclaration","scope":1508,"src":"9167:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1502,"name":"address","nodeType":"ElementaryTypeName","src":"9167:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1505,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"9189:17:10","nodeType":"VariableDeclaration","scope":1508,"src":"9181:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1504,"name":"uint256","nodeType":"ElementaryTypeName","src":"9181:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9166:41:10"},"returnParameters":{"id":1507,"nodeType":"ParameterList","parameters":[],"src":"9216:0:10"},"scope":1682,"src":"9131:86:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1509,"nodeType":"StructuredDocumentation","src":"9223:463:10","text":" @notice Collects accumulated aggregate swap and yield fees for the specified pool.\n @dev Fees are sent to the ProtocolFeeController address.\n @param pool The pool on which all aggregate fees should be collected\n @return swapFeeAmounts An array with the total swap fees collected, sorted in token registration order\n @return yieldFeeAmounts An array with the total yield fees collected, sorted in token registration order"},"functionSelector":"8f4ab9ca","id":1520,"implemented":false,"kind":"function","modifiers":[],"name":"collectAggregateFees","nameLocation":"9700:20:10","nodeType":"FunctionDefinition","parameters":{"id":1512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1511,"mutability":"mutable","name":"pool","nameLocation":"9738:4:10","nodeType":"VariableDeclaration","scope":1520,"src":"9730:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1510,"name":"address","nodeType":"ElementaryTypeName","src":"9730:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9720:28:10"},"returnParameters":{"id":1519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1515,"mutability":"mutable","name":"swapFeeAmounts","nameLocation":"9784:14:10","nodeType":"VariableDeclaration","scope":1520,"src":"9767:31:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1513,"name":"uint256","nodeType":"ElementaryTypeName","src":"9767:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1514,"nodeType":"ArrayTypeName","src":"9767:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1518,"mutability":"mutable","name":"yieldFeeAmounts","nameLocation":"9817:15:10","nodeType":"VariableDeclaration","scope":1520,"src":"9800:32:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1516,"name":"uint256","nodeType":"ElementaryTypeName","src":"9800:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1517,"nodeType":"ArrayTypeName","src":"9800:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"9766:67:10"},"scope":1682,"src":"9691:143:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1521,"nodeType":"StructuredDocumentation","src":"9840:755:10","text":" @notice Update an aggregate swap fee percentage.\n @dev Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee\n for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's\n fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also\n that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol).\n Emits an `AggregateSwapFeePercentageChanged` event.\n @param pool The pool whose swap fee percentage will be updated\n @param newAggregateSwapFeePercentage The new aggregate swap fee percentage"},"functionSelector":"5e0b06f4","id":1528,"implemented":false,"kind":"function","modifiers":[],"name":"updateAggregateSwapFeePercentage","nameLocation":"10609:32:10","nodeType":"FunctionDefinition","parameters":{"id":1526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1523,"mutability":"mutable","name":"pool","nameLocation":"10650:4:10","nodeType":"VariableDeclaration","scope":1528,"src":"10642:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1522,"name":"address","nodeType":"ElementaryTypeName","src":"10642:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1525,"mutability":"mutable","name":"newAggregateSwapFeePercentage","nameLocation":"10664:29:10","nodeType":"VariableDeclaration","scope":1528,"src":"10656:37:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1524,"name":"uint256","nodeType":"ElementaryTypeName","src":"10656:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10641:53:10"},"returnParameters":{"id":1527,"nodeType":"ParameterList","parameters":[],"src":"10703:0:10"},"scope":1682,"src":"10600:104:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1529,"nodeType":"StructuredDocumentation","src":"10710:760:10","text":" @notice Update an aggregate yield fee percentage.\n @dev Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee\n for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's\n fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also\n that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol).\n Emits an `AggregateYieldFeePercentageChanged` event.\n @param pool The pool whose yield fee percentage will be updated\n @param newAggregateYieldFeePercentage The new aggregate yield fee percentage"},"functionSelector":"e253670a","id":1536,"implemented":false,"kind":"function","modifiers":[],"name":"updateAggregateYieldFeePercentage","nameLocation":"11484:33:10","nodeType":"FunctionDefinition","parameters":{"id":1534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1531,"mutability":"mutable","name":"pool","nameLocation":"11526:4:10","nodeType":"VariableDeclaration","scope":1536,"src":"11518:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1530,"name":"address","nodeType":"ElementaryTypeName","src":"11518:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1533,"mutability":"mutable","name":"newAggregateYieldFeePercentage","nameLocation":"11540:30:10","nodeType":"VariableDeclaration","scope":1536,"src":"11532:38:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1532,"name":"uint256","nodeType":"ElementaryTypeName","src":"11532:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11517:54:10"},"returnParameters":{"id":1535,"nodeType":"ParameterList","parameters":[],"src":"11580:0:10"},"scope":1682,"src":"11475:106:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1537,"nodeType":"StructuredDocumentation","src":"11587:249:10","text":" @notice Sets a new Protocol Fee Controller for the Vault.\n @dev This is a permissioned call. Emits a `ProtocolFeeControllerChanged` event.\n @param newProtocolFeeController The address of the new Protocol Fee Controller"},"functionSelector":"2d771389","id":1543,"implemented":false,"kind":"function","modifiers":[],"name":"setProtocolFeeController","nameLocation":"11850:24:10","nodeType":"FunctionDefinition","parameters":{"id":1541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"newProtocolFeeController","nameLocation":"11898:24:10","nodeType":"VariableDeclaration","scope":1543,"src":"11875:47:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"},"typeName":{"id":1539,"nodeType":"UserDefinedTypeName","pathNode":{"id":1538,"name":"IProtocolFeeController","nameLocations":["11875:22:10"],"nodeType":"IdentifierPath","referencedDeclaration":857,"src":"11875:22:10"},"referencedDeclaration":857,"src":"11875:22:10","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"src":"11874:49:10"},"returnParameters":{"id":1542,"nodeType":"ParameterList","parameters":[],"src":"11932:0:10"},"scope":1682,"src":"11841:92:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1544,"nodeType":"StructuredDocumentation","src":"12160:557:10","text":" @notice Enable recovery mode for a pool.\n @dev This is a permissioned function. It enables a safe proportional withdrawal, with no external calls.\n Since there are no external calls, ensuring that entering Recovery Mode cannot fail, we cannot compute and so\n must forfeit any yield fees between the last operation and enabling Recovery Mode. For the same reason, live\n balances cannot be updated while in Recovery Mode, as doing so might cause withdrawals to fail.\n @param pool The address of the pool"},"functionSelector":"dc3f574e","id":1549,"implemented":false,"kind":"function","modifiers":[],"name":"enableRecoveryMode","nameLocation":"12731:18:10","nodeType":"FunctionDefinition","parameters":{"id":1547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1546,"mutability":"mutable","name":"pool","nameLocation":"12758:4:10","nodeType":"VariableDeclaration","scope":1549,"src":"12750:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1545,"name":"address","nodeType":"ElementaryTypeName","src":"12750:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12749:14:10"},"returnParameters":{"id":1548,"nodeType":"ParameterList","parameters":[],"src":"12772:0:10"},"scope":1682,"src":"12722:51:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1550,"nodeType":"StructuredDocumentation","src":"12779:409:10","text":" @notice Disable recovery mode for a pool.\n @dev This is a permissioned function. It re-syncs live balances (which could not be updated during\n Recovery Mode), forfeiting any yield fees that accrued while enabled. It makes external calls, and could\n potentially fail if there is an issue with any associated Rate Providers.\n @param pool The address of the pool"},"functionSelector":"bffb78b2","id":1555,"implemented":false,"kind":"function","modifiers":[],"name":"disableRecoveryMode","nameLocation":"13202:19:10","nodeType":"FunctionDefinition","parameters":{"id":1553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1552,"mutability":"mutable","name":"pool","nameLocation":"13230:4:10","nodeType":"VariableDeclaration","scope":1555,"src":"13222:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1551,"name":"address","nodeType":"ElementaryTypeName","src":"13222:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13221:14:10"},"returnParameters":{"id":1554,"nodeType":"ParameterList","parameters":[],"src":"13244:0:10"},"scope":1682,"src":"13193:52:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1556,"nodeType":"StructuredDocumentation","src":"13476:653:10","text":" @notice Disables query functionality on the Vault. Can only be called by governance.\n @dev The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from\n settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable\n queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2).\n This function can be acted upon as an emergency measure in ambiguous contexts where it's not 100% clear whether\n disabling queries is completely necessary; queries can still be re-enabled after this call."},"functionSelector":"de1a36a6","id":1559,"implemented":false,"kind":"function","modifiers":[],"name":"disableQuery","nameLocation":"14143:12:10","nodeType":"FunctionDefinition","parameters":{"id":1557,"nodeType":"ParameterList","parameters":[],"src":"14155:2:10"},"returnParameters":{"id":1558,"nodeType":"ParameterList","parameters":[],"src":"14166:0:10"},"scope":1682,"src":"14134:33:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1560,"nodeType":"StructuredDocumentation","src":"14173:223:10","text":" @notice Disables query functionality permanently on the Vault. Can only be called by governance.\n @dev Shall only be used when there is no doubt that queries pose a fundamental threat to the system."},"functionSelector":"821440f2","id":1563,"implemented":false,"kind":"function","modifiers":[],"name":"disableQueryPermanently","nameLocation":"14410:23:10","nodeType":"FunctionDefinition","parameters":{"id":1561,"nodeType":"ParameterList","parameters":[],"src":"14433:2:10"},"returnParameters":{"id":1562,"nodeType":"ParameterList","parameters":[],"src":"14444:0:10"},"scope":1682,"src":"14401:44:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1564,"nodeType":"StructuredDocumentation","src":"14451:166:10","text":" @notice Enables query functionality on the Vault. Can only be called by governance.\n @dev Only works if queries are not permanently disabled."},"functionSelector":"e0d55605","id":1567,"implemented":false,"kind":"function","modifiers":[],"name":"enableQuery","nameLocation":"14631:11:10","nodeType":"FunctionDefinition","parameters":{"id":1565,"nodeType":"ParameterList","parameters":[],"src":"14642:2:10"},"returnParameters":{"id":1566,"nodeType":"ParameterList","parameters":[],"src":"14653:0:10"},"scope":1682,"src":"14622:32:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1568,"nodeType":"StructuredDocumentation","src":"14881:590:10","text":" @notice Indicates whether the Vault buffers are paused.\n @dev When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true)\n will revert. Pausing buffers is reversible. Note that ERC4626 buffers and the Vault have separate and\n independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they\n would likely be paused and unpaused together). Call `isVaultPaused` to check the pause state of the Vault.\n @return buffersPaused True if the Vault buffers are paused"},"functionSelector":"55cba7fe","id":1573,"implemented":false,"kind":"function","modifiers":[],"name":"areBuffersPaused","nameLocation":"15485:16:10","nodeType":"FunctionDefinition","parameters":{"id":1569,"nodeType":"ParameterList","parameters":[],"src":"15501:2:10"},"returnParameters":{"id":1572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1571,"mutability":"mutable","name":"buffersPaused","nameLocation":"15532:13:10","nodeType":"VariableDeclaration","scope":1573,"src":"15527:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1570,"name":"bool","nodeType":"ElementaryTypeName","src":"15527:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15526:20:10"},"scope":1682,"src":"15476:71:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1574,"nodeType":"StructuredDocumentation","src":"15553:619:10","text":" @notice Pauses native vault buffers globally.\n @dev When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's\n `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. Currently it's not\n possible to pause vault buffers individually.\n This is a permissioned call, and is reversible (see `unpauseVaultBuffers`). Note that the Vault has a separate\n and independent pausing mechanism. It is possible to pause the Vault (i.e. pool operations), without affecting\n buffers, and vice versa."},"functionSelector":"e085c5a8","id":1577,"implemented":false,"kind":"function","modifiers":[],"name":"pauseVaultBuffers","nameLocation":"16186:17:10","nodeType":"FunctionDefinition","parameters":{"id":1575,"nodeType":"ParameterList","parameters":[],"src":"16203:2:10"},"returnParameters":{"id":1576,"nodeType":"ParameterList","parameters":[],"src":"16214:0:10"},"scope":1682,"src":"16177:38:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1578,"nodeType":"StructuredDocumentation","src":"16221:545:10","text":" @notice Unpauses native vault buffers globally.\n @dev When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's\n `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. As noted above,\n ERC4626 buffers and Vault operations on pools are independent. Unpausing buffers does not reverse `pauseVault`.\n If the Vault was also paused, it will remain in that state until explicitly unpaused.\n This is a permissioned call."},"functionSelector":"b9212b49","id":1581,"implemented":false,"kind":"function","modifiers":[],"name":"unpauseVaultBuffers","nameLocation":"16780:19:10","nodeType":"FunctionDefinition","parameters":{"id":1579,"nodeType":"ParameterList","parameters":[],"src":"16799:2:10"},"returnParameters":{"id":1580,"nodeType":"ParameterList","parameters":[],"src":"16810:0:10"},"scope":1682,"src":"16771:40:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1582,"nodeType":"StructuredDocumentation","src":"16817:860:10","text":" @notice Initializes buffer for the given wrapped token.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param amountUnderlyingRaw Amount of underlying tokens that will be deposited into the buffer\n @param amountWrappedRaw Amount of wrapped tokens that will be deposited into the buffer\n @param minIssuedShares Minimum amount of shares to receive from the buffer, expressed in underlying token\n native decimals\n @param sharesOwner Address that will own the deposited liquidity. Only this address will be able to remove\n liquidity from the buffer\n @return issuedShares the amount of tokens sharesOwner has in the buffer, expressed in underlying token amounts.\n (it is the BPT of an internal ERC4626 buffer). It is expressed in underlying token native decimals."},"functionSelector":"653eb3b0","id":1598,"implemented":false,"kind":"function","modifiers":[],"name":"initializeBuffer","nameLocation":"17691:16:10","nodeType":"FunctionDefinition","parameters":{"id":1594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1585,"mutability":"mutable","name":"wrappedToken","nameLocation":"17726:12:10","nodeType":"VariableDeclaration","scope":1598,"src":"17717:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":1584,"nodeType":"UserDefinedTypeName","pathNode":{"id":1583,"name":"IERC4626","nameLocations":["17717:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"17717:8:10"},"referencedDeclaration":5653,"src":"17717:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1587,"mutability":"mutable","name":"amountUnderlyingRaw","nameLocation":"17756:19:10","nodeType":"VariableDeclaration","scope":1598,"src":"17748:27:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1586,"name":"uint256","nodeType":"ElementaryTypeName","src":"17748:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1589,"mutability":"mutable","name":"amountWrappedRaw","nameLocation":"17793:16:10","nodeType":"VariableDeclaration","scope":1598,"src":"17785:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1588,"name":"uint256","nodeType":"ElementaryTypeName","src":"17785:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1591,"mutability":"mutable","name":"minIssuedShares","nameLocation":"17827:15:10","nodeType":"VariableDeclaration","scope":1598,"src":"17819:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1590,"name":"uint256","nodeType":"ElementaryTypeName","src":"17819:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1593,"mutability":"mutable","name":"sharesOwner","nameLocation":"17860:11:10","nodeType":"VariableDeclaration","scope":1598,"src":"17852:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1592,"name":"address","nodeType":"ElementaryTypeName","src":"17852:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17707:170:10"},"returnParameters":{"id":1597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"issuedShares","nameLocation":"17904:12:10","nodeType":"VariableDeclaration","scope":1598,"src":"17896:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1595,"name":"uint256","nodeType":"ElementaryTypeName","src":"17896:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17895:22:10"},"scope":1682,"src":"17682:236:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1599,"nodeType":"StructuredDocumentation","src":"17924:1010:10","text":" @notice Adds liquidity to an internal ERC4626 buffer in the Vault, proportionally.\n @dev The buffer needs to be initialized beforehand.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param maxAmountUnderlyingInRaw Maximum amount of underlying tokens to add to the buffer. It is expressed in\n underlying token native decimals\n @param maxAmountWrappedInRaw Maximum amount of wrapped tokens to add to the buffer. It is expressed in wrapped\n token native decimals\n @param exactSharesToIssue The value in underlying tokens that `sharesOwner` wants to add to the buffer,\n in underlying token decimals\n @param sharesOwner Address that will own the deposited liquidity. Only this address will be able to remove\n liquidity from the buffer\n @return amountUnderlyingRaw Amount of underlying tokens deposited into the buffer\n @return amountWrappedRaw Amount of wrapped tokens deposited into the buffer"},"functionSelector":"e2a92b1a","id":1617,"implemented":false,"kind":"function","modifiers":[],"name":"addLiquidityToBuffer","nameLocation":"18948:20:10","nodeType":"FunctionDefinition","parameters":{"id":1611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"wrappedToken","nameLocation":"18987:12:10","nodeType":"VariableDeclaration","scope":1617,"src":"18978:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":1601,"nodeType":"UserDefinedTypeName","pathNode":{"id":1600,"name":"IERC4626","nameLocations":["18978:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"18978:8:10"},"referencedDeclaration":5653,"src":"18978:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1604,"mutability":"mutable","name":"maxAmountUnderlyingInRaw","nameLocation":"19017:24:10","nodeType":"VariableDeclaration","scope":1617,"src":"19009:32:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1603,"name":"uint256","nodeType":"ElementaryTypeName","src":"19009:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1606,"mutability":"mutable","name":"maxAmountWrappedInRaw","nameLocation":"19059:21:10","nodeType":"VariableDeclaration","scope":1617,"src":"19051:29:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1605,"name":"uint256","nodeType":"ElementaryTypeName","src":"19051:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1608,"mutability":"mutable","name":"exactSharesToIssue","nameLocation":"19098:18:10","nodeType":"VariableDeclaration","scope":1617,"src":"19090:26:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1607,"name":"uint256","nodeType":"ElementaryTypeName","src":"19090:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1610,"mutability":"mutable","name":"sharesOwner","nameLocation":"19134:11:10","nodeType":"VariableDeclaration","scope":1617,"src":"19126:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1609,"name":"address","nodeType":"ElementaryTypeName","src":"19126:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18968:183:10"},"returnParameters":{"id":1616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1613,"mutability":"mutable","name":"amountUnderlyingRaw","nameLocation":"19178:19:10","nodeType":"VariableDeclaration","scope":1617,"src":"19170:27:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"19170:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1615,"mutability":"mutable","name":"amountWrappedRaw","nameLocation":"19207:16:10","nodeType":"VariableDeclaration","scope":1617,"src":"19199:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1614,"name":"uint256","nodeType":"ElementaryTypeName","src":"19199:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19169:55:10"},"scope":1682,"src":"18939:286:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1618,"nodeType":"StructuredDocumentation","src":"19231:1458:10","text":" @notice Removes liquidity from an internal ERC4626 buffer in the Vault.\n @dev Only proportional exits are supported, and the sender has to be the owner of the shares.\n This function unlocks the Vault just for this operation; it does not work with a Router as an entrypoint.\n Pre-conditions:\n - The buffer needs to be initialized.\n - sharesOwner is the original msg.sender, it needs to be checked in the Router. That's why\n   this call is authenticated; only routers approved by the DAO can remove the liquidity of a buffer.\n - The buffer needs to have some liquidity and have its asset registered in `_bufferAssets` storage.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param sharesToRemove Amount of shares to remove from the buffer. Cannot be greater than sharesOwner's\n total shares. It is expressed in underlying token native decimals\n @param minAmountUnderlyingOutRaw Minimum amount of underlying tokens to receive from the buffer. It is expressed\n in underlying token native decimals\n @param minAmountWrappedOutRaw Minimum amount of wrapped tokens to receive from the buffer. It is expressed in\n wrapped token native decimals\n @return removedUnderlyingBalanceRaw Amount of underlying tokens returned to the user\n @return removedWrappedBalanceRaw Amount of wrapped tokens returned to the user"},"functionSelector":"ebc7955c","id":1634,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityFromBuffer","nameLocation":"20703:25:10","nodeType":"FunctionDefinition","parameters":{"id":1628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1621,"mutability":"mutable","name":"wrappedToken","nameLocation":"20747:12:10","nodeType":"VariableDeclaration","scope":1634,"src":"20738:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":1620,"nodeType":"UserDefinedTypeName","pathNode":{"id":1619,"name":"IERC4626","nameLocations":["20738:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"20738:8:10"},"referencedDeclaration":5653,"src":"20738:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1623,"mutability":"mutable","name":"sharesToRemove","nameLocation":"20777:14:10","nodeType":"VariableDeclaration","scope":1634,"src":"20769:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1622,"name":"uint256","nodeType":"ElementaryTypeName","src":"20769:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1625,"mutability":"mutable","name":"minAmountUnderlyingOutRaw","nameLocation":"20809:25:10","nodeType":"VariableDeclaration","scope":1634,"src":"20801:33:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1624,"name":"uint256","nodeType":"ElementaryTypeName","src":"20801:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1627,"mutability":"mutable","name":"minAmountWrappedOutRaw","nameLocation":"20852:22:10","nodeType":"VariableDeclaration","scope":1634,"src":"20844:30:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1626,"name":"uint256","nodeType":"ElementaryTypeName","src":"20844:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20728:152:10"},"returnParameters":{"id":1633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1630,"mutability":"mutable","name":"removedUnderlyingBalanceRaw","nameLocation":"20907:27:10","nodeType":"VariableDeclaration","scope":1634,"src":"20899:35:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1629,"name":"uint256","nodeType":"ElementaryTypeName","src":"20899:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1632,"mutability":"mutable","name":"removedWrappedBalanceRaw","nameLocation":"20944:24:10","nodeType":"VariableDeclaration","scope":1634,"src":"20936:32:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1631,"name":"uint256","nodeType":"ElementaryTypeName","src":"20936:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20898:71:10"},"scope":1682,"src":"20694:276:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1635,"nodeType":"StructuredDocumentation","src":"20976:382:10","text":" @notice Returns the asset registered for a given wrapped token.\n @dev The asset can never change after buffer initialization.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return underlyingToken Address of the underlying token registered for the wrapper; `address(0)` if the buffer\n has not been initialized."},"functionSelector":"0387587d","id":1643,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferAsset","nameLocation":"21372:14:10","nodeType":"FunctionDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1638,"mutability":"mutable","name":"wrappedToken","nameLocation":"21396:12:10","nodeType":"VariableDeclaration","scope":1643,"src":"21387:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":1637,"nodeType":"UserDefinedTypeName","pathNode":{"id":1636,"name":"IERC4626","nameLocations":["21387:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"21387:8:10"},"referencedDeclaration":5653,"src":"21387:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"21386:23:10"},"returnParameters":{"id":1642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1641,"mutability":"mutable","name":"underlyingToken","nameLocation":"21441:15:10","nodeType":"VariableDeclaration","scope":1643,"src":"21433:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1640,"name":"address","nodeType":"ElementaryTypeName","src":"21433:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21432:25:10"},"scope":1682,"src":"21363:95:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1644,"nodeType":"StructuredDocumentation","src":"21464:441:10","text":" @notice Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets\n in the buffer.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param liquidityOwner Address of the user that owns liquidity in the wrapped token's buffer\n @return ownerShares Amount of shares allocated to the liquidity owner, in native underlying token decimals"},"functionSelector":"9385e39a","id":1654,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferOwnerShares","nameLocation":"21919:20:10","nodeType":"FunctionDefinition","parameters":{"id":1650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1647,"mutability":"mutable","name":"wrappedToken","nameLocation":"21958:12:10","nodeType":"VariableDeclaration","scope":1654,"src":"21949:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":1646,"nodeType":"UserDefinedTypeName","pathNode":{"id":1645,"name":"IERC4626","nameLocations":["21949:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"21949:8:10"},"referencedDeclaration":5653,"src":"21949:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1649,"mutability":"mutable","name":"liquidityOwner","nameLocation":"21988:14:10","nodeType":"VariableDeclaration","scope":1654,"src":"21980:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1648,"name":"address","nodeType":"ElementaryTypeName","src":"21980:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21939:69:10"},"returnParameters":{"id":1653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1652,"mutability":"mutable","name":"ownerShares","nameLocation":"22040:11:10","nodeType":"VariableDeclaration","scope":1654,"src":"22032:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1651,"name":"uint256","nodeType":"ElementaryTypeName","src":"22032:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22031:21:10"},"scope":1682,"src":"21910:143:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1655,"nodeType":"StructuredDocumentation","src":"22059:281:10","text":" @notice Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return bufferShares Amount of supply shares of the buffer, in native underlying token decimals"},"functionSelector":"f2784e07","id":1663,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferTotalShares","nameLocation":"22354:20:10","nodeType":"FunctionDefinition","parameters":{"id":1659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1658,"mutability":"mutable","name":"wrappedToken","nameLocation":"22384:12:10","nodeType":"VariableDeclaration","scope":1663,"src":"22375:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":1657,"nodeType":"UserDefinedTypeName","pathNode":{"id":1656,"name":"IERC4626","nameLocations":["22375:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"22375:8:10"},"referencedDeclaration":5653,"src":"22375:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"22374:23:10"},"returnParameters":{"id":1662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1661,"mutability":"mutable","name":"bufferShares","nameLocation":"22429:12:10","nodeType":"VariableDeclaration","scope":1663,"src":"22421:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1660,"name":"uint256","nodeType":"ElementaryTypeName","src":"22421:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22420:22:10"},"scope":1682,"src":"22345:98:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1664,"nodeType":"StructuredDocumentation","src":"22449:521:10","text":" @notice Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\n @dev All values are in native token decimals of the wrapped or underlying tokens.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return underlyingBalanceRaw Amount of underlying tokens deposited into the buffer, in native token decimals\n @return wrappedBalanceRaw Amount of wrapped tokens deposited into the buffer, in native token decimals"},"functionSelector":"4021fe0f","id":1674,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferBalance","nameLocation":"22984:16:10","nodeType":"FunctionDefinition","parameters":{"id":1668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1667,"mutability":"mutable","name":"wrappedToken","nameLocation":"23019:12:10","nodeType":"VariableDeclaration","scope":1674,"src":"23010:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":1666,"nodeType":"UserDefinedTypeName","pathNode":{"id":1665,"name":"IERC4626","nameLocations":["23010:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"23010:8:10"},"referencedDeclaration":5653,"src":"23010:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"23000:37:10"},"returnParameters":{"id":1673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1670,"mutability":"mutable","name":"underlyingBalanceRaw","nameLocation":"23069:20:10","nodeType":"VariableDeclaration","scope":1674,"src":"23061:28:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1669,"name":"uint256","nodeType":"ElementaryTypeName","src":"23061:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1672,"mutability":"mutable","name":"wrappedBalanceRaw","nameLocation":"23099:17:10","nodeType":"VariableDeclaration","scope":1674,"src":"23091:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1671,"name":"uint256","nodeType":"ElementaryTypeName","src":"23091:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23060:57:10"},"scope":1682,"src":"22975:143:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1675,"nodeType":"StructuredDocumentation","src":"23342:202:10","text":" @notice Sets a new Authorizer for the Vault.\n @dev This is a permissioned call. Emits an `AuthorizerChanged` event.\n @param newAuthorizer The address of the new authorizer"},"functionSelector":"058a628f","id":1681,"implemented":false,"kind":"function","modifiers":[],"name":"setAuthorizer","nameLocation":"23558:13:10","nodeType":"FunctionDefinition","parameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1678,"mutability":"mutable","name":"newAuthorizer","nameLocation":"23584:13:10","nodeType":"VariableDeclaration","scope":1681,"src":"23572:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$368","typeString":"contract IAuthorizer"},"typeName":{"id":1677,"nodeType":"UserDefinedTypeName","pathNode":{"id":1676,"name":"IAuthorizer","nameLocations":["23572:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":368,"src":"23572:11:10"},"referencedDeclaration":368,"src":"23572:11:10","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$368","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"23571:27:10"},"returnParameters":{"id":1680,"nodeType":"ParameterList","parameters":[],"src":"23607:0:10"},"scope":1682,"src":"23549:59:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1683,"src":"586:23024:10","usedErrors":[],"usedEvents":[]}],"src":"46:23565:10"},"id":10},"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol","exportedSymbols":{"IERC20":[6383],"IERC4626":[5653],"IVaultErrors":[2049]},"id":2050,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1684,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:11"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":1686,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2050,"sourceUnit":5654,"src":"72:75:11","symbolAliases":[{"foreign":{"id":1685,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5653,"src":"81:8:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":1688,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2050,"sourceUnit":6384,"src":"148:72:11","symbolAliases":[{"foreign":{"id":1687,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"157:6:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultErrors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1689,"nodeType":"StructuredDocumentation","src":"222:94:11","text":"@notice Errors are declared inside an interface (namespace) to improve DX with Typechain."},"fullyImplemented":true,"id":2049,"linearizedBaseContracts":[2049],"name":"IVaultErrors","nameLocation":"326:12:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1690,"nodeType":"StructuredDocumentation","src":"576:149:11","text":" @notice A pool has already been registered. `registerPool` may only be called once.\n @param pool The already registered pool"},"errorSelector":"db771c80","id":1694,"name":"PoolAlreadyRegistered","nameLocation":"736:21:11","nodeType":"ErrorDefinition","parameters":{"id":1693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1692,"mutability":"mutable","name":"pool","nameLocation":"766:4:11","nodeType":"VariableDeclaration","scope":1694,"src":"758:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1691,"name":"address","nodeType":"ElementaryTypeName","src":"758:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"757:14:11"},"src":"730:42:11"},{"documentation":{"id":1695,"nodeType":"StructuredDocumentation","src":"778:149:11","text":" @notice A pool has already been initialized. `initialize` may only be called once.\n @param pool The already initialized pool"},"errorSelector":"218e3747","id":1699,"name":"PoolAlreadyInitialized","nameLocation":"938:22:11","nodeType":"ErrorDefinition","parameters":{"id":1698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1697,"mutability":"mutable","name":"pool","nameLocation":"969:4:11","nodeType":"VariableDeclaration","scope":1699,"src":"961:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1696,"name":"address","nodeType":"ElementaryTypeName","src":"961:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"960:14:11"},"src":"932:43:11"},{"documentation":{"id":1700,"nodeType":"StructuredDocumentation","src":"981:99:11","text":" @notice A pool has not been registered.\n @param pool The unregistered pool"},"errorSelector":"9e51bd5c","id":1704,"name":"PoolNotRegistered","nameLocation":"1091:17:11","nodeType":"ErrorDefinition","parameters":{"id":1703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1702,"mutability":"mutable","name":"pool","nameLocation":"1117:4:11","nodeType":"VariableDeclaration","scope":1704,"src":"1109:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1701,"name":"address","nodeType":"ElementaryTypeName","src":"1109:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1108:14:11"},"src":"1085:38:11"},{"documentation":{"id":1705,"nodeType":"StructuredDocumentation","src":"1129:112:11","text":" @notice A referenced pool has not been initialized.\n @param pool The uninitialized pool"},"errorSelector":"4bdace13","id":1709,"name":"PoolNotInitialized","nameLocation":"1252:18:11","nodeType":"ErrorDefinition","parameters":{"id":1708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1707,"mutability":"mutable","name":"pool","nameLocation":"1279:4:11","nodeType":"VariableDeclaration","scope":1709,"src":"1271:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1706,"name":"address","nodeType":"ElementaryTypeName","src":"1271:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1270:14:11"},"src":"1246:39:11"},{"documentation":{"id":1710,"nodeType":"StructuredDocumentation","src":"1291:274:11","text":" @notice A hook contract rejected a pool on registration.\n @param poolHooksContract Address of the hook contract that rejected the pool registration\n @param pool Address of the rejected pool\n @param poolFactory Address of the pool factory"},"errorSelector":"fa93d814","id":1718,"name":"HookRegistrationFailed","nameLocation":"1576:22:11","nodeType":"ErrorDefinition","parameters":{"id":1717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1712,"mutability":"mutable","name":"poolHooksContract","nameLocation":"1607:17:11","nodeType":"VariableDeclaration","scope":1718,"src":"1599:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1711,"name":"address","nodeType":"ElementaryTypeName","src":"1599:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1714,"mutability":"mutable","name":"pool","nameLocation":"1634:4:11","nodeType":"VariableDeclaration","scope":1718,"src":"1626:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1713,"name":"address","nodeType":"ElementaryTypeName","src":"1626:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1716,"mutability":"mutable","name":"poolFactory","nameLocation":"1648:11:11","nodeType":"VariableDeclaration","scope":1718,"src":"1640:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1715,"name":"address","nodeType":"ElementaryTypeName","src":"1640:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1598:62:11"},"src":"1570:91:11"},{"documentation":{"id":1719,"nodeType":"StructuredDocumentation","src":"1667:136:11","text":" @notice A token was already registered (i.e., it is a duplicate in the pool).\n @param token The duplicate token"},"errorSelector":"4f4b634e","id":1724,"name":"TokenAlreadyRegistered","nameLocation":"1814:22:11","nodeType":"ErrorDefinition","parameters":{"id":1723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1722,"mutability":"mutable","name":"token","nameLocation":"1844:5:11","nodeType":"VariableDeclaration","scope":1724,"src":"1837:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1721,"nodeType":"UserDefinedTypeName","pathNode":{"id":1720,"name":"IERC20","nameLocations":["1837:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"1837:6:11"},"referencedDeclaration":6383,"src":"1837:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"1836:14:11"},"src":"1808:43:11"},{"documentation":{"id":1725,"nodeType":"StructuredDocumentation","src":"1857:57:11","text":"@notice The token count is below the minimum allowed."},"errorSelector":"5ed4ba8f","id":1727,"name":"MinTokens","nameLocation":"1925:9:11","nodeType":"ErrorDefinition","parameters":{"id":1726,"nodeType":"ParameterList","parameters":[],"src":"1934:2:11"},"src":"1919:18:11"},{"documentation":{"id":1728,"nodeType":"StructuredDocumentation","src":"1943:57:11","text":"@notice The token count is above the maximum allowed."},"errorSelector":"707bdf58","id":1730,"name":"MaxTokens","nameLocation":"2011:9:11","nodeType":"ErrorDefinition","parameters":{"id":1729,"nodeType":"ParameterList","parameters":[],"src":"2020:2:11"},"src":"2005:18:11"},{"documentation":{"id":1731,"nodeType":"StructuredDocumentation","src":"2029:61:11","text":"@notice Invalid tokens (e.g., zero) cannot be registered."},"errorSelector":"c1ab6dc1","id":1733,"name":"InvalidToken","nameLocation":"2101:12:11","nodeType":"ErrorDefinition","parameters":{"id":1732,"nodeType":"ParameterList","parameters":[],"src":"2113:2:11"},"src":"2095:21:11"},{"documentation":{"id":1734,"nodeType":"StructuredDocumentation","src":"2122:86:11","text":"@notice The token type given in a TokenConfig during pool registration is invalid."},"errorSelector":"a1e9dd9d","id":1736,"name":"InvalidTokenType","nameLocation":"2219:16:11","nodeType":"ErrorDefinition","parameters":{"id":1735,"nodeType":"ParameterList","parameters":[],"src":"2235:2:11"},"src":"2213:25:11"},{"documentation":{"id":1737,"nodeType":"StructuredDocumentation","src":"2244:76:11","text":"@notice The data in a TokenConfig struct is inconsistent or unsupported."},"errorSelector":"df450632","id":1739,"name":"InvalidTokenConfiguration","nameLocation":"2331:25:11","nodeType":"ErrorDefinition","parameters":{"id":1738,"nodeType":"ParameterList","parameters":[],"src":"2356:2:11"},"src":"2325:34:11"},{"documentation":{"id":1740,"nodeType":"StructuredDocumentation","src":"2365:64:11","text":"@notice Tokens with more than 18 decimals are not supported."},"errorSelector":"686d3607","id":1742,"name":"InvalidTokenDecimals","nameLocation":"2440:20:11","nodeType":"ErrorDefinition","parameters":{"id":1741,"nodeType":"ParameterList","parameters":[],"src":"2460:2:11"},"src":"2434:29:11"},{"documentation":{"id":1743,"nodeType":"StructuredDocumentation","src":"2469:287:11","text":" @notice The token list passed into an operation does not match the pool tokens in the pool.\n @param pool Address of the pool\n @param expectedToken The correct token at a given index in the pool\n @param actualToken The actual token found at that index"},"errorSelector":"ffe261a1","id":1751,"name":"TokensMismatch","nameLocation":"2767:14:11","nodeType":"ErrorDefinition","parameters":{"id":1750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1745,"mutability":"mutable","name":"pool","nameLocation":"2790:4:11","nodeType":"VariableDeclaration","scope":1751,"src":"2782:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1744,"name":"address","nodeType":"ElementaryTypeName","src":"2782:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1747,"mutability":"mutable","name":"expectedToken","nameLocation":"2804:13:11","nodeType":"VariableDeclaration","scope":1751,"src":"2796:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1746,"name":"address","nodeType":"ElementaryTypeName","src":"2796:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1749,"mutability":"mutable","name":"actualToken","nameLocation":"2827:11:11","nodeType":"VariableDeclaration","scope":1751,"src":"2819:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1748,"name":"address","nodeType":"ElementaryTypeName","src":"2819:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2781:58:11"},"src":"2761:79:11"},{"documentation":{"id":1752,"nodeType":"StructuredDocumentation","src":"3071:85:11","text":"@notice A transient accounting operation completed with outstanding token deltas."},"errorSelector":"20f1d86d","id":1754,"name":"BalanceNotSettled","nameLocation":"3167:17:11","nodeType":"ErrorDefinition","parameters":{"id":1753,"nodeType":"ParameterList","parameters":[],"src":"3184:2:11"},"src":"3161:26:11"},{"documentation":{"id":1755,"nodeType":"StructuredDocumentation","src":"3193:97:11","text":"@notice A user called a Vault function (swap, add/remove liquidity) outside the lock context."},"errorSelector":"c09ba736","id":1757,"name":"VaultIsNotUnlocked","nameLocation":"3301:18:11","nodeType":"ErrorDefinition","parameters":{"id":1756,"nodeType":"ParameterList","parameters":[],"src":"3319:2:11"},"src":"3295:27:11"},{"documentation":{"id":1758,"nodeType":"StructuredDocumentation","src":"3328:105:11","text":"@notice The pool has returned false to the beforeSwap hook, indicating the transaction should revert."},"errorSelector":"53f976d4","id":1760,"name":"DynamicSwapFeeHookFailed","nameLocation":"3444:24:11","nodeType":"ErrorDefinition","parameters":{"id":1759,"nodeType":"ParameterList","parameters":[],"src":"3468:2:11"},"src":"3438:33:11"},{"documentation":{"id":1761,"nodeType":"StructuredDocumentation","src":"3477:105:11","text":"@notice The pool has returned false to the beforeSwap hook, indicating the transaction should revert."},"errorSelector":"e91e17e7","id":1763,"name":"BeforeSwapHookFailed","nameLocation":"3593:20:11","nodeType":"ErrorDefinition","parameters":{"id":1762,"nodeType":"ParameterList","parameters":[],"src":"3613:2:11"},"src":"3587:29:11"},{"documentation":{"id":1764,"nodeType":"StructuredDocumentation","src":"3622:104:11","text":"@notice The pool has returned false to the afterSwap hook, indicating the transaction should revert."},"errorSelector":"15a29dec","id":1766,"name":"AfterSwapHookFailed","nameLocation":"3737:19:11","nodeType":"ErrorDefinition","parameters":{"id":1765,"nodeType":"ParameterList","parameters":[],"src":"3756:2:11"},"src":"3731:28:11"},{"documentation":{"id":1767,"nodeType":"StructuredDocumentation","src":"3765:111:11","text":"@notice The pool has returned false to the beforeInitialize hook, indicating the transaction should revert."},"errorSelector":"60612925","id":1769,"name":"BeforeInitializeHookFailed","nameLocation":"3887:26:11","nodeType":"ErrorDefinition","parameters":{"id":1768,"nodeType":"ParameterList","parameters":[],"src":"3913:2:11"},"src":"3881:35:11"},{"documentation":{"id":1770,"nodeType":"StructuredDocumentation","src":"3922:110:11","text":"@notice The pool has returned false to the afterInitialize hook, indicating the transaction should revert."},"errorSelector":"0f23dbc6","id":1772,"name":"AfterInitializeHookFailed","nameLocation":"4043:25:11","nodeType":"ErrorDefinition","parameters":{"id":1771,"nodeType":"ParameterList","parameters":[],"src":"4068:2:11"},"src":"4037:34:11"},{"documentation":{"id":1773,"nodeType":"StructuredDocumentation","src":"4077:113:11","text":"@notice The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert."},"errorSelector":"0b2eb652","id":1775,"name":"BeforeAddLiquidityHookFailed","nameLocation":"4201:28:11","nodeType":"ErrorDefinition","parameters":{"id":1774,"nodeType":"ParameterList","parameters":[],"src":"4229:2:11"},"src":"4195:37:11"},{"documentation":{"id":1776,"nodeType":"StructuredDocumentation","src":"4238:112:11","text":"@notice The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert."},"errorSelector":"e1249165","id":1778,"name":"AfterAddLiquidityHookFailed","nameLocation":"4361:27:11","nodeType":"ErrorDefinition","parameters":{"id":1777,"nodeType":"ParameterList","parameters":[],"src":"4388:2:11"},"src":"4355:36:11"},{"documentation":{"id":1779,"nodeType":"StructuredDocumentation","src":"4397:116:11","text":"@notice The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert."},"errorSelector":"2aaf8866","id":1781,"name":"BeforeRemoveLiquidityHookFailed","nameLocation":"4524:31:11","nodeType":"ErrorDefinition","parameters":{"id":1780,"nodeType":"ParameterList","parameters":[],"src":"4555:2:11"},"src":"4518:40:11"},{"documentation":{"id":1782,"nodeType":"StructuredDocumentation","src":"4564:115:11","text":"@notice The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert."},"errorSelector":"1d3391d8","id":1784,"name":"AfterRemoveLiquidityHookFailed","nameLocation":"4690:30:11","nodeType":"ErrorDefinition","parameters":{"id":1783,"nodeType":"ParameterList","parameters":[],"src":"4720:2:11"},"src":"4684:39:11"},{"documentation":{"id":1785,"nodeType":"StructuredDocumentation","src":"4729:115:11","text":"@notice An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance)."},"errorSelector":"e5d185cf","id":1787,"name":"RouterNotTrusted","nameLocation":"4855:16:11","nodeType":"ErrorDefinition","parameters":{"id":1786,"nodeType":"ParameterList","parameters":[],"src":"4871:2:11"},"src":"4849:25:11"},{"documentation":{"id":1788,"nodeType":"StructuredDocumentation","src":"5097:47:11","text":"@notice The user tried to swap zero tokens."},"errorSelector":"57a456b7","id":1790,"name":"AmountGivenZero","nameLocation":"5155:15:11","nodeType":"ErrorDefinition","parameters":{"id":1789,"nodeType":"ParameterList","parameters":[],"src":"5170:2:11"},"src":"5149:24:11"},{"documentation":{"id":1791,"nodeType":"StructuredDocumentation","src":"5179:58:11","text":"@notice The user attempted to swap a token for itself."},"errorSelector":"a54b181d","id":1793,"name":"CannotSwapSameToken","nameLocation":"5248:19:11","nodeType":"ErrorDefinition","parameters":{"id":1792,"nodeType":"ParameterList","parameters":[],"src":"5267:2:11"},"src":"5242:28:11"},{"documentation":{"id":1794,"nodeType":"StructuredDocumentation","src":"5276:137:11","text":" @notice The user attempted to operate with a token that is not in the pool.\n @param token The unregistered token"},"errorSelector":"ddef98d7","id":1799,"name":"TokenNotRegistered","nameLocation":"5424:18:11","nodeType":"ErrorDefinition","parameters":{"id":1798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1797,"mutability":"mutable","name":"token","nameLocation":"5450:5:11","nodeType":"VariableDeclaration","scope":1799,"src":"5443:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1796,"nodeType":"UserDefinedTypeName","pathNode":{"id":1795,"name":"IERC20","nameLocations":["5443:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"5443:6:11"},"referencedDeclaration":6383,"src":"5443:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"5442:14:11"},"src":"5418:39:11"},{"documentation":{"id":1800,"nodeType":"StructuredDocumentation","src":"5463:215:11","text":" @notice An amount in or out has exceeded the limit specified in the swap request.\n @param amount The total amount in or out\n @param limit The amount of the limit that has been exceeded"},"errorSelector":"e2ea151b","id":1806,"name":"SwapLimit","nameLocation":"5689:9:11","nodeType":"ErrorDefinition","parameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1802,"mutability":"mutable","name":"amount","nameLocation":"5707:6:11","nodeType":"VariableDeclaration","scope":1806,"src":"5699:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1801,"name":"uint256","nodeType":"ElementaryTypeName","src":"5699:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1804,"mutability":"mutable","name":"limit","nameLocation":"5723:5:11","nodeType":"VariableDeclaration","scope":1806,"src":"5715:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1803,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5698:31:11"},"src":"5683:47:11"},{"documentation":{"id":1807,"nodeType":"StructuredDocumentation","src":"5736:228:11","text":" @notice A hook adjusted amount in or out has exceeded the limit specified in the swap request.\n @param amount The total amount in or out\n @param limit The amount of the limit that has been exceeded"},"errorSelector":"cc0e4a99","id":1813,"name":"HookAdjustedSwapLimit","nameLocation":"5975:21:11","nodeType":"ErrorDefinition","parameters":{"id":1812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1809,"mutability":"mutable","name":"amount","nameLocation":"6005:6:11","nodeType":"VariableDeclaration","scope":1813,"src":"5997:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1808,"name":"uint256","nodeType":"ElementaryTypeName","src":"5997:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1811,"mutability":"mutable","name":"limit","nameLocation":"6021:5:11","nodeType":"VariableDeclaration","scope":1813,"src":"6013:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1810,"name":"uint256","nodeType":"ElementaryTypeName","src":"6013:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5996:31:11"},"src":"5969:59:11"},{"documentation":{"id":1814,"nodeType":"StructuredDocumentation","src":"6034:87:11","text":"@notice The amount given or calculated for an operation is below the minimum limit."},"errorSelector":"1ed4d118","id":1816,"name":"TradeAmountTooSmall","nameLocation":"6132:19:11","nodeType":"ErrorDefinition","parameters":{"id":1815,"nodeType":"ParameterList","parameters":[],"src":"6151:2:11"},"src":"6126:28:11"},{"documentation":{"id":1817,"nodeType":"StructuredDocumentation","src":"6381:45:11","text":"@notice Add liquidity kind not supported."},"errorSelector":"6c02b395","id":1819,"name":"InvalidAddLiquidityKind","nameLocation":"6437:23:11","nodeType":"ErrorDefinition","parameters":{"id":1818,"nodeType":"ParameterList","parameters":[],"src":"6460:2:11"},"src":"6431:32:11"},{"documentation":{"id":1820,"nodeType":"StructuredDocumentation","src":"6469:264:11","text":" @notice A required amountIn exceeds the maximum limit specified for the operation.\n @param tokenIn The incoming token\n @param amountIn The total token amount in\n @param maxAmountIn The amount of the limit that has been exceeded"},"errorSelector":"8eda85e4","id":1829,"name":"AmountInAboveMax","nameLocation":"6744:16:11","nodeType":"ErrorDefinition","parameters":{"id":1828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"tokenIn","nameLocation":"6768:7:11","nodeType":"VariableDeclaration","scope":1829,"src":"6761:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1822,"nodeType":"UserDefinedTypeName","pathNode":{"id":1821,"name":"IERC20","nameLocations":["6761:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"6761:6:11"},"referencedDeclaration":6383,"src":"6761:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"amountIn","nameLocation":"6785:8:11","nodeType":"VariableDeclaration","scope":1829,"src":"6777:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1824,"name":"uint256","nodeType":"ElementaryTypeName","src":"6777:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1827,"mutability":"mutable","name":"maxAmountIn","nameLocation":"6803:11:11","nodeType":"VariableDeclaration","scope":1829,"src":"6795:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1826,"name":"uint256","nodeType":"ElementaryTypeName","src":"6795:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6760:55:11"},"src":"6738:78:11"},{"documentation":{"id":1830,"nodeType":"StructuredDocumentation","src":"6822:269:11","text":" @notice A hook adjusted amountIn exceeds the maximum limit specified for the operation.\n @param tokenIn The incoming token\n @param amountIn The total token amount in\n @param maxAmountIn The amount of the limit that has been exceeded"},"errorSelector":"cefa3afa","id":1839,"name":"HookAdjustedAmountInAboveMax","nameLocation":"7102:28:11","nodeType":"ErrorDefinition","parameters":{"id":1838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"tokenIn","nameLocation":"7138:7:11","nodeType":"VariableDeclaration","scope":1839,"src":"7131:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1832,"nodeType":"UserDefinedTypeName","pathNode":{"id":1831,"name":"IERC20","nameLocations":["7131:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"7131:6:11"},"referencedDeclaration":6383,"src":"7131:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1835,"mutability":"mutable","name":"amountIn","nameLocation":"7155:8:11","nodeType":"VariableDeclaration","scope":1839,"src":"7147:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1834,"name":"uint256","nodeType":"ElementaryTypeName","src":"7147:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1837,"mutability":"mutable","name":"maxAmountIn","nameLocation":"7173:11:11","nodeType":"VariableDeclaration","scope":1839,"src":"7165:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1836,"name":"uint256","nodeType":"ElementaryTypeName","src":"7165:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7130:55:11"},"src":"7096:90:11"},{"documentation":{"id":1840,"nodeType":"StructuredDocumentation","src":"7192:245:11","text":" @notice The BPT amount received from adding liquidity is below the minimum specified for the operation.\n @param amountOut The total BPT amount out\n @param minAmountOut The amount of the limit that has been exceeded"},"errorSelector":"8d261d5d","id":1846,"name":"BptAmountOutBelowMin","nameLocation":"7448:20:11","nodeType":"ErrorDefinition","parameters":{"id":1845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1842,"mutability":"mutable","name":"amountOut","nameLocation":"7477:9:11","nodeType":"VariableDeclaration","scope":1846,"src":"7469:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1841,"name":"uint256","nodeType":"ElementaryTypeName","src":"7469:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1844,"mutability":"mutable","name":"minAmountOut","nameLocation":"7496:12:11","nodeType":"VariableDeclaration","scope":1846,"src":"7488:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1843,"name":"uint256","nodeType":"ElementaryTypeName","src":"7488:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7468:41:11"},"src":"7442:68:11"},{"documentation":{"id":1847,"nodeType":"StructuredDocumentation","src":"7516:75:11","text":"@notice Pool does not support adding liquidity with a customized input."},"errorSelector":"4876c0bc","id":1849,"name":"DoesNotSupportAddLiquidityCustom","nameLocation":"7602:32:11","nodeType":"ErrorDefinition","parameters":{"id":1848,"nodeType":"ParameterList","parameters":[],"src":"7634:2:11"},"src":"7596:41:11"},{"documentation":{"id":1850,"nodeType":"StructuredDocumentation","src":"7643:68:11","text":"@notice Pool does not support adding liquidity through donation."},"errorSelector":"efe0265d","id":1852,"name":"DoesNotSupportDonation","nameLocation":"7722:22:11","nodeType":"ErrorDefinition","parameters":{"id":1851,"nodeType":"ParameterList","parameters":[],"src":"7744:2:11"},"src":"7716:31:11"},{"documentation":{"id":1853,"nodeType":"StructuredDocumentation","src":"7977:48:11","text":"@notice Remove liquidity kind not supported."},"errorSelector":"137a9a39","id":1855,"name":"InvalidRemoveLiquidityKind","nameLocation":"8036:26:11","nodeType":"ErrorDefinition","parameters":{"id":1854,"nodeType":"ParameterList","parameters":[],"src":"8062:2:11"},"src":"8030:35:11"},{"documentation":{"id":1856,"nodeType":"StructuredDocumentation","src":"8071:269:11","text":" @notice The actual amount out is below the minimum limit specified for the operation.\n @param tokenOut The outgoing token\n @param amountOut The total BPT amount out\n @param minAmountOut The amount of the limit that has been exceeded"},"errorSelector":"2f785e46","id":1865,"name":"AmountOutBelowMin","nameLocation":"8351:17:11","nodeType":"ErrorDefinition","parameters":{"id":1864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1859,"mutability":"mutable","name":"tokenOut","nameLocation":"8376:8:11","nodeType":"VariableDeclaration","scope":1865,"src":"8369:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1858,"nodeType":"UserDefinedTypeName","pathNode":{"id":1857,"name":"IERC20","nameLocations":["8369:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"8369:6:11"},"referencedDeclaration":6383,"src":"8369:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1861,"mutability":"mutable","name":"amountOut","nameLocation":"8394:9:11","nodeType":"VariableDeclaration","scope":1865,"src":"8386:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1860,"name":"uint256","nodeType":"ElementaryTypeName","src":"8386:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1863,"mutability":"mutable","name":"minAmountOut","nameLocation":"8413:12:11","nodeType":"VariableDeclaration","scope":1865,"src":"8405:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1862,"name":"uint256","nodeType":"ElementaryTypeName","src":"8405:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8368:58:11"},"src":"8345:82:11"},{"documentation":{"id":1866,"nodeType":"StructuredDocumentation","src":"8433:276:11","text":" @notice The hook adjusted amount out is below the minimum limit specified for the operation.\n @param tokenOut The outgoing token\n @param amountOut The total BPT amount out\n @param minAmountOut The amount of the limit that has been exceeded"},"errorSelector":"fbd8a724","id":1875,"name":"HookAdjustedAmountOutBelowMin","nameLocation":"8720:29:11","nodeType":"ErrorDefinition","parameters":{"id":1874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1869,"mutability":"mutable","name":"tokenOut","nameLocation":"8757:8:11","nodeType":"VariableDeclaration","scope":1875,"src":"8750:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":1868,"nodeType":"UserDefinedTypeName","pathNode":{"id":1867,"name":"IERC20","nameLocations":["8750:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"8750:6:11"},"referencedDeclaration":6383,"src":"8750:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1871,"mutability":"mutable","name":"amountOut","nameLocation":"8775:9:11","nodeType":"VariableDeclaration","scope":1875,"src":"8767:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"8767:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1873,"mutability":"mutable","name":"minAmountOut","nameLocation":"8794:12:11","nodeType":"VariableDeclaration","scope":1875,"src":"8786:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1872,"name":"uint256","nodeType":"ElementaryTypeName","src":"8786:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8749:58:11"},"src":"8714:94:11"},{"documentation":{"id":1876,"nodeType":"StructuredDocumentation","src":"8814:228:11","text":" @notice The required BPT amount in exceeds the maximum limit specified for the operation.\n @param amountIn The total BPT amount in\n @param maxAmountIn The amount of the limit that has been exceeded"},"errorSelector":"31d38e0b","id":1882,"name":"BptAmountInAboveMax","nameLocation":"9053:19:11","nodeType":"ErrorDefinition","parameters":{"id":1881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1878,"mutability":"mutable","name":"amountIn","nameLocation":"9081:8:11","nodeType":"VariableDeclaration","scope":1882,"src":"9073:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1877,"name":"uint256","nodeType":"ElementaryTypeName","src":"9073:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1880,"mutability":"mutable","name":"maxAmountIn","nameLocation":"9099:11:11","nodeType":"VariableDeclaration","scope":1882,"src":"9091:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1879,"name":"uint256","nodeType":"ElementaryTypeName","src":"9091:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9072:39:11"},"src":"9047:65:11"},{"documentation":{"id":1883,"nodeType":"StructuredDocumentation","src":"9118:77:11","text":"@notice Pool does not support removing liquidity with a customized input."},"errorSelector":"cf0a95c0","id":1885,"name":"DoesNotSupportRemoveLiquidityCustom","nameLocation":"9206:35:11","nodeType":"ErrorDefinition","parameters":{"id":1884,"nodeType":"ParameterList","parameters":[],"src":"9241:2:11"},"src":"9200:44:11"},{"documentation":{"id":1886,"nodeType":"StructuredDocumentation","src":"9463:332:11","text":" @notice Error raised when there is an overflow in the fee calculation.\n @dev This occurs when the sum of the parts (aggregate swap or yield fee) is greater than the whole\n (total swap or yield fee). Also validated when the protocol fee controller updates aggregate fee\n percentages in the Vault."},"errorSelector":"4c69ac5d","id":1888,"name":"ProtocolFeesExceedTotalCollected","nameLocation":"9806:32:11","nodeType":"ErrorDefinition","parameters":{"id":1887,"nodeType":"ParameterList","parameters":[],"src":"9838:2:11"},"src":"9800:41:11"},{"documentation":{"id":1889,"nodeType":"StructuredDocumentation","src":"9847:430:11","text":" @notice Error raised when the swap fee percentage is less than the minimum allowed value.\n @dev The Vault itself does not impose a universal minimum. Rather, it validates against the\n range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error\n if it is below the minimum value returned by the pool.\n Pools with dynamic fees do not check these limits."},"errorSelector":"bfb20688","id":1891,"name":"SwapFeePercentageTooLow","nameLocation":"10288:23:11","nodeType":"ErrorDefinition","parameters":{"id":1890,"nodeType":"ParameterList","parameters":[],"src":"10311:2:11"},"src":"10282:32:11"},{"documentation":{"id":1892,"nodeType":"StructuredDocumentation","src":"10320:433:11","text":" @notice Error raised when the swap fee percentage is greater than the maximum allowed value.\n @dev The Vault itself does not impose a universal minimum. Rather, it validates against the\n range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error\n if it is above the maximum value returned by the pool.\n Pools with dynamic fees do not check these limits."},"errorSelector":"7f47834b","id":1894,"name":"SwapFeePercentageTooHigh","nameLocation":"10764:24:11","nodeType":"ErrorDefinition","parameters":{"id":1893,"nodeType":"ParameterList","parameters":[],"src":"10788:2:11"},"src":"10758:33:11"},{"documentation":{"id":1895,"nodeType":"StructuredDocumentation","src":"10797:646:11","text":" @notice Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\n @dev Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit\n precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which\n corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%).\n Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between\n the aggregate fee calculated here and that stored in the Vault."},"errorSelector":"833fb3ce","id":1897,"name":"FeePrecisionTooHigh","nameLocation":"11454:19:11","nodeType":"ErrorDefinition","parameters":{"id":1896,"nodeType":"ParameterList","parameters":[],"src":"11473:2:11"},"src":"11448:28:11"},{"documentation":{"id":1898,"nodeType":"StructuredDocumentation","src":"11482:107:11","text":"@notice A given percentage is above the maximum (usually a value close to FixedPoint.ONE, or 1e18 wei)."},"errorSelector":"746e5940","id":1900,"name":"PercentageAboveMax","nameLocation":"11600:18:11","nodeType":"ErrorDefinition","parameters":{"id":1899,"nodeType":"ParameterList","parameters":[],"src":"11618:2:11"},"src":"11594:27:11"},{"documentation":{"id":1901,"nodeType":"StructuredDocumentation","src":"11842:78:11","text":"@notice A user tried to execute a query operation when they were disabled."},"errorSelector":"7a198886","id":1903,"name":"QueriesDisabled","nameLocation":"11931:15:11","nodeType":"ErrorDefinition","parameters":{"id":1902,"nodeType":"ParameterList","parameters":[],"src":"11946:2:11"},"src":"11925:24:11"},{"documentation":{"id":1904,"nodeType":"StructuredDocumentation","src":"11955:84:11","text":"@notice An admin tried to re-enable queries, but they were disabled permanently."},"errorSelector":"069f8cbc","id":1906,"name":"QueriesDisabledPermanently","nameLocation":"12050:26:11","nodeType":"ErrorDefinition","parameters":{"id":1905,"nodeType":"ParameterList","parameters":[],"src":"12076:2:11"},"src":"12044:35:11"},{"documentation":{"id":1907,"nodeType":"StructuredDocumentation","src":"12302:104:11","text":" @notice Cannot enable recovery mode when already enabled.\n @param pool The pool"},"errorSelector":"346d7607","id":1911,"name":"PoolInRecoveryMode","nameLocation":"12417:18:11","nodeType":"ErrorDefinition","parameters":{"id":1910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1909,"mutability":"mutable","name":"pool","nameLocation":"12444:4:11","nodeType":"VariableDeclaration","scope":1911,"src":"12436:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1908,"name":"address","nodeType":"ElementaryTypeName","src":"12436:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12435:14:11"},"src":"12411:39:11"},{"documentation":{"id":1912,"nodeType":"StructuredDocumentation","src":"12456:101:11","text":" @notice Cannot disable recovery mode when not enabled.\n @param pool The pool"},"errorSelector":"ef029adf","id":1916,"name":"PoolNotInRecoveryMode","nameLocation":"12568:21:11","nodeType":"ErrorDefinition","parameters":{"id":1915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1914,"mutability":"mutable","name":"pool","nameLocation":"12598:4:11","nodeType":"VariableDeclaration","scope":1916,"src":"12590:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1913,"name":"address","nodeType":"ElementaryTypeName","src":"12590:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12589:14:11"},"src":"12562:42:11"},{"documentation":{"id":1917,"nodeType":"StructuredDocumentation","src":"12828:206:11","text":" @notice Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\n @param sender The account attempting to call a permissioned function"},"errorSelector":"089676d5","id":1921,"name":"SenderIsNotVault","nameLocation":"13045:16:11","nodeType":"ErrorDefinition","parameters":{"id":1920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1919,"mutability":"mutable","name":"sender","nameLocation":"13070:6:11","nodeType":"VariableDeclaration","scope":1921,"src":"13062:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1918,"name":"address","nodeType":"ElementaryTypeName","src":"13062:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13061:16:11"},"src":"13039:39:11"},{"documentation":{"id":1922,"nodeType":"StructuredDocumentation","src":"13303:79:11","text":"@notice The caller specified a pause window period longer than the maximum."},"errorSelector":"cc0e8fe5","id":1924,"name":"VaultPauseWindowDurationTooLarge","nameLocation":"13393:32:11","nodeType":"ErrorDefinition","parameters":{"id":1923,"nodeType":"ParameterList","parameters":[],"src":"13425:2:11"},"src":"13387:41:11"},{"documentation":{"id":1925,"nodeType":"StructuredDocumentation","src":"13434:73:11","text":"@notice The caller specified a buffer period longer than the maximum."},"errorSelector":"9ea4efee","id":1927,"name":"PauseBufferPeriodDurationTooLarge","nameLocation":"13518:33:11","nodeType":"ErrorDefinition","parameters":{"id":1926,"nodeType":"ParameterList","parameters":[],"src":"13551:2:11"},"src":"13512:42:11"},{"documentation":{"id":1928,"nodeType":"StructuredDocumentation","src":"13560:76:11","text":"@notice A user tried to perform an operation while the Vault was paused."},"errorSelector":"da9f8b34","id":1930,"name":"VaultPaused","nameLocation":"13647:11:11","nodeType":"ErrorDefinition","parameters":{"id":1929,"nodeType":"ParameterList","parameters":[],"src":"13658:2:11"},"src":"13641:20:11"},{"documentation":{"id":1931,"nodeType":"StructuredDocumentation","src":"13667:73:11","text":"@notice Governance tried to unpause the Vault when it was not paused."},"errorSelector":"f7ff4dca","id":1933,"name":"VaultNotPaused","nameLocation":"13751:14:11","nodeType":"ErrorDefinition","parameters":{"id":1932,"nodeType":"ParameterList","parameters":[],"src":"13765:2:11"},"src":"13745:23:11"},{"documentation":{"id":1934,"nodeType":"StructuredDocumentation","src":"13774:79:11","text":"@notice Governance tried to pause the Vault after the pause period expired."},"errorSelector":"0e4460b7","id":1936,"name":"VaultPauseWindowExpired","nameLocation":"13864:23:11","nodeType":"ErrorDefinition","parameters":{"id":1935,"nodeType":"ParameterList","parameters":[],"src":"13887:2:11"},"src":"13858:32:11"},{"documentation":{"id":1937,"nodeType":"StructuredDocumentation","src":"13896:123:11","text":" @notice A user tried to perform an operation involving a paused Pool.\n @param pool The paused pool"},"errorSelector":"d971f597","id":1941,"name":"PoolPaused","nameLocation":"14030:10:11","nodeType":"ErrorDefinition","parameters":{"id":1940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1939,"mutability":"mutable","name":"pool","nameLocation":"14049:4:11","nodeType":"VariableDeclaration","scope":1941,"src":"14041:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1938,"name":"address","nodeType":"ElementaryTypeName","src":"14041:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14040:14:11"},"src":"14024:31:11"},{"documentation":{"id":1942,"nodeType":"StructuredDocumentation","src":"14061:124:11","text":" @notice Governance tried to unpause the Pool when it was not paused.\n @param pool The unpaused pool"},"errorSelector":"fdcd6894","id":1946,"name":"PoolNotPaused","nameLocation":"14196:13:11","nodeType":"ErrorDefinition","parameters":{"id":1945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1944,"mutability":"mutable","name":"pool","nameLocation":"14218:4:11","nodeType":"VariableDeclaration","scope":1946,"src":"14210:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1943,"name":"address","nodeType":"ElementaryTypeName","src":"14210:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14209:14:11"},"src":"14190:34:11"},{"documentation":{"id":1947,"nodeType":"StructuredDocumentation","src":"14230:119:11","text":" @notice Governance tried to pause a Pool after the pause period expired.\n @param pool The pool"},"errorSelector":"eb5a1217","id":1951,"name":"PoolPauseWindowExpired","nameLocation":"14360:22:11","nodeType":"ErrorDefinition","parameters":{"id":1950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1949,"mutability":"mutable","name":"pool","nameLocation":"14391:4:11","nodeType":"VariableDeclaration","scope":1951,"src":"14383:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1948,"name":"address","nodeType":"ElementaryTypeName","src":"14383:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14382:14:11"},"src":"14354:43:11"},{"documentation":{"id":1952,"nodeType":"StructuredDocumentation","src":"14628:163:11","text":" @notice The buffer for the given wrapped token was already initialized.\n @param wrappedToken The wrapped token corresponding to the buffer"},"errorSelector":"1690fa40","id":1957,"name":"BufferAlreadyInitialized","nameLocation":"14802:24:11","nodeType":"ErrorDefinition","parameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"mutability":"mutable","name":"wrappedToken","nameLocation":"14836:12:11","nodeType":"VariableDeclaration","scope":1957,"src":"14827:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":1954,"nodeType":"UserDefinedTypeName","pathNode":{"id":1953,"name":"IERC4626","nameLocations":["14827:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"14827:8:11"},"referencedDeclaration":5653,"src":"14827:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"14826:23:11"},"src":"14796:54:11"},{"documentation":{"id":1958,"nodeType":"StructuredDocumentation","src":"14856:159:11","text":" @notice The buffer for the given wrapped token was not initialized.\n @param wrappedToken The wrapped token corresponding to the buffer"},"errorSelector":"85f41299","id":1963,"name":"BufferNotInitialized","nameLocation":"15026:20:11","nodeType":"ErrorDefinition","parameters":{"id":1962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1961,"mutability":"mutable","name":"wrappedToken","nameLocation":"15056:12:11","nodeType":"VariableDeclaration","scope":1963,"src":"15047:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":1960,"nodeType":"UserDefinedTypeName","pathNode":{"id":1959,"name":"IERC4626","nameLocations":["15047:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"15047:8:11"},"referencedDeclaration":5653,"src":"15047:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"15046:23:11"},"src":"15020:50:11"},{"documentation":{"id":1964,"nodeType":"StructuredDocumentation","src":"15076:90:11","text":"@notice The user is trying to remove more than their allocated shares from the buffer."},"errorSelector":"98c5dbd6","id":1966,"name":"NotEnoughBufferShares","nameLocation":"15177:21:11","nodeType":"ErrorDefinition","parameters":{"id":1965,"nodeType":"ParameterList","parameters":[],"src":"15198:2:11"},"src":"15171:30:11"},{"documentation":{"id":1967,"nodeType":"StructuredDocumentation","src":"15207:436:11","text":" @notice The wrapped token asset does not match the underlying token.\n @dev This should never happen, but a malicious wrapper contract might not return the correct address.\n Legitimate wrapper contracts should make the asset a constant or immutable value.\n @param wrappedToken The wrapped token corresponding to the buffer\n @param underlyingToken The underlying token returned by `asset`"},"errorSelector":"36b18d09","id":1974,"name":"WrongUnderlyingToken","nameLocation":"15654:20:11","nodeType":"ErrorDefinition","parameters":{"id":1973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1970,"mutability":"mutable","name":"wrappedToken","nameLocation":"15684:12:11","nodeType":"VariableDeclaration","scope":1974,"src":"15675:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":1969,"nodeType":"UserDefinedTypeName","pathNode":{"id":1968,"name":"IERC4626","nameLocations":["15675:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"15675:8:11"},"referencedDeclaration":5653,"src":"15675:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1972,"mutability":"mutable","name":"underlyingToken","nameLocation":"15706:15:11","nodeType":"VariableDeclaration","scope":1974,"src":"15698:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1971,"name":"address","nodeType":"ElementaryTypeName","src":"15698:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15674:48:11"},"src":"15648:75:11"},{"documentation":{"id":1975,"nodeType":"StructuredDocumentation","src":"15729:322:11","text":" @notice A wrapped token reported the zero address as its underlying token asset.\n @dev This should never happen, but a malicious wrapper contract might do this (e.g., in an attempt to\n re-initialize the buffer).\n @param wrappedToken The wrapped token corresponding to the buffer"},"errorSelector":"d407f9c5","id":1980,"name":"InvalidUnderlyingToken","nameLocation":"16062:22:11","nodeType":"ErrorDefinition","parameters":{"id":1979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1978,"mutability":"mutable","name":"wrappedToken","nameLocation":"16094:12:11","nodeType":"VariableDeclaration","scope":1980,"src":"16085:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":1977,"nodeType":"UserDefinedTypeName","pathNode":{"id":1976,"name":"IERC4626","nameLocations":["16085:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"16085:8:11"},"referencedDeclaration":5653,"src":"16085:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"16084:23:11"},"src":"16056:52:11"},{"documentation":{"id":1981,"nodeType":"StructuredDocumentation","src":"16114:183:11","text":" @notice The amount given to wrap/unwrap was too small, which can introduce rounding issues.\n @param wrappedToken The wrapped token corresponding to the buffer"},"errorSelector":"18fe7385","id":1986,"name":"WrapAmountTooSmall","nameLocation":"16308:18:11","nodeType":"ErrorDefinition","parameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1984,"mutability":"mutable","name":"wrappedToken","nameLocation":"16336:12:11","nodeType":"VariableDeclaration","scope":1986,"src":"16327:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":1983,"nodeType":"UserDefinedTypeName","pathNode":{"id":1982,"name":"IERC4626","nameLocations":["16327:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"16327:8:11"},"referencedDeclaration":5653,"src":"16327:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"16326:23:11"},"src":"16302:48:11"},{"documentation":{"id":1987,"nodeType":"StructuredDocumentation","src":"16356:70:11","text":"@notice Buffer operation attempted while vault buffers are paused."},"errorSelector":"0f27df09","id":1989,"name":"VaultBuffersArePaused","nameLocation":"16437:21:11","nodeType":"ErrorDefinition","parameters":{"id":1988,"nodeType":"ParameterList","parameters":[],"src":"16458:2:11"},"src":"16431:30:11"},{"documentation":{"id":1990,"nodeType":"StructuredDocumentation","src":"16467:58:11","text":"@notice Buffer shares were minted to the zero address."},"errorSelector":"dbe6b10e","id":1992,"name":"BufferSharesInvalidReceiver","nameLocation":"16536:27:11","nodeType":"ErrorDefinition","parameters":{"id":1991,"nodeType":"ParameterList","parameters":[],"src":"16563:2:11"},"src":"16530:36:11"},{"documentation":{"id":1993,"nodeType":"StructuredDocumentation","src":"16572:60:11","text":"@notice Buffer shares were burned from the zero address."},"errorSelector":"586d06df","id":1995,"name":"BufferSharesInvalidOwner","nameLocation":"16643:24:11","nodeType":"ErrorDefinition","parameters":{"id":1994,"nodeType":"ParameterList","parameters":[],"src":"16667:2:11"},"src":"16637:33:11"},{"documentation":{"id":1996,"nodeType":"StructuredDocumentation","src":"16676:173:11","text":" @notice The total supply of a buffer can't be lower than the absolute minimum.\n @param totalSupply The total supply value that was below the minimum"},"errorSelector":"34bdbfaa","id":2000,"name":"BufferTotalSupplyTooLow","nameLocation":"16860:23:11","nodeType":"ErrorDefinition","parameters":{"id":1999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1998,"mutability":"mutable","name":"totalSupply","nameLocation":"16892:11:11","nodeType":"VariableDeclaration","scope":2000,"src":"16884:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1997,"name":"uint256","nodeType":"ElementaryTypeName","src":"16884:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16883:21:11"},"src":"16854:51:11"},{"documentation":{"id":2001,"nodeType":"StructuredDocumentation","src":"16911:97:11","text":"@dev A wrap/unwrap operation consumed more or returned less underlying tokens than it should."},"errorSelector":"1c6a5375","id":2010,"name":"NotEnoughUnderlying","nameLocation":"17019:19:11","nodeType":"ErrorDefinition","parameters":{"id":2009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2004,"mutability":"mutable","name":"wrappedToken","nameLocation":"17048:12:11","nodeType":"VariableDeclaration","scope":2010,"src":"17039:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":2003,"nodeType":"UserDefinedTypeName","pathNode":{"id":2002,"name":"IERC4626","nameLocations":["17039:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"17039:8:11"},"referencedDeclaration":5653,"src":"17039:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":2006,"mutability":"mutable","name":"expectedUnderlyingAmount","nameLocation":"17070:24:11","nodeType":"VariableDeclaration","scope":2010,"src":"17062:32:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2005,"name":"uint256","nodeType":"ElementaryTypeName","src":"17062:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2008,"mutability":"mutable","name":"actualUnderlyingAmount","nameLocation":"17104:22:11","nodeType":"VariableDeclaration","scope":2010,"src":"17096:30:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2007,"name":"uint256","nodeType":"ElementaryTypeName","src":"17096:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17038:89:11"},"src":"17013:115:11"},{"documentation":{"id":2011,"nodeType":"StructuredDocumentation","src":"17134:94:11","text":"@dev A wrap/unwrap operation consumed more or returned less wrapped tokens than it should."},"errorSelector":"1149424d","id":2020,"name":"NotEnoughWrapped","nameLocation":"17239:16:11","nodeType":"ErrorDefinition","parameters":{"id":2019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2014,"mutability":"mutable","name":"wrappedToken","nameLocation":"17265:12:11","nodeType":"VariableDeclaration","scope":2020,"src":"17256:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":2013,"nodeType":"UserDefinedTypeName","pathNode":{"id":2012,"name":"IERC4626","nameLocations":["17256:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"17256:8:11"},"referencedDeclaration":5653,"src":"17256:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":2016,"mutability":"mutable","name":"expectedWrappedAmount","nameLocation":"17287:21:11","nodeType":"VariableDeclaration","scope":2020,"src":"17279:29:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2015,"name":"uint256","nodeType":"ElementaryTypeName","src":"17279:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2018,"mutability":"mutable","name":"actualWrappedAmount","nameLocation":"17318:19:11","nodeType":"VariableDeclaration","scope":2020,"src":"17310:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2017,"name":"uint256","nodeType":"ElementaryTypeName","src":"17310:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17255:83:11"},"src":"17233:106:11"},{"documentation":{"id":2021,"nodeType":"StructuredDocumentation","src":"17345:76:11","text":"@dev Shares issued during initialization are below the requested amount."},"errorSelector":"da0cb07e","id":2027,"name":"IssuedSharesBelowMin","nameLocation":"17432:20:11","nodeType":"ErrorDefinition","parameters":{"id":2026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2023,"mutability":"mutable","name":"issuedShares","nameLocation":"17461:12:11","nodeType":"VariableDeclaration","scope":2027,"src":"17453:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2022,"name":"uint256","nodeType":"ElementaryTypeName","src":"17453:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2025,"mutability":"mutable","name":"minIssuedShares","nameLocation":"17483:15:11","nodeType":"VariableDeclaration","scope":2027,"src":"17475:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2024,"name":"uint256","nodeType":"ElementaryTypeName","src":"17475:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17452:47:11"},"src":"17426:74:11"},{"documentation":{"id":2028,"nodeType":"StructuredDocumentation","src":"17727:87:11","text":"@notice Pool does not support adding / removing liquidity with an unbalanced input."},"errorSelector":"d4f5779c","id":2030,"name":"DoesNotSupportUnbalancedLiquidity","nameLocation":"17825:33:11","nodeType":"ErrorDefinition","parameters":{"id":2029,"nodeType":"ParameterList","parameters":[],"src":"17858:2:11"},"src":"17819:42:11"},{"documentation":{"id":2031,"nodeType":"StructuredDocumentation","src":"17867:48:11","text":"@notice The contract should not receive ETH."},"errorSelector":"f2238896","id":2033,"name":"CannotReceiveEth","nameLocation":"17926:16:11","nodeType":"ErrorDefinition","parameters":{"id":2032,"nodeType":"ParameterList","parameters":[],"src":"17942:2:11"},"src":"17920:25:11"},{"documentation":{"id":2034,"nodeType":"StructuredDocumentation","src":"17951:156:11","text":" @notice The `VaultExtension` contract was called by an account directly.\n @dev It can only be called by the Vault via delegatecall."},"errorSelector":"9fd25b36","id":2036,"name":"NotVaultDelegateCall","nameLocation":"18118:20:11","nodeType":"ErrorDefinition","parameters":{"id":2035,"nodeType":"ParameterList","parameters":[],"src":"18138:2:11"},"src":"18112:29:11"},{"documentation":{"id":2037,"nodeType":"StructuredDocumentation","src":"18147:89:11","text":"@notice The `VaultExtension` contract was configured with an incorrect Vault address."},"errorSelector":"1ab9d9d0","id":2039,"name":"WrongVaultExtensionDeployment","nameLocation":"18247:29:11","nodeType":"ErrorDefinition","parameters":{"id":2038,"nodeType":"ParameterList","parameters":[],"src":"18276:2:11"},"src":"18241:38:11"},{"documentation":{"id":2040,"nodeType":"StructuredDocumentation","src":"18285:96:11","text":"@notice The `ProtocolFeeController` contract was configured with an incorrect Vault address."},"errorSelector":"1bbe95c7","id":2042,"name":"WrongProtocolFeeControllerDeployment","nameLocation":"18392:36:11","nodeType":"ErrorDefinition","parameters":{"id":2041,"nodeType":"ParameterList","parameters":[],"src":"18428:2:11"},"src":"18386:45:11"},{"documentation":{"id":2043,"nodeType":"StructuredDocumentation","src":"18437:85:11","text":"@notice The `VaultAdmin` contract was configured with an incorrect Vault address."},"errorSelector":"82cc28b6","id":2045,"name":"WrongVaultAdminDeployment","nameLocation":"18533:25:11","nodeType":"ErrorDefinition","parameters":{"id":2044,"nodeType":"ParameterList","parameters":[],"src":"18558:2:11"},"src":"18527:34:11"},{"documentation":{"id":2046,"nodeType":"StructuredDocumentation","src":"18567:54:11","text":"@notice Quote reverted with a reserved error code."},"errorSelector":"28f95541","id":2048,"name":"QuoteResultSpoofed","nameLocation":"18632:18:11","nodeType":"ErrorDefinition","parameters":{"id":2047,"nodeType":"ParameterList","parameters":[],"src":"18650:2:11"},"src":"18626:27:11"}],"scope":2050,"src":"316:18339:11","usedErrors":[1694,1699,1704,1709,1718,1724,1727,1730,1733,1736,1739,1742,1751,1754,1757,1760,1763,1766,1769,1772,1775,1778,1781,1784,1787,1790,1793,1799,1806,1813,1816,1819,1829,1839,1846,1849,1852,1855,1865,1875,1882,1885,1888,1891,1894,1897,1900,1903,1906,1911,1916,1921,1924,1927,1930,1933,1936,1941,1946,1951,1957,1963,1966,1974,1980,1986,1989,1992,1995,2000,2010,2020,2027,2030,2033,2036,2039,2042,2045,2048],"usedEvents":[]}],"src":"46:18610:11"},"id":11},"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol","exportedSymbols":{"AddLiquidityKind":[3088],"AddLiquidityParams":[3104],"AfterSwapParams":[3082],"BufferWrapOrUnwrapParams":[3143],"FEE_BITLENGTH":[3146],"FEE_SCALING_FACTOR":[3149],"HookFlags":[2908],"HooksConfig":[2932],"IAuthorizer":[368],"IERC20":[6383],"IERC4626":[5653],"IHooks":[570],"IProtocolFeeController":[857],"IRateProvider":[24],"IVaultEvents":[2288],"LiquidityManagement":[2861],"MAX_FEE_PERCENTAGE":[3152],"PoolConfig":[2886],"PoolConfigBits":[2863],"PoolData":[3010],"PoolRoleAccounts":[2958],"PoolSwapParams":[3053],"RemoveLiquidityKind":[3109],"RemoveLiquidityParams":[3125],"Rounding":[3013],"SwapKind":[3016],"SwapState":[2942],"TokenConfig":[2975],"TokenInfo":[2985],"TokenType":[2962],"VaultState":[2950],"VaultSwapParams":[3035],"WrappingDirection":[3128]},"id":2289,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2051,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:12"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":2053,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2289,"sourceUnit":5654,"src":"72:75:12","symbolAliases":[{"foreign":{"id":2052,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5653,"src":"81:8:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2055,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2289,"sourceUnit":6384,"src":"148:72:12","symbolAliases":[{"foreign":{"id":2054,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"157:6:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"./IProtocolFeeController.sol","id":2057,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2289,"sourceUnit":858,"src":"222:70:12","symbolAliases":[{"foreign":{"id":2056,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"231:22:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","file":"./IAuthorizer.sol","id":2059,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2289,"sourceUnit":369,"src":"293:48:12","symbolAliases":[{"foreign":{"id":2058,"name":"IAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"302:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol","file":"./IHooks.sol","id":2061,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2289,"sourceUnit":571,"src":"342:38:12","symbolAliases":[{"foreign":{"id":2060,"name":"IHooks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"351:6:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":2062,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2289,"sourceUnit":3153,"src":"381:26:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultEvents","contractDependencies":[],"contractKind":"interface","documentation":{"id":2063,"nodeType":"StructuredDocumentation","src":"409:91:12","text":"@dev Events are declared inside an interface (namespace) to improve DX with Typechain."},"fullyImplemented":true,"id":2288,"linearizedBaseContracts":[2288],"name":"IVaultEvents","nameLocation":"510:12:12","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2064,"nodeType":"StructuredDocumentation","src":"529:657:12","text":" @notice A Pool was registered by calling `registerPool`.\n @param pool The pool being registered\n @param factory The factory creating the pool\n @param tokenConfig An array of descriptors for the tokens the pool will manage\n @param swapFeePercentage The static swap fee of the pool\n @param pauseWindowEndTime The pool's pause window end time\n @param roleAccounts Addresses the Vault will allow to change certain pool settings\n @param hooksConfig Flags indicating which hooks the pool supports and address of hooks contract\n @param liquidityManagement Supported liquidity management hook flags"},"eventSelector":"bc1561eeab9f40962e2fb827a7ff9c7cdb47a9d7c84caeefa4ed90e043842dad","id":2087,"name":"PoolRegistered","nameLocation":"1197:14:12","nodeType":"EventDefinition","parameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2066,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1237:4:12","nodeType":"VariableDeclaration","scope":2087,"src":"1221:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2065,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2068,"indexed":true,"mutability":"mutable","name":"factory","nameLocation":"1267:7:12","nodeType":"VariableDeclaration","scope":2087,"src":"1251:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2067,"name":"address","nodeType":"ElementaryTypeName","src":"1251:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2072,"indexed":false,"mutability":"mutable","name":"tokenConfig","nameLocation":"1298:11:12","nodeType":"VariableDeclaration","scope":2087,"src":"1284:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2975_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenConfig[]"},"typeName":{"baseType":{"id":2070,"nodeType":"UserDefinedTypeName","pathNode":{"id":2069,"name":"TokenConfig","nameLocations":["1284:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":2975,"src":"1284:11:12"},"referencedDeclaration":2975,"src":"1284:11:12","typeDescriptions":{"typeIdentifier":"t_struct$_TokenConfig_$2975_storage_ptr","typeString":"struct TokenConfig"}},"id":2071,"nodeType":"ArrayTypeName","src":"1284:13:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2975_storage_$dyn_storage_ptr","typeString":"struct TokenConfig[]"}},"visibility":"internal"},{"constant":false,"id":2074,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"1327:17:12","nodeType":"VariableDeclaration","scope":2087,"src":"1319:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2073,"name":"uint256","nodeType":"ElementaryTypeName","src":"1319:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2076,"indexed":false,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"1361:18:12","nodeType":"VariableDeclaration","scope":2087,"src":"1354:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2075,"name":"uint32","nodeType":"ElementaryTypeName","src":"1354:6:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2079,"indexed":false,"mutability":"mutable","name":"roleAccounts","nameLocation":"1406:12:12","nodeType":"VariableDeclaration","scope":2087,"src":"1389:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2958_memory_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":2078,"nodeType":"UserDefinedTypeName","pathNode":{"id":2077,"name":"PoolRoleAccounts","nameLocations":["1389:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":2958,"src":"1389:16:12"},"referencedDeclaration":2958,"src":"1389:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2958_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"},{"constant":false,"id":2082,"indexed":false,"mutability":"mutable","name":"hooksConfig","nameLocation":"1440:11:12","nodeType":"VariableDeclaration","scope":2087,"src":"1428:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2932_memory_ptr","typeString":"struct HooksConfig"},"typeName":{"id":2081,"nodeType":"UserDefinedTypeName","pathNode":{"id":2080,"name":"HooksConfig","nameLocations":["1428:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":2932,"src":"1428:11:12"},"referencedDeclaration":2932,"src":"1428:11:12","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2932_storage_ptr","typeString":"struct HooksConfig"}},"visibility":"internal"},{"constant":false,"id":2085,"indexed":false,"mutability":"mutable","name":"liquidityManagement","nameLocation":"1481:19:12","nodeType":"VariableDeclaration","scope":2087,"src":"1461:39:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2861_memory_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":2084,"nodeType":"UserDefinedTypeName","pathNode":{"id":2083,"name":"LiquidityManagement","nameLocations":["1461:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":2861,"src":"1461:19:12"},"referencedDeclaration":2861,"src":"1461:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2861_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"}],"src":"1211:295:12"},"src":"1191:316:12"},{"anonymous":false,"documentation":{"id":2088,"nodeType":"StructuredDocumentation","src":"1513:120:12","text":" @notice A Pool was initialized by calling `initialize`.\n @param pool The pool being initialized"},"eventSelector":"cad8c9d32507393b6508ca4a888b81979919b477510585bde8488f153072d6f3","id":2092,"name":"PoolInitialized","nameLocation":"1644:15:12","nodeType":"EventDefinition","parameters":{"id":2091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2090,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1676:4:12","nodeType":"VariableDeclaration","scope":2092,"src":"1660:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2089,"name":"address","nodeType":"ElementaryTypeName","src":"1660:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1659:22:12"},"src":"1638:44:12"},{"anonymous":false,"documentation":{"id":2093,"nodeType":"StructuredDocumentation","src":"1688:478:12","text":" @notice A swap has occurred.\n @param pool The pool with the tokens being swapped\n @param tokenIn The token entering the Vault (balance increases)\n @param tokenOut The token leaving the Vault (balance decreases)\n @param amountIn Number of tokenIn tokens\n @param amountOut Number of tokenOut tokens\n @param swapFeePercentage Swap fee percentage applied (can differ if dynamic)\n @param swapFeeAmount Swap fee amount paid"},"eventSelector":"0874b2d545cb271cdbda4e093020c452328b24af12382ed62c4d00f5c26709db","id":2111,"name":"Swap","nameLocation":"2177:4:12","nodeType":"EventDefinition","parameters":{"id":2110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2095,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"2207:4:12","nodeType":"VariableDeclaration","scope":2111,"src":"2191:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2094,"name":"address","nodeType":"ElementaryTypeName","src":"2191:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2098,"indexed":true,"mutability":"mutable","name":"tokenIn","nameLocation":"2236:7:12","nodeType":"VariableDeclaration","scope":2111,"src":"2221:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":2097,"nodeType":"UserDefinedTypeName","pathNode":{"id":2096,"name":"IERC20","nameLocations":["2221:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2221:6:12"},"referencedDeclaration":6383,"src":"2221:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2101,"indexed":true,"mutability":"mutable","name":"tokenOut","nameLocation":"2268:8:12","nodeType":"VariableDeclaration","scope":2111,"src":"2253:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":2100,"nodeType":"UserDefinedTypeName","pathNode":{"id":2099,"name":"IERC20","nameLocations":["2253:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2253:6:12"},"referencedDeclaration":6383,"src":"2253:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2103,"indexed":false,"mutability":"mutable","name":"amountIn","nameLocation":"2294:8:12","nodeType":"VariableDeclaration","scope":2111,"src":"2286:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2102,"name":"uint256","nodeType":"ElementaryTypeName","src":"2286:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2105,"indexed":false,"mutability":"mutable","name":"amountOut","nameLocation":"2320:9:12","nodeType":"VariableDeclaration","scope":2111,"src":"2312:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2104,"name":"uint256","nodeType":"ElementaryTypeName","src":"2312:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2107,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"2347:17:12","nodeType":"VariableDeclaration","scope":2111,"src":"2339:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2106,"name":"uint256","nodeType":"ElementaryTypeName","src":"2339:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2109,"indexed":false,"mutability":"mutable","name":"swapFeeAmount","nameLocation":"2382:13:12","nodeType":"VariableDeclaration","scope":2111,"src":"2374:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2108,"name":"uint256","nodeType":"ElementaryTypeName","src":"2374:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2181:220:12"},"src":"2171:231:12"},{"anonymous":false,"documentation":{"id":2112,"nodeType":"StructuredDocumentation","src":"2408:352:12","text":" @notice A wrap operation has occurred.\n @param wrappedToken The wrapped token address\n @param depositedUnderlying Number of underlying tokens deposited\n @param mintedShares Number of shares (wrapped tokens) minted\n @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)"},"eventSelector":"3771d13c67011e31e12031c54bb59b0bf544a80b81d280a3711e172aa8b7f47b","id":2123,"name":"Wrap","nameLocation":"2771:4:12","nodeType":"EventDefinition","parameters":{"id":2122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2115,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"2802:12:12","nodeType":"VariableDeclaration","scope":2123,"src":"2785:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":2114,"nodeType":"UserDefinedTypeName","pathNode":{"id":2113,"name":"IERC4626","nameLocations":["2785:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"2785:8:12"},"referencedDeclaration":5653,"src":"2785:8:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":2117,"indexed":false,"mutability":"mutable","name":"depositedUnderlying","nameLocation":"2832:19:12","nodeType":"VariableDeclaration","scope":2123,"src":"2824:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2116,"name":"uint256","nodeType":"ElementaryTypeName","src":"2824:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2119,"indexed":false,"mutability":"mutable","name":"mintedShares","nameLocation":"2869:12:12","nodeType":"VariableDeclaration","scope":2123,"src":"2861:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2118,"name":"uint256","nodeType":"ElementaryTypeName","src":"2861:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2121,"indexed":false,"mutability":"mutable","name":"bufferBalances","nameLocation":"2899:14:12","nodeType":"VariableDeclaration","scope":2123,"src":"2891:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2891:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2775:144:12"},"src":"2765:155:12"},{"anonymous":false,"documentation":{"id":2124,"nodeType":"StructuredDocumentation","src":"2926:355:12","text":" @notice An unwrap operation has occurred.\n @param wrappedToken The wrapped token address\n @param burnedShares Number of shares (wrapped tokens) burned\n @param withdrawnUnderlying Number of underlying tokens withdrawn\n @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)"},"eventSelector":"eeb740c90bf2b18c9532eb7d473137767036d893dff3e009f32718f821b2a4c0","id":2135,"name":"Unwrap","nameLocation":"3292:6:12","nodeType":"EventDefinition","parameters":{"id":2134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2127,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"3325:12:12","nodeType":"VariableDeclaration","scope":2135,"src":"3308:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":2126,"nodeType":"UserDefinedTypeName","pathNode":{"id":2125,"name":"IERC4626","nameLocations":["3308:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"3308:8:12"},"referencedDeclaration":5653,"src":"3308:8:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":2129,"indexed":false,"mutability":"mutable","name":"burnedShares","nameLocation":"3355:12:12","nodeType":"VariableDeclaration","scope":2135,"src":"3347:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2128,"name":"uint256","nodeType":"ElementaryTypeName","src":"3347:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2131,"indexed":false,"mutability":"mutable","name":"withdrawnUnderlying","nameLocation":"3385:19:12","nodeType":"VariableDeclaration","scope":2135,"src":"3377:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2130,"name":"uint256","nodeType":"ElementaryTypeName","src":"3377:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2133,"indexed":false,"mutability":"mutable","name":"bufferBalances","nameLocation":"3422:14:12","nodeType":"VariableDeclaration","scope":2135,"src":"3414:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2132,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3414:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3298:144:12"},"src":"3286:157:12"},{"anonymous":false,"documentation":{"id":2136,"nodeType":"StructuredDocumentation","src":"3449:562:12","text":" @notice Liquidity has been added to a pool (including initialization).\n @param pool The pool with liquidity added\n @param liquidityProvider The user performing the operation\n @param kind The add liquidity operation type (e.g., proportional, custom)\n @param totalSupply The total supply of the pool after the operation\n @param amountsAddedRaw The amount of each token that was added, sorted in token registration order\n @param swapFeeAmountsRaw The total swap fees charged, sorted in token registration order"},"eventSelector":"a26a52d8d53702bba7f137907b8e1f99ff87f6d450144270ca25e72481cca871","id":2153,"name":"LiquidityAdded","nameLocation":"4022:14:12","nodeType":"EventDefinition","parameters":{"id":2152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2138,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"4062:4:12","nodeType":"VariableDeclaration","scope":2153,"src":"4046:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2137,"name":"address","nodeType":"ElementaryTypeName","src":"4046:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2140,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"4092:17:12","nodeType":"VariableDeclaration","scope":2153,"src":"4076:33:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2139,"name":"address","nodeType":"ElementaryTypeName","src":"4076:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2143,"indexed":true,"mutability":"mutable","name":"kind","nameLocation":"4144:4:12","nodeType":"VariableDeclaration","scope":2153,"src":"4119:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$3088","typeString":"enum AddLiquidityKind"},"typeName":{"id":2142,"nodeType":"UserDefinedTypeName","pathNode":{"id":2141,"name":"AddLiquidityKind","nameLocations":["4119:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":3088,"src":"4119:16:12"},"referencedDeclaration":3088,"src":"4119:16:12","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$3088","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":2145,"indexed":false,"mutability":"mutable","name":"totalSupply","nameLocation":"4166:11:12","nodeType":"VariableDeclaration","scope":2153,"src":"4158:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2144,"name":"uint256","nodeType":"ElementaryTypeName","src":"4158:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2148,"indexed":false,"mutability":"mutable","name":"amountsAddedRaw","nameLocation":"4197:15:12","nodeType":"VariableDeclaration","scope":2153,"src":"4187:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2146,"name":"uint256","nodeType":"ElementaryTypeName","src":"4187:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2147,"nodeType":"ArrayTypeName","src":"4187:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2151,"indexed":false,"mutability":"mutable","name":"swapFeeAmountsRaw","nameLocation":"4232:17:12","nodeType":"VariableDeclaration","scope":2153,"src":"4222:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2149,"name":"uint256","nodeType":"ElementaryTypeName","src":"4222:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2150,"nodeType":"ArrayTypeName","src":"4222:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4036:219:12"},"src":"4016:240:12"},{"anonymous":false,"documentation":{"id":2154,"nodeType":"StructuredDocumentation","src":"4262:548:12","text":" @notice Liquidity has been removed from a pool.\n @param pool The pool with liquidity removed\n @param liquidityProvider The user performing the operation\n @param kind The remove liquidity operation type (e.g., proportional, custom)\n @param totalSupply The total supply of the pool after the operation\n @param amountsRemovedRaw The amount of each token that was removed, sorted in token registration order\n @param swapFeeAmountsRaw The total swap fees charged, sorted in token registration order"},"eventSelector":"fbe5b0d79fb94f1e81c0a92bf86ae9d3a19e9d1bf6202c0d3e75120f65d5d8a5","id":2171,"name":"LiquidityRemoved","nameLocation":"4821:16:12","nodeType":"EventDefinition","parameters":{"id":2170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2156,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"4863:4:12","nodeType":"VariableDeclaration","scope":2171,"src":"4847:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2155,"name":"address","nodeType":"ElementaryTypeName","src":"4847:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2158,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"4893:17:12","nodeType":"VariableDeclaration","scope":2171,"src":"4877:33:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2157,"name":"address","nodeType":"ElementaryTypeName","src":"4877:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2161,"indexed":true,"mutability":"mutable","name":"kind","nameLocation":"4948:4:12","nodeType":"VariableDeclaration","scope":2171,"src":"4920:32:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$3109","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":2160,"nodeType":"UserDefinedTypeName","pathNode":{"id":2159,"name":"RemoveLiquidityKind","nameLocations":["4920:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":3109,"src":"4920:19:12"},"referencedDeclaration":3109,"src":"4920:19:12","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$3109","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":2163,"indexed":false,"mutability":"mutable","name":"totalSupply","nameLocation":"4970:11:12","nodeType":"VariableDeclaration","scope":2171,"src":"4962:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2162,"name":"uint256","nodeType":"ElementaryTypeName","src":"4962:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2166,"indexed":false,"mutability":"mutable","name":"amountsRemovedRaw","nameLocation":"5001:17:12","nodeType":"VariableDeclaration","scope":2171,"src":"4991:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2164,"name":"uint256","nodeType":"ElementaryTypeName","src":"4991:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2165,"nodeType":"ArrayTypeName","src":"4991:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2169,"indexed":false,"mutability":"mutable","name":"swapFeeAmountsRaw","nameLocation":"5038:17:12","nodeType":"VariableDeclaration","scope":2171,"src":"5028:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2167,"name":"uint256","nodeType":"ElementaryTypeName","src":"5028:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2168,"nodeType":"ArrayTypeName","src":"5028:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4837:224:12"},"src":"4815:247:12"},{"anonymous":false,"documentation":{"id":2172,"nodeType":"StructuredDocumentation","src":"5068:114:12","text":" @notice The Vault's pause status has changed.\n @param paused True if the Vault was paused"},"eventSelector":"e0629fe656e45ad7fd63a24b899da368690024c07043b88e57aee5095b1d3d02","id":2176,"name":"VaultPausedStateChanged","nameLocation":"5193:23:12","nodeType":"EventDefinition","parameters":{"id":2175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2174,"indexed":false,"mutability":"mutable","name":"paused","nameLocation":"5222:6:12","nodeType":"VariableDeclaration","scope":2176,"src":"5217:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2173,"name":"bool","nodeType":"ElementaryTypeName","src":"5217:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5216:13:12"},"src":"5187:43:12"},{"anonymous":false,"documentation":{"id":2177,"nodeType":"StructuredDocumentation","src":"5236:87:12","text":"@notice `disableQuery` has been called on the Vault, disabling query functionality."},"eventSelector":"bd204090fd387f08e3076528bf09b4fc99d8100d749eace96c06002d3fedc625","id":2179,"name":"VaultQueriesDisabled","nameLocation":"5334:20:12","nodeType":"EventDefinition","parameters":{"id":2178,"nodeType":"ParameterList","parameters":[],"src":"5354:2:12"},"src":"5328:29:12"},{"anonymous":false,"documentation":{"id":2180,"nodeType":"StructuredDocumentation","src":"5363:85:12","text":"@notice `enableQuery` has been called on the Vault, enabling query functionality."},"eventSelector":"91d7478835f2b5adc315f5aad920f4a7f0a02f7fddf3042d17b2c80168ea17f5","id":2182,"name":"VaultQueriesEnabled","nameLocation":"5459:19:12","nodeType":"EventDefinition","parameters":{"id":2181,"nodeType":"ParameterList","parameters":[],"src":"5478:2:12"},"src":"5453:28:12"},{"anonymous":false,"documentation":{"id":2183,"nodeType":"StructuredDocumentation","src":"5487:171:12","text":" @notice A Pool's pause status has changed.\n @param pool The pool that was just paused or unpaused\n @param paused True if the pool was paused"},"eventSelector":"57e20448028297190122571be7cb6c1b1ef85730c673f7c72f533c8662419aa7","id":2189,"name":"PoolPausedStateChanged","nameLocation":"5669:22:12","nodeType":"EventDefinition","parameters":{"id":2188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2185,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"5708:4:12","nodeType":"VariableDeclaration","scope":2189,"src":"5692:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2184,"name":"address","nodeType":"ElementaryTypeName","src":"5692:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2187,"indexed":false,"mutability":"mutable","name":"paused","nameLocation":"5719:6:12","nodeType":"VariableDeclaration","scope":2189,"src":"5714:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2186,"name":"bool","nodeType":"ElementaryTypeName","src":"5714:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5691:35:12"},"src":"5663:64:12"},{"anonymous":false,"documentation":{"id":2190,"nodeType":"StructuredDocumentation","src":"5733:158:12","text":" @notice Emitted when the swap fee percentage of a pool is updated.\n @param swapFeePercentage The new swap fee percentage for the pool"},"eventSelector":"89d41522342fabac1471ca6073a5623e5caf367b03ca6e9a001478d0cf8be4a1","id":2196,"name":"SwapFeePercentageChanged","nameLocation":"5902:24:12","nodeType":"EventDefinition","parameters":{"id":2195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2192,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"5943:4:12","nodeType":"VariableDeclaration","scope":2196,"src":"5927:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2191,"name":"address","nodeType":"ElementaryTypeName","src":"5927:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2194,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"5957:17:12","nodeType":"VariableDeclaration","scope":2196,"src":"5949:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2193,"name":"uint256","nodeType":"ElementaryTypeName","src":"5949:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5926:49:12"},"src":"5896:80:12"},{"anonymous":false,"documentation":{"id":2197,"nodeType":"StructuredDocumentation","src":"5982:170:12","text":" @notice Recovery mode has been enabled or disabled for a pool.\n @param pool The pool\n @param recoveryMode True if recovery mode was enabled"},"eventSelector":"c2354cc2f78ea57777e55ddd43a7f22b112ce98868596880edaeb22b4f9c73a9","id":2203,"name":"PoolRecoveryModeStateChanged","nameLocation":"6163:28:12","nodeType":"EventDefinition","parameters":{"id":2202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2199,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"6208:4:12","nodeType":"VariableDeclaration","scope":2203,"src":"6192:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2198,"name":"address","nodeType":"ElementaryTypeName","src":"6192:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2201,"indexed":false,"mutability":"mutable","name":"recoveryMode","nameLocation":"6219:12:12","nodeType":"VariableDeclaration","scope":2203,"src":"6214:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2200,"name":"bool","nodeType":"ElementaryTypeName","src":"6214:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6191:41:12"},"src":"6157:76:12"},{"anonymous":false,"documentation":{"id":2204,"nodeType":"StructuredDocumentation","src":"6239:353:12","text":" @notice A protocol or pool creator fee has changed, causing an update to the aggregate swap fee.\n @dev The `ProtocolFeeController` will emit an event with the underlying change.\n @param pool The pool whose aggregate swap fee percentage changed\n @param aggregateSwapFeePercentage The new aggregate swap fee percentage"},"eventSelector":"e4d371097beea42453a37406e2aef4c04f3c548f84ac50e72578662c0dcd7354","id":2210,"name":"AggregateSwapFeePercentageChanged","nameLocation":"6603:33:12","nodeType":"EventDefinition","parameters":{"id":2209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2206,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"6653:4:12","nodeType":"VariableDeclaration","scope":2210,"src":"6637:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2205,"name":"address","nodeType":"ElementaryTypeName","src":"6637:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2208,"indexed":false,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"6667:26:12","nodeType":"VariableDeclaration","scope":2210,"src":"6659:34:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2207,"name":"uint256","nodeType":"ElementaryTypeName","src":"6659:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6636:58:12"},"src":"6597:98:12"},{"anonymous":false,"documentation":{"id":2211,"nodeType":"StructuredDocumentation","src":"6701:357:12","text":" @notice A protocol or pool creator fee has changed, causing an update to the aggregate yield fee.\n @dev The `ProtocolFeeController` will emit an event with the underlying change.\n @param pool The pool whose aggregate yield fee percentage changed\n @param aggregateYieldFeePercentage The new aggregate yield fee percentage"},"eventSelector":"606eb97d83164bd6b200d638cd49c14c65d94d4f2c674cfd85e24e0e202c3ca5","id":2217,"name":"AggregateYieldFeePercentageChanged","nameLocation":"7069:34:12","nodeType":"EventDefinition","parameters":{"id":2216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2213,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"7120:4:12","nodeType":"VariableDeclaration","scope":2217,"src":"7104:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2212,"name":"address","nodeType":"ElementaryTypeName","src":"7104:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2215,"indexed":false,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"7134:27:12","nodeType":"VariableDeclaration","scope":2217,"src":"7126:35:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2214,"name":"uint256","nodeType":"ElementaryTypeName","src":"7126:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7103:59:12"},"src":"7063:100:12"},{"anonymous":false,"documentation":{"id":2218,"nodeType":"StructuredDocumentation","src":"7169:132:12","text":" @notice A new authorizer is set by `setAuthorizer`.\n @param newAuthorizer The address of the new authorizer"},"eventSelector":"94b979b6831a51293e2641426f97747feed46f17779fed9cd18d1ecefcfe92ef","id":2223,"name":"AuthorizerChanged","nameLocation":"7312:17:12","nodeType":"EventDefinition","parameters":{"id":2222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2221,"indexed":true,"mutability":"mutable","name":"newAuthorizer","nameLocation":"7350:13:12","nodeType":"VariableDeclaration","scope":2223,"src":"7330:33:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$368","typeString":"contract IAuthorizer"},"typeName":{"id":2220,"nodeType":"UserDefinedTypeName","pathNode":{"id":2219,"name":"IAuthorizer","nameLocations":["7330:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":368,"src":"7330:11:12"},"referencedDeclaration":368,"src":"7330:11:12","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$368","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"7329:35:12"},"src":"7306:59:12"},{"anonymous":false,"documentation":{"id":2224,"nodeType":"StructuredDocumentation","src":"7371:180:12","text":" @notice A new protocol fee controller is set by `setProtocolFeeController`.\n @param newProtocolFeeController The address of the new protocol fee controller"},"eventSelector":"280a60b1e63c1774d397d35cce80eb80e51408ead755fb446e6f744ce98e5df0","id":2229,"name":"ProtocolFeeControllerChanged","nameLocation":"7562:28:12","nodeType":"EventDefinition","parameters":{"id":2228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2227,"indexed":true,"mutability":"mutable","name":"newProtocolFeeController","nameLocation":"7622:24:12","nodeType":"VariableDeclaration","scope":2229,"src":"7591:55:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"},"typeName":{"id":2226,"nodeType":"UserDefinedTypeName","pathNode":{"id":2225,"name":"IProtocolFeeController","nameLocations":["7591:22:12"],"nodeType":"IdentifierPath","referencedDeclaration":857,"src":"7591:22:12"},"referencedDeclaration":857,"src":"7591:22:12","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"src":"7590:57:12"},"src":"7556:92:12"},{"anonymous":false,"documentation":{"id":2230,"nodeType":"StructuredDocumentation","src":"7654:553:12","text":" @notice Liquidity was added to an ERC4626 buffer corresponding to the given wrapped token.\n @dev The underlying token can be derived from the wrapped token, so it's not included here.\n @param wrappedToken The wrapped token that identifies the buffer\n @param amountUnderlying The amount of the underlying token that was deposited\n @param amountWrapped The amount of the wrapped token that was deposited\n @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)"},"eventSelector":"75c4dc5f23640eeba7d404d9165f515fc3d9e23a5c8b6e2d09b4b9da56ff00a9","id":2241,"name":"LiquidityAddedToBuffer","nameLocation":"8218:22:12","nodeType":"EventDefinition","parameters":{"id":2240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2233,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"8267:12:12","nodeType":"VariableDeclaration","scope":2241,"src":"8250:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":2232,"nodeType":"UserDefinedTypeName","pathNode":{"id":2231,"name":"IERC4626","nameLocations":["8250:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"8250:8:12"},"referencedDeclaration":5653,"src":"8250:8:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":2235,"indexed":false,"mutability":"mutable","name":"amountUnderlying","nameLocation":"8297:16:12","nodeType":"VariableDeclaration","scope":2241,"src":"8289:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2234,"name":"uint256","nodeType":"ElementaryTypeName","src":"8289:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2237,"indexed":false,"mutability":"mutable","name":"amountWrapped","nameLocation":"8331:13:12","nodeType":"VariableDeclaration","scope":2241,"src":"8323:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2236,"name":"uint256","nodeType":"ElementaryTypeName","src":"8323:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2239,"indexed":false,"mutability":"mutable","name":"bufferBalances","nameLocation":"8362:14:12","nodeType":"VariableDeclaration","scope":2241,"src":"8354:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2238,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8354:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8240:142:12"},"src":"8212:171:12"},{"anonymous":false,"documentation":{"id":2242,"nodeType":"StructuredDocumentation","src":"8389:570:12","text":" @notice Buffer shares were minted for an ERC4626 buffer corresponding to a given wrapped token.\n @dev The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares`\n retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the\n \"totalSupply\" of a buffer.\n @param wrappedToken The wrapped token that identifies the buffer\n @param to The owner of the minted shares\n @param issuedShares The amount of \"internal BPT\" shares created"},"eventSelector":"d66f031d33381c6408f0b32c884461e5de3df8808399b6f3a3d86b1368f8ec34","id":2251,"name":"BufferSharesMinted","nameLocation":"8970:18:12","nodeType":"EventDefinition","parameters":{"id":2250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2245,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"9006:12:12","nodeType":"VariableDeclaration","scope":2251,"src":"8989:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":2244,"nodeType":"UserDefinedTypeName","pathNode":{"id":2243,"name":"IERC4626","nameLocations":["8989:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"8989:8:12"},"referencedDeclaration":5653,"src":"8989:8:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":2247,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"9036:2:12","nodeType":"VariableDeclaration","scope":2251,"src":"9020:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2246,"name":"address","nodeType":"ElementaryTypeName","src":"9020:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2249,"indexed":false,"mutability":"mutable","name":"issuedShares","nameLocation":"9048:12:12","nodeType":"VariableDeclaration","scope":2251,"src":"9040:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2248,"name":"uint256","nodeType":"ElementaryTypeName","src":"9040:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8988:73:12"},"src":"8964:98:12"},{"anonymous":false,"documentation":{"id":2252,"nodeType":"StructuredDocumentation","src":"9068:571:12","text":" @notice Buffer shares were burned for an ERC4626 buffer corresponding to a given wrapped token.\n @dev The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares`\n retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the\n \"totalSupply\" of a buffer.\n @param wrappedToken The wrapped token that identifies the buffer\n @param from The owner of the burned shares\n @param burnedShares The amount of \"internal BPT\" shares burned"},"eventSelector":"4e09f7f7fc37ce2897800e2c2a9099565edb0a133d19d84a6871b3530af8846b","id":2261,"name":"BufferSharesBurned","nameLocation":"9650:18:12","nodeType":"EventDefinition","parameters":{"id":2260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2255,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"9686:12:12","nodeType":"VariableDeclaration","scope":2261,"src":"9669:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":2254,"nodeType":"UserDefinedTypeName","pathNode":{"id":2253,"name":"IERC4626","nameLocations":["9669:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"9669:8:12"},"referencedDeclaration":5653,"src":"9669:8:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":2257,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"9716:4:12","nodeType":"VariableDeclaration","scope":2261,"src":"9700:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2256,"name":"address","nodeType":"ElementaryTypeName","src":"9700:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2259,"indexed":false,"mutability":"mutable","name":"burnedShares","nameLocation":"9730:12:12","nodeType":"VariableDeclaration","scope":2261,"src":"9722:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2258,"name":"uint256","nodeType":"ElementaryTypeName","src":"9722:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9668:75:12"},"src":"9644:100:12"},{"anonymous":false,"documentation":{"id":2262,"nodeType":"StructuredDocumentation","src":"9750:509:12","text":" @notice Liquidity was removed from an ERC4626 buffer.\n @dev The underlying token can be derived from the wrapped token, so it's not included here.\n @param wrappedToken The wrapped token that identifies the buffer\n @param amountUnderlying The amount of the underlying token that was withdrawn\n @param amountWrapped The amount of the wrapped token that was withdrawn\n @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)"},"eventSelector":"44d97b36e99b590b3d2875aad3b167b1d7fb1e063f3f1325a1eeac76caee5113","id":2273,"name":"LiquidityRemovedFromBuffer","nameLocation":"10270:26:12","nodeType":"EventDefinition","parameters":{"id":2272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2265,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"10323:12:12","nodeType":"VariableDeclaration","scope":2273,"src":"10306:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":2264,"nodeType":"UserDefinedTypeName","pathNode":{"id":2263,"name":"IERC4626","nameLocations":["10306:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"10306:8:12"},"referencedDeclaration":5653,"src":"10306:8:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":2267,"indexed":false,"mutability":"mutable","name":"amountUnderlying","nameLocation":"10353:16:12","nodeType":"VariableDeclaration","scope":2273,"src":"10345:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2266,"name":"uint256","nodeType":"ElementaryTypeName","src":"10345:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2269,"indexed":false,"mutability":"mutable","name":"amountWrapped","nameLocation":"10387:13:12","nodeType":"VariableDeclaration","scope":2273,"src":"10379:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2268,"name":"uint256","nodeType":"ElementaryTypeName","src":"10379:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2271,"indexed":false,"mutability":"mutable","name":"bufferBalances","nameLocation":"10418:14:12","nodeType":"VariableDeclaration","scope":2273,"src":"10410:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10410:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10296:142:12"},"src":"10264:175:12"},{"anonymous":false,"documentation":{"id":2274,"nodeType":"StructuredDocumentation","src":"10445:278:12","text":" @notice The Vault buffers pause status has changed.\n @dev If buffers all paused, all buffer operations (i.e., all calls through the Router with `isBuffer`\n set to true) will revert.\n @param paused True if the Vault buffers were paused"},"eventSelector":"300c7ca619eb846386aa0a6e5916ac2a41406448b0a2e99ba9ccafeb899015a5","id":2278,"name":"VaultBuffersPausedStateChanged","nameLocation":"10734:30:12","nodeType":"EventDefinition","parameters":{"id":2277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2276,"indexed":false,"mutability":"mutable","name":"paused","nameLocation":"10770:6:12","nodeType":"VariableDeclaration","scope":2278,"src":"10765:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2275,"name":"bool","nodeType":"ElementaryTypeName","src":"10765:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10764:13:12"},"src":"10728:50:12"},{"anonymous":false,"documentation":{"id":2279,"nodeType":"StructuredDocumentation","src":"10784:194:12","text":" @notice Pools can use this event to emit event data from the Vault.\n @param pool Pool address\n @param eventKey Event key\n @param eventData Encoded event data"},"eventSelector":"4bc4412e210115456903c65b5277d299a505e79f2eb852b92b1ca52d85856428","id":2287,"name":"VaultAuxiliary","nameLocation":"10989:14:12","nodeType":"EventDefinition","parameters":{"id":2286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"11020:4:12","nodeType":"VariableDeclaration","scope":2287,"src":"11004:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2280,"name":"address","nodeType":"ElementaryTypeName","src":"11004:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2283,"indexed":true,"mutability":"mutable","name":"eventKey","nameLocation":"11042:8:12","nodeType":"VariableDeclaration","scope":2287,"src":"11026:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2282,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11026:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2285,"indexed":false,"mutability":"mutable","name":"eventData","nameLocation":"11058:9:12","nodeType":"VariableDeclaration","scope":2287,"src":"11052:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2284,"name":"bytes","nodeType":"ElementaryTypeName","src":"11052:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11003:65:12"},"src":"10983:86:12"}],"scope":2289,"src":"500:10571:12","usedErrors":[],"usedEvents":[2087,2092,2111,2123,2135,2153,2171,2176,2179,2182,2189,2196,2203,2210,2217,2223,2229,2241,2251,2261,2273,2278,2287]}],"src":"46:11026:12"},"id":12},"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol","exportedSymbols":{"AddLiquidityKind":[3088],"AddLiquidityParams":[3104],"AfterSwapParams":[3082],"BufferWrapOrUnwrapParams":[3143],"FEE_BITLENGTH":[3146],"FEE_SCALING_FACTOR":[3149],"HookFlags":[2908],"HooksConfig":[2932],"IAuthorizer":[368],"IERC20":[6383],"IERC4626":[5653],"IHooks":[570],"IProtocolFeeController":[857],"IRateProvider":[24],"IVault":[1392],"IVaultExtension":[2707],"LiquidityManagement":[2861],"MAX_FEE_PERCENTAGE":[3152],"PoolConfig":[2886],"PoolConfigBits":[2863],"PoolData":[3010],"PoolRoleAccounts":[2958],"PoolSwapParams":[3053],"RemoveLiquidityKind":[3109],"RemoveLiquidityParams":[3125],"Rounding":[3013],"SwapKind":[3016],"SwapState":[2942],"TokenConfig":[2975],"TokenInfo":[2985],"TokenType":[2962],"VaultState":[2950],"VaultSwapParams":[3035],"WrappingDirection":[3128]},"id":2708,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2290,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:13"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":2292,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":5654,"src":"72:75:13","symbolAliases":[{"foreign":{"id":2291,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5653,"src":"81:8:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2294,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":6384,"src":"148:72:13","symbolAliases":[{"foreign":{"id":2293,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"157:6:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","file":"./IAuthorizer.sol","id":2296,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":369,"src":"222:48:13","symbolAliases":[{"foreign":{"id":2295,"name":"IAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"231:11:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"./IProtocolFeeController.sol","id":2298,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":858,"src":"271:70:13","symbolAliases":[{"foreign":{"id":2297,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"280:22:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"./IVault.sol","id":2300,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":1393,"src":"342:38:13","symbolAliases":[{"foreign":{"id":2299,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"351:6:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol","file":"./IHooks.sol","id":2302,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":571,"src":"381:38:13","symbolAliases":[{"foreign":{"id":2301,"name":"IHooks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"390:6:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":2303,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":3153,"src":"420:26:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultExtension","contractDependencies":[],"contractKind":"interface","documentation":{"id":2304,"nodeType":"StructuredDocumentation","src":"448:318:13","text":" @notice Interface for functions defined on the `VaultExtension` contract.\n @dev `VaultExtension` handles less critical or frequently used functions, since delegate calls through\n the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and\n liquidity operations."},"fullyImplemented":false,"id":2707,"linearizedBaseContracts":[2707],"name":"IVaultExtension","nameLocation":"777:15:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2305,"nodeType":"StructuredDocumentation","src":"1025:206:13","text":" @notice Returns the main Vault address.\n @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n @return vault The address of the main Vault"},"functionSelector":"fbfa77cf","id":2311,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"1245:5:13","nodeType":"FunctionDefinition","parameters":{"id":2306,"nodeType":"ParameterList","parameters":[],"src":"1250:2:13"},"returnParameters":{"id":2310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2311,"src":"1276:6:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"},"typeName":{"id":2308,"nodeType":"UserDefinedTypeName","pathNode":{"id":2307,"name":"IVault","nameLocations":["1276:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"1276:6:13"},"referencedDeclaration":1392,"src":"1276:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"visibility":"internal"}],"src":"1275:8:13"},"scope":2707,"src":"1236:48:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2312,"nodeType":"StructuredDocumentation","src":"1290:202:13","text":" @notice Returns the VaultAdmin contract address.\n @dev The VaultAdmin contract mostly implements permissioned functions.\n @return vaultAdmin The address of the Vault admin"},"functionSelector":"1ba0ae45","id":2317,"implemented":false,"kind":"function","modifiers":[],"name":"getVaultAdmin","nameLocation":"1506:13:13","nodeType":"FunctionDefinition","parameters":{"id":2313,"nodeType":"ParameterList","parameters":[],"src":"1519:2:13"},"returnParameters":{"id":2316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2315,"mutability":"mutable","name":"vaultAdmin","nameLocation":"1553:10:13","nodeType":"VariableDeclaration","scope":2317,"src":"1545:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2314,"name":"address","nodeType":"ElementaryTypeName","src":"1545:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1544:20:13"},"scope":2707,"src":"1497:68:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2318,"nodeType":"StructuredDocumentation","src":"1793:254:13","text":" @notice Returns whether the Vault is unlocked (i.e., executing an operation).\n @dev The Vault must be unlocked to perform state-changing liquidity operations.\n @return unlocked True if the Vault is unlocked, false otherwise"},"functionSelector":"8380edb7","id":2323,"implemented":false,"kind":"function","modifiers":[],"name":"isUnlocked","nameLocation":"2061:10:13","nodeType":"FunctionDefinition","parameters":{"id":2319,"nodeType":"ParameterList","parameters":[],"src":"2071:2:13"},"returnParameters":{"id":2322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2321,"mutability":"mutable","name":"unlocked","nameLocation":"2102:8:13","nodeType":"VariableDeclaration","scope":2323,"src":"2097:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2320,"name":"bool","nodeType":"ElementaryTypeName","src":"2097:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2096:15:13"},"scope":2707,"src":"2052:60:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2324,"nodeType":"StructuredDocumentation","src":"2118:141:13","text":"  @notice Returns the count of non-zero deltas.\n  @return nonzeroDeltaCount The current value of `_nonzeroDeltaCount`"},"functionSelector":"db817187","id":2329,"implemented":false,"kind":"function","modifiers":[],"name":"getNonzeroDeltaCount","nameLocation":"2273:20:13","nodeType":"FunctionDefinition","parameters":{"id":2325,"nodeType":"ParameterList","parameters":[],"src":"2293:2:13"},"returnParameters":{"id":2328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2327,"mutability":"mutable","name":"nonzeroDeltaCount","nameLocation":"2327:17:13","nodeType":"VariableDeclaration","scope":2329,"src":"2319:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2326,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2318:27:13"},"scope":2707,"src":"2264:82:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2330,"nodeType":"StructuredDocumentation","src":"2352:284:13","text":" @notice Retrieves the token delta for a specific token.\n @dev This function allows reading the value from the `_tokenDeltas` mapping.\n @param token The token for which the delta is being fetched\n @return tokenDelta The delta of the specified token"},"functionSelector":"9e825ff5","id":2338,"implemented":false,"kind":"function","modifiers":[],"name":"getTokenDelta","nameLocation":"2650:13:13","nodeType":"FunctionDefinition","parameters":{"id":2334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2333,"mutability":"mutable","name":"token","nameLocation":"2671:5:13","nodeType":"VariableDeclaration","scope":2338,"src":"2664:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":2332,"nodeType":"UserDefinedTypeName","pathNode":{"id":2331,"name":"IERC20","nameLocations":["2664:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2664:6:13"},"referencedDeclaration":6383,"src":"2664:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"2663:14:13"},"returnParameters":{"id":2337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2336,"mutability":"mutable","name":"tokenDelta","nameLocation":"2708:10:13","nodeType":"VariableDeclaration","scope":2338,"src":"2701:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2335,"name":"int256","nodeType":"ElementaryTypeName","src":"2701:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2700:19:13"},"scope":2707,"src":"2641:79:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2339,"nodeType":"StructuredDocumentation","src":"2726:230:13","text":" @notice Retrieves the reserve (i.e., total Vault balance) of a given token.\n @param token The token for which to retrieve the reserve\n @return reserveAmount The amount of reserves for the given token"},"functionSelector":"96787092","id":2347,"implemented":false,"kind":"function","modifiers":[],"name":"getReservesOf","nameLocation":"2970:13:13","nodeType":"FunctionDefinition","parameters":{"id":2343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2342,"mutability":"mutable","name":"token","nameLocation":"2991:5:13","nodeType":"VariableDeclaration","scope":2347,"src":"2984:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":2341,"nodeType":"UserDefinedTypeName","pathNode":{"id":2340,"name":"IERC20","nameLocations":["2984:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2984:6:13"},"referencedDeclaration":6383,"src":"2984:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"2983:14:13"},"returnParameters":{"id":2346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2345,"mutability":"mutable","name":"reserveAmount","nameLocation":"3029:13:13","nodeType":"VariableDeclaration","scope":2347,"src":"3021:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2344,"name":"uint256","nodeType":"ElementaryTypeName","src":"3021:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3020:23:13"},"scope":2707,"src":"2961:83:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2348,"nodeType":"StructuredDocumentation","src":"3050:944:13","text":" @notice This flag is used to detect and tax \"round-trip\" interactions (adding and removing liquidity in the\n same pool).\n @dev Taxing remove liquidity proportional whenever liquidity was added in the same `unlock` call adds an extra\n layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional\n is the only standard way to exit a position without fees, and this flag is used to enable fees in that case.\n It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse\n than a simple swap for every pool type.\n @param pool Address of the pool to check\n @return liquidityAdded True if liquidity has been added to this pool in the current transaction\n Note that there is no `sessionId` argument; it always returns the value for the current (i.e., latest) session."},"functionSelector":"ace9b89b","id":2355,"implemented":false,"kind":"function","modifiers":[],"name":"getAddLiquidityCalledFlag","nameLocation":"4008:25:13","nodeType":"FunctionDefinition","parameters":{"id":2351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2350,"mutability":"mutable","name":"pool","nameLocation":"4042:4:13","nodeType":"VariableDeclaration","scope":2355,"src":"4034:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2349,"name":"address","nodeType":"ElementaryTypeName","src":"4034:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4033:14:13"},"returnParameters":{"id":2354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2353,"mutability":"mutable","name":"liquidityAdded","nameLocation":"4076:14:13","nodeType":"VariableDeclaration","scope":2355,"src":"4071:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2352,"name":"bool","nodeType":"ElementaryTypeName","src":"4071:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4070:21:13"},"scope":2707,"src":"3999:93:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2356,"nodeType":"StructuredDocumentation","src":"4323:1604:13","text":" @notice Registers a pool, associating it with its factory and the tokens it manages.\n @dev A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely\n by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an\n additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused\n pool will automatically unpause. Balancer timestamps are 32 bits.\n A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a\n multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to\n the Vault.\n If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the\n authorizer.\n @param pool The address of the pool being registered\n @param tokenConfig An array of descriptors for the tokens the pool will manage\n @param swapFeePercentage The initial static swap fee percentage of the pool\n @param pauseWindowEndTime The timestamp after which it is no longer possible to pause the pool\n @param protocolFeeExempt If true, the pool's initial aggregate fees will be set to 0\n @param roleAccounts Addresses the Vault will allow to change certain pool settings\n @param poolHooksContract Contract that implements the hooks for the pool\n @param liquidityManagement Liquidity management flags with implemented methods"},"functionSelector":"eeec802f","id":2379,"implemented":false,"kind":"function","modifiers":[],"name":"registerPool","nameLocation":"5941:12:13","nodeType":"FunctionDefinition","parameters":{"id":2377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2358,"mutability":"mutable","name":"pool","nameLocation":"5971:4:13","nodeType":"VariableDeclaration","scope":2379,"src":"5963:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2357,"name":"address","nodeType":"ElementaryTypeName","src":"5963:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2362,"mutability":"mutable","name":"tokenConfig","nameLocation":"6006:11:13","nodeType":"VariableDeclaration","scope":2379,"src":"5985:32:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2975_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenConfig[]"},"typeName":{"baseType":{"id":2360,"nodeType":"UserDefinedTypeName","pathNode":{"id":2359,"name":"TokenConfig","nameLocations":["5985:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":2975,"src":"5985:11:13"},"referencedDeclaration":2975,"src":"5985:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_TokenConfig_$2975_storage_ptr","typeString":"struct TokenConfig"}},"id":2361,"nodeType":"ArrayTypeName","src":"5985:13:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2975_storage_$dyn_storage_ptr","typeString":"struct TokenConfig[]"}},"visibility":"internal"},{"constant":false,"id":2364,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"6035:17:13","nodeType":"VariableDeclaration","scope":2379,"src":"6027:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2363,"name":"uint256","nodeType":"ElementaryTypeName","src":"6027:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2366,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"6069:18:13","nodeType":"VariableDeclaration","scope":2379,"src":"6062:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2365,"name":"uint32","nodeType":"ElementaryTypeName","src":"6062:6:13","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2368,"mutability":"mutable","name":"protocolFeeExempt","nameLocation":"6102:17:13","nodeType":"VariableDeclaration","scope":2379,"src":"6097:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2367,"name":"bool","nodeType":"ElementaryTypeName","src":"6097:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2371,"mutability":"mutable","name":"roleAccounts","nameLocation":"6155:12:13","nodeType":"VariableDeclaration","scope":2379,"src":"6129:38:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2958_calldata_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":2370,"nodeType":"UserDefinedTypeName","pathNode":{"id":2369,"name":"PoolRoleAccounts","nameLocations":["6129:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":2958,"src":"6129:16:13"},"referencedDeclaration":2958,"src":"6129:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2958_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"},{"constant":false,"id":2373,"mutability":"mutable","name":"poolHooksContract","nameLocation":"6185:17:13","nodeType":"VariableDeclaration","scope":2379,"src":"6177:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2372,"name":"address","nodeType":"ElementaryTypeName","src":"6177:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2376,"mutability":"mutable","name":"liquidityManagement","nameLocation":"6241:19:13","nodeType":"VariableDeclaration","scope":2379,"src":"6212:48:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2861_calldata_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":2375,"nodeType":"UserDefinedTypeName","pathNode":{"id":2374,"name":"LiquidityManagement","nameLocations":["6212:19:13"],"nodeType":"IdentifierPath","referencedDeclaration":2861,"src":"6212:19:13"},"referencedDeclaration":2861,"src":"6212:19:13","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2861_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"}],"src":"5953:313:13"},"returnParameters":{"id":2378,"nodeType":"ParameterList","parameters":[],"src":"6275:0:13"},"scope":2707,"src":"5932:344:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2380,"nodeType":"StructuredDocumentation","src":"6282:185:13","text":" @notice Checks whether a pool is registered.\n @param pool Address of the pool to check\n @return registered True if the pool is registered, false otherwise"},"functionSelector":"c673bdaf","id":2387,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolRegistered","nameLocation":"6481:16:13","nodeType":"FunctionDefinition","parameters":{"id":2383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2382,"mutability":"mutable","name":"pool","nameLocation":"6506:4:13","nodeType":"VariableDeclaration","scope":2387,"src":"6498:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2381,"name":"address","nodeType":"ElementaryTypeName","src":"6498:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6497:14:13"},"returnParameters":{"id":2386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2385,"mutability":"mutable","name":"registered","nameLocation":"6540:10:13","nodeType":"VariableDeclaration","scope":2387,"src":"6535:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2384,"name":"bool","nodeType":"ElementaryTypeName","src":"6535:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6534:17:13"},"scope":2707,"src":"6472:80:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2388,"nodeType":"StructuredDocumentation","src":"6558:589:13","text":" @notice Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\n @param pool Address of the pool to initialize\n @param to Address that will receive the output BPT\n @param tokens Tokens used to seed the pool (must match the registered tokens)\n @param exactAmountsIn Exact amounts of input tokens\n @param minBptAmountOut Minimum amount of output pool tokens\n @param userData Additional (optional) data required for adding initial liquidity\n @return bptAmountOut Output pool token amount"},"functionSelector":"ba8a2be0","id":2408,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"7161:10:13","nodeType":"FunctionDefinition","parameters":{"id":2404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2390,"mutability":"mutable","name":"pool","nameLocation":"7189:4:13","nodeType":"VariableDeclaration","scope":2408,"src":"7181:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2389,"name":"address","nodeType":"ElementaryTypeName","src":"7181:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2392,"mutability":"mutable","name":"to","nameLocation":"7211:2:13","nodeType":"VariableDeclaration","scope":2408,"src":"7203:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2391,"name":"address","nodeType":"ElementaryTypeName","src":"7203:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2396,"mutability":"mutable","name":"tokens","nameLocation":"7239:6:13","nodeType":"VariableDeclaration","scope":2408,"src":"7223:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":2394,"nodeType":"UserDefinedTypeName","pathNode":{"id":2393,"name":"IERC20","nameLocations":["7223:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"7223:6:13"},"referencedDeclaration":6383,"src":"7223:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":2395,"nodeType":"ArrayTypeName","src":"7223:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":2399,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"7272:14:13","nodeType":"VariableDeclaration","scope":2408,"src":"7255:31:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2397,"name":"uint256","nodeType":"ElementaryTypeName","src":"7255:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2398,"nodeType":"ArrayTypeName","src":"7255:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2401,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"7304:15:13","nodeType":"VariableDeclaration","scope":2408,"src":"7296:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2400,"name":"uint256","nodeType":"ElementaryTypeName","src":"7296:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2403,"mutability":"mutable","name":"userData","nameLocation":"7342:8:13","nodeType":"VariableDeclaration","scope":2408,"src":"7329:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2402,"name":"bytes","nodeType":"ElementaryTypeName","src":"7329:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7171:185:13"},"returnParameters":{"id":2407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2406,"mutability":"mutable","name":"bptAmountOut","nameLocation":"7383:12:13","nodeType":"VariableDeclaration","scope":2408,"src":"7375:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2405,"name":"uint256","nodeType":"ElementaryTypeName","src":"7375:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7374:22:13"},"scope":2707,"src":"7152:245:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2409,"nodeType":"StructuredDocumentation","src":"7627:258:13","text":" @notice Checks whether a pool is initialized.\n @dev An initialized pool can be considered registered as well.\n @param pool Address of the pool to check\n @return initialized True if the pool is initialized, false otherwise"},"functionSelector":"532cec7c","id":2416,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolInitialized","nameLocation":"7899:17:13","nodeType":"FunctionDefinition","parameters":{"id":2412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2411,"mutability":"mutable","name":"pool","nameLocation":"7925:4:13","nodeType":"VariableDeclaration","scope":2416,"src":"7917:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2410,"name":"address","nodeType":"ElementaryTypeName","src":"7917:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7916:14:13"},"returnParameters":{"id":2415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2414,"mutability":"mutable","name":"initialized","nameLocation":"7959:11:13","nodeType":"VariableDeclaration","scope":2416,"src":"7954:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2413,"name":"bool","nodeType":"ElementaryTypeName","src":"7954:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7953:18:13"},"scope":2707,"src":"7890:82:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2417,"nodeType":"StructuredDocumentation","src":"7978:152:13","text":" @notice Gets the tokens registered to a pool.\n @param pool Address of the pool\n @return tokens List of tokens in the pool"},"functionSelector":"ca4f2803","id":2426,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokens","nameLocation":"8144:13:13","nodeType":"FunctionDefinition","parameters":{"id":2420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2419,"mutability":"mutable","name":"pool","nameLocation":"8166:4:13","nodeType":"VariableDeclaration","scope":2426,"src":"8158:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2418,"name":"address","nodeType":"ElementaryTypeName","src":"8158:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8157:14:13"},"returnParameters":{"id":2425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2424,"mutability":"mutable","name":"tokens","nameLocation":"8211:6:13","nodeType":"VariableDeclaration","scope":2426,"src":"8195:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":2422,"nodeType":"UserDefinedTypeName","pathNode":{"id":2421,"name":"IERC20","nameLocations":["8195:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"8195:6:13"},"referencedDeclaration":6383,"src":"8195:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":2423,"nodeType":"ArrayTypeName","src":"8195:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"8194:24:13"},"scope":2707,"src":"8135:84:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2427,"nodeType":"StructuredDocumentation","src":"8225:512:13","text":" @notice Gets pool token rates.\n @dev This function performs external calls if tokens are yield-bearing. All returned arrays are in token\n registration order.\n @param pool Address of the pool\n @return decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n calculations. FP(1) for 18-decimal tokens\n @return tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens"},"functionSelector":"7e361bde","id":2438,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenRates","nameLocation":"8751:17:13","nodeType":"FunctionDefinition","parameters":{"id":2430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2429,"mutability":"mutable","name":"pool","nameLocation":"8786:4:13","nodeType":"VariableDeclaration","scope":2438,"src":"8778:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2428,"name":"address","nodeType":"ElementaryTypeName","src":"8778:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8768:28:13"},"returnParameters":{"id":2437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2433,"mutability":"mutable","name":"decimalScalingFactors","nameLocation":"8837:21:13","nodeType":"VariableDeclaration","scope":2438,"src":"8820:38:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2431,"name":"uint256","nodeType":"ElementaryTypeName","src":"8820:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2432,"nodeType":"ArrayTypeName","src":"8820:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2436,"mutability":"mutable","name":"tokenRates","nameLocation":"8877:10:13","nodeType":"VariableDeclaration","scope":2438,"src":"8860:27:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2434,"name":"uint256","nodeType":"ElementaryTypeName","src":"8860:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2435,"nodeType":"ArrayTypeName","src":"8860:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"8819:69:13"},"scope":2707,"src":"8742:147:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2439,"nodeType":"StructuredDocumentation","src":"8895:287:13","text":" @notice Returns comprehensive pool data for the given pool.\n @dev This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\n @param pool The address of the pool\n @return poolData The `PoolData` result"},"functionSelector":"13d21cdf","id":2447,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolData","nameLocation":"9196:11:13","nodeType":"FunctionDefinition","parameters":{"id":2442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2441,"mutability":"mutable","name":"pool","nameLocation":"9216:4:13","nodeType":"VariableDeclaration","scope":2447,"src":"9208:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2440,"name":"address","nodeType":"ElementaryTypeName","src":"9208:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9207:14:13"},"returnParameters":{"id":2446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2445,"mutability":"mutable","name":"poolData","nameLocation":"9261:8:13","nodeType":"VariableDeclaration","scope":2447,"src":"9245:24:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$3010_memory_ptr","typeString":"struct PoolData"},"typeName":{"id":2444,"nodeType":"UserDefinedTypeName","pathNode":{"id":2443,"name":"PoolData","nameLocations":["9245:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":3010,"src":"9245:8:13"},"referencedDeclaration":3010,"src":"9245:8:13","typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$3010_storage_ptr","typeString":"struct PoolData"}},"visibility":"internal"}],"src":"9244:26:13"},"scope":2707,"src":"9187:84:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2448,"nodeType":"StructuredDocumentation","src":"9277:531:13","text":" @notice Gets the raw data for a pool: tokens, raw balances, scaling factors.\n @param pool Address of the pool\n @return tokens The pool tokens, sorted in registration order\n @return tokenInfo Token info structs (type, rate provider, yield flag), sorted in token registration order\n @return balancesRaw Current native decimal balances of the pool tokens, sorted in token registration order\n @return lastBalancesLiveScaled18 Last saved live balances, sorted in token registration order"},"functionSelector":"67e0e076","id":2467,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenInfo","nameLocation":"9822:16:13","nodeType":"FunctionDefinition","parameters":{"id":2451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2450,"mutability":"mutable","name":"pool","nameLocation":"9856:4:13","nodeType":"VariableDeclaration","scope":2467,"src":"9848:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2449,"name":"address","nodeType":"ElementaryTypeName","src":"9848:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9838:28:13"},"returnParameters":{"id":2466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2455,"mutability":"mutable","name":"tokens","nameLocation":"9943:6:13","nodeType":"VariableDeclaration","scope":2467,"src":"9927:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":2453,"nodeType":"UserDefinedTypeName","pathNode":{"id":2452,"name":"IERC20","nameLocations":["9927:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"9927:6:13"},"referencedDeclaration":6383,"src":"9927:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":2454,"nodeType":"ArrayTypeName","src":"9927:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":2459,"mutability":"mutable","name":"tokenInfo","nameLocation":"9982:9:13","nodeType":"VariableDeclaration","scope":2467,"src":"9963:28:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2985_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenInfo[]"},"typeName":{"baseType":{"id":2457,"nodeType":"UserDefinedTypeName","pathNode":{"id":2456,"name":"TokenInfo","nameLocations":["9963:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":2985,"src":"9963:9:13"},"referencedDeclaration":2985,"src":"9963:9:13","typeDescriptions":{"typeIdentifier":"t_struct$_TokenInfo_$2985_storage_ptr","typeString":"struct TokenInfo"}},"id":2458,"nodeType":"ArrayTypeName","src":"9963:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2985_storage_$dyn_storage_ptr","typeString":"struct TokenInfo[]"}},"visibility":"internal"},{"constant":false,"id":2462,"mutability":"mutable","name":"balancesRaw","nameLocation":"10022:11:13","nodeType":"VariableDeclaration","scope":2467,"src":"10005:28:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2460,"name":"uint256","nodeType":"ElementaryTypeName","src":"10005:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2461,"nodeType":"ArrayTypeName","src":"10005:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2465,"mutability":"mutable","name":"lastBalancesLiveScaled18","nameLocation":"10064:24:13","nodeType":"VariableDeclaration","scope":2467,"src":"10047:41:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2463,"name":"uint256","nodeType":"ElementaryTypeName","src":"10047:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2464,"nodeType":"ArrayTypeName","src":"10047:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"9913:185:13"},"scope":2707,"src":"9813:286:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2468,"nodeType":"StructuredDocumentation","src":"10105:312:13","text":" @notice Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in\n registration order.\n @param pool Address of the pool\n @return balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates"},"functionSelector":"535cfd8a","id":2476,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentLiveBalances","nameLocation":"10431:22:13","nodeType":"FunctionDefinition","parameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2470,"mutability":"mutable","name":"pool","nameLocation":"10462:4:13","nodeType":"VariableDeclaration","scope":2476,"src":"10454:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2469,"name":"address","nodeType":"ElementaryTypeName","src":"10454:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10453:14:13"},"returnParameters":{"id":2475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2474,"mutability":"mutable","name":"balancesLiveScaled18","nameLocation":"10508:20:13","nodeType":"VariableDeclaration","scope":2476,"src":"10491:37:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2472,"name":"uint256","nodeType":"ElementaryTypeName","src":"10491:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2473,"nodeType":"ArrayTypeName","src":"10491:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10490:39:13"},"scope":2707,"src":"10422:108:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2477,"nodeType":"StructuredDocumentation","src":"10536:301:13","text":" @notice Gets the configuration parameters of a pool.\n @dev The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\n @param pool Address of the pool\n @return poolConfig The pool configuration as a `PoolConfig` struct"},"functionSelector":"f29486a1","id":2485,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolConfig","nameLocation":"10851:13:13","nodeType":"FunctionDefinition","parameters":{"id":2480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2479,"mutability":"mutable","name":"pool","nameLocation":"10873:4:13","nodeType":"VariableDeclaration","scope":2485,"src":"10865:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2478,"name":"address","nodeType":"ElementaryTypeName","src":"10865:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10864:14:13"},"returnParameters":{"id":2484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2483,"mutability":"mutable","name":"poolConfig","nameLocation":"10920:10:13","nodeType":"VariableDeclaration","scope":2485,"src":"10902:28:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2886_memory_ptr","typeString":"struct PoolConfig"},"typeName":{"id":2482,"nodeType":"UserDefinedTypeName","pathNode":{"id":2481,"name":"PoolConfig","nameLocations":["10902:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":2886,"src":"10902:10:13"},"referencedDeclaration":2886,"src":"10902:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2886_storage_ptr","typeString":"struct PoolConfig"}},"visibility":"internal"}],"src":"10901:30:13"},"scope":2707,"src":"10842:90:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2486,"nodeType":"StructuredDocumentation","src":"10938:283:13","text":" @notice Gets the hooks configuration parameters of a pool.\n @dev The `HooksConfig` contains flags indicating which pool hooks are implemented.\n @param pool Address of the pool\n @return hooksConfig The hooks configuration as a `HooksConfig` struct"},"functionSelector":"ce8630d4","id":2494,"implemented":false,"kind":"function","modifiers":[],"name":"getHooksConfig","nameLocation":"11235:14:13","nodeType":"FunctionDefinition","parameters":{"id":2489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2488,"mutability":"mutable","name":"pool","nameLocation":"11258:4:13","nodeType":"VariableDeclaration","scope":2494,"src":"11250:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2487,"name":"address","nodeType":"ElementaryTypeName","src":"11250:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11249:14:13"},"returnParameters":{"id":2493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2492,"mutability":"mutable","name":"hooksConfig","nameLocation":"11306:11:13","nodeType":"VariableDeclaration","scope":2494,"src":"11287:30:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2932_memory_ptr","typeString":"struct HooksConfig"},"typeName":{"id":2491,"nodeType":"UserDefinedTypeName","pathNode":{"id":2490,"name":"HooksConfig","nameLocations":["11287:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":2932,"src":"11287:11:13"},"referencedDeclaration":2932,"src":"11287:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2932_storage_ptr","typeString":"struct HooksConfig"}},"visibility":"internal"}],"src":"11286:32:13"},"scope":2707,"src":"11226:93:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2495,"nodeType":"StructuredDocumentation","src":"11325:160:13","text":" @notice The current rate of a pool token (BPT) = invariant / totalSupply.\n @param pool Address of the pool\n @return rate BPT rate"},"functionSelector":"4f037ee7","id":2502,"implemented":false,"kind":"function","modifiers":[],"name":"getBptRate","nameLocation":"11499:10:13","nodeType":"FunctionDefinition","parameters":{"id":2498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2497,"mutability":"mutable","name":"pool","nameLocation":"11518:4:13","nodeType":"VariableDeclaration","scope":2502,"src":"11510:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2496,"name":"address","nodeType":"ElementaryTypeName","src":"11510:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11509:14:13"},"returnParameters":{"id":2501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2500,"mutability":"mutable","name":"rate","nameLocation":"11555:4:13","nodeType":"VariableDeclaration","scope":2502,"src":"11547:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2499,"name":"uint256","nodeType":"ElementaryTypeName","src":"11547:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11546:14:13"},"scope":2707,"src":"11490:71:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2503,"nodeType":"StructuredDocumentation","src":"11792:168:13","text":" @notice Gets the total supply of a given ERC20 token.\n @param token The token address\n @return tokenTotalSupply Total supply of the token"},"functionSelector":"e4dc2aa4","id":2510,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"11974:11:13","nodeType":"FunctionDefinition","parameters":{"id":2506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2505,"mutability":"mutable","name":"token","nameLocation":"11994:5:13","nodeType":"VariableDeclaration","scope":2510,"src":"11986:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2504,"name":"address","nodeType":"ElementaryTypeName","src":"11986:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11985:15:13"},"returnParameters":{"id":2509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2508,"mutability":"mutable","name":"tokenTotalSupply","nameLocation":"12032:16:13","nodeType":"VariableDeclaration","scope":2510,"src":"12024:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2507,"name":"uint256","nodeType":"ElementaryTypeName","src":"12024:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12023:26:13"},"scope":2707,"src":"11965:85:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2511,"nodeType":"StructuredDocumentation","src":"12056:225:13","text":" @notice Gets the balance of an account for a given ERC20 token.\n @param token Address of the token\n @param account Address of the account\n @return tokenBalance Token balance of the account"},"functionSelector":"f7888aec","id":2520,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"12295:9:13","nodeType":"FunctionDefinition","parameters":{"id":2516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2513,"mutability":"mutable","name":"token","nameLocation":"12313:5:13","nodeType":"VariableDeclaration","scope":2520,"src":"12305:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2512,"name":"address","nodeType":"ElementaryTypeName","src":"12305:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2515,"mutability":"mutable","name":"account","nameLocation":"12328:7:13","nodeType":"VariableDeclaration","scope":2520,"src":"12320:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2514,"name":"address","nodeType":"ElementaryTypeName","src":"12320:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12304:32:13"},"returnParameters":{"id":2519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2518,"mutability":"mutable","name":"tokenBalance","nameLocation":"12368:12:13","nodeType":"VariableDeclaration","scope":2520,"src":"12360:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2517,"name":"uint256","nodeType":"ElementaryTypeName","src":"12360:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12359:22:13"},"scope":2707,"src":"12286:96:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2521,"nodeType":"StructuredDocumentation","src":"12388:299:13","text":" @notice Gets the allowance of a spender for a given ERC20 token and owner.\n @param token Address of the token\n @param owner Address of the owner\n @param spender Address of the spender\n @return tokenAllowance Amount of tokens the spender is allowed to spend"},"functionSelector":"927da105","id":2532,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"12701:9:13","nodeType":"FunctionDefinition","parameters":{"id":2528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2523,"mutability":"mutable","name":"token","nameLocation":"12719:5:13","nodeType":"VariableDeclaration","scope":2532,"src":"12711:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2522,"name":"address","nodeType":"ElementaryTypeName","src":"12711:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2525,"mutability":"mutable","name":"owner","nameLocation":"12734:5:13","nodeType":"VariableDeclaration","scope":2532,"src":"12726:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2524,"name":"address","nodeType":"ElementaryTypeName","src":"12726:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2527,"mutability":"mutable","name":"spender","nameLocation":"12749:7:13","nodeType":"VariableDeclaration","scope":2532,"src":"12741:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2526,"name":"address","nodeType":"ElementaryTypeName","src":"12741:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12710:47:13"},"returnParameters":{"id":2531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2530,"mutability":"mutable","name":"tokenAllowance","nameLocation":"12789:14:13","nodeType":"VariableDeclaration","scope":2532,"src":"12781:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2529,"name":"uint256","nodeType":"ElementaryTypeName","src":"12781:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12780:24:13"},"scope":2707,"src":"12692:113:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2533,"nodeType":"StructuredDocumentation","src":"12811:475:13","text":" @notice Approves a spender to spend pool tokens on behalf of sender.\n @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n the pool contract, so msg.sender is used as the token address.\n @param owner Address of the owner\n @param spender Address of the spender\n @param amount Amount of tokens to approve\n @return success True if successful, false otherwise"},"functionSelector":"e1f21c67","id":2544,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"13300:7:13","nodeType":"FunctionDefinition","parameters":{"id":2540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2535,"mutability":"mutable","name":"owner","nameLocation":"13316:5:13","nodeType":"VariableDeclaration","scope":2544,"src":"13308:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2534,"name":"address","nodeType":"ElementaryTypeName","src":"13308:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2537,"mutability":"mutable","name":"spender","nameLocation":"13331:7:13","nodeType":"VariableDeclaration","scope":2544,"src":"13323:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2536,"name":"address","nodeType":"ElementaryTypeName","src":"13323:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2539,"mutability":"mutable","name":"amount","nameLocation":"13348:6:13","nodeType":"VariableDeclaration","scope":2544,"src":"13340:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2538,"name":"uint256","nodeType":"ElementaryTypeName","src":"13340:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13307:48:13"},"returnParameters":{"id":2543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"mutability":"mutable","name":"success","nameLocation":"13379:7:13","nodeType":"VariableDeclaration","scope":2544,"src":"13374:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2541,"name":"bool","nodeType":"ElementaryTypeName","src":"13374:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13373:14:13"},"scope":2707,"src":"13291:97:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2545,"nodeType":"StructuredDocumentation","src":"13615:251:13","text":" @notice Indicates whether a pool is paused.\n @dev If a pool is paused, all non-Recovery Mode state-changing operations will revert.\n @param pool The pool to be checked\n @return poolPaused True if the pool is paused"},"functionSelector":"6c9bc732","id":2552,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolPaused","nameLocation":"13880:12:13","nodeType":"FunctionDefinition","parameters":{"id":2548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2547,"mutability":"mutable","name":"pool","nameLocation":"13901:4:13","nodeType":"VariableDeclaration","scope":2552,"src":"13893:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2546,"name":"address","nodeType":"ElementaryTypeName","src":"13893:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13892:14:13"},"returnParameters":{"id":2551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2550,"mutability":"mutable","name":"poolPaused","nameLocation":"13935:10:13","nodeType":"VariableDeclaration","scope":2552,"src":"13930:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2549,"name":"bool","nodeType":"ElementaryTypeName","src":"13930:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13929:17:13"},"scope":2707,"src":"13871:76:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2553,"nodeType":"StructuredDocumentation","src":"13953:648:13","text":" @notice Returns the paused status, and end times of the Pool's pause window and buffer period.\n @dev Note that even when set to a paused state, the pool will automatically unpause at the end of\n the buffer period. Balancer timestamps are 32 bits.\n @param pool The pool whose data is requested\n @return poolPaused True if the Pool is paused\n @return poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\n @return poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\n @return pauseManager The pause manager, or the zero address"},"functionSelector":"15e32046","id":2566,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolPausedState","nameLocation":"14615:18:13","nodeType":"FunctionDefinition","parameters":{"id":2556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2555,"mutability":"mutable","name":"pool","nameLocation":"14651:4:13","nodeType":"VariableDeclaration","scope":2566,"src":"14643:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2554,"name":"address","nodeType":"ElementaryTypeName","src":"14643:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14633:28:13"},"returnParameters":{"id":2565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2558,"mutability":"mutable","name":"poolPaused","nameLocation":"14714:10:13","nodeType":"VariableDeclaration","scope":2566,"src":"14709:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2557,"name":"bool","nodeType":"ElementaryTypeName","src":"14709:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2560,"mutability":"mutable","name":"poolPauseWindowEndTime","nameLocation":"14733:22:13","nodeType":"VariableDeclaration","scope":2566,"src":"14726:29:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2559,"name":"uint32","nodeType":"ElementaryTypeName","src":"14726:6:13","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2562,"mutability":"mutable","name":"poolBufferPeriodEndTime","nameLocation":"14764:23:13","nodeType":"VariableDeclaration","scope":2566,"src":"14757:30:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2561,"name":"uint32","nodeType":"ElementaryTypeName","src":"14757:6:13","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2564,"mutability":"mutable","name":"pauseManager","nameLocation":"14797:12:13","nodeType":"VariableDeclaration","scope":2566,"src":"14789:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2563,"name":"address","nodeType":"ElementaryTypeName","src":"14789:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14708:102:13"},"scope":2707,"src":"14606:205:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2567,"nodeType":"StructuredDocumentation","src":"15039:332:13","text":" @notice Checks if the wrapped token has an initialized buffer in the Vault.\n @dev An initialized buffer should have an asset registered in the Vault.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return isBufferInitialized True if the ERC4626 buffer is initialized"},"functionSelector":"6844846b","id":2575,"implemented":false,"kind":"function","modifiers":[],"name":"isERC4626BufferInitialized","nameLocation":"15385:26:13","nodeType":"FunctionDefinition","parameters":{"id":2571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2570,"mutability":"mutable","name":"wrappedToken","nameLocation":"15421:12:13","nodeType":"VariableDeclaration","scope":2575,"src":"15412:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":2569,"nodeType":"UserDefinedTypeName","pathNode":{"id":2568,"name":"IERC4626","nameLocations":["15412:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"15412:8:13"},"referencedDeclaration":5653,"src":"15412:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"15411:23:13"},"returnParameters":{"id":2574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2573,"mutability":"mutable","name":"isBufferInitialized","nameLocation":"15463:19:13","nodeType":"VariableDeclaration","scope":2575,"src":"15458:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2572,"name":"bool","nodeType":"ElementaryTypeName","src":"15458:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15457:26:13"},"scope":2707,"src":"15376:108:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2576,"nodeType":"StructuredDocumentation","src":"15490:477:13","text":" @notice Gets the registered asset for a given buffer.\n @dev To avoid malicious wrappers (e.g., that might potentially change their asset after deployment), routers\n should never call `wrapper.asset()` directly, at least without checking it against the asset registered with\n the Vault on initialization.\n @param wrappedToken The wrapped token specifying the buffer\n @return asset The underlying asset of the wrapped token"},"functionSelector":"4afbaf5a","id":2584,"implemented":false,"kind":"function","modifiers":[],"name":"getERC4626BufferAsset","nameLocation":"15981:21:13","nodeType":"FunctionDefinition","parameters":{"id":2580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2579,"mutability":"mutable","name":"wrappedToken","nameLocation":"16012:12:13","nodeType":"VariableDeclaration","scope":2584,"src":"16003:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":2578,"nodeType":"UserDefinedTypeName","pathNode":{"id":2577,"name":"IERC4626","nameLocations":["16003:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"16003:8:13"},"referencedDeclaration":5653,"src":"16003:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"16002:23:13"},"returnParameters":{"id":2583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2582,"mutability":"mutable","name":"asset","nameLocation":"16057:5:13","nodeType":"VariableDeclaration","scope":2584,"src":"16049:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2581,"name":"address","nodeType":"ElementaryTypeName","src":"16049:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16048:15:13"},"scope":2707,"src":"15972:92:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2585,"nodeType":"StructuredDocumentation","src":"16288:379:13","text":" @notice Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\n @param pool The address of the pool for which aggregate fees have been collected\n @param token The address of the token in which fees have been accumulated\n @return swapFeeAmount The total amount of fees accumulated in the specified token"},"functionSelector":"85e0b999","id":2595,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregateSwapFeeAmount","nameLocation":"16681:25:13","nodeType":"FunctionDefinition","parameters":{"id":2591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2587,"mutability":"mutable","name":"pool","nameLocation":"16715:4:13","nodeType":"VariableDeclaration","scope":2595,"src":"16707:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2586,"name":"address","nodeType":"ElementaryTypeName","src":"16707:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2590,"mutability":"mutable","name":"token","nameLocation":"16728:5:13","nodeType":"VariableDeclaration","scope":2595,"src":"16721:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":2589,"nodeType":"UserDefinedTypeName","pathNode":{"id":2588,"name":"IERC20","nameLocations":["16721:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"16721:6:13"},"referencedDeclaration":6383,"src":"16721:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"16706:28:13"},"returnParameters":{"id":2594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2593,"mutability":"mutable","name":"swapFeeAmount","nameLocation":"16766:13:13","nodeType":"VariableDeclaration","scope":2595,"src":"16758:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2592,"name":"uint256","nodeType":"ElementaryTypeName","src":"16758:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16757:23:13"},"scope":2707,"src":"16672:109:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2596,"nodeType":"StructuredDocumentation","src":"16787:381:13","text":" @notice Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\n @param pool The address of the pool for which aggregate fees have been collected\n @param token The address of the token in which fees have been accumulated\n @return yieldFeeAmount The total amount of fees accumulated in the specified token"},"functionSelector":"00fdfa13","id":2606,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregateYieldFeeAmount","nameLocation":"17182:26:13","nodeType":"FunctionDefinition","parameters":{"id":2602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2598,"mutability":"mutable","name":"pool","nameLocation":"17217:4:13","nodeType":"VariableDeclaration","scope":2606,"src":"17209:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2597,"name":"address","nodeType":"ElementaryTypeName","src":"17209:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2601,"mutability":"mutable","name":"token","nameLocation":"17230:5:13","nodeType":"VariableDeclaration","scope":2606,"src":"17223:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":2600,"nodeType":"UserDefinedTypeName","pathNode":{"id":2599,"name":"IERC20","nameLocations":["17223:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"17223:6:13"},"referencedDeclaration":6383,"src":"17223:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"17208:28:13"},"returnParameters":{"id":2605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2604,"mutability":"mutable","name":"yieldFeeAmount","nameLocation":"17268:14:13","nodeType":"VariableDeclaration","scope":2606,"src":"17260:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2603,"name":"uint256","nodeType":"ElementaryTypeName","src":"17260:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17259:24:13"},"scope":2707,"src":"17173:111:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2607,"nodeType":"StructuredDocumentation","src":"17290:271:13","text":" @notice Fetches the static swap fee percentage for a given pool.\n @param pool The address of the pool whose static swap fee percentage is being queried\n @return swapFeePercentage The current static swap fee percentage for the specified pool"},"functionSelector":"b45090f9","id":2614,"implemented":false,"kind":"function","modifiers":[],"name":"getStaticSwapFeePercentage","nameLocation":"17575:26:13","nodeType":"FunctionDefinition","parameters":{"id":2610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2609,"mutability":"mutable","name":"pool","nameLocation":"17610:4:13","nodeType":"VariableDeclaration","scope":2614,"src":"17602:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2608,"name":"address","nodeType":"ElementaryTypeName","src":"17602:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17601:14:13"},"returnParameters":{"id":2613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2612,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"17647:17:13","nodeType":"VariableDeclaration","scope":2614,"src":"17639:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2611,"name":"uint256","nodeType":"ElementaryTypeName","src":"17639:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17638:27:13"},"scope":2707,"src":"17566:100:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2615,"nodeType":"StructuredDocumentation","src":"17672:286:13","text":" @notice Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\n @param pool The address of the pool whose roles are being queried\n @return roleAccounts A struct containing the role accounts for the pool (or 0 if unassigned)"},"functionSelector":"e9ddeb26","id":2623,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolRoleAccounts","nameLocation":"17972:19:13","nodeType":"FunctionDefinition","parameters":{"id":2618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2617,"mutability":"mutable","name":"pool","nameLocation":"18000:4:13","nodeType":"VariableDeclaration","scope":2623,"src":"17992:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2616,"name":"address","nodeType":"ElementaryTypeName","src":"17992:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17991:14:13"},"returnParameters":{"id":2622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2621,"mutability":"mutable","name":"roleAccounts","nameLocation":"18053:12:13","nodeType":"VariableDeclaration","scope":2623,"src":"18029:36:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2958_memory_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":2620,"nodeType":"UserDefinedTypeName","pathNode":{"id":2619,"name":"PoolRoleAccounts","nameLocations":["18029:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":2958,"src":"18029:16:13"},"referencedDeclaration":2958,"src":"18029:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2958_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"}],"src":"18028:38:13"},"scope":2707,"src":"17963:104:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2624,"nodeType":"StructuredDocumentation","src":"18073:363:13","text":" @notice Query the current dynamic swap fee percentage of a pool, given a set of swap parameters.\n @dev Reverts if the hook doesn't return the success flag set to `true`.\n @param pool The pool\n @param swapParams The swap parameters used to compute the fee\n @return dynamicSwapFeePercentage The dynamic swap fee percentage"},"functionSelector":"4d472bdd","id":2634,"implemented":false,"kind":"function","modifiers":[],"name":"computeDynamicSwapFeePercentage","nameLocation":"18450:31:13","nodeType":"FunctionDefinition","parameters":{"id":2630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2626,"mutability":"mutable","name":"pool","nameLocation":"18499:4:13","nodeType":"VariableDeclaration","scope":2634,"src":"18491:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2625,"name":"address","nodeType":"ElementaryTypeName","src":"18491:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2629,"mutability":"mutable","name":"swapParams","nameLocation":"18535:10:13","nodeType":"VariableDeclaration","scope":2634,"src":"18513:32:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$3053_memory_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":2628,"nodeType":"UserDefinedTypeName","pathNode":{"id":2627,"name":"PoolSwapParams","nameLocations":["18513:14:13"],"nodeType":"IdentifierPath","referencedDeclaration":3053,"src":"18513:14:13"},"referencedDeclaration":3053,"src":"18513:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$3053_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"}],"src":"18481:70:13"},"returnParameters":{"id":2633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2632,"mutability":"mutable","name":"dynamicSwapFeePercentage","nameLocation":"18583:24:13","nodeType":"VariableDeclaration","scope":2634,"src":"18575:32:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2631,"name":"uint256","nodeType":"ElementaryTypeName","src":"18575:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18574:34:13"},"scope":2707,"src":"18441:168:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2635,"nodeType":"StructuredDocumentation","src":"18615:145:13","text":" @notice Returns the Protocol Fee Controller address.\n @return protocolFeeController Address of the ProtocolFeeController"},"functionSelector":"85f2dbd4","id":2641,"implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeeController","nameLocation":"18774:24:13","nodeType":"FunctionDefinition","parameters":{"id":2636,"nodeType":"ParameterList","parameters":[],"src":"18798:2:13"},"returnParameters":{"id":2640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2639,"mutability":"mutable","name":"protocolFeeController","nameLocation":"18847:21:13","nodeType":"VariableDeclaration","scope":2641,"src":"18824:44:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"},"typeName":{"id":2638,"nodeType":"UserDefinedTypeName","pathNode":{"id":2637,"name":"IProtocolFeeController","nameLocations":["18824:22:13"],"nodeType":"IdentifierPath","referencedDeclaration":857,"src":"18824:22:13"},"referencedDeclaration":857,"src":"18824:22:13","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"src":"18823:46:13"},"scope":2707,"src":"18765:105:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2642,"nodeType":"StructuredDocumentation","src":"19098:296:13","text":" @notice Checks whether a pool is in Recovery Mode.\n @dev Recovery Mode enables a safe proportional withdrawal path, with no external calls.\n @param pool Address of the pool to check\n @return inRecoveryMode True if the pool is in Recovery Mode, false otherwise"},"functionSelector":"be7d628a","id":2649,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolInRecoveryMode","nameLocation":"19408:20:13","nodeType":"FunctionDefinition","parameters":{"id":2645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2644,"mutability":"mutable","name":"pool","nameLocation":"19437:4:13","nodeType":"VariableDeclaration","scope":2649,"src":"19429:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2643,"name":"address","nodeType":"ElementaryTypeName","src":"19429:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19428:14:13"},"returnParameters":{"id":2648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2647,"mutability":"mutable","name":"inRecoveryMode","nameLocation":"19471:14:13","nodeType":"VariableDeclaration","scope":2649,"src":"19466:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2646,"name":"bool","nodeType":"ElementaryTypeName","src":"19466:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"19465:21:13"},"scope":2707,"src":"19399:88:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2650,"nodeType":"StructuredDocumentation","src":"19493:679:13","text":" @notice Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out.\n The request is implemented by the Vault without any interaction with the pool, ensuring that\n it works the same for all pools, and cannot be disabled by a new pool type.\n @param pool Address of the pool\n @param from Address of user to burn pool tokens from\n @param exactBptAmountIn Input pool token amount\n @param minAmountsOut Minimum amounts of tokens to be received, sorted in token registration order\n @return amountsOut Actual calculated amounts of output tokens, sorted in token registration order"},"functionSelector":"a07d6040","id":2665,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityRecovery","nameLocation":"20186:23:13","nodeType":"FunctionDefinition","parameters":{"id":2660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2652,"mutability":"mutable","name":"pool","nameLocation":"20227:4:13","nodeType":"VariableDeclaration","scope":2665,"src":"20219:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2651,"name":"address","nodeType":"ElementaryTypeName","src":"20219:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2654,"mutability":"mutable","name":"from","nameLocation":"20249:4:13","nodeType":"VariableDeclaration","scope":2665,"src":"20241:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2653,"name":"address","nodeType":"ElementaryTypeName","src":"20241:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2656,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"20271:16:13","nodeType":"VariableDeclaration","scope":2665,"src":"20263:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2655,"name":"uint256","nodeType":"ElementaryTypeName","src":"20263:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2659,"mutability":"mutable","name":"minAmountsOut","nameLocation":"20314:13:13","nodeType":"VariableDeclaration","scope":2665,"src":"20297:30:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2657,"name":"uint256","nodeType":"ElementaryTypeName","src":"20297:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2658,"nodeType":"ArrayTypeName","src":"20297:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"20209:124:13"},"returnParameters":{"id":2664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2663,"mutability":"mutable","name":"amountsOut","nameLocation":"20369:10:13","nodeType":"VariableDeclaration","scope":2665,"src":"20352:27:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2661,"name":"uint256","nodeType":"ElementaryTypeName","src":"20352:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2662,"nodeType":"ArrayTypeName","src":"20352:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"20351:29:13"},"scope":2707,"src":"20177:204:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2666,"nodeType":"StructuredDocumentation","src":"20602:699:13","text":" @notice Performs a callback on msg.sender with arguments provided in `data`.\n @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\n anything else will revert.\n Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier.\n Allows the external calling of a function via the Vault contract to\n access Vault's functions guarded by `onlyWhenUnlocked`.\n `transient` modifier ensuring balances changes within the Vault are settled.\n @param data Contains function signature and args to be passed to the msg.sender\n @return result Resulting data from the call"},"functionSelector":"edfa3568","id":2673,"implemented":false,"kind":"function","modifiers":[],"name":"quote","nameLocation":"21315:5:13","nodeType":"FunctionDefinition","parameters":{"id":2669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2668,"mutability":"mutable","name":"data","nameLocation":"21336:4:13","nodeType":"VariableDeclaration","scope":2673,"src":"21321:19:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2667,"name":"bytes","nodeType":"ElementaryTypeName","src":"21321:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21320:21:13"},"returnParameters":{"id":2672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2671,"mutability":"mutable","name":"result","nameLocation":"21373:6:13","nodeType":"VariableDeclaration","scope":2673,"src":"21360:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2670,"name":"bytes","nodeType":"ElementaryTypeName","src":"21360:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21359:21:13"},"scope":2707,"src":"21306:75:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2674,"nodeType":"StructuredDocumentation","src":"21387:731:13","text":" @notice Performs a callback on msg.sender with arguments provided in `data`.\n @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\n anything else will revert.\n Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier.\n Allows the external calling of a function via the Vault contract to\n access Vault's functions guarded by `onlyWhenUnlocked`.\n `transient` modifier ensuring balances changes within the Vault are settled.\n This call always reverts, returning the result in the revert reason.\n @param data Contains function signature and args to be passed to the msg.sender"},"functionSelector":"757d64b3","id":2679,"implemented":false,"kind":"function","modifiers":[],"name":"quoteAndRevert","nameLocation":"22132:14:13","nodeType":"FunctionDefinition","parameters":{"id":2677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2676,"mutability":"mutable","name":"data","nameLocation":"22162:4:13","nodeType":"VariableDeclaration","scope":2679,"src":"22147:19:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2675,"name":"bytes","nodeType":"ElementaryTypeName","src":"22147:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"22146:21:13"},"returnParameters":{"id":2678,"nodeType":"ParameterList","parameters":[],"src":"22176:0:13"},"scope":2707,"src":"22123:54:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2680,"nodeType":"StructuredDocumentation","src":"22183:239:13","text":" @notice Returns true if queries are disabled on the Vault.\n @dev If true, queries might either be disabled temporarily or permanently.\n @return queryDisabled True if query functionality is reversibly disabled"},"functionSelector":"b4aef0ab","id":2685,"implemented":false,"kind":"function","modifiers":[],"name":"isQueryDisabled","nameLocation":"22436:15:13","nodeType":"FunctionDefinition","parameters":{"id":2681,"nodeType":"ParameterList","parameters":[],"src":"22451:2:13"},"returnParameters":{"id":2684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2683,"mutability":"mutable","name":"queryDisabled","nameLocation":"22482:13:13","nodeType":"VariableDeclaration","scope":2685,"src":"22477:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2682,"name":"bool","nodeType":"ElementaryTypeName","src":"22477:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"22476:20:13"},"scope":2707,"src":"22427:70:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2686,"nodeType":"StructuredDocumentation","src":"22503:302:13","text":" @notice Returns true if queries are disabled permanently; false if they are enabled.\n @dev This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\n @return queryDisabledPermanently True if query functionality is permanently disabled"},"functionSelector":"13ef8a5d","id":2691,"implemented":false,"kind":"function","modifiers":[],"name":"isQueryDisabledPermanently","nameLocation":"22819:26:13","nodeType":"FunctionDefinition","parameters":{"id":2687,"nodeType":"ParameterList","parameters":[],"src":"22845:2:13"},"returnParameters":{"id":2690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2689,"mutability":"mutable","name":"queryDisabledPermanently","nameLocation":"22876:24:13","nodeType":"VariableDeclaration","scope":2691,"src":"22871:29:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2688,"name":"bool","nodeType":"ElementaryTypeName","src":"22871:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"22870:31:13"},"scope":2707,"src":"22810:92:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2692,"nodeType":"StructuredDocumentation","src":"22908:162:13","text":" @notice Pools can use this event to emit event data from the Vault.\n @param eventKey Event key\n @param eventData Encoded event data"},"functionSelector":"c8088247","id":2699,"implemented":false,"kind":"function","modifiers":[],"name":"emitAuxiliaryEvent","nameLocation":"23084:18:13","nodeType":"FunctionDefinition","parameters":{"id":2697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2694,"mutability":"mutable","name":"eventKey","nameLocation":"23111:8:13","nodeType":"VariableDeclaration","scope":2699,"src":"23103:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2693,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23103:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2696,"mutability":"mutable","name":"eventData","nameLocation":"23136:9:13","nodeType":"VariableDeclaration","scope":2699,"src":"23121:24:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2695,"name":"bytes","nodeType":"ElementaryTypeName","src":"23121:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"23102:44:13"},"returnParameters":{"id":2698,"nodeType":"ParameterList","parameters":[],"src":"23155:0:13"},"scope":2707,"src":"23075:81:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2700,"nodeType":"StructuredDocumentation","src":"23380:284:13","text":" @notice Returns the Authorizer address.\n @dev The authorizer holds the permissions granted by governance. It is set on Vault deployment,\n and can be changed through a permissioned call.\n @return authorizer Address of the authorizer contract"},"functionSelector":"aaabadc5","id":2706,"implemented":false,"kind":"function","modifiers":[],"name":"getAuthorizer","nameLocation":"23678:13:13","nodeType":"FunctionDefinition","parameters":{"id":2701,"nodeType":"ParameterList","parameters":[],"src":"23691:2:13"},"returnParameters":{"id":2705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2704,"mutability":"mutable","name":"authorizer","nameLocation":"23729:10:13","nodeType":"VariableDeclaration","scope":2706,"src":"23717:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$368","typeString":"contract IAuthorizer"},"typeName":{"id":2703,"nodeType":"UserDefinedTypeName","pathNode":{"id":2702,"name":"IAuthorizer","nameLocations":["23717:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":368,"src":"23717:11:13"},"referencedDeclaration":368,"src":"23717:11:13","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$368","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"23716:24:13"},"scope":2707,"src":"23669:72:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2708,"src":"767:22976:13","usedErrors":[],"usedEvents":[]}],"src":"46:23698:13"},"id":13},"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol","exportedSymbols":{"AddLiquidityKind":[3088],"AddLiquidityParams":[3104],"AfterSwapParams":[3082],"BufferWrapOrUnwrapParams":[3143],"FEE_BITLENGTH":[3146],"FEE_SCALING_FACTOR":[3149],"HookFlags":[2908],"HooksConfig":[2932],"IERC20":[6383],"IERC4626":[5653],"IRateProvider":[24],"IVaultMain":[2843],"LiquidityManagement":[2861],"MAX_FEE_PERCENTAGE":[3152],"PoolConfig":[2886],"PoolConfigBits":[2863],"PoolData":[3010],"PoolRoleAccounts":[2958],"PoolSwapParams":[3053],"RemoveLiquidityKind":[3109],"RemoveLiquidityParams":[3125],"Rounding":[3013],"SwapKind":[3016],"SwapState":[2942],"TokenConfig":[2975],"TokenInfo":[2985],"TokenType":[2962],"VaultState":[2950],"VaultSwapParams":[3035],"WrappingDirection":[3128]},"id":2844,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2709,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:14"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2711,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2844,"sourceUnit":6384,"src":"72:72:14","symbolAliases":[{"foreign":{"id":2710,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"81:6:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":2712,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2844,"sourceUnit":3153,"src":"146:26:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultMain","contractDependencies":[],"contractKind":"interface","documentation":{"id":2713,"nodeType":"StructuredDocumentation","src":"174:232:14","text":" @notice Interface for functions defined on the main Vault contract.\n @dev These are generally \"critical path\" functions (swap, add/remove liquidity) that are in the main contract\n for technical or performance reasons."},"fullyImplemented":false,"id":2843,"linearizedBaseContracts":[2843],"name":"IVaultMain","nameLocation":"417:10:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2714,"nodeType":"StructuredDocumentation","src":"656:431:14","text":" @notice Creates a context for a sequence of operations (i.e., \"unlocks\" the Vault).\n @dev Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`,\n meaning all balances for the caller have to be settled at the end.\n @param data Contains function signature and args to be passed to the msg.sender\n @return result Resulting data from the call"},"functionSelector":"48c89491","id":2721,"implemented":false,"kind":"function","modifiers":[],"name":"unlock","nameLocation":"1101:6:14","nodeType":"FunctionDefinition","parameters":{"id":2717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2716,"mutability":"mutable","name":"data","nameLocation":"1123:4:14","nodeType":"VariableDeclaration","scope":2721,"src":"1108:19:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2715,"name":"bytes","nodeType":"ElementaryTypeName","src":"1108:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1107:21:14"},"returnParameters":{"id":2720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2719,"mutability":"mutable","name":"result","nameLocation":"1160:6:14","nodeType":"VariableDeclaration","scope":2721,"src":"1147:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2718,"name":"bytes","nodeType":"ElementaryTypeName","src":"1147:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1146:21:14"},"scope":2843,"src":"1092:76:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2722,"nodeType":"StructuredDocumentation","src":"1174:1291:14","text":" @notice Settles deltas for a token; must be successful for the current lock to be released.\n @dev Protects the caller against leftover dust in the Vault for the token being settled. The caller\n should know in advance how many tokens were paid to the Vault, so it can provide it as a hint to discard any\n excess in the Vault balance.\n If the given hint is equal to or higher than the difference in reserves, the difference in reserves is given as\n credit to the caller. If it's higher, the caller sent fewer tokens than expected, so settlement would fail.\n If the given hint is lower than the difference in reserves, the hint is given as credit to the caller.\n In this case, the excess would be absorbed by the Vault (and reflected correctly in the reserves), but would\n not affect settlement.\n The credit supplied by the Vault can be calculated as `min(reserveDifference, amountHint)`, where the reserve\n difference equals current balance of the token minus existing reserves of the token when the function is called.\n @param token Address of the token\n @param amountHint Amount paid as reported by the caller\n @return credit Credit received in return of the payment"},"functionSelector":"15afd409","id":2732,"implemented":false,"kind":"function","modifiers":[],"name":"settle","nameLocation":"2479:6:14","nodeType":"FunctionDefinition","parameters":{"id":2728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2725,"mutability":"mutable","name":"token","nameLocation":"2493:5:14","nodeType":"VariableDeclaration","scope":2732,"src":"2486:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":2724,"nodeType":"UserDefinedTypeName","pathNode":{"id":2723,"name":"IERC20","nameLocations":["2486:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2486:6:14"},"referencedDeclaration":6383,"src":"2486:6:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2727,"mutability":"mutable","name":"amountHint","nameLocation":"2508:10:14","nodeType":"VariableDeclaration","scope":2732,"src":"2500:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2726,"name":"uint256","nodeType":"ElementaryTypeName","src":"2500:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2485:34:14"},"returnParameters":{"id":2731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2730,"mutability":"mutable","name":"credit","nameLocation":"2546:6:14","nodeType":"VariableDeclaration","scope":2732,"src":"2538:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2729,"name":"uint256","nodeType":"ElementaryTypeName","src":"2538:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2537:16:14"},"scope":2843,"src":"2470:84:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2733,"nodeType":"StructuredDocumentation","src":"2560:315:14","text":" @notice Sends tokens to a recipient.\n @dev There is no inverse operation for this function. Transfer funds to the Vault and call `settle` to cancel\n debts.\n @param token Address of the token\n @param to Recipient address\n @param amount Amount of tokens to send"},"functionSelector":"ae639329","id":2743,"implemented":false,"kind":"function","modifiers":[],"name":"sendTo","nameLocation":"2889:6:14","nodeType":"FunctionDefinition","parameters":{"id":2741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2736,"mutability":"mutable","name":"token","nameLocation":"2903:5:14","nodeType":"VariableDeclaration","scope":2743,"src":"2896:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":2735,"nodeType":"UserDefinedTypeName","pathNode":{"id":2734,"name":"IERC20","nameLocations":["2896:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2896:6:14"},"referencedDeclaration":6383,"src":"2896:6:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2738,"mutability":"mutable","name":"to","nameLocation":"2918:2:14","nodeType":"VariableDeclaration","scope":2743,"src":"2910:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2737,"name":"address","nodeType":"ElementaryTypeName","src":"2910:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2740,"mutability":"mutable","name":"amount","nameLocation":"2930:6:14","nodeType":"VariableDeclaration","scope":2743,"src":"2922:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2739,"name":"uint256","nodeType":"ElementaryTypeName","src":"2922:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2895:42:14"},"returnParameters":{"id":2742,"nodeType":"ParameterList","parameters":[],"src":"2946:0:14"},"scope":2843,"src":"2880:67:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2744,"nodeType":"StructuredDocumentation","src":"3161:412:14","text":" @notice Swaps tokens based on provided parameters.\n @dev All parameters are given in raw token decimal encoding.\n @param vaultSwapParams Parameters for the swap (see above for struct definition)\n @return amountCalculatedRaw Calculated swap amount\n @return amountInRaw Amount of input tokens for the swap\n @return amountOutRaw Amount of output tokens from the swap"},"functionSelector":"2bfb780c","id":2756,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"3587:4:14","nodeType":"FunctionDefinition","parameters":{"id":2748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2747,"mutability":"mutable","name":"vaultSwapParams","nameLocation":"3624:15:14","nodeType":"VariableDeclaration","scope":2756,"src":"3601:38:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_VaultSwapParams_$3035_memory_ptr","typeString":"struct VaultSwapParams"},"typeName":{"id":2746,"nodeType":"UserDefinedTypeName","pathNode":{"id":2745,"name":"VaultSwapParams","nameLocations":["3601:15:14"],"nodeType":"IdentifierPath","referencedDeclaration":3035,"src":"3601:15:14"},"referencedDeclaration":3035,"src":"3601:15:14","typeDescriptions":{"typeIdentifier":"t_struct$_VaultSwapParams_$3035_storage_ptr","typeString":"struct VaultSwapParams"}},"visibility":"internal"}],"src":"3591:54:14"},"returnParameters":{"id":2755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2750,"mutability":"mutable","name":"amountCalculatedRaw","nameLocation":"3672:19:14","nodeType":"VariableDeclaration","scope":2756,"src":"3664:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2749,"name":"uint256","nodeType":"ElementaryTypeName","src":"3664:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2752,"mutability":"mutable","name":"amountInRaw","nameLocation":"3701:11:14","nodeType":"VariableDeclaration","scope":2756,"src":"3693:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2751,"name":"uint256","nodeType":"ElementaryTypeName","src":"3693:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2754,"mutability":"mutable","name":"amountOutRaw","nameLocation":"3722:12:14","nodeType":"VariableDeclaration","scope":2756,"src":"3714:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2753,"name":"uint256","nodeType":"ElementaryTypeName","src":"3714:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3663:72:14"},"scope":2843,"src":"3578:158:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2757,"nodeType":"StructuredDocumentation","src":"3954:523:14","text":" @notice Adds liquidity to a pool.\n @dev Caution should be exercised when adding liquidity because the Vault has the capability\n to transfer tokens from any user, given that it holds all allowances.\n @param params Parameters for the add liquidity (see above for struct definition)\n @return amountsIn Actual amounts of input tokens\n @return bptAmountOut Output pool token amount\n @return returnData Arbitrary (optional) data with an encoded response from the pool"},"functionSelector":"4af29ec4","id":2770,"implemented":false,"kind":"function","modifiers":[],"name":"addLiquidity","nameLocation":"4491:12:14","nodeType":"FunctionDefinition","parameters":{"id":2761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2760,"mutability":"mutable","name":"params","nameLocation":"4539:6:14","nodeType":"VariableDeclaration","scope":2770,"src":"4513:32:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_AddLiquidityParams_$3104_memory_ptr","typeString":"struct AddLiquidityParams"},"typeName":{"id":2759,"nodeType":"UserDefinedTypeName","pathNode":{"id":2758,"name":"AddLiquidityParams","nameLocations":["4513:18:14"],"nodeType":"IdentifierPath","referencedDeclaration":3104,"src":"4513:18:14"},"referencedDeclaration":3104,"src":"4513:18:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddLiquidityParams_$3104_storage_ptr","typeString":"struct AddLiquidityParams"}},"visibility":"internal"}],"src":"4503:48:14"},"returnParameters":{"id":2769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2764,"mutability":"mutable","name":"amountsIn","nameLocation":"4587:9:14","nodeType":"VariableDeclaration","scope":2770,"src":"4570:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2762,"name":"uint256","nodeType":"ElementaryTypeName","src":"4570:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2763,"nodeType":"ArrayTypeName","src":"4570:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2766,"mutability":"mutable","name":"bptAmountOut","nameLocation":"4606:12:14","nodeType":"VariableDeclaration","scope":2770,"src":"4598:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2765,"name":"uint256","nodeType":"ElementaryTypeName","src":"4598:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2768,"mutability":"mutable","name":"returnData","nameLocation":"4633:10:14","nodeType":"VariableDeclaration","scope":2770,"src":"4620:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2767,"name":"bytes","nodeType":"ElementaryTypeName","src":"4620:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4569:75:14"},"scope":2843,"src":"4482:163:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2771,"nodeType":"StructuredDocumentation","src":"4864:644:14","text":" @notice Removes liquidity from a pool.\n @dev Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user.\n Untrusted routers require prior approval from the user. This is the only function allowed to call\n _queryModeBalanceIncrease (and only in a query context).\n @param params Parameters for the remove liquidity (see above for struct definition)\n @return bptAmountIn Actual amount of BPT burned\n @return amountsOut Actual amounts of output tokens\n @return returnData Arbitrary (optional) data with an encoded response from the pool"},"functionSelector":"21457897","id":2784,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidity","nameLocation":"5522:15:14","nodeType":"FunctionDefinition","parameters":{"id":2775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2774,"mutability":"mutable","name":"params","nameLocation":"5576:6:14","nodeType":"VariableDeclaration","scope":2784,"src":"5547:35:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RemoveLiquidityParams_$3125_memory_ptr","typeString":"struct RemoveLiquidityParams"},"typeName":{"id":2773,"nodeType":"UserDefinedTypeName","pathNode":{"id":2772,"name":"RemoveLiquidityParams","nameLocations":["5547:21:14"],"nodeType":"IdentifierPath","referencedDeclaration":3125,"src":"5547:21:14"},"referencedDeclaration":3125,"src":"5547:21:14","typeDescriptions":{"typeIdentifier":"t_struct$_RemoveLiquidityParams_$3125_storage_ptr","typeString":"struct RemoveLiquidityParams"}},"visibility":"internal"}],"src":"5537:51:14"},"returnParameters":{"id":2783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2777,"mutability":"mutable","name":"bptAmountIn","nameLocation":"5615:11:14","nodeType":"VariableDeclaration","scope":2784,"src":"5607:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2776,"name":"uint256","nodeType":"ElementaryTypeName","src":"5607:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2780,"mutability":"mutable","name":"amountsOut","nameLocation":"5645:10:14","nodeType":"VariableDeclaration","scope":2784,"src":"5628:27:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2778,"name":"uint256","nodeType":"ElementaryTypeName","src":"5628:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2779,"nodeType":"ArrayTypeName","src":"5628:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2782,"mutability":"mutable","name":"returnData","nameLocation":"5670:10:14","nodeType":"VariableDeclaration","scope":2784,"src":"5657:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2781,"name":"bytes","nodeType":"ElementaryTypeName","src":"5657:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5606:75:14"},"scope":2843,"src":"5513:169:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2785,"nodeType":"StructuredDocumentation","src":"5912:385:14","text":" @notice Gets the index of a token in a given pool.\n @dev Reverts if the pool is not registered, or if the token does not belong to the pool.\n @param pool Address of the pool\n @param token Address of the token\n @return tokenCount Number of tokens in the pool\n @return index Index corresponding to the given token in the pool's token list"},"functionSelector":"c9c1661b","id":2797,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenCountAndIndexOfToken","nameLocation":"6311:32:14","nodeType":"FunctionDefinition","parameters":{"id":2791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2787,"mutability":"mutable","name":"pool","nameLocation":"6361:4:14","nodeType":"VariableDeclaration","scope":2797,"src":"6353:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2786,"name":"address","nodeType":"ElementaryTypeName","src":"6353:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2790,"mutability":"mutable","name":"token","nameLocation":"6382:5:14","nodeType":"VariableDeclaration","scope":2797,"src":"6375:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":2789,"nodeType":"UserDefinedTypeName","pathNode":{"id":2788,"name":"IERC20","nameLocations":["6375:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"6375:6:14"},"referencedDeclaration":6383,"src":"6375:6:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"6343:50:14"},"returnParameters":{"id":2796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2793,"mutability":"mutable","name":"tokenCount","nameLocation":"6425:10:14","nodeType":"VariableDeclaration","scope":2797,"src":"6417:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2792,"name":"uint256","nodeType":"ElementaryTypeName","src":"6417:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2795,"mutability":"mutable","name":"index","nameLocation":"6445:5:14","nodeType":"VariableDeclaration","scope":2797,"src":"6437:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2794,"name":"uint256","nodeType":"ElementaryTypeName","src":"6437:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6416:35:14"},"scope":2843,"src":"6302:150:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2798,"nodeType":"StructuredDocumentation","src":"6683:460:14","text":" @notice Transfers pool token from owner to a recipient.\n @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n the pool contract, so msg.sender is used as the token address.\n @param owner Address of the owner\n @param to Address of the recipient\n @param amount Amount of tokens to transfer\n @return success True if successful, false otherwise"},"functionSelector":"beabacc8","id":2809,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"7157:8:14","nodeType":"FunctionDefinition","parameters":{"id":2805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2800,"mutability":"mutable","name":"owner","nameLocation":"7174:5:14","nodeType":"VariableDeclaration","scope":2809,"src":"7166:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2799,"name":"address","nodeType":"ElementaryTypeName","src":"7166:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2802,"mutability":"mutable","name":"to","nameLocation":"7189:2:14","nodeType":"VariableDeclaration","scope":2809,"src":"7181:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2801,"name":"address","nodeType":"ElementaryTypeName","src":"7181:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2804,"mutability":"mutable","name":"amount","nameLocation":"7201:6:14","nodeType":"VariableDeclaration","scope":2809,"src":"7193:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2803,"name":"uint256","nodeType":"ElementaryTypeName","src":"7193:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7165:43:14"},"returnParameters":{"id":2808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2809,"src":"7227:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2806,"name":"bool","nodeType":"ElementaryTypeName","src":"7227:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7226:6:14"},"scope":2843,"src":"7148:85:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2810,"nodeType":"StructuredDocumentation","src":"7239:544:14","text":" @notice Transfers pool token from a sender to a recipient using an allowance.\n @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n the pool contract, so msg.sender is used as the token address.\n @param spender Address allowed to perform the transfer\n @param from Address of the sender\n @param to Address of the recipient\n @param amount Amount of tokens to transfer\n @return success True if successful, false otherwise"},"functionSelector":"15dacbea","id":2823,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"7797:12:14","nodeType":"FunctionDefinition","parameters":{"id":2819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2812,"mutability":"mutable","name":"spender","nameLocation":"7818:7:14","nodeType":"VariableDeclaration","scope":2823,"src":"7810:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2811,"name":"address","nodeType":"ElementaryTypeName","src":"7810:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2814,"mutability":"mutable","name":"from","nameLocation":"7835:4:14","nodeType":"VariableDeclaration","scope":2823,"src":"7827:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2813,"name":"address","nodeType":"ElementaryTypeName","src":"7827:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2816,"mutability":"mutable","name":"to","nameLocation":"7849:2:14","nodeType":"VariableDeclaration","scope":2823,"src":"7841:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2815,"name":"address","nodeType":"ElementaryTypeName","src":"7841:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2818,"mutability":"mutable","name":"amount","nameLocation":"7861:6:14","nodeType":"VariableDeclaration","scope":2823,"src":"7853:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2817,"name":"uint256","nodeType":"ElementaryTypeName","src":"7853:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7809:59:14"},"returnParameters":{"id":2822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2821,"mutability":"mutable","name":"success","nameLocation":"7892:7:14","nodeType":"VariableDeclaration","scope":2823,"src":"7887:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2820,"name":"bool","nodeType":"ElementaryTypeName","src":"7887:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7886:14:14"},"scope":2843,"src":"7788:113:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2824,"nodeType":"StructuredDocumentation","src":"8128:575:14","text":" @notice Wraps/unwraps tokens based on the parameters provided.\n @dev All parameters are given in raw token decimal encoding. It requires the buffer to be initialized,\n and uses the internal wrapped token buffer when it has enough liquidity to avoid external calls.\n @param params Parameters for the wrap/unwrap operation (see struct definition)\n @return amountCalculatedRaw Calculated swap amount\n @return amountInRaw Amount of input tokens for the swap\n @return amountOutRaw Amount of output tokens from the swap"},"functionSelector":"43583be5","id":2836,"implemented":false,"kind":"function","modifiers":[],"name":"erc4626BufferWrapOrUnwrap","nameLocation":"8717:25:14","nodeType":"FunctionDefinition","parameters":{"id":2828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2827,"mutability":"mutable","name":"params","nameLocation":"8784:6:14","nodeType":"VariableDeclaration","scope":2836,"src":"8752:38:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_BufferWrapOrUnwrapParams_$3143_memory_ptr","typeString":"struct BufferWrapOrUnwrapParams"},"typeName":{"id":2826,"nodeType":"UserDefinedTypeName","pathNode":{"id":2825,"name":"BufferWrapOrUnwrapParams","nameLocations":["8752:24:14"],"nodeType":"IdentifierPath","referencedDeclaration":3143,"src":"8752:24:14"},"referencedDeclaration":3143,"src":"8752:24:14","typeDescriptions":{"typeIdentifier":"t_struct$_BufferWrapOrUnwrapParams_$3143_storage_ptr","typeString":"struct BufferWrapOrUnwrapParams"}},"visibility":"internal"}],"src":"8742:54:14"},"returnParameters":{"id":2835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2830,"mutability":"mutable","name":"amountCalculatedRaw","nameLocation":"8823:19:14","nodeType":"VariableDeclaration","scope":2836,"src":"8815:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2829,"name":"uint256","nodeType":"ElementaryTypeName","src":"8815:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2832,"mutability":"mutable","name":"amountInRaw","nameLocation":"8852:11:14","nodeType":"VariableDeclaration","scope":2836,"src":"8844:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2831,"name":"uint256","nodeType":"ElementaryTypeName","src":"8844:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2834,"mutability":"mutable","name":"amountOutRaw","nameLocation":"8873:12:14","nodeType":"VariableDeclaration","scope":2836,"src":"8865:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2833,"name":"uint256","nodeType":"ElementaryTypeName","src":"8865:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8814:72:14"},"scope":2843,"src":"8708:179:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2837,"nodeType":"StructuredDocumentation","src":"9115:345:14","text":" @notice Returns the VaultExtension contract address.\n @dev Function is in the main Vault contract. The VaultExtension handles less critical or frequently used\n functions, since delegate calls through the Vault are more expensive than direct calls.\n @return vaultExtension Address of the VaultExtension"},"functionSelector":"b9a8effa","id":2842,"implemented":false,"kind":"function","modifiers":[],"name":"getVaultExtension","nameLocation":"9474:17:14","nodeType":"FunctionDefinition","parameters":{"id":2838,"nodeType":"ParameterList","parameters":[],"src":"9491:2:14"},"returnParameters":{"id":2841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2840,"mutability":"mutable","name":"vaultExtension","nameLocation":"9525:14:14","nodeType":"VariableDeclaration","scope":2842,"src":"9517:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2839,"name":"address","nodeType":"ElementaryTypeName","src":"9517:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9516:24:14"},"scope":2843,"src":"9465:76:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2844,"src":"407:9136:14","usedErrors":[],"usedEvents":[]}],"src":"46:9498:14"},"id":14},"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","exportedSymbols":{"AddLiquidityKind":[3088],"AddLiquidityParams":[3104],"AfterSwapParams":[3082],"BufferWrapOrUnwrapParams":[3143],"FEE_BITLENGTH":[3146],"FEE_SCALING_FACTOR":[3149],"HookFlags":[2908],"HooksConfig":[2932],"IERC20":[6383],"IERC4626":[5653],"IRateProvider":[24],"LiquidityManagement":[2861],"MAX_FEE_PERCENTAGE":[3152],"PoolConfig":[2886],"PoolConfigBits":[2863],"PoolData":[3010],"PoolRoleAccounts":[2958],"PoolSwapParams":[3053],"RemoveLiquidityKind":[3109],"RemoveLiquidityParams":[3125],"Rounding":[3013],"SwapKind":[3016],"SwapState":[2942],"TokenConfig":[2975],"TokenInfo":[2985],"TokenType":[2962],"VaultState":[2950],"VaultSwapParams":[3035],"WrappingDirection":[3128]},"id":3153,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2845,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:15"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2847,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3153,"sourceUnit":6384,"src":"72:72:15","symbolAliases":[{"foreign":{"id":2846,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"81:6:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":2849,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3153,"sourceUnit":5654,"src":"145:75:15","symbolAliases":[{"foreign":{"id":2848,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5653,"src":"154:8:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol","file":"../solidity-utils/helpers/IRateProvider.sol","id":2851,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3153,"sourceUnit":25,"src":"222:76:15","symbolAliases":[{"foreign":{"id":2850,"name":"IRateProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"231:13:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"LiquidityManagement","documentation":{"id":2852,"nodeType":"StructuredDocumentation","src":"300:472:15","text":" @notice Represents a pool's liquidity management configuration.\n @param disableUnbalancedLiquidity If set, liquidity can only be added or removed proportionally\n @param enableAddLiquidityCustom If set, the pool has implemented `onAddLiquidityCustom`\n @param enableRemoveLiquidityCustom If set, the pool has implemented `onRemoveLiquidityCustom`\n @param enableDonation If set, the pool will not revert if liquidity is added with AddLiquidityKind.DONATION"},"id":2861,"members":[{"constant":false,"id":2854,"mutability":"mutable","name":"disableUnbalancedLiquidity","nameLocation":"811:26:15","nodeType":"VariableDeclaration","scope":2861,"src":"806:31:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2853,"name":"bool","nodeType":"ElementaryTypeName","src":"806:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2856,"mutability":"mutable","name":"enableAddLiquidityCustom","nameLocation":"848:24:15","nodeType":"VariableDeclaration","scope":2861,"src":"843:29:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2855,"name":"bool","nodeType":"ElementaryTypeName","src":"843:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2858,"mutability":"mutable","name":"enableRemoveLiquidityCustom","nameLocation":"883:27:15","nodeType":"VariableDeclaration","scope":2861,"src":"878:32:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2857,"name":"bool","nodeType":"ElementaryTypeName","src":"878:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2860,"mutability":"mutable","name":"enableDonation","nameLocation":"921:14:15","nodeType":"VariableDeclaration","scope":2861,"src":"916:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2859,"name":"bool","nodeType":"ElementaryTypeName","src":"916:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"LiquidityManagement","nameLocation":"780:19:15","nodeType":"StructDefinition","scope":3153,"src":"773:165:15","visibility":"public"},{"canonicalName":"PoolConfigBits","id":2863,"name":"PoolConfigBits","nameLocation":"1015:14:15","nodeType":"UserDefinedValueTypeDefinition","src":"1010:31:15","underlyingType":{"id":2862,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1033:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"canonicalName":"PoolConfig","documentation":{"id":2864,"nodeType":"StructuredDocumentation","src":"1043:1034:15","text":" @notice Represents a pool's configuration (hooks configuration are separated in another struct).\n @param liquidityManagement Flags related to adding/removing liquidity\n @param staticSwapFeePercentage The pool's native swap fee\n @param aggregateSwapFeePercentage The total swap fee charged, including protocol and pool creator components\n @param aggregateYieldFeePercentage The total swap fee charged, including protocol and pool creator components\n @param tokenDecimalDiffs Compressed storage of the token decimals of each pool token\n @param pauseWindowEndTime Timestamp after which the pool cannot be paused\n @param isPoolRegistered If true, the pool has been registered with the Vault\n @param isPoolInitialized If true, the pool has been initialized with liquidity, and is available for trading\n @param isPoolPaused If true, the pool has been paused (by governance or the pauseManager)\n @param isPoolInRecoveryMode If true, the pool has been placed in recovery mode, enabling recovery mode withdrawals"},"id":2886,"members":[{"constant":false,"id":2867,"mutability":"mutable","name":"liquidityManagement","nameLocation":"2122:19:15","nodeType":"VariableDeclaration","scope":2886,"src":"2102:39:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2861_storage_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":2866,"nodeType":"UserDefinedTypeName","pathNode":{"id":2865,"name":"LiquidityManagement","nameLocations":["2102:19:15"],"nodeType":"IdentifierPath","referencedDeclaration":2861,"src":"2102:19:15"},"referencedDeclaration":2861,"src":"2102:19:15","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2861_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"},{"constant":false,"id":2869,"mutability":"mutable","name":"staticSwapFeePercentage","nameLocation":"2155:23:15","nodeType":"VariableDeclaration","scope":2886,"src":"2147:31:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2868,"name":"uint256","nodeType":"ElementaryTypeName","src":"2147:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2871,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"2192:26:15","nodeType":"VariableDeclaration","scope":2886,"src":"2184:34:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2870,"name":"uint256","nodeType":"ElementaryTypeName","src":"2184:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2873,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"2232:27:15","nodeType":"VariableDeclaration","scope":2886,"src":"2224:35:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2872,"name":"uint256","nodeType":"ElementaryTypeName","src":"2224:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2875,"mutability":"mutable","name":"tokenDecimalDiffs","nameLocation":"2272:17:15","nodeType":"VariableDeclaration","scope":2886,"src":"2265:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":2874,"name":"uint40","nodeType":"ElementaryTypeName","src":"2265:6:15","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"},{"constant":false,"id":2877,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"2302:18:15","nodeType":"VariableDeclaration","scope":2886,"src":"2295:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2876,"name":"uint32","nodeType":"ElementaryTypeName","src":"2295:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2879,"mutability":"mutable","name":"isPoolRegistered","nameLocation":"2331:16:15","nodeType":"VariableDeclaration","scope":2886,"src":"2326:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2878,"name":"bool","nodeType":"ElementaryTypeName","src":"2326:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2881,"mutability":"mutable","name":"isPoolInitialized","nameLocation":"2358:17:15","nodeType":"VariableDeclaration","scope":2886,"src":"2353:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2880,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2883,"mutability":"mutable","name":"isPoolPaused","nameLocation":"2386:12:15","nodeType":"VariableDeclaration","scope":2886,"src":"2381:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2882,"name":"bool","nodeType":"ElementaryTypeName","src":"2381:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2885,"mutability":"mutable","name":"isPoolInRecoveryMode","nameLocation":"2409:20:15","nodeType":"VariableDeclaration","scope":2886,"src":"2404:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2884,"name":"bool","nodeType":"ElementaryTypeName","src":"2404:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"PoolConfig","nameLocation":"2085:10:15","nodeType":"StructDefinition","scope":3153,"src":"2078:354:15","visibility":"public"},{"canonicalName":"HookFlags","documentation":{"id":2887,"nodeType":"StructuredDocumentation","src":"2434:352:15","text":" @notice The flag portion of the `HooksConfig`.\n @dev `enableHookAdjustedAmounts` must be true for all contracts that modify the `amountCalculated`\n in after hooks. Otherwise, the Vault will ignore any \"hookAdjusted\" amounts. Setting any \"shouldCall\"\n flags to true will cause the Vault to call the corresponding hook during operations."},"id":2908,"members":[{"constant":false,"id":2889,"mutability":"mutable","name":"enableHookAdjustedAmounts","nameLocation":"2815:25:15","nodeType":"VariableDeclaration","scope":2908,"src":"2810:30:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2888,"name":"bool","nodeType":"ElementaryTypeName","src":"2810:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2891,"mutability":"mutable","name":"shouldCallBeforeInitialize","nameLocation":"2851:26:15","nodeType":"VariableDeclaration","scope":2908,"src":"2846:31:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2890,"name":"bool","nodeType":"ElementaryTypeName","src":"2846:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2893,"mutability":"mutable","name":"shouldCallAfterInitialize","nameLocation":"2888:25:15","nodeType":"VariableDeclaration","scope":2908,"src":"2883:30:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2892,"name":"bool","nodeType":"ElementaryTypeName","src":"2883:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2895,"mutability":"mutable","name":"shouldCallComputeDynamicSwapFee","nameLocation":"2924:31:15","nodeType":"VariableDeclaration","scope":2908,"src":"2919:36:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2894,"name":"bool","nodeType":"ElementaryTypeName","src":"2919:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2897,"mutability":"mutable","name":"shouldCallBeforeSwap","nameLocation":"2966:20:15","nodeType":"VariableDeclaration","scope":2908,"src":"2961:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2896,"name":"bool","nodeType":"ElementaryTypeName","src":"2961:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2899,"mutability":"mutable","name":"shouldCallAfterSwap","nameLocation":"2997:19:15","nodeType":"VariableDeclaration","scope":2908,"src":"2992:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2898,"name":"bool","nodeType":"ElementaryTypeName","src":"2992:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2901,"mutability":"mutable","name":"shouldCallBeforeAddLiquidity","nameLocation":"3027:28:15","nodeType":"VariableDeclaration","scope":2908,"src":"3022:33:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2900,"name":"bool","nodeType":"ElementaryTypeName","src":"3022:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2903,"mutability":"mutable","name":"shouldCallAfterAddLiquidity","nameLocation":"3066:27:15","nodeType":"VariableDeclaration","scope":2908,"src":"3061:32:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2902,"name":"bool","nodeType":"ElementaryTypeName","src":"3061:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2905,"mutability":"mutable","name":"shouldCallBeforeRemoveLiquidity","nameLocation":"3104:31:15","nodeType":"VariableDeclaration","scope":2908,"src":"3099:36:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2904,"name":"bool","nodeType":"ElementaryTypeName","src":"3099:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2907,"mutability":"mutable","name":"shouldCallAfterRemoveLiquidity","nameLocation":"3146:30:15","nodeType":"VariableDeclaration","scope":2908,"src":"3141:35:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2906,"name":"bool","nodeType":"ElementaryTypeName","src":"3141:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"HookFlags","nameLocation":"2794:9:15","nodeType":"StructDefinition","scope":3153,"src":"2787:392:15","visibility":"public"},{"canonicalName":"HooksConfig","documentation":{"id":2909,"nodeType":"StructuredDocumentation","src":"3181:101:15","text":"@notice Represents a hook contract configuration for a pool (HookFlags + hooksContract address)."},"id":2932,"members":[{"constant":false,"id":2911,"mutability":"mutable","name":"enableHookAdjustedAmounts","nameLocation":"3312:25:15","nodeType":"VariableDeclaration","scope":2932,"src":"3307:30:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2910,"name":"bool","nodeType":"ElementaryTypeName","src":"3307:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2913,"mutability":"mutable","name":"shouldCallBeforeInitialize","nameLocation":"3348:26:15","nodeType":"VariableDeclaration","scope":2932,"src":"3343:31:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2912,"name":"bool","nodeType":"ElementaryTypeName","src":"3343:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2915,"mutability":"mutable","name":"shouldCallAfterInitialize","nameLocation":"3385:25:15","nodeType":"VariableDeclaration","scope":2932,"src":"3380:30:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2914,"name":"bool","nodeType":"ElementaryTypeName","src":"3380:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2917,"mutability":"mutable","name":"shouldCallComputeDynamicSwapFee","nameLocation":"3421:31:15","nodeType":"VariableDeclaration","scope":2932,"src":"3416:36:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2916,"name":"bool","nodeType":"ElementaryTypeName","src":"3416:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2919,"mutability":"mutable","name":"shouldCallBeforeSwap","nameLocation":"3463:20:15","nodeType":"VariableDeclaration","scope":2932,"src":"3458:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2918,"name":"bool","nodeType":"ElementaryTypeName","src":"3458:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2921,"mutability":"mutable","name":"shouldCallAfterSwap","nameLocation":"3494:19:15","nodeType":"VariableDeclaration","scope":2932,"src":"3489:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2920,"name":"bool","nodeType":"ElementaryTypeName","src":"3489:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2923,"mutability":"mutable","name":"shouldCallBeforeAddLiquidity","nameLocation":"3524:28:15","nodeType":"VariableDeclaration","scope":2932,"src":"3519:33:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2922,"name":"bool","nodeType":"ElementaryTypeName","src":"3519:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2925,"mutability":"mutable","name":"shouldCallAfterAddLiquidity","nameLocation":"3563:27:15","nodeType":"VariableDeclaration","scope":2932,"src":"3558:32:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2924,"name":"bool","nodeType":"ElementaryTypeName","src":"3558:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2927,"mutability":"mutable","name":"shouldCallBeforeRemoveLiquidity","nameLocation":"3601:31:15","nodeType":"VariableDeclaration","scope":2932,"src":"3596:36:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2926,"name":"bool","nodeType":"ElementaryTypeName","src":"3596:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2929,"mutability":"mutable","name":"shouldCallAfterRemoveLiquidity","nameLocation":"3643:30:15","nodeType":"VariableDeclaration","scope":2932,"src":"3638:35:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2928,"name":"bool","nodeType":"ElementaryTypeName","src":"3638:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2931,"mutability":"mutable","name":"hooksContract","nameLocation":"3687:13:15","nodeType":"VariableDeclaration","scope":2932,"src":"3679:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2930,"name":"address","nodeType":"ElementaryTypeName","src":"3679:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"HooksConfig","nameLocation":"3289:11:15","nodeType":"StructDefinition","scope":3153,"src":"3282:421:15","visibility":"public"},{"canonicalName":"SwapState","documentation":{"id":2933,"nodeType":"StructuredDocumentation","src":"3705:364:15","text":" @notice Represents temporary state used during a swap operation.\n @param indexIn The zero-based index of tokenIn\n @param indexOut The zero-based index of tokenOut\n @param amountGivenScaled18 The amountGiven (i.e., tokenIn for ExactIn), adjusted for token decimals\n @param swapFeePercentage The swap fee to be applied (might be static or dynamic)"},"id":2942,"members":[{"constant":false,"id":2935,"mutability":"mutable","name":"indexIn","nameLocation":"4101:7:15","nodeType":"VariableDeclaration","scope":2942,"src":"4093:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2934,"name":"uint256","nodeType":"ElementaryTypeName","src":"4093:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2937,"mutability":"mutable","name":"indexOut","nameLocation":"4122:8:15","nodeType":"VariableDeclaration","scope":2942,"src":"4114:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2936,"name":"uint256","nodeType":"ElementaryTypeName","src":"4114:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2939,"mutability":"mutable","name":"amountGivenScaled18","nameLocation":"4144:19:15","nodeType":"VariableDeclaration","scope":2942,"src":"4136:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2938,"name":"uint256","nodeType":"ElementaryTypeName","src":"4136:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2941,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"4177:17:15","nodeType":"VariableDeclaration","scope":2942,"src":"4169:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2940,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"SwapState","nameLocation":"4077:9:15","nodeType":"StructDefinition","scope":3153,"src":"4070:127:15","visibility":"public"},{"canonicalName":"VaultState","documentation":{"id":2943,"nodeType":"StructuredDocumentation","src":"4199:381:15","text":" @notice Represents the Vault's configuration.\n @param isQueryDisabled If set to true, disables query functionality of the Vault. Can be modified by governance\n @param isVaultPaused If set to true, swaps and add/remove liquidity operations are halted\n @param areBuffersPaused If set to true, the Vault wrap/unwrap primitives associated with buffers will be disabled"},"id":2950,"members":[{"constant":false,"id":2945,"mutability":"mutable","name":"isQueryDisabled","nameLocation":"4610:15:15","nodeType":"VariableDeclaration","scope":2950,"src":"4605:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2944,"name":"bool","nodeType":"ElementaryTypeName","src":"4605:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2947,"mutability":"mutable","name":"isVaultPaused","nameLocation":"4636:13:15","nodeType":"VariableDeclaration","scope":2950,"src":"4631:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2946,"name":"bool","nodeType":"ElementaryTypeName","src":"4631:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2949,"mutability":"mutable","name":"areBuffersPaused","nameLocation":"4660:16:15","nodeType":"VariableDeclaration","scope":2950,"src":"4655:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2948,"name":"bool","nodeType":"ElementaryTypeName","src":"4655:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"VaultState","nameLocation":"4588:10:15","nodeType":"StructDefinition","scope":3153,"src":"4581:98:15","visibility":"public"},{"canonicalName":"PoolRoleAccounts","documentation":{"id":2951,"nodeType":"StructuredDocumentation","src":"4681:461:15","text":" @notice Represents the accounts holding certain roles for a given pool. This is passed in on pool registration.\n @param pauseManager Account empowered to pause/unpause the pool (note that governance can always pause a pool)\n @param swapFeeManager Account empowered to set static swap fees for a pool (or 0 to delegate to governance)\n @param poolCreator Account empowered to set the pool creator fee (or 0 if all fees go to the protocol and LPs)"},"id":2958,"members":[{"constant":false,"id":2953,"mutability":"mutable","name":"pauseManager","nameLocation":"5181:12:15","nodeType":"VariableDeclaration","scope":2958,"src":"5173:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2952,"name":"address","nodeType":"ElementaryTypeName","src":"5173:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2955,"mutability":"mutable","name":"swapFeeManager","nameLocation":"5207:14:15","nodeType":"VariableDeclaration","scope":2958,"src":"5199:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2954,"name":"address","nodeType":"ElementaryTypeName","src":"5199:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2957,"mutability":"mutable","name":"poolCreator","nameLocation":"5235:11:15","nodeType":"VariableDeclaration","scope":2958,"src":"5227:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2956,"name":"address","nodeType":"ElementaryTypeName","src":"5227:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"PoolRoleAccounts","nameLocation":"5150:16:15","nodeType":"StructDefinition","scope":3153,"src":"5143:106:15","visibility":"public"},{"canonicalName":"TokenType","documentation":{"id":2959,"nodeType":"StructuredDocumentation","src":"9245:1024:15","text":" @notice Token types supported by the Vault.\n @dev In general, pools may contain any combination of these tokens.\n STANDARD tokens (e.g., BAL, WETH) have no rate provider.\n WITH_RATE tokens (e.g., wstETH) require a rate provider. These may be tokens like wstETH, which need to be wrapped\n because the underlying stETH token is rebasing, and such tokens are unsupported by the Vault. They may also be\n tokens like sEUR, which track an underlying asset, but are not yield-bearing. Finally, this encompasses\n yield-bearing ERC4626 tokens, which can be used to facilitate swaps without requiring wrapping or unwrapping\n in most cases. The `paysYieldFees` flag can be used to indicate whether a token is yield-bearing (e.g., waDAI),\n not yield-bearing (e.g., sEUR), or yield-bearing but exempt from fees (e.g., in certain nested pools, where\n yield fees are charged elsewhere).\n NB: STANDARD must always be the first enum element, so that newly initialized data structures default to Standard."},"id":2962,"members":[{"id":2960,"name":"STANDARD","nameLocation":"10291:8:15","nodeType":"EnumValue","src":"10291:8:15"},{"id":2961,"name":"WITH_RATE","nameLocation":"10305:9:15","nodeType":"EnumValue","src":"10305:9:15"}],"name":"TokenType","nameLocation":"10275:9:15","nodeType":"EnumDefinition","src":"10270:46:15"},{"canonicalName":"TokenConfig","documentation":{"id":2963,"nodeType":"StructuredDocumentation","src":"10318:915:15","text":" @notice Encapsulate the data required for the Vault to support a token of the given type.\n @dev For STANDARD tokens, the rate provider address must be 0, and paysYieldFees must be false. All WITH_RATE tokens\n need a rate provider, and may or may not be yield-bearing.\n At registration time, it is useful to include the token address along with the token parameters in the structure\n passed to `registerPool`, as the alternative would be parallel arrays, which would be error prone and require\n validation checks. `TokenConfig` is only used for registration, and is never put into storage (see `TokenInfo`).\n @param token The token address\n @param tokenType The token type (see the enum for supported types)\n @param rateProvider The rate provider for a token (see further documentation above)\n @param paysYieldFees Flag indicating whether yield fees should be charged on this token"},"id":2975,"members":[{"constant":false,"id":2966,"mutability":"mutable","name":"token","nameLocation":"11266:5:15","nodeType":"VariableDeclaration","scope":2975,"src":"11259:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":2965,"nodeType":"UserDefinedTypeName","pathNode":{"id":2964,"name":"IERC20","nameLocations":["11259:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"11259:6:15"},"referencedDeclaration":6383,"src":"11259:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2969,"mutability":"mutable","name":"tokenType","nameLocation":"11287:9:15","nodeType":"VariableDeclaration","scope":2975,"src":"11277:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2962","typeString":"enum TokenType"},"typeName":{"id":2968,"nodeType":"UserDefinedTypeName","pathNode":{"id":2967,"name":"TokenType","nameLocations":["11277:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":2962,"src":"11277:9:15"},"referencedDeclaration":2962,"src":"11277:9:15","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2962","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":2972,"mutability":"mutable","name":"rateProvider","nameLocation":"11316:12:15","nodeType":"VariableDeclaration","scope":2975,"src":"11302:26:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRateProvider_$24","typeString":"contract IRateProvider"},"typeName":{"id":2971,"nodeType":"UserDefinedTypeName","pathNode":{"id":2970,"name":"IRateProvider","nameLocations":["11302:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":24,"src":"11302:13:15"},"referencedDeclaration":24,"src":"11302:13:15","typeDescriptions":{"typeIdentifier":"t_contract$_IRateProvider_$24","typeString":"contract IRateProvider"}},"visibility":"internal"},{"constant":false,"id":2974,"mutability":"mutable","name":"paysYieldFees","nameLocation":"11339:13:15","nodeType":"VariableDeclaration","scope":2975,"src":"11334:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2973,"name":"bool","nodeType":"ElementaryTypeName","src":"11334:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"TokenConfig","nameLocation":"11241:11:15","nodeType":"StructDefinition","scope":3153,"src":"11234:121:15","visibility":"public"},{"canonicalName":"TokenInfo","documentation":{"id":2976,"nodeType":"StructuredDocumentation","src":"11357:592:15","text":" @notice This data structure is stored in `_poolTokenInfo`, a nested mapping from pool -> (token -> TokenInfo).\n @dev Since the token is already the key of the nested mapping, it would be redundant (and an extra SLOAD) to store\n it again in the struct. When we construct PoolData, the tokens are separated into their own array.\n @param tokenType The token type (see the enum for supported types)\n @param rateProvider The rate provider for a token (see further documentation above)\n @param paysYieldFees Flag indicating whether yield fees should be charged on this token"},"id":2985,"members":[{"constant":false,"id":2979,"mutability":"mutable","name":"tokenType","nameLocation":"11983:9:15","nodeType":"VariableDeclaration","scope":2985,"src":"11973:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2962","typeString":"enum TokenType"},"typeName":{"id":2978,"nodeType":"UserDefinedTypeName","pathNode":{"id":2977,"name":"TokenType","nameLocations":["11973:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":2962,"src":"11973:9:15"},"referencedDeclaration":2962,"src":"11973:9:15","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2962","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":2982,"mutability":"mutable","name":"rateProvider","nameLocation":"12012:12:15","nodeType":"VariableDeclaration","scope":2985,"src":"11998:26:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRateProvider_$24","typeString":"contract IRateProvider"},"typeName":{"id":2981,"nodeType":"UserDefinedTypeName","pathNode":{"id":2980,"name":"IRateProvider","nameLocations":["11998:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":24,"src":"11998:13:15"},"referencedDeclaration":24,"src":"11998:13:15","typeDescriptions":{"typeIdentifier":"t_contract$_IRateProvider_$24","typeString":"contract IRateProvider"}},"visibility":"internal"},{"constant":false,"id":2984,"mutability":"mutable","name":"paysYieldFees","nameLocation":"12035:13:15","nodeType":"VariableDeclaration","scope":2985,"src":"12030:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2983,"name":"bool","nodeType":"ElementaryTypeName","src":"12030:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"TokenInfo","nameLocation":"11957:9:15","nodeType":"StructDefinition","scope":3153,"src":"11950:101:15","visibility":"public"},{"canonicalName":"PoolData","documentation":{"id":2986,"nodeType":"StructuredDocumentation","src":"12053:761:15","text":" @notice Data structure used to represent the current pool state in memory\n @param poolConfigBits Custom type to store the entire configuration of the pool.\n @param tokens Pool tokens, sorted in token registration order\n @param tokenInfo Configuration data for each token, sorted in token registration order\n @param balancesRaw Token balances in native decimals\n @param balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates\n @param tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\n @param decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n calculations. It is 1e18 (FP 1) for 18-decimal tokens"},"id":3010,"members":[{"constant":false,"id":2989,"mutability":"mutable","name":"poolConfigBits","nameLocation":"12852:14:15","nodeType":"VariableDeclaration","scope":3010,"src":"12837:29:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_PoolConfigBits_$2863","typeString":"PoolConfigBits"},"typeName":{"id":2988,"nodeType":"UserDefinedTypeName","pathNode":{"id":2987,"name":"PoolConfigBits","nameLocations":["12837:14:15"],"nodeType":"IdentifierPath","referencedDeclaration":2863,"src":"12837:14:15"},"referencedDeclaration":2863,"src":"12837:14:15","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_PoolConfigBits_$2863","typeString":"PoolConfigBits"}},"visibility":"internal"},{"constant":false,"id":2993,"mutability":"mutable","name":"tokens","nameLocation":"12881:6:15","nodeType":"VariableDeclaration","scope":3010,"src":"12872:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":2991,"nodeType":"UserDefinedTypeName","pathNode":{"id":2990,"name":"IERC20","nameLocations":["12872:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"12872:6:15"},"referencedDeclaration":6383,"src":"12872:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":2992,"nodeType":"ArrayTypeName","src":"12872:8:15","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":2997,"mutability":"mutable","name":"tokenInfo","nameLocation":"12905:9:15","nodeType":"VariableDeclaration","scope":3010,"src":"12893:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2985_storage_$dyn_storage_ptr","typeString":"struct TokenInfo[]"},"typeName":{"baseType":{"id":2995,"nodeType":"UserDefinedTypeName","pathNode":{"id":2994,"name":"TokenInfo","nameLocations":["12893:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":2985,"src":"12893:9:15"},"referencedDeclaration":2985,"src":"12893:9:15","typeDescriptions":{"typeIdentifier":"t_struct$_TokenInfo_$2985_storage_ptr","typeString":"struct TokenInfo"}},"id":2996,"nodeType":"ArrayTypeName","src":"12893:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2985_storage_$dyn_storage_ptr","typeString":"struct TokenInfo[]"}},"visibility":"internal"},{"constant":false,"id":3000,"mutability":"mutable","name":"balancesRaw","nameLocation":"12930:11:15","nodeType":"VariableDeclaration","scope":3010,"src":"12920:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2998,"name":"uint256","nodeType":"ElementaryTypeName","src":"12920:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2999,"nodeType":"ArrayTypeName","src":"12920:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3003,"mutability":"mutable","name":"balancesLiveScaled18","nameLocation":"12957:20:15","nodeType":"VariableDeclaration","scope":3010,"src":"12947:30:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3001,"name":"uint256","nodeType":"ElementaryTypeName","src":"12947:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3002,"nodeType":"ArrayTypeName","src":"12947:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3006,"mutability":"mutable","name":"tokenRates","nameLocation":"12993:10:15","nodeType":"VariableDeclaration","scope":3010,"src":"12983:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3004,"name":"uint256","nodeType":"ElementaryTypeName","src":"12983:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3005,"nodeType":"ArrayTypeName","src":"12983:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3009,"mutability":"mutable","name":"decimalScalingFactors","nameLocation":"13019:21:15","nodeType":"VariableDeclaration","scope":3010,"src":"13009:31:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3007,"name":"uint256","nodeType":"ElementaryTypeName","src":"13009:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3008,"nodeType":"ArrayTypeName","src":"13009:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"name":"PoolData","nameLocation":"12822:8:15","nodeType":"StructDefinition","scope":3153,"src":"12815:228:15","visibility":"public"},{"canonicalName":"Rounding","id":3013,"members":[{"id":3011,"name":"ROUND_UP","nameLocation":"13065:8:15","nodeType":"EnumValue","src":"13065:8:15"},{"id":3012,"name":"ROUND_DOWN","nameLocation":"13079:10:15","nodeType":"EnumValue","src":"13079:10:15"}],"name":"Rounding","nameLocation":"13050:8:15","nodeType":"EnumDefinition","src":"13045:46:15"},{"canonicalName":"SwapKind","id":3016,"members":[{"id":3014,"name":"EXACT_IN","nameLocation":"13318:8:15","nodeType":"EnumValue","src":"13318:8:15"},{"id":3015,"name":"EXACT_OUT","nameLocation":"13332:9:15","nodeType":"EnumValue","src":"13332:9:15"}],"name":"SwapKind","nameLocation":"13303:8:15","nodeType":"EnumDefinition","src":"13298:45:15"},{"canonicalName":"VaultSwapParams","documentation":{"id":3017,"nodeType":"StructuredDocumentation","src":"14089:558:15","text":" @notice Data passed into primary Vault `swap` operations.\n @param kind Type of swap (Exact In or Exact Out)\n @param pool The pool with the tokens being swapped\n @param tokenIn The token entering the Vault (balance increases)\n @param tokenOut The token leaving the Vault (balance decreases)\n @param amountGivenRaw Amount specified for tokenIn or tokenOut (depending on the type of swap)\n @param limitRaw Minimum or maximum value of the calculated amount (depending on the type of swap)\n @param userData Additional (optional) user data"},"id":3035,"members":[{"constant":false,"id":3020,"mutability":"mutable","name":"kind","nameLocation":"14686:4:15","nodeType":"VariableDeclaration","scope":3035,"src":"14677:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3016","typeString":"enum SwapKind"},"typeName":{"id":3019,"nodeType":"UserDefinedTypeName","pathNode":{"id":3018,"name":"SwapKind","nameLocations":["14677:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":3016,"src":"14677:8:15"},"referencedDeclaration":3016,"src":"14677:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3016","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":3022,"mutability":"mutable","name":"pool","nameLocation":"14704:4:15","nodeType":"VariableDeclaration","scope":3035,"src":"14696:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3021,"name":"address","nodeType":"ElementaryTypeName","src":"14696:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3025,"mutability":"mutable","name":"tokenIn","nameLocation":"14721:7:15","nodeType":"VariableDeclaration","scope":3035,"src":"14714:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":3024,"nodeType":"UserDefinedTypeName","pathNode":{"id":3023,"name":"IERC20","nameLocations":["14714:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"14714:6:15"},"referencedDeclaration":6383,"src":"14714:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3028,"mutability":"mutable","name":"tokenOut","nameLocation":"14741:8:15","nodeType":"VariableDeclaration","scope":3035,"src":"14734:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":3027,"nodeType":"UserDefinedTypeName","pathNode":{"id":3026,"name":"IERC20","nameLocations":["14734:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"14734:6:15"},"referencedDeclaration":6383,"src":"14734:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3030,"mutability":"mutable","name":"amountGivenRaw","nameLocation":"14763:14:15","nodeType":"VariableDeclaration","scope":3035,"src":"14755:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3029,"name":"uint256","nodeType":"ElementaryTypeName","src":"14755:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3032,"mutability":"mutable","name":"limitRaw","nameLocation":"14791:8:15","nodeType":"VariableDeclaration","scope":3035,"src":"14783:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3031,"name":"uint256","nodeType":"ElementaryTypeName","src":"14783:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3034,"mutability":"mutable","name":"userData","nameLocation":"14811:8:15","nodeType":"VariableDeclaration","scope":3035,"src":"14805:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3033,"name":"bytes","nodeType":"ElementaryTypeName","src":"14805:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"VaultSwapParams","nameLocation":"14655:15:15","nodeType":"StructDefinition","scope":3153,"src":"14648:174:15","visibility":"public"},{"canonicalName":"PoolSwapParams","documentation":{"id":3036,"nodeType":"StructuredDocumentation","src":"14824:530:15","text":" @notice Data for a swap operation, used by contracts implementing `IBasePool`.\n @param kind Type of swap (exact in or exact out)\n @param amountGivenScaled18 Amount given based on kind of the swap (e.g., tokenIn for EXACT_IN)\n @param balancesScaled18 Current pool balances\n @param indexIn Index of tokenIn\n @param indexOut Index of tokenOut\n @param router The address (usually a router contract) that initiated a swap operation on the Vault\n @param userData Additional (optional) data required for the swap"},"id":3053,"members":[{"constant":false,"id":3039,"mutability":"mutable","name":"kind","nameLocation":"15392:4:15","nodeType":"VariableDeclaration","scope":3053,"src":"15383:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3016","typeString":"enum SwapKind"},"typeName":{"id":3038,"nodeType":"UserDefinedTypeName","pathNode":{"id":3037,"name":"SwapKind","nameLocations":["15383:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":3016,"src":"15383:8:15"},"referencedDeclaration":3016,"src":"15383:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3016","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":3041,"mutability":"mutable","name":"amountGivenScaled18","nameLocation":"15410:19:15","nodeType":"VariableDeclaration","scope":3053,"src":"15402:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3040,"name":"uint256","nodeType":"ElementaryTypeName","src":"15402:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3044,"mutability":"mutable","name":"balancesScaled18","nameLocation":"15445:16:15","nodeType":"VariableDeclaration","scope":3053,"src":"15435:26:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3042,"name":"uint256","nodeType":"ElementaryTypeName","src":"15435:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3043,"nodeType":"ArrayTypeName","src":"15435:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3046,"mutability":"mutable","name":"indexIn","nameLocation":"15475:7:15","nodeType":"VariableDeclaration","scope":3053,"src":"15467:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3045,"name":"uint256","nodeType":"ElementaryTypeName","src":"15467:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3048,"mutability":"mutable","name":"indexOut","nameLocation":"15496:8:15","nodeType":"VariableDeclaration","scope":3053,"src":"15488:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3047,"name":"uint256","nodeType":"ElementaryTypeName","src":"15488:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3050,"mutability":"mutable","name":"router","nameLocation":"15518:6:15","nodeType":"VariableDeclaration","scope":3053,"src":"15510:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3049,"name":"address","nodeType":"ElementaryTypeName","src":"15510:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3052,"mutability":"mutable","name":"userData","nameLocation":"15536:8:15","nodeType":"VariableDeclaration","scope":3053,"src":"15530:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3051,"name":"bytes","nodeType":"ElementaryTypeName","src":"15530:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"PoolSwapParams","nameLocation":"15362:14:15","nodeType":"StructDefinition","scope":3153,"src":"15355:192:15","visibility":"public"},{"canonicalName":"AfterSwapParams","documentation":{"id":3054,"nodeType":"StructuredDocumentation","src":"15549:813:15","text":" @notice Data for the hook after a swap operation.\n @param kind Type of swap (exact in or exact out)\n @param tokenIn Token to be swapped from\n @param tokenOut Token to be swapped to\n @param amountInScaled18 Amount of tokenIn (entering the Vault)\n @param amountOutScaled18 Amount of tokenOut (leaving the Vault)\n @param tokenInBalanceScaled18 Updated (after swap) balance of tokenIn\n @param tokenOutBalanceScaled18 Updated (after swap) balance of tokenOut\n @param amountCalculatedScaled18 Token amount calculated by the swap\n @param amountCalculatedRaw Token amount calculated by the swap\n @param router The address (usually a router contract) that initiated a swap operation on the Vault\n @param pool Pool address\n @param userData Additional (optional) data required for the swap"},"id":3082,"members":[{"constant":false,"id":3057,"mutability":"mutable","name":"kind","nameLocation":"16401:4:15","nodeType":"VariableDeclaration","scope":3082,"src":"16392:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3016","typeString":"enum SwapKind"},"typeName":{"id":3056,"nodeType":"UserDefinedTypeName","pathNode":{"id":3055,"name":"SwapKind","nameLocations":["16392:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":3016,"src":"16392:8:15"},"referencedDeclaration":3016,"src":"16392:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3016","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":3060,"mutability":"mutable","name":"tokenIn","nameLocation":"16418:7:15","nodeType":"VariableDeclaration","scope":3082,"src":"16411:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":3059,"nodeType":"UserDefinedTypeName","pathNode":{"id":3058,"name":"IERC20","nameLocations":["16411:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"16411:6:15"},"referencedDeclaration":6383,"src":"16411:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3063,"mutability":"mutable","name":"tokenOut","nameLocation":"16438:8:15","nodeType":"VariableDeclaration","scope":3082,"src":"16431:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":3062,"nodeType":"UserDefinedTypeName","pathNode":{"id":3061,"name":"IERC20","nameLocations":["16431:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"16431:6:15"},"referencedDeclaration":6383,"src":"16431:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3065,"mutability":"mutable","name":"amountInScaled18","nameLocation":"16460:16:15","nodeType":"VariableDeclaration","scope":3082,"src":"16452:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3064,"name":"uint256","nodeType":"ElementaryTypeName","src":"16452:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3067,"mutability":"mutable","name":"amountOutScaled18","nameLocation":"16490:17:15","nodeType":"VariableDeclaration","scope":3082,"src":"16482:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3066,"name":"uint256","nodeType":"ElementaryTypeName","src":"16482:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3069,"mutability":"mutable","name":"tokenInBalanceScaled18","nameLocation":"16521:22:15","nodeType":"VariableDeclaration","scope":3082,"src":"16513:30:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3068,"name":"uint256","nodeType":"ElementaryTypeName","src":"16513:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3071,"mutability":"mutable","name":"tokenOutBalanceScaled18","nameLocation":"16557:23:15","nodeType":"VariableDeclaration","scope":3082,"src":"16549:31:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3070,"name":"uint256","nodeType":"ElementaryTypeName","src":"16549:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3073,"mutability":"mutable","name":"amountCalculatedScaled18","nameLocation":"16594:24:15","nodeType":"VariableDeclaration","scope":3082,"src":"16586:32:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3072,"name":"uint256","nodeType":"ElementaryTypeName","src":"16586:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3075,"mutability":"mutable","name":"amountCalculatedRaw","nameLocation":"16632:19:15","nodeType":"VariableDeclaration","scope":3082,"src":"16624:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3074,"name":"uint256","nodeType":"ElementaryTypeName","src":"16624:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3077,"mutability":"mutable","name":"router","nameLocation":"16665:6:15","nodeType":"VariableDeclaration","scope":3082,"src":"16657:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3076,"name":"address","nodeType":"ElementaryTypeName","src":"16657:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3079,"mutability":"mutable","name":"pool","nameLocation":"16685:4:15","nodeType":"VariableDeclaration","scope":3082,"src":"16677:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3078,"name":"address","nodeType":"ElementaryTypeName","src":"16677:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3081,"mutability":"mutable","name":"userData","nameLocation":"16701:8:15","nodeType":"VariableDeclaration","scope":3082,"src":"16695:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3080,"name":"bytes","nodeType":"ElementaryTypeName","src":"16695:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"AfterSwapParams","nameLocation":"16370:15:15","nodeType":"StructDefinition","scope":3153,"src":"16363:349:15","visibility":"public"},{"canonicalName":"AddLiquidityKind","id":3088,"members":[{"id":3083,"name":"PROPORTIONAL","nameLocation":"16951:12:15","nodeType":"EnumValue","src":"16951:12:15"},{"id":3084,"name":"UNBALANCED","nameLocation":"16969:10:15","nodeType":"EnumValue","src":"16969:10:15"},{"id":3085,"name":"SINGLE_TOKEN_EXACT_OUT","nameLocation":"16985:22:15","nodeType":"EnumValue","src":"16985:22:15"},{"id":3086,"name":"DONATION","nameLocation":"17013:8:15","nodeType":"EnumValue","src":"17013:8:15"},{"id":3087,"name":"CUSTOM","nameLocation":"17027:6:15","nodeType":"EnumValue","src":"17027:6:15"}],"name":"AddLiquidityKind","nameLocation":"16928:16:15","nodeType":"EnumDefinition","src":"16923:112:15"},{"canonicalName":"AddLiquidityParams","documentation":{"id":3089,"nodeType":"StructuredDocumentation","src":"17037:320:15","text":" @notice Data for an add liquidity operation.\n @param pool Address of the pool\n @param to Address of user to mint to\n @param maxAmountsIn Maximum amounts of input tokens\n @param minBptAmountOut Minimum amount of output pool tokens\n @param kind Add liquidity kind\n @param userData Optional user data"},"id":3104,"members":[{"constant":false,"id":3091,"mutability":"mutable","name":"pool","nameLocation":"17398:4:15","nodeType":"VariableDeclaration","scope":3104,"src":"17390:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3090,"name":"address","nodeType":"ElementaryTypeName","src":"17390:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3093,"mutability":"mutable","name":"to","nameLocation":"17416:2:15","nodeType":"VariableDeclaration","scope":3104,"src":"17408:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3092,"name":"address","nodeType":"ElementaryTypeName","src":"17408:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3096,"mutability":"mutable","name":"maxAmountsIn","nameLocation":"17434:12:15","nodeType":"VariableDeclaration","scope":3104,"src":"17424:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3094,"name":"uint256","nodeType":"ElementaryTypeName","src":"17424:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3095,"nodeType":"ArrayTypeName","src":"17424:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3098,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"17460:15:15","nodeType":"VariableDeclaration","scope":3104,"src":"17452:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3097,"name":"uint256","nodeType":"ElementaryTypeName","src":"17452:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3101,"mutability":"mutable","name":"kind","nameLocation":"17498:4:15","nodeType":"VariableDeclaration","scope":3104,"src":"17481:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$3088","typeString":"enum AddLiquidityKind"},"typeName":{"id":3100,"nodeType":"UserDefinedTypeName","pathNode":{"id":3099,"name":"AddLiquidityKind","nameLocations":["17481:16:15"],"nodeType":"IdentifierPath","referencedDeclaration":3088,"src":"17481:16:15"},"referencedDeclaration":3088,"src":"17481:16:15","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$3088","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":3103,"mutability":"mutable","name":"userData","nameLocation":"17514:8:15","nodeType":"VariableDeclaration","scope":3104,"src":"17508:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3102,"name":"bytes","nodeType":"ElementaryTypeName","src":"17508:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"AddLiquidityParams","nameLocation":"17365:18:15","nodeType":"StructDefinition","scope":3153,"src":"17358:167:15","visibility":"public"},{"canonicalName":"RemoveLiquidityKind","id":3109,"members":[{"id":3105,"name":"PROPORTIONAL","nameLocation":"17770:12:15","nodeType":"EnumValue","src":"17770:12:15"},{"id":3106,"name":"SINGLE_TOKEN_EXACT_IN","nameLocation":"17788:21:15","nodeType":"EnumValue","src":"17788:21:15"},{"id":3107,"name":"SINGLE_TOKEN_EXACT_OUT","nameLocation":"17815:22:15","nodeType":"EnumValue","src":"17815:22:15"},{"id":3108,"name":"CUSTOM","nameLocation":"17843:6:15","nodeType":"EnumValue","src":"17843:6:15"}],"name":"RemoveLiquidityKind","nameLocation":"17744:19:15","nodeType":"EnumDefinition","src":"17739:112:15"},{"canonicalName":"RemoveLiquidityParams","documentation":{"id":3110,"nodeType":"StructuredDocumentation","src":"17853:330:15","text":" @notice Data for an remove liquidity operation.\n @param pool Address of the pool\n @param from Address of user to burn from\n @param maxBptAmountIn Maximum amount of input pool tokens\n @param minAmountsOut Minimum amounts of output tokens\n @param kind Remove liquidity kind\n @param userData Optional user data"},"id":3125,"members":[{"constant":false,"id":3112,"mutability":"mutable","name":"pool","nameLocation":"18227:4:15","nodeType":"VariableDeclaration","scope":3125,"src":"18219:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3111,"name":"address","nodeType":"ElementaryTypeName","src":"18219:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3114,"mutability":"mutable","name":"from","nameLocation":"18245:4:15","nodeType":"VariableDeclaration","scope":3125,"src":"18237:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3113,"name":"address","nodeType":"ElementaryTypeName","src":"18237:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3116,"mutability":"mutable","name":"maxBptAmountIn","nameLocation":"18263:14:15","nodeType":"VariableDeclaration","scope":3125,"src":"18255:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3115,"name":"uint256","nodeType":"ElementaryTypeName","src":"18255:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3119,"mutability":"mutable","name":"minAmountsOut","nameLocation":"18293:13:15","nodeType":"VariableDeclaration","scope":3125,"src":"18283:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3117,"name":"uint256","nodeType":"ElementaryTypeName","src":"18283:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3118,"nodeType":"ArrayTypeName","src":"18283:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3122,"mutability":"mutable","name":"kind","nameLocation":"18332:4:15","nodeType":"VariableDeclaration","scope":3125,"src":"18312:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$3109","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":3121,"nodeType":"UserDefinedTypeName","pathNode":{"id":3120,"name":"RemoveLiquidityKind","nameLocations":["18312:19:15"],"nodeType":"IdentifierPath","referencedDeclaration":3109,"src":"18312:19:15"},"referencedDeclaration":3109,"src":"18312:19:15","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$3109","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":3124,"mutability":"mutable","name":"userData","nameLocation":"18348:8:15","nodeType":"VariableDeclaration","scope":3125,"src":"18342:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3123,"name":"bytes","nodeType":"ElementaryTypeName","src":"18342:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"RemoveLiquidityParams","nameLocation":"18191:21:15","nodeType":"StructDefinition","scope":3153,"src":"18184:175:15","visibility":"public"},{"canonicalName":"WrappingDirection","id":3128,"members":[{"id":3126,"name":"WRAP","nameLocation":"18602:4:15","nodeType":"EnumValue","src":"18602:4:15"},{"id":3127,"name":"UNWRAP","nameLocation":"18612:6:15","nodeType":"EnumValue","src":"18612:6:15"}],"name":"WrappingDirection","nameLocation":"18578:17:15","nodeType":"EnumDefinition","src":"18573:47:15"},{"canonicalName":"BufferWrapOrUnwrapParams","documentation":{"id":3129,"nodeType":"StructuredDocumentation","src":"18622:499:15","text":" @notice Data for a wrap/unwrap operation.\n @param kind Type of swap (Exact In or Exact Out)\n @param direction Direction of the wrapping operation (Wrap or Unwrap)\n @param wrappedToken Wrapped token, compatible with interface ERC4626\n @param amountGivenRaw Amount specified for tokenIn or tokenOut (depends on the type of swap and wrapping direction)\n @param limitRaw Minimum or maximum amount specified for the other token (depends on the type of swap and wrapping\n direction)"},"id":3143,"members":[{"constant":false,"id":3132,"mutability":"mutable","name":"kind","nameLocation":"19169:4:15","nodeType":"VariableDeclaration","scope":3143,"src":"19160:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3016","typeString":"enum SwapKind"},"typeName":{"id":3131,"nodeType":"UserDefinedTypeName","pathNode":{"id":3130,"name":"SwapKind","nameLocations":["19160:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":3016,"src":"19160:8:15"},"referencedDeclaration":3016,"src":"19160:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3016","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":3135,"mutability":"mutable","name":"direction","nameLocation":"19197:9:15","nodeType":"VariableDeclaration","scope":3143,"src":"19179:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_WrappingDirection_$3128","typeString":"enum WrappingDirection"},"typeName":{"id":3134,"nodeType":"UserDefinedTypeName","pathNode":{"id":3133,"name":"WrappingDirection","nameLocations":["19179:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":3128,"src":"19179:17:15"},"referencedDeclaration":3128,"src":"19179:17:15","typeDescriptions":{"typeIdentifier":"t_enum$_WrappingDirection_$3128","typeString":"enum WrappingDirection"}},"visibility":"internal"},{"constant":false,"id":3138,"mutability":"mutable","name":"wrappedToken","nameLocation":"19221:12:15","nodeType":"VariableDeclaration","scope":3143,"src":"19212:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"},"typeName":{"id":3137,"nodeType":"UserDefinedTypeName","pathNode":{"id":3136,"name":"IERC4626","nameLocations":["19212:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":5653,"src":"19212:8:15"},"referencedDeclaration":5653,"src":"19212:8:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$5653","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":3140,"mutability":"mutable","name":"amountGivenRaw","nameLocation":"19247:14:15","nodeType":"VariableDeclaration","scope":3143,"src":"19239:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3139,"name":"uint256","nodeType":"ElementaryTypeName","src":"19239:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3142,"mutability":"mutable","name":"limitRaw","nameLocation":"19275:8:15","nodeType":"VariableDeclaration","scope":3143,"src":"19267:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3141,"name":"uint256","nodeType":"ElementaryTypeName","src":"19267:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"BufferWrapOrUnwrapParams","nameLocation":"19129:24:15","nodeType":"StructDefinition","scope":3153,"src":"19122:164:15","visibility":"public"},{"constant":true,"id":3146,"mutability":"constant","name":"FEE_BITLENGTH","nameLocation":"19611:13:15","nodeType":"VariableDeclaration","scope":3153,"src":"19594:35:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3144,"name":"uint256","nodeType":"ElementaryTypeName","src":"19594:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3234","id":3145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19627:2:15","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"visibility":"internal"},{"constant":true,"id":3149,"mutability":"constant","name":"FEE_SCALING_FACTOR","nameLocation":"19648:18:15","nodeType":"VariableDeclaration","scope":3153,"src":"19631:42:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3147,"name":"uint256","nodeType":"ElementaryTypeName","src":"19631:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653131","id":3148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19669:4:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000000_by_1","typeString":"int_const 100000000000"},"value":"1e11"},"visibility":"internal"},{"constant":true,"id":3152,"mutability":"constant","name":"MAX_FEE_PERCENTAGE","nameLocation":"19896:18:15","nodeType":"VariableDeclaration","scope":3153,"src":"19879:48:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3150,"name":"uint256","nodeType":"ElementaryTypeName","src":"19879:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"39392e39393939653136","id":3151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19917:10:15","typeDescriptions":{"typeIdentifier":"t_rational_999999000000000000_by_1","typeString":"int_const 999999000000000000"},"value":"99.9999e16"},"visibility":"internal"}],"src":"46:19895:15"},"id":15},"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol":{"ast":{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol","exportedSymbols":{"Authentication":[3232],"IAuthentication":[14]},"id":3233,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3154,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:16"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","file":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","id":3156,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3233,"sourceUnit":15,"src":"72:116:16","symbolAliases":[{"foreign":{"id":3155,"name":"IAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"81:15:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3158,"name":"IAuthentication","nameLocations":["625:15:16"],"nodeType":"IdentifierPath","referencedDeclaration":14,"src":"625:15:16"},"id":3159,"nodeType":"InheritanceSpecifier","src":"625:15:16"}],"canonicalName":"Authentication","contractDependencies":[],"contractKind":"contract","documentation":{"id":3157,"nodeType":"StructuredDocumentation","src":"190:398:16","text":" @notice Building block for performing access control on external functions.\n @dev This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be\n applied to external functions to make them only callable by authorized accounts.\n Derived contracts must implement the `_canPerform` function, which holds the actual access control logic."},"fullyImplemented":false,"id":3232,"linearizedBaseContracts":[3232,14],"name":"Authentication","nameLocation":"607:14:16","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3161,"mutability":"immutable","name":"_actionIdDisambiguator","nameLocation":"673:22:16","nodeType":"VariableDeclaration","scope":3232,"src":"647:48:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3160,"name":"bytes32","nodeType":"ElementaryTypeName","src":"647:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":3171,"nodeType":"Block","src":"1337:63:16","statements":[{"expression":{"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3167,"name":"_actionIdDisambiguator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"1347:22:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3168,"name":"actionIdDisambiguator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"1372:21:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1347:46:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3170,"nodeType":"ExpressionStatement","src":"1347:46:16"}]},"documentation":{"id":3162,"nodeType":"StructuredDocumentation","src":"702:587:16","text":" @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\n multi-contract systems.\n There are two main uses for it:\n  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\n    unique. The contract's own address is a good option.\n  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\n    shared by the entire family (and no other contract) should be used instead."},"id":3172,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3164,"mutability":"mutable","name":"actionIdDisambiguator","nameLocation":"1314:21:16","nodeType":"VariableDeclaration","scope":3172,"src":"1306:29:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1306:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1305:31:16"},"returnParameters":{"id":3166,"nodeType":"ParameterList","parameters":[],"src":"1337:0:16"},"scope":3232,"src":"1294:106:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3179,"nodeType":"Block","src":"1549:49:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3175,"name":"_authenticateCaller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"1559:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1559:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3177,"nodeType":"ExpressionStatement","src":"1559:21:16"},{"id":3178,"nodeType":"PlaceholderStatement","src":"1590:1:16"}]},"documentation":{"id":3173,"nodeType":"StructuredDocumentation","src":"1406:114:16","text":"@dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions."},"id":3180,"name":"authenticate","nameLocation":"1534:12:16","nodeType":"ModifierDefinition","parameters":{"id":3174,"nodeType":"ParameterList","parameters":[],"src":"1546:2:16"},"src":"1525:73:16","virtual":false,"visibility":"internal"},{"body":{"id":3202,"nodeType":"Block","src":"1733:156:16","statements":[{"assignments":[3185],"declarations":[{"constant":false,"id":3185,"mutability":"mutable","name":"actionId","nameLocation":"1751:8:16","nodeType":"VariableDeclaration","scope":3202,"src":"1743:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3184,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1743:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3190,"initialValue":{"arguments":[{"expression":{"id":3187,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1774:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1778:3:16","memberName":"sig","nodeType":"MemberAccess","src":"1774:7:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3186,"name":"getActionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"1762:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bytes32_$","typeString":"function (bytes4) view returns (bytes32)"}},"id":3189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1762:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1743:39:16"},{"condition":{"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1797:34:16","subExpression":{"arguments":[{"id":3192,"name":"actionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"1810:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3193,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1820:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1824:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1820:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3191,"name":"_canPerform","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"1798:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1798:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3201,"nodeType":"IfStatement","src":"1793:90:16","trueBody":{"id":3200,"nodeType":"Block","src":"1833:50:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3197,"name":"SenderNotAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"1854:16:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1854:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3199,"nodeType":"RevertStatement","src":"1847:25:16"}]}}]},"documentation":{"id":3181,"nodeType":"StructuredDocumentation","src":"1604:79:16","text":"@dev Reverts unless the caller is allowed to call the entry point function."},"id":3203,"implemented":true,"kind":"function","modifiers":[],"name":"_authenticateCaller","nameLocation":"1697:19:16","nodeType":"FunctionDefinition","parameters":{"id":3182,"nodeType":"ParameterList","parameters":[],"src":"1716:2:16"},"returnParameters":{"id":3183,"nodeType":"ParameterList","parameters":[],"src":"1733:0:16"},"scope":3232,"src":"1688:201:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[13],"body":{"id":3220,"nodeType":"Block","src":"2008:353:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":3215,"name":"_actionIdDisambiguator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"2320:22:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3216,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"2344:8:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3213,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2303:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2307:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"2303:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2303:50:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3212,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2293:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2293:61:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3211,"id":3219,"nodeType":"Return","src":"2286:68:16"}]},"documentation":{"id":3204,"nodeType":"StructuredDocumentation","src":"1895:31:16","text":"@inheritdoc IAuthentication"},"functionSelector":"851c1bb3","id":3221,"implemented":true,"kind":"function","modifiers":[],"name":"getActionId","nameLocation":"1940:11:16","nodeType":"FunctionDefinition","overrides":{"id":3208,"nodeType":"OverrideSpecifier","overrides":[],"src":"1981:8:16"},"parameters":{"id":3207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3206,"mutability":"mutable","name":"selector","nameLocation":"1959:8:16","nodeType":"VariableDeclaration","scope":3221,"src":"1952:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3205,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1952:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1951:17:16"},"returnParameters":{"id":3211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3210,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3221,"src":"1999:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3209,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1999:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1998:9:16"},"scope":3232,"src":"1931:430:16","stateMutability":"view","virtual":false,"visibility":"public"},{"documentation":{"id":3222,"nodeType":"StructuredDocumentation","src":"2367:304:16","text":" @dev Derived contracts must implement this function to perform the actual access control logic.\n @param actionId The action identifier associated with an external function\n @param user The account performing the action\n @return success True if the action is permitted"},"id":3231,"implemented":false,"kind":"function","modifiers":[],"name":"_canPerform","nameLocation":"2685:11:16","nodeType":"FunctionDefinition","parameters":{"id":3227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3224,"mutability":"mutable","name":"actionId","nameLocation":"2705:8:16","nodeType":"VariableDeclaration","scope":3231,"src":"2697:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3223,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2697:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3226,"mutability":"mutable","name":"user","nameLocation":"2723:4:16","nodeType":"VariableDeclaration","scope":3231,"src":"2715:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3225,"name":"address","nodeType":"ElementaryTypeName","src":"2715:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2696:32:16"},"returnParameters":{"id":3230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3229,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3231,"src":"2760:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3228,"name":"bool","nodeType":"ElementaryTypeName","src":"2760:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2759:6:16"},"scope":3232,"src":"2676:90:16","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3233,"src":"589:2179:16","usedErrors":[5],"usedEvents":[]}],"src":"46:2723:16"},"id":16},"@balancer-labs/v3-solidity-utils/contracts/helpers/RevertCodec.sol":{"ast":{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/helpers/RevertCodec.sol","exportedSymbols":{"RevertCodec":[3322]},"id":3323,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3234,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:17"},{"abstract":false,"baseContracts":[],"canonicalName":"RevertCodec","contractDependencies":[],"contractKind":"library","documentation":{"id":3235,"nodeType":"StructuredDocumentation","src":"111:120:17","text":"@notice Support `quoteAndRevert`: a v2-style query which always reverts, and returns the result in the return data."},"fullyImplemented":true,"id":3322,"linearizedBaseContracts":[3322],"name":"RevertCodec","nameLocation":"239:11:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3236,"nodeType":"StructuredDocumentation","src":"257:183:17","text":" @notice On success of the primary operation in a `quoteAndRevert`, this error is thrown with the return data.\n @param result The result of the query operation"},"errorSelector":"5ab64fb8","id":3240,"name":"Result","nameLocation":"451:6:17","nodeType":"ErrorDefinition","parameters":{"id":3239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3238,"mutability":"mutable","name":"result","nameLocation":"464:6:17","nodeType":"VariableDeclaration","scope":3240,"src":"458:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3237,"name":"bytes","nodeType":"ElementaryTypeName","src":"458:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"457:14:17"},"src":"445:27:17"},{"documentation":{"id":3241,"nodeType":"StructuredDocumentation","src":"478:79:17","text":"@notice Handle the \"reverted without a reason\" case (i.e., no return data)."},"errorSelector":"a7285689","id":3243,"name":"ErrorSelectorNotFound","nameLocation":"568:21:17","nodeType":"ErrorDefinition","parameters":{"id":3242,"nodeType":"ParameterList","parameters":[],"src":"589:2:17"},"src":"562:30:17"},{"body":{"id":3283,"nodeType":"Block","src":"687:559:17","statements":[{"assignments":[3251],"declarations":[{"constant":false,"id":3251,"mutability":"mutable","name":"errorSelector","nameLocation":"704:13:17","nodeType":"VariableDeclaration","scope":3283,"src":"697:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3250,"name":"bytes4","nodeType":"ElementaryTypeName","src":"697:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":3256,"initialValue":{"arguments":[{"id":3254,"name":"resultRaw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"746:9:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3252,"name":"RevertCodec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"720:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_RevertCodec_$3322_$","typeString":"type(library RevertCodec)"}},"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"732:13:17","memberName":"parseSelector","nodeType":"MemberAccess","referencedDeclaration":3303,"src":"720:25:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (bytes memory) pure returns (bytes4)"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"720:36:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"697:59:17"},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3257,"name":"errorSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"770:13:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3258,"name":"Result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"787:6:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes_memory_ptr_$returns$_t_error_$","typeString":"function (bytes memory) pure returns (error)"}},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"794:8:17","memberName":"selector","nodeType":"MemberAccess","src":"787:15:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"770:32:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3268,"nodeType":"IfStatement","src":"766:185:17","trueBody":{"id":3267,"nodeType":"Block","src":"804:147:17","statements":[{"expression":{"arguments":[{"id":3264,"name":"resultRaw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"930:9:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3261,"name":"RevertCodec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"903:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_RevertCodec_$3322_$","typeString":"type(library RevertCodec)"}},"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"915:14:17","memberName":"bubbleUpRevert","nodeType":"MemberAccess","referencedDeclaration":3321,"src":"903:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:37:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3266,"nodeType":"ExpressionStatement","src":"903:37:17"}]}},{"assignments":[3270],"declarations":[{"constant":false,"id":3270,"mutability":"mutable","name":"resultRawLength","nameLocation":"969:15:17","nodeType":"VariableDeclaration","scope":3283,"src":"961:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3269,"name":"uint256","nodeType":"ElementaryTypeName","src":"961:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3273,"initialValue":{"expression":{"id":3271,"name":"resultRaw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"987:9:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"997:6:17","memberName":"length","nodeType":"MemberAccess","src":"987:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"961:42:17"},{"AST":{"nativeSrc":"1038:154:17","nodeType":"YulBlock","src":"1038:154:17","statements":[{"nativeSrc":"1052:33:17","nodeType":"YulAssignment","src":"1052:33:17","value":{"arguments":[{"name":"resultRaw","nativeSrc":"1069:9:17","nodeType":"YulIdentifier","src":"1069:9:17"},{"kind":"number","nativeSrc":"1080:4:17","nodeType":"YulLiteral","src":"1080:4:17","type":"","value":"0x04"}],"functionName":{"name":"add","nativeSrc":"1065:3:17","nodeType":"YulIdentifier","src":"1065:3:17"},"nativeSrc":"1065:20:17","nodeType":"YulFunctionCall","src":"1065:20:17"},"variableNames":[{"name":"resultRaw","nativeSrc":"1052:9:17","nodeType":"YulIdentifier","src":"1052:9:17"}]},{"expression":{"arguments":[{"name":"resultRaw","nativeSrc":"1126:9:17","nodeType":"YulIdentifier","src":"1126:9:17"},{"arguments":[{"name":"resultRawLength","nativeSrc":"1141:15:17","nodeType":"YulIdentifier","src":"1141:15:17"},{"kind":"number","nativeSrc":"1158:1:17","nodeType":"YulLiteral","src":"1158:1:17","type":"","value":"4"}],"functionName":{"name":"sub","nativeSrc":"1137:3:17","nodeType":"YulIdentifier","src":"1137:3:17"},"nativeSrc":"1137:23:17","nodeType":"YulFunctionCall","src":"1137:23:17"}],"functionName":{"name":"mstore","nativeSrc":"1119:6:17","nodeType":"YulIdentifier","src":"1119:6:17"},"nativeSrc":"1119:42:17","nodeType":"YulFunctionCall","src":"1119:42:17"},"nativeSrc":"1119:42:17","nodeType":"YulExpressionStatement","src":"1119:42:17"}]},"evmVersion":"cancun","externalReferences":[{"declaration":3245,"isOffset":false,"isSlot":false,"src":"1052:9:17","valueSize":1},{"declaration":3245,"isOffset":false,"isSlot":false,"src":"1069:9:17","valueSize":1},{"declaration":3245,"isOffset":false,"isSlot":false,"src":"1126:9:17","valueSize":1},{"declaration":3270,"isOffset":false,"isSlot":false,"src":"1141:15:17","valueSize":1}],"flags":["memory-safe"],"id":3274,"nodeType":"InlineAssembly","src":"1013:179:17"},{"expression":{"arguments":[{"id":3277,"name":"resultRaw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"1220:9:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1232:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3278,"name":"bytes","nodeType":"ElementaryTypeName","src":"1232:5:17","typeDescriptions":{}}}],"id":3280,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1231:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"}],"expression":{"id":3275,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1209:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1213:6:17","memberName":"decode","nodeType":"MemberAccess","src":"1209:10:17","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1209:30:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3249,"id":3282,"nodeType":"Return","src":"1202:37:17"}]},"id":3284,"implemented":true,"kind":"function","modifiers":[],"name":"catchEncodedResult","nameLocation":"607:18:17","nodeType":"FunctionDefinition","parameters":{"id":3246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3245,"mutability":"mutable","name":"resultRaw","nameLocation":"639:9:17","nodeType":"VariableDeclaration","scope":3284,"src":"626:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3244,"name":"bytes","nodeType":"ElementaryTypeName","src":"626:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"625:24:17"},"returnParameters":{"id":3249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3284,"src":"673:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3247,"name":"bytes","nodeType":"ElementaryTypeName","src":"673:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"672:14:17"},"scope":3322,"src":"598:648:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3302,"nodeType":"Block","src":"1429:258:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3292,"name":"callResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"1443:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1454:6:17","memberName":"length","nodeType":"MemberAccess","src":"1443:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"34","id":3294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1463:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1443:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3300,"nodeType":"IfStatement","src":"1439:82:17","trueBody":{"id":3299,"nodeType":"Block","src":"1466:55:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3296,"name":"ErrorSelectorNotFound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"1487:21:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1487:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3298,"nodeType":"RevertStatement","src":"1480:30:17"}]}},{"AST":{"nativeSrc":"1555:126:17","nodeType":"YulBlock","src":"1555:126:17","statements":[{"nativeSrc":"1569:45:17","nodeType":"YulAssignment","src":"1569:45:17","value":{"arguments":[{"arguments":[{"name":"callResult","nativeSrc":"1596:10:17","nodeType":"YulIdentifier","src":"1596:10:17"},{"kind":"number","nativeSrc":"1608:4:17","nodeType":"YulLiteral","src":"1608:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1592:3:17","nodeType":"YulIdentifier","src":"1592:3:17"},"nativeSrc":"1592:21:17","nodeType":"YulFunctionCall","src":"1592:21:17"}],"functionName":{"name":"mload","nativeSrc":"1586:5:17","nodeType":"YulIdentifier","src":"1586:5:17"},"nativeSrc":"1586:28:17","nodeType":"YulFunctionCall","src":"1586:28:17"},"variableNames":[{"name":"errorSelector","nativeSrc":"1569:13:17","nodeType":"YulIdentifier","src":"1569:13:17"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3287,"isOffset":false,"isSlot":false,"src":"1596:10:17","valueSize":1},{"declaration":3290,"isOffset":false,"isSlot":false,"src":"1569:13:17","valueSize":1}],"flags":["memory-safe"],"id":3301,"nodeType":"InlineAssembly","src":"1530:151:17"}]},"documentation":{"id":3285,"nodeType":"StructuredDocumentation","src":"1252:79:17","text":"@dev Returns the first 4 bytes in an array, reverting if the length is < 4."},"id":3303,"implemented":true,"kind":"function","modifiers":[],"name":"parseSelector","nameLocation":"1345:13:17","nodeType":"FunctionDefinition","parameters":{"id":3288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3287,"mutability":"mutable","name":"callResult","nameLocation":"1372:10:17","nodeType":"VariableDeclaration","scope":3303,"src":"1359:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3286,"name":"bytes","nodeType":"ElementaryTypeName","src":"1359:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1358:25:17"},"returnParameters":{"id":3291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3290,"mutability":"mutable","name":"errorSelector","nameLocation":"1414:13:17","nodeType":"VariableDeclaration","scope":3303,"src":"1407:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3289,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1407:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1406:22:17"},"scope":3322,"src":"1336:351:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3320,"nodeType":"Block","src":"1804:441:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3309,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"1881:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1892:6:17","memberName":"length","nodeType":"MemberAccess","src":"1881:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1901:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1881:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3318,"nodeType":"Block","src":"2184:55:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3315,"name":"ErrorSelectorNotFound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"2205:21:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3317,"nodeType":"RevertStatement","src":"2198:30:17"}]},"id":3319,"nodeType":"IfStatement","src":"1877:362:17","trueBody":{"id":3314,"nodeType":"Block","src":"1904:274:17","statements":[{"AST":{"nativeSrc":"2033:135:17","nodeType":"YulBlock","src":"2033:135:17","statements":[{"nativeSrc":"2051:41:17","nodeType":"YulVariableDeclaration","src":"2051:41:17","value":{"arguments":[{"name":"returnData","nativeSrc":"2081:10:17","nodeType":"YulIdentifier","src":"2081:10:17"}],"functionName":{"name":"mload","nativeSrc":"2075:5:17","nodeType":"YulIdentifier","src":"2075:5:17"},"nativeSrc":"2075:17:17","nodeType":"YulFunctionCall","src":"2075:17:17"},"variables":[{"name":"return_data_size","nativeSrc":"2055:16:17","nodeType":"YulTypedName","src":"2055:16:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2120:2:17","nodeType":"YulLiteral","src":"2120:2:17","type":"","value":"32"},{"name":"returnData","nativeSrc":"2124:10:17","nodeType":"YulIdentifier","src":"2124:10:17"}],"functionName":{"name":"add","nativeSrc":"2116:3:17","nodeType":"YulIdentifier","src":"2116:3:17"},"nativeSrc":"2116:19:17","nodeType":"YulFunctionCall","src":"2116:19:17"},{"name":"return_data_size","nativeSrc":"2137:16:17","nodeType":"YulIdentifier","src":"2137:16:17"}],"functionName":{"name":"revert","nativeSrc":"2109:6:17","nodeType":"YulIdentifier","src":"2109:6:17"},"nativeSrc":"2109:45:17","nodeType":"YulFunctionCall","src":"2109:45:17"},"nativeSrc":"2109:45:17","nodeType":"YulExpressionStatement","src":"2109:45:17"}]},"evmVersion":"cancun","externalReferences":[{"declaration":3306,"isOffset":false,"isSlot":false,"src":"2081:10:17","valueSize":1},{"declaration":3306,"isOffset":false,"isSlot":false,"src":"2124:10:17","valueSize":1}],"flags":["memory-safe"],"id":3313,"nodeType":"InlineAssembly","src":"2008:160:17"}]}}]},"documentation":{"id":3304,"nodeType":"StructuredDocumentation","src":"1693:43:17","text":"@dev Taken from Openzeppelin's Address."},"id":3321,"implemented":true,"kind":"function","modifiers":[],"name":"bubbleUpRevert","nameLocation":"1750:14:17","nodeType":"FunctionDefinition","parameters":{"id":3307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3306,"mutability":"mutable","name":"returnData","nameLocation":"1778:10:17","nodeType":"VariableDeclaration","scope":3321,"src":"1765:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3305,"name":"bytes","nodeType":"ElementaryTypeName","src":"1765:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1764:25:17"},"returnParameters":{"id":3308,"nodeType":"ParameterList","parameters":[],"src":"1804:0:17"},"scope":3322,"src":"1741:504:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3323,"src":"231:2016:17","usedErrors":[3240,3243],"usedEvents":[]}],"src":"46:2202:17"},"id":17},"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol":{"ast":{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol","exportedSymbols":{"FixedPoint":[3621],"LogExpMath":[4977]},"id":3622,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3324,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:18"},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol","file":"./LogExpMath.sol","id":3326,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3622,"sourceUnit":4978,"src":"72:46:18","symbolAliases":[{"foreign":{"id":3325,"name":"LogExpMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"81:10:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"FixedPoint","contractDependencies":[],"contractKind":"library","documentation":{"id":3327,"nodeType":"StructuredDocumentation","src":"120:119:18","text":"@notice Support 18-decimal fixed point arithmetic. All Vault calculations use this for high and uniform precision."},"fullyImplemented":true,"id":3621,"linearizedBaseContracts":[3621],"name":"FixedPoint","nameLocation":"247:10:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3328,"nodeType":"StructuredDocumentation","src":"264:39:18","text":"@notice Attempted division by zero."},"errorSelector":"0a0c22c7","id":3330,"name":"ZeroDivision","nameLocation":"314:12:18","nodeType":"ErrorDefinition","parameters":{"id":3329,"nodeType":"ParameterList","parameters":[],"src":"326:2:18"},"src":"308:21:18"},{"constant":true,"id":3333,"mutability":"constant","name":"ONE","nameLocation":"459:3:18","nodeType":"VariableDeclaration","scope":3621,"src":"433:36:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3331,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653138","id":3332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"465:4:18","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"visibility":"internal"},{"constant":true,"id":3338,"mutability":"constant","name":"TWO","nameLocation":"522:3:18","nodeType":"VariableDeclaration","scope":3621,"src":"496:39:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3334,"name":"uint256","nodeType":"ElementaryTypeName","src":"496:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"528:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3336,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"532:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"528:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":true,"id":3343,"mutability":"constant","name":"FOUR","nameLocation":"567:4:18","nodeType":"VariableDeclaration","scope":3621,"src":"541:40:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3339,"name":"uint256","nodeType":"ElementaryTypeName","src":"541:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3342,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"34","id":3340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"574:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3341,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"578:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"574:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":true,"id":3346,"mutability":"constant","name":"MAX_POW_RELATIVE_ERROR","nameLocation":"613:22:18","nodeType":"VariableDeclaration","scope":3621,"src":"587:56:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3344,"name":"uint256","nodeType":"ElementaryTypeName","src":"587:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130303030","id":3345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"638:5:18","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"visibility":"internal"},{"body":{"id":3365,"nodeType":"Block","src":"733:148:18","statements":[{"assignments":[3356],"declarations":[{"constant":false,"id":3356,"mutability":"mutable","name":"product","nameLocation":"828:7:18","nodeType":"VariableDeclaration","scope":3365,"src":"820:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3355,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3360,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3357,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3348,"src":"838:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3358,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"842:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"838:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"820:23:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3361,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"861:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3362,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"871:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"861:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3354,"id":3364,"nodeType":"Return","src":"854:20:18"}]},"id":3366,"implemented":true,"kind":"function","modifiers":[],"name":"mulDown","nameLocation":"671:7:18","nodeType":"FunctionDefinition","parameters":{"id":3351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3348,"mutability":"mutable","name":"a","nameLocation":"687:1:18","nodeType":"VariableDeclaration","scope":3366,"src":"679:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3347,"name":"uint256","nodeType":"ElementaryTypeName","src":"679:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3350,"mutability":"mutable","name":"b","nameLocation":"698:1:18","nodeType":"VariableDeclaration","scope":3366,"src":"690:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3349,"name":"uint256","nodeType":"ElementaryTypeName","src":"690:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"678:22:18"},"returnParameters":{"id":3354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3366,"src":"724:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3352,"name":"uint256","nodeType":"ElementaryTypeName","src":"724:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"723:9:18"},"scope":3621,"src":"662:219:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3382,"nodeType":"Block","src":"963:351:18","statements":[{"assignments":[3376],"declarations":[{"constant":false,"id":3376,"mutability":"mutable","name":"product","nameLocation":"1058:7:18","nodeType":"VariableDeclaration","scope":3382,"src":"1050:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3375,"name":"uint256","nodeType":"ElementaryTypeName","src":"1050:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3380,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3377,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"1068:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3378,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"1072:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1068:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1050:23:18"},{"AST":{"nativeSrc":"1211:97:18","nodeType":"YulBlock","src":"1211:97:18","statements":[{"nativeSrc":"1225:73:18","nodeType":"YulAssignment","src":"1225:73:18","value":{"arguments":[{"arguments":[{"arguments":[{"name":"product","nativeSrc":"1253:7:18","nodeType":"YulIdentifier","src":"1253:7:18"}],"functionName":{"name":"iszero","nativeSrc":"1246:6:18","nodeType":"YulIdentifier","src":"1246:6:18"},"nativeSrc":"1246:15:18","nodeType":"YulFunctionCall","src":"1246:15:18"}],"functionName":{"name":"iszero","nativeSrc":"1239:6:18","nodeType":"YulIdentifier","src":"1239:6:18"},"nativeSrc":"1239:23:18","nodeType":"YulFunctionCall","src":"1239:23:18"},{"arguments":[{"arguments":[{"arguments":[{"name":"product","nativeSrc":"1276:7:18","nodeType":"YulIdentifier","src":"1276:7:18"},{"kind":"number","nativeSrc":"1285:1:18","nodeType":"YulLiteral","src":"1285:1:18","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1272:3:18","nodeType":"YulIdentifier","src":"1272:3:18"},"nativeSrc":"1272:15:18","nodeType":"YulFunctionCall","src":"1272:15:18"},{"name":"ONE","nativeSrc":"1289:3:18","nodeType":"YulIdentifier","src":"1289:3:18"}],"functionName":{"name":"div","nativeSrc":"1268:3:18","nodeType":"YulIdentifier","src":"1268:3:18"},"nativeSrc":"1268:25:18","nodeType":"YulFunctionCall","src":"1268:25:18"},{"kind":"number","nativeSrc":"1295:1:18","nodeType":"YulLiteral","src":"1295:1:18","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"1264:3:18","nodeType":"YulIdentifier","src":"1264:3:18"},"nativeSrc":"1264:33:18","nodeType":"YulFunctionCall","src":"1264:33:18"}],"functionName":{"name":"mul","nativeSrc":"1235:3:18","nodeType":"YulIdentifier","src":"1235:3:18"},"nativeSrc":"1235:63:18","nodeType":"YulFunctionCall","src":"1235:63:18"},"variableNames":[{"name":"result","nativeSrc":"1225:6:18","nodeType":"YulIdentifier","src":"1225:6:18"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3333,"isOffset":false,"isSlot":false,"src":"1289:3:18","valueSize":1},{"declaration":3376,"isOffset":false,"isSlot":false,"src":"1253:7:18","valueSize":1},{"declaration":3376,"isOffset":false,"isSlot":false,"src":"1276:7:18","valueSize":1},{"declaration":3373,"isOffset":false,"isSlot":false,"src":"1225:6:18","valueSize":1}],"flags":["memory-safe"],"id":3381,"nodeType":"InlineAssembly","src":"1186:122:18"}]},"id":3383,"implemented":true,"kind":"function","modifiers":[],"name":"mulUp","nameLocation":"896:5:18","nodeType":"FunctionDefinition","parameters":{"id":3371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3368,"mutability":"mutable","name":"a","nameLocation":"910:1:18","nodeType":"VariableDeclaration","scope":3383,"src":"902:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3367,"name":"uint256","nodeType":"ElementaryTypeName","src":"902:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3370,"mutability":"mutable","name":"b","nameLocation":"921:1:18","nodeType":"VariableDeclaration","scope":3383,"src":"913:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3369,"name":"uint256","nodeType":"ElementaryTypeName","src":"913:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"901:22:18"},"returnParameters":{"id":3374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3373,"mutability":"mutable","name":"result","nameLocation":"955:6:18","nodeType":"VariableDeclaration","scope":3383,"src":"947:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3372,"name":"uint256","nodeType":"ElementaryTypeName","src":"947:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"946:16:18"},"scope":3621,"src":"887:427:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3402,"nodeType":"Block","src":"1391:254:18","statements":[{"assignments":[3393],"declarations":[{"constant":false,"id":3393,"mutability":"mutable","name":"aInflated","nameLocation":"1499:9:18","nodeType":"VariableDeclaration","scope":3402,"src":"1491:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3392,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3397,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3394,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"1511:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3395,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"1515:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1511:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1491:27:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3398,"name":"aInflated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"1625:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3399,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3387,"src":"1637:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1625:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3391,"id":3401,"nodeType":"Return","src":"1618:20:18"}]},"id":3403,"implemented":true,"kind":"function","modifiers":[],"name":"divDown","nameLocation":"1329:7:18","nodeType":"FunctionDefinition","parameters":{"id":3388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3385,"mutability":"mutable","name":"a","nameLocation":"1345:1:18","nodeType":"VariableDeclaration","scope":3403,"src":"1337:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3384,"name":"uint256","nodeType":"ElementaryTypeName","src":"1337:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3387,"mutability":"mutable","name":"b","nameLocation":"1356:1:18","nodeType":"VariableDeclaration","scope":3403,"src":"1348:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3386,"name":"uint256","nodeType":"ElementaryTypeName","src":"1348:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1336:22:18"},"returnParameters":{"id":3391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3390,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3403,"src":"1382:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3389,"name":"uint256","nodeType":"ElementaryTypeName","src":"1382:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1381:9:18"},"scope":3621,"src":"1320:325:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3418,"nodeType":"Block","src":"1727:43:18","statements":[{"expression":{"arguments":[{"id":3413,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"1753:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3414,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"1756:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3415,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"1761:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3412,"name":"mulDivUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"1744:8:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1744:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3411,"id":3417,"nodeType":"Return","src":"1737:26:18"}]},"id":3419,"implemented":true,"kind":"function","modifiers":[],"name":"divUp","nameLocation":"1660:5:18","nodeType":"FunctionDefinition","parameters":{"id":3408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3405,"mutability":"mutable","name":"a","nameLocation":"1674:1:18","nodeType":"VariableDeclaration","scope":3419,"src":"1666:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3404,"name":"uint256","nodeType":"ElementaryTypeName","src":"1666:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3407,"mutability":"mutable","name":"b","nameLocation":"1685:1:18","nodeType":"VariableDeclaration","scope":3419,"src":"1677:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3406,"name":"uint256","nodeType":"ElementaryTypeName","src":"1677:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1665:22:18"},"returnParameters":{"id":3411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3410,"mutability":"mutable","name":"result","nameLocation":"1719:6:18","nodeType":"VariableDeclaration","scope":3419,"src":"1711:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3409,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1710:16:18"},"scope":3621,"src":"1651:119:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3446,"nodeType":"Block","src":"1912:774:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3431,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"2004:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2009:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2004:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3438,"nodeType":"IfStatement","src":"2000:58:18","trueBody":{"id":3437,"nodeType":"Block","src":"2012:46:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3434,"name":"ZeroDivision","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"2033:12:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2033:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3436,"nodeType":"RevertStatement","src":"2026:21:18"}]}},{"assignments":[3440],"declarations":[{"constant":false,"id":3440,"mutability":"mutable","name":"product","nameLocation":"2143:7:18","nodeType":"VariableDeclaration","scope":3446,"src":"2135:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3439,"name":"uint256","nodeType":"ElementaryTypeName","src":"2135:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3444,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3441,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"2153:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3442,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"2157:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2135:23:18"},{"AST":{"nativeSrc":"2585:95:18","nodeType":"YulBlock","src":"2585:95:18","statements":[{"nativeSrc":"2599:71:18","nodeType":"YulAssignment","src":"2599:71:18","value":{"arguments":[{"arguments":[{"arguments":[{"name":"product","nativeSrc":"2627:7:18","nodeType":"YulIdentifier","src":"2627:7:18"}],"functionName":{"name":"iszero","nativeSrc":"2620:6:18","nodeType":"YulIdentifier","src":"2620:6:18"},"nativeSrc":"2620:15:18","nodeType":"YulFunctionCall","src":"2620:15:18"}],"functionName":{"name":"iszero","nativeSrc":"2613:6:18","nodeType":"YulIdentifier","src":"2613:6:18"},"nativeSrc":"2613:23:18","nodeType":"YulFunctionCall","src":"2613:23:18"},{"arguments":[{"arguments":[{"arguments":[{"name":"product","nativeSrc":"2650:7:18","nodeType":"YulIdentifier","src":"2650:7:18"},{"kind":"number","nativeSrc":"2659:1:18","nodeType":"YulLiteral","src":"2659:1:18","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"2646:3:18","nodeType":"YulIdentifier","src":"2646:3:18"},"nativeSrc":"2646:15:18","nodeType":"YulFunctionCall","src":"2646:15:18"},{"name":"c","nativeSrc":"2663:1:18","nodeType":"YulIdentifier","src":"2663:1:18"}],"functionName":{"name":"div","nativeSrc":"2642:3:18","nodeType":"YulIdentifier","src":"2642:3:18"},"nativeSrc":"2642:23:18","nodeType":"YulFunctionCall","src":"2642:23:18"},{"kind":"number","nativeSrc":"2667:1:18","nodeType":"YulLiteral","src":"2667:1:18","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2638:3:18","nodeType":"YulIdentifier","src":"2638:3:18"},"nativeSrc":"2638:31:18","nodeType":"YulFunctionCall","src":"2638:31:18"}],"functionName":{"name":"mul","nativeSrc":"2609:3:18","nodeType":"YulIdentifier","src":"2609:3:18"},"nativeSrc":"2609:61:18","nodeType":"YulFunctionCall","src":"2609:61:18"},"variableNames":[{"name":"result","nativeSrc":"2599:6:18","nodeType":"YulIdentifier","src":"2599:6:18"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3426,"isOffset":false,"isSlot":false,"src":"2663:1:18","valueSize":1},{"declaration":3440,"isOffset":false,"isSlot":false,"src":"2627:7:18","valueSize":1},{"declaration":3440,"isOffset":false,"isSlot":false,"src":"2650:7:18","valueSize":1},{"declaration":3429,"isOffset":false,"isSlot":false,"src":"2599:6:18","valueSize":1}],"flags":["memory-safe"],"id":3445,"nodeType":"InlineAssembly","src":"2560:120:18"}]},"documentation":{"id":3420,"nodeType":"StructuredDocumentation","src":"1776:41:18","text":"@dev Return (a * b) / c, rounding up."},"id":3447,"implemented":true,"kind":"function","modifiers":[],"name":"mulDivUp","nameLocation":"1831:8:18","nodeType":"FunctionDefinition","parameters":{"id":3427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3422,"mutability":"mutable","name":"a","nameLocation":"1848:1:18","nodeType":"VariableDeclaration","scope":3447,"src":"1840:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3421,"name":"uint256","nodeType":"ElementaryTypeName","src":"1840:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3424,"mutability":"mutable","name":"b","nameLocation":"1859:1:18","nodeType":"VariableDeclaration","scope":3447,"src":"1851:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3423,"name":"uint256","nodeType":"ElementaryTypeName","src":"1851:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3426,"mutability":"mutable","name":"c","nameLocation":"1870:1:18","nodeType":"VariableDeclaration","scope":3447,"src":"1862:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3425,"name":"uint256","nodeType":"ElementaryTypeName","src":"1862:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1839:33:18"},"returnParameters":{"id":3430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3429,"mutability":"mutable","name":"result","nameLocation":"1904:6:18","nodeType":"VariableDeclaration","scope":3447,"src":"1896:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3428,"name":"uint256","nodeType":"ElementaryTypeName","src":"1896:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1895:16:18"},"scope":3621,"src":"1822:864:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3466,"nodeType":"Block","src":"3159:345:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3457,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3452,"src":"3251:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3256:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3251:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3464,"nodeType":"IfStatement","src":"3247:58:18","trueBody":{"id":3463,"nodeType":"Block","src":"3259:46:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3460,"name":"ZeroDivision","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"3280:12:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3280:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3462,"nodeType":"RevertStatement","src":"3273:21:18"}]}},{"AST":{"nativeSrc":"3415:83:18","nodeType":"YulBlock","src":"3415:83:18","statements":[{"nativeSrc":"3429:59:18","nodeType":"YulAssignment","src":"3429:59:18","value":{"arguments":[{"arguments":[{"arguments":[{"name":"a","nativeSrc":"3457:1:18","nodeType":"YulIdentifier","src":"3457:1:18"}],"functionName":{"name":"iszero","nativeSrc":"3450:6:18","nodeType":"YulIdentifier","src":"3450:6:18"},"nativeSrc":"3450:9:18","nodeType":"YulFunctionCall","src":"3450:9:18"}],"functionName":{"name":"iszero","nativeSrc":"3443:6:18","nodeType":"YulIdentifier","src":"3443:6:18"},"nativeSrc":"3443:17:18","nodeType":"YulFunctionCall","src":"3443:17:18"},{"arguments":[{"kind":"number","nativeSrc":"3466:1:18","nodeType":"YulLiteral","src":"3466:1:18","type":"","value":"1"},{"arguments":[{"arguments":[{"name":"a","nativeSrc":"3477:1:18","nodeType":"YulIdentifier","src":"3477:1:18"},{"kind":"number","nativeSrc":"3480:1:18","nodeType":"YulLiteral","src":"3480:1:18","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"3473:3:18","nodeType":"YulIdentifier","src":"3473:3:18"},"nativeSrc":"3473:9:18","nodeType":"YulFunctionCall","src":"3473:9:18"},{"name":"b","nativeSrc":"3484:1:18","nodeType":"YulIdentifier","src":"3484:1:18"}],"functionName":{"name":"div","nativeSrc":"3469:3:18","nodeType":"YulIdentifier","src":"3469:3:18"},"nativeSrc":"3469:17:18","nodeType":"YulFunctionCall","src":"3469:17:18"}],"functionName":{"name":"add","nativeSrc":"3462:3:18","nodeType":"YulIdentifier","src":"3462:3:18"},"nativeSrc":"3462:25:18","nodeType":"YulFunctionCall","src":"3462:25:18"}],"functionName":{"name":"mul","nativeSrc":"3439:3:18","nodeType":"YulIdentifier","src":"3439:3:18"},"nativeSrc":"3439:49:18","nodeType":"YulFunctionCall","src":"3439:49:18"},"variableNames":[{"name":"result","nativeSrc":"3429:6:18","nodeType":"YulIdentifier","src":"3429:6:18"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3450,"isOffset":false,"isSlot":false,"src":"3457:1:18","valueSize":1},{"declaration":3450,"isOffset":false,"isSlot":false,"src":"3477:1:18","valueSize":1},{"declaration":3452,"isOffset":false,"isSlot":false,"src":"3484:1:18","valueSize":1},{"declaration":3455,"isOffset":false,"isSlot":false,"src":"3429:6:18","valueSize":1}],"flags":["memory-safe"],"id":3465,"nodeType":"InlineAssembly","src":"3390:108:18"}]},"documentation":{"id":3448,"nodeType":"StructuredDocumentation","src":"2692:383:18","text":" @dev Version of divUp when the input is raw (i.e., already \"inflated\"). For instance,\n invariant * invariant (36 decimals) vs. invariant.mulDown(invariant) (18 decimal FP).\n This can occur in calculations with many successive multiplications and divisions, and\n we want to minimize the number of operations by avoiding unnecessary scaling by ONE."},"id":3467,"implemented":true,"kind":"function","modifiers":[],"name":"divUpRaw","nameLocation":"3089:8:18","nodeType":"FunctionDefinition","parameters":{"id":3453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3450,"mutability":"mutable","name":"a","nameLocation":"3106:1:18","nodeType":"VariableDeclaration","scope":3467,"src":"3098:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3449,"name":"uint256","nodeType":"ElementaryTypeName","src":"3098:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3452,"mutability":"mutable","name":"b","nameLocation":"3117:1:18","nodeType":"VariableDeclaration","scope":3467,"src":"3109:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3451,"name":"uint256","nodeType":"ElementaryTypeName","src":"3109:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3097:22:18"},"returnParameters":{"id":3456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3455,"mutability":"mutable","name":"result","nameLocation":"3151:6:18","nodeType":"VariableDeclaration","scope":3467,"src":"3143:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3454,"name":"uint256","nodeType":"ElementaryTypeName","src":"3143:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3142:16:18"},"scope":3621,"src":"3080:424:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3542,"nodeType":"Block","src":"3807:723:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3477,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"3975:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3478,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"3980:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3975:8:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3483,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"4028:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3484,"name":"TWO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"4033:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4028:8:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3492,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"4093:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3493,"name":"FOUR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3343,"src":"4098:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4093:9:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3538,"nodeType":"Block","src":"4209:315:18","statements":[{"assignments":[3509],"declarations":[{"constant":false,"id":3509,"mutability":"mutable","name":"raw","nameLocation":"4231:3:18","nodeType":"VariableDeclaration","scope":3538,"src":"4223:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3508,"name":"uint256","nodeType":"ElementaryTypeName","src":"4223:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3515,"initialValue":{"arguments":[{"id":3512,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4252:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3513,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"4255:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3510,"name":"LogExpMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"4237:10:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LogExpMath_$4977_$","typeString":"type(library LogExpMath)"}},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4248:3:18","memberName":"pow","nodeType":"MemberAccess","referencedDeclaration":3880,"src":"4237:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4237:20:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4223:34:18"},{"assignments":[3517],"declarations":[{"constant":false,"id":3517,"mutability":"mutable","name":"maxError","nameLocation":"4279:8:18","nodeType":"VariableDeclaration","scope":3538,"src":"4271:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3516,"name":"uint256","nodeType":"ElementaryTypeName","src":"4271:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3524,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3519,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"4296:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3520,"name":"MAX_POW_RELATIVE_ERROR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3346,"src":"4301:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3518,"name":"mulUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3383,"src":"4290:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4290:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4327:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4290:38:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4271:57:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3525,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"4347:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3526,"name":"maxError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3517,"src":"4353:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4347:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3536,"nodeType":"Block","src":"4410:104:18","statements":[{"id":3535,"nodeType":"UncheckedBlock","src":"4428:72:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3531,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"4467:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3532,"name":"maxError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3517,"src":"4473:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3476,"id":3534,"nodeType":"Return","src":"4460:21:18"}]}]},"id":3537,"nodeType":"IfStatement","src":"4343:171:18","trueBody":{"id":3530,"nodeType":"Block","src":"4363:41:18","statements":[{"expression":{"hexValue":"30","id":3528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4388:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3476,"id":3529,"nodeType":"Return","src":"4381:8:18"}]}}]},"id":3539,"nodeType":"IfStatement","src":"4089:435:18","trueBody":{"id":3507,"nodeType":"Block","src":"4104:99:18","statements":[{"assignments":[3496],"declarations":[{"constant":false,"id":3496,"mutability":"mutable","name":"square","nameLocation":"4126:6:18","nodeType":"VariableDeclaration","scope":3507,"src":"4118:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3495,"name":"uint256","nodeType":"ElementaryTypeName","src":"4118:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3501,"initialValue":{"arguments":[{"id":3498,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4143:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3499,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4146:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3497,"name":"mulDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"4135:7:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4135:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4118:30:18"},{"expression":{"arguments":[{"id":3503,"name":"square","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"4177:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3504,"name":"square","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"4185:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3502,"name":"mulDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"4169:7:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4169:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3476,"id":3506,"nodeType":"Return","src":"4162:30:18"}]}},"id":3540,"nodeType":"IfStatement","src":"4024:500:18","trueBody":{"id":3491,"nodeType":"Block","src":"4038:45:18","statements":[{"expression":{"arguments":[{"id":3487,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4067:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3488,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4070:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3486,"name":"mulDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"4059:7:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3476,"id":3490,"nodeType":"Return","src":"4052:20:18"}]}},"id":3541,"nodeType":"IfStatement","src":"3971:553:18","trueBody":{"id":3482,"nodeType":"Block","src":"3985:33:18","statements":[{"expression":{"id":3480,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"4006:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3476,"id":3481,"nodeType":"Return","src":"3999:8:18"}]}}]},"documentation":{"id":3468,"nodeType":"StructuredDocumentation","src":"3510:221:18","text":" @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\n the true value (that is, the error function expected - actual is always positive)."},"id":3543,"implemented":true,"kind":"function","modifiers":[],"name":"powDown","nameLocation":"3745:7:18","nodeType":"FunctionDefinition","parameters":{"id":3473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3470,"mutability":"mutable","name":"x","nameLocation":"3761:1:18","nodeType":"VariableDeclaration","scope":3543,"src":"3753:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3469,"name":"uint256","nodeType":"ElementaryTypeName","src":"3753:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3472,"mutability":"mutable","name":"y","nameLocation":"3772:1:18","nodeType":"VariableDeclaration","scope":3543,"src":"3764:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3471,"name":"uint256","nodeType":"ElementaryTypeName","src":"3764:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3752:22:18"},"returnParameters":{"id":3476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3475,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3543,"src":"3798:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3474,"name":"uint256","nodeType":"ElementaryTypeName","src":"3798:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3797:9:18"},"scope":3621,"src":"3736:794:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3609,"nodeType":"Block","src":"4829:568:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3553,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"4997:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3554,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"5002:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4997:8:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3559,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"5050:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3560,"name":"TWO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"5055:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5050:8:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3568,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"5113:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3569,"name":"FOUR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3343,"src":"5118:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5113:9:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3605,"nodeType":"Block","src":"5225:166:18","statements":[{"assignments":[3585],"declarations":[{"constant":false,"id":3585,"mutability":"mutable","name":"raw","nameLocation":"5247:3:18","nodeType":"VariableDeclaration","scope":3605,"src":"5239:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3584,"name":"uint256","nodeType":"ElementaryTypeName","src":"5239:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3591,"initialValue":{"arguments":[{"id":3588,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"5268:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3589,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"5271:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3586,"name":"LogExpMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"5253:10:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LogExpMath_$4977_$","typeString":"type(library LogExpMath)"}},"id":3587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5264:3:18","memberName":"pow","nodeType":"MemberAccess","referencedDeclaration":3880,"src":"5253:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5253:20:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5239:34:18"},{"assignments":[3593],"declarations":[{"constant":false,"id":3593,"mutability":"mutable","name":"maxError","nameLocation":"5295:8:18","nodeType":"VariableDeclaration","scope":3605,"src":"5287:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3592,"name":"uint256","nodeType":"ElementaryTypeName","src":"5287:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3600,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3595,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"5312:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3596,"name":"MAX_POW_RELATIVE_ERROR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3346,"src":"5317:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3594,"name":"mulUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3383,"src":"5306:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5306:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5343:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5306:38:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5287:57:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3601,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"5366:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3602,"name":"maxError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"5372:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5366:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3552,"id":3604,"nodeType":"Return","src":"5359:21:18"}]},"id":3606,"nodeType":"IfStatement","src":"5109:282:18","trueBody":{"id":3583,"nodeType":"Block","src":"5124:95:18","statements":[{"assignments":[3572],"declarations":[{"constant":false,"id":3572,"mutability":"mutable","name":"square","nameLocation":"5146:6:18","nodeType":"VariableDeclaration","scope":3583,"src":"5138:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3571,"name":"uint256","nodeType":"ElementaryTypeName","src":"5138:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3577,"initialValue":{"arguments":[{"id":3574,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"5161:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3575,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"5164:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3573,"name":"mulUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3383,"src":"5155:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5155:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5138:28:18"},{"expression":{"arguments":[{"id":3579,"name":"square","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3572,"src":"5193:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3580,"name":"square","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3572,"src":"5201:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3578,"name":"mulUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3383,"src":"5187:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5187:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3552,"id":3582,"nodeType":"Return","src":"5180:28:18"}]}},"id":3607,"nodeType":"IfStatement","src":"5046:345:18","trueBody":{"id":3567,"nodeType":"Block","src":"5060:43:18","statements":[{"expression":{"arguments":[{"id":3563,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"5087:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3564,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"5090:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3562,"name":"mulUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3383,"src":"5081:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5081:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3552,"id":3566,"nodeType":"Return","src":"5074:18:18"}]}},"id":3608,"nodeType":"IfStatement","src":"4993:398:18","trueBody":{"id":3558,"nodeType":"Block","src":"5007:33:18","statements":[{"expression":{"id":3556,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"5028:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3552,"id":3557,"nodeType":"Return","src":"5021:8:18"}]}}]},"documentation":{"id":3544,"nodeType":"StructuredDocumentation","src":"4536:219:18","text":" @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\n the true value (that is, the error function expected - actual is always negative)."},"id":3610,"implemented":true,"kind":"function","modifiers":[],"name":"powUp","nameLocation":"4769:5:18","nodeType":"FunctionDefinition","parameters":{"id":3549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3546,"mutability":"mutable","name":"x","nameLocation":"4783:1:18","nodeType":"VariableDeclaration","scope":3610,"src":"4775:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3545,"name":"uint256","nodeType":"ElementaryTypeName","src":"4775:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3548,"mutability":"mutable","name":"y","nameLocation":"4794:1:18","nodeType":"VariableDeclaration","scope":3610,"src":"4786:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3547,"name":"uint256","nodeType":"ElementaryTypeName","src":"4786:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4774:22:18"},"returnParameters":{"id":3552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3551,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3610,"src":"4820:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3550,"name":"uint256","nodeType":"ElementaryTypeName","src":"4820:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4819:9:18"},"scope":3621,"src":"4760:637:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3619,"nodeType":"Block","src":"5750:175:18","statements":[{"AST":{"nativeSrc":"5857:62:18","nodeType":"YulBlock","src":"5857:62:18","statements":[{"nativeSrc":"5871:38:18","nodeType":"YulAssignment","src":"5871:38:18","value":{"arguments":[{"arguments":[{"name":"x","nativeSrc":"5888:1:18","nodeType":"YulIdentifier","src":"5888:1:18"},{"name":"ONE","nativeSrc":"5891:3:18","nodeType":"YulIdentifier","src":"5891:3:18"}],"functionName":{"name":"lt","nativeSrc":"5885:2:18","nodeType":"YulIdentifier","src":"5885:2:18"},"nativeSrc":"5885:10:18","nodeType":"YulFunctionCall","src":"5885:10:18"},{"arguments":[{"name":"ONE","nativeSrc":"5901:3:18","nodeType":"YulIdentifier","src":"5901:3:18"},{"name":"x","nativeSrc":"5906:1:18","nodeType":"YulIdentifier","src":"5906:1:18"}],"functionName":{"name":"sub","nativeSrc":"5897:3:18","nodeType":"YulIdentifier","src":"5897:3:18"},"nativeSrc":"5897:11:18","nodeType":"YulFunctionCall","src":"5897:11:18"}],"functionName":{"name":"mul","nativeSrc":"5881:3:18","nodeType":"YulIdentifier","src":"5881:3:18"},"nativeSrc":"5881:28:18","nodeType":"YulFunctionCall","src":"5881:28:18"},"variableNames":[{"name":"result","nativeSrc":"5871:6:18","nodeType":"YulIdentifier","src":"5871:6:18"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3333,"isOffset":false,"isSlot":false,"src":"5891:3:18","valueSize":1},{"declaration":3333,"isOffset":false,"isSlot":false,"src":"5901:3:18","valueSize":1},{"declaration":3616,"isOffset":false,"isSlot":false,"src":"5871:6:18","valueSize":1},{"declaration":3613,"isOffset":false,"isSlot":false,"src":"5888:1:18","valueSize":1},{"declaration":3613,"isOffset":false,"isSlot":false,"src":"5906:1:18","valueSize":1}],"flags":["memory-safe"],"id":3618,"nodeType":"InlineAssembly","src":"5832:87:18"}]},"documentation":{"id":3611,"nodeType":"StructuredDocumentation","src":"5403:272:18","text":" @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\n Useful when computing the complement for values with some level of relative error, as it strips this error and\n prevents intermediate negative values."},"id":3620,"implemented":true,"kind":"function","modifiers":[],"name":"complement","nameLocation":"5689:10:18","nodeType":"FunctionDefinition","parameters":{"id":3614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3613,"mutability":"mutable","name":"x","nameLocation":"5708:1:18","nodeType":"VariableDeclaration","scope":3620,"src":"5700:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3612,"name":"uint256","nodeType":"ElementaryTypeName","src":"5700:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5699:11:18"},"returnParameters":{"id":3617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3616,"mutability":"mutable","name":"result","nameLocation":"5742:6:18","nodeType":"VariableDeclaration","scope":3620,"src":"5734:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3615,"name":"uint256","nodeType":"ElementaryTypeName","src":"5734:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5733:16:18"},"scope":3621,"src":"5680:245:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3622,"src":"239:5688:18","usedErrors":[3330],"usedEvents":[]}],"src":"46:5882:18"},"id":18},"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol":{"ast":{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol","exportedSymbols":{"LogExpMath":[4977]},"id":4978,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3623,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"33:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"LogExpMath","contractDependencies":[],"contractKind":"library","documentation":{"id":3624,"nodeType":"StructuredDocumentation","src":"79:515:19","text":" @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\n Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\n exponentiation and logarithm (where the base is Euler's number).\n All math operations are unchecked in order to save gas.\n @author Fernando Martinelli - @fernandomartinelli\n @author Sergio Yuhjtman     - @sergioyuhjtman\n @author Daniel Fernandez    - @dmf7z"},"fullyImplemented":true,"id":4977,"linearizedBaseContracts":[4977],"name":"LogExpMath","nameLocation":"603:10:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3625,"nodeType":"StructuredDocumentation","src":"620:79:19","text":"@notice This error is thrown when a base is not within an acceptable range."},"errorSelector":"022701e0","id":3627,"name":"BaseOutOfBounds","nameLocation":"710:15:19","nodeType":"ErrorDefinition","parameters":{"id":3626,"nodeType":"ParameterList","parameters":[],"src":"725:2:19"},"src":"704:24:19"},{"documentation":{"id":3628,"nodeType":"StructuredDocumentation","src":"734:83:19","text":"@notice This error is thrown when a exponent is not within an acceptable range."},"errorSelector":"d8317311","id":3630,"name":"ExponentOutOfBounds","nameLocation":"828:19:19","nodeType":"ErrorDefinition","parameters":{"id":3629,"nodeType":"ParameterList","parameters":[],"src":"847:2:19"},"src":"822:28:19"},{"documentation":{"id":3631,"nodeType":"StructuredDocumentation","src":"856:96:19","text":"@notice This error is thrown when the exponent * ln(base) is not within an acceptable range."},"errorSelector":"a2f9f7e3","id":3633,"name":"ProductOutOfBounds","nameLocation":"963:18:19","nodeType":"ErrorDefinition","parameters":{"id":3632,"nodeType":"ParameterList","parameters":[],"src":"981:2:19"},"src":"957:27:19"},{"documentation":{"id":3634,"nodeType":"StructuredDocumentation","src":"990:109:19","text":"@notice This error is thrown when an exponent used in the exp function is not within an acceptable range."},"errorSelector":"d4794efd","id":3636,"name":"InvalidExponent","nameLocation":"1110:15:19","nodeType":"ErrorDefinition","parameters":{"id":3635,"nodeType":"ParameterList","parameters":[],"src":"1125:2:19"},"src":"1104:24:19"},{"documentation":{"id":3637,"nodeType":"StructuredDocumentation","src":"1134:119:19","text":"@notice This error is thrown when a variable or result is not within the acceptable bounds defined in the function."},"errorSelector":"b4120f14","id":3639,"name":"OutOfBounds","nameLocation":"1264:11:19","nodeType":"ErrorDefinition","parameters":{"id":3638,"nodeType":"ParameterList","parameters":[],"src":"1275:2:19"},"src":"1258:20:19"},{"constant":true,"id":3642,"mutability":"constant","name":"ONE_18","nameLocation":"1555:6:19","nodeType":"VariableDeclaration","scope":4977,"src":"1539:29:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3640,"name":"int256","nodeType":"ElementaryTypeName","src":"1539:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"31653138","id":3641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1564:4:19","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"visibility":"internal"},{"constant":true,"id":3645,"mutability":"constant","name":"ONE_20","nameLocation":"1745:6:19","nodeType":"VariableDeclaration","scope":4977,"src":"1729:29:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3643,"name":"int256","nodeType":"ElementaryTypeName","src":"1729:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"31653230","id":3644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1754:4:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000_by_1","typeString":"int_const 100000000000000000000"},"value":"1e20"},"visibility":"internal"},{"constant":true,"id":3648,"mutability":"constant","name":"ONE_36","nameLocation":"1780:6:19","nodeType":"VariableDeclaration","scope":4977,"src":"1764:29:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3646,"name":"int256","nodeType":"ElementaryTypeName","src":"1764:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"31653336","id":3647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1789:4:19","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(29 digits omitted)...0000"},"value":"1e36"},"visibility":"internal"},{"constant":true,"id":3651,"mutability":"constant","name":"MAX_NATURAL_EXPONENT","nameLocation":"2326:20:19","nodeType":"VariableDeclaration","scope":4977,"src":"2310:45:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3649,"name":"int256","nodeType":"ElementaryTypeName","src":"2310:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313330653138","id":3650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:6:19","typeDescriptions":{"typeIdentifier":"t_rational_130000000000000000000_by_1","typeString":"int_const 130000000000000000000"},"value":"130e18"},"visibility":"internal"},{"constant":true,"id":3655,"mutability":"constant","name":"MIN_NATURAL_EXPONENT","nameLocation":"2377:20:19","nodeType":"VariableDeclaration","scope":4977,"src":"2361:45:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3652,"name":"int256","nodeType":"ElementaryTypeName","src":"2361:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"id":3654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2400:6:19","subExpression":{"hexValue":"3431653138","id":3653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2401:5:19","typeDescriptions":{"typeIdentifier":"t_rational_41000000000000000000_by_1","typeString":"int_const 41000000000000000000"},"value":"41e18"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_41000000000000000000_by_1","typeString":"int_const -41000000000000000000"}},"visibility":"internal"},{"constant":true,"id":3660,"mutability":"constant","name":"LN_36_LOWER_BOUND","nameLocation":"2573:17:19","nodeType":"VariableDeclaration","scope":4977,"src":"2557:49:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3656,"name":"int256","nodeType":"ElementaryTypeName","src":"2557:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":3657,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"2593:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31653137","id":3658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2602:4:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000_by_1","typeString":"int_const 100000000000000000"},"value":"1e17"},"src":"2593:13:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":true,"id":3665,"mutability":"constant","name":"LN_36_UPPER_BOUND","nameLocation":"2628:17:19","nodeType":"VariableDeclaration","scope":4977,"src":"2612:49:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3661,"name":"int256","nodeType":"ElementaryTypeName","src":"2612:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":3662,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"2648:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31653137","id":3663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2657:4:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000_by_1","typeString":"int_const 100000000000000000"},"value":"1e17"},"src":"2648:13:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":true,"id":3675,"mutability":"constant","name":"MILD_EXPONENT_BOUND","nameLocation":"2685:19:19","nodeType":"VariableDeclaration","scope":4977,"src":"2668:65:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3666,"name":"uint256","nodeType":"ElementaryTypeName","src":"2668:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_28948022309329048855892746252171976963317496166410141009864396001978282409984_by_1","typeString":"int_const 2894...(69 digits omitted)...9984"},"id":3669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2707:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"323534","id":3668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2712:3:19","typeDescriptions":{"typeIdentifier":"t_rational_254_by_1","typeString":"int_const 254"},"value":"254"},"src":"2707:8:19","typeDescriptions":{"typeIdentifier":"t_rational_28948022309329048855892746252171976963317496166410141009864396001978282409984_by_1","typeString":"int_const 2894...(69 digits omitted)...9984"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[{"id":3672,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"2726:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2718:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3670,"name":"uint256","nodeType":"ElementaryTypeName","src":"2718:7:19","typeDescriptions":{}}},"id":3673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2718:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2707:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":true,"id":3678,"mutability":"constant","name":"x0","nameLocation":"2784:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"2768:42:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3676,"name":"int256","nodeType":"ElementaryTypeName","src":"2768:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313238303030303030303030303030303030303030","id":3677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2789:21:19","typeDescriptions":{"typeIdentifier":"t_rational_128000000000000000000_by_1","typeString":"int_const 128000000000000000000"},"value":"128000000000000000000"},"visibility":"internal"},{"constant":true,"id":3681,"mutability":"constant","name":"a0","nameLocation":"2840:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"2824:77:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3679,"name":"int256","nodeType":"ElementaryTypeName","src":"2824:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"3338383737303834303539393435393530393232323030303030303030303030303030303030303030303030303030303030303030303030","id":3680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2845:56:19","typeDescriptions":{"typeIdentifier":"t_rational_38877084059945950922200000000000000000000000000000000000_by_1","typeString":"int_const 3887...(48 digits omitted)...0000"},"value":"38877084059945950922200000000000000000000000000000000000"},"visibility":"internal"},{"constant":true,"id":3684,"mutability":"constant","name":"x1","nameLocation":"2948:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"2932:41:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3682,"name":"int256","nodeType":"ElementaryTypeName","src":"2932:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"3634303030303030303030303030303030303030","id":3683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2953:20:19","typeDescriptions":{"typeIdentifier":"t_rational_64000000000000000000_by_1","typeString":"int_const 64000000000000000000"},"value":"64000000000000000000"},"visibility":"internal"},{"constant":true,"id":3687,"mutability":"constant","name":"a1","nameLocation":"3003:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"2987:49:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3685,"name":"int256","nodeType":"ElementaryTypeName","src":"2987:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"36323335313439303830383131363136383832393130303030303030","id":3686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:28:19","typeDescriptions":{"typeIdentifier":"t_rational_6235149080811616882910000000_by_1","typeString":"int_const 6235149080811616882910000000"},"value":"6235149080811616882910000000"},"visibility":"internal"},{"constant":true,"id":3690,"mutability":"constant","name":"x2","nameLocation":"3112:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3096:43:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3688,"name":"int256","nodeType":"ElementaryTypeName","src":"3096:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"33323030303030303030303030303030303030303030","id":3689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3117:22:19","typeDescriptions":{"typeIdentifier":"t_rational_3200000000000000000000_by_1","typeString":"int_const 3200000000000000000000"},"value":"3200000000000000000000"},"visibility":"internal"},{"constant":true,"id":3693,"mutability":"constant","name":"a2","nameLocation":"3169:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3153:55:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3691,"name":"int256","nodeType":"ElementaryTypeName","src":"3153:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"37383936323936303138323638303639353136313030303030303030303030303030","id":3692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3174:34:19","typeDescriptions":{"typeIdentifier":"t_rational_7896296018268069516100000000000000_by_1","typeString":"int_const 7896...(26 digits omitted)...0000"},"value":"7896296018268069516100000000000000"},"visibility":"internal"},{"constant":true,"id":3696,"mutability":"constant","name":"x3","nameLocation":"3241:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3225:43:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3694,"name":"int256","nodeType":"ElementaryTypeName","src":"3225:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"31363030303030303030303030303030303030303030","id":3695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3246:22:19","typeDescriptions":{"typeIdentifier":"t_rational_1600000000000000000000_by_1","typeString":"int_const 1600000000000000000000"},"value":"1600000000000000000000"},"visibility":"internal"},{"constant":true,"id":3699,"mutability":"constant","name":"a3","nameLocation":"3298:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3282:48:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3697,"name":"int256","nodeType":"ElementaryTypeName","src":"3282:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"383838363131303532303530373837323633363736303030303030","id":3698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3303:27:19","typeDescriptions":{"typeIdentifier":"t_rational_888611052050787263676000000_by_1","typeString":"int_const 888611052050787263676000000"},"value":"888611052050787263676000000"},"visibility":"internal"},{"constant":true,"id":3702,"mutability":"constant","name":"x4","nameLocation":"3363:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3347:42:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3700,"name":"int256","nodeType":"ElementaryTypeName","src":"3347:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"383030303030303030303030303030303030303030","id":3701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3368:21:19","typeDescriptions":{"typeIdentifier":"t_rational_800000000000000000000_by_1","typeString":"int_const 800000000000000000000"},"value":"800000000000000000000"},"visibility":"internal"},{"constant":true,"id":3705,"mutability":"constant","name":"a4","nameLocation":"3419:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3403:45:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3703,"name":"int256","nodeType":"ElementaryTypeName","src":"3403:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"323938303935373938373034313732383237343734303030","id":3704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3424:24:19","typeDescriptions":{"typeIdentifier":"t_rational_298095798704172827474000_by_1","typeString":"int_const 298095798704172827474000"},"value":"298095798704172827474000"},"visibility":"internal"},{"constant":true,"id":3708,"mutability":"constant","name":"x5","nameLocation":"3481:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3465:42:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3706,"name":"int256","nodeType":"ElementaryTypeName","src":"3465:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"343030303030303030303030303030303030303030","id":3707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3486:21:19","typeDescriptions":{"typeIdentifier":"t_rational_400000000000000000000_by_1","typeString":"int_const 400000000000000000000"},"value":"400000000000000000000"},"visibility":"internal"},{"constant":true,"id":3711,"mutability":"constant","name":"a5","nameLocation":"3537:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3521:43:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3709,"name":"int256","nodeType":"ElementaryTypeName","src":"3521:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"35343539383135303033333134343233393037383130","id":3710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3542:22:19","typeDescriptions":{"typeIdentifier":"t_rational_5459815003314423907810_by_1","typeString":"int_const 5459815003314423907810"},"value":"5459815003314423907810"},"visibility":"internal"},{"constant":true,"id":3714,"mutability":"constant","name":"x6","nameLocation":"3597:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3581:42:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3712,"name":"int256","nodeType":"ElementaryTypeName","src":"3581:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"323030303030303030303030303030303030303030","id":3713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3602:21:19","typeDescriptions":{"typeIdentifier":"t_rational_200000000000000000000_by_1","typeString":"int_const 200000000000000000000"},"value":"200000000000000000000"},"visibility":"internal"},{"constant":true,"id":3717,"mutability":"constant","name":"a6","nameLocation":"3653:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3637:42:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3715,"name":"int256","nodeType":"ElementaryTypeName","src":"3637:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"373338393035363039383933303635303232373233","id":3716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3658:21:19","typeDescriptions":{"typeIdentifier":"t_rational_738905609893065022723_by_1","typeString":"int_const 738905609893065022723"},"value":"738905609893065022723"},"visibility":"internal"},{"constant":true,"id":3720,"mutability":"constant","name":"x7","nameLocation":"3712:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3696:42:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3718,"name":"int256","nodeType":"ElementaryTypeName","src":"3696:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313030303030303030303030303030303030303030","id":3719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3717:21:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000_by_1","typeString":"int_const 100000000000000000000"},"value":"100000000000000000000"},"visibility":"internal"},{"constant":true,"id":3723,"mutability":"constant","name":"a7","nameLocation":"3768:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3752:42:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3721,"name":"int256","nodeType":"ElementaryTypeName","src":"3752:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"323731383238313832383435393034353233353336","id":3722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3773:21:19","typeDescriptions":{"typeIdentifier":"t_rational_271828182845904523536_by_1","typeString":"int_const 271828182845904523536"},"value":"271828182845904523536"},"visibility":"internal"},{"constant":true,"id":3726,"mutability":"constant","name":"x8","nameLocation":"3827:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3811:41:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3724,"name":"int256","nodeType":"ElementaryTypeName","src":"3811:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"3530303030303030303030303030303030303030","id":3725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3832:20:19","typeDescriptions":{"typeIdentifier":"t_rational_50000000000000000000_by_1","typeString":"int_const 50000000000000000000"},"value":"50000000000000000000"},"visibility":"internal"},{"constant":true,"id":3729,"mutability":"constant","name":"a8","nameLocation":"3883:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3867:42:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3727,"name":"int256","nodeType":"ElementaryTypeName","src":"3867:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313634383732313237303730303132383134363835","id":3728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3888:21:19","typeDescriptions":{"typeIdentifier":"t_rational_164872127070012814685_by_1","typeString":"int_const 164872127070012814685"},"value":"164872127070012814685"},"visibility":"internal"},{"constant":true,"id":3732,"mutability":"constant","name":"x9","nameLocation":"3942:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3926:41:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3730,"name":"int256","nodeType":"ElementaryTypeName","src":"3926:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"3235303030303030303030303030303030303030","id":3731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3947:20:19","typeDescriptions":{"typeIdentifier":"t_rational_25000000000000000000_by_1","typeString":"int_const 25000000000000000000"},"value":"25000000000000000000"},"visibility":"internal"},{"constant":true,"id":3735,"mutability":"constant","name":"a9","nameLocation":"3998:2:19","nodeType":"VariableDeclaration","scope":4977,"src":"3982:42:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3733,"name":"int256","nodeType":"ElementaryTypeName","src":"3982:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313238343032353431363638373734313438343037","id":3734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4003:21:19","typeDescriptions":{"typeIdentifier":"t_rational_128402541668774148407_by_1","typeString":"int_const 128402541668774148407"},"value":"128402541668774148407"},"visibility":"internal"},{"constant":true,"id":3738,"mutability":"constant","name":"x10","nameLocation":"4057:3:19","nodeType":"VariableDeclaration","scope":4977,"src":"4041:42:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3736,"name":"int256","nodeType":"ElementaryTypeName","src":"4041:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"3132353030303030303030303030303030303030","id":3737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4063:20:19","typeDescriptions":{"typeIdentifier":"t_rational_12500000000000000000_by_1","typeString":"int_const 12500000000000000000"},"value":"12500000000000000000"},"visibility":"internal"},{"constant":true,"id":3741,"mutability":"constant","name":"a10","nameLocation":"4114:3:19","nodeType":"VariableDeclaration","scope":4977,"src":"4098:43:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3739,"name":"int256","nodeType":"ElementaryTypeName","src":"4098:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313133333134383435333036363832363331363833","id":3740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4120:21:19","typeDescriptions":{"typeIdentifier":"t_rational_113314845306682631683_by_1","typeString":"int_const 113314845306682631683"},"value":"113314845306682631683"},"visibility":"internal"},{"constant":true,"id":3744,"mutability":"constant","name":"x11","nameLocation":"4175:3:19","nodeType":"VariableDeclaration","scope":4977,"src":"4159:41:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3742,"name":"int256","nodeType":"ElementaryTypeName","src":"4159:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"36323530303030303030303030303030303030","id":3743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4181:19:19","typeDescriptions":{"typeIdentifier":"t_rational_6250000000000000000_by_1","typeString":"int_const 6250000000000000000"},"value":"6250000000000000000"},"visibility":"internal"},{"constant":true,"id":3747,"mutability":"constant","name":"a11","nameLocation":"4231:3:19","nodeType":"VariableDeclaration","scope":4977,"src":"4215:43:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3745,"name":"int256","nodeType":"ElementaryTypeName","src":"4215:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313036343439343435383931373835393432393536","id":3746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4237:21:19","typeDescriptions":{"typeIdentifier":"t_rational_106449445891785942956_by_1","typeString":"int_const 106449445891785942956"},"value":"106449445891785942956"},"visibility":"internal"},{"body":{"id":3879,"nodeType":"Block","src":"4563:2233:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3757,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"4577:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4582:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4577:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3766,"nodeType":"IfStatement","src":"4573:131:19","trueBody":{"id":3765,"nodeType":"Block","src":"4585:119:19","statements":[{"expression":{"arguments":[{"id":3762,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"4686:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4678:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3760,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:19","typeDescriptions":{}}},"id":3763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4678:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3756,"id":3764,"nodeType":"Return","src":"4671:22:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3767,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3750,"src":"4718:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4723:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4718:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3773,"nodeType":"IfStatement","src":"4714:45:19","trueBody":{"id":3772,"nodeType":"Block","src":"4726:33:19","statements":[{"expression":{"hexValue":"30","id":3770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4747:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3756,"id":3771,"nodeType":"Return","src":"4740:8:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3774,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3750,"src":"5133:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5138:3:19","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"5133:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5145:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5133:13:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3783,"nodeType":"IfStatement","src":"5129:68:19","trueBody":{"id":3782,"nodeType":"Block","src":"5148:49:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3779,"name":"BaseOutOfBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"5169:15:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5169:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3781,"nodeType":"RevertStatement","src":"5162:24:19"}]}},{"assignments":[3785],"declarations":[{"constant":false,"id":3785,"mutability":"mutable","name":"x_int256","nameLocation":"5213:8:19","nodeType":"VariableDeclaration","scope":3879,"src":"5206:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3784,"name":"int256","nodeType":"ElementaryTypeName","src":"5206:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3790,"initialValue":{"arguments":[{"id":3788,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3750,"src":"5231:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3787,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5224:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3786,"name":"int256","nodeType":"ElementaryTypeName","src":"5224:6:19","typeDescriptions":{}}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5224:9:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"5206:27:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3791,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"5591:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3792,"name":"MILD_EXPONENT_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"5596:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5591:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3798,"nodeType":"IfStatement","src":"5587:83:19","trueBody":{"id":3797,"nodeType":"Block","src":"5617:53:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3794,"name":"ExponentOutOfBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3630,"src":"5638:19:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5638:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3796,"nodeType":"RevertStatement","src":"5631:28:19"}]}},{"assignments":[3800],"declarations":[{"constant":false,"id":3800,"mutability":"mutable","name":"y_int256","nameLocation":"5686:8:19","nodeType":"VariableDeclaration","scope":3879,"src":"5679:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3799,"name":"int256","nodeType":"ElementaryTypeName","src":"5679:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3805,"initialValue":{"arguments":[{"id":3803,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"5704:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3802,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5697:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3801,"name":"int256","nodeType":"ElementaryTypeName","src":"5697:6:19","typeDescriptions":{}}},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5697:9:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"5679:27:19"},{"assignments":[3807],"declarations":[{"constant":false,"id":3807,"mutability":"mutable","name":"logx_times_y","nameLocation":"5724:12:19","nodeType":"VariableDeclaration","scope":3879,"src":"5717:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3806,"name":"int256","nodeType":"ElementaryTypeName","src":"5717:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3808,"nodeType":"VariableDeclarationStatement","src":"5717:19:19"},{"id":3857,"nodeType":"UncheckedBlock","src":"5746:790:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3809,"name":"LN_36_LOWER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"5774:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3810,"name":"x_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"5794:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"5774:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3812,"name":"x_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"5806:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3813,"name":"LN_36_UPPER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3665,"src":"5817:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"5806:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5774:60:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3851,"nodeType":"Block","src":"6418:72:19","statements":[{"expression":{"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3843,"name":"logx_times_y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"6436:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3845,"name":"x_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"6455:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3844,"name":"_ln","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"6451:3:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":3846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6451:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3847,"name":"y_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"6467:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6451:24:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6436:39:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3850,"nodeType":"ExpressionStatement","src":"6436:39:19"}]},"id":3852,"nodeType":"IfStatement","src":"5770:720:19","trueBody":{"id":3842,"nodeType":"Block","src":"5836:576:19","statements":[{"assignments":[3817],"declarations":[{"constant":false,"id":3817,"mutability":"mutable","name":"ln_36_x","nameLocation":"5861:7:19","nodeType":"VariableDeclaration","scope":3842,"src":"5854:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3816,"name":"int256","nodeType":"ElementaryTypeName","src":"5854:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3821,"initialValue":{"arguments":[{"id":3819,"name":"x_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"5878:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3818,"name":"_ln_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4976,"src":"5871:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":3820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5871:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"5854:33:19"},{"expression":{"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3822,"name":"logx_times_y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"6308:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3823,"name":"ln_36_x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"6325:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3824,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"6335:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6325:16:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3826,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6324:18:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3827,"name":"y_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"6345:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6324:29:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3829,"name":"ln_36_x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"6358:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3830,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"6368:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6358:16:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3832,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6357:18:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3833,"name":"y_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"6378:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6357:29:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3835,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6356:31:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3836,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"6390:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6356:40:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6324:72:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3839,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6323:74:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6308:89:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3841,"nodeType":"ExpressionStatement","src":"6308:89:19"}]}},{"expression":{"id":3855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3853,"name":"logx_times_y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"6503:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"id":3854,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"6519:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6503:22:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3856,"nodeType":"ExpressionStatement","src":"6503:22:19"}]},{"condition":{"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6613:79:19","subExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3858,"name":"MIN_NATURAL_EXPONENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3655,"src":"6615:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3859,"name":"logx_times_y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"6639:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6615:36:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3861,"name":"logx_times_y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"6655:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3862,"name":"MAX_NATURAL_EXPONENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"6671:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6655:36:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6615:76:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3865,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6614:78:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3871,"nodeType":"IfStatement","src":"6609:137:19","trueBody":{"id":3870,"nodeType":"Block","src":"6694:52:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3867,"name":"ProductOutOfBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"6715:18:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6715:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3869,"nodeType":"RevertStatement","src":"6708:27:19"}]}},{"expression":{"arguments":[{"arguments":[{"id":3875,"name":"logx_times_y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"6775:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3874,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4327,"src":"6771:3:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":3876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6771:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3873,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6763:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3872,"name":"uint256","nodeType":"ElementaryTypeName","src":"6763:7:19","typeDescriptions":{}}},"id":3877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6763:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3756,"id":3878,"nodeType":"Return","src":"6756:33:19"}]},"documentation":{"id":3748,"nodeType":"StructuredDocumentation","src":"4277:214:19","text":" @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\n Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`."},"id":3880,"implemented":true,"kind":"function","modifiers":[],"name":"pow","nameLocation":"4505:3:19","nodeType":"FunctionDefinition","parameters":{"id":3753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3750,"mutability":"mutable","name":"x","nameLocation":"4517:1:19","nodeType":"VariableDeclaration","scope":3880,"src":"4509:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3749,"name":"uint256","nodeType":"ElementaryTypeName","src":"4509:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3752,"mutability":"mutable","name":"y","nameLocation":"4528:1:19","nodeType":"VariableDeclaration","scope":3880,"src":"4520:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3751,"name":"uint256","nodeType":"ElementaryTypeName","src":"4520:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4508:22:19"},"returnParameters":{"id":3756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3880,"src":"4554:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3754,"name":"uint256","nodeType":"ElementaryTypeName","src":"4554:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4553:9:19"},"scope":4977,"src":"4496:2300:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4326,"nodeType":"Block","src":"7064:6082:19","statements":[{"condition":{"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7078:57:19","subExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3888,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"7080:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3889,"name":"MIN_NATURAL_EXPONENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3655,"src":"7085:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"7080:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3891,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"7109:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3892,"name":"MAX_NATURAL_EXPONENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"7114:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"7109:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7080:54:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3895,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7079:56:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3901,"nodeType":"IfStatement","src":"7074:112:19","trueBody":{"id":3900,"nodeType":"Block","src":"7137:49:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3897,"name":"InvalidExponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3636,"src":"7158:15:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7158:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3899,"nodeType":"RevertStatement","src":"7151:24:19"}]}},{"assignments":[3903],"declarations":[{"constant":false,"id":3903,"mutability":"mutable","name":"negativeExponent","nameLocation":"7277:16:19","nodeType":"VariableDeclaration","scope":4326,"src":"7272:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3902,"name":"bool","nodeType":"ElementaryTypeName","src":"7272:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3905,"initialValue":{"hexValue":"66616c7365","id":3904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7296:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"7272:29:19"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3906,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"7316:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7320:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7316:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3920,"nodeType":"IfStatement","src":"7312:417:19","trueBody":{"id":3919,"nodeType":"Block","src":"7323:406:19","statements":[{"id":3914,"nodeType":"UncheckedBlock","src":"7633:49:19","statements":[{"expression":{"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3909,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"7661:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"7665:2:19","subExpression":{"id":3910,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"7666:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"7661:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3913,"nodeType":"ExpressionStatement","src":"7661:6:19"}]},{"expression":{"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3915,"name":"negativeExponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"7695:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7714:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7695:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3918,"nodeType":"ExpressionStatement","src":"7695:23:19"}]}},{"assignments":[3922],"declarations":[{"constant":false,"id":3922,"mutability":"mutable","name":"firstAN","nameLocation":"9037:7:19","nodeType":"VariableDeclaration","scope":4326,"src":"9030:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3921,"name":"int256","nodeType":"ElementaryTypeName","src":"9030:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3923,"nodeType":"VariableDeclarationStatement","src":"9030:14:19"},{"id":3959,"nodeType":"UncheckedBlock","src":"9054:457:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3924,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"9082:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3925,"name":"x0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3678,"src":"9087:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9082:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3936,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"9171:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3937,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3684,"src":"9176:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9171:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3952,"nodeType":"Block","src":"9256:74:19","statements":[{"expression":{"id":3950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3948,"name":"firstAN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"9274:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":3949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9284:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9274:11:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3951,"nodeType":"ExpressionStatement","src":"9274:11:19"}]},"id":3953,"nodeType":"IfStatement","src":"9167:163:19","trueBody":{"id":3947,"nodeType":"Block","src":"9180:70:19","statements":[{"expression":{"id":3941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3939,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"9198:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3940,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3684,"src":"9203:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9198:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3942,"nodeType":"ExpressionStatement","src":"9198:7:19"},{"expression":{"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3943,"name":"firstAN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"9223:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3944,"name":"a1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3687,"src":"9233:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9223:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3946,"nodeType":"ExpressionStatement","src":"9223:12:19"}]}},"id":3954,"nodeType":"IfStatement","src":"9078:252:19","trueBody":{"id":3935,"nodeType":"Block","src":"9091:70:19","statements":[{"expression":{"id":3929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3927,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"9109:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3928,"name":"x0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3678,"src":"9114:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9109:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3930,"nodeType":"ExpressionStatement","src":"9109:7:19"},{"expression":{"id":3933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3931,"name":"firstAN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"9134:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3932,"name":"a0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"9144:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9134:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3934,"nodeType":"ExpressionStatement","src":"9134:12:19"}]}},{"expression":{"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3955,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"9492:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"313030","id":3956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9497:3:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"9492:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3958,"nodeType":"ExpressionStatement","src":"9492:8:19"}]},{"assignments":[3961],"declarations":[{"constant":false,"id":3961,"mutability":"mutable","name":"product","nameLocation":"9730:7:19","nodeType":"VariableDeclaration","scope":4326,"src":"9723:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3960,"name":"int256","nodeType":"ElementaryTypeName","src":"9723:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3963,"initialValue":{"id":3962,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"9740:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"9723:23:19"},{"id":4108,"nodeType":"UncheckedBlock","src":"9757:957:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3964,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"9785:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3965,"name":"x2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3690,"src":"9790:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9785:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3981,"nodeType":"IfStatement","src":"9781:104:19","trueBody":{"id":3980,"nodeType":"Block","src":"9794:91:19","statements":[{"expression":{"id":3969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3967,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"9812:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3968,"name":"x2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3690,"src":"9817:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9812:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3970,"nodeType":"ExpressionStatement","src":"9812:7:19"},{"expression":{"id":3978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3971,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"9837:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3972,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"9848:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3973,"name":"a2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"9858:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9848:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3975,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9847:14:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3976,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"9864:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9847:23:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9837:33:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3979,"nodeType":"ExpressionStatement","src":"9837:33:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3982,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"9902:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3983,"name":"x3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"9907:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9902:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3999,"nodeType":"IfStatement","src":"9898:104:19","trueBody":{"id":3998,"nodeType":"Block","src":"9911:91:19","statements":[{"expression":{"id":3987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3985,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"9929:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3986,"name":"x3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"9934:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9929:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3988,"nodeType":"ExpressionStatement","src":"9929:7:19"},{"expression":{"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3989,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"9954:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3990,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"9965:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3991,"name":"a3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3699,"src":"9975:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9965:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3993,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9964:14:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3994,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"9981:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9964:23:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9954:33:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3997,"nodeType":"ExpressionStatement","src":"9954:33:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4000,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"10019:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4001,"name":"x4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"10024:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10019:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4017,"nodeType":"IfStatement","src":"10015:104:19","trueBody":{"id":4016,"nodeType":"Block","src":"10028:91:19","statements":[{"expression":{"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4003,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"10046:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4004,"name":"x4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"10051:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10046:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4006,"nodeType":"ExpressionStatement","src":"10046:7:19"},{"expression":{"id":4014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4007,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"10071:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4008,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"10082:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4009,"name":"a4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"10092:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10082:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4011,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10081:14:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4012,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"10098:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10081:23:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10071:33:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4015,"nodeType":"ExpressionStatement","src":"10071:33:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4018,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"10136:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4019,"name":"x5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"10141:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10136:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4035,"nodeType":"IfStatement","src":"10132:104:19","trueBody":{"id":4034,"nodeType":"Block","src":"10145:91:19","statements":[{"expression":{"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4021,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"10163:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4022,"name":"x5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"10168:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10163:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4024,"nodeType":"ExpressionStatement","src":"10163:7:19"},{"expression":{"id":4032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4025,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"10188:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4026,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"10199:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4027,"name":"a5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3711,"src":"10209:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10199:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4029,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10198:14:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4030,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"10215:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10198:23:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10188:33:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4033,"nodeType":"ExpressionStatement","src":"10188:33:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4036,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"10253:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4037,"name":"x6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"10258:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10253:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4053,"nodeType":"IfStatement","src":"10249:104:19","trueBody":{"id":4052,"nodeType":"Block","src":"10262:91:19","statements":[{"expression":{"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4039,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"10280:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4040,"name":"x6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"10285:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10280:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4042,"nodeType":"ExpressionStatement","src":"10280:7:19"},{"expression":{"id":4050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4043,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"10305:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4044,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"10316:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4045,"name":"a6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"10326:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10316:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4047,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10315:14:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4048,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"10332:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10315:23:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10305:33:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4051,"nodeType":"ExpressionStatement","src":"10305:33:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4054,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"10370:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4055,"name":"x7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3720,"src":"10375:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10370:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4071,"nodeType":"IfStatement","src":"10366:104:19","trueBody":{"id":4070,"nodeType":"Block","src":"10379:91:19","statements":[{"expression":{"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4057,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"10397:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4058,"name":"x7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3720,"src":"10402:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10397:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4060,"nodeType":"ExpressionStatement","src":"10397:7:19"},{"expression":{"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4061,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"10422:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4062,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"10433:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4063,"name":"a7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"10443:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10433:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4065,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10432:14:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4066,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"10449:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10432:23:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10422:33:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4069,"nodeType":"ExpressionStatement","src":"10422:33:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4072,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"10487:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4073,"name":"x8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"10492:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10487:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4089,"nodeType":"IfStatement","src":"10483:104:19","trueBody":{"id":4088,"nodeType":"Block","src":"10496:91:19","statements":[{"expression":{"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4075,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"10514:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4076,"name":"x8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"10519:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10514:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4078,"nodeType":"ExpressionStatement","src":"10514:7:19"},{"expression":{"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4079,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"10539:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4080,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"10550:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4081,"name":"a8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"10560:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10550:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4083,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10549:14:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4084,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"10566:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10549:23:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10539:33:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4087,"nodeType":"ExpressionStatement","src":"10539:33:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4090,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"10604:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4091,"name":"x9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"10609:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10604:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4107,"nodeType":"IfStatement","src":"10600:104:19","trueBody":{"id":4106,"nodeType":"Block","src":"10613:91:19","statements":[{"expression":{"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4093,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"10631:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4094,"name":"x9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"10636:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10631:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4096,"nodeType":"ExpressionStatement","src":"10631:7:19"},{"expression":{"id":4104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4097,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"10656:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4098,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"10667:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4099,"name":"a9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"10677:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10667:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4101,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10666:14:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4102,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"10683:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10666:23:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10656:33:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4105,"nodeType":"ExpressionStatement","src":"10656:33:19"}]}}]},{"assignments":[4110],"declarations":[{"constant":false,"id":4110,"mutability":"mutable","name":"seriesSum","nameLocation":"11025:9:19","nodeType":"VariableDeclaration","scope":4326,"src":"11018:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4109,"name":"int256","nodeType":"ElementaryTypeName","src":"11018:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4112,"initialValue":{"id":4111,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"11037:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"11018:25:19"},{"assignments":[4114],"declarations":[{"constant":false,"id":4114,"mutability":"mutable","name":"term","nameLocation":"11115:4:19","nodeType":"VariableDeclaration","scope":4326,"src":"11108:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4113,"name":"int256","nodeType":"ElementaryTypeName","src":"11108:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4115,"nodeType":"VariableDeclarationStatement","src":"11108:11:19"},{"expression":{"id":4118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4116,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11228:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4117,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11235:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11228:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4119,"nodeType":"ExpressionStatement","src":"11228:8:19"},{"id":4325,"nodeType":"UncheckedBlock","src":"11246:1894:19","statements":[{"expression":{"id":4122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4120,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"11270:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4121,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11283:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11270:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4123,"nodeType":"ExpressionStatement","src":"11270:17:19"},{"expression":{"id":4134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4124,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11536:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4125,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11545:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4126,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11552:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11545:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4128,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11544:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4129,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"11557:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11544:19:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4131,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11543:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":4132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11567:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11543:25:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11536:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4135,"nodeType":"ExpressionStatement","src":"11536:32:19"},{"expression":{"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4136,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"11582:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4137,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11595:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11582:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4139,"nodeType":"ExpressionStatement","src":"11582:17:19"},{"expression":{"id":4150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4140,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11614:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4141,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11623:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4142,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11630:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11623:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4144,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11622:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4145,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"11635:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11622:19:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4147,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11621:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"33","id":4148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11645:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"11621:25:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11614:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4151,"nodeType":"ExpressionStatement","src":"11614:32:19"},{"expression":{"id":4154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4152,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"11660:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4153,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11673:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11660:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4155,"nodeType":"ExpressionStatement","src":"11660:17:19"},{"expression":{"id":4166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4156,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11692:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4157,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11701:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4158,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11708:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11701:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4160,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11700:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4161,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"11713:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11700:19:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4163,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11699:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"34","id":4164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11723:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11699:25:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11692:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4167,"nodeType":"ExpressionStatement","src":"11692:32:19"},{"expression":{"id":4170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4168,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"11738:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4169,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11751:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11738:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4171,"nodeType":"ExpressionStatement","src":"11738:17:19"},{"expression":{"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4172,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11770:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4173,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11779:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4174,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11786:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11779:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4176,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11778:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4177,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"11791:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11778:19:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4179,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11777:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"35","id":4180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11801:1:19","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"11777:25:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11770:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4183,"nodeType":"ExpressionStatement","src":"11770:32:19"},{"expression":{"id":4186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4184,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"11816:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4185,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11829:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11816:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4187,"nodeType":"ExpressionStatement","src":"11816:17:19"},{"expression":{"id":4198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4188,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11848:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4189,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11857:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4190,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11864:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11857:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4192,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11856:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4193,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"11869:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11856:19:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4195,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11855:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"36","id":4196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11879:1:19","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"11855:25:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11848:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4199,"nodeType":"ExpressionStatement","src":"11848:32:19"},{"expression":{"id":4202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4200,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"11894:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4201,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11907:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11894:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4203,"nodeType":"ExpressionStatement","src":"11894:17:19"},{"expression":{"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4204,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11926:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4205,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11935:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4206,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11942:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11935:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4208,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11934:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4209,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"11947:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11934:19:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4211,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11933:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"37","id":4212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:1:19","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"11933:25:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11926:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4215,"nodeType":"ExpressionStatement","src":"11926:32:19"},{"expression":{"id":4218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4216,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"11972:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4217,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"11985:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11972:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4219,"nodeType":"ExpressionStatement","src":"11972:17:19"},{"expression":{"id":4230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4220,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12004:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4221,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12013:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4222,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"12020:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12013:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4224,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12012:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4225,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"12025:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12012:19:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4227,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12011:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"38","id":4228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12035:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12011:25:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12004:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4231,"nodeType":"ExpressionStatement","src":"12004:32:19"},{"expression":{"id":4234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4232,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"12050:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4233,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12063:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12050:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4235,"nodeType":"ExpressionStatement","src":"12050:17:19"},{"expression":{"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4236,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12082:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4237,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12091:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4238,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"12098:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12091:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4240,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12090:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4241,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"12103:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12090:19:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4243,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12089:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"39","id":4244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12113:1:19","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"src":"12089:25:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12082:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4247,"nodeType":"ExpressionStatement","src":"12082:32:19"},{"expression":{"id":4250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4248,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"12128:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4249,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12141:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12128:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4251,"nodeType":"ExpressionStatement","src":"12128:17:19"},{"expression":{"id":4262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4252,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12160:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4253,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12169:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4254,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"12176:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12169:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4256,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12168:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4257,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"12181:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12168:19:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4259,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12167:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130","id":4260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12191:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"12167:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12160:33:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4263,"nodeType":"ExpressionStatement","src":"12160:33:19"},{"expression":{"id":4266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4264,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"12207:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4265,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12220:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12207:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4267,"nodeType":"ExpressionStatement","src":"12207:17:19"},{"expression":{"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4268,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12239:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4269,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12248:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4270,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"12255:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12248:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4272,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12247:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4273,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"12260:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12247:19:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4275,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12246:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3131","id":4276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12270:2:19","typeDescriptions":{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},"value":"11"},"src":"12246:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12239:33:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4279,"nodeType":"ExpressionStatement","src":"12239:33:19"},{"expression":{"id":4282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4280,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"12286:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4281,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12299:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12286:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4283,"nodeType":"ExpressionStatement","src":"12286:17:19"},{"expression":{"id":4294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4284,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12318:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4285,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12327:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4286,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"12334:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12327:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4288,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12326:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4289,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"12339:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12326:19:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4291,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12325:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3132","id":4292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12349:2:19","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"12325:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12318:33:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4295,"nodeType":"ExpressionStatement","src":"12318:33:19"},{"expression":{"id":4298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4296,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"12365:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4297,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"12378:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12365:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4299,"nodeType":"ExpressionStatement","src":"12365:17:19"},{"assignments":[4301],"declarations":[{"constant":false,"id":4301,"mutability":"mutable","name":"result","nameLocation":"12914:6:19","nodeType":"VariableDeclaration","scope":4325,"src":"12907:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4300,"name":"int256","nodeType":"ElementaryTypeName","src":"12907:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4314,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4302,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"12926:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4303,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"12936:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12926:19:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4305,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12925:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4306,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"12949:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12925:30:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4308,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12924:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4309,"name":"firstAN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"12959:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12924:42:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4311,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12923:44:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":4312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12970:3:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"12923:50:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"12907:66:19"},{"expression":{"condition":{"id":4315,"name":"negativeExponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"13075:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4322,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"13123:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13075:54:19","trueExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":4316,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"13095:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4317,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"13104:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13095:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4319,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"13094:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4320,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"13114:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13094:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3887,"id":4324,"nodeType":"Return","src":"13068:61:19"}]}]},"documentation":{"id":3881,"nodeType":"StructuredDocumentation","src":"6802:203:19","text":" @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\n Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`."},"id":4327,"implemented":true,"kind":"function","modifiers":[],"name":"exp","nameLocation":"7019:3:19","nodeType":"FunctionDefinition","parameters":{"id":3884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3883,"mutability":"mutable","name":"x","nameLocation":"7030:1:19","nodeType":"VariableDeclaration","scope":4327,"src":"7023:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3882,"name":"int256","nodeType":"ElementaryTypeName","src":"7023:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7022:10:19"},"returnParameters":{"id":3887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4327,"src":"7056:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3885,"name":"int256","nodeType":"ElementaryTypeName","src":"7056:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7055:8:19"},"scope":4977,"src":"7010:6136:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4400,"nodeType":"Block","src":"13315:861:19","statements":[{"assignments":[4338],"declarations":[{"constant":false,"id":4338,"mutability":"mutable","name":"logBase","nameLocation":"13552:7:19","nodeType":"VariableDeclaration","scope":4400,"src":"13545:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4337,"name":"int256","nodeType":"ElementaryTypeName","src":"13545:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4339,"nodeType":"VariableDeclarationStatement","src":"13545:14:19"},{"id":4364,"nodeType":"UncheckedBlock","src":"13569:214:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4340,"name":"LN_36_LOWER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"13597:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4341,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"13617:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13597:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4343,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"13625:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4344,"name":"LN_36_UPPER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3665,"src":"13632:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13625:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13597:52:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4362,"nodeType":"Block","src":"13712:61:19","statements":[{"expression":{"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4354,"name":"logBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"13730:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4356,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"13744:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4355,"name":"_ln","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"13740:3:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":4357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13740:9:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4358,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"13752:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13740:18:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13730:28:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4361,"nodeType":"ExpressionStatement","src":"13730:28:19"}]},"id":4363,"nodeType":"IfStatement","src":"13593:180:19","trueBody":{"id":4353,"nodeType":"Block","src":"13651:55:19","statements":[{"expression":{"id":4351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4347,"name":"logBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"13669:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4349,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4332,"src":"13686:4:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4348,"name":"_ln_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4976,"src":"13679:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":4350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13679:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13669:22:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4352,"nodeType":"ExpressionStatement","src":"13669:22:19"}]}}]},{"assignments":[4366],"declarations":[{"constant":false,"id":4366,"mutability":"mutable","name":"logArg","nameLocation":"13800:6:19","nodeType":"VariableDeclaration","scope":4400,"src":"13793:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4365,"name":"int256","nodeType":"ElementaryTypeName","src":"13793:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4367,"nodeType":"VariableDeclarationStatement","src":"13793:13:19"},{"id":4399,"nodeType":"UncheckedBlock","src":"13816:354:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4368,"name":"LN_36_LOWER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"13844:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4369,"name":"arg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"13864:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13844:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4371,"name":"arg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"13871:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4372,"name":"LN_36_UPPER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3665,"src":"13877:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13871:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13844:50:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4390,"nodeType":"Block","src":"13955:59:19","statements":[{"expression":{"id":4388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4382,"name":"logArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"13973:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4384,"name":"arg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"13986:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4383,"name":"_ln","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"13982:3:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13982:8:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4386,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"13993:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13982:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13973:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4389,"nodeType":"ExpressionStatement","src":"13973:26:19"}]},"id":4391,"nodeType":"IfStatement","src":"13840:174:19","trueBody":{"id":4381,"nodeType":"Block","src":"13896:53:19","statements":[{"expression":{"id":4379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4375,"name":"logArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"13914:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4377,"name":"arg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4330,"src":"13930:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4376,"name":"_ln_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4976,"src":"13923:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":4378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13923:11:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13914:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4380,"nodeType":"ExpressionStatement","src":"13914:20:19"}]}},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4392,"name":"logArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"14133:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4393,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"14142:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14133:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4395,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14132:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4396,"name":"logBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"14152:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14132:27:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4336,"id":4398,"nodeType":"Return","src":"14125:34:19"}]}]},"documentation":{"id":4328,"nodeType":"StructuredDocumentation","src":"13152:89:19","text":"@dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument."},"id":4401,"implemented":true,"kind":"function","modifiers":[],"name":"log","nameLocation":"13255:3:19","nodeType":"FunctionDefinition","parameters":{"id":4333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4330,"mutability":"mutable","name":"arg","nameLocation":"13266:3:19","nodeType":"VariableDeclaration","scope":4401,"src":"13259:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4329,"name":"int256","nodeType":"ElementaryTypeName","src":"13259:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4332,"mutability":"mutable","name":"base","nameLocation":"13278:4:19","nodeType":"VariableDeclaration","scope":4401,"src":"13271:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4331,"name":"int256","nodeType":"ElementaryTypeName","src":"13271:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"13258:25:19"},"returnParameters":{"id":4336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4401,"src":"13307:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4334,"name":"int256","nodeType":"ElementaryTypeName","src":"13307:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"13306:8:19"},"scope":4977,"src":"13246:930:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4438,"nodeType":"Block","src":"14319:353:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4409,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"14416:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30","id":4410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14421:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14416:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4416,"nodeType":"IfStatement","src":"14412:57:19","trueBody":{"id":4415,"nodeType":"Block","src":"14424:45:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4412,"name":"OutOfBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3639,"src":"14445:11:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14445:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4414,"nodeType":"RevertStatement","src":"14438:20:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4417,"name":"LN_36_LOWER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"14482:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4418,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"14502:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14482:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4420,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"14507:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4421,"name":"LN_36_UPPER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3665,"src":"14511:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14507:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14482:46:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4436,"nodeType":"Block","src":"14628:38:19","statements":[{"expression":{"arguments":[{"id":4433,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"14653:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4432,"name":"_ln","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"14649:3:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":4434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14649:6:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4408,"id":4435,"nodeType":"Return","src":"14642:13:19"}]},"id":4437,"nodeType":"IfStatement","src":"14478:188:19","trueBody":{"id":4431,"nodeType":"Block","src":"14530:92:19","statements":[{"id":4430,"nodeType":"UncheckedBlock","src":"14544:68:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4425,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"14586:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4424,"name":"_ln_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4976,"src":"14579:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":4426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14579:9:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4427,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"14591:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14579:18:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4408,"id":4429,"nodeType":"Return","src":"14572:25:19"}]}]}}]},"documentation":{"id":4402,"nodeType":"StructuredDocumentation","src":"14182:79:19","text":"@dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument."},"id":4439,"implemented":true,"kind":"function","modifiers":[],"name":"ln","nameLocation":"14275:2:19","nodeType":"FunctionDefinition","parameters":{"id":4405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4404,"mutability":"mutable","name":"a","nameLocation":"14285:1:19","nodeType":"VariableDeclaration","scope":4439,"src":"14278:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4403,"name":"int256","nodeType":"ElementaryTypeName","src":"14278:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"14277:10:19"},"returnParameters":{"id":4408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4439,"src":"14311:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4406,"name":"int256","nodeType":"ElementaryTypeName","src":"14311:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"14310:8:19"},"scope":4977,"src":"14266:406:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4820,"nodeType":"Block","src":"14824:5531:19","statements":[{"assignments":[4448],"declarations":[{"constant":false,"id":4448,"mutability":"mutable","name":"negativeExponent","nameLocation":"14915:16:19","nodeType":"VariableDeclaration","scope":4820,"src":"14910:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4447,"name":"bool","nodeType":"ElementaryTypeName","src":"14910:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4450,"initialValue":{"hexValue":"66616c7365","id":4449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14934:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"14910:29:19"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4451,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"14954:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4452,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"14958:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14954:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4469,"nodeType":"IfStatement","src":"14950:381:19","trueBody":{"id":4468,"nodeType":"Block","src":"14966:365:19","statements":[{"id":4463,"nodeType":"UncheckedBlock","src":"15216:68:19","statements":[{"expression":{"id":4461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4454,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"15244:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":4455,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"15249:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4456,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"15258:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"15249:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4458,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"15248:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4459,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"15268:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"15248:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"15244:25:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4462,"nodeType":"ExpressionStatement","src":"15244:25:19"}]},{"expression":{"id":4466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4464,"name":"negativeExponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4448,"src":"15297:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15316:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"15297:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4467,"nodeType":"ExpressionStatement","src":"15297:23:19"}]}},{"assignments":[4471],"declarations":[{"constant":false,"id":4471,"mutability":"mutable","name":"sum","nameLocation":"16663:3:19","nodeType":"VariableDeclaration","scope":4820,"src":"16656:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4470,"name":"int256","nodeType":"ElementaryTypeName","src":"16656:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4473,"initialValue":{"hexValue":"30","id":4472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16669:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"16656:14:19"},{"id":4692,"nodeType":"UncheckedBlock","src":"16680:1674:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4474,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"16708:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":4475,"name":"a0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"16713:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4476,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"16718:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16713:11:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16708:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4488,"nodeType":"IfStatement","src":"16704:126:19","trueBody":{"id":4487,"nodeType":"Block","src":"16726:104:19","statements":[{"expression":{"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4479,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"16744:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"id":4480,"name":"a0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"16749:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16744:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4482,"nodeType":"ExpressionStatement","src":"16744:7:19"},{"expression":{"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4483,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"16806:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4484,"name":"x0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3678,"src":"16813:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16806:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4486,"nodeType":"ExpressionStatement","src":"16806:9:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4489,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"16848:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":4490,"name":"a1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3687,"src":"16853:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4491,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"16858:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16853:11:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16848:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4503,"nodeType":"IfStatement","src":"16844:126:19","trueBody":{"id":4502,"nodeType":"Block","src":"16866:104:19","statements":[{"expression":{"id":4496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4494,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"16884:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"id":4495,"name":"a1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3687,"src":"16889:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16884:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4497,"nodeType":"ExpressionStatement","src":"16884:7:19"},{"expression":{"id":4500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4498,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"16946:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4499,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3684,"src":"16953:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16946:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4501,"nodeType":"ExpressionStatement","src":"16946:9:19"}]}},{"expression":{"id":4506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4504,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"17109:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"313030","id":4505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17116:3:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"17109:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4507,"nodeType":"ExpressionStatement","src":"17109:10:19"},{"expression":{"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4508,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17133:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"313030","id":4509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17138:3:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"17133:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4511,"nodeType":"ExpressionStatement","src":"17133:8:19"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4512,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17276:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4513,"name":"a2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"17281:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17276:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4529,"nodeType":"IfStatement","src":"17272:94:19","trueBody":{"id":4528,"nodeType":"Block","src":"17285:81:19","statements":[{"expression":{"id":4522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4515,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17303:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4516,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17308:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4517,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"17312:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17308:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4519,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17307:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4520,"name":"a2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"17322:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17307:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17303:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4523,"nodeType":"ExpressionStatement","src":"17303:21:19"},{"expression":{"id":4526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4524,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"17342:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4525,"name":"x2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3690,"src":"17349:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17342:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4527,"nodeType":"ExpressionStatement","src":"17342:9:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4530,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17384:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4531,"name":"a3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3699,"src":"17389:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17384:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4547,"nodeType":"IfStatement","src":"17380:94:19","trueBody":{"id":4546,"nodeType":"Block","src":"17393:81:19","statements":[{"expression":{"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4533,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17411:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4534,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17416:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4535,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"17420:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17416:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4537,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17415:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4538,"name":"a3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3699,"src":"17430:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17415:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17411:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4541,"nodeType":"ExpressionStatement","src":"17411:21:19"},{"expression":{"id":4544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4542,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"17450:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4543,"name":"x3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"17457:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17450:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4545,"nodeType":"ExpressionStatement","src":"17450:9:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4548,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17492:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4549,"name":"a4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"17497:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17492:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4565,"nodeType":"IfStatement","src":"17488:94:19","trueBody":{"id":4564,"nodeType":"Block","src":"17501:81:19","statements":[{"expression":{"id":4558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4551,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17519:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4552,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17524:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4553,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"17528:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17524:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4555,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17523:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4556,"name":"a4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"17538:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17523:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17519:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4559,"nodeType":"ExpressionStatement","src":"17519:21:19"},{"expression":{"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4560,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"17558:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4561,"name":"x4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"17565:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17558:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4563,"nodeType":"ExpressionStatement","src":"17558:9:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4566,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17600:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4567,"name":"a5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3711,"src":"17605:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17600:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4583,"nodeType":"IfStatement","src":"17596:94:19","trueBody":{"id":4582,"nodeType":"Block","src":"17609:81:19","statements":[{"expression":{"id":4576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4569,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17627:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4570,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17632:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4571,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"17636:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17632:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4573,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17631:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4574,"name":"a5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3711,"src":"17646:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17631:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17627:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4577,"nodeType":"ExpressionStatement","src":"17627:21:19"},{"expression":{"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4578,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"17666:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4579,"name":"x5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"17673:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17666:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4581,"nodeType":"ExpressionStatement","src":"17666:9:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4584,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17708:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4585,"name":"a6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"17713:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17708:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4601,"nodeType":"IfStatement","src":"17704:94:19","trueBody":{"id":4600,"nodeType":"Block","src":"17717:81:19","statements":[{"expression":{"id":4594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4587,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17735:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4588,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17740:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4589,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"17744:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17740:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4591,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17739:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4592,"name":"a6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"17754:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17739:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17735:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4595,"nodeType":"ExpressionStatement","src":"17735:21:19"},{"expression":{"id":4598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4596,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"17774:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4597,"name":"x6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"17781:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17774:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4599,"nodeType":"ExpressionStatement","src":"17774:9:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4602,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17816:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4603,"name":"a7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"17821:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17816:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4619,"nodeType":"IfStatement","src":"17812:94:19","trueBody":{"id":4618,"nodeType":"Block","src":"17825:81:19","statements":[{"expression":{"id":4612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4605,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17843:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4606,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17848:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4607,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"17852:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17848:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4609,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17847:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4610,"name":"a7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"17862:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17847:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17843:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4613,"nodeType":"ExpressionStatement","src":"17843:21:19"},{"expression":{"id":4616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4614,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"17882:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4615,"name":"x7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3720,"src":"17889:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17882:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4617,"nodeType":"ExpressionStatement","src":"17882:9:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4620,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17924:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4621,"name":"a8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"17929:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17924:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4637,"nodeType":"IfStatement","src":"17920:94:19","trueBody":{"id":4636,"nodeType":"Block","src":"17933:81:19","statements":[{"expression":{"id":4630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4623,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17951:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4624,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"17956:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4625,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"17960:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17956:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4627,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17955:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4628,"name":"a8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"17970:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17955:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17951:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4631,"nodeType":"ExpressionStatement","src":"17951:21:19"},{"expression":{"id":4634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4632,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"17990:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4633,"name":"x8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"17997:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17990:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4635,"nodeType":"ExpressionStatement","src":"17990:9:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4638,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"18032:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4639,"name":"a9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"18037:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18032:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4655,"nodeType":"IfStatement","src":"18028:94:19","trueBody":{"id":4654,"nodeType":"Block","src":"18041:81:19","statements":[{"expression":{"id":4648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4641,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"18059:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4642,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"18064:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4643,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"18068:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18064:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4645,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18063:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4646,"name":"a9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"18078:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18063:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18059:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4649,"nodeType":"ExpressionStatement","src":"18059:21:19"},{"expression":{"id":4652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4650,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"18098:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4651,"name":"x9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"18105:2:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18098:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4653,"nodeType":"ExpressionStatement","src":"18098:9:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4656,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"18140:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4657,"name":"a10","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"18145:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18140:8:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4673,"nodeType":"IfStatement","src":"18136:97:19","trueBody":{"id":4672,"nodeType":"Block","src":"18150:83:19","statements":[{"expression":{"id":4666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4659,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"18168:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4660,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"18173:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4661,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"18177:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18173:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4663,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18172:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4664,"name":"a10","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"18187:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18172:18:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18168:22:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4667,"nodeType":"ExpressionStatement","src":"18168:22:19"},{"expression":{"id":4670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4668,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"18208:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4669,"name":"x10","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"18215:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18208:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4671,"nodeType":"ExpressionStatement","src":"18208:10:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4674,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"18251:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4675,"name":"a11","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3747,"src":"18256:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18251:8:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4691,"nodeType":"IfStatement","src":"18247:97:19","trueBody":{"id":4690,"nodeType":"Block","src":"18261:83:19","statements":[{"expression":{"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4677,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"18279:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4678,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"18284:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4679,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"18288:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18284:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4681,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18283:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4682,"name":"a11","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3747,"src":"18298:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18283:18:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18279:22:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4685,"nodeType":"ExpressionStatement","src":"18279:22:19"},{"expression":{"id":4688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4686,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"18319:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4687,"name":"x11","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"18326:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18319:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4689,"nodeType":"ExpressionStatement","src":"18319:10:19"}]}}]},{"id":4819,"nodeType":"UncheckedBlock","src":"18856:1493:19","statements":[{"assignments":[4694],"declarations":[{"constant":false,"id":4694,"mutability":"mutable","name":"z","nameLocation":"18887:1:19","nodeType":"VariableDeclaration","scope":4819,"src":"18880:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4693,"name":"int256","nodeType":"ElementaryTypeName","src":"18880:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4707,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4695,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"18893:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4696,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"18897:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18893:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4698,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18892:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4699,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"18907:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18892:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4701,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18891:23:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4702,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4442,"src":"18918:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4703,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"18922:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18918:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4705,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18917:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18891:38:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"18880:49:19"},{"assignments":[4709],"declarations":[{"constant":false,"id":4709,"mutability":"mutable","name":"z_squared","nameLocation":"18950:9:19","nodeType":"VariableDeclaration","scope":4819,"src":"18943:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4708,"name":"int256","nodeType":"ElementaryTypeName","src":"18943:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4716,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4710,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4694,"src":"18963:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4711,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4694,"src":"18967:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18963:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4713,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18962:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4714,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"18972:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18962:16:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"18943:35:19"},{"assignments":[4718],"declarations":[{"constant":false,"id":4718,"mutability":"mutable","name":"num","nameLocation":"19074:3:19","nodeType":"VariableDeclaration","scope":4819,"src":"19067:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4717,"name":"int256","nodeType":"ElementaryTypeName","src":"19067:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4720,"initialValue":{"id":4719,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4694,"src":"19080:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"19067:14:19"},{"assignments":[4722],"declarations":[{"constant":false,"id":4722,"mutability":"mutable","name":"seriesSum","nameLocation":"19210:9:19","nodeType":"VariableDeclaration","scope":4819,"src":"19203:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4721,"name":"int256","nodeType":"ElementaryTypeName","src":"19203:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4724,"initialValue":{"id":4723,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19222:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"19203:22:19"},{"expression":{"id":4732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4725,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19304:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4726,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19311:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4727,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"19317:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19311:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4729,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19310:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4730,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"19330:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19310:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19304:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4733,"nodeType":"ExpressionStatement","src":"19304:32:19"},{"expression":{"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4734,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4722,"src":"19350:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4735,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19363:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"33","id":4736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19369:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"19363:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19350:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4739,"nodeType":"ExpressionStatement","src":"19350:20:19"},{"expression":{"id":4747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4740,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19385:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4741,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19392:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4742,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"19398:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19392:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4744,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19391:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4745,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"19411:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19391:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19385:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4748,"nodeType":"ExpressionStatement","src":"19385:32:19"},{"expression":{"id":4753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4749,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4722,"src":"19431:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4750,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19444:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"35","id":4751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19450:1:19","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"19444:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19431:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4754,"nodeType":"ExpressionStatement","src":"19431:20:19"},{"expression":{"id":4762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4755,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19466:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4756,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19473:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4757,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"19479:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19473:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4759,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19472:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4760,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"19492:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19472:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19466:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4763,"nodeType":"ExpressionStatement","src":"19466:32:19"},{"expression":{"id":4768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4764,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4722,"src":"19512:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4765,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19525:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"37","id":4766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19531:1:19","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"19525:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19512:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4769,"nodeType":"ExpressionStatement","src":"19512:20:19"},{"expression":{"id":4777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4770,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19547:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4771,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19554:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4772,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"19560:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19554:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4774,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19553:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4775,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"19573:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19553:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19547:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4778,"nodeType":"ExpressionStatement","src":"19547:32:19"},{"expression":{"id":4783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4779,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4722,"src":"19593:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4780,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19606:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"39","id":4781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19612:1:19","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"src":"19606:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19593:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4784,"nodeType":"ExpressionStatement","src":"19593:20:19"},{"expression":{"id":4792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4785,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19628:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4786,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19635:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4787,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"19641:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19635:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4789,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19634:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4790,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"19654:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19634:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19628:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4793,"nodeType":"ExpressionStatement","src":"19628:32:19"},{"expression":{"id":4798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4794,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4722,"src":"19674:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4795,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"19687:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3131","id":4796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19693:2:19","typeDescriptions":{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},"value":"11"},"src":"19687:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19674:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4799,"nodeType":"ExpressionStatement","src":"19674:21:19"},{"expression":{"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4800,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4722,"src":"19866:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"32","id":4801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19879:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"19866:14:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4803,"nodeType":"ExpressionStatement","src":"19866:14:19"},{"assignments":[4805],"declarations":[{"constant":false,"id":4805,"mutability":"mutable","name":"result","nameLocation":"20169:6:19","nodeType":"VariableDeclaration","scope":4819,"src":"20162:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4804,"name":"int256","nodeType":"ElementaryTypeName","src":"20162:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4812,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4806,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"20179:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4807,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4722,"src":"20185:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20179:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4809,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20178:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":4810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20198:3:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"20178:23:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"20162:39:19"},{"expression":{"condition":{"id":4813,"name":"negativeExponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4448,"src":"20303:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4816,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4805,"src":"20332:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"20303:35:19","trueExpression":{"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"20322:7:19","subExpression":{"id":4814,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4805,"src":"20323:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4446,"id":4818,"nodeType":"Return","src":"20296:42:19"}]}]},"documentation":{"id":4440,"nodeType":"StructuredDocumentation","src":"14678:88:19","text":"@dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument."},"id":4821,"implemented":true,"kind":"function","modifiers":[],"name":"_ln","nameLocation":"14780:3:19","nodeType":"FunctionDefinition","parameters":{"id":4443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4442,"mutability":"mutable","name":"a","nameLocation":"14791:1:19","nodeType":"VariableDeclaration","scope":4821,"src":"14784:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4441,"name":"int256","nodeType":"ElementaryTypeName","src":"14784:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"14783:10:19"},"returnParameters":{"id":4446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4821,"src":"14816:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4444,"name":"int256","nodeType":"ElementaryTypeName","src":"14816:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"14815:8:19"},"scope":4977,"src":"14771:5584:19","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":4975,"nodeType":"Block","src":"20678:1804:19","statements":[{"id":4974,"nodeType":"UncheckedBlock","src":"20892:1584:19","statements":[{"expression":{"id":4831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4829,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"20916:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"id":4830,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"20921:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20916:11:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4832,"nodeType":"ExpressionStatement","src":"20916:11:19"},{"assignments":[4834],"declarations":[{"constant":false,"id":4834,"mutability":"mutable","name":"z","nameLocation":"21315:1:19","nodeType":"VariableDeclaration","scope":4974,"src":"21308:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4833,"name":"int256","nodeType":"ElementaryTypeName","src":"21308:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4847,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4835,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"21321:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4836,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"21325:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21321:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4838,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21320:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4839,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"21335:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21320:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4841,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21319:23:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4842,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"21346:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4843,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"21350:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21346:10:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4845,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21345:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21319:38:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"21308:49:19"},{"assignments":[4849],"declarations":[{"constant":false,"id":4849,"mutability":"mutable","name":"z_squared","nameLocation":"21378:9:19","nodeType":"VariableDeclaration","scope":4974,"src":"21371:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4848,"name":"int256","nodeType":"ElementaryTypeName","src":"21371:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4856,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4850,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"21391:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4851,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"21395:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21391:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4853,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21390:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4854,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"21400:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21390:16:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"21371:35:19"},{"assignments":[4858],"declarations":[{"constant":false,"id":4858,"mutability":"mutable","name":"num","nameLocation":"21502:3:19","nodeType":"VariableDeclaration","scope":4974,"src":"21495:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4857,"name":"int256","nodeType":"ElementaryTypeName","src":"21495:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4860,"initialValue":{"id":4859,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"21508:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"21495:14:19"},{"assignments":[4862],"declarations":[{"constant":false,"id":4862,"mutability":"mutable","name":"seriesSum","nameLocation":"21638:9:19","nodeType":"VariableDeclaration","scope":4974,"src":"21631:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4861,"name":"int256","nodeType":"ElementaryTypeName","src":"21631:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4864,"initialValue":{"id":4863,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"21650:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"21631:22:19"},{"expression":{"id":4872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4865,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"21732:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4866,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"21739:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4867,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"21745:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21739:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4869,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21738:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4870,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"21758:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21738:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21732:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4873,"nodeType":"ExpressionStatement","src":"21732:32:19"},{"expression":{"id":4878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4874,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"21778:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4875,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"21791:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"33","id":4876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21797:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"21791:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21778:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4879,"nodeType":"ExpressionStatement","src":"21778:20:19"},{"expression":{"id":4887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4880,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"21813:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4881,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"21820:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4882,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"21826:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21820:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4884,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21819:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4885,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"21839:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21819:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21813:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4888,"nodeType":"ExpressionStatement","src":"21813:32:19"},{"expression":{"id":4893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4889,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"21859:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4890,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"21872:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"35","id":4891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21878:1:19","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"21872:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21859:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4894,"nodeType":"ExpressionStatement","src":"21859:20:19"},{"expression":{"id":4902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4895,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"21894:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4896,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"21901:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4897,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"21907:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21901:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4899,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21900:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4900,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"21920:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21900:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21894:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4903,"nodeType":"ExpressionStatement","src":"21894:32:19"},{"expression":{"id":4908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4904,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"21940:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4905,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"21953:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"37","id":4906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21959:1:19","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"21953:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21940:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4909,"nodeType":"ExpressionStatement","src":"21940:20:19"},{"expression":{"id":4917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4910,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"21975:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4911,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"21982:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4912,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"21988:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21982:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4914,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21981:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4915,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"22001:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21981:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21975:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4918,"nodeType":"ExpressionStatement","src":"21975:32:19"},{"expression":{"id":4923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4919,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"22021:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4920,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"22034:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"39","id":4921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22040:1:19","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"src":"22034:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22021:20:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4924,"nodeType":"ExpressionStatement","src":"22021:20:19"},{"expression":{"id":4932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4925,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"22056:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4926,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"22063:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4927,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"22069:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22063:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4929,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22062:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4930,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"22082:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22062:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22056:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4933,"nodeType":"ExpressionStatement","src":"22056:32:19"},{"expression":{"id":4938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4934,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"22102:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4935,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"22115:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3131","id":4936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22121:2:19","typeDescriptions":{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},"value":"11"},"src":"22115:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22102:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4939,"nodeType":"ExpressionStatement","src":"22102:21:19"},{"expression":{"id":4947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4940,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"22138:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4941,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"22145:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4942,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"22151:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22145:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4944,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22144:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4945,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"22164:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22144:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22138:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4948,"nodeType":"ExpressionStatement","src":"22138:32:19"},{"expression":{"id":4953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4949,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"22184:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4950,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"22197:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3133","id":4951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22203:2:19","typeDescriptions":{"typeIdentifier":"t_rational_13_by_1","typeString":"int_const 13"},"value":"13"},"src":"22197:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22184:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4954,"nodeType":"ExpressionStatement","src":"22184:21:19"},{"expression":{"id":4962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4955,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"22220:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4956,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"22227:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4957,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"22233:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22227:15:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4959,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22226:17:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4960,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"22246:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22226:26:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22220:32:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4963,"nodeType":"ExpressionStatement","src":"22220:32:19"},{"expression":{"id":4968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4964,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"22266:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4965,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"22279:3:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3135","id":4966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22285:2:19","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"15"},"src":"22279:8:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22266:21:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4969,"nodeType":"ExpressionStatement","src":"22266:21:19"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4970,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"22452:9:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":4971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22464:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"22452:13:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4828,"id":4973,"nodeType":"Return","src":"22445:20:19"}]}]},"documentation":{"id":4822,"nodeType":"StructuredDocumentation","src":"20361:256:19","text":" @dev Internal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\n for x close to one.\n Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND."},"id":4976,"implemented":true,"kind":"function","modifiers":[],"name":"_ln_36","nameLocation":"20631:6:19","nodeType":"FunctionDefinition","parameters":{"id":4825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4824,"mutability":"mutable","name":"x","nameLocation":"20645:1:19","nodeType":"VariableDeclaration","scope":4976,"src":"20638:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4823,"name":"int256","nodeType":"ElementaryTypeName","src":"20638:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20637:10:19"},"returnParameters":{"id":4828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4827,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4976,"src":"20670:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4826,"name":"int256","nodeType":"ElementaryTypeName","src":"20670:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20669:8:19"},"scope":4977,"src":"20622:1860:19","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":4978,"src":"595:21889:19","usedErrors":[3627,3630,3633,3636,3639],"usedEvents":[]}],"src":"33:22452:19"},"id":19},"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol":{"ast":{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol","exportedSymbols":{"ReentrancyGuardTransient":[5046],"StorageSlotExtension":[5259]},"id":5047,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4979,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"33:24:20"},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol","file":"./StorageSlotExtension.sol","id":4981,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5047,"sourceUnit":5260,"src":"59:66:20","symbolAliases":[{"foreign":{"id":4980,"name":"StorageSlotExtension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"68:20:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuardTransient","contractDependencies":[],"contractKind":"contract","documentation":{"id":4982,"nodeType":"StructuredDocumentation","src":"127:155:20","text":" @notice Variant of {ReentrancyGuard} that uses transient storage.\n @dev NOTE: This variant only works on networks where EIP-1153 is available."},"fullyImplemented":true,"id":5046,"linearizedBaseContracts":[5046],"name":"ReentrancyGuardTransient","nameLocation":"301:24:20","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4984,"libraryName":{"id":4983,"name":"StorageSlotExtension","nameLocations":["338:20:20"],"nodeType":"IdentifierPath","referencedDeclaration":5259,"src":"338:20:20"},"nodeType":"UsingForDirective","src":"332:33:20"},{"constant":true,"id":4987,"mutability":"constant","name":"_REENTRANCY_GUARD_STORAGE","nameLocation":"515:25:20","nodeType":"VariableDeclaration","scope":5046,"src":"490:127:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4985,"name":"bytes32","nodeType":"ElementaryTypeName","src":"490:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307839623737396231373432326430646639323232333031386233326234643166613436653037313732336436383137653234383664303033626563633535663030","id":4986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"551:66:20","typeDescriptions":{"typeIdentifier":"t_rational_70319816728846589445362000750570655803700195216363692647688146666176345628416_by_1","typeString":"int_const 7031...(69 digits omitted)...8416"},"value":"0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00"},"visibility":"private"},{"documentation":{"id":4988,"nodeType":"StructuredDocumentation","src":"624:40:20","text":"@notice Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":4990,"name":"ReentrancyGuardReentrantCall","nameLocation":"675:28:20","nodeType":"ErrorDefinition","parameters":{"id":4989,"nodeType":"ParameterList","parameters":[],"src":"703:2:20"},"src":"669:37:20"},{"body":{"id":5000,"nodeType":"Block","src":"1107:79:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4993,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5020,"src":"1117:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1117:21:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4995,"nodeType":"ExpressionStatement","src":"1117:21:20"},{"id":4996,"nodeType":"PlaceholderStatement","src":"1148:1:20"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4997,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5032,"src":"1159:18:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1159:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4999,"nodeType":"ExpressionStatement","src":"1159:20:20"}]},"documentation":{"id":4991,"nodeType":"StructuredDocumentation","src":"712:366:20","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":5001,"name":"nonReentrant","nameLocation":"1092:12:20","nodeType":"ModifierDefinition","parameters":{"id":4992,"nodeType":"ParameterList","parameters":[],"src":"1104:2:20"},"src":"1083:103:20","virtual":false,"visibility":"internal"},{"body":{"id":5019,"nodeType":"Block","src":"1231:310:20","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":5004,"name":"_reentrancyGuardEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5045,"src":"1320:23:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":5005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1320:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5010,"nodeType":"IfStatement","src":"1316:93:20","trueBody":{"id":5009,"nodeType":"Block","src":"1347:62:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5006,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4990,"src":"1368:28:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1368:30:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5008,"nodeType":"RevertStatement","src":"1361:37:20"}]}},{"expression":{"arguments":[{"hexValue":"74727565","id":5016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1529:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5011,"name":"_REENTRANCY_GUARD_STORAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"1484:25:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1510:9:20","memberName":"asBoolean","nodeType":"MemberAccess","referencedDeclaration":5097,"src":"1484:35:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_userDefinedValueType$_BooleanSlotType_$5082_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.BooleanSlotType)"}},"id":5014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1484:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$5082","typeString":"StorageSlotExtension.BooleanSlotType"}},"id":5015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1522:6:20","memberName":"tstore","nodeType":"MemberAccess","referencedDeclaration":5192,"src":"1484:44:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_userDefinedValueType$_BooleanSlotType_$5082_$_t_bool_$returns$__$attached_to$_t_userDefinedValueType$_BooleanSlotType_$5082_$","typeString":"function (StorageSlotExtension.BooleanSlotType,bool)"}},"id":5017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1484:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5018,"nodeType":"ExpressionStatement","src":"1484:50:20"}]},"id":5020,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"1201:19:20","nodeType":"FunctionDefinition","parameters":{"id":5002,"nodeType":"ParameterList","parameters":[],"src":"1220:2:20"},"returnParameters":{"id":5003,"nodeType":"ParameterList","parameters":[],"src":"1231:0:20"},"scope":5046,"src":"1192:349:20","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":5031,"nodeType":"Block","src":"1585:68:20","statements":[{"expression":{"arguments":[{"hexValue":"66616c7365","id":5028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1640:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5023,"name":"_REENTRANCY_GUARD_STORAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"1595:25:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1621:9:20","memberName":"asBoolean","nodeType":"MemberAccess","referencedDeclaration":5097,"src":"1595:35:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_userDefinedValueType$_BooleanSlotType_$5082_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.BooleanSlotType)"}},"id":5026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$5082","typeString":"StorageSlotExtension.BooleanSlotType"}},"id":5027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1633:6:20","memberName":"tstore","nodeType":"MemberAccess","referencedDeclaration":5192,"src":"1595:44:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_userDefinedValueType$_BooleanSlotType_$5082_$_t_bool_$returns$__$attached_to$_t_userDefinedValueType$_BooleanSlotType_$5082_$","typeString":"function (StorageSlotExtension.BooleanSlotType,bool)"}},"id":5029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:51:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5030,"nodeType":"ExpressionStatement","src":"1595:51:20"}]},"id":5032,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"1556:18:20","nodeType":"FunctionDefinition","parameters":{"id":5021,"nodeType":"ParameterList","parameters":[],"src":"1574:2:20"},"returnParameters":{"id":5022,"nodeType":"ParameterList","parameters":[],"src":"1585:0:20"},"scope":5046,"src":"1547:106:20","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":5044,"nodeType":"Block","src":"1896:69:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5038,"name":"_REENTRANCY_GUARD_STORAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"1913:25:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1939:9:20","memberName":"asBoolean","nodeType":"MemberAccess","referencedDeclaration":5097,"src":"1913:35:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_userDefinedValueType$_BooleanSlotType_$5082_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.BooleanSlotType)"}},"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1913:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$5082","typeString":"StorageSlotExtension.BooleanSlotType"}},"id":5041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1951:5:20","memberName":"tload","nodeType":"MemberAccess","referencedDeclaration":5181,"src":"1913:43:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_BooleanSlotType_$5082_$returns$_t_bool_$attached_to$_t_userDefinedValueType$_BooleanSlotType_$5082_$","typeString":"function (StorageSlotExtension.BooleanSlotType) view returns (bool)"}},"id":5042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1913:45:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5037,"id":5043,"nodeType":"Return","src":"1906:52:20"}]},"documentation":{"id":5033,"nodeType":"StructuredDocumentation","src":"1659:168:20","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":5045,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"1841:23:20","nodeType":"FunctionDefinition","parameters":{"id":5034,"nodeType":"ParameterList","parameters":[],"src":"1864:2:20"},"returnParameters":{"id":5037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5036,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5045,"src":"1890:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5035,"name":"bool","nodeType":"ElementaryTypeName","src":"1890:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1889:6:20"},"scope":5046,"src":"1832:133:20","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5047,"src":"283:1684:20","usedErrors":[4990],"usedEvents":[]}],"src":"33:1935:20"},"id":20},"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol":{"ast":{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol","exportedSymbols":{"StorageSlotExtension":[5259]},"id":5260,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5048,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"33:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotExtension","contractDependencies":[],"contractKind":"library","documentation":{"id":5049,"nodeType":"StructuredDocumentation","src":"59:218:21","text":" @notice Library for reading and writing primitive types to specific storage slots. Based on OpenZeppelin; just adding support for int256.\n @dev TIP: Consider using this library along with {SlotDerivation}."},"fullyImplemented":true,"id":5259,"linearizedBaseContracts":[5259],"name":"StorageSlotExtension","nameLocation":"286:20:21","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotExtension.Int256Slot","id":5052,"members":[{"constant":false,"id":5051,"mutability":"mutable","name":"value","nameLocation":"348:5:21","nodeType":"VariableDeclaration","scope":5052,"src":"341:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5050,"name":"int256","nodeType":"ElementaryTypeName","src":"341:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"name":"Int256Slot","nameLocation":"320:10:21","nodeType":"StructDefinition","scope":5259,"src":"313:47:21","visibility":"public"},{"body":{"id":5062,"nodeType":"Block","src":"524:106:21","statements":[{"AST":{"nativeSrc":"586:38:21","nodeType":"YulBlock","src":"586:38:21","statements":[{"nativeSrc":"600:14:21","nodeType":"YulAssignment","src":"600:14:21","value":{"name":"slot","nativeSrc":"610:4:21","nodeType":"YulIdentifier","src":"610:4:21"},"variableNames":[{"name":"r.slot","nativeSrc":"600:6:21","nodeType":"YulIdentifier","src":"600:6:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":5059,"isOffset":false,"isSlot":true,"src":"600:6:21","suffix":"slot","valueSize":1},{"declaration":5055,"isOffset":false,"isSlot":false,"src":"610:4:21","valueSize":1}],"id":5061,"nodeType":"InlineAssembly","src":"577:47:21"}]},"documentation":{"id":5053,"nodeType":"StructuredDocumentation","src":"366:71:21","text":"@dev Returns an `Int256Slot` with member `value` located at `slot`."},"id":5063,"implemented":true,"kind":"function","modifiers":[],"name":"getInt256Slot","nameLocation":"451:13:21","nodeType":"FunctionDefinition","parameters":{"id":5056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5055,"mutability":"mutable","name":"slot","nameLocation":"473:4:21","nodeType":"VariableDeclaration","scope":5063,"src":"465:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5054,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"464:14:21"},"returnParameters":{"id":5060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5059,"mutability":"mutable","name":"r","nameLocation":"521:1:21","nodeType":"VariableDeclaration","scope":5063,"src":"502:20:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$5052_storage_ptr","typeString":"struct StorageSlotExtension.Int256Slot"},"typeName":{"id":5058,"nodeType":"UserDefinedTypeName","pathNode":{"id":5057,"name":"Int256Slot","nameLocations":["502:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":5052,"src":"502:10:21"},"referencedDeclaration":5052,"src":"502:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$5052_storage_ptr","typeString":"struct StorageSlotExtension.Int256Slot"}},"visibility":"internal"}],"src":"501:22:21"},"scope":5259,"src":"442:188:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"canonicalName":"StorageSlotExtension.AddressSlotType","id":5065,"name":"AddressSlotType","nameLocation":"709:15:21","nodeType":"UserDefinedValueTypeDefinition","src":"704:32:21","underlyingType":{"id":5064,"name":"bytes32","nodeType":"ElementaryTypeName","src":"728:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":5079,"nodeType":"Block","src":"873:50:21","statements":[{"expression":{"arguments":[{"id":5076,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5068,"src":"911:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5074,"name":"AddressSlotType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"890:15:21","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_AddressSlotType_$5065_$","typeString":"type(StorageSlotExtension.AddressSlotType)"}},"id":5075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"906:4:21","memberName":"wrap","nodeType":"MemberAccess","src":"890:20:21","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_AddressSlotType_$5065_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.AddressSlotType)"}},"id":5077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"890:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$5065","typeString":"StorageSlotExtension.AddressSlotType"}},"functionReturnParameters":5073,"id":5078,"nodeType":"Return","src":"883:33:21"}]},"documentation":{"id":5066,"nodeType":"StructuredDocumentation","src":"742:53:21","text":"@dev Cast an arbitrary slot to a AddressSlotType."},"id":5080,"implemented":true,"kind":"function","modifiers":[],"name":"asAddress","nameLocation":"809:9:21","nodeType":"FunctionDefinition","parameters":{"id":5069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5068,"mutability":"mutable","name":"slot","nameLocation":"827:4:21","nodeType":"VariableDeclaration","scope":5080,"src":"819:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5067,"name":"bytes32","nodeType":"ElementaryTypeName","src":"819:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"818:14:21"},"returnParameters":{"id":5073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5072,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5080,"src":"856:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$5065","typeString":"StorageSlotExtension.AddressSlotType"},"typeName":{"id":5071,"nodeType":"UserDefinedTypeName","pathNode":{"id":5070,"name":"AddressSlotType","nameLocations":["856:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":5065,"src":"856:15:21"},"referencedDeclaration":5065,"src":"856:15:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$5065","typeString":"StorageSlotExtension.AddressSlotType"}},"visibility":"internal"}],"src":"855:17:21"},"scope":5259,"src":"800:123:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"canonicalName":"StorageSlotExtension.BooleanSlotType","id":5082,"name":"BooleanSlotType","nameLocation":"1001:15:21","nodeType":"UserDefinedValueTypeDefinition","src":"996:32:21","underlyingType":{"id":5081,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1020:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":5096,"nodeType":"Block","src":"1165:50:21","statements":[{"expression":{"arguments":[{"id":5093,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5085,"src":"1203:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5091,"name":"BooleanSlotType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"1182:15:21","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_BooleanSlotType_$5082_$","typeString":"type(StorageSlotExtension.BooleanSlotType)"}},"id":5092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1198:4:21","memberName":"wrap","nodeType":"MemberAccess","src":"1182:20:21","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_BooleanSlotType_$5082_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.BooleanSlotType)"}},"id":5094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1182:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$5082","typeString":"StorageSlotExtension.BooleanSlotType"}},"functionReturnParameters":5090,"id":5095,"nodeType":"Return","src":"1175:33:21"}]},"documentation":{"id":5083,"nodeType":"StructuredDocumentation","src":"1034:53:21","text":"@dev Cast an arbitrary slot to a BooleanSlotType."},"id":5097,"implemented":true,"kind":"function","modifiers":[],"name":"asBoolean","nameLocation":"1101:9:21","nodeType":"FunctionDefinition","parameters":{"id":5086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5085,"mutability":"mutable","name":"slot","nameLocation":"1119:4:21","nodeType":"VariableDeclaration","scope":5097,"src":"1111:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5084,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1111:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1110:14:21"},"returnParameters":{"id":5090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5089,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5097,"src":"1148:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$5082","typeString":"StorageSlotExtension.BooleanSlotType"},"typeName":{"id":5088,"nodeType":"UserDefinedTypeName","pathNode":{"id":5087,"name":"BooleanSlotType","nameLocations":["1148:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":5082,"src":"1148:15:21"},"referencedDeclaration":5082,"src":"1148:15:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$5082","typeString":"StorageSlotExtension.BooleanSlotType"}},"visibility":"internal"}],"src":"1147:17:21"},"scope":5259,"src":"1092:123:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"canonicalName":"StorageSlotExtension.Bytes32SlotType","id":5099,"name":"Bytes32SlotType","nameLocation":"1293:15:21","nodeType":"UserDefinedValueTypeDefinition","src":"1288:32:21","underlyingType":{"id":5098,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1312:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":5113,"nodeType":"Block","src":"1457:50:21","statements":[{"expression":{"arguments":[{"id":5110,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5102,"src":"1495:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5108,"name":"Bytes32SlotType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5099,"src":"1474:15:21","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Bytes32SlotType_$5099_$","typeString":"type(StorageSlotExtension.Bytes32SlotType)"}},"id":5109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1490:4:21","memberName":"wrap","nodeType":"MemberAccess","src":"1474:20:21","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_Bytes32SlotType_$5099_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.Bytes32SlotType)"}},"id":5111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1474:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$5099","typeString":"StorageSlotExtension.Bytes32SlotType"}},"functionReturnParameters":5107,"id":5112,"nodeType":"Return","src":"1467:33:21"}]},"documentation":{"id":5100,"nodeType":"StructuredDocumentation","src":"1326:53:21","text":"@dev Cast an arbitrary slot to a Bytes32SlotType."},"id":5114,"implemented":true,"kind":"function","modifiers":[],"name":"asBytes32","nameLocation":"1393:9:21","nodeType":"FunctionDefinition","parameters":{"id":5103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5102,"mutability":"mutable","name":"slot","nameLocation":"1411:4:21","nodeType":"VariableDeclaration","scope":5114,"src":"1403:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5101,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1403:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1402:14:21"},"returnParameters":{"id":5107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5106,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5114,"src":"1440:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$5099","typeString":"StorageSlotExtension.Bytes32SlotType"},"typeName":{"id":5105,"nodeType":"UserDefinedTypeName","pathNode":{"id":5104,"name":"Bytes32SlotType","nameLocations":["1440:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":5099,"src":"1440:15:21"},"referencedDeclaration":5099,"src":"1440:15:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$5099","typeString":"StorageSlotExtension.Bytes32SlotType"}},"visibility":"internal"}],"src":"1439:17:21"},"scope":5259,"src":"1384:123:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"canonicalName":"StorageSlotExtension.Uint256SlotType","id":5116,"name":"Uint256SlotType","nameLocation":"1585:15:21","nodeType":"UserDefinedValueTypeDefinition","src":"1580:32:21","underlyingType":{"id":5115,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1604:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":5130,"nodeType":"Block","src":"1749:50:21","statements":[{"expression":{"arguments":[{"id":5127,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5119,"src":"1787:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5125,"name":"Uint256SlotType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"1766:15:21","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Uint256SlotType_$5116_$","typeString":"type(StorageSlotExtension.Uint256SlotType)"}},"id":5126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1782:4:21","memberName":"wrap","nodeType":"MemberAccess","src":"1766:20:21","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_Uint256SlotType_$5116_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.Uint256SlotType)"}},"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1766:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$5116","typeString":"StorageSlotExtension.Uint256SlotType"}},"functionReturnParameters":5124,"id":5129,"nodeType":"Return","src":"1759:33:21"}]},"documentation":{"id":5117,"nodeType":"StructuredDocumentation","src":"1618:53:21","text":"@dev Cast an arbitrary slot to a Uint256SlotType."},"id":5131,"implemented":true,"kind":"function","modifiers":[],"name":"asUint256","nameLocation":"1685:9:21","nodeType":"FunctionDefinition","parameters":{"id":5120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5119,"mutability":"mutable","name":"slot","nameLocation":"1703:4:21","nodeType":"VariableDeclaration","scope":5131,"src":"1695:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5118,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1695:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1694:14:21"},"returnParameters":{"id":5124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5123,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5131,"src":"1732:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$5116","typeString":"StorageSlotExtension.Uint256SlotType"},"typeName":{"id":5122,"nodeType":"UserDefinedTypeName","pathNode":{"id":5121,"name":"Uint256SlotType","nameLocations":["1732:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":5116,"src":"1732:15:21"},"referencedDeclaration":5116,"src":"1732:15:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$5116","typeString":"StorageSlotExtension.Uint256SlotType"}},"visibility":"internal"}],"src":"1731:17:21"},"scope":5259,"src":"1676:123:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"canonicalName":"StorageSlotExtension.Int256SlotType","id":5133,"name":"Int256SlotType","nameLocation":"1877:14:21","nodeType":"UserDefinedValueTypeDefinition","src":"1872:31:21","underlyingType":{"id":5132,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1895:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":5147,"nodeType":"Block","src":"2038:49:21","statements":[{"expression":{"arguments":[{"id":5144,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5136,"src":"2075:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5142,"name":"Int256SlotType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5133,"src":"2055:14:21","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Int256SlotType_$5133_$","typeString":"type(StorageSlotExtension.Int256SlotType)"}},"id":5143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2070:4:21","memberName":"wrap","nodeType":"MemberAccess","src":"2055:19:21","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_Int256SlotType_$5133_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.Int256SlotType)"}},"id":5145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2055:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$5133","typeString":"StorageSlotExtension.Int256SlotType"}},"functionReturnParameters":5141,"id":5146,"nodeType":"Return","src":"2048:32:21"}]},"documentation":{"id":5134,"nodeType":"StructuredDocumentation","src":"1909:53:21","text":"@dev Cast an arbitrary slot to an Int256SlotType."},"id":5148,"implemented":true,"kind":"function","modifiers":[],"name":"asInt256","nameLocation":"1976:8:21","nodeType":"FunctionDefinition","parameters":{"id":5137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5136,"mutability":"mutable","name":"slot","nameLocation":"1993:4:21","nodeType":"VariableDeclaration","scope":5148,"src":"1985:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1985:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1984:14:21"},"returnParameters":{"id":5141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5140,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5148,"src":"2022:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$5133","typeString":"StorageSlotExtension.Int256SlotType"},"typeName":{"id":5139,"nodeType":"UserDefinedTypeName","pathNode":{"id":5138,"name":"Int256SlotType","nameLocations":["2022:14:21"],"nodeType":"IdentifierPath","referencedDeclaration":5133,"src":"2022:14:21"},"referencedDeclaration":5133,"src":"2022:14:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$5133","typeString":"StorageSlotExtension.Int256SlotType"}},"visibility":"internal"}],"src":"2021:16:21"},"scope":5259,"src":"1967:120:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5158,"nodeType":"Block","src":"2242:112:21","statements":[{"AST":{"nativeSrc":"2304:44:21","nodeType":"YulBlock","src":"2304:44:21","statements":[{"nativeSrc":"2318:20:21","nodeType":"YulAssignment","src":"2318:20:21","value":{"arguments":[{"name":"slot","nativeSrc":"2333:4:21","nodeType":"YulIdentifier","src":"2333:4:21"}],"functionName":{"name":"tload","nativeSrc":"2327:5:21","nodeType":"YulIdentifier","src":"2327:5:21"},"nativeSrc":"2327:11:21","nodeType":"YulFunctionCall","src":"2327:11:21"},"variableNames":[{"name":"value","nativeSrc":"2318:5:21","nodeType":"YulIdentifier","src":"2318:5:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":5152,"isOffset":false,"isSlot":false,"src":"2333:4:21","valueSize":1},{"declaration":5155,"isOffset":false,"isSlot":false,"src":"2318:5:21","valueSize":1}],"id":5157,"nodeType":"InlineAssembly","src":"2295:53:21"}]},"documentation":{"id":5149,"nodeType":"StructuredDocumentation","src":"2093:69:21","text":"@dev Load the value held at location `slot` in transient storage."},"id":5159,"implemented":true,"kind":"function","modifiers":[],"name":"tload","nameLocation":"2176:5:21","nodeType":"FunctionDefinition","parameters":{"id":5153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5152,"mutability":"mutable","name":"slot","nameLocation":"2198:4:21","nodeType":"VariableDeclaration","scope":5159,"src":"2182:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$5065","typeString":"StorageSlotExtension.AddressSlotType"},"typeName":{"id":5151,"nodeType":"UserDefinedTypeName","pathNode":{"id":5150,"name":"AddressSlotType","nameLocations":["2182:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":5065,"src":"2182:15:21"},"referencedDeclaration":5065,"src":"2182:15:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$5065","typeString":"StorageSlotExtension.AddressSlotType"}},"visibility":"internal"}],"src":"2181:22:21"},"returnParameters":{"id":5156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5155,"mutability":"mutable","name":"value","nameLocation":"2235:5:21","nodeType":"VariableDeclaration","scope":5159,"src":"2227:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5154,"name":"address","nodeType":"ElementaryTypeName","src":"2227:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2226:15:21"},"scope":5259,"src":"2167:187:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5169,"nodeType":"Block","src":"2490:111:21","statements":[{"AST":{"nativeSrc":"2552:43:21","nodeType":"YulBlock","src":"2552:43:21","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"2573:4:21","nodeType":"YulIdentifier","src":"2573:4:21"},{"name":"value","nativeSrc":"2579:5:21","nodeType":"YulIdentifier","src":"2579:5:21"}],"functionName":{"name":"tstore","nativeSrc":"2566:6:21","nodeType":"YulIdentifier","src":"2566:6:21"},"nativeSrc":"2566:19:21","nodeType":"YulFunctionCall","src":"2566:19:21"},"nativeSrc":"2566:19:21","nodeType":"YulExpressionStatement","src":"2566:19:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":5163,"isOffset":false,"isSlot":false,"src":"2573:4:21","valueSize":1},{"declaration":5165,"isOffset":false,"isSlot":false,"src":"2579:5:21","valueSize":1}],"id":5168,"nodeType":"InlineAssembly","src":"2543:52:21"}]},"documentation":{"id":5160,"nodeType":"StructuredDocumentation","src":"2360:63:21","text":"@dev Store `value` at location `slot` in transient storage."},"id":5170,"implemented":true,"kind":"function","modifiers":[],"name":"tstore","nameLocation":"2437:6:21","nodeType":"FunctionDefinition","parameters":{"id":5166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5163,"mutability":"mutable","name":"slot","nameLocation":"2460:4:21","nodeType":"VariableDeclaration","scope":5170,"src":"2444:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$5065","typeString":"StorageSlotExtension.AddressSlotType"},"typeName":{"id":5162,"nodeType":"UserDefinedTypeName","pathNode":{"id":5161,"name":"AddressSlotType","nameLocations":["2444:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":5065,"src":"2444:15:21"},"referencedDeclaration":5065,"src":"2444:15:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$5065","typeString":"StorageSlotExtension.AddressSlotType"}},"visibility":"internal"},{"constant":false,"id":5165,"mutability":"mutable","name":"value","nameLocation":"2474:5:21","nodeType":"VariableDeclaration","scope":5170,"src":"2466:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5164,"name":"address","nodeType":"ElementaryTypeName","src":"2466:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2443:37:21"},"returnParameters":{"id":5167,"nodeType":"ParameterList","parameters":[],"src":"2490:0:21"},"scope":5259,"src":"2428:173:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5180,"nodeType":"Block","src":"2753:112:21","statements":[{"AST":{"nativeSrc":"2815:44:21","nodeType":"YulBlock","src":"2815:44:21","statements":[{"nativeSrc":"2829:20:21","nodeType":"YulAssignment","src":"2829:20:21","value":{"arguments":[{"name":"slot","nativeSrc":"2844:4:21","nodeType":"YulIdentifier","src":"2844:4:21"}],"functionName":{"name":"tload","nativeSrc":"2838:5:21","nodeType":"YulIdentifier","src":"2838:5:21"},"nativeSrc":"2838:11:21","nodeType":"YulFunctionCall","src":"2838:11:21"},"variableNames":[{"name":"value","nativeSrc":"2829:5:21","nodeType":"YulIdentifier","src":"2829:5:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":5174,"isOffset":false,"isSlot":false,"src":"2844:4:21","valueSize":1},{"declaration":5177,"isOffset":false,"isSlot":false,"src":"2829:5:21","valueSize":1}],"id":5179,"nodeType":"InlineAssembly","src":"2806:53:21"}]},"documentation":{"id":5171,"nodeType":"StructuredDocumentation","src":"2607:69:21","text":"@dev Load the value held at location `slot` in transient storage."},"id":5181,"implemented":true,"kind":"function","modifiers":[],"name":"tload","nameLocation":"2690:5:21","nodeType":"FunctionDefinition","parameters":{"id":5175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5174,"mutability":"mutable","name":"slot","nameLocation":"2712:4:21","nodeType":"VariableDeclaration","scope":5181,"src":"2696:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$5082","typeString":"StorageSlotExtension.BooleanSlotType"},"typeName":{"id":5173,"nodeType":"UserDefinedTypeName","pathNode":{"id":5172,"name":"BooleanSlotType","nameLocations":["2696:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":5082,"src":"2696:15:21"},"referencedDeclaration":5082,"src":"2696:15:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$5082","typeString":"StorageSlotExtension.BooleanSlotType"}},"visibility":"internal"}],"src":"2695:22:21"},"returnParameters":{"id":5178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5177,"mutability":"mutable","name":"value","nameLocation":"2746:5:21","nodeType":"VariableDeclaration","scope":5181,"src":"2741:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5176,"name":"bool","nodeType":"ElementaryTypeName","src":"2741:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2740:12:21"},"scope":5259,"src":"2681:184:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5191,"nodeType":"Block","src":"2998:111:21","statements":[{"AST":{"nativeSrc":"3060:43:21","nodeType":"YulBlock","src":"3060:43:21","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"3081:4:21","nodeType":"YulIdentifier","src":"3081:4:21"},{"name":"value","nativeSrc":"3087:5:21","nodeType":"YulIdentifier","src":"3087:5:21"}],"functionName":{"name":"tstore","nativeSrc":"3074:6:21","nodeType":"YulIdentifier","src":"3074:6:21"},"nativeSrc":"3074:19:21","nodeType":"YulFunctionCall","src":"3074:19:21"},"nativeSrc":"3074:19:21","nodeType":"YulExpressionStatement","src":"3074:19:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":5185,"isOffset":false,"isSlot":false,"src":"3081:4:21","valueSize":1},{"declaration":5187,"isOffset":false,"isSlot":false,"src":"3087:5:21","valueSize":1}],"id":5190,"nodeType":"InlineAssembly","src":"3051:52:21"}]},"documentation":{"id":5182,"nodeType":"StructuredDocumentation","src":"2871:63:21","text":"@dev Store `value` at location `slot` in transient storage."},"id":5192,"implemented":true,"kind":"function","modifiers":[],"name":"tstore","nameLocation":"2948:6:21","nodeType":"FunctionDefinition","parameters":{"id":5188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5185,"mutability":"mutable","name":"slot","nameLocation":"2971:4:21","nodeType":"VariableDeclaration","scope":5192,"src":"2955:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$5082","typeString":"StorageSlotExtension.BooleanSlotType"},"typeName":{"id":5184,"nodeType":"UserDefinedTypeName","pathNode":{"id":5183,"name":"BooleanSlotType","nameLocations":["2955:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":5082,"src":"2955:15:21"},"referencedDeclaration":5082,"src":"2955:15:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$5082","typeString":"StorageSlotExtension.BooleanSlotType"}},"visibility":"internal"},{"constant":false,"id":5187,"mutability":"mutable","name":"value","nameLocation":"2982:5:21","nodeType":"VariableDeclaration","scope":5192,"src":"2977:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5186,"name":"bool","nodeType":"ElementaryTypeName","src":"2977:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2954:34:21"},"returnParameters":{"id":5189,"nodeType":"ParameterList","parameters":[],"src":"2998:0:21"},"scope":5259,"src":"2939:170:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5202,"nodeType":"Block","src":"3264:112:21","statements":[{"AST":{"nativeSrc":"3326:44:21","nodeType":"YulBlock","src":"3326:44:21","statements":[{"nativeSrc":"3340:20:21","nodeType":"YulAssignment","src":"3340:20:21","value":{"arguments":[{"name":"slot","nativeSrc":"3355:4:21","nodeType":"YulIdentifier","src":"3355:4:21"}],"functionName":{"name":"tload","nativeSrc":"3349:5:21","nodeType":"YulIdentifier","src":"3349:5:21"},"nativeSrc":"3349:11:21","nodeType":"YulFunctionCall","src":"3349:11:21"},"variableNames":[{"name":"value","nativeSrc":"3340:5:21","nodeType":"YulIdentifier","src":"3340:5:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":5196,"isOffset":false,"isSlot":false,"src":"3355:4:21","valueSize":1},{"declaration":5199,"isOffset":false,"isSlot":false,"src":"3340:5:21","valueSize":1}],"id":5201,"nodeType":"InlineAssembly","src":"3317:53:21"}]},"documentation":{"id":5193,"nodeType":"StructuredDocumentation","src":"3115:69:21","text":"@dev Load the value held at location `slot` in transient storage."},"id":5203,"implemented":true,"kind":"function","modifiers":[],"name":"tload","nameLocation":"3198:5:21","nodeType":"FunctionDefinition","parameters":{"id":5197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5196,"mutability":"mutable","name":"slot","nameLocation":"3220:4:21","nodeType":"VariableDeclaration","scope":5203,"src":"3204:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$5099","typeString":"StorageSlotExtension.Bytes32SlotType"},"typeName":{"id":5195,"nodeType":"UserDefinedTypeName","pathNode":{"id":5194,"name":"Bytes32SlotType","nameLocations":["3204:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":5099,"src":"3204:15:21"},"referencedDeclaration":5099,"src":"3204:15:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$5099","typeString":"StorageSlotExtension.Bytes32SlotType"}},"visibility":"internal"}],"src":"3203:22:21"},"returnParameters":{"id":5200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5199,"mutability":"mutable","name":"value","nameLocation":"3257:5:21","nodeType":"VariableDeclaration","scope":5203,"src":"3249:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5198,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3249:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3248:15:21"},"scope":5259,"src":"3189:187:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5213,"nodeType":"Block","src":"3512:111:21","statements":[{"AST":{"nativeSrc":"3574:43:21","nodeType":"YulBlock","src":"3574:43:21","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"3595:4:21","nodeType":"YulIdentifier","src":"3595:4:21"},{"name":"value","nativeSrc":"3601:5:21","nodeType":"YulIdentifier","src":"3601:5:21"}],"functionName":{"name":"tstore","nativeSrc":"3588:6:21","nodeType":"YulIdentifier","src":"3588:6:21"},"nativeSrc":"3588:19:21","nodeType":"YulFunctionCall","src":"3588:19:21"},"nativeSrc":"3588:19:21","nodeType":"YulExpressionStatement","src":"3588:19:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":5207,"isOffset":false,"isSlot":false,"src":"3595:4:21","valueSize":1},{"declaration":5209,"isOffset":false,"isSlot":false,"src":"3601:5:21","valueSize":1}],"id":5212,"nodeType":"InlineAssembly","src":"3565:52:21"}]},"documentation":{"id":5204,"nodeType":"StructuredDocumentation","src":"3382:63:21","text":"@dev Store `value` at location `slot` in transient storage."},"id":5214,"implemented":true,"kind":"function","modifiers":[],"name":"tstore","nameLocation":"3459:6:21","nodeType":"FunctionDefinition","parameters":{"id":5210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5207,"mutability":"mutable","name":"slot","nameLocation":"3482:4:21","nodeType":"VariableDeclaration","scope":5214,"src":"3466:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$5099","typeString":"StorageSlotExtension.Bytes32SlotType"},"typeName":{"id":5206,"nodeType":"UserDefinedTypeName","pathNode":{"id":5205,"name":"Bytes32SlotType","nameLocations":["3466:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":5099,"src":"3466:15:21"},"referencedDeclaration":5099,"src":"3466:15:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$5099","typeString":"StorageSlotExtension.Bytes32SlotType"}},"visibility":"internal"},{"constant":false,"id":5209,"mutability":"mutable","name":"value","nameLocation":"3496:5:21","nodeType":"VariableDeclaration","scope":5214,"src":"3488:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5208,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3488:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3465:37:21"},"returnParameters":{"id":5211,"nodeType":"ParameterList","parameters":[],"src":"3512:0:21"},"scope":5259,"src":"3450:173:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5224,"nodeType":"Block","src":"3778:112:21","statements":[{"AST":{"nativeSrc":"3840:44:21","nodeType":"YulBlock","src":"3840:44:21","statements":[{"nativeSrc":"3854:20:21","nodeType":"YulAssignment","src":"3854:20:21","value":{"arguments":[{"name":"slot","nativeSrc":"3869:4:21","nodeType":"YulIdentifier","src":"3869:4:21"}],"functionName":{"name":"tload","nativeSrc":"3863:5:21","nodeType":"YulIdentifier","src":"3863:5:21"},"nativeSrc":"3863:11:21","nodeType":"YulFunctionCall","src":"3863:11:21"},"variableNames":[{"name":"value","nativeSrc":"3854:5:21","nodeType":"YulIdentifier","src":"3854:5:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":5218,"isOffset":false,"isSlot":false,"src":"3869:4:21","valueSize":1},{"declaration":5221,"isOffset":false,"isSlot":false,"src":"3854:5:21","valueSize":1}],"id":5223,"nodeType":"InlineAssembly","src":"3831:53:21"}]},"documentation":{"id":5215,"nodeType":"StructuredDocumentation","src":"3629:69:21","text":"@dev Load the value held at location `slot` in transient storage."},"id":5225,"implemented":true,"kind":"function","modifiers":[],"name":"tload","nameLocation":"3712:5:21","nodeType":"FunctionDefinition","parameters":{"id":5219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5218,"mutability":"mutable","name":"slot","nameLocation":"3734:4:21","nodeType":"VariableDeclaration","scope":5225,"src":"3718:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$5116","typeString":"StorageSlotExtension.Uint256SlotType"},"typeName":{"id":5217,"nodeType":"UserDefinedTypeName","pathNode":{"id":5216,"name":"Uint256SlotType","nameLocations":["3718:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":5116,"src":"3718:15:21"},"referencedDeclaration":5116,"src":"3718:15:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$5116","typeString":"StorageSlotExtension.Uint256SlotType"}},"visibility":"internal"}],"src":"3717:22:21"},"returnParameters":{"id":5222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5221,"mutability":"mutable","name":"value","nameLocation":"3771:5:21","nodeType":"VariableDeclaration","scope":5225,"src":"3763:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5220,"name":"uint256","nodeType":"ElementaryTypeName","src":"3763:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3762:15:21"},"scope":5259,"src":"3703:187:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5235,"nodeType":"Block","src":"4026:111:21","statements":[{"AST":{"nativeSrc":"4088:43:21","nodeType":"YulBlock","src":"4088:43:21","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"4109:4:21","nodeType":"YulIdentifier","src":"4109:4:21"},{"name":"value","nativeSrc":"4115:5:21","nodeType":"YulIdentifier","src":"4115:5:21"}],"functionName":{"name":"tstore","nativeSrc":"4102:6:21","nodeType":"YulIdentifier","src":"4102:6:21"},"nativeSrc":"4102:19:21","nodeType":"YulFunctionCall","src":"4102:19:21"},"nativeSrc":"4102:19:21","nodeType":"YulExpressionStatement","src":"4102:19:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":5229,"isOffset":false,"isSlot":false,"src":"4109:4:21","valueSize":1},{"declaration":5231,"isOffset":false,"isSlot":false,"src":"4115:5:21","valueSize":1}],"id":5234,"nodeType":"InlineAssembly","src":"4079:52:21"}]},"documentation":{"id":5226,"nodeType":"StructuredDocumentation","src":"3896:63:21","text":"@dev Store `value` at location `slot` in transient storage."},"id":5236,"implemented":true,"kind":"function","modifiers":[],"name":"tstore","nameLocation":"3973:6:21","nodeType":"FunctionDefinition","parameters":{"id":5232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5229,"mutability":"mutable","name":"slot","nameLocation":"3996:4:21","nodeType":"VariableDeclaration","scope":5236,"src":"3980:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$5116","typeString":"StorageSlotExtension.Uint256SlotType"},"typeName":{"id":5228,"nodeType":"UserDefinedTypeName","pathNode":{"id":5227,"name":"Uint256SlotType","nameLocations":["3980:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":5116,"src":"3980:15:21"},"referencedDeclaration":5116,"src":"3980:15:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$5116","typeString":"StorageSlotExtension.Uint256SlotType"}},"visibility":"internal"},{"constant":false,"id":5231,"mutability":"mutable","name":"value","nameLocation":"4010:5:21","nodeType":"VariableDeclaration","scope":5236,"src":"4002:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5230,"name":"uint256","nodeType":"ElementaryTypeName","src":"4002:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3979:37:21"},"returnParameters":{"id":5233,"nodeType":"ParameterList","parameters":[],"src":"4026:0:21"},"scope":5259,"src":"3964:173:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5246,"nodeType":"Block","src":"4290:112:21","statements":[{"AST":{"nativeSrc":"4352:44:21","nodeType":"YulBlock","src":"4352:44:21","statements":[{"nativeSrc":"4366:20:21","nodeType":"YulAssignment","src":"4366:20:21","value":{"arguments":[{"name":"slot","nativeSrc":"4381:4:21","nodeType":"YulIdentifier","src":"4381:4:21"}],"functionName":{"name":"tload","nativeSrc":"4375:5:21","nodeType":"YulIdentifier","src":"4375:5:21"},"nativeSrc":"4375:11:21","nodeType":"YulFunctionCall","src":"4375:11:21"},"variableNames":[{"name":"value","nativeSrc":"4366:5:21","nodeType":"YulIdentifier","src":"4366:5:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":5240,"isOffset":false,"isSlot":false,"src":"4381:4:21","valueSize":1},{"declaration":5243,"isOffset":false,"isSlot":false,"src":"4366:5:21","valueSize":1}],"id":5245,"nodeType":"InlineAssembly","src":"4343:53:21"}]},"documentation":{"id":5237,"nodeType":"StructuredDocumentation","src":"4143:69:21","text":"@dev Load the value held at location `slot` in transient storage."},"id":5247,"implemented":true,"kind":"function","modifiers":[],"name":"tload","nameLocation":"4226:5:21","nodeType":"FunctionDefinition","parameters":{"id":5241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5240,"mutability":"mutable","name":"slot","nameLocation":"4247:4:21","nodeType":"VariableDeclaration","scope":5247,"src":"4232:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$5133","typeString":"StorageSlotExtension.Int256SlotType"},"typeName":{"id":5239,"nodeType":"UserDefinedTypeName","pathNode":{"id":5238,"name":"Int256SlotType","nameLocations":["4232:14:21"],"nodeType":"IdentifierPath","referencedDeclaration":5133,"src":"4232:14:21"},"referencedDeclaration":5133,"src":"4232:14:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$5133","typeString":"StorageSlotExtension.Int256SlotType"}},"visibility":"internal"}],"src":"4231:21:21"},"returnParameters":{"id":5244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5243,"mutability":"mutable","name":"value","nameLocation":"4283:5:21","nodeType":"VariableDeclaration","scope":5247,"src":"4276:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5242,"name":"int256","nodeType":"ElementaryTypeName","src":"4276:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4275:14:21"},"scope":5259,"src":"4217:185:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5257,"nodeType":"Block","src":"4536:111:21","statements":[{"AST":{"nativeSrc":"4598:43:21","nodeType":"YulBlock","src":"4598:43:21","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"4619:4:21","nodeType":"YulIdentifier","src":"4619:4:21"},{"name":"value","nativeSrc":"4625:5:21","nodeType":"YulIdentifier","src":"4625:5:21"}],"functionName":{"name":"tstore","nativeSrc":"4612:6:21","nodeType":"YulIdentifier","src":"4612:6:21"},"nativeSrc":"4612:19:21","nodeType":"YulFunctionCall","src":"4612:19:21"},"nativeSrc":"4612:19:21","nodeType":"YulExpressionStatement","src":"4612:19:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":5251,"isOffset":false,"isSlot":false,"src":"4619:4:21","valueSize":1},{"declaration":5253,"isOffset":false,"isSlot":false,"src":"4625:5:21","valueSize":1}],"id":5256,"nodeType":"InlineAssembly","src":"4589:52:21"}]},"documentation":{"id":5248,"nodeType":"StructuredDocumentation","src":"4408:63:21","text":"@dev Store `value` at location `slot` in transient storage."},"id":5258,"implemented":true,"kind":"function","modifiers":[],"name":"tstore","nameLocation":"4485:6:21","nodeType":"FunctionDefinition","parameters":{"id":5254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5251,"mutability":"mutable","name":"slot","nameLocation":"4507:4:21","nodeType":"VariableDeclaration","scope":5258,"src":"4492:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$5133","typeString":"StorageSlotExtension.Int256SlotType"},"typeName":{"id":5250,"nodeType":"UserDefinedTypeName","pathNode":{"id":5249,"name":"Int256SlotType","nameLocations":["4492:14:21"],"nodeType":"IdentifierPath","referencedDeclaration":5133,"src":"4492:14:21"},"referencedDeclaration":5133,"src":"4492:14:21","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$5133","typeString":"StorageSlotExtension.Int256SlotType"}},"visibility":"internal"},{"constant":false,"id":5253,"mutability":"mutable","name":"value","nameLocation":"4520:5:21","nodeType":"VariableDeclaration","scope":5258,"src":"4513:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5252,"name":"int256","nodeType":"ElementaryTypeName","src":"4513:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4491:35:21"},"returnParameters":{"id":5255,"nodeType":"ParameterList","parameters":[],"src":"4536:0:21"},"scope":5259,"src":"4476:171:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":5260,"src":"278:4371:21","usedErrors":[],"usedEvents":[]}],"src":"33:4617:21"},"id":21},"@balancer-labs/v3-solidity-utils/contracts/test/ERC20TestToken.sol":{"ast":{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/test/ERC20TestToken.sol","exportedSymbols":{"ERC20":[6305],"ERC20TestToken":[5377]},"id":5378,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":5261,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:22"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":5263,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5378,"sourceUnit":6306,"src":"72:70:22","symbolAliases":[{"foreign":{"id":5262,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6305,"src":"81:5:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5264,"name":"ERC20","nameLocations":["171:5:22"],"nodeType":"IdentifierPath","referencedDeclaration":6305,"src":"171:5:22"},"id":5265,"nodeType":"InheritanceSpecifier","src":"171:5:22"}],"canonicalName":"ERC20TestToken","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5377,"linearizedBaseContracts":[5377,6305,5695,6409,6383,7010],"name":"ERC20TestToken","nameLocation":"153:14:22","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5267,"mutability":"immutable","name":"_decimals","nameLocation":"207:9:22","nodeType":"VariableDeclaration","scope":5377,"src":"183:33:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5266,"name":"uint8","nodeType":"ElementaryTypeName","src":"183:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"documentation":{"id":5268,"nodeType":"StructuredDocumentation","src":"223:57:22","text":"@dev Simulate tokens that don't allow zero transfers."},"errorSelector":"10cadee3","id":5270,"name":"ZeroTransfer","nameLocation":"291:12:22","nodeType":"ErrorDefinition","parameters":{"id":5269,"nodeType":"ParameterList","parameters":[],"src":"303:2:22"},"src":"285:21:22"},{"body":{"id":5287,"nodeType":"Block","src":"403:38:22","statements":[{"expression":{"id":5285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5283,"name":"_decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5267,"src":"413:9:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5284,"name":"decimals_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"425:9:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"413:21:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":5286,"nodeType":"ExpressionStatement","src":"413:21:22"}]},"id":5288,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":5279,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5272,"src":"389:4:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":5280,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5274,"src":"395:6:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":5281,"kind":"baseConstructorSpecifier","modifierName":{"id":5278,"name":"ERC20","nameLocations":["383:5:22"],"nodeType":"IdentifierPath","referencedDeclaration":6305,"src":"383:5:22"},"nodeType":"ModifierInvocation","src":"383:19:22"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5272,"mutability":"mutable","name":"name","nameLocation":"338:4:22","nodeType":"VariableDeclaration","scope":5288,"src":"324:18:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5271,"name":"string","nodeType":"ElementaryTypeName","src":"324:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5274,"mutability":"mutable","name":"symbol","nameLocation":"358:6:22","nodeType":"VariableDeclaration","scope":5288,"src":"344:20:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5273,"name":"string","nodeType":"ElementaryTypeName","src":"344:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5276,"mutability":"mutable","name":"decimals_","nameLocation":"372:9:22","nodeType":"VariableDeclaration","scope":5288,"src":"366:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5275,"name":"uint8","nodeType":"ElementaryTypeName","src":"366:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"323:59:22"},"returnParameters":{"id":5282,"nodeType":"ParameterList","parameters":[],"src":"403:0:22"},"scope":5377,"src":"312:129:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5869],"body":{"id":5296,"nodeType":"Block","src":"504:33:22","statements":[{"expression":{"id":5294,"name":"_decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5267,"src":"521:9:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":5293,"id":5295,"nodeType":"Return","src":"514:16:22"}]},"functionSelector":"313ce567","id":5297,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"456:8:22","nodeType":"FunctionDefinition","overrides":{"id":5290,"nodeType":"OverrideSpecifier","overrides":[],"src":"479:8:22"},"parameters":{"id":5289,"nodeType":"ParameterList","parameters":[],"src":"464:2:22"},"returnParameters":{"id":5293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5297,"src":"497:5:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5291,"name":"uint8","nodeType":"ElementaryTypeName","src":"497:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"496:7:22"},"scope":5377,"src":"447:90:22","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5309,"nodeType":"Block","src":"601:41:22","statements":[{"expression":{"arguments":[{"id":5305,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5299,"src":"617:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5306,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5301,"src":"628:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5304,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6145,"src":"611:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"611:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5308,"nodeType":"ExpressionStatement","src":"611:24:22"}]},"functionSelector":"40c10f19","id":5310,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"552:4:22","nodeType":"FunctionDefinition","parameters":{"id":5302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5299,"mutability":"mutable","name":"recipient","nameLocation":"565:9:22","nodeType":"VariableDeclaration","scope":5310,"src":"557:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5298,"name":"address","nodeType":"ElementaryTypeName","src":"557:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5301,"mutability":"mutable","name":"amount","nameLocation":"584:6:22","nodeType":"VariableDeclaration","scope":5310,"src":"576:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5300,"name":"uint256","nodeType":"ElementaryTypeName","src":"576:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"556:35:22"},"returnParameters":{"id":5303,"nodeType":"ParameterList","parameters":[],"src":"601:0:22"},"scope":5377,"src":"543:99:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5322,"nodeType":"Block","src":"703:38:22","statements":[{"expression":{"arguments":[{"id":5318,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5312,"src":"719:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5319,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5314,"src":"727:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5317,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6178,"src":"713:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"713:21:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5321,"nodeType":"ExpressionStatement","src":"713:21:22"}]},"functionSelector":"9dc29fac","id":5323,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"657:4:22","nodeType":"FunctionDefinition","parameters":{"id":5315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5312,"mutability":"mutable","name":"sender","nameLocation":"670:6:22","nodeType":"VariableDeclaration","scope":5323,"src":"662:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5311,"name":"address","nodeType":"ElementaryTypeName","src":"662:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5314,"mutability":"mutable","name":"amount","nameLocation":"686:6:22","nodeType":"VariableDeclaration","scope":5323,"src":"678:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5313,"name":"uint256","nodeType":"ElementaryTypeName","src":"678:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"661:32:22"},"returnParameters":{"id":5316,"nodeType":"ParameterList","parameters":[],"src":"703:0:22"},"scope":5377,"src":"648:93:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5915],"body":{"id":5347,"nodeType":"Block","src":"823:121:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5333,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"837:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"846:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"837:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5340,"nodeType":"IfStatement","src":"833:62:22","trueBody":{"id":5339,"nodeType":"Block","src":"849:46:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5336,"name":"ZeroTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5270,"src":"870:12:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"870:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5338,"nodeType":"RevertStatement","src":"863:21:22"}]}},{"expression":{"arguments":[{"id":5343,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5325,"src":"927:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5344,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"931:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5341,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"912:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC20TestToken_$5377_$","typeString":"type(contract super ERC20TestToken)"}},"id":5342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"918:8:22","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":5915,"src":"912:14:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) returns (bool)"}},"id":5345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"912:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5332,"id":5346,"nodeType":"Return","src":"905:32:22"}]},"functionSelector":"a9059cbb","id":5348,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"756:8:22","nodeType":"FunctionDefinition","overrides":{"id":5329,"nodeType":"OverrideSpecifier","overrides":[],"src":"799:8:22"},"parameters":{"id":5328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5325,"mutability":"mutable","name":"to","nameLocation":"773:2:22","nodeType":"VariableDeclaration","scope":5348,"src":"765:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5324,"name":"address","nodeType":"ElementaryTypeName","src":"765:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5327,"mutability":"mutable","name":"value","nameLocation":"785:5:22","nodeType":"VariableDeclaration","scope":5348,"src":"777:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5326,"name":"uint256","nodeType":"ElementaryTypeName","src":"777:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"764:27:22"},"returnParameters":{"id":5332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5348,"src":"817:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5330,"name":"bool","nodeType":"ElementaryTypeName","src":"817:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"816:6:22"},"scope":5377,"src":"747:197:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5988],"body":{"id":5375,"nodeType":"Block","src":"1044:131:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5354,"src":"1058:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1067:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1058:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5367,"nodeType":"IfStatement","src":"1054:62:22","trueBody":{"id":5366,"nodeType":"Block","src":"1070:46:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5363,"name":"ZeroTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5270,"src":"1091:12:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1091:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5365,"nodeType":"RevertStatement","src":"1084:21:22"}]}},{"expression":{"arguments":[{"id":5370,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5350,"src":"1152:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5371,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5352,"src":"1158:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5372,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5354,"src":"1162:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5368,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1133:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC20TestToken_$5377_$","typeString":"type(contract super ERC20TestToken)"}},"id":5369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1139:12:22","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":5988,"src":"1133:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) returns (bool)"}},"id":5373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1133:35:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5359,"id":5374,"nodeType":"Return","src":"1126:42:22"}]},"functionSelector":"23b872dd","id":5376,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"959:12:22","nodeType":"FunctionDefinition","overrides":{"id":5356,"nodeType":"OverrideSpecifier","overrides":[],"src":"1020:8:22"},"parameters":{"id":5355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5350,"mutability":"mutable","name":"from","nameLocation":"980:4:22","nodeType":"VariableDeclaration","scope":5376,"src":"972:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5349,"name":"address","nodeType":"ElementaryTypeName","src":"972:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5352,"mutability":"mutable","name":"to","nameLocation":"994:2:22","nodeType":"VariableDeclaration","scope":5376,"src":"986:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5351,"name":"address","nodeType":"ElementaryTypeName","src":"986:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5354,"mutability":"mutable","name":"value","nameLocation":"1006:5:22","nodeType":"VariableDeclaration","scope":5376,"src":"998:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5353,"name":"uint256","nodeType":"ElementaryTypeName","src":"998:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"971:41:22"},"returnParameters":{"id":5359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5376,"src":"1038:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5357,"name":"bool","nodeType":"ElementaryTypeName","src":"1038:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1037:6:22"},"scope":5377,"src":"950:225:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":5378,"src":"144:1033:22","usedErrors":[5270,5665,5670,5675,5684,5689,5694],"usedEvents":[6317,6326]}],"src":"46:1132:22"},"id":22},"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol":{"ast":{"absolutePath":"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol","exportedSymbols":{"Authentication":[3232],"IAuthorizer":[368],"IVault":[1392],"SingletonAuthentication":[5483]},"id":5484,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":5379,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:23"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","id":5381,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5484,"sourceUnit":369,"src":"72:91:23","symbolAliases":[{"foreign":{"id":5380,"name":"IAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"81:11:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","id":5383,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5484,"sourceUnit":1393,"src":"164:81:23","symbolAliases":[{"foreign":{"id":5382,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"173:6:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol","file":"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol","id":5385,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5484,"sourceUnit":3233,"src":"247:103:23","symbolAliases":[{"foreign":{"id":5384,"name":"Authentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3232,"src":"256:14:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5387,"name":"Authentication","nameLocations":["772:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":3232,"src":"772:14:23"},"id":5388,"nodeType":"InheritanceSpecifier","src":"772:14:23"}],"canonicalName":"SingletonAuthentication","contractDependencies":[],"contractKind":"contract","documentation":{"id":5386,"nodeType":"StructuredDocumentation","src":"352:374:23","text":" @notice Base contract suitable for Singleton contracts (e.g., pool factories) that have permissioned functions.\n @dev The disambiguator is the contract's own address. This is used in the construction of actionIds for permissioned\n functions, to avoid conflicts when multiple contracts (or multiple versions of the same contract) use the same\n function name."},"fullyImplemented":true,"id":5483,"linearizedBaseContracts":[5483,3232,14],"name":"SingletonAuthentication","nameLocation":"745:23:23","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5391,"mutability":"immutable","name":"_vault","nameLocation":"818:6:23","nodeType":"VariableDeclaration","scope":5483,"src":"793:31:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"},"typeName":{"id":5390,"nodeType":"UserDefinedTypeName","pathNode":{"id":5389,"name":"IVault","nameLocations":["793:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"793:6:23"},"referencedDeclaration":1392,"src":"793:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"visibility":"private"},{"body":{"id":5416,"nodeType":"Block","src":"988:31:23","statements":[{"expression":{"id":5414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5412,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5391,"src":"998:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5413,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5394,"src":"1007:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"src":"998:14:23","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"id":5415,"nodeType":"ExpressionStatement","src":"998:14:23"}]},"id":5417,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"id":5405,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"978:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_SingletonAuthentication_$5483","typeString":"contract SingletonAuthentication"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SingletonAuthentication_$5483","typeString":"contract SingletonAuthentication"}],"id":5404,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"970:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5403,"name":"address","nodeType":"ElementaryTypeName","src":"970:7:23","typeDescriptions":{}}},"id":5406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"970:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"962:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5401,"name":"uint160","nodeType":"ElementaryTypeName","src":"962:7:23","typeDescriptions":{}}},"id":5407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"962:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5400,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"954:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5399,"name":"uint256","nodeType":"ElementaryTypeName","src":"954:7:23","typeDescriptions":{}}},"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"954:31:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"946:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5397,"name":"bytes32","nodeType":"ElementaryTypeName","src":"946:7:23","typeDescriptions":{}}},"id":5409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"946:40:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5410,"kind":"baseConstructorSpecifier","modifierName":{"id":5396,"name":"Authentication","nameLocations":["931:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":3232,"src":"931:14:23"},"nodeType":"ModifierInvocation","src":"931:56:23"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5394,"mutability":"mutable","name":"vault","nameLocation":"924:5:23","nodeType":"VariableDeclaration","scope":5417,"src":"917:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"},"typeName":{"id":5393,"nodeType":"UserDefinedTypeName","pathNode":{"id":5392,"name":"IVault","nameLocations":["917:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"917:6:23"},"referencedDeclaration":1392,"src":"917:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"visibility":"internal"}],"src":"916:14:23"},"returnParameters":{"id":5411,"nodeType":"ParameterList","parameters":[],"src":"988:0:23"},"scope":5483,"src":"905:114:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5426,"nodeType":"Block","src":"1199:30:23","statements":[{"expression":{"id":5424,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5391,"src":"1216:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"functionReturnParameters":5423,"id":5425,"nodeType":"Return","src":"1209:13:23"}]},"documentation":{"id":5418,"nodeType":"StructuredDocumentation","src":"1025:120:23","text":" @notice Get the address of the Balancer Vault.\n @return vault An interface pointer to the Vault"},"functionSelector":"8d928af8","id":5427,"implemented":true,"kind":"function","modifiers":[],"name":"getVault","nameLocation":"1159:8:23","nodeType":"FunctionDefinition","parameters":{"id":5419,"nodeType":"ParameterList","parameters":[],"src":"1167:2:23"},"returnParameters":{"id":5423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5422,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5427,"src":"1191:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"},"typeName":{"id":5421,"nodeType":"UserDefinedTypeName","pathNode":{"id":5420,"name":"IVault","nameLocations":["1191:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"1191:6:23"},"referencedDeclaration":1392,"src":"1191:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"visibility":"internal"}],"src":"1190:8:23"},"scope":5483,"src":"1150:79:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5439,"nodeType":"Block","src":"1425:50:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5434,"name":"getVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5427,"src":"1442:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IVault_$1392_$","typeString":"function () view returns (contract IVault)"}},"id":5435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1442:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"id":5436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1453:13:23","memberName":"getAuthorizer","nodeType":"MemberAccess","referencedDeclaration":2706,"src":"1442:24:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IAuthorizer_$368_$","typeString":"function () view external returns (contract IAuthorizer)"}},"id":5437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1442:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$368","typeString":"contract IAuthorizer"}},"functionReturnParameters":5433,"id":5438,"nodeType":"Return","src":"1435:33:23"}]},"documentation":{"id":5428,"nodeType":"StructuredDocumentation","src":"1235:126:23","text":" @notice Get the address of the Authorizer.\n @return authorizer An interface pointer to the Authorizer"},"functionSelector":"aaabadc5","id":5440,"implemented":true,"kind":"function","modifiers":[],"name":"getAuthorizer","nameLocation":"1375:13:23","nodeType":"FunctionDefinition","parameters":{"id":5429,"nodeType":"ParameterList","parameters":[],"src":"1388:2:23"},"returnParameters":{"id":5433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5440,"src":"1412:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$368","typeString":"contract IAuthorizer"},"typeName":{"id":5431,"nodeType":"UserDefinedTypeName","pathNode":{"id":5430,"name":"IAuthorizer","nameLocations":["1412:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":368,"src":"1412:11:23"},"referencedDeclaration":368,"src":"1412:11:23","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$368","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"1411:13:23"},"scope":5483,"src":"1366:109:23","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[3231],"body":{"id":5461,"nodeType":"Block","src":"1575:84:23","statements":[{"expression":{"arguments":[{"id":5453,"name":"actionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5442,"src":"1619:8:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5454,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"1629:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":5457,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1646:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_SingletonAuthentication_$5483","typeString":"contract SingletonAuthentication"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SingletonAuthentication_$5483","typeString":"contract SingletonAuthentication"}],"id":5456,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1638:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5455,"name":"address","nodeType":"ElementaryTypeName","src":"1638:7:23","typeDescriptions":{}}},"id":5458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1638:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5450,"name":"getAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5440,"src":"1592:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IAuthorizer_$368_$","typeString":"function () view returns (contract IAuthorizer)"}},"id":5451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1592:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$368","typeString":"contract IAuthorizer"}},"id":5452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1608:10:23","memberName":"canPerform","nodeType":"MemberAccess","referencedDeclaration":367,"src":"1592:26:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address,address) view external returns (bool)"}},"id":5459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1592:60:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5449,"id":5460,"nodeType":"Return","src":"1585:67:23"}]},"id":5462,"implemented":true,"kind":"function","modifiers":[],"name":"_canPerform","nameLocation":"1490:11:23","nodeType":"FunctionDefinition","overrides":{"id":5446,"nodeType":"OverrideSpecifier","overrides":[],"src":"1551:8:23"},"parameters":{"id":5445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5442,"mutability":"mutable","name":"actionId","nameLocation":"1510:8:23","nodeType":"VariableDeclaration","scope":5462,"src":"1502:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5441,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1502:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5444,"mutability":"mutable","name":"account","nameLocation":"1528:7:23","nodeType":"VariableDeclaration","scope":5462,"src":"1520:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5443,"name":"address","nodeType":"ElementaryTypeName","src":"1520:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1501:35:23"},"returnParameters":{"id":5449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5448,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5462,"src":"1569:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5447,"name":"bool","nodeType":"ElementaryTypeName","src":"1569:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1568:6:23"},"scope":5483,"src":"1481:178:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5481,"nodeType":"Block","src":"1765:76:23","statements":[{"expression":{"arguments":[{"id":5476,"name":"actionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5464,"src":"1809:8:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5477,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5466,"src":"1819:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5478,"name":"where","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5468,"src":"1828:5:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5473,"name":"getAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5440,"src":"1782:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IAuthorizer_$368_$","typeString":"function () view returns (contract IAuthorizer)"}},"id":5474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1782:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$368","typeString":"contract IAuthorizer"}},"id":5475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1798:10:23","memberName":"canPerform","nodeType":"MemberAccess","referencedDeclaration":367,"src":"1782:26:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address,address) view external returns (bool)"}},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1782:52:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5472,"id":5480,"nodeType":"Return","src":"1775:59:23"}]},"id":5482,"implemented":true,"kind":"function","modifiers":[],"name":"_canPerform","nameLocation":"1674:11:23","nodeType":"FunctionDefinition","parameters":{"id":5469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5464,"mutability":"mutable","name":"actionId","nameLocation":"1694:8:23","nodeType":"VariableDeclaration","scope":5482,"src":"1686:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5463,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1686:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5466,"mutability":"mutable","name":"account","nameLocation":"1712:7:23","nodeType":"VariableDeclaration","scope":5482,"src":"1704:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5465,"name":"address","nodeType":"ElementaryTypeName","src":"1704:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5468,"mutability":"mutable","name":"where","nameLocation":"1729:5:23","nodeType":"VariableDeclaration","scope":5482,"src":"1721:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5467,"name":"address","nodeType":"ElementaryTypeName","src":"1721:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1685:50:23"},"returnParameters":{"id":5472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5482,"src":"1759:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5470,"name":"bool","nodeType":"ElementaryTypeName","src":"1759:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1758:6:23"},"scope":5483,"src":"1665:176:23","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5484,"src":"727:1116:23","usedErrors":[5],"usedEvents":[]}],"src":"46:1798:23"},"id":23},"@openzeppelin/contracts/interfaces/IERC4626.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","exportedSymbols":{"IERC20":[6383],"IERC20Metadata":[6409],"IERC4626":[5653]},"id":5654,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5485,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:24"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":5487,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5654,"sourceUnit":6384,"src":"133:49:24","symbolAliases":[{"foreign":{"id":5486,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"141:6:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"../token/ERC20/extensions/IERC20Metadata.sol","id":5489,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5654,"sourceUnit":6410,"src":"183:76:24","symbolAliases":[{"foreign":{"id":5488,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6409,"src":"191:14:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5491,"name":"IERC20","nameLocations":["420:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"420:6:24"},"id":5492,"nodeType":"InheritanceSpecifier","src":"420:6:24"},{"baseName":{"id":5493,"name":"IERC20Metadata","nameLocations":["428:14:24"],"nodeType":"IdentifierPath","referencedDeclaration":6409,"src":"428:14:24"},"id":5494,"nodeType":"InheritanceSpecifier","src":"428:14:24"}],"canonicalName":"IERC4626","contractDependencies":[],"contractKind":"interface","documentation":{"id":5490,"nodeType":"StructuredDocumentation","src":"261:136:24","text":" @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n https://eips.ethereum.org/EIPS/eip-4626[ERC-4626]."},"fullyImplemented":false,"id":5653,"linearizedBaseContracts":[5653,6409,6383],"name":"IERC4626","nameLocation":"408:8:24","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"dcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7","id":5504,"name":"Deposit","nameLocation":"455:7:24","nodeType":"EventDefinition","parameters":{"id":5503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5496,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"479:6:24","nodeType":"VariableDeclaration","scope":5504,"src":"463:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5495,"name":"address","nodeType":"ElementaryTypeName","src":"463:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5498,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"503:5:24","nodeType":"VariableDeclaration","scope":5504,"src":"487:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5497,"name":"address","nodeType":"ElementaryTypeName","src":"487:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5500,"indexed":false,"mutability":"mutable","name":"assets","nameLocation":"518:6:24","nodeType":"VariableDeclaration","scope":5504,"src":"510:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5499,"name":"uint256","nodeType":"ElementaryTypeName","src":"510:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5502,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"534:6:24","nodeType":"VariableDeclaration","scope":5504,"src":"526:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5501,"name":"uint256","nodeType":"ElementaryTypeName","src":"526:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"462:79:24"},"src":"449:93:24"},{"anonymous":false,"eventSelector":"fbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db","id":5516,"name":"Withdraw","nameLocation":"554:8:24","nodeType":"EventDefinition","parameters":{"id":5515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5506,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"588:6:24","nodeType":"VariableDeclaration","scope":5516,"src":"572:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5505,"name":"address","nodeType":"ElementaryTypeName","src":"572:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5508,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"620:8:24","nodeType":"VariableDeclaration","scope":5516,"src":"604:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5507,"name":"address","nodeType":"ElementaryTypeName","src":"604:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5510,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"654:5:24","nodeType":"VariableDeclaration","scope":5516,"src":"638:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5509,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5512,"indexed":false,"mutability":"mutable","name":"assets","nameLocation":"677:6:24","nodeType":"VariableDeclaration","scope":5516,"src":"669:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5511,"name":"uint256","nodeType":"ElementaryTypeName","src":"669:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5514,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"701:6:24","nodeType":"VariableDeclaration","scope":5516,"src":"693:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5513,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"562:151:24"},"src":"548:166:24"},{"documentation":{"id":5517,"nodeType":"StructuredDocumentation","src":"720:207:24","text":" @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n - MUST be an ERC-20 token contract.\n - MUST NOT revert."},"functionSelector":"38d52e0f","id":5522,"implemented":false,"kind":"function","modifiers":[],"name":"asset","nameLocation":"941:5:24","nodeType":"FunctionDefinition","parameters":{"id":5518,"nodeType":"ParameterList","parameters":[],"src":"946:2:24"},"returnParameters":{"id":5521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5520,"mutability":"mutable","name":"assetTokenAddress","nameLocation":"980:17:24","nodeType":"VariableDeclaration","scope":5522,"src":"972:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5519,"name":"address","nodeType":"ElementaryTypeName","src":"972:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"971:27:24"},"scope":5653,"src":"932:67:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5523,"nodeType":"StructuredDocumentation","src":"1005:286:24","text":" @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n - SHOULD include any compounding that occurs from yield.\n - MUST be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT revert."},"functionSelector":"01e1d114","id":5528,"implemented":false,"kind":"function","modifiers":[],"name":"totalAssets","nameLocation":"1305:11:24","nodeType":"FunctionDefinition","parameters":{"id":5524,"nodeType":"ParameterList","parameters":[],"src":"1316:2:24"},"returnParameters":{"id":5527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5526,"mutability":"mutable","name":"totalManagedAssets","nameLocation":"1350:18:24","nodeType":"VariableDeclaration","scope":5528,"src":"1342:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5525,"name":"uint256","nodeType":"ElementaryTypeName","src":"1342:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1341:28:24"},"scope":5653,"src":"1296:74:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5529,"nodeType":"StructuredDocumentation","src":"1376:720:24","text":" @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."},"functionSelector":"c6e6f592","id":5536,"implemented":false,"kind":"function","modifiers":[],"name":"convertToShares","nameLocation":"2110:15:24","nodeType":"FunctionDefinition","parameters":{"id":5532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5531,"mutability":"mutable","name":"assets","nameLocation":"2134:6:24","nodeType":"VariableDeclaration","scope":5536,"src":"2126:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5530,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2125:16:24"},"returnParameters":{"id":5535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5534,"mutability":"mutable","name":"shares","nameLocation":"2173:6:24","nodeType":"VariableDeclaration","scope":5536,"src":"2165:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5533,"name":"uint256","nodeType":"ElementaryTypeName","src":"2165:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2164:16:24"},"scope":5653,"src":"2101:80:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5537,"nodeType":"StructuredDocumentation","src":"2187:720:24","text":" @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."},"functionSelector":"07a2d13a","id":5544,"implemented":false,"kind":"function","modifiers":[],"name":"convertToAssets","nameLocation":"2921:15:24","nodeType":"FunctionDefinition","parameters":{"id":5540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5539,"mutability":"mutable","name":"shares","nameLocation":"2945:6:24","nodeType":"VariableDeclaration","scope":5544,"src":"2937:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5538,"name":"uint256","nodeType":"ElementaryTypeName","src":"2937:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2936:16:24"},"returnParameters":{"id":5543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5542,"mutability":"mutable","name":"assets","nameLocation":"2984:6:24","nodeType":"VariableDeclaration","scope":5544,"src":"2976:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5541,"name":"uint256","nodeType":"ElementaryTypeName","src":"2976:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2975:16:24"},"scope":5653,"src":"2912:80:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5545,"nodeType":"StructuredDocumentation","src":"2998:386:24","text":" @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n through a deposit call.\n - MUST return a limited value if receiver is subject to some deposit limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n - MUST NOT revert."},"functionSelector":"402d267d","id":5552,"implemented":false,"kind":"function","modifiers":[],"name":"maxDeposit","nameLocation":"3398:10:24","nodeType":"FunctionDefinition","parameters":{"id":5548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5547,"mutability":"mutable","name":"receiver","nameLocation":"3417:8:24","nodeType":"VariableDeclaration","scope":5552,"src":"3409:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5546,"name":"address","nodeType":"ElementaryTypeName","src":"3409:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3408:18:24"},"returnParameters":{"id":5551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5550,"mutability":"mutable","name":"maxAssets","nameLocation":"3458:9:24","nodeType":"VariableDeclaration","scope":5552,"src":"3450:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5549,"name":"uint256","nodeType":"ElementaryTypeName","src":"3450:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3449:19:24"},"scope":5653,"src":"3389:80:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5553,"nodeType":"StructuredDocumentation","src":"3475:1012:24","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n current on-chain conditions.\n - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n   in the same transaction.\n - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."},"functionSelector":"ef8b30f7","id":5560,"implemented":false,"kind":"function","modifiers":[],"name":"previewDeposit","nameLocation":"4501:14:24","nodeType":"FunctionDefinition","parameters":{"id":5556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5555,"mutability":"mutable","name":"assets","nameLocation":"4524:6:24","nodeType":"VariableDeclaration","scope":5560,"src":"4516:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5554,"name":"uint256","nodeType":"ElementaryTypeName","src":"4516:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4515:16:24"},"returnParameters":{"id":5559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5558,"mutability":"mutable","name":"shares","nameLocation":"4563:6:24","nodeType":"VariableDeclaration","scope":5560,"src":"4555:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5557,"name":"uint256","nodeType":"ElementaryTypeName","src":"4555:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4554:16:24"},"scope":5653,"src":"4492:79:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5561,"nodeType":"StructuredDocumentation","src":"4577:651:24","text":" @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   deposit execution, and are accounted for during deposit.\n - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."},"functionSelector":"6e553f65","id":5570,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"5242:7:24","nodeType":"FunctionDefinition","parameters":{"id":5566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5563,"mutability":"mutable","name":"assets","nameLocation":"5258:6:24","nodeType":"VariableDeclaration","scope":5570,"src":"5250:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5562,"name":"uint256","nodeType":"ElementaryTypeName","src":"5250:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5565,"mutability":"mutable","name":"receiver","nameLocation":"5274:8:24","nodeType":"VariableDeclaration","scope":5570,"src":"5266:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5564,"name":"address","nodeType":"ElementaryTypeName","src":"5266:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5249:34:24"},"returnParameters":{"id":5569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5568,"mutability":"mutable","name":"shares","nameLocation":"5310:6:24","nodeType":"VariableDeclaration","scope":5570,"src":"5302:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5567,"name":"uint256","nodeType":"ElementaryTypeName","src":"5302:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5301:16:24"},"scope":5653,"src":"5233:85:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":5571,"nodeType":"StructuredDocumentation","src":"5324:341:24","text":" @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n - MUST return a limited value if receiver is subject to some mint limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n - MUST NOT revert."},"functionSelector":"c63d75b6","id":5578,"implemented":false,"kind":"function","modifiers":[],"name":"maxMint","nameLocation":"5679:7:24","nodeType":"FunctionDefinition","parameters":{"id":5574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5573,"mutability":"mutable","name":"receiver","nameLocation":"5695:8:24","nodeType":"VariableDeclaration","scope":5578,"src":"5687:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5572,"name":"address","nodeType":"ElementaryTypeName","src":"5687:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5686:18:24"},"returnParameters":{"id":5577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5576,"mutability":"mutable","name":"maxShares","nameLocation":"5736:9:24","nodeType":"VariableDeclaration","scope":5578,"src":"5728:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5575,"name":"uint256","nodeType":"ElementaryTypeName","src":"5728:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5727:19:24"},"scope":5653,"src":"5670:77:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5579,"nodeType":"StructuredDocumentation","src":"5753:984:24","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n   same transaction.\n - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n   would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by minting."},"functionSelector":"b3d7f6b9","id":5586,"implemented":false,"kind":"function","modifiers":[],"name":"previewMint","nameLocation":"6751:11:24","nodeType":"FunctionDefinition","parameters":{"id":5582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5581,"mutability":"mutable","name":"shares","nameLocation":"6771:6:24","nodeType":"VariableDeclaration","scope":5586,"src":"6763:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5580,"name":"uint256","nodeType":"ElementaryTypeName","src":"6763:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6762:16:24"},"returnParameters":{"id":5585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5584,"mutability":"mutable","name":"assets","nameLocation":"6810:6:24","nodeType":"VariableDeclaration","scope":5586,"src":"6802:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5583,"name":"uint256","nodeType":"ElementaryTypeName","src":"6802:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6801:16:24"},"scope":5653,"src":"6742:76:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5587,"nodeType":"StructuredDocumentation","src":"6824:642:24","text":" @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n   execution, and are accounted for during mint.\n - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."},"functionSelector":"94bf804d","id":5596,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"7480:4:24","nodeType":"FunctionDefinition","parameters":{"id":5592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5589,"mutability":"mutable","name":"shares","nameLocation":"7493:6:24","nodeType":"VariableDeclaration","scope":5596,"src":"7485:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5588,"name":"uint256","nodeType":"ElementaryTypeName","src":"7485:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5591,"mutability":"mutable","name":"receiver","nameLocation":"7509:8:24","nodeType":"VariableDeclaration","scope":5596,"src":"7501:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5590,"name":"address","nodeType":"ElementaryTypeName","src":"7501:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7484:34:24"},"returnParameters":{"id":5595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5594,"mutability":"mutable","name":"assets","nameLocation":"7545:6:24","nodeType":"VariableDeclaration","scope":5596,"src":"7537:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5593,"name":"uint256","nodeType":"ElementaryTypeName","src":"7537:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7536:16:24"},"scope":5653,"src":"7471:82:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":5597,"nodeType":"StructuredDocumentation","src":"7559:293:24","text":" @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n Vault, through a withdraw call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST NOT revert."},"functionSelector":"ce96cb77","id":5604,"implemented":false,"kind":"function","modifiers":[],"name":"maxWithdraw","nameLocation":"7866:11:24","nodeType":"FunctionDefinition","parameters":{"id":5600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5599,"mutability":"mutable","name":"owner","nameLocation":"7886:5:24","nodeType":"VariableDeclaration","scope":5604,"src":"7878:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5598,"name":"address","nodeType":"ElementaryTypeName","src":"7878:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7877:15:24"},"returnParameters":{"id":5603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5602,"mutability":"mutable","name":"maxAssets","nameLocation":"7924:9:24","nodeType":"VariableDeclaration","scope":5604,"src":"7916:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5601,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7915:19:24"},"scope":5653,"src":"7857:78:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5605,"nodeType":"StructuredDocumentation","src":"7941:1034:24","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n given current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n   called\n   in the same transaction.\n - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."},"functionSelector":"0a28a477","id":5612,"implemented":false,"kind":"function","modifiers":[],"name":"previewWithdraw","nameLocation":"8989:15:24","nodeType":"FunctionDefinition","parameters":{"id":5608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5607,"mutability":"mutable","name":"assets","nameLocation":"9013:6:24","nodeType":"VariableDeclaration","scope":5612,"src":"9005:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5606,"name":"uint256","nodeType":"ElementaryTypeName","src":"9005:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9004:16:24"},"returnParameters":{"id":5611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5610,"mutability":"mutable","name":"shares","nameLocation":"9052:6:24","nodeType":"VariableDeclaration","scope":5612,"src":"9044:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5609,"name":"uint256","nodeType":"ElementaryTypeName","src":"9044:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9043:16:24"},"scope":5653,"src":"8980:80:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5613,"nodeType":"StructuredDocumentation","src":"9066:670:24","text":" @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   withdraw execution, and are accounted for during withdraw.\n - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."},"functionSelector":"b460af94","id":5624,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"9750:8:24","nodeType":"FunctionDefinition","parameters":{"id":5620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5615,"mutability":"mutable","name":"assets","nameLocation":"9767:6:24","nodeType":"VariableDeclaration","scope":5624,"src":"9759:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5614,"name":"uint256","nodeType":"ElementaryTypeName","src":"9759:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5617,"mutability":"mutable","name":"receiver","nameLocation":"9783:8:24","nodeType":"VariableDeclaration","scope":5624,"src":"9775:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5616,"name":"address","nodeType":"ElementaryTypeName","src":"9775:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5619,"mutability":"mutable","name":"owner","nameLocation":"9801:5:24","nodeType":"VariableDeclaration","scope":5624,"src":"9793:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5618,"name":"address","nodeType":"ElementaryTypeName","src":"9793:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9758:49:24"},"returnParameters":{"id":5623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5622,"mutability":"mutable","name":"shares","nameLocation":"9834:6:24","nodeType":"VariableDeclaration","scope":5624,"src":"9826:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5621,"name":"uint256","nodeType":"ElementaryTypeName","src":"9826:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9825:16:24"},"scope":5653,"src":"9741:101:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":5625,"nodeType":"StructuredDocumentation","src":"9848:381:24","text":" @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n through a redeem call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n - MUST NOT revert."},"functionSelector":"d905777e","id":5632,"implemented":false,"kind":"function","modifiers":[],"name":"maxRedeem","nameLocation":"10243:9:24","nodeType":"FunctionDefinition","parameters":{"id":5628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5627,"mutability":"mutable","name":"owner","nameLocation":"10261:5:24","nodeType":"VariableDeclaration","scope":5632,"src":"10253:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5626,"name":"address","nodeType":"ElementaryTypeName","src":"10253:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10252:15:24"},"returnParameters":{"id":5631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5630,"mutability":"mutable","name":"maxShares","nameLocation":"10299:9:24","nodeType":"VariableDeclaration","scope":5632,"src":"10291:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5629,"name":"uint256","nodeType":"ElementaryTypeName","src":"10291:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10290:19:24"},"scope":5653,"src":"10234:76:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5633,"nodeType":"StructuredDocumentation","src":"10316:1010:24","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n given current on-chain conditions.\n - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n   same transaction.\n - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n   redemption would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by redeeming."},"functionSelector":"4cdad506","id":5640,"implemented":false,"kind":"function","modifiers":[],"name":"previewRedeem","nameLocation":"11340:13:24","nodeType":"FunctionDefinition","parameters":{"id":5636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5635,"mutability":"mutable","name":"shares","nameLocation":"11362:6:24","nodeType":"VariableDeclaration","scope":5640,"src":"11354:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5634,"name":"uint256","nodeType":"ElementaryTypeName","src":"11354:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11353:16:24"},"returnParameters":{"id":5639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5638,"mutability":"mutable","name":"assets","nameLocation":"11401:6:24","nodeType":"VariableDeclaration","scope":5640,"src":"11393:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5637,"name":"uint256","nodeType":"ElementaryTypeName","src":"11393:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11392:16:24"},"scope":5653,"src":"11331:78:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":5641,"nodeType":"StructuredDocumentation","src":"11415:661:24","text":" @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   redeem execution, and are accounted for during redeem.\n - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."},"functionSelector":"ba087652","id":5652,"implemented":false,"kind":"function","modifiers":[],"name":"redeem","nameLocation":"12090:6:24","nodeType":"FunctionDefinition","parameters":{"id":5648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5643,"mutability":"mutable","name":"shares","nameLocation":"12105:6:24","nodeType":"VariableDeclaration","scope":5652,"src":"12097:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5642,"name":"uint256","nodeType":"ElementaryTypeName","src":"12097:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5645,"mutability":"mutable","name":"receiver","nameLocation":"12121:8:24","nodeType":"VariableDeclaration","scope":5652,"src":"12113:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5644,"name":"address","nodeType":"ElementaryTypeName","src":"12113:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5647,"mutability":"mutable","name":"owner","nameLocation":"12139:5:24","nodeType":"VariableDeclaration","scope":5652,"src":"12131:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5646,"name":"address","nodeType":"ElementaryTypeName","src":"12131:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12096:49:24"},"returnParameters":{"id":5651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5650,"mutability":"mutable","name":"assets","nameLocation":"12172:6:24","nodeType":"VariableDeclaration","scope":5652,"src":"12164:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5649,"name":"uint256","nodeType":"ElementaryTypeName","src":"12164:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12163:16:24"},"scope":5653,"src":"12081:99:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5654,"src":"398:11784:24","usedErrors":[],"usedEvents":[5504,5516,6317,6326]}],"src":"107:12076:24"},"id":24},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[5790],"IERC20Errors":[5695],"IERC721Errors":[5743]},"id":5791,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5655,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":5656,"nodeType":"StructuredDocumentation","src":"138:139:25","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":5695,"linearizedBaseContracts":[5695],"name":"IERC20Errors","nameLocation":"288:12:25","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5657,"nodeType":"StructuredDocumentation","src":"307:309:25","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":5665,"name":"ERC20InsufficientBalance","nameLocation":"627:24:25","nodeType":"ErrorDefinition","parameters":{"id":5664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5659,"mutability":"mutable","name":"sender","nameLocation":"660:6:25","nodeType":"VariableDeclaration","scope":5665,"src":"652:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5658,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5661,"mutability":"mutable","name":"balance","nameLocation":"676:7:25","nodeType":"VariableDeclaration","scope":5665,"src":"668:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5660,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5663,"mutability":"mutable","name":"needed","nameLocation":"693:6:25","nodeType":"VariableDeclaration","scope":5665,"src":"685:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5662,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:25"},"src":"621:80:25"},{"documentation":{"id":5666,"nodeType":"StructuredDocumentation","src":"707:152:25","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":5670,"name":"ERC20InvalidSender","nameLocation":"870:18:25","nodeType":"ErrorDefinition","parameters":{"id":5669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5668,"mutability":"mutable","name":"sender","nameLocation":"897:6:25","nodeType":"VariableDeclaration","scope":5670,"src":"889:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5667,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:25"},"src":"864:41:25"},{"documentation":{"id":5671,"nodeType":"StructuredDocumentation","src":"911:159:25","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":5675,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:25","nodeType":"ErrorDefinition","parameters":{"id":5674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5673,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:25","nodeType":"VariableDeclaration","scope":5675,"src":"1102:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5672,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:25"},"src":"1075:45:25"},{"documentation":{"id":5676,"nodeType":"StructuredDocumentation","src":"1126:345:25","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":5684,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:25","nodeType":"ErrorDefinition","parameters":{"id":5683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5678,"mutability":"mutable","name":"spender","nameLocation":"1517:7:25","nodeType":"VariableDeclaration","scope":5684,"src":"1509:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5677,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5680,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:25","nodeType":"VariableDeclaration","scope":5684,"src":"1526:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5679,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5682,"mutability":"mutable","name":"needed","nameLocation":"1553:6:25","nodeType":"VariableDeclaration","scope":5684,"src":"1545:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5681,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:25"},"src":"1476:85:25"},{"documentation":{"id":5685,"nodeType":"StructuredDocumentation","src":"1567:174:25","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":5689,"name":"ERC20InvalidApprover","nameLocation":"1752:20:25","nodeType":"ErrorDefinition","parameters":{"id":5688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5687,"mutability":"mutable","name":"approver","nameLocation":"1781:8:25","nodeType":"VariableDeclaration","scope":5689,"src":"1773:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5686,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:25"},"src":"1746:45:25"},{"documentation":{"id":5690,"nodeType":"StructuredDocumentation","src":"1797:195:25","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":5694,"name":"ERC20InvalidSpender","nameLocation":"2003:19:25","nodeType":"ErrorDefinition","parameters":{"id":5693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5692,"mutability":"mutable","name":"spender","nameLocation":"2031:7:25","nodeType":"VariableDeclaration","scope":5694,"src":"2023:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5691,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:25"},"src":"1997:43:25"}],"scope":5791,"src":"278:1764:25","usedErrors":[5665,5670,5675,5684,5689,5694],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":5696,"nodeType":"StructuredDocumentation","src":"2044:141:25","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":5743,"linearizedBaseContracts":[5743],"name":"IERC721Errors","nameLocation":"2196:13:25","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5697,"nodeType":"StructuredDocumentation","src":"2216:219:25","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":5701,"name":"ERC721InvalidOwner","nameLocation":"2446:18:25","nodeType":"ErrorDefinition","parameters":{"id":5700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5699,"mutability":"mutable","name":"owner","nameLocation":"2473:5:25","nodeType":"VariableDeclaration","scope":5701,"src":"2465:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5698,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:25"},"src":"2440:40:25"},{"documentation":{"id":5702,"nodeType":"StructuredDocumentation","src":"2486:132:25","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":5706,"name":"ERC721NonexistentToken","nameLocation":"2629:22:25","nodeType":"ErrorDefinition","parameters":{"id":5705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5704,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:25","nodeType":"VariableDeclaration","scope":5706,"src":"2652:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5703,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:25"},"src":"2623:46:25"},{"documentation":{"id":5707,"nodeType":"StructuredDocumentation","src":"2675:289:25","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":5715,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:25","nodeType":"ErrorDefinition","parameters":{"id":5714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5709,"mutability":"mutable","name":"sender","nameLocation":"3004:6:25","nodeType":"VariableDeclaration","scope":5715,"src":"2996:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5708,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5711,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:25","nodeType":"VariableDeclaration","scope":5715,"src":"3012:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5710,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5713,"mutability":"mutable","name":"owner","nameLocation":"3037:5:25","nodeType":"VariableDeclaration","scope":5715,"src":"3029:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5712,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:25"},"src":"2969:75:25"},{"documentation":{"id":5716,"nodeType":"StructuredDocumentation","src":"3050:152:25","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":5720,"name":"ERC721InvalidSender","nameLocation":"3213:19:25","nodeType":"ErrorDefinition","parameters":{"id":5719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5718,"mutability":"mutable","name":"sender","nameLocation":"3241:6:25","nodeType":"VariableDeclaration","scope":5720,"src":"3233:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5717,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:25"},"src":"3207:42:25"},{"documentation":{"id":5721,"nodeType":"StructuredDocumentation","src":"3255:159:25","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":5725,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:25","nodeType":"ErrorDefinition","parameters":{"id":5724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5723,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:25","nodeType":"VariableDeclaration","scope":5725,"src":"3447:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5722,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:25"},"src":"3419:46:25"},{"documentation":{"id":5726,"nodeType":"StructuredDocumentation","src":"3471:247:25","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":5732,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:25","nodeType":"ErrorDefinition","parameters":{"id":5731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5728,"mutability":"mutable","name":"operator","nameLocation":"3764:8:25","nodeType":"VariableDeclaration","scope":5732,"src":"3756:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5727,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5730,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:25","nodeType":"VariableDeclaration","scope":5732,"src":"3774:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5729,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:25"},"src":"3723:68:25"},{"documentation":{"id":5733,"nodeType":"StructuredDocumentation","src":"3797:174:25","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":5737,"name":"ERC721InvalidApprover","nameLocation":"3982:21:25","nodeType":"ErrorDefinition","parameters":{"id":5736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5735,"mutability":"mutable","name":"approver","nameLocation":"4012:8:25","nodeType":"VariableDeclaration","scope":5737,"src":"4004:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5734,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:25"},"src":"3976:46:25"},{"documentation":{"id":5738,"nodeType":"StructuredDocumentation","src":"4028:197:25","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":5742,"name":"ERC721InvalidOperator","nameLocation":"4236:21:25","nodeType":"ErrorDefinition","parameters":{"id":5741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5740,"mutability":"mutable","name":"operator","nameLocation":"4266:8:25","nodeType":"VariableDeclaration","scope":5742,"src":"4258:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5739,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:25"},"src":"4230:46:25"}],"scope":5791,"src":"2186:2092:25","usedErrors":[5701,5706,5715,5720,5725,5732,5737,5742],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":5744,"nodeType":"StructuredDocumentation","src":"4280:143:25","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":5790,"linearizedBaseContracts":[5790],"name":"IERC1155Errors","nameLocation":"4434:14:25","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5745,"nodeType":"StructuredDocumentation","src":"4455:361:25","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":5755,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:25","nodeType":"ErrorDefinition","parameters":{"id":5754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5747,"mutability":"mutable","name":"sender","nameLocation":"4862:6:25","nodeType":"VariableDeclaration","scope":5755,"src":"4854:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5746,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5749,"mutability":"mutable","name":"balance","nameLocation":"4878:7:25","nodeType":"VariableDeclaration","scope":5755,"src":"4870:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5748,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5751,"mutability":"mutable","name":"needed","nameLocation":"4895:6:25","nodeType":"VariableDeclaration","scope":5755,"src":"4887:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5750,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5753,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:25","nodeType":"VariableDeclaration","scope":5755,"src":"4903:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5752,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:25"},"src":"4821:99:25"},{"documentation":{"id":5756,"nodeType":"StructuredDocumentation","src":"4926:152:25","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":5760,"name":"ERC1155InvalidSender","nameLocation":"5089:20:25","nodeType":"ErrorDefinition","parameters":{"id":5759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5758,"mutability":"mutable","name":"sender","nameLocation":"5118:6:25","nodeType":"VariableDeclaration","scope":5760,"src":"5110:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5757,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:25"},"src":"5083:43:25"},{"documentation":{"id":5761,"nodeType":"StructuredDocumentation","src":"5132:159:25","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":5765,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:25","nodeType":"ErrorDefinition","parameters":{"id":5764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5763,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:25","nodeType":"VariableDeclaration","scope":5765,"src":"5325:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5762,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:25"},"src":"5296:47:25"},{"documentation":{"id":5766,"nodeType":"StructuredDocumentation","src":"5349:256:25","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":5772,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:25","nodeType":"ErrorDefinition","parameters":{"id":5771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5768,"mutability":"mutable","name":"operator","nameLocation":"5653:8:25","nodeType":"VariableDeclaration","scope":5772,"src":"5645:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5767,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5770,"mutability":"mutable","name":"owner","nameLocation":"5671:5:25","nodeType":"VariableDeclaration","scope":5772,"src":"5663:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5769,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:25"},"src":"5610:68:25"},{"documentation":{"id":5773,"nodeType":"StructuredDocumentation","src":"5684:174:25","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":5777,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:25","nodeType":"ErrorDefinition","parameters":{"id":5776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5775,"mutability":"mutable","name":"approver","nameLocation":"5900:8:25","nodeType":"VariableDeclaration","scope":5777,"src":"5892:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5774,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:25"},"src":"5863:47:25"},{"documentation":{"id":5778,"nodeType":"StructuredDocumentation","src":"5916:197:25","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":5782,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:25","nodeType":"ErrorDefinition","parameters":{"id":5781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5780,"mutability":"mutable","name":"operator","nameLocation":"6155:8:25","nodeType":"VariableDeclaration","scope":5782,"src":"6147:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5779,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:25"},"src":"6118:47:25"},{"documentation":{"id":5783,"nodeType":"StructuredDocumentation","src":"6171:280:25","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":5789,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:25","nodeType":"ErrorDefinition","parameters":{"id":5788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5785,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:25","nodeType":"VariableDeclaration","scope":5789,"src":"6488:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5784,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5787,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:25","nodeType":"VariableDeclaration","scope":5789,"src":"6507:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5786,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:25"},"src":"6456:73:25"}],"scope":5791,"src":"4424:2107:25","usedErrors":[5755,5760,5765,5772,5777,5782,5789],"usedEvents":[]}],"src":"112:6420:25"},"id":25},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[7010],"ERC20":[6305],"IERC20":[6383],"IERC20Errors":[5695],"IERC20Metadata":[6409]},"id":6306,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5792,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"105:24:26"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":5794,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6306,"sourceUnit":6384,"src":"131:36:26","symbolAliases":[{"foreign":{"id":5793,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"139:6:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":5796,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6306,"sourceUnit":6410,"src":"168:63:26","symbolAliases":[{"foreign":{"id":5795,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6409,"src":"176:14:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":5798,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6306,"sourceUnit":7011,"src":"232:48:26","symbolAliases":[{"foreign":{"id":5797,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7010,"src":"240:7:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":5800,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6306,"sourceUnit":5791,"src":"281:65:26","symbolAliases":[{"foreign":{"id":5799,"name":"IERC20Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5695,"src":"289:12:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5802,"name":"Context","nameLocations":["1428:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":7010,"src":"1428:7:26"},"id":5803,"nodeType":"InheritanceSpecifier","src":"1428:7:26"},{"baseName":{"id":5804,"name":"IERC20","nameLocations":["1437:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"1437:6:26"},"id":5805,"nodeType":"InheritanceSpecifier","src":"1437:6:26"},{"baseName":{"id":5806,"name":"IERC20Metadata","nameLocations":["1445:14:26"],"nodeType":"IdentifierPath","referencedDeclaration":6409,"src":"1445:14:26"},"id":5807,"nodeType":"InheritanceSpecifier","src":"1445:14:26"},{"baseName":{"id":5808,"name":"IERC20Errors","nameLocations":["1461:12:26"],"nodeType":"IdentifierPath","referencedDeclaration":5695,"src":"1461:12:26"},"id":5809,"nodeType":"InheritanceSpecifier","src":"1461:12:26"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":5801,"nodeType":"StructuredDocumentation","src":"348:1052:26","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."},"fullyImplemented":true,"id":6305,"linearizedBaseContracts":[6305,5695,6409,6383,7010],"name":"ERC20","nameLocation":"1419:5:26","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5813,"mutability":"mutable","name":"_balances","nameLocation":"1524:9:26","nodeType":"VariableDeclaration","scope":6305,"src":"1480:53:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":5812,"keyName":"account","keyNameLocation":"1496:7:26","keyType":{"id":5810,"name":"address","nodeType":"ElementaryTypeName","src":"1488:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1480:35:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5811,"name":"uint256","nodeType":"ElementaryTypeName","src":"1507:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":5819,"mutability":"mutable","name":"_allowances","nameLocation":"1612:11:26","nodeType":"VariableDeclaration","scope":6305,"src":"1540:83:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":5818,"keyName":"account","keyNameLocation":"1556:7:26","keyType":{"id":5814,"name":"address","nodeType":"ElementaryTypeName","src":"1548:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1540:63:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5817,"keyName":"spender","keyNameLocation":"1583:7:26","keyType":{"id":5815,"name":"address","nodeType":"ElementaryTypeName","src":"1575:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1567:35:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5816,"name":"uint256","nodeType":"ElementaryTypeName","src":"1594:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":5821,"mutability":"mutable","name":"_totalSupply","nameLocation":"1646:12:26","nodeType":"VariableDeclaration","scope":6305,"src":"1630:28:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5820,"name":"uint256","nodeType":"ElementaryTypeName","src":"1630:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":5823,"mutability":"mutable","name":"_name","nameLocation":"1680:5:26","nodeType":"VariableDeclaration","scope":6305,"src":"1665:20:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5822,"name":"string","nodeType":"ElementaryTypeName","src":"1665:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":5825,"mutability":"mutable","name":"_symbol","nameLocation":"1706:7:26","nodeType":"VariableDeclaration","scope":6305,"src":"1691:22:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5824,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":5841,"nodeType":"Block","src":"1952:57:26","statements":[{"expression":{"id":5835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5833,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5823,"src":"1962:5:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5834,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5828,"src":"1970:5:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1962:13:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5836,"nodeType":"ExpressionStatement","src":"1962:13:26"},{"expression":{"id":5839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5837,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5825,"src":"1985:7:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5838,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5830,"src":"1995:7:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1985:17:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5840,"nodeType":"ExpressionStatement","src":"1985:17:26"}]},"documentation":{"id":5826,"nodeType":"StructuredDocumentation","src":"1720:171:26","text":" @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."},"id":5842,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5828,"mutability":"mutable","name":"name_","nameLocation":"1922:5:26","nodeType":"VariableDeclaration","scope":5842,"src":"1908:19:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5827,"name":"string","nodeType":"ElementaryTypeName","src":"1908:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5830,"mutability":"mutable","name":"symbol_","nameLocation":"1943:7:26","nodeType":"VariableDeclaration","scope":5842,"src":"1929:21:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5829,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1907:44:26"},"returnParameters":{"id":5832,"nodeType":"ParameterList","parameters":[],"src":"1952:0:26"},"scope":6305,"src":"1896:113:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[6396],"body":{"id":5850,"nodeType":"Block","src":"2134:29:26","statements":[{"expression":{"id":5848,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5823,"src":"2151:5:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":5847,"id":5849,"nodeType":"Return","src":"2144:12:26"}]},"documentation":{"id":5843,"nodeType":"StructuredDocumentation","src":"2015:54:26","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":5851,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2083:4:26","nodeType":"FunctionDefinition","parameters":{"id":5844,"nodeType":"ParameterList","parameters":[],"src":"2087:2:26"},"returnParameters":{"id":5847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5851,"src":"2119:13:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5845,"name":"string","nodeType":"ElementaryTypeName","src":"2119:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2118:15:26"},"scope":6305,"src":"2074:89:26","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[6402],"body":{"id":5859,"nodeType":"Block","src":"2338:31:26","statements":[{"expression":{"id":5857,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5825,"src":"2355:7:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":5856,"id":5858,"nodeType":"Return","src":"2348:14:26"}]},"documentation":{"id":5852,"nodeType":"StructuredDocumentation","src":"2169:102:26","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":5860,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2285:6:26","nodeType":"FunctionDefinition","parameters":{"id":5853,"nodeType":"ParameterList","parameters":[],"src":"2291:2:26"},"returnParameters":{"id":5856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5860,"src":"2323:13:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5854,"name":"string","nodeType":"ElementaryTypeName","src":"2323:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2322:15:26"},"scope":6305,"src":"2276:93:26","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[6408],"body":{"id":5868,"nodeType":"Block","src":"3058:26:26","statements":[{"expression":{"hexValue":"3138","id":5866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3075:2:26","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":5865,"id":5867,"nodeType":"Return","src":"3068:9:26"}]},"documentation":{"id":5861,"nodeType":"StructuredDocumentation","src":"2375:622:26","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":5869,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3011:8:26","nodeType":"FunctionDefinition","parameters":{"id":5862,"nodeType":"ParameterList","parameters":[],"src":"3019:2:26"},"returnParameters":{"id":5865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5864,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5869,"src":"3051:5:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5863,"name":"uint8","nodeType":"ElementaryTypeName","src":"3051:5:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3050:7:26"},"scope":6305,"src":"3002:82:26","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[6332],"body":{"id":5877,"nodeType":"Block","src":"3205:36:26","statements":[{"expression":{"id":5875,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5821,"src":"3222:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5874,"id":5876,"nodeType":"Return","src":"3215:19:26"}]},"documentation":{"id":5870,"nodeType":"StructuredDocumentation","src":"3090:49:26","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":5878,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3153:11:26","nodeType":"FunctionDefinition","parameters":{"id":5871,"nodeType":"ParameterList","parameters":[],"src":"3164:2:26"},"returnParameters":{"id":5874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5878,"src":"3196:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5872,"name":"uint256","nodeType":"ElementaryTypeName","src":"3196:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3195:9:26"},"scope":6305,"src":"3144:97:26","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[6340],"body":{"id":5890,"nodeType":"Block","src":"3373:42:26","statements":[{"expression":{"baseExpression":{"id":5886,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5813,"src":"3390:9:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5888,"indexExpression":{"id":5887,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5881,"src":"3400:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3390:18:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5885,"id":5889,"nodeType":"Return","src":"3383:25:26"}]},"documentation":{"id":5879,"nodeType":"StructuredDocumentation","src":"3247:47:26","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":5891,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3308:9:26","nodeType":"FunctionDefinition","parameters":{"id":5882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5881,"mutability":"mutable","name":"account","nameLocation":"3326:7:26","nodeType":"VariableDeclaration","scope":5891,"src":"3318:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5880,"name":"address","nodeType":"ElementaryTypeName","src":"3318:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3317:17:26"},"returnParameters":{"id":5885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5884,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5891,"src":"3364:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5883,"name":"uint256","nodeType":"ElementaryTypeName","src":"3364:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3363:9:26"},"scope":6305,"src":"3299:116:26","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[6350],"body":{"id":5914,"nodeType":"Block","src":"3685:103:26","statements":[{"assignments":[5902],"declarations":[{"constant":false,"id":5902,"mutability":"mutable","name":"owner","nameLocation":"3703:5:26","nodeType":"VariableDeclaration","scope":5914,"src":"3695:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5901,"name":"address","nodeType":"ElementaryTypeName","src":"3695:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5905,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5903,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7000,"src":"3711:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:12:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3695:28:26"},{"expression":{"arguments":[{"id":5907,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5902,"src":"3743:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5908,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5894,"src":"3750:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5909,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5896,"src":"3754:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5906,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6035,"src":"3733:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3733:27:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5911,"nodeType":"ExpressionStatement","src":"3733:27:26"},{"expression":{"hexValue":"74727565","id":5912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3777:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5900,"id":5913,"nodeType":"Return","src":"3770:11:26"}]},"documentation":{"id":5892,"nodeType":"StructuredDocumentation","src":"3421:184:26","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."},"functionSelector":"a9059cbb","id":5915,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3619:8:26","nodeType":"FunctionDefinition","parameters":{"id":5897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5894,"mutability":"mutable","name":"to","nameLocation":"3636:2:26","nodeType":"VariableDeclaration","scope":5915,"src":"3628:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5893,"name":"address","nodeType":"ElementaryTypeName","src":"3628:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5896,"mutability":"mutable","name":"value","nameLocation":"3648:5:26","nodeType":"VariableDeclaration","scope":5915,"src":"3640:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5895,"name":"uint256","nodeType":"ElementaryTypeName","src":"3640:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3627:27:26"},"returnParameters":{"id":5900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5915,"src":"3679:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5898,"name":"bool","nodeType":"ElementaryTypeName","src":"3679:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3678:6:26"},"scope":6305,"src":"3610:178:26","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[6360],"body":{"id":5931,"nodeType":"Block","src":"3935:51:26","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":5925,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5819,"src":"3952:11:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":5927,"indexExpression":{"id":5926,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5918,"src":"3964:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3952:18:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5929,"indexExpression":{"id":5928,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5920,"src":"3971:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3952:27:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5924,"id":5930,"nodeType":"Return","src":"3945:34:26"}]},"documentation":{"id":5916,"nodeType":"StructuredDocumentation","src":"3794:47:26","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":5932,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3855:9:26","nodeType":"FunctionDefinition","parameters":{"id":5921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5918,"mutability":"mutable","name":"owner","nameLocation":"3873:5:26","nodeType":"VariableDeclaration","scope":5932,"src":"3865:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5917,"name":"address","nodeType":"ElementaryTypeName","src":"3865:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5920,"mutability":"mutable","name":"spender","nameLocation":"3888:7:26","nodeType":"VariableDeclaration","scope":5932,"src":"3880:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5919,"name":"address","nodeType":"ElementaryTypeName","src":"3880:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3864:32:26"},"returnParameters":{"id":5924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5932,"src":"3926:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5922,"name":"uint256","nodeType":"ElementaryTypeName","src":"3926:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3925:9:26"},"scope":6305,"src":"3846:140:26","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[6370],"body":{"id":5955,"nodeType":"Block","src":"4372:107:26","statements":[{"assignments":[5943],"declarations":[{"constant":false,"id":5943,"mutability":"mutable","name":"owner","nameLocation":"4390:5:26","nodeType":"VariableDeclaration","scope":5955,"src":"4382:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5942,"name":"address","nodeType":"ElementaryTypeName","src":"4382:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5946,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5944,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7000,"src":"4398:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4398:12:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4382:28:26"},{"expression":{"arguments":[{"id":5948,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5943,"src":"4429:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5949,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5935,"src":"4436:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5950,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5937,"src":"4445:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5947,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[6196,6256],"referencedDeclaration":6196,"src":"4420:8:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4420:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5952,"nodeType":"ExpressionStatement","src":"4420:31:26"},{"expression":{"hexValue":"74727565","id":5953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4468:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5941,"id":5954,"nodeType":"Return","src":"4461:11:26"}]},"documentation":{"id":5933,"nodeType":"StructuredDocumentation","src":"3992:296:26","text":" @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":5956,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4302:7:26","nodeType":"FunctionDefinition","parameters":{"id":5938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5935,"mutability":"mutable","name":"spender","nameLocation":"4318:7:26","nodeType":"VariableDeclaration","scope":5956,"src":"4310:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5934,"name":"address","nodeType":"ElementaryTypeName","src":"4310:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5937,"mutability":"mutable","name":"value","nameLocation":"4335:5:26","nodeType":"VariableDeclaration","scope":5956,"src":"4327:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5936,"name":"uint256","nodeType":"ElementaryTypeName","src":"4327:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4309:32:26"},"returnParameters":{"id":5941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5940,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5956,"src":"4366:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5939,"name":"bool","nodeType":"ElementaryTypeName","src":"4366:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4365:6:26"},"scope":6305,"src":"4293:186:26","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[6382],"body":{"id":5987,"nodeType":"Block","src":"5132:151:26","statements":[{"assignments":[5969],"declarations":[{"constant":false,"id":5969,"mutability":"mutable","name":"spender","nameLocation":"5150:7:26","nodeType":"VariableDeclaration","scope":5987,"src":"5142:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5968,"name":"address","nodeType":"ElementaryTypeName","src":"5142:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5972,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5970,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7000,"src":"5160:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5160:12:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5142:30:26"},{"expression":{"arguments":[{"id":5974,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5959,"src":"5198:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5975,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5969,"src":"5204:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5976,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"5213:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5973,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6304,"src":"5182:15:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5182:37:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5978,"nodeType":"ExpressionStatement","src":"5182:37:26"},{"expression":{"arguments":[{"id":5980,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5959,"src":"5239:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5981,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5961,"src":"5245:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"5249:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5979,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6035,"src":"5229:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5229:26:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5984,"nodeType":"ExpressionStatement","src":"5229:26:26"},{"expression":{"hexValue":"74727565","id":5985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5272:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5967,"id":5986,"nodeType":"Return","src":"5265:11:26"}]},"documentation":{"id":5957,"nodeType":"StructuredDocumentation","src":"4485:549:26","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."},"functionSelector":"23b872dd","id":5988,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5048:12:26","nodeType":"FunctionDefinition","parameters":{"id":5964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5959,"mutability":"mutable","name":"from","nameLocation":"5069:4:26","nodeType":"VariableDeclaration","scope":5988,"src":"5061:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5958,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5961,"mutability":"mutable","name":"to","nameLocation":"5083:2:26","nodeType":"VariableDeclaration","scope":5988,"src":"5075:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5960,"name":"address","nodeType":"ElementaryTypeName","src":"5075:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5963,"mutability":"mutable","name":"value","nameLocation":"5095:5:26","nodeType":"VariableDeclaration","scope":5988,"src":"5087:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5962,"name":"uint256","nodeType":"ElementaryTypeName","src":"5087:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5060:41:26"},"returnParameters":{"id":5967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5966,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5988,"src":"5126:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5965,"name":"bool","nodeType":"ElementaryTypeName","src":"5126:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5125:6:26"},"scope":6305,"src":"5039:244:26","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":6034,"nodeType":"Block","src":"5725:231:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5998,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5991,"src":"5739:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5755:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6000,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5747:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5999,"name":"address","nodeType":"ElementaryTypeName","src":"5747:7:26","typeDescriptions":{}}},"id":6002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5747:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5739:18:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6012,"nodeType":"IfStatement","src":"5735:86:26","trueBody":{"id":6011,"nodeType":"Block","src":"5759:62:26","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":6007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5807:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6006,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5799:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6005,"name":"address","nodeType":"ElementaryTypeName","src":"5799:7:26","typeDescriptions":{}}},"id":6008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5799:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6004,"name":"ERC20InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5670,"src":"5780:18:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5780:30:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6010,"nodeType":"RevertStatement","src":"5773:37:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6013,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5993,"src":"5834:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5848:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5840:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6014,"name":"address","nodeType":"ElementaryTypeName","src":"5840:7:26","typeDescriptions":{}}},"id":6017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5840:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5834:16:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6027,"nodeType":"IfStatement","src":"5830:86:26","trueBody":{"id":6026,"nodeType":"Block","src":"5852:64:26","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":6022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5902:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5894:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6020,"name":"address","nodeType":"ElementaryTypeName","src":"5894:7:26","typeDescriptions":{}}},"id":6023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5894:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6019,"name":"ERC20InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5675,"src":"5873:20:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5873:32:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6025,"nodeType":"RevertStatement","src":"5866:39:26"}]}},{"expression":{"arguments":[{"id":6029,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5991,"src":"5933:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6030,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5993,"src":"5939:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6031,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5995,"src":"5943:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6028,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6112,"src":"5925:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":6032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5925:24:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6033,"nodeType":"ExpressionStatement","src":"5925:24:26"}]},"documentation":{"id":5989,"nodeType":"StructuredDocumentation","src":"5289:362:26","text":" @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."},"id":6035,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"5665:9:26","nodeType":"FunctionDefinition","parameters":{"id":5996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5991,"mutability":"mutable","name":"from","nameLocation":"5683:4:26","nodeType":"VariableDeclaration","scope":6035,"src":"5675:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5990,"name":"address","nodeType":"ElementaryTypeName","src":"5675:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5993,"mutability":"mutable","name":"to","nameLocation":"5697:2:26","nodeType":"VariableDeclaration","scope":6035,"src":"5689:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5992,"name":"address","nodeType":"ElementaryTypeName","src":"5689:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5995,"mutability":"mutable","name":"value","nameLocation":"5709:5:26","nodeType":"VariableDeclaration","scope":6035,"src":"5701:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5994,"name":"uint256","nodeType":"ElementaryTypeName","src":"5701:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5674:41:26"},"returnParameters":{"id":5997,"nodeType":"ParameterList","parameters":[],"src":"5725:0:26"},"scope":6305,"src":"5656:300:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6111,"nodeType":"Block","src":"6346:1032:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6045,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6038,"src":"6360:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6376:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6368:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6046,"name":"address","nodeType":"ElementaryTypeName","src":"6368:7:26","typeDescriptions":{}}},"id":6049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6368:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6360:18:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6082,"nodeType":"Block","src":"6534:362:26","statements":[{"assignments":[6057],"declarations":[{"constant":false,"id":6057,"mutability":"mutable","name":"fromBalance","nameLocation":"6556:11:26","nodeType":"VariableDeclaration","scope":6082,"src":"6548:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6056,"name":"uint256","nodeType":"ElementaryTypeName","src":"6548:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6061,"initialValue":{"baseExpression":{"id":6058,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5813,"src":"6570:9:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6060,"indexExpression":{"id":6059,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6038,"src":"6580:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6570:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6548:37:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6062,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"6603:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6063,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6042,"src":"6617:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6603:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6072,"nodeType":"IfStatement","src":"6599:115:26","trueBody":{"id":6071,"nodeType":"Block","src":"6624:90:26","statements":[{"errorCall":{"arguments":[{"id":6066,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6038,"src":"6674:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6067,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"6680:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6068,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6042,"src":"6693:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6065,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5665,"src":"6649:24:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256,uint256) pure returns (error)"}},"id":6069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6649:50:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6070,"nodeType":"RevertStatement","src":"6642:57:26"}]}},{"id":6081,"nodeType":"UncheckedBlock","src":"6727:159:26","statements":[{"expression":{"id":6079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6073,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5813,"src":"6834:9:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6075,"indexExpression":{"id":6074,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6038,"src":"6844:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6834:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6076,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"6852:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6042,"src":"6866:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6852:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6834:37:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6080,"nodeType":"ExpressionStatement","src":"6834:37:26"}]}]},"id":6083,"nodeType":"IfStatement","src":"6356:540:26","trueBody":{"id":6055,"nodeType":"Block","src":"6380:148:26","statements":[{"expression":{"id":6053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6051,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5821,"src":"6496:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6052,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6042,"src":"6512:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6496:21:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6054,"nodeType":"ExpressionStatement","src":"6496:21:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6084,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6040,"src":"6910:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6924:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6916:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6085,"name":"address","nodeType":"ElementaryTypeName","src":"6916:7:26","typeDescriptions":{}}},"id":6088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6916:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6910:16:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6103,"nodeType":"Block","src":"7125:206:26","statements":[{"id":6102,"nodeType":"UncheckedBlock","src":"7139:182:26","statements":[{"expression":{"id":6100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6096,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5813,"src":"7284:9:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6098,"indexExpression":{"id":6097,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6040,"src":"7294:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7284:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6099,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6042,"src":"7301:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7284:22:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6101,"nodeType":"ExpressionStatement","src":"7284:22:26"}]}]},"id":6104,"nodeType":"IfStatement","src":"6906:425:26","trueBody":{"id":6095,"nodeType":"Block","src":"6928:191:26","statements":[{"id":6094,"nodeType":"UncheckedBlock","src":"6942:167:26","statements":[{"expression":{"id":6092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6090,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5821,"src":"7073:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6042,"src":"7089:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7073:21:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6093,"nodeType":"ExpressionStatement","src":"7073:21:26"}]}]}},{"eventCall":{"arguments":[{"id":6106,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6038,"src":"7355:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6107,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6040,"src":"7361:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6108,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6042,"src":"7365:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6105,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6317,"src":"7346:8:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":6109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7346:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6110,"nodeType":"EmitStatement","src":"7341:30:26"}]},"documentation":{"id":6036,"nodeType":"StructuredDocumentation","src":"5962:304:26","text":" @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."},"id":6112,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"6280:7:26","nodeType":"FunctionDefinition","parameters":{"id":6043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6038,"mutability":"mutable","name":"from","nameLocation":"6296:4:26","nodeType":"VariableDeclaration","scope":6112,"src":"6288:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6037,"name":"address","nodeType":"ElementaryTypeName","src":"6288:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6040,"mutability":"mutable","name":"to","nameLocation":"6310:2:26","nodeType":"VariableDeclaration","scope":6112,"src":"6302:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6039,"name":"address","nodeType":"ElementaryTypeName","src":"6302:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6042,"mutability":"mutable","name":"value","nameLocation":"6322:5:26","nodeType":"VariableDeclaration","scope":6112,"src":"6314:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6041,"name":"uint256","nodeType":"ElementaryTypeName","src":"6314:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6287:41:26"},"returnParameters":{"id":6044,"nodeType":"ParameterList","parameters":[],"src":"6346:0:26"},"scope":6305,"src":"6271:1107:26","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":6144,"nodeType":"Block","src":"7777:152:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6120,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6115,"src":"7791:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7810:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7802:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6121,"name":"address","nodeType":"ElementaryTypeName","src":"7802:7:26","typeDescriptions":{}}},"id":6124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7802:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7791:21:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6134,"nodeType":"IfStatement","src":"7787:91:26","trueBody":{"id":6133,"nodeType":"Block","src":"7814:64:26","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":6129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7864:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7856:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6127,"name":"address","nodeType":"ElementaryTypeName","src":"7856:7:26","typeDescriptions":{}}},"id":6130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7856:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6126,"name":"ERC20InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5675,"src":"7835:20:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7835:32:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6132,"nodeType":"RevertStatement","src":"7828:39:26"}]}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":6138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7903:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7895:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6136,"name":"address","nodeType":"ElementaryTypeName","src":"7895:7:26","typeDescriptions":{}}},"id":6139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7895:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6140,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6115,"src":"7907:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6141,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6117,"src":"7916:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6135,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6112,"src":"7887:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":6142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7887:35:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6143,"nodeType":"ExpressionStatement","src":"7887:35:26"}]},"documentation":{"id":6113,"nodeType":"StructuredDocumentation","src":"7384:332:26","text":" @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."},"id":6145,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"7730:5:26","nodeType":"FunctionDefinition","parameters":{"id":6118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6115,"mutability":"mutable","name":"account","nameLocation":"7744:7:26","nodeType":"VariableDeclaration","scope":6145,"src":"7736:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6114,"name":"address","nodeType":"ElementaryTypeName","src":"7736:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6117,"mutability":"mutable","name":"value","nameLocation":"7761:5:26","nodeType":"VariableDeclaration","scope":6145,"src":"7753:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6116,"name":"uint256","nodeType":"ElementaryTypeName","src":"7753:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7735:32:26"},"returnParameters":{"id":6119,"nodeType":"ParameterList","parameters":[],"src":"7777:0:26"},"scope":6305,"src":"7721:208:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6177,"nodeType":"Block","src":"8303:150:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6153,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"8317:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8336:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8328:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6154,"name":"address","nodeType":"ElementaryTypeName","src":"8328:7:26","typeDescriptions":{}}},"id":6157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8328:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8317:21:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6167,"nodeType":"IfStatement","src":"8313:89:26","trueBody":{"id":6166,"nodeType":"Block","src":"8340:62:26","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":6162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8388:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6161,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8380:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6160,"name":"address","nodeType":"ElementaryTypeName","src":"8380:7:26","typeDescriptions":{}}},"id":6163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8380:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6159,"name":"ERC20InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5670,"src":"8361:18:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8361:30:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6165,"nodeType":"RevertStatement","src":"8354:37:26"}]}},{"expression":{"arguments":[{"id":6169,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6148,"src":"8419:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":6172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8436:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8428:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6170,"name":"address","nodeType":"ElementaryTypeName","src":"8428:7:26","typeDescriptions":{}}},"id":6173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8428:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6174,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6150,"src":"8440:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6168,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6112,"src":"8411:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":6175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8411:35:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6176,"nodeType":"ExpressionStatement","src":"8411:35:26"}]},"documentation":{"id":6146,"nodeType":"StructuredDocumentation","src":"7935:307:26","text":" @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"},"id":6178,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"8256:5:26","nodeType":"FunctionDefinition","parameters":{"id":6151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6148,"mutability":"mutable","name":"account","nameLocation":"8270:7:26","nodeType":"VariableDeclaration","scope":6178,"src":"8262:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6147,"name":"address","nodeType":"ElementaryTypeName","src":"8262:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6150,"mutability":"mutable","name":"value","nameLocation":"8287:5:26","nodeType":"VariableDeclaration","scope":6178,"src":"8279:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6149,"name":"uint256","nodeType":"ElementaryTypeName","src":"8279:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8261:32:26"},"returnParameters":{"id":6152,"nodeType":"ParameterList","parameters":[],"src":"8303:0:26"},"scope":6305,"src":"8247:206:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6195,"nodeType":"Block","src":"9063:54:26","statements":[{"expression":{"arguments":[{"id":6189,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6181,"src":"9082:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6190,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6183,"src":"9089:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6191,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6185,"src":"9098:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":6192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9105:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6188,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[6196,6256],"referencedDeclaration":6256,"src":"9073:8:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":6193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9073:37:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6194,"nodeType":"ExpressionStatement","src":"9073:37:26"}]},"documentation":{"id":6179,"nodeType":"StructuredDocumentation","src":"8459:525:26","text":" @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":6196,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"8998:8:26","nodeType":"FunctionDefinition","parameters":{"id":6186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6181,"mutability":"mutable","name":"owner","nameLocation":"9015:5:26","nodeType":"VariableDeclaration","scope":6196,"src":"9007:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6180,"name":"address","nodeType":"ElementaryTypeName","src":"9007:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6183,"mutability":"mutable","name":"spender","nameLocation":"9030:7:26","nodeType":"VariableDeclaration","scope":6196,"src":"9022:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6182,"name":"address","nodeType":"ElementaryTypeName","src":"9022:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6185,"mutability":"mutable","name":"value","nameLocation":"9047:5:26","nodeType":"VariableDeclaration","scope":6196,"src":"9039:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6184,"name":"uint256","nodeType":"ElementaryTypeName","src":"9039:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9006:47:26"},"returnParameters":{"id":6187,"nodeType":"ParameterList","parameters":[],"src":"9063:0:26"},"scope":6305,"src":"8989:128:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6255,"nodeType":"Block","src":"10047:334:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6208,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6199,"src":"10061:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10078:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10070:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6209,"name":"address","nodeType":"ElementaryTypeName","src":"10070:7:26","typeDescriptions":{}}},"id":6212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10070:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10061:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6222,"nodeType":"IfStatement","src":"10057:89:26","trueBody":{"id":6221,"nodeType":"Block","src":"10082:64:26","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":6217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10132:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10124:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6215,"name":"address","nodeType":"ElementaryTypeName","src":"10124:7:26","typeDescriptions":{}}},"id":6218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10124:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6214,"name":"ERC20InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5689,"src":"10103:20:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10103:32:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6220,"nodeType":"RevertStatement","src":"10096:39:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6223,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6201,"src":"10159:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10178:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10170:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6224,"name":"address","nodeType":"ElementaryTypeName","src":"10170:7:26","typeDescriptions":{}}},"id":6227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10170:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10159:21:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6237,"nodeType":"IfStatement","src":"10155:90:26","trueBody":{"id":6236,"nodeType":"Block","src":"10182:63:26","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":6232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10231:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10223:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6230,"name":"address","nodeType":"ElementaryTypeName","src":"10223:7:26","typeDescriptions":{}}},"id":6233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10223:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6229,"name":"ERC20InvalidSpender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"10203:19:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10203:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6235,"nodeType":"RevertStatement","src":"10196:38:26"}]}},{"expression":{"id":6244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6238,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5819,"src":"10254:11:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":6241,"indexExpression":{"id":6239,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6199,"src":"10266:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10254:18:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6242,"indexExpression":{"id":6240,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6201,"src":"10273:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10254:27:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6243,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6203,"src":"10284:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10254:35:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6245,"nodeType":"ExpressionStatement","src":"10254:35:26"},{"condition":{"id":6246,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6205,"src":"10303:9:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6254,"nodeType":"IfStatement","src":"10299:76:26","trueBody":{"id":6253,"nodeType":"Block","src":"10314:61:26","statements":[{"eventCall":{"arguments":[{"id":6248,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6199,"src":"10342:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6249,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6201,"src":"10349:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6203,"src":"10358:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6247,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6326,"src":"10333:8:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":6251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10333:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6252,"nodeType":"EmitStatement","src":"10328:36:26"}]}}]},"documentation":{"id":6197,"nodeType":"StructuredDocumentation","src":"9123:821:26","text":" @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."},"id":6256,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"9958:8:26","nodeType":"FunctionDefinition","parameters":{"id":6206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6199,"mutability":"mutable","name":"owner","nameLocation":"9975:5:26","nodeType":"VariableDeclaration","scope":6256,"src":"9967:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6198,"name":"address","nodeType":"ElementaryTypeName","src":"9967:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6201,"mutability":"mutable","name":"spender","nameLocation":"9990:7:26","nodeType":"VariableDeclaration","scope":6256,"src":"9982:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6200,"name":"address","nodeType":"ElementaryTypeName","src":"9982:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6203,"mutability":"mutable","name":"value","nameLocation":"10007:5:26","nodeType":"VariableDeclaration","scope":6256,"src":"9999:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6202,"name":"uint256","nodeType":"ElementaryTypeName","src":"9999:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6205,"mutability":"mutable","name":"emitEvent","nameLocation":"10019:9:26","nodeType":"VariableDeclaration","scope":6256,"src":"10014:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6204,"name":"bool","nodeType":"ElementaryTypeName","src":"10014:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9966:63:26"},"returnParameters":{"id":6207,"nodeType":"ParameterList","parameters":[],"src":"10047:0:26"},"scope":6305,"src":"9949:432:26","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":6303,"nodeType":"Block","src":"10752:388:26","statements":[{"assignments":[6267],"declarations":[{"constant":false,"id":6267,"mutability":"mutable","name":"currentAllowance","nameLocation":"10770:16:26","nodeType":"VariableDeclaration","scope":6303,"src":"10762:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6266,"name":"uint256","nodeType":"ElementaryTypeName","src":"10762:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6272,"initialValue":{"arguments":[{"id":6269,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6259,"src":"10799:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6270,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6261,"src":"10806:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6268,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5932,"src":"10789:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":6271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10789:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10762:52:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6273,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6267,"src":"10828:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":6276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10853:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6275,"name":"uint256","nodeType":"ElementaryTypeName","src":"10853:7:26","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":6274,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10848:4:26","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10848:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":6278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10862:3:26","memberName":"max","nodeType":"MemberAccess","src":"10848:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10828:37:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6302,"nodeType":"IfStatement","src":"10824:310:26","trueBody":{"id":6301,"nodeType":"Block","src":"10867:267:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6280,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6267,"src":"10885:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6281,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6263,"src":"10904:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10885:24:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6290,"nodeType":"IfStatement","src":"10881:130:26","trueBody":{"id":6289,"nodeType":"Block","src":"10911:100:26","statements":[{"errorCall":{"arguments":[{"id":6284,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6261,"src":"10963:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6285,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6267,"src":"10972:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6286,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6263,"src":"10990:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6283,"name":"ERC20InsufficientAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"10936:26:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256,uint256) pure returns (error)"}},"id":6287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10936:60:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6288,"nodeType":"RevertStatement","src":"10929:67:26"}]}},{"id":6300,"nodeType":"UncheckedBlock","src":"11024:100:26","statements":[{"expression":{"arguments":[{"id":6292,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6259,"src":"11061:5:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6293,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6261,"src":"11068:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6294,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6267,"src":"11077:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6295,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6263,"src":"11096:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11077:24:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":6297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11103:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6291,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[6196,6256],"referencedDeclaration":6256,"src":"11052:8:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":6298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11052:57:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6299,"nodeType":"ExpressionStatement","src":"11052:57:26"}]}]}}]},"documentation":{"id":6257,"nodeType":"StructuredDocumentation","src":"10387:271:26","text":" @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."},"id":6304,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"10672:15:26","nodeType":"FunctionDefinition","parameters":{"id":6264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6259,"mutability":"mutable","name":"owner","nameLocation":"10696:5:26","nodeType":"VariableDeclaration","scope":6304,"src":"10688:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6258,"name":"address","nodeType":"ElementaryTypeName","src":"10688:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6261,"mutability":"mutable","name":"spender","nameLocation":"10711:7:26","nodeType":"VariableDeclaration","scope":6304,"src":"10703:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6260,"name":"address","nodeType":"ElementaryTypeName","src":"10703:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6263,"mutability":"mutable","name":"value","nameLocation":"10728:5:26","nodeType":"VariableDeclaration","scope":6304,"src":"10720:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6262,"name":"uint256","nodeType":"ElementaryTypeName","src":"10720:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10687:47:26"},"returnParameters":{"id":6265,"nodeType":"ParameterList","parameters":[],"src":"10752:0:26"},"scope":6305,"src":"10663:477:26","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":6306,"src":"1401:9741:26","usedErrors":[5665,5670,5675,5684,5689,5694],"usedEvents":[6317,6326]}],"src":"105:11038:26"},"id":26},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[6383]},"id":6384,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6307,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:27"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":6308,"nodeType":"StructuredDocumentation","src":"132:70:27","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":6383,"linearizedBaseContracts":[6383],"name":"IERC20","nameLocation":"213:6:27","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":6309,"nodeType":"StructuredDocumentation","src":"226:158:27","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":6317,"name":"Transfer","nameLocation":"395:8:27","nodeType":"EventDefinition","parameters":{"id":6316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6311,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"420:4:27","nodeType":"VariableDeclaration","scope":6317,"src":"404:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6310,"name":"address","nodeType":"ElementaryTypeName","src":"404:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6313,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"442:2:27","nodeType":"VariableDeclaration","scope":6317,"src":"426:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6312,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6315,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"454:5:27","nodeType":"VariableDeclaration","scope":6317,"src":"446:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6314,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"403:57:27"},"src":"389:72:27"},{"anonymous":false,"documentation":{"id":6318,"nodeType":"StructuredDocumentation","src":"467:148:27","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":6326,"name":"Approval","nameLocation":"626:8:27","nodeType":"EventDefinition","parameters":{"id":6325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6320,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"651:5:27","nodeType":"VariableDeclaration","scope":6326,"src":"635:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6319,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6322,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"674:7:27","nodeType":"VariableDeclaration","scope":6326,"src":"658:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6321,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6324,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"691:5:27","nodeType":"VariableDeclaration","scope":6326,"src":"683:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6323,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"634:63:27"},"src":"620:78:27"},{"documentation":{"id":6327,"nodeType":"StructuredDocumentation","src":"704:65:27","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":6332,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:27","nodeType":"FunctionDefinition","parameters":{"id":6328,"nodeType":"ParameterList","parameters":[],"src":"794:2:27"},"returnParameters":{"id":6331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6332,"src":"820:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6329,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:27"},"scope":6383,"src":"774:55:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6333,"nodeType":"StructuredDocumentation","src":"835:71:27","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":6340,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"920:9:27","nodeType":"FunctionDefinition","parameters":{"id":6336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6335,"mutability":"mutable","name":"account","nameLocation":"938:7:27","nodeType":"VariableDeclaration","scope":6340,"src":"930:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6334,"name":"address","nodeType":"ElementaryTypeName","src":"930:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"929:17:27"},"returnParameters":{"id":6339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6340,"src":"970:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6337,"name":"uint256","nodeType":"ElementaryTypeName","src":"970:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"969:9:27"},"scope":6383,"src":"911:68:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6341,"nodeType":"StructuredDocumentation","src":"985:213:27","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":6350,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1212:8:27","nodeType":"FunctionDefinition","parameters":{"id":6346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6343,"mutability":"mutable","name":"to","nameLocation":"1229:2:27","nodeType":"VariableDeclaration","scope":6350,"src":"1221:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6342,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6345,"mutability":"mutable","name":"value","nameLocation":"1241:5:27","nodeType":"VariableDeclaration","scope":6350,"src":"1233:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6344,"name":"uint256","nodeType":"ElementaryTypeName","src":"1233:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:27:27"},"returnParameters":{"id":6349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6350,"src":"1266:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6347,"name":"bool","nodeType":"ElementaryTypeName","src":"1266:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1265:6:27"},"scope":6383,"src":"1203:69:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":6351,"nodeType":"StructuredDocumentation","src":"1278:264:27","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":6360,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1556:9:27","nodeType":"FunctionDefinition","parameters":{"id":6356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6353,"mutability":"mutable","name":"owner","nameLocation":"1574:5:27","nodeType":"VariableDeclaration","scope":6360,"src":"1566:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6352,"name":"address","nodeType":"ElementaryTypeName","src":"1566:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6355,"mutability":"mutable","name":"spender","nameLocation":"1589:7:27","nodeType":"VariableDeclaration","scope":6360,"src":"1581:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6354,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1565:32:27"},"returnParameters":{"id":6359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6360,"src":"1621:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6357,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1620:9:27"},"scope":6383,"src":"1547:83:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6361,"nodeType":"StructuredDocumentation","src":"1636:667:27","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":6370,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2317:7:27","nodeType":"FunctionDefinition","parameters":{"id":6366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6363,"mutability":"mutable","name":"spender","nameLocation":"2333:7:27","nodeType":"VariableDeclaration","scope":6370,"src":"2325:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6362,"name":"address","nodeType":"ElementaryTypeName","src":"2325:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6365,"mutability":"mutable","name":"value","nameLocation":"2350:5:27","nodeType":"VariableDeclaration","scope":6370,"src":"2342:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6364,"name":"uint256","nodeType":"ElementaryTypeName","src":"2342:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2324:32:27"},"returnParameters":{"id":6369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6370,"src":"2375:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6367,"name":"bool","nodeType":"ElementaryTypeName","src":"2375:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2374:6:27"},"scope":6383,"src":"2308:73:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":6371,"nodeType":"StructuredDocumentation","src":"2387:297:27","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":6382,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2698:12:27","nodeType":"FunctionDefinition","parameters":{"id":6378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6373,"mutability":"mutable","name":"from","nameLocation":"2719:4:27","nodeType":"VariableDeclaration","scope":6382,"src":"2711:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6372,"name":"address","nodeType":"ElementaryTypeName","src":"2711:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6375,"mutability":"mutable","name":"to","nameLocation":"2733:2:27","nodeType":"VariableDeclaration","scope":6382,"src":"2725:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6374,"name":"address","nodeType":"ElementaryTypeName","src":"2725:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6377,"mutability":"mutable","name":"value","nameLocation":"2745:5:27","nodeType":"VariableDeclaration","scope":6382,"src":"2737:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6376,"name":"uint256","nodeType":"ElementaryTypeName","src":"2737:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2710:41:27"},"returnParameters":{"id":6381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6382,"src":"2770:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6379,"name":"bool","nodeType":"ElementaryTypeName","src":"2770:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2769:6:27"},"scope":6383,"src":"2689:87:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6384,"src":"203:2575:27","usedErrors":[],"usedEvents":[6317,6326]}],"src":"106:2673:27"},"id":27},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[6383],"IERC20Metadata":[6409]},"id":6410,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6385,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"125:24:28"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":6387,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6410,"sourceUnit":6384,"src":"151:37:28","symbolAliases":[{"foreign":{"id":6386,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"159:6:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6389,"name":"IERC20","nameLocations":["305:6:28"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"305:6:28"},"id":6390,"nodeType":"InheritanceSpecifier","src":"305:6:28"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":6388,"nodeType":"StructuredDocumentation","src":"190:86:28","text":" @dev Interface for the optional metadata functions from the ERC20 standard."},"fullyImplemented":false,"id":6409,"linearizedBaseContracts":[6409,6383],"name":"IERC20Metadata","nameLocation":"287:14:28","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":6391,"nodeType":"StructuredDocumentation","src":"318:54:28","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":6396,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:28","nodeType":"FunctionDefinition","parameters":{"id":6392,"nodeType":"ParameterList","parameters":[],"src":"390:2:28"},"returnParameters":{"id":6395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6394,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6396,"src":"416:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6393,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:28"},"scope":6409,"src":"377:54:28","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6397,"nodeType":"StructuredDocumentation","src":"437:56:28","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":6402,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:28","nodeType":"FunctionDefinition","parameters":{"id":6398,"nodeType":"ParameterList","parameters":[],"src":"513:2:28"},"returnParameters":{"id":6401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6402,"src":"539:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6399,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:28"},"scope":6409,"src":"498:56:28","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6403,"nodeType":"StructuredDocumentation","src":"560:65:28","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":6408,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:28","nodeType":"FunctionDefinition","parameters":{"id":6404,"nodeType":"ParameterList","parameters":[],"src":"647:2:28"},"returnParameters":{"id":6407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6406,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6408,"src":"673:5:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6405,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:28"},"scope":6409,"src":"630:50:28","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6410,"src":"277:405:28","usedErrors":[],"usedEvents":[6317,6326]}],"src":"125:558:28"},"id":28},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[6445]},"id":6446,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6411,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"123:24:29"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":6412,"nodeType":"StructuredDocumentation","src":"149:1963:29","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."},"fullyImplemented":false,"id":6445,"linearizedBaseContracts":[6445],"name":"IERC20Permit","nameLocation":"2123:12:29","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":6413,"nodeType":"StructuredDocumentation","src":"2142:850:29","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."},"functionSelector":"d505accf","id":6430,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"3006:6:29","nodeType":"FunctionDefinition","parameters":{"id":6428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6415,"mutability":"mutable","name":"owner","nameLocation":"3030:5:29","nodeType":"VariableDeclaration","scope":6430,"src":"3022:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6414,"name":"address","nodeType":"ElementaryTypeName","src":"3022:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6417,"mutability":"mutable","name":"spender","nameLocation":"3053:7:29","nodeType":"VariableDeclaration","scope":6430,"src":"3045:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6416,"name":"address","nodeType":"ElementaryTypeName","src":"3045:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6419,"mutability":"mutable","name":"value","nameLocation":"3078:5:29","nodeType":"VariableDeclaration","scope":6430,"src":"3070:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6418,"name":"uint256","nodeType":"ElementaryTypeName","src":"3070:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6421,"mutability":"mutable","name":"deadline","nameLocation":"3101:8:29","nodeType":"VariableDeclaration","scope":6430,"src":"3093:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6420,"name":"uint256","nodeType":"ElementaryTypeName","src":"3093:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6423,"mutability":"mutable","name":"v","nameLocation":"3125:1:29","nodeType":"VariableDeclaration","scope":6430,"src":"3119:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6422,"name":"uint8","nodeType":"ElementaryTypeName","src":"3119:5:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":6425,"mutability":"mutable","name":"r","nameLocation":"3144:1:29","nodeType":"VariableDeclaration","scope":6430,"src":"3136:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3136:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6427,"mutability":"mutable","name":"s","nameLocation":"3163:1:29","nodeType":"VariableDeclaration","scope":6430,"src":"3155:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6426,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3155:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3012:158:29"},"returnParameters":{"id":6429,"nodeType":"ParameterList","parameters":[],"src":"3179:0:29"},"scope":6445,"src":"2997:183:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":6431,"nodeType":"StructuredDocumentation","src":"3186:294:29","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":6438,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3494:6:29","nodeType":"FunctionDefinition","parameters":{"id":6434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6433,"mutability":"mutable","name":"owner","nameLocation":"3509:5:29","nodeType":"VariableDeclaration","scope":6438,"src":"3501:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6432,"name":"address","nodeType":"ElementaryTypeName","src":"3501:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3500:15:29"},"returnParameters":{"id":6437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6438,"src":"3539:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6435,"name":"uint256","nodeType":"ElementaryTypeName","src":"3539:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3538:9:29"},"scope":6445,"src":"3485:63:29","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6439,"nodeType":"StructuredDocumentation","src":"3554:128:29","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":6444,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3749:16:29","nodeType":"FunctionDefinition","parameters":{"id":6440,"nodeType":"ParameterList","parameters":[],"src":"3765:2:29"},"returnParameters":{"id":6443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6444,"src":"3791:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6441,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3791:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3790:9:29"},"scope":6445,"src":"3740:60:29","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6446,"src":"2113:1689:29","usedErrors":[],"usedEvents":[]}],"src":"123:3680:29"},"id":29},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[6988],"IERC20":[6383],"IERC20Permit":[6445],"SafeERC20":[6735]},"id":6736,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6447,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:30"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":6449,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6736,"sourceUnit":6384,"src":"141:37:30","symbolAliases":[{"foreign":{"id":6448,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"149:6:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":6451,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6736,"sourceUnit":6446,"src":"179:60:30","symbolAliases":[{"foreign":{"id":6450,"name":"IERC20Permit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6445,"src":"187:12:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":6453,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6736,"sourceUnit":6989,"src":"240:51:30","symbolAliases":[{"foreign":{"id":6452,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6988,"src":"248:7:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":6454,"nodeType":"StructuredDocumentation","src":"293:457:30","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":6735,"linearizedBaseContracts":[6735],"name":"SafeERC20","nameLocation":"759:9:30","nodeType":"ContractDefinition","nodes":[{"global":false,"id":6457,"libraryName":{"id":6455,"name":"Address","nameLocations":["781:7:30"],"nodeType":"IdentifierPath","referencedDeclaration":6988,"src":"781:7:30"},"nodeType":"UsingForDirective","src":"775:26:30","typeName":{"id":6456,"name":"address","nodeType":"ElementaryTypeName","src":"793:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"documentation":{"id":6458,"nodeType":"StructuredDocumentation","src":"807:64:30","text":" @dev An operation with an ERC20 token failed."},"errorSelector":"5274afe7","id":6462,"name":"SafeERC20FailedOperation","nameLocation":"882:24:30","nodeType":"ErrorDefinition","parameters":{"id":6461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6460,"mutability":"mutable","name":"token","nameLocation":"915:5:30","nodeType":"VariableDeclaration","scope":6462,"src":"907:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6459,"name":"address","nodeType":"ElementaryTypeName","src":"907:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"906:15:30"},"src":"876:46:30"},{"documentation":{"id":6463,"nodeType":"StructuredDocumentation","src":"928:71:30","text":" @dev Indicates a failed `decreaseAllowance` request."},"errorSelector":"e570110f","id":6471,"name":"SafeERC20FailedDecreaseAllowance","nameLocation":"1010:32:30","nodeType":"ErrorDefinition","parameters":{"id":6470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6465,"mutability":"mutable","name":"spender","nameLocation":"1051:7:30","nodeType":"VariableDeclaration","scope":6471,"src":"1043:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6464,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6467,"mutability":"mutable","name":"currentAllowance","nameLocation":"1068:16:30","nodeType":"VariableDeclaration","scope":6471,"src":"1060:24:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6466,"name":"uint256","nodeType":"ElementaryTypeName","src":"1060:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6469,"mutability":"mutable","name":"requestedDecrease","nameLocation":"1094:17:30","nodeType":"VariableDeclaration","scope":6471,"src":"1086:25:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6468,"name":"uint256","nodeType":"ElementaryTypeName","src":"1086:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1042:70:30"},"src":"1004:109:30"},{"body":{"id":6494,"nodeType":"Block","src":"1375:88:30","statements":[{"expression":{"arguments":[{"id":6483,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6475,"src":"1405:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":6486,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6475,"src":"1427:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":6487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1433:8:30","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":6350,"src":"1427:14:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":6488,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6477,"src":"1444:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6489,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6479,"src":"1448:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6490,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1443:11:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":6484,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1412:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1416:10:30","memberName":"encodeCall","nodeType":"MemberAccess","src":"1412:14:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1412:43:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6482,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6685,"src":"1385:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6383_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":6492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:71:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6493,"nodeType":"ExpressionStatement","src":"1385:71:30"}]},"documentation":{"id":6472,"nodeType":"StructuredDocumentation","src":"1119:179:30","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":6495,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1312:12:30","nodeType":"FunctionDefinition","parameters":{"id":6480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6475,"mutability":"mutable","name":"token","nameLocation":"1332:5:30","nodeType":"VariableDeclaration","scope":6495,"src":"1325:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":6474,"nodeType":"UserDefinedTypeName","pathNode":{"id":6473,"name":"IERC20","nameLocations":["1325:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"1325:6:30"},"referencedDeclaration":6383,"src":"1325:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6477,"mutability":"mutable","name":"to","nameLocation":"1347:2:30","nodeType":"VariableDeclaration","scope":6495,"src":"1339:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6476,"name":"address","nodeType":"ElementaryTypeName","src":"1339:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6479,"mutability":"mutable","name":"value","nameLocation":"1359:5:30","nodeType":"VariableDeclaration","scope":6495,"src":"1351:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6478,"name":"uint256","nodeType":"ElementaryTypeName","src":"1351:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1324:41:30"},"returnParameters":{"id":6481,"nodeType":"ParameterList","parameters":[],"src":"1375:0:30"},"scope":6735,"src":"1303:160:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6521,"nodeType":"Block","src":"1792:98:30","statements":[{"expression":{"arguments":[{"id":6509,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6499,"src":"1822:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":6512,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6499,"src":"1844:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":6513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1850:12:30","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":6382,"src":"1844:18:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},{"components":[{"id":6514,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6501,"src":"1865:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6515,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6503,"src":"1871:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6516,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6505,"src":"1875:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6517,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1864:17:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}],"expression":{"id":6510,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1829:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1833:10:30","memberName":"encodeCall","nodeType":"MemberAccess","src":"1829:14:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1829:53:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6508,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6685,"src":"1802:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6383_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":6519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1802:81:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6520,"nodeType":"ExpressionStatement","src":"1802:81:30"}]},"documentation":{"id":6496,"nodeType":"StructuredDocumentation","src":"1469:228:30","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":6522,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1711:16:30","nodeType":"FunctionDefinition","parameters":{"id":6506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6499,"mutability":"mutable","name":"token","nameLocation":"1735:5:30","nodeType":"VariableDeclaration","scope":6522,"src":"1728:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":6498,"nodeType":"UserDefinedTypeName","pathNode":{"id":6497,"name":"IERC20","nameLocations":["1728:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"1728:6:30"},"referencedDeclaration":6383,"src":"1728:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6501,"mutability":"mutable","name":"from","nameLocation":"1750:4:30","nodeType":"VariableDeclaration","scope":6522,"src":"1742:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6500,"name":"address","nodeType":"ElementaryTypeName","src":"1742:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6503,"mutability":"mutable","name":"to","nameLocation":"1764:2:30","nodeType":"VariableDeclaration","scope":6522,"src":"1756:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6502,"name":"address","nodeType":"ElementaryTypeName","src":"1756:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6505,"mutability":"mutable","name":"value","nameLocation":"1776:5:30","nodeType":"VariableDeclaration","scope":6522,"src":"1768:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6504,"name":"uint256","nodeType":"ElementaryTypeName","src":"1768:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1727:55:30"},"returnParameters":{"id":6507,"nodeType":"ParameterList","parameters":[],"src":"1792:0:30"},"scope":6735,"src":"1702:188:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6552,"nodeType":"Block","src":"2167:139:30","statements":[{"assignments":[6534],"declarations":[{"constant":false,"id":6534,"mutability":"mutable","name":"oldAllowance","nameLocation":"2185:12:30","nodeType":"VariableDeclaration","scope":6552,"src":"2177:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6533,"name":"uint256","nodeType":"ElementaryTypeName","src":"2177:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6543,"initialValue":{"arguments":[{"arguments":[{"id":6539,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2224:4:30","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$6735","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$6735","typeString":"library SafeERC20"}],"id":6538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2216:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6537,"name":"address","nodeType":"ElementaryTypeName","src":"2216:7:30","typeDescriptions":{}}},"id":6540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2216:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6541,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6528,"src":"2231:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6535,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6526,"src":"2200:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":6536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2206:9:30","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":6360,"src":"2200:15:30","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":6542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2200:39:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2177:62:30"},{"expression":{"arguments":[{"id":6545,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6526,"src":"2262:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":6546,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6528,"src":"2269:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6547,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6534,"src":"2278:12:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6548,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6530,"src":"2293:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2278:20:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6544,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6643,"src":"2249:12:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6383_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":6550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2249:50:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6551,"nodeType":"ExpressionStatement","src":"2249:50:30"}]},"documentation":{"id":6523,"nodeType":"StructuredDocumentation","src":"1896:180:30","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":6553,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2090:21:30","nodeType":"FunctionDefinition","parameters":{"id":6531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6526,"mutability":"mutable","name":"token","nameLocation":"2119:5:30","nodeType":"VariableDeclaration","scope":6553,"src":"2112:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":6525,"nodeType":"UserDefinedTypeName","pathNode":{"id":6524,"name":"IERC20","nameLocations":["2112:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2112:6:30"},"referencedDeclaration":6383,"src":"2112:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6528,"mutability":"mutable","name":"spender","nameLocation":"2134:7:30","nodeType":"VariableDeclaration","scope":6553,"src":"2126:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6527,"name":"address","nodeType":"ElementaryTypeName","src":"2126:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6530,"mutability":"mutable","name":"value","nameLocation":"2151:5:30","nodeType":"VariableDeclaration","scope":6553,"src":"2143:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6529,"name":"uint256","nodeType":"ElementaryTypeName","src":"2143:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2111:46:30"},"returnParameters":{"id":6532,"nodeType":"ParameterList","parameters":[],"src":"2167:0:30"},"scope":6735,"src":"2081:225:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6595,"nodeType":"Block","src":"2607:370:30","statements":[{"id":6594,"nodeType":"UncheckedBlock","src":"2617:354:30","statements":[{"assignments":[6565],"declarations":[{"constant":false,"id":6565,"mutability":"mutable","name":"currentAllowance","nameLocation":"2649:16:30","nodeType":"VariableDeclaration","scope":6594,"src":"2641:24:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6564,"name":"uint256","nodeType":"ElementaryTypeName","src":"2641:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6574,"initialValue":{"arguments":[{"arguments":[{"id":6570,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2692:4:30","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$6735","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$6735","typeString":"library SafeERC20"}],"id":6569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2684:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6568,"name":"address","nodeType":"ElementaryTypeName","src":"2684:7:30","typeDescriptions":{}}},"id":6571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2684:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6572,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6559,"src":"2699:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6566,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6557,"src":"2668:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":6567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2674:9:30","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":6360,"src":"2668:15:30","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":6573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:39:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2641:66:30"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6575,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6565,"src":"2725:16:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6576,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6561,"src":"2744:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2725:36:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6585,"nodeType":"IfStatement","src":"2721:160:30","trueBody":{"id":6584,"nodeType":"Block","src":"2763:118:30","statements":[{"errorCall":{"arguments":[{"id":6579,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6559,"src":"2821:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6580,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6565,"src":"2830:16:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6581,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6561,"src":"2848:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6578,"name":"SafeERC20FailedDecreaseAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6471,"src":"2788:32:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256,uint256) pure returns (error)"}},"id":6582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2788:78:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6583,"nodeType":"RevertStatement","src":"2781:85:30"}]}},{"expression":{"arguments":[{"id":6587,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6557,"src":"2907:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":6588,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6559,"src":"2914:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6589,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6565,"src":"2923:16:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6590,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6561,"src":"2942:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2923:36:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6586,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6643,"src":"2894:12:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6383_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":6592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2894:66:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6593,"nodeType":"ExpressionStatement","src":"2894:66:30"}]}]},"documentation":{"id":6554,"nodeType":"StructuredDocumentation","src":"2312:192:30","text":" @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful."},"id":6596,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2518:21:30","nodeType":"FunctionDefinition","parameters":{"id":6562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6557,"mutability":"mutable","name":"token","nameLocation":"2547:5:30","nodeType":"VariableDeclaration","scope":6596,"src":"2540:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":6556,"nodeType":"UserDefinedTypeName","pathNode":{"id":6555,"name":"IERC20","nameLocations":["2540:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2540:6:30"},"referencedDeclaration":6383,"src":"2540:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6559,"mutability":"mutable","name":"spender","nameLocation":"2562:7:30","nodeType":"VariableDeclaration","scope":6596,"src":"2554:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6558,"name":"address","nodeType":"ElementaryTypeName","src":"2554:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6561,"mutability":"mutable","name":"requestedDecrease","nameLocation":"2579:17:30","nodeType":"VariableDeclaration","scope":6596,"src":"2571:25:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6560,"name":"uint256","nodeType":"ElementaryTypeName","src":"2571:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2539:58:30"},"returnParameters":{"id":6563,"nodeType":"ParameterList","parameters":[],"src":"2607:0:30"},"scope":6735,"src":"2509:468:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6642,"nodeType":"Block","src":"3373:303:30","statements":[{"assignments":[6608],"declarations":[{"constant":false,"id":6608,"mutability":"mutable","name":"approvalCall","nameLocation":"3396:12:30","nodeType":"VariableDeclaration","scope":6642,"src":"3383:25:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6607,"name":"bytes","nodeType":"ElementaryTypeName","src":"3383:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6617,"initialValue":{"arguments":[{"expression":{"id":6611,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6600,"src":"3426:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":6612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3432:7:30","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":6370,"src":"3426:13:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":6613,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6602,"src":"3442:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6614,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6604,"src":"3451:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6615,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3441:16:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":6609,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3411:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3415:10:30","memberName":"encodeCall","nodeType":"MemberAccess","src":"3411:14:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3411:47:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3383:75:30"},{"condition":{"id":6622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3473:45:30","subExpression":{"arguments":[{"id":6619,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6600,"src":"3498:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":6620,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6608,"src":"3505:12:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6618,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6734,"src":"3474:23:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6383_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":6621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3474:44:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6641,"nodeType":"IfStatement","src":"3469:201:30","trueBody":{"id":6640,"nodeType":"Block","src":"3520:150:30","statements":[{"expression":{"arguments":[{"id":6624,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6600,"src":"3554:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":6627,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6600,"src":"3576:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":6628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3582:7:30","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":6370,"src":"3576:13:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":6629,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6602,"src":"3592:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":6630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3601:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":6631,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3591:12:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}],"expression":{"id":6625,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3561:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3565:10:30","memberName":"encodeCall","nodeType":"MemberAccess","src":"3561:14:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3561:43:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6623,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6685,"src":"3534:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6383_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":6633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3534:71:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6634,"nodeType":"ExpressionStatement","src":"3534:71:30"},{"expression":{"arguments":[{"id":6636,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6600,"src":"3639:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":6637,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6608,"src":"3646:12:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6635,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6685,"src":"3619:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6383_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":6638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3619:40:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6639,"nodeType":"ExpressionStatement","src":"3619:40:30"}]}}]},"documentation":{"id":6597,"nodeType":"StructuredDocumentation","src":"2983:308:30","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":6643,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3305:12:30","nodeType":"FunctionDefinition","parameters":{"id":6605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6600,"mutability":"mutable","name":"token","nameLocation":"3325:5:30","nodeType":"VariableDeclaration","scope":6643,"src":"3318:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":6599,"nodeType":"UserDefinedTypeName","pathNode":{"id":6598,"name":"IERC20","nameLocations":["3318:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"3318:6:30"},"referencedDeclaration":6383,"src":"3318:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6602,"mutability":"mutable","name":"spender","nameLocation":"3340:7:30","nodeType":"VariableDeclaration","scope":6643,"src":"3332:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6601,"name":"address","nodeType":"ElementaryTypeName","src":"3332:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6604,"mutability":"mutable","name":"value","nameLocation":"3357:5:30","nodeType":"VariableDeclaration","scope":6643,"src":"3349:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6603,"name":"uint256","nodeType":"ElementaryTypeName","src":"3349:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3317:46:30"},"returnParameters":{"id":6606,"nodeType":"ParameterList","parameters":[],"src":"3373:0:30"},"scope":6735,"src":"3296:380:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6684,"nodeType":"Block","src":"4129:559:30","statements":[{"assignments":[6653],"declarations":[{"constant":false,"id":6653,"mutability":"mutable","name":"returndata","nameLocation":"4491:10:30","nodeType":"VariableDeclaration","scope":6684,"src":"4478:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6652,"name":"bytes","nodeType":"ElementaryTypeName","src":"4478:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6661,"initialValue":{"arguments":[{"id":6659,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6649,"src":"4532:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":6656,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6647,"src":"4512:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}],"id":6655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4504:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6654,"name":"address","nodeType":"ElementaryTypeName","src":"4504:7:30","typeDescriptions":{}}},"id":6657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4504:14:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4519:12:30","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":6809,"src":"4504:27:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":6660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4504:33:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4478:59:30"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6662,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6653,"src":"4551:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4562:6:30","memberName":"length","nodeType":"MemberAccess","src":"4551:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":6664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4572:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4551:22:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":6673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4577:31:30","subExpression":{"arguments":[{"id":6668,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6653,"src":"4589:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":6670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4602:4:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":6669,"name":"bool","nodeType":"ElementaryTypeName","src":"4602:4:30","typeDescriptions":{}}}],"id":6671,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4601:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":6666,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4578:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4582:6:30","memberName":"decode","nodeType":"MemberAccess","src":"4578:10:30","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4578:30:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4551:57:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6683,"nodeType":"IfStatement","src":"4547:135:30","trueBody":{"id":6682,"nodeType":"Block","src":"4610:72:30","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":6678,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6647,"src":"4664:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}],"id":6677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4656:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6676,"name":"address","nodeType":"ElementaryTypeName","src":"4656:7:30","typeDescriptions":{}}},"id":6679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4656:14:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6675,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6462,"src":"4631:24:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4631:40:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6681,"nodeType":"RevertStatement","src":"4624:47:30"}]}}]},"documentation":{"id":6644,"nodeType":"StructuredDocumentation","src":"3682:372:30","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":6685,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"4068:19:30","nodeType":"FunctionDefinition","parameters":{"id":6650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6647,"mutability":"mutable","name":"token","nameLocation":"4095:5:30","nodeType":"VariableDeclaration","scope":6685,"src":"4088:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":6646,"nodeType":"UserDefinedTypeName","pathNode":{"id":6645,"name":"IERC20","nameLocations":["4088:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"4088:6:30"},"referencedDeclaration":6383,"src":"4088:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6649,"mutability":"mutable","name":"data","nameLocation":"4115:4:30","nodeType":"VariableDeclaration","scope":6685,"src":"4102:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6648,"name":"bytes","nodeType":"ElementaryTypeName","src":"4102:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4087:33:30"},"returnParameters":{"id":6651,"nodeType":"ParameterList","parameters":[],"src":"4129:0:30"},"scope":6735,"src":"4059:629:30","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":6733,"nodeType":"Block","src":"5278:489:30","statements":[{"assignments":[6697,6699],"declarations":[{"constant":false,"id":6697,"mutability":"mutable","name":"success","nameLocation":"5579:7:30","nodeType":"VariableDeclaration","scope":6733,"src":"5574:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6696,"name":"bool","nodeType":"ElementaryTypeName","src":"5574:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6699,"mutability":"mutable","name":"returndata","nameLocation":"5601:10:30","nodeType":"VariableDeclaration","scope":6733,"src":"5588:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6698,"name":"bytes","nodeType":"ElementaryTypeName","src":"5588:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6707,"initialValue":{"arguments":[{"id":6705,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6691,"src":"5635:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":6702,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6689,"src":"5623:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}],"id":6701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5615:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6700,"name":"address","nodeType":"ElementaryTypeName","src":"5615:7:30","typeDescriptions":{}}},"id":6703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5615:14:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5630:4:30","memberName":"call","nodeType":"MemberAccess","src":"5615:19:30","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5615:25:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5573:67:30"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6708,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6697,"src":"5657:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6709,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6699,"src":"5669:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5680:6:30","memberName":"length","nodeType":"MemberAccess","src":"5669:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5690:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5669:22:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":6715,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6699,"src":"5706:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":6717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5719:4:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":6716,"name":"bool","nodeType":"ElementaryTypeName","src":"5719:4:30","typeDescriptions":{}}}],"id":6718,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5718:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":6713,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5695:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5699:6:30","memberName":"decode","nodeType":"MemberAccess","src":"5695:10:30","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5695:30:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5669:56:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":6721,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5668:58:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5657:69:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":6725,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6689,"src":"5738:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}],"id":6724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5730:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6723,"name":"address","nodeType":"ElementaryTypeName","src":"5730:7:30","typeDescriptions":{}}},"id":6726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5730:14:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5745:4:30","memberName":"code","nodeType":"MemberAccess","src":"5730:19:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5750:6:30","memberName":"length","nodeType":"MemberAccess","src":"5730:26:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5759:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5730:30:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5657:103:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6695,"id":6732,"nodeType":"Return","src":"5650:110:30"}]},"documentation":{"id":6686,"nodeType":"StructuredDocumentation","src":"4694:490:30","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":6734,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"5198:23:30","nodeType":"FunctionDefinition","parameters":{"id":6692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6689,"mutability":"mutable","name":"token","nameLocation":"5229:5:30","nodeType":"VariableDeclaration","scope":6734,"src":"5222:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":6688,"nodeType":"UserDefinedTypeName","pathNode":{"id":6687,"name":"IERC20","nameLocations":["5222:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"5222:6:30"},"referencedDeclaration":6383,"src":"5222:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6691,"mutability":"mutable","name":"data","nameLocation":"5249:4:30","nodeType":"VariableDeclaration","scope":6734,"src":"5236:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6690,"name":"bytes","nodeType":"ElementaryTypeName","src":"5236:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5221:33:30"},"returnParameters":{"id":6695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6734,"src":"5272:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6693,"name":"bool","nodeType":"ElementaryTypeName","src":"5272:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5271:6:30"},"scope":6735,"src":"5189:578:30","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":6736,"src":"751:5018:30","usedErrors":[6462,6471],"usedEvents":[]}],"src":"115:5655:30"},"id":30},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[6988]},"id":6989,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6737,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:31"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":6738,"nodeType":"StructuredDocumentation","src":"127:67:31","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":6988,"linearizedBaseContracts":[6988],"name":"Address","nameLocation":"203:7:31","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":6739,"nodeType":"StructuredDocumentation","src":"217:94:31","text":" @dev The ETH balance of the account is not enough to perform the operation."},"errorSelector":"cd786059","id":6743,"name":"AddressInsufficientBalance","nameLocation":"322:26:31","nodeType":"ErrorDefinition","parameters":{"id":6742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6741,"mutability":"mutable","name":"account","nameLocation":"357:7:31","nodeType":"VariableDeclaration","scope":6743,"src":"349:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6740,"name":"address","nodeType":"ElementaryTypeName","src":"349:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"348:17:31"},"src":"316:50:31"},{"documentation":{"id":6744,"nodeType":"StructuredDocumentation","src":"372:75:31","text":" @dev There's no code at `target` (it is not a contract)."},"errorSelector":"9996b315","id":6748,"name":"AddressEmptyCode","nameLocation":"458:16:31","nodeType":"ErrorDefinition","parameters":{"id":6747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6746,"mutability":"mutable","name":"target","nameLocation":"483:6:31","nodeType":"VariableDeclaration","scope":6748,"src":"475:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6745,"name":"address","nodeType":"ElementaryTypeName","src":"475:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"474:16:31"},"src":"452:39:31"},{"documentation":{"id":6749,"nodeType":"StructuredDocumentation","src":"497:89:31","text":" @dev A call to an address target failed. The target may have reverted."},"errorSelector":"1425ea42","id":6751,"name":"FailedInnerCall","nameLocation":"597:15:31","nodeType":"ErrorDefinition","parameters":{"id":6750,"nodeType":"ParameterList","parameters":[],"src":"612:2:31"},"src":"591:24:31"},{"body":{"id":6791,"nodeType":"Block","src":"1602:260:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":6761,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1624:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$6988","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$6988","typeString":"library Address"}],"id":6760,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1616:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6759,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:31","typeDescriptions":{}}},"id":6762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1616:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1630:7:31","memberName":"balance","nodeType":"MemberAccess","src":"1616:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6764,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6756,"src":"1640:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1616:30:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6774,"nodeType":"IfStatement","src":"1612:109:31","trueBody":{"id":6773,"nodeType":"Block","src":"1648:73:31","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":6769,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1704:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$6988","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$6988","typeString":"library Address"}],"id":6768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1696:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6767,"name":"address","nodeType":"ElementaryTypeName","src":"1696:7:31","typeDescriptions":{}}},"id":6770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1696:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6766,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6743,"src":"1669:26:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1669:41:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6772,"nodeType":"RevertStatement","src":"1662:48:31"}]}},{"assignments":[6776,null],"declarations":[{"constant":false,"id":6776,"mutability":"mutable","name":"success","nameLocation":"1737:7:31","nodeType":"VariableDeclaration","scope":6791,"src":"1732:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6775,"name":"bool","nodeType":"ElementaryTypeName","src":"1732:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":6783,"initialValue":{"arguments":[{"hexValue":"","id":6781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1780:2:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":6777,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6754,"src":"1750:9:31","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":6778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1760:4:31","memberName":"call","nodeType":"MemberAccess","src":"1750:14:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":6779,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6756,"src":"1772:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1750:29:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1750:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1731:52:31"},{"condition":{"id":6785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1797:8:31","subExpression":{"id":6784,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6776,"src":"1798:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6790,"nodeType":"IfStatement","src":"1793:63:31","trueBody":{"id":6789,"nodeType":"Block","src":"1807:49:31","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6786,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6751,"src":"1828:15:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":6787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:17:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6788,"nodeType":"RevertStatement","src":"1821:24:31"}]}}]},"documentation":{"id":6752,"nodeType":"StructuredDocumentation","src":"621:905:31","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":6792,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"1540:9:31","nodeType":"FunctionDefinition","parameters":{"id":6757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6754,"mutability":"mutable","name":"recipient","nameLocation":"1566:9:31","nodeType":"VariableDeclaration","scope":6792,"src":"1550:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":6753,"name":"address","nodeType":"ElementaryTypeName","src":"1550:15:31","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":6756,"mutability":"mutable","name":"amount","nameLocation":"1585:6:31","nodeType":"VariableDeclaration","scope":6792,"src":"1577:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6755,"name":"uint256","nodeType":"ElementaryTypeName","src":"1577:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1549:43:31"},"returnParameters":{"id":6758,"nodeType":"ParameterList","parameters":[],"src":"1602:0:31"},"scope":6988,"src":"1531:331:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6808,"nodeType":"Block","src":"2794:62:31","statements":[{"expression":{"arguments":[{"id":6803,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6795,"src":"2833:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6804,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6797,"src":"2841:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":6805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2847:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6802,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6855,"src":"2811:21:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":6806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2811:38:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6801,"id":6807,"nodeType":"Return","src":"2804:45:31"}]},"documentation":{"id":6793,"nodeType":"StructuredDocumentation","src":"1868:832:31","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."},"id":6809,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"2714:12:31","nodeType":"FunctionDefinition","parameters":{"id":6798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6795,"mutability":"mutable","name":"target","nameLocation":"2735:6:31","nodeType":"VariableDeclaration","scope":6809,"src":"2727:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6794,"name":"address","nodeType":"ElementaryTypeName","src":"2727:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6797,"mutability":"mutable","name":"data","nameLocation":"2756:4:31","nodeType":"VariableDeclaration","scope":6809,"src":"2743:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6796,"name":"bytes","nodeType":"ElementaryTypeName","src":"2743:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2726:35:31"},"returnParameters":{"id":6801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6800,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6809,"src":"2780:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6799,"name":"bytes","nodeType":"ElementaryTypeName","src":"2780:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2779:14:31"},"scope":6988,"src":"2705:151:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6854,"nodeType":"Block","src":"3293:279:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":6823,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3315:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$6988","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$6988","typeString":"library Address"}],"id":6822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3307:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6821,"name":"address","nodeType":"ElementaryTypeName","src":"3307:7:31","typeDescriptions":{}}},"id":6824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3321:7:31","memberName":"balance","nodeType":"MemberAccess","src":"3307:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6816,"src":"3331:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3307:29:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6836,"nodeType":"IfStatement","src":"3303:108:31","trueBody":{"id":6835,"nodeType":"Block","src":"3338:73:31","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":6831,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3394:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$6988","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$6988","typeString":"library Address"}],"id":6830,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3386:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6829,"name":"address","nodeType":"ElementaryTypeName","src":"3386:7:31","typeDescriptions":{}}},"id":6832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3386:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6828,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6743,"src":"3359:26:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:41:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6834,"nodeType":"RevertStatement","src":"3352:48:31"}]}},{"assignments":[6838,6840],"declarations":[{"constant":false,"id":6838,"mutability":"mutable","name":"success","nameLocation":"3426:7:31","nodeType":"VariableDeclaration","scope":6854,"src":"3421:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6837,"name":"bool","nodeType":"ElementaryTypeName","src":"3421:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6840,"mutability":"mutable","name":"returndata","nameLocation":"3448:10:31","nodeType":"VariableDeclaration","scope":6854,"src":"3435:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6839,"name":"bytes","nodeType":"ElementaryTypeName","src":"3435:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6847,"initialValue":{"arguments":[{"id":6845,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6814,"src":"3488:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6841,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6812,"src":"3462:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3469:4:31","memberName":"call","nodeType":"MemberAccess","src":"3462:11:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":6843,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6816,"src":"3481:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3462:25:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3462:31:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3420:73:31"},{"expression":{"arguments":[{"id":6849,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6812,"src":"3537:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6850,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6838,"src":"3545:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":6851,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6840,"src":"3554:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6848,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6947,"src":"3510:26:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":6852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3510:55:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6820,"id":6853,"nodeType":"Return","src":"3503:62:31"}]},"documentation":{"id":6810,"nodeType":"StructuredDocumentation","src":"2862:313:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."},"id":6855,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"3189:21:31","nodeType":"FunctionDefinition","parameters":{"id":6817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6812,"mutability":"mutable","name":"target","nameLocation":"3219:6:31","nodeType":"VariableDeclaration","scope":6855,"src":"3211:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6811,"name":"address","nodeType":"ElementaryTypeName","src":"3211:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6814,"mutability":"mutable","name":"data","nameLocation":"3240:4:31","nodeType":"VariableDeclaration","scope":6855,"src":"3227:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6813,"name":"bytes","nodeType":"ElementaryTypeName","src":"3227:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6816,"mutability":"mutable","name":"value","nameLocation":"3254:5:31","nodeType":"VariableDeclaration","scope":6855,"src":"3246:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6815,"name":"uint256","nodeType":"ElementaryTypeName","src":"3246:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3210:50:31"},"returnParameters":{"id":6820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6819,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6855,"src":"3279:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6818,"name":"bytes","nodeType":"ElementaryTypeName","src":"3279:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3278:14:31"},"scope":6988,"src":"3180:392:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6880,"nodeType":"Block","src":"3811:154:31","statements":[{"assignments":[6866,6868],"declarations":[{"constant":false,"id":6866,"mutability":"mutable","name":"success","nameLocation":"3827:7:31","nodeType":"VariableDeclaration","scope":6880,"src":"3822:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6865,"name":"bool","nodeType":"ElementaryTypeName","src":"3822:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6868,"mutability":"mutable","name":"returndata","nameLocation":"3849:10:31","nodeType":"VariableDeclaration","scope":6880,"src":"3836:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6867,"name":"bytes","nodeType":"ElementaryTypeName","src":"3836:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6873,"initialValue":{"arguments":[{"id":6871,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6860,"src":"3881:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6869,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6858,"src":"3863:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3870:10:31","memberName":"staticcall","nodeType":"MemberAccess","src":"3863:17:31","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":6872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3863:23:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3821:65:31"},{"expression":{"arguments":[{"id":6875,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6858,"src":"3930:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6876,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6866,"src":"3938:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":6877,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6868,"src":"3947:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6874,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6947,"src":"3903:26:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":6878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3903:55:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6864,"id":6879,"nodeType":"Return","src":"3896:62:31"}]},"documentation":{"id":6856,"nodeType":"StructuredDocumentation","src":"3578:128:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."},"id":6881,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"3720:18:31","nodeType":"FunctionDefinition","parameters":{"id":6861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6858,"mutability":"mutable","name":"target","nameLocation":"3747:6:31","nodeType":"VariableDeclaration","scope":6881,"src":"3739:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6857,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6860,"mutability":"mutable","name":"data","nameLocation":"3768:4:31","nodeType":"VariableDeclaration","scope":6881,"src":"3755:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6859,"name":"bytes","nodeType":"ElementaryTypeName","src":"3755:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3738:35:31"},"returnParameters":{"id":6864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6863,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6881,"src":"3797:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6862,"name":"bytes","nodeType":"ElementaryTypeName","src":"3797:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3796:14:31"},"scope":6988,"src":"3711:254:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6906,"nodeType":"Block","src":"4203:156:31","statements":[{"assignments":[6892,6894],"declarations":[{"constant":false,"id":6892,"mutability":"mutable","name":"success","nameLocation":"4219:7:31","nodeType":"VariableDeclaration","scope":6906,"src":"4214:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6891,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6894,"mutability":"mutable","name":"returndata","nameLocation":"4241:10:31","nodeType":"VariableDeclaration","scope":6906,"src":"4228:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6893,"name":"bytes","nodeType":"ElementaryTypeName","src":"4228:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6899,"initialValue":{"arguments":[{"id":6897,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6886,"src":"4275:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6895,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6884,"src":"4255:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4262:12:31","memberName":"delegatecall","nodeType":"MemberAccess","src":"4255:19:31","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":6898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4255:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4213:67:31"},{"expression":{"arguments":[{"id":6901,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6884,"src":"4324:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6902,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6892,"src":"4332:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":6903,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"4341:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6900,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6947,"src":"4297:26:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":6904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:55:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6890,"id":6905,"nodeType":"Return","src":"4290:62:31"}]},"documentation":{"id":6882,"nodeType":"StructuredDocumentation","src":"3971:130:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."},"id":6907,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"4115:20:31","nodeType":"FunctionDefinition","parameters":{"id":6887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6884,"mutability":"mutable","name":"target","nameLocation":"4144:6:31","nodeType":"VariableDeclaration","scope":6907,"src":"4136:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6883,"name":"address","nodeType":"ElementaryTypeName","src":"4136:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6886,"mutability":"mutable","name":"data","nameLocation":"4165:4:31","nodeType":"VariableDeclaration","scope":6907,"src":"4152:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6885,"name":"bytes","nodeType":"ElementaryTypeName","src":"4152:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4135:35:31"},"returnParameters":{"id":6890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6907,"src":"4189:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6888,"name":"bytes","nodeType":"ElementaryTypeName","src":"4189:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4188:14:31"},"scope":6988,"src":"4106:253:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6946,"nodeType":"Block","src":"4783:424:31","statements":[{"condition":{"id":6920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4797:8:31","subExpression":{"id":6919,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6912,"src":"4798:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6944,"nodeType":"Block","src":"4857:344:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6926,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6914,"src":"5045:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5056:6:31","memberName":"length","nodeType":"MemberAccess","src":"5045:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5066:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5045:22:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":6930,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6910,"src":"5071:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5078:4:31","memberName":"code","nodeType":"MemberAccess","src":"5071:11:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5083:6:31","memberName":"length","nodeType":"MemberAccess","src":"5071:18:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5093:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5071:23:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5045:49:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6941,"nodeType":"IfStatement","src":"5041:119:31","trueBody":{"id":6940,"nodeType":"Block","src":"5096:64:31","statements":[{"errorCall":{"arguments":[{"id":6937,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6910,"src":"5138:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6936,"name":"AddressEmptyCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6748,"src":"5121:16:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5121:24:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6939,"nodeType":"RevertStatement","src":"5114:31:31"}]}},{"expression":{"id":6942,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6914,"src":"5180:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6918,"id":6943,"nodeType":"Return","src":"5173:17:31"}]},"id":6945,"nodeType":"IfStatement","src":"4793:408:31","trueBody":{"id":6925,"nodeType":"Block","src":"4807:44:31","statements":[{"expression":{"arguments":[{"id":6922,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6914,"src":"4829:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6921,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6987,"src":"4821:7:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":6923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4821:19:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6924,"nodeType":"ExpressionStatement","src":"4821:19:31"}]}}]},"documentation":{"id":6908,"nodeType":"StructuredDocumentation","src":"4365:255:31","text":" @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."},"id":6947,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"4634:26:31","nodeType":"FunctionDefinition","parameters":{"id":6915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6910,"mutability":"mutable","name":"target","nameLocation":"4678:6:31","nodeType":"VariableDeclaration","scope":6947,"src":"4670:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6909,"name":"address","nodeType":"ElementaryTypeName","src":"4670:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6912,"mutability":"mutable","name":"success","nameLocation":"4699:7:31","nodeType":"VariableDeclaration","scope":6947,"src":"4694:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6911,"name":"bool","nodeType":"ElementaryTypeName","src":"4694:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6914,"mutability":"mutable","name":"returndata","nameLocation":"4729:10:31","nodeType":"VariableDeclaration","scope":6947,"src":"4716:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6913,"name":"bytes","nodeType":"ElementaryTypeName","src":"4716:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4660:85:31"},"returnParameters":{"id":6918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6917,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6947,"src":"4769:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6916,"name":"bytes","nodeType":"ElementaryTypeName","src":"4769:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4768:14:31"},"scope":6988,"src":"4625:582:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6968,"nodeType":"Block","src":"5509:122:31","statements":[{"condition":{"id":6958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5523:8:31","subExpression":{"id":6957,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6950,"src":"5524:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6966,"nodeType":"Block","src":"5583:42:31","statements":[{"expression":{"id":6964,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6952,"src":"5604:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6956,"id":6965,"nodeType":"Return","src":"5597:17:31"}]},"id":6967,"nodeType":"IfStatement","src":"5519:106:31","trueBody":{"id":6963,"nodeType":"Block","src":"5533:44:31","statements":[{"expression":{"arguments":[{"id":6960,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6952,"src":"5555:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6959,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6987,"src":"5547:7:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":6961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5547:19:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6962,"nodeType":"ExpressionStatement","src":"5547:19:31"}]}}]},"documentation":{"id":6948,"nodeType":"StructuredDocumentation","src":"5213:189:31","text":" @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."},"id":6969,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"5416:16:31","nodeType":"FunctionDefinition","parameters":{"id":6953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6950,"mutability":"mutable","name":"success","nameLocation":"5438:7:31","nodeType":"VariableDeclaration","scope":6969,"src":"5433:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6949,"name":"bool","nodeType":"ElementaryTypeName","src":"5433:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6952,"mutability":"mutable","name":"returndata","nameLocation":"5460:10:31","nodeType":"VariableDeclaration","scope":6969,"src":"5447:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6951,"name":"bytes","nodeType":"ElementaryTypeName","src":"5447:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5432:39:31"},"returnParameters":{"id":6956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6969,"src":"5495:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6954,"name":"bytes","nodeType":"ElementaryTypeName","src":"5495:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5494:14:31"},"scope":6988,"src":"5407:224:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6986,"nodeType":"Block","src":"5798:461:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6975,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6972,"src":"5874:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5885:6:31","memberName":"length","nodeType":"MemberAccess","src":"5874:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5894:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5874:21:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6984,"nodeType":"Block","src":"6204:49:31","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6981,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6751,"src":"6225:15:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":6982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:17:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6983,"nodeType":"RevertStatement","src":"6218:24:31"}]},"id":6985,"nodeType":"IfStatement","src":"5870:383:31","trueBody":{"id":6980,"nodeType":"Block","src":"5897:301:31","statements":[{"AST":{"nativeSrc":"6055:133:31","nodeType":"YulBlock","src":"6055:133:31","statements":[{"nativeSrc":"6073:40:31","nodeType":"YulVariableDeclaration","src":"6073:40:31","value":{"arguments":[{"name":"returndata","nativeSrc":"6102:10:31","nodeType":"YulIdentifier","src":"6102:10:31"}],"functionName":{"name":"mload","nativeSrc":"6096:5:31","nodeType":"YulIdentifier","src":"6096:5:31"},"nativeSrc":"6096:17:31","nodeType":"YulFunctionCall","src":"6096:17:31"},"variables":[{"name":"returndata_size","nativeSrc":"6077:15:31","nodeType":"YulTypedName","src":"6077:15:31","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6141:2:31","nodeType":"YulLiteral","src":"6141:2:31","type":"","value":"32"},{"name":"returndata","nativeSrc":"6145:10:31","nodeType":"YulIdentifier","src":"6145:10:31"}],"functionName":{"name":"add","nativeSrc":"6137:3:31","nodeType":"YulIdentifier","src":"6137:3:31"},"nativeSrc":"6137:19:31","nodeType":"YulFunctionCall","src":"6137:19:31"},{"name":"returndata_size","nativeSrc":"6158:15:31","nodeType":"YulIdentifier","src":"6158:15:31"}],"functionName":{"name":"revert","nativeSrc":"6130:6:31","nodeType":"YulIdentifier","src":"6130:6:31"},"nativeSrc":"6130:44:31","nodeType":"YulFunctionCall","src":"6130:44:31"},"nativeSrc":"6130:44:31","nodeType":"YulExpressionStatement","src":"6130:44:31"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":6972,"isOffset":false,"isSlot":false,"src":"6102:10:31","valueSize":1},{"declaration":6972,"isOffset":false,"isSlot":false,"src":"6145:10:31","valueSize":1}],"id":6979,"nodeType":"InlineAssembly","src":"6046:142:31"}]}}]},"documentation":{"id":6970,"nodeType":"StructuredDocumentation","src":"5637:101:31","text":" @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."},"id":6987,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"5752:7:31","nodeType":"FunctionDefinition","parameters":{"id":6973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6972,"mutability":"mutable","name":"returndata","nameLocation":"5773:10:31","nodeType":"VariableDeclaration","scope":6987,"src":"5760:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6971,"name":"bytes","nodeType":"ElementaryTypeName","src":"5760:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5759:25:31"},"returnParameters":{"id":6974,"nodeType":"ParameterList","parameters":[],"src":"5798:0:31"},"scope":6988,"src":"5743:516:31","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":6989,"src":"195:6066:31","usedErrors":[6743,6748,6751],"usedEvents":[]}],"src":"101:6161:31"},"id":31},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[7010]},"id":7011,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6990,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:32"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":6991,"nodeType":"StructuredDocumentation","src":"127:496:32","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":7010,"linearizedBaseContracts":[7010],"name":"Context","nameLocation":"642:7:32","nodeType":"ContractDefinition","nodes":[{"body":{"id":6999,"nodeType":"Block","src":"718:34:32","statements":[{"expression":{"expression":{"id":6996,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:32","memberName":"sender","nodeType":"MemberAccess","src":"735:10:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6995,"id":6998,"nodeType":"Return","src":"728:17:32"}]},"id":7000,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:32","nodeType":"FunctionDefinition","parameters":{"id":6992,"nodeType":"ParameterList","parameters":[],"src":"675:2:32"},"returnParameters":{"id":6995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7000,"src":"709:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6993,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:32"},"scope":7010,"src":"656:96:32","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":7008,"nodeType":"Block","src":"825:32:32","statements":[{"expression":{"expression":{"id":7005,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:32","memberName":"data","nodeType":"MemberAccess","src":"842:8:32","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":7004,"id":7007,"nodeType":"Return","src":"835:15:32"}]},"id":7009,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:32","nodeType":"FunctionDefinition","parameters":{"id":7001,"nodeType":"ParameterList","parameters":[],"src":"775:2:32"},"returnParameters":{"id":7004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7003,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7009,"src":"809:14:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":7002,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:32","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:32"},"scope":7010,"src":"758:99:32","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":7011,"src":"624:235:32","usedErrors":[],"usedEvents":[]}],"src":"101:759:32"},"id":32},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","exportedSymbols":{"SafeCast":[8765]},"id":8766,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7012,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"192:24:33"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeCast","contractDependencies":[],"contractKind":"library","documentation":{"id":7013,"nodeType":"StructuredDocumentation","src":"218:545:33","text":" @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n checks.\n Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n easily result in undesired exploitation or bugs, since developers usually\n assume that overflows raise errors. `SafeCast` restores this intuition by\n reverting the transaction when such an operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":8765,"linearizedBaseContracts":[8765],"name":"SafeCast","nameLocation":"772:8:33","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":7014,"nodeType":"StructuredDocumentation","src":"787:68:33","text":" @dev Value doesn't fit in an uint of `bits` size."},"errorSelector":"6dfcc650","id":7020,"name":"SafeCastOverflowedUintDowncast","nameLocation":"866:30:33","nodeType":"ErrorDefinition","parameters":{"id":7019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7016,"mutability":"mutable","name":"bits","nameLocation":"903:4:33","nodeType":"VariableDeclaration","scope":7020,"src":"897:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7015,"name":"uint8","nodeType":"ElementaryTypeName","src":"897:5:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7018,"mutability":"mutable","name":"value","nameLocation":"917:5:33","nodeType":"VariableDeclaration","scope":7020,"src":"909:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7017,"name":"uint256","nodeType":"ElementaryTypeName","src":"909:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"896:27:33"},"src":"860:64:33"},{"documentation":{"id":7021,"nodeType":"StructuredDocumentation","src":"930:75:33","text":" @dev An int value doesn't fit in an uint of `bits` size."},"errorSelector":"a8ce4432","id":7025,"name":"SafeCastOverflowedIntToUint","nameLocation":"1016:27:33","nodeType":"ErrorDefinition","parameters":{"id":7024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7023,"mutability":"mutable","name":"value","nameLocation":"1051:5:33","nodeType":"VariableDeclaration","scope":7025,"src":"1044:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7022,"name":"int256","nodeType":"ElementaryTypeName","src":"1044:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1043:14:33"},"src":"1010:48:33"},{"documentation":{"id":7026,"nodeType":"StructuredDocumentation","src":"1064:67:33","text":" @dev Value doesn't fit in an int of `bits` size."},"errorSelector":"327269a7","id":7032,"name":"SafeCastOverflowedIntDowncast","nameLocation":"1142:29:33","nodeType":"ErrorDefinition","parameters":{"id":7031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7028,"mutability":"mutable","name":"bits","nameLocation":"1178:4:33","nodeType":"VariableDeclaration","scope":7032,"src":"1172:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7027,"name":"uint8","nodeType":"ElementaryTypeName","src":"1172:5:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7030,"mutability":"mutable","name":"value","nameLocation":"1191:5:33","nodeType":"VariableDeclaration","scope":7032,"src":"1184:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7029,"name":"int256","nodeType":"ElementaryTypeName","src":"1184:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1171:26:33"},"src":"1136:62:33"},{"documentation":{"id":7033,"nodeType":"StructuredDocumentation","src":"1204:75:33","text":" @dev An uint value doesn't fit in an int of `bits` size."},"errorSelector":"24775e06","id":7037,"name":"SafeCastOverflowedUintToInt","nameLocation":"1290:27:33","nodeType":"ErrorDefinition","parameters":{"id":7036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7035,"mutability":"mutable","name":"value","nameLocation":"1326:5:33","nodeType":"VariableDeclaration","scope":7037,"src":"1318:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7034,"name":"uint256","nodeType":"ElementaryTypeName","src":"1318:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1317:15:33"},"src":"1284:49:33"},{"body":{"id":7064,"nodeType":"Block","src":"1690:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7045,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7040,"src":"1704:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7048,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1717:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":7047,"name":"uint248","nodeType":"ElementaryTypeName","src":"1717:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"}],"id":7046,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1712:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1712:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint248","typeString":"type(uint248)"}},"id":7050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1726:3:33","memberName":"max","nodeType":"MemberAccess","src":"1712:17:33","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"src":"1704:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7058,"nodeType":"IfStatement","src":"1700:105:33","trueBody":{"id":7057,"nodeType":"Block","src":"1731:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":7053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:3:33","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":7054,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7040,"src":"1788:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7052,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"1752:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1752:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7056,"nodeType":"RevertStatement","src":"1745:49:33"}]}},{"expression":{"arguments":[{"id":7061,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7040,"src":"1829:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7060,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1821:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":7059,"name":"uint248","nodeType":"ElementaryTypeName","src":"1821:7:33","typeDescriptions":{}}},"id":7062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1821:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"functionReturnParameters":7044,"id":7063,"nodeType":"Return","src":"1814:21:33"}]},"documentation":{"id":7038,"nodeType":"StructuredDocumentation","src":"1339:280:33","text":" @dev Returns the downcasted uint248 from uint256, reverting on\n overflow (when the input is greater than largest uint248).\n Counterpart to Solidity's `uint248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":7065,"implemented":true,"kind":"function","modifiers":[],"name":"toUint248","nameLocation":"1633:9:33","nodeType":"FunctionDefinition","parameters":{"id":7041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7040,"mutability":"mutable","name":"value","nameLocation":"1651:5:33","nodeType":"VariableDeclaration","scope":7065,"src":"1643:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7039,"name":"uint256","nodeType":"ElementaryTypeName","src":"1643:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1642:15:33"},"returnParameters":{"id":7044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7065,"src":"1681:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"},"typeName":{"id":7042,"name":"uint248","nodeType":"ElementaryTypeName","src":"1681:7:33","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"visibility":"internal"}],"src":"1680:9:33"},"scope":8765,"src":"1624:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7092,"nodeType":"Block","src":"2199:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7073,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7068,"src":"2213:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7076,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2226:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":7075,"name":"uint240","nodeType":"ElementaryTypeName","src":"2226:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"}],"id":7074,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2221:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2221:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint240","typeString":"type(uint240)"}},"id":7078,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2235:3:33","memberName":"max","nodeType":"MemberAccess","src":"2221:17:33","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"src":"2213:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7086,"nodeType":"IfStatement","src":"2209:105:33","trueBody":{"id":7085,"nodeType":"Block","src":"2240:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":7081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2292:3:33","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":7082,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7068,"src":"2297:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7080,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"2261:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2261:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7084,"nodeType":"RevertStatement","src":"2254:49:33"}]}},{"expression":{"arguments":[{"id":7089,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7068,"src":"2338:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2330:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":7087,"name":"uint240","nodeType":"ElementaryTypeName","src":"2330:7:33","typeDescriptions":{}}},"id":7090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2330:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"functionReturnParameters":7072,"id":7091,"nodeType":"Return","src":"2323:21:33"}]},"documentation":{"id":7066,"nodeType":"StructuredDocumentation","src":"1848:280:33","text":" @dev Returns the downcasted uint240 from uint256, reverting on\n overflow (when the input is greater than largest uint240).\n Counterpart to Solidity's `uint240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":7093,"implemented":true,"kind":"function","modifiers":[],"name":"toUint240","nameLocation":"2142:9:33","nodeType":"FunctionDefinition","parameters":{"id":7069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7068,"mutability":"mutable","name":"value","nameLocation":"2160:5:33","nodeType":"VariableDeclaration","scope":7093,"src":"2152:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7067,"name":"uint256","nodeType":"ElementaryTypeName","src":"2152:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2151:15:33"},"returnParameters":{"id":7072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7071,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7093,"src":"2190:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"},"typeName":{"id":7070,"name":"uint240","nodeType":"ElementaryTypeName","src":"2190:7:33","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"visibility":"internal"}],"src":"2189:9:33"},"scope":8765,"src":"2133:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7120,"nodeType":"Block","src":"2708:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7101,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7096,"src":"2722:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2735:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":7103,"name":"uint232","nodeType":"ElementaryTypeName","src":"2735:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"}],"id":7102,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2730:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2730:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint232","typeString":"type(uint232)"}},"id":7106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2744:3:33","memberName":"max","nodeType":"MemberAccess","src":"2730:17:33","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"src":"2722:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7114,"nodeType":"IfStatement","src":"2718:105:33","trueBody":{"id":7113,"nodeType":"Block","src":"2749:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":7109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2801:3:33","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":7110,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7096,"src":"2806:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7108,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"2770:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2770:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7112,"nodeType":"RevertStatement","src":"2763:49:33"}]}},{"expression":{"arguments":[{"id":7117,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7096,"src":"2847:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2839:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":7115,"name":"uint232","nodeType":"ElementaryTypeName","src":"2839:7:33","typeDescriptions":{}}},"id":7118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2839:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"functionReturnParameters":7100,"id":7119,"nodeType":"Return","src":"2832:21:33"}]},"documentation":{"id":7094,"nodeType":"StructuredDocumentation","src":"2357:280:33","text":" @dev Returns the downcasted uint232 from uint256, reverting on\n overflow (when the input is greater than largest uint232).\n Counterpart to Solidity's `uint232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":7121,"implemented":true,"kind":"function","modifiers":[],"name":"toUint232","nameLocation":"2651:9:33","nodeType":"FunctionDefinition","parameters":{"id":7097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7096,"mutability":"mutable","name":"value","nameLocation":"2669:5:33","nodeType":"VariableDeclaration","scope":7121,"src":"2661:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7095,"name":"uint256","nodeType":"ElementaryTypeName","src":"2661:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2660:15:33"},"returnParameters":{"id":7100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7099,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7121,"src":"2699:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"},"typeName":{"id":7098,"name":"uint232","nodeType":"ElementaryTypeName","src":"2699:7:33","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"visibility":"internal"}],"src":"2698:9:33"},"scope":8765,"src":"2642:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7148,"nodeType":"Block","src":"3217:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7129,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7124,"src":"3231:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7132,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3244:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":7131,"name":"uint224","nodeType":"ElementaryTypeName","src":"3244:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"}],"id":7130,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3239:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3239:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint224","typeString":"type(uint224)"}},"id":7134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3253:3:33","memberName":"max","nodeType":"MemberAccess","src":"3239:17:33","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"3231:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7142,"nodeType":"IfStatement","src":"3227:105:33","trueBody":{"id":7141,"nodeType":"Block","src":"3258:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":7137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3310:3:33","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":7138,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7124,"src":"3315:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7136,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"3279:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3279:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7140,"nodeType":"RevertStatement","src":"3272:49:33"}]}},{"expression":{"arguments":[{"id":7145,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7124,"src":"3356:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3348:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":7143,"name":"uint224","nodeType":"ElementaryTypeName","src":"3348:7:33","typeDescriptions":{}}},"id":7146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3348:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":7128,"id":7147,"nodeType":"Return","src":"3341:21:33"}]},"documentation":{"id":7122,"nodeType":"StructuredDocumentation","src":"2866:280:33","text":" @dev Returns the downcasted uint224 from uint256, reverting on\n overflow (when the input is greater than largest uint224).\n Counterpart to Solidity's `uint224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":7149,"implemented":true,"kind":"function","modifiers":[],"name":"toUint224","nameLocation":"3160:9:33","nodeType":"FunctionDefinition","parameters":{"id":7125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7124,"mutability":"mutable","name":"value","nameLocation":"3178:5:33","nodeType":"VariableDeclaration","scope":7149,"src":"3170:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7123,"name":"uint256","nodeType":"ElementaryTypeName","src":"3170:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3169:15:33"},"returnParameters":{"id":7128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7149,"src":"3208:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7126,"name":"uint224","nodeType":"ElementaryTypeName","src":"3208:7:33","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"3207:9:33"},"scope":8765,"src":"3151:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7176,"nodeType":"Block","src":"3726:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7157,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7152,"src":"3740:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3753:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":7159,"name":"uint216","nodeType":"ElementaryTypeName","src":"3753:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"}],"id":7158,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3748:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3748:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint216","typeString":"type(uint216)"}},"id":7162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3762:3:33","memberName":"max","nodeType":"MemberAccess","src":"3748:17:33","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"src":"3740:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7170,"nodeType":"IfStatement","src":"3736:105:33","trueBody":{"id":7169,"nodeType":"Block","src":"3767:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":7165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3819:3:33","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":7166,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7152,"src":"3824:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7164,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"3788:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3788:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7168,"nodeType":"RevertStatement","src":"3781:49:33"}]}},{"expression":{"arguments":[{"id":7173,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7152,"src":"3865:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3857:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":7171,"name":"uint216","nodeType":"ElementaryTypeName","src":"3857:7:33","typeDescriptions":{}}},"id":7174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3857:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"functionReturnParameters":7156,"id":7175,"nodeType":"Return","src":"3850:21:33"}]},"documentation":{"id":7150,"nodeType":"StructuredDocumentation","src":"3375:280:33","text":" @dev Returns the downcasted uint216 from uint256, reverting on\n overflow (when the input is greater than largest uint216).\n Counterpart to Solidity's `uint216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":7177,"implemented":true,"kind":"function","modifiers":[],"name":"toUint216","nameLocation":"3669:9:33","nodeType":"FunctionDefinition","parameters":{"id":7153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7152,"mutability":"mutable","name":"value","nameLocation":"3687:5:33","nodeType":"VariableDeclaration","scope":7177,"src":"3679:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7151,"name":"uint256","nodeType":"ElementaryTypeName","src":"3679:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3678:15:33"},"returnParameters":{"id":7156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7177,"src":"3717:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"},"typeName":{"id":7154,"name":"uint216","nodeType":"ElementaryTypeName","src":"3717:7:33","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"visibility":"internal"}],"src":"3716:9:33"},"scope":8765,"src":"3660:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7204,"nodeType":"Block","src":"4235:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7185,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7180,"src":"4249:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4262:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":7187,"name":"uint208","nodeType":"ElementaryTypeName","src":"4262:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":7186,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4257:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4257:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":7190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4271:3:33","memberName":"max","nodeType":"MemberAccess","src":"4257:17:33","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"4249:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7198,"nodeType":"IfStatement","src":"4245:105:33","trueBody":{"id":7197,"nodeType":"Block","src":"4276:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":7193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4328:3:33","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":7194,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7180,"src":"4333:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7192,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"4297:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7196,"nodeType":"RevertStatement","src":"4290:49:33"}]}},{"expression":{"arguments":[{"id":7201,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7180,"src":"4374:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4366:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":7199,"name":"uint208","nodeType":"ElementaryTypeName","src":"4366:7:33","typeDescriptions":{}}},"id":7202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4366:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":7184,"id":7203,"nodeType":"Return","src":"4359:21:33"}]},"documentation":{"id":7178,"nodeType":"StructuredDocumentation","src":"3884:280:33","text":" @dev Returns the downcasted uint208 from uint256, reverting on\n overflow (when the input is greater than largest uint208).\n Counterpart to Solidity's `uint208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":7205,"implemented":true,"kind":"function","modifiers":[],"name":"toUint208","nameLocation":"4178:9:33","nodeType":"FunctionDefinition","parameters":{"id":7181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7180,"mutability":"mutable","name":"value","nameLocation":"4196:5:33","nodeType":"VariableDeclaration","scope":7205,"src":"4188:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7179,"name":"uint256","nodeType":"ElementaryTypeName","src":"4188:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4187:15:33"},"returnParameters":{"id":7184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7205,"src":"4226:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":7182,"name":"uint208","nodeType":"ElementaryTypeName","src":"4226:7:33","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"4225:9:33"},"scope":8765,"src":"4169:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7232,"nodeType":"Block","src":"4744:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7213,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7208,"src":"4758:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4771:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":7215,"name":"uint200","nodeType":"ElementaryTypeName","src":"4771:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"}],"id":7214,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4766:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4766:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint200","typeString":"type(uint200)"}},"id":7218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4780:3:33","memberName":"max","nodeType":"MemberAccess","src":"4766:17:33","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"src":"4758:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7226,"nodeType":"IfStatement","src":"4754:105:33","trueBody":{"id":7225,"nodeType":"Block","src":"4785:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":7221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4837:3:33","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":7222,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7208,"src":"4842:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7220,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"4806:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7224,"nodeType":"RevertStatement","src":"4799:49:33"}]}},{"expression":{"arguments":[{"id":7229,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7208,"src":"4883:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4875:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":7227,"name":"uint200","nodeType":"ElementaryTypeName","src":"4875:7:33","typeDescriptions":{}}},"id":7230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4875:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"functionReturnParameters":7212,"id":7231,"nodeType":"Return","src":"4868:21:33"}]},"documentation":{"id":7206,"nodeType":"StructuredDocumentation","src":"4393:280:33","text":" @dev Returns the downcasted uint200 from uint256, reverting on\n overflow (when the input is greater than largest uint200).\n Counterpart to Solidity's `uint200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":7233,"implemented":true,"kind":"function","modifiers":[],"name":"toUint200","nameLocation":"4687:9:33","nodeType":"FunctionDefinition","parameters":{"id":7209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7208,"mutability":"mutable","name":"value","nameLocation":"4705:5:33","nodeType":"VariableDeclaration","scope":7233,"src":"4697:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7207,"name":"uint256","nodeType":"ElementaryTypeName","src":"4697:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4696:15:33"},"returnParameters":{"id":7212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7233,"src":"4735:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"},"typeName":{"id":7210,"name":"uint200","nodeType":"ElementaryTypeName","src":"4735:7:33","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"visibility":"internal"}],"src":"4734:9:33"},"scope":8765,"src":"4678:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7260,"nodeType":"Block","src":"5253:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7241,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7236,"src":"5267:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5280:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":7243,"name":"uint192","nodeType":"ElementaryTypeName","src":"5280:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"}],"id":7242,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5275:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5275:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint192","typeString":"type(uint192)"}},"id":7246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5289:3:33","memberName":"max","nodeType":"MemberAccess","src":"5275:17:33","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"5267:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7254,"nodeType":"IfStatement","src":"5263:105:33","trueBody":{"id":7253,"nodeType":"Block","src":"5294:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":7249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5346:3:33","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":7250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7236,"src":"5351:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7248,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"5315:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5315:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7252,"nodeType":"RevertStatement","src":"5308:49:33"}]}},{"expression":{"arguments":[{"id":7257,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7236,"src":"5392:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5384:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":7255,"name":"uint192","nodeType":"ElementaryTypeName","src":"5384:7:33","typeDescriptions":{}}},"id":7258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5384:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"functionReturnParameters":7240,"id":7259,"nodeType":"Return","src":"5377:21:33"}]},"documentation":{"id":7234,"nodeType":"StructuredDocumentation","src":"4902:280:33","text":" @dev Returns the downcasted uint192 from uint256, reverting on\n overflow (when the input is greater than largest uint192).\n Counterpart to Solidity's `uint192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":7261,"implemented":true,"kind":"function","modifiers":[],"name":"toUint192","nameLocation":"5196:9:33","nodeType":"FunctionDefinition","parameters":{"id":7237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7236,"mutability":"mutable","name":"value","nameLocation":"5214:5:33","nodeType":"VariableDeclaration","scope":7261,"src":"5206:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7235,"name":"uint256","nodeType":"ElementaryTypeName","src":"5206:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5205:15:33"},"returnParameters":{"id":7240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7261,"src":"5244:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":7238,"name":"uint192","nodeType":"ElementaryTypeName","src":"5244:7:33","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"5243:9:33"},"scope":8765,"src":"5187:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7288,"nodeType":"Block","src":"5762:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7269,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7264,"src":"5776:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5789:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":7271,"name":"uint184","nodeType":"ElementaryTypeName","src":"5789:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"}],"id":7270,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5784:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint184","typeString":"type(uint184)"}},"id":7274,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5798:3:33","memberName":"max","nodeType":"MemberAccess","src":"5784:17:33","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"src":"5776:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7282,"nodeType":"IfStatement","src":"5772:105:33","trueBody":{"id":7281,"nodeType":"Block","src":"5803:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":7277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5855:3:33","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":7278,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7264,"src":"5860:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7276,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"5824:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5824:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7280,"nodeType":"RevertStatement","src":"5817:49:33"}]}},{"expression":{"arguments":[{"id":7285,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7264,"src":"5901:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7284,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5893:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":7283,"name":"uint184","nodeType":"ElementaryTypeName","src":"5893:7:33","typeDescriptions":{}}},"id":7286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5893:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"functionReturnParameters":7268,"id":7287,"nodeType":"Return","src":"5886:21:33"}]},"documentation":{"id":7262,"nodeType":"StructuredDocumentation","src":"5411:280:33","text":" @dev Returns the downcasted uint184 from uint256, reverting on\n overflow (when the input is greater than largest uint184).\n Counterpart to Solidity's `uint184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":7289,"implemented":true,"kind":"function","modifiers":[],"name":"toUint184","nameLocation":"5705:9:33","nodeType":"FunctionDefinition","parameters":{"id":7265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7264,"mutability":"mutable","name":"value","nameLocation":"5723:5:33","nodeType":"VariableDeclaration","scope":7289,"src":"5715:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7263,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5714:15:33"},"returnParameters":{"id":7268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7289,"src":"5753:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"},"typeName":{"id":7266,"name":"uint184","nodeType":"ElementaryTypeName","src":"5753:7:33","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"visibility":"internal"}],"src":"5752:9:33"},"scope":8765,"src":"5696:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7316,"nodeType":"Block","src":"6271:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7297,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7292,"src":"6285:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7300,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6298:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":7299,"name":"uint176","nodeType":"ElementaryTypeName","src":"6298:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"}],"id":7298,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6293:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6293:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint176","typeString":"type(uint176)"}},"id":7302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6307:3:33","memberName":"max","nodeType":"MemberAccess","src":"6293:17:33","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"src":"6285:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7310,"nodeType":"IfStatement","src":"6281:105:33","trueBody":{"id":7309,"nodeType":"Block","src":"6312:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":7305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6364:3:33","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":7306,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7292,"src":"6369:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7304,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"6333:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6333:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7308,"nodeType":"RevertStatement","src":"6326:49:33"}]}},{"expression":{"arguments":[{"id":7313,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7292,"src":"6410:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6402:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":7311,"name":"uint176","nodeType":"ElementaryTypeName","src":"6402:7:33","typeDescriptions":{}}},"id":7314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6402:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"functionReturnParameters":7296,"id":7315,"nodeType":"Return","src":"6395:21:33"}]},"documentation":{"id":7290,"nodeType":"StructuredDocumentation","src":"5920:280:33","text":" @dev Returns the downcasted uint176 from uint256, reverting on\n overflow (when the input is greater than largest uint176).\n Counterpart to Solidity's `uint176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":7317,"implemented":true,"kind":"function","modifiers":[],"name":"toUint176","nameLocation":"6214:9:33","nodeType":"FunctionDefinition","parameters":{"id":7293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7292,"mutability":"mutable","name":"value","nameLocation":"6232:5:33","nodeType":"VariableDeclaration","scope":7317,"src":"6224:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7291,"name":"uint256","nodeType":"ElementaryTypeName","src":"6224:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6223:15:33"},"returnParameters":{"id":7296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7295,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7317,"src":"6262:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"},"typeName":{"id":7294,"name":"uint176","nodeType":"ElementaryTypeName","src":"6262:7:33","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"visibility":"internal"}],"src":"6261:9:33"},"scope":8765,"src":"6205:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7344,"nodeType":"Block","src":"6780:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7325,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7320,"src":"6794:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6807:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":7327,"name":"uint168","nodeType":"ElementaryTypeName","src":"6807:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"}],"id":7326,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6802:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6802:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint168","typeString":"type(uint168)"}},"id":7330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6816:3:33","memberName":"max","nodeType":"MemberAccess","src":"6802:17:33","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"src":"6794:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7338,"nodeType":"IfStatement","src":"6790:105:33","trueBody":{"id":7337,"nodeType":"Block","src":"6821:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":7333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6873:3:33","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":7334,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7320,"src":"6878:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7332,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"6842:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6842:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7336,"nodeType":"RevertStatement","src":"6835:49:33"}]}},{"expression":{"arguments":[{"id":7341,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7320,"src":"6919:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":7339,"name":"uint168","nodeType":"ElementaryTypeName","src":"6911:7:33","typeDescriptions":{}}},"id":7342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"functionReturnParameters":7324,"id":7343,"nodeType":"Return","src":"6904:21:33"}]},"documentation":{"id":7318,"nodeType":"StructuredDocumentation","src":"6429:280:33","text":" @dev Returns the downcasted uint168 from uint256, reverting on\n overflow (when the input is greater than largest uint168).\n Counterpart to Solidity's `uint168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":7345,"implemented":true,"kind":"function","modifiers":[],"name":"toUint168","nameLocation":"6723:9:33","nodeType":"FunctionDefinition","parameters":{"id":7321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7320,"mutability":"mutable","name":"value","nameLocation":"6741:5:33","nodeType":"VariableDeclaration","scope":7345,"src":"6733:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7319,"name":"uint256","nodeType":"ElementaryTypeName","src":"6733:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6732:15:33"},"returnParameters":{"id":7324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7345,"src":"6771:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"},"typeName":{"id":7322,"name":"uint168","nodeType":"ElementaryTypeName","src":"6771:7:33","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"visibility":"internal"}],"src":"6770:9:33"},"scope":8765,"src":"6714:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7372,"nodeType":"Block","src":"7289:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7353,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7348,"src":"7303:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7316:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":7355,"name":"uint160","nodeType":"ElementaryTypeName","src":"7316:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":7354,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7311:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7311:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":7358,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7325:3:33","memberName":"max","nodeType":"MemberAccess","src":"7311:17:33","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7303:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7366,"nodeType":"IfStatement","src":"7299:105:33","trueBody":{"id":7365,"nodeType":"Block","src":"7330:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":7361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7382:3:33","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":7362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7348,"src":"7387:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7360,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"7351:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7351:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7364,"nodeType":"RevertStatement","src":"7344:49:33"}]}},{"expression":{"arguments":[{"id":7369,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7348,"src":"7428:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7420:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":7367,"name":"uint160","nodeType":"ElementaryTypeName","src":"7420:7:33","typeDescriptions":{}}},"id":7370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7420:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":7352,"id":7371,"nodeType":"Return","src":"7413:21:33"}]},"documentation":{"id":7346,"nodeType":"StructuredDocumentation","src":"6938:280:33","text":" @dev Returns the downcasted uint160 from uint256, reverting on\n overflow (when the input is greater than largest uint160).\n Counterpart to Solidity's `uint160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":7373,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nameLocation":"7232:9:33","nodeType":"FunctionDefinition","parameters":{"id":7349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7348,"mutability":"mutable","name":"value","nameLocation":"7250:5:33","nodeType":"VariableDeclaration","scope":7373,"src":"7242:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7347,"name":"uint256","nodeType":"ElementaryTypeName","src":"7242:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7241:15:33"},"returnParameters":{"id":7352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7373,"src":"7280:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":7350,"name":"uint160","nodeType":"ElementaryTypeName","src":"7280:7:33","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"7279:9:33"},"scope":8765,"src":"7223:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7400,"nodeType":"Block","src":"7798:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7376,"src":"7812:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7825:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":7383,"name":"uint152","nodeType":"ElementaryTypeName","src":"7825:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"}],"id":7382,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7820:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7820:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint152","typeString":"type(uint152)"}},"id":7386,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7834:3:33","memberName":"max","nodeType":"MemberAccess","src":"7820:17:33","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"src":"7812:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7394,"nodeType":"IfStatement","src":"7808:105:33","trueBody":{"id":7393,"nodeType":"Block","src":"7839:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":7389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7891:3:33","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":7390,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7376,"src":"7896:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7388,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"7860:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7860:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7392,"nodeType":"RevertStatement","src":"7853:49:33"}]}},{"expression":{"arguments":[{"id":7397,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7376,"src":"7937:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7929:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":7395,"name":"uint152","nodeType":"ElementaryTypeName","src":"7929:7:33","typeDescriptions":{}}},"id":7398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7929:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"functionReturnParameters":7380,"id":7399,"nodeType":"Return","src":"7922:21:33"}]},"documentation":{"id":7374,"nodeType":"StructuredDocumentation","src":"7447:280:33","text":" @dev Returns the downcasted uint152 from uint256, reverting on\n overflow (when the input is greater than largest uint152).\n Counterpart to Solidity's `uint152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":7401,"implemented":true,"kind":"function","modifiers":[],"name":"toUint152","nameLocation":"7741:9:33","nodeType":"FunctionDefinition","parameters":{"id":7377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7376,"mutability":"mutable","name":"value","nameLocation":"7759:5:33","nodeType":"VariableDeclaration","scope":7401,"src":"7751:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7375,"name":"uint256","nodeType":"ElementaryTypeName","src":"7751:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7750:15:33"},"returnParameters":{"id":7380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7379,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7401,"src":"7789:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"},"typeName":{"id":7378,"name":"uint152","nodeType":"ElementaryTypeName","src":"7789:7:33","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"visibility":"internal"}],"src":"7788:9:33"},"scope":8765,"src":"7732:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7428,"nodeType":"Block","src":"8307:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7409,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7404,"src":"8321:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8334:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":7411,"name":"uint144","nodeType":"ElementaryTypeName","src":"8334:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"}],"id":7410,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8329:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8329:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint144","typeString":"type(uint144)"}},"id":7414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8343:3:33","memberName":"max","nodeType":"MemberAccess","src":"8329:17:33","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"src":"8321:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7422,"nodeType":"IfStatement","src":"8317:105:33","trueBody":{"id":7421,"nodeType":"Block","src":"8348:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":7417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8400:3:33","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":7418,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7404,"src":"8405:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7416,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"8369:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8369:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7420,"nodeType":"RevertStatement","src":"8362:49:33"}]}},{"expression":{"arguments":[{"id":7425,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7404,"src":"8446:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8438:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":7423,"name":"uint144","nodeType":"ElementaryTypeName","src":"8438:7:33","typeDescriptions":{}}},"id":7426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8438:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"functionReturnParameters":7408,"id":7427,"nodeType":"Return","src":"8431:21:33"}]},"documentation":{"id":7402,"nodeType":"StructuredDocumentation","src":"7956:280:33","text":" @dev Returns the downcasted uint144 from uint256, reverting on\n overflow (when the input is greater than largest uint144).\n Counterpart to Solidity's `uint144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":7429,"implemented":true,"kind":"function","modifiers":[],"name":"toUint144","nameLocation":"8250:9:33","nodeType":"FunctionDefinition","parameters":{"id":7405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7404,"mutability":"mutable","name":"value","nameLocation":"8268:5:33","nodeType":"VariableDeclaration","scope":7429,"src":"8260:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7403,"name":"uint256","nodeType":"ElementaryTypeName","src":"8260:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8259:15:33"},"returnParameters":{"id":7408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7429,"src":"8298:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"},"typeName":{"id":7406,"name":"uint144","nodeType":"ElementaryTypeName","src":"8298:7:33","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"visibility":"internal"}],"src":"8297:9:33"},"scope":8765,"src":"8241:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7456,"nodeType":"Block","src":"8816:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7437,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7432,"src":"8830:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7440,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8843:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":7439,"name":"uint136","nodeType":"ElementaryTypeName","src":"8843:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"}],"id":7438,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8838:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8838:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint136","typeString":"type(uint136)"}},"id":7442,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8852:3:33","memberName":"max","nodeType":"MemberAccess","src":"8838:17:33","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"src":"8830:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7450,"nodeType":"IfStatement","src":"8826:105:33","trueBody":{"id":7449,"nodeType":"Block","src":"8857:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":7445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8909:3:33","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":7446,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7432,"src":"8914:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7444,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"8878:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8878:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7448,"nodeType":"RevertStatement","src":"8871:49:33"}]}},{"expression":{"arguments":[{"id":7453,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7432,"src":"8955:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8947:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":7451,"name":"uint136","nodeType":"ElementaryTypeName","src":"8947:7:33","typeDescriptions":{}}},"id":7454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8947:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"functionReturnParameters":7436,"id":7455,"nodeType":"Return","src":"8940:21:33"}]},"documentation":{"id":7430,"nodeType":"StructuredDocumentation","src":"8465:280:33","text":" @dev Returns the downcasted uint136 from uint256, reverting on\n overflow (when the input is greater than largest uint136).\n Counterpart to Solidity's `uint136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":7457,"implemented":true,"kind":"function","modifiers":[],"name":"toUint136","nameLocation":"8759:9:33","nodeType":"FunctionDefinition","parameters":{"id":7433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7432,"mutability":"mutable","name":"value","nameLocation":"8777:5:33","nodeType":"VariableDeclaration","scope":7457,"src":"8769:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7431,"name":"uint256","nodeType":"ElementaryTypeName","src":"8769:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8768:15:33"},"returnParameters":{"id":7436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7457,"src":"8807:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"},"typeName":{"id":7434,"name":"uint136","nodeType":"ElementaryTypeName","src":"8807:7:33","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"visibility":"internal"}],"src":"8806:9:33"},"scope":8765,"src":"8750:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7484,"nodeType":"Block","src":"9325:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7465,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7460,"src":"9339:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7468,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9352:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":7467,"name":"uint128","nodeType":"ElementaryTypeName","src":"9352:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":7466,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9347:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9347:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":7470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9361:3:33","memberName":"max","nodeType":"MemberAccess","src":"9347:17:33","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9339:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7478,"nodeType":"IfStatement","src":"9335:105:33","trueBody":{"id":7477,"nodeType":"Block","src":"9366:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":7473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9418:3:33","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":7474,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7460,"src":"9423:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7472,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"9387:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9387:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7476,"nodeType":"RevertStatement","src":"9380:49:33"}]}},{"expression":{"arguments":[{"id":7481,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7460,"src":"9464:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9456:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":7479,"name":"uint128","nodeType":"ElementaryTypeName","src":"9456:7:33","typeDescriptions":{}}},"id":7482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9456:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":7464,"id":7483,"nodeType":"Return","src":"9449:21:33"}]},"documentation":{"id":7458,"nodeType":"StructuredDocumentation","src":"8974:280:33","text":" @dev Returns the downcasted uint128 from uint256, reverting on\n overflow (when the input is greater than largest uint128).\n Counterpart to Solidity's `uint128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":7485,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"9268:9:33","nodeType":"FunctionDefinition","parameters":{"id":7461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7460,"mutability":"mutable","name":"value","nameLocation":"9286:5:33","nodeType":"VariableDeclaration","scope":7485,"src":"9278:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7459,"name":"uint256","nodeType":"ElementaryTypeName","src":"9278:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9277:15:33"},"returnParameters":{"id":7464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7485,"src":"9316:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":7462,"name":"uint128","nodeType":"ElementaryTypeName","src":"9316:7:33","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9315:9:33"},"scope":8765,"src":"9259:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7512,"nodeType":"Block","src":"9834:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7488,"src":"9848:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9861:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":7495,"name":"uint120","nodeType":"ElementaryTypeName","src":"9861:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"}],"id":7494,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9856:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9856:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint120","typeString":"type(uint120)"}},"id":7498,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9870:3:33","memberName":"max","nodeType":"MemberAccess","src":"9856:17:33","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"src":"9848:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7506,"nodeType":"IfStatement","src":"9844:105:33","trueBody":{"id":7505,"nodeType":"Block","src":"9875:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":7501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9927:3:33","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":7502,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7488,"src":"9932:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7500,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"9896:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9896:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7504,"nodeType":"RevertStatement","src":"9889:49:33"}]}},{"expression":{"arguments":[{"id":7509,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7488,"src":"9973:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9965:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":7507,"name":"uint120","nodeType":"ElementaryTypeName","src":"9965:7:33","typeDescriptions":{}}},"id":7510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9965:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"functionReturnParameters":7492,"id":7511,"nodeType":"Return","src":"9958:21:33"}]},"documentation":{"id":7486,"nodeType":"StructuredDocumentation","src":"9483:280:33","text":" @dev Returns the downcasted uint120 from uint256, reverting on\n overflow (when the input is greater than largest uint120).\n Counterpart to Solidity's `uint120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":7513,"implemented":true,"kind":"function","modifiers":[],"name":"toUint120","nameLocation":"9777:9:33","nodeType":"FunctionDefinition","parameters":{"id":7489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7488,"mutability":"mutable","name":"value","nameLocation":"9795:5:33","nodeType":"VariableDeclaration","scope":7513,"src":"9787:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7487,"name":"uint256","nodeType":"ElementaryTypeName","src":"9787:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9786:15:33"},"returnParameters":{"id":7492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7491,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7513,"src":"9825:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":7490,"name":"uint120","nodeType":"ElementaryTypeName","src":"9825:7:33","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"9824:9:33"},"scope":8765,"src":"9768:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7540,"nodeType":"Block","src":"10343:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7521,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7516,"src":"10357:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10370:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":7523,"name":"uint112","nodeType":"ElementaryTypeName","src":"10370:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"}],"id":7522,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10365:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10365:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint112","typeString":"type(uint112)"}},"id":7526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10379:3:33","memberName":"max","nodeType":"MemberAccess","src":"10365:17:33","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"10357:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7534,"nodeType":"IfStatement","src":"10353:105:33","trueBody":{"id":7533,"nodeType":"Block","src":"10384:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":7529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10436:3:33","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":7530,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7516,"src":"10441:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7528,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"10405:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10405:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7532,"nodeType":"RevertStatement","src":"10398:49:33"}]}},{"expression":{"arguments":[{"id":7537,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7516,"src":"10482:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":7535,"name":"uint112","nodeType":"ElementaryTypeName","src":"10474:7:33","typeDescriptions":{}}},"id":7538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10474:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"functionReturnParameters":7520,"id":7539,"nodeType":"Return","src":"10467:21:33"}]},"documentation":{"id":7514,"nodeType":"StructuredDocumentation","src":"9992:280:33","text":" @dev Returns the downcasted uint112 from uint256, reverting on\n overflow (when the input is greater than largest uint112).\n Counterpart to Solidity's `uint112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":7541,"implemented":true,"kind":"function","modifiers":[],"name":"toUint112","nameLocation":"10286:9:33","nodeType":"FunctionDefinition","parameters":{"id":7517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7516,"mutability":"mutable","name":"value","nameLocation":"10304:5:33","nodeType":"VariableDeclaration","scope":7541,"src":"10296:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7515,"name":"uint256","nodeType":"ElementaryTypeName","src":"10296:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10295:15:33"},"returnParameters":{"id":7520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7541,"src":"10334:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":7518,"name":"uint112","nodeType":"ElementaryTypeName","src":"10334:7:33","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"10333:9:33"},"scope":8765,"src":"10277:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7568,"nodeType":"Block","src":"10852:152:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7549,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7544,"src":"10866:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10879:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":7551,"name":"uint104","nodeType":"ElementaryTypeName","src":"10879:7:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"}],"id":7550,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10874:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10874:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint104","typeString":"type(uint104)"}},"id":7554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10888:3:33","memberName":"max","nodeType":"MemberAccess","src":"10874:17:33","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"src":"10866:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7562,"nodeType":"IfStatement","src":"10862:105:33","trueBody":{"id":7561,"nodeType":"Block","src":"10893:74:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":7557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10945:3:33","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":7558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7544,"src":"10950:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7556,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"10914:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10914:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7560,"nodeType":"RevertStatement","src":"10907:49:33"}]}},{"expression":{"arguments":[{"id":7565,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7544,"src":"10991:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10983:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":7563,"name":"uint104","nodeType":"ElementaryTypeName","src":"10983:7:33","typeDescriptions":{}}},"id":7566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10983:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"functionReturnParameters":7548,"id":7567,"nodeType":"Return","src":"10976:21:33"}]},"documentation":{"id":7542,"nodeType":"StructuredDocumentation","src":"10501:280:33","text":" @dev Returns the downcasted uint104 from uint256, reverting on\n overflow (when the input is greater than largest uint104).\n Counterpart to Solidity's `uint104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":7569,"implemented":true,"kind":"function","modifiers":[],"name":"toUint104","nameLocation":"10795:9:33","nodeType":"FunctionDefinition","parameters":{"id":7545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7544,"mutability":"mutable","name":"value","nameLocation":"10813:5:33","nodeType":"VariableDeclaration","scope":7569,"src":"10805:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7543,"name":"uint256","nodeType":"ElementaryTypeName","src":"10805:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10804:15:33"},"returnParameters":{"id":7548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7547,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7569,"src":"10843:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"},"typeName":{"id":7546,"name":"uint104","nodeType":"ElementaryTypeName","src":"10843:7:33","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"visibility":"internal"}],"src":"10842:9:33"},"scope":8765,"src":"10786:218:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7596,"nodeType":"Block","src":"11355:149:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7577,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7572,"src":"11369:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11382:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":7579,"name":"uint96","nodeType":"ElementaryTypeName","src":"11382:6:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":7578,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11377:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11377:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":7582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11390:3:33","memberName":"max","nodeType":"MemberAccess","src":"11377:16:33","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11369:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7590,"nodeType":"IfStatement","src":"11365:103:33","trueBody":{"id":7589,"nodeType":"Block","src":"11395:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":7585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11447:2:33","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":7586,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7572,"src":"11451:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7584,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"11416:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11416:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7588,"nodeType":"RevertStatement","src":"11409:48:33"}]}},{"expression":{"arguments":[{"id":7593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7572,"src":"11491:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11484:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":7591,"name":"uint96","nodeType":"ElementaryTypeName","src":"11484:6:33","typeDescriptions":{}}},"id":7594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11484:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":7576,"id":7595,"nodeType":"Return","src":"11477:20:33"}]},"documentation":{"id":7570,"nodeType":"StructuredDocumentation","src":"11010:276:33","text":" @dev Returns the downcasted uint96 from uint256, reverting on\n overflow (when the input is greater than largest uint96).\n Counterpart to Solidity's `uint96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":7597,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"11300:8:33","nodeType":"FunctionDefinition","parameters":{"id":7573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7572,"mutability":"mutable","name":"value","nameLocation":"11317:5:33","nodeType":"VariableDeclaration","scope":7597,"src":"11309:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7571,"name":"uint256","nodeType":"ElementaryTypeName","src":"11309:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11308:15:33"},"returnParameters":{"id":7576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7575,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7597,"src":"11347:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7574,"name":"uint96","nodeType":"ElementaryTypeName","src":"11347:6:33","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11346:8:33"},"scope":8765,"src":"11291:213:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7624,"nodeType":"Block","src":"11855:149:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7605,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7600,"src":"11869:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11882:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":7607,"name":"uint88","nodeType":"ElementaryTypeName","src":"11882:6:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":7606,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11877:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11877:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":7610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11890:3:33","memberName":"max","nodeType":"MemberAccess","src":"11877:16:33","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"src":"11869:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7618,"nodeType":"IfStatement","src":"11865:103:33","trueBody":{"id":7617,"nodeType":"Block","src":"11895:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":7613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11947:2:33","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":7614,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7600,"src":"11951:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7612,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"11916:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11916:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7616,"nodeType":"RevertStatement","src":"11909:48:33"}]}},{"expression":{"arguments":[{"id":7621,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7600,"src":"11991:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11984:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":7619,"name":"uint88","nodeType":"ElementaryTypeName","src":"11984:6:33","typeDescriptions":{}}},"id":7622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11984:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"functionReturnParameters":7604,"id":7623,"nodeType":"Return","src":"11977:20:33"}]},"documentation":{"id":7598,"nodeType":"StructuredDocumentation","src":"11510:276:33","text":" @dev Returns the downcasted uint88 from uint256, reverting on\n overflow (when the input is greater than largest uint88).\n Counterpart to Solidity's `uint88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":7625,"implemented":true,"kind":"function","modifiers":[],"name":"toUint88","nameLocation":"11800:8:33","nodeType":"FunctionDefinition","parameters":{"id":7601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7600,"mutability":"mutable","name":"value","nameLocation":"11817:5:33","nodeType":"VariableDeclaration","scope":7625,"src":"11809:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7599,"name":"uint256","nodeType":"ElementaryTypeName","src":"11809:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11808:15:33"},"returnParameters":{"id":7604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7603,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7625,"src":"11847:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"},"typeName":{"id":7602,"name":"uint88","nodeType":"ElementaryTypeName","src":"11847:6:33","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"}],"src":"11846:8:33"},"scope":8765,"src":"11791:213:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7652,"nodeType":"Block","src":"12355:149:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7633,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7628,"src":"12369:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12382:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":7635,"name":"uint80","nodeType":"ElementaryTypeName","src":"12382:6:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"}],"id":7634,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12377:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12377:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint80","typeString":"type(uint80)"}},"id":7638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12390:3:33","memberName":"max","nodeType":"MemberAccess","src":"12377:16:33","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"src":"12369:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7646,"nodeType":"IfStatement","src":"12365:103:33","trueBody":{"id":7645,"nodeType":"Block","src":"12395:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":7641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12447:2:33","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":7642,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7628,"src":"12451:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7640,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"12416:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12416:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7644,"nodeType":"RevertStatement","src":"12409:48:33"}]}},{"expression":{"arguments":[{"id":7649,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7628,"src":"12491:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12484:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":7647,"name":"uint80","nodeType":"ElementaryTypeName","src":"12484:6:33","typeDescriptions":{}}},"id":7650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12484:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"functionReturnParameters":7632,"id":7651,"nodeType":"Return","src":"12477:20:33"}]},"documentation":{"id":7626,"nodeType":"StructuredDocumentation","src":"12010:276:33","text":" @dev Returns the downcasted uint80 from uint256, reverting on\n overflow (when the input is greater than largest uint80).\n Counterpart to Solidity's `uint80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":7653,"implemented":true,"kind":"function","modifiers":[],"name":"toUint80","nameLocation":"12300:8:33","nodeType":"FunctionDefinition","parameters":{"id":7629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7628,"mutability":"mutable","name":"value","nameLocation":"12317:5:33","nodeType":"VariableDeclaration","scope":7653,"src":"12309:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7627,"name":"uint256","nodeType":"ElementaryTypeName","src":"12309:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12308:15:33"},"returnParameters":{"id":7632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7631,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7653,"src":"12347:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":7630,"name":"uint80","nodeType":"ElementaryTypeName","src":"12347:6:33","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"12346:8:33"},"scope":8765,"src":"12291:213:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7680,"nodeType":"Block","src":"12855:149:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7661,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7656,"src":"12869:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12882:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":7663,"name":"uint72","nodeType":"ElementaryTypeName","src":"12882:6:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"}],"id":7662,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12877:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12877:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint72","typeString":"type(uint72)"}},"id":7666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12890:3:33","memberName":"max","nodeType":"MemberAccess","src":"12877:16:33","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"src":"12869:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7674,"nodeType":"IfStatement","src":"12865:103:33","trueBody":{"id":7673,"nodeType":"Block","src":"12895:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":7669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12947:2:33","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":7670,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7656,"src":"12951:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7668,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"12916:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12916:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7672,"nodeType":"RevertStatement","src":"12909:48:33"}]}},{"expression":{"arguments":[{"id":7677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7656,"src":"12991:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12984:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":7675,"name":"uint72","nodeType":"ElementaryTypeName","src":"12984:6:33","typeDescriptions":{}}},"id":7678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12984:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"functionReturnParameters":7660,"id":7679,"nodeType":"Return","src":"12977:20:33"}]},"documentation":{"id":7654,"nodeType":"StructuredDocumentation","src":"12510:276:33","text":" @dev Returns the downcasted uint72 from uint256, reverting on\n overflow (when the input is greater than largest uint72).\n Counterpart to Solidity's `uint72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":7681,"implemented":true,"kind":"function","modifiers":[],"name":"toUint72","nameLocation":"12800:8:33","nodeType":"FunctionDefinition","parameters":{"id":7657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7656,"mutability":"mutable","name":"value","nameLocation":"12817:5:33","nodeType":"VariableDeclaration","scope":7681,"src":"12809:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7655,"name":"uint256","nodeType":"ElementaryTypeName","src":"12809:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12808:15:33"},"returnParameters":{"id":7660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7681,"src":"12847:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":7658,"name":"uint72","nodeType":"ElementaryTypeName","src":"12847:6:33","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"12846:8:33"},"scope":8765,"src":"12791:213:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7708,"nodeType":"Block","src":"13355:149:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7689,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7684,"src":"13369:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7692,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13382:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":7691,"name":"uint64","nodeType":"ElementaryTypeName","src":"13382:6:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":7690,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13377:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13377:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":7694,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13390:3:33","memberName":"max","nodeType":"MemberAccess","src":"13377:16:33","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13369:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7702,"nodeType":"IfStatement","src":"13365:103:33","trueBody":{"id":7701,"nodeType":"Block","src":"13395:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":7697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13447:2:33","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":7698,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7684,"src":"13451:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7696,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"13416:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7700,"nodeType":"RevertStatement","src":"13409:48:33"}]}},{"expression":{"arguments":[{"id":7705,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7684,"src":"13491:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13484:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":7703,"name":"uint64","nodeType":"ElementaryTypeName","src":"13484:6:33","typeDescriptions":{}}},"id":7706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13484:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":7688,"id":7707,"nodeType":"Return","src":"13477:20:33"}]},"documentation":{"id":7682,"nodeType":"StructuredDocumentation","src":"13010:276:33","text":" @dev Returns the downcasted uint64 from uint256, reverting on\n overflow (when the input is greater than largest uint64).\n Counterpart to Solidity's `uint64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":7709,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13300:8:33","nodeType":"FunctionDefinition","parameters":{"id":7685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7684,"mutability":"mutable","name":"value","nameLocation":"13317:5:33","nodeType":"VariableDeclaration","scope":7709,"src":"13309:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7683,"name":"uint256","nodeType":"ElementaryTypeName","src":"13309:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13308:15:33"},"returnParameters":{"id":7688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7709,"src":"13347:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":7686,"name":"uint64","nodeType":"ElementaryTypeName","src":"13347:6:33","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13346:8:33"},"scope":8765,"src":"13291:213:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7736,"nodeType":"Block","src":"13855:149:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7717,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7712,"src":"13869:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7720,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13882:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":7719,"name":"uint56","nodeType":"ElementaryTypeName","src":"13882:6:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":7718,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13877:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13877:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":7722,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13890:3:33","memberName":"max","nodeType":"MemberAccess","src":"13877:16:33","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"13869:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7730,"nodeType":"IfStatement","src":"13865:103:33","trueBody":{"id":7729,"nodeType":"Block","src":"13895:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":7725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13947:2:33","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":7726,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7712,"src":"13951:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7724,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"13916:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13916:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7728,"nodeType":"RevertStatement","src":"13909:48:33"}]}},{"expression":{"arguments":[{"id":7733,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7712,"src":"13991:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13984:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":7731,"name":"uint56","nodeType":"ElementaryTypeName","src":"13984:6:33","typeDescriptions":{}}},"id":7734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13984:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"functionReturnParameters":7716,"id":7735,"nodeType":"Return","src":"13977:20:33"}]},"documentation":{"id":7710,"nodeType":"StructuredDocumentation","src":"13510:276:33","text":" @dev Returns the downcasted uint56 from uint256, reverting on\n overflow (when the input is greater than largest uint56).\n Counterpart to Solidity's `uint56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":7737,"implemented":true,"kind":"function","modifiers":[],"name":"toUint56","nameLocation":"13800:8:33","nodeType":"FunctionDefinition","parameters":{"id":7713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7712,"mutability":"mutable","name":"value","nameLocation":"13817:5:33","nodeType":"VariableDeclaration","scope":7737,"src":"13809:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7711,"name":"uint256","nodeType":"ElementaryTypeName","src":"13809:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13808:15:33"},"returnParameters":{"id":7716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7715,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7737,"src":"13847:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"},"typeName":{"id":7714,"name":"uint56","nodeType":"ElementaryTypeName","src":"13847:6:33","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"visibility":"internal"}],"src":"13846:8:33"},"scope":8765,"src":"13791:213:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7764,"nodeType":"Block","src":"14355:149:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7745,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7740,"src":"14369:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7748,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14382:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":7747,"name":"uint48","nodeType":"ElementaryTypeName","src":"14382:6:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":7746,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14377:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14377:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":7750,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14390:3:33","memberName":"max","nodeType":"MemberAccess","src":"14377:16:33","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"14369:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7758,"nodeType":"IfStatement","src":"14365:103:33","trueBody":{"id":7757,"nodeType":"Block","src":"14395:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":7753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14447:2:33","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":7754,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7740,"src":"14451:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7752,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"14416:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14416:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7756,"nodeType":"RevertStatement","src":"14409:48:33"}]}},{"expression":{"arguments":[{"id":7761,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7740,"src":"14491:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7760,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14484:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":7759,"name":"uint48","nodeType":"ElementaryTypeName","src":"14484:6:33","typeDescriptions":{}}},"id":7762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14484:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":7744,"id":7763,"nodeType":"Return","src":"14477:20:33"}]},"documentation":{"id":7738,"nodeType":"StructuredDocumentation","src":"14010:276:33","text":" @dev Returns the downcasted uint48 from uint256, reverting on\n overflow (when the input is greater than largest uint48).\n Counterpart to Solidity's `uint48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":7765,"implemented":true,"kind":"function","modifiers":[],"name":"toUint48","nameLocation":"14300:8:33","nodeType":"FunctionDefinition","parameters":{"id":7741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7740,"mutability":"mutable","name":"value","nameLocation":"14317:5:33","nodeType":"VariableDeclaration","scope":7765,"src":"14309:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7739,"name":"uint256","nodeType":"ElementaryTypeName","src":"14309:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14308:15:33"},"returnParameters":{"id":7744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7743,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7765,"src":"14347:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":7742,"name":"uint48","nodeType":"ElementaryTypeName","src":"14347:6:33","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14346:8:33"},"scope":8765,"src":"14291:213:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7792,"nodeType":"Block","src":"14855:149:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7773,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7768,"src":"14869:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7776,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14882:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":7775,"name":"uint40","nodeType":"ElementaryTypeName","src":"14882:6:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":7774,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14877:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14877:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":7778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14890:3:33","memberName":"max","nodeType":"MemberAccess","src":"14877:16:33","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"14869:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7786,"nodeType":"IfStatement","src":"14865:103:33","trueBody":{"id":7785,"nodeType":"Block","src":"14895:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":7781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14947:2:33","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":7782,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7768,"src":"14951:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7780,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"14916:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14916:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7784,"nodeType":"RevertStatement","src":"14909:48:33"}]}},{"expression":{"arguments":[{"id":7789,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7768,"src":"14991:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7788,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14984:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":7787,"name":"uint40","nodeType":"ElementaryTypeName","src":"14984:6:33","typeDescriptions":{}}},"id":7790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14984:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"functionReturnParameters":7772,"id":7791,"nodeType":"Return","src":"14977:20:33"}]},"documentation":{"id":7766,"nodeType":"StructuredDocumentation","src":"14510:276:33","text":" @dev Returns the downcasted uint40 from uint256, reverting on\n overflow (when the input is greater than largest uint40).\n Counterpart to Solidity's `uint40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":7793,"implemented":true,"kind":"function","modifiers":[],"name":"toUint40","nameLocation":"14800:8:33","nodeType":"FunctionDefinition","parameters":{"id":7769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7768,"mutability":"mutable","name":"value","nameLocation":"14817:5:33","nodeType":"VariableDeclaration","scope":7793,"src":"14809:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7767,"name":"uint256","nodeType":"ElementaryTypeName","src":"14809:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14808:15:33"},"returnParameters":{"id":7772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7793,"src":"14847:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":7770,"name":"uint40","nodeType":"ElementaryTypeName","src":"14847:6:33","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"}],"src":"14846:8:33"},"scope":8765,"src":"14791:213:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7820,"nodeType":"Block","src":"15355:149:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7801,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7796,"src":"15369:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7804,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15382:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":7803,"name":"uint32","nodeType":"ElementaryTypeName","src":"15382:6:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":7802,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15377:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15377:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":7806,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15390:3:33","memberName":"max","nodeType":"MemberAccess","src":"15377:16:33","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"15369:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7814,"nodeType":"IfStatement","src":"15365:103:33","trueBody":{"id":7813,"nodeType":"Block","src":"15395:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":7809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15447:2:33","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":7810,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7796,"src":"15451:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7808,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"15416:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15416:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7812,"nodeType":"RevertStatement","src":"15409:48:33"}]}},{"expression":{"arguments":[{"id":7817,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7796,"src":"15491:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7816,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15484:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":7815,"name":"uint32","nodeType":"ElementaryTypeName","src":"15484:6:33","typeDescriptions":{}}},"id":7818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15484:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":7800,"id":7819,"nodeType":"Return","src":"15477:20:33"}]},"documentation":{"id":7794,"nodeType":"StructuredDocumentation","src":"15010:276:33","text":" @dev Returns the downcasted uint32 from uint256, reverting on\n overflow (when the input is greater than largest uint32).\n Counterpart to Solidity's `uint32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":7821,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"15300:8:33","nodeType":"FunctionDefinition","parameters":{"id":7797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7796,"mutability":"mutable","name":"value","nameLocation":"15317:5:33","nodeType":"VariableDeclaration","scope":7821,"src":"15309:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7795,"name":"uint256","nodeType":"ElementaryTypeName","src":"15309:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15308:15:33"},"returnParameters":{"id":7800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7799,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7821,"src":"15347:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7798,"name":"uint32","nodeType":"ElementaryTypeName","src":"15347:6:33","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15346:8:33"},"scope":8765,"src":"15291:213:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7848,"nodeType":"Block","src":"15855:149:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7829,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7824,"src":"15869:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7832,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15882:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":7831,"name":"uint24","nodeType":"ElementaryTypeName","src":"15882:6:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"}],"id":7830,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15877:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15877:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint24","typeString":"type(uint24)"}},"id":7834,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15890:3:33","memberName":"max","nodeType":"MemberAccess","src":"15877:16:33","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"15869:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7842,"nodeType":"IfStatement","src":"15865:103:33","trueBody":{"id":7841,"nodeType":"Block","src":"15895:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":7837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15947:2:33","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":7838,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7824,"src":"15951:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7836,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"15916:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15916:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7840,"nodeType":"RevertStatement","src":"15909:48:33"}]}},{"expression":{"arguments":[{"id":7845,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7824,"src":"15991:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15984:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":7843,"name":"uint24","nodeType":"ElementaryTypeName","src":"15984:6:33","typeDescriptions":{}}},"id":7846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15984:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":7828,"id":7847,"nodeType":"Return","src":"15977:20:33"}]},"documentation":{"id":7822,"nodeType":"StructuredDocumentation","src":"15510:276:33","text":" @dev Returns the downcasted uint24 from uint256, reverting on\n overflow (when the input is greater than largest uint24).\n Counterpart to Solidity's `uint24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":7849,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nameLocation":"15800:8:33","nodeType":"FunctionDefinition","parameters":{"id":7825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7824,"mutability":"mutable","name":"value","nameLocation":"15817:5:33","nodeType":"VariableDeclaration","scope":7849,"src":"15809:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7823,"name":"uint256","nodeType":"ElementaryTypeName","src":"15809:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15808:15:33"},"returnParameters":{"id":7828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7827,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7849,"src":"15847:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":7826,"name":"uint24","nodeType":"ElementaryTypeName","src":"15847:6:33","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"15846:8:33"},"scope":8765,"src":"15791:213:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7876,"nodeType":"Block","src":"16355:149:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7857,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7852,"src":"16369:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7860,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16382:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":7859,"name":"uint16","nodeType":"ElementaryTypeName","src":"16382:6:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":7858,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16377:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16377:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":7862,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16390:3:33","memberName":"max","nodeType":"MemberAccess","src":"16377:16:33","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"16369:24:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7870,"nodeType":"IfStatement","src":"16365:103:33","trueBody":{"id":7869,"nodeType":"Block","src":"16395:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":7865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16447:2:33","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":7866,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7852,"src":"16451:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7864,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"16416:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16416:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7868,"nodeType":"RevertStatement","src":"16409:48:33"}]}},{"expression":{"arguments":[{"id":7873,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7852,"src":"16491:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16484:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":7871,"name":"uint16","nodeType":"ElementaryTypeName","src":"16484:6:33","typeDescriptions":{}}},"id":7874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16484:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":7856,"id":7875,"nodeType":"Return","src":"16477:20:33"}]},"documentation":{"id":7850,"nodeType":"StructuredDocumentation","src":"16010:276:33","text":" @dev Returns the downcasted uint16 from uint256, reverting on\n overflow (when the input is greater than largest uint16).\n Counterpart to Solidity's `uint16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":7877,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"16300:8:33","nodeType":"FunctionDefinition","parameters":{"id":7853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7852,"mutability":"mutable","name":"value","nameLocation":"16317:5:33","nodeType":"VariableDeclaration","scope":7877,"src":"16309:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7851,"name":"uint256","nodeType":"ElementaryTypeName","src":"16309:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16308:15:33"},"returnParameters":{"id":7856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7877,"src":"16347:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":7854,"name":"uint16","nodeType":"ElementaryTypeName","src":"16347:6:33","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"16346:8:33"},"scope":8765,"src":"16291:213:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7904,"nodeType":"Block","src":"16849:146:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7885,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7880,"src":"16863:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16876:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":7887,"name":"uint8","nodeType":"ElementaryTypeName","src":"16876:5:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":7886,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16871:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16871:11:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":7890,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16883:3:33","memberName":"max","nodeType":"MemberAccess","src":"16871:15:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"16863:23:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7898,"nodeType":"IfStatement","src":"16859:101:33","trueBody":{"id":7897,"nodeType":"Block","src":"16888:72:33","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":7893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16940:1:33","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":7894,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7880,"src":"16943:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7892,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"16909:30:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16909:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7896,"nodeType":"RevertStatement","src":"16902:47:33"}]}},{"expression":{"arguments":[{"id":7901,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7880,"src":"16982:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16976:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":7899,"name":"uint8","nodeType":"ElementaryTypeName","src":"16976:5:33","typeDescriptions":{}}},"id":7902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16976:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":7884,"id":7903,"nodeType":"Return","src":"16969:19:33"}]},"documentation":{"id":7878,"nodeType":"StructuredDocumentation","src":"16510:272:33","text":" @dev Returns the downcasted uint8 from uint256, reverting on\n overflow (when the input is greater than largest uint8).\n Counterpart to Solidity's `uint8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":7905,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"16796:7:33","nodeType":"FunctionDefinition","parameters":{"id":7881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7880,"mutability":"mutable","name":"value","nameLocation":"16812:5:33","nodeType":"VariableDeclaration","scope":7905,"src":"16804:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7879,"name":"uint256","nodeType":"ElementaryTypeName","src":"16804:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16803:15:33"},"returnParameters":{"id":7884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7905,"src":"16842:5:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7882,"name":"uint8","nodeType":"ElementaryTypeName","src":"16842:5:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16841:7:33"},"scope":8765,"src":"16787:208:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7927,"nodeType":"Block","src":"17231:128:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7913,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7908,"src":"17245:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":7914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17253:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17245:9:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7921,"nodeType":"IfStatement","src":"17241:81:33","trueBody":{"id":7920,"nodeType":"Block","src":"17256:66:33","statements":[{"errorCall":{"arguments":[{"id":7917,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7908,"src":"17305:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7916,"name":"SafeCastOverflowedIntToUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7025,"src":"17277:27:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_int256_$returns$_t_error_$","typeString":"function (int256) pure returns (error)"}},"id":7918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17277:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7919,"nodeType":"RevertStatement","src":"17270:41:33"}]}},{"expression":{"arguments":[{"id":7924,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7908,"src":"17346:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17338:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":7922,"name":"uint256","nodeType":"ElementaryTypeName","src":"17338:7:33","typeDescriptions":{}}},"id":7925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17338:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7912,"id":7926,"nodeType":"Return","src":"17331:21:33"}]},"documentation":{"id":7906,"nodeType":"StructuredDocumentation","src":"17001:160:33","text":" @dev Converts a signed int256 into an unsigned uint256.\n Requirements:\n - input must be greater than or equal to 0."},"id":7928,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"17175:9:33","nodeType":"FunctionDefinition","parameters":{"id":7909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7908,"mutability":"mutable","name":"value","nameLocation":"17192:5:33","nodeType":"VariableDeclaration","scope":7928,"src":"17185:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7907,"name":"int256","nodeType":"ElementaryTypeName","src":"17185:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17184:14:33"},"returnParameters":{"id":7912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7911,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7928,"src":"17222:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7910,"name":"uint256","nodeType":"ElementaryTypeName","src":"17222:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17221:9:33"},"scope":8765,"src":"17166:193:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7953,"nodeType":"Block","src":"17756:150:33","statements":[{"expression":{"id":7941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7936,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7934,"src":"17766:10:33","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7939,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7931,"src":"17786:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17779:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":7937,"name":"int248","nodeType":"ElementaryTypeName","src":"17779:6:33","typeDescriptions":{}}},"id":7940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17779:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"17766:26:33","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"id":7942,"nodeType":"ExpressionStatement","src":"17766:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7943,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7934,"src":"17806:10:33","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7944,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7931,"src":"17820:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17806:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7952,"nodeType":"IfStatement","src":"17802:98:33","trueBody":{"id":7951,"nodeType":"Block","src":"17827:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":7947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17878:3:33","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":7948,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7931,"src":"17883:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7946,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"17848:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17848:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7950,"nodeType":"RevertStatement","src":"17841:48:33"}]}}]},"documentation":{"id":7929,"nodeType":"StructuredDocumentation","src":"17365:312:33","text":" @dev Returns the downcasted int248 from int256, reverting on\n overflow (when the input is less than smallest int248 or\n greater than largest int248).\n Counterpart to Solidity's `int248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":7954,"implemented":true,"kind":"function","modifiers":[],"name":"toInt248","nameLocation":"17691:8:33","nodeType":"FunctionDefinition","parameters":{"id":7932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7931,"mutability":"mutable","name":"value","nameLocation":"17707:5:33","nodeType":"VariableDeclaration","scope":7954,"src":"17700:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7930,"name":"int256","nodeType":"ElementaryTypeName","src":"17700:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17699:14:33"},"returnParameters":{"id":7935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7934,"mutability":"mutable","name":"downcasted","nameLocation":"17744:10:33","nodeType":"VariableDeclaration","scope":7954,"src":"17737:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"},"typeName":{"id":7933,"name":"int248","nodeType":"ElementaryTypeName","src":"17737:6:33","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"visibility":"internal"}],"src":"17736:19:33"},"scope":8765,"src":"17682:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7979,"nodeType":"Block","src":"18303:150:33","statements":[{"expression":{"id":7967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7962,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7960,"src":"18313:10:33","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7965,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7957,"src":"18333:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18326:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":7963,"name":"int240","nodeType":"ElementaryTypeName","src":"18326:6:33","typeDescriptions":{}}},"id":7966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18326:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18313:26:33","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"id":7968,"nodeType":"ExpressionStatement","src":"18313:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7969,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7960,"src":"18353:10:33","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7970,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7957,"src":"18367:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18353:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7978,"nodeType":"IfStatement","src":"18349:98:33","trueBody":{"id":7977,"nodeType":"Block","src":"18374:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":7973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18425:3:33","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":7974,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7957,"src":"18430:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7972,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"18395:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":7975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18395:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7976,"nodeType":"RevertStatement","src":"18388:48:33"}]}}]},"documentation":{"id":7955,"nodeType":"StructuredDocumentation","src":"17912:312:33","text":" @dev Returns the downcasted int240 from int256, reverting on\n overflow (when the input is less than smallest int240 or\n greater than largest int240).\n Counterpart to Solidity's `int240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":7980,"implemented":true,"kind":"function","modifiers":[],"name":"toInt240","nameLocation":"18238:8:33","nodeType":"FunctionDefinition","parameters":{"id":7958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7957,"mutability":"mutable","name":"value","nameLocation":"18254:5:33","nodeType":"VariableDeclaration","scope":7980,"src":"18247:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7956,"name":"int256","nodeType":"ElementaryTypeName","src":"18247:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18246:14:33"},"returnParameters":{"id":7961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7960,"mutability":"mutable","name":"downcasted","nameLocation":"18291:10:33","nodeType":"VariableDeclaration","scope":7980,"src":"18284:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"},"typeName":{"id":7959,"name":"int240","nodeType":"ElementaryTypeName","src":"18284:6:33","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"visibility":"internal"}],"src":"18283:19:33"},"scope":8765,"src":"18229:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8005,"nodeType":"Block","src":"18850:150:33","statements":[{"expression":{"id":7993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7988,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7986,"src":"18860:10:33","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7983,"src":"18880:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18873:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":7989,"name":"int232","nodeType":"ElementaryTypeName","src":"18873:6:33","typeDescriptions":{}}},"id":7992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18873:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"18860:26:33","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"id":7994,"nodeType":"ExpressionStatement","src":"18860:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":7997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7995,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7986,"src":"18900:10:33","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7996,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7983,"src":"18914:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18900:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8004,"nodeType":"IfStatement","src":"18896:98:33","trueBody":{"id":8003,"nodeType":"Block","src":"18921:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":7999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18972:3:33","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":8000,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7983,"src":"18977:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":7998,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"18942:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18942:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8002,"nodeType":"RevertStatement","src":"18935:48:33"}]}}]},"documentation":{"id":7981,"nodeType":"StructuredDocumentation","src":"18459:312:33","text":" @dev Returns the downcasted int232 from int256, reverting on\n overflow (when the input is less than smallest int232 or\n greater than largest int232).\n Counterpart to Solidity's `int232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":8006,"implemented":true,"kind":"function","modifiers":[],"name":"toInt232","nameLocation":"18785:8:33","nodeType":"FunctionDefinition","parameters":{"id":7984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7983,"mutability":"mutable","name":"value","nameLocation":"18801:5:33","nodeType":"VariableDeclaration","scope":8006,"src":"18794:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7982,"name":"int256","nodeType":"ElementaryTypeName","src":"18794:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18793:14:33"},"returnParameters":{"id":7987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7986,"mutability":"mutable","name":"downcasted","nameLocation":"18838:10:33","nodeType":"VariableDeclaration","scope":8006,"src":"18831:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"},"typeName":{"id":7985,"name":"int232","nodeType":"ElementaryTypeName","src":"18831:6:33","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"visibility":"internal"}],"src":"18830:19:33"},"scope":8765,"src":"18776:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8031,"nodeType":"Block","src":"19397:150:33","statements":[{"expression":{"id":8019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8014,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8012,"src":"19407:10:33","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8009,"src":"19427:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19420:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":8015,"name":"int224","nodeType":"ElementaryTypeName","src":"19420:6:33","typeDescriptions":{}}},"id":8018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19420:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"19407:26:33","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"id":8020,"nodeType":"ExpressionStatement","src":"19407:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8021,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8012,"src":"19447:10:33","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8022,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8009,"src":"19461:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19447:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8030,"nodeType":"IfStatement","src":"19443:98:33","trueBody":{"id":8029,"nodeType":"Block","src":"19468:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":8025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19519:3:33","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":8026,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8009,"src":"19524:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8024,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"19489:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19489:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8028,"nodeType":"RevertStatement","src":"19482:48:33"}]}}]},"documentation":{"id":8007,"nodeType":"StructuredDocumentation","src":"19006:312:33","text":" @dev Returns the downcasted int224 from int256, reverting on\n overflow (when the input is less than smallest int224 or\n greater than largest int224).\n Counterpart to Solidity's `int224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":8032,"implemented":true,"kind":"function","modifiers":[],"name":"toInt224","nameLocation":"19332:8:33","nodeType":"FunctionDefinition","parameters":{"id":8010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8009,"mutability":"mutable","name":"value","nameLocation":"19348:5:33","nodeType":"VariableDeclaration","scope":8032,"src":"19341:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8008,"name":"int256","nodeType":"ElementaryTypeName","src":"19341:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19340:14:33"},"returnParameters":{"id":8013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8012,"mutability":"mutable","name":"downcasted","nameLocation":"19385:10:33","nodeType":"VariableDeclaration","scope":8032,"src":"19378:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"},"typeName":{"id":8011,"name":"int224","nodeType":"ElementaryTypeName","src":"19378:6:33","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"visibility":"internal"}],"src":"19377:19:33"},"scope":8765,"src":"19323:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8057,"nodeType":"Block","src":"19944:150:33","statements":[{"expression":{"id":8045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8040,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8038,"src":"19954:10:33","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8043,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8035,"src":"19974:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19967:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":8041,"name":"int216","nodeType":"ElementaryTypeName","src":"19967:6:33","typeDescriptions":{}}},"id":8044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19967:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"19954:26:33","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"id":8046,"nodeType":"ExpressionStatement","src":"19954:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8047,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8038,"src":"19994:10:33","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8048,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8035,"src":"20008:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19994:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8056,"nodeType":"IfStatement","src":"19990:98:33","trueBody":{"id":8055,"nodeType":"Block","src":"20015:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":8051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20066:3:33","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":8052,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8035,"src":"20071:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8050,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"20036:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20036:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8054,"nodeType":"RevertStatement","src":"20029:48:33"}]}}]},"documentation":{"id":8033,"nodeType":"StructuredDocumentation","src":"19553:312:33","text":" @dev Returns the downcasted int216 from int256, reverting on\n overflow (when the input is less than smallest int216 or\n greater than largest int216).\n Counterpart to Solidity's `int216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":8058,"implemented":true,"kind":"function","modifiers":[],"name":"toInt216","nameLocation":"19879:8:33","nodeType":"FunctionDefinition","parameters":{"id":8036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8035,"mutability":"mutable","name":"value","nameLocation":"19895:5:33","nodeType":"VariableDeclaration","scope":8058,"src":"19888:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8034,"name":"int256","nodeType":"ElementaryTypeName","src":"19888:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19887:14:33"},"returnParameters":{"id":8039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8038,"mutability":"mutable","name":"downcasted","nameLocation":"19932:10:33","nodeType":"VariableDeclaration","scope":8058,"src":"19925:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"},"typeName":{"id":8037,"name":"int216","nodeType":"ElementaryTypeName","src":"19925:6:33","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"visibility":"internal"}],"src":"19924:19:33"},"scope":8765,"src":"19870:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8083,"nodeType":"Block","src":"20491:150:33","statements":[{"expression":{"id":8071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8066,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8064,"src":"20501:10:33","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8069,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8061,"src":"20521:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20514:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":8067,"name":"int208","nodeType":"ElementaryTypeName","src":"20514:6:33","typeDescriptions":{}}},"id":8070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20514:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"20501:26:33","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"id":8072,"nodeType":"ExpressionStatement","src":"20501:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8073,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8064,"src":"20541:10:33","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8074,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8061,"src":"20555:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20541:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8082,"nodeType":"IfStatement","src":"20537:98:33","trueBody":{"id":8081,"nodeType":"Block","src":"20562:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":8077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20613:3:33","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":8078,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8061,"src":"20618:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8076,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"20583:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20583:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8080,"nodeType":"RevertStatement","src":"20576:48:33"}]}}]},"documentation":{"id":8059,"nodeType":"StructuredDocumentation","src":"20100:312:33","text":" @dev Returns the downcasted int208 from int256, reverting on\n overflow (when the input is less than smallest int208 or\n greater than largest int208).\n Counterpart to Solidity's `int208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":8084,"implemented":true,"kind":"function","modifiers":[],"name":"toInt208","nameLocation":"20426:8:33","nodeType":"FunctionDefinition","parameters":{"id":8062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8061,"mutability":"mutable","name":"value","nameLocation":"20442:5:33","nodeType":"VariableDeclaration","scope":8084,"src":"20435:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8060,"name":"int256","nodeType":"ElementaryTypeName","src":"20435:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20434:14:33"},"returnParameters":{"id":8065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8064,"mutability":"mutable","name":"downcasted","nameLocation":"20479:10:33","nodeType":"VariableDeclaration","scope":8084,"src":"20472:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"},"typeName":{"id":8063,"name":"int208","nodeType":"ElementaryTypeName","src":"20472:6:33","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"visibility":"internal"}],"src":"20471:19:33"},"scope":8765,"src":"20417:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8109,"nodeType":"Block","src":"21038:150:33","statements":[{"expression":{"id":8097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8092,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8090,"src":"21048:10:33","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8095,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8087,"src":"21068:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8094,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21061:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":8093,"name":"int200","nodeType":"ElementaryTypeName","src":"21061:6:33","typeDescriptions":{}}},"id":8096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21061:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21048:26:33","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"id":8098,"nodeType":"ExpressionStatement","src":"21048:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8099,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8090,"src":"21088:10:33","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8100,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8087,"src":"21102:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21088:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8108,"nodeType":"IfStatement","src":"21084:98:33","trueBody":{"id":8107,"nodeType":"Block","src":"21109:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":8103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21160:3:33","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":8104,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8087,"src":"21165:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8102,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"21130:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21130:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8106,"nodeType":"RevertStatement","src":"21123:48:33"}]}}]},"documentation":{"id":8085,"nodeType":"StructuredDocumentation","src":"20647:312:33","text":" @dev Returns the downcasted int200 from int256, reverting on\n overflow (when the input is less than smallest int200 or\n greater than largest int200).\n Counterpart to Solidity's `int200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":8110,"implemented":true,"kind":"function","modifiers":[],"name":"toInt200","nameLocation":"20973:8:33","nodeType":"FunctionDefinition","parameters":{"id":8088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8087,"mutability":"mutable","name":"value","nameLocation":"20989:5:33","nodeType":"VariableDeclaration","scope":8110,"src":"20982:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8086,"name":"int256","nodeType":"ElementaryTypeName","src":"20982:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20981:14:33"},"returnParameters":{"id":8091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8090,"mutability":"mutable","name":"downcasted","nameLocation":"21026:10:33","nodeType":"VariableDeclaration","scope":8110,"src":"21019:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"},"typeName":{"id":8089,"name":"int200","nodeType":"ElementaryTypeName","src":"21019:6:33","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"visibility":"internal"}],"src":"21018:19:33"},"scope":8765,"src":"20964:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8135,"nodeType":"Block","src":"21585:150:33","statements":[{"expression":{"id":8123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8118,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8116,"src":"21595:10:33","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8113,"src":"21615:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21608:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":8119,"name":"int192","nodeType":"ElementaryTypeName","src":"21608:6:33","typeDescriptions":{}}},"id":8122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21608:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"21595:26:33","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"id":8124,"nodeType":"ExpressionStatement","src":"21595:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8125,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8116,"src":"21635:10:33","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8126,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8113,"src":"21649:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21635:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8134,"nodeType":"IfStatement","src":"21631:98:33","trueBody":{"id":8133,"nodeType":"Block","src":"21656:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":8129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21707:3:33","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":8130,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8113,"src":"21712:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8128,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"21677:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21677:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8132,"nodeType":"RevertStatement","src":"21670:48:33"}]}}]},"documentation":{"id":8111,"nodeType":"StructuredDocumentation","src":"21194:312:33","text":" @dev Returns the downcasted int192 from int256, reverting on\n overflow (when the input is less than smallest int192 or\n greater than largest int192).\n Counterpart to Solidity's `int192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":8136,"implemented":true,"kind":"function","modifiers":[],"name":"toInt192","nameLocation":"21520:8:33","nodeType":"FunctionDefinition","parameters":{"id":8114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8113,"mutability":"mutable","name":"value","nameLocation":"21536:5:33","nodeType":"VariableDeclaration","scope":8136,"src":"21529:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8112,"name":"int256","nodeType":"ElementaryTypeName","src":"21529:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21528:14:33"},"returnParameters":{"id":8117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8116,"mutability":"mutable","name":"downcasted","nameLocation":"21573:10:33","nodeType":"VariableDeclaration","scope":8136,"src":"21566:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"},"typeName":{"id":8115,"name":"int192","nodeType":"ElementaryTypeName","src":"21566:6:33","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"visibility":"internal"}],"src":"21565:19:33"},"scope":8765,"src":"21511:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8161,"nodeType":"Block","src":"22132:150:33","statements":[{"expression":{"id":8149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8144,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8142,"src":"22142:10:33","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8147,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8139,"src":"22162:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22155:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":8145,"name":"int184","nodeType":"ElementaryTypeName","src":"22155:6:33","typeDescriptions":{}}},"id":8148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22155:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22142:26:33","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"id":8150,"nodeType":"ExpressionStatement","src":"22142:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8151,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8142,"src":"22182:10:33","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8152,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8139,"src":"22196:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22182:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8160,"nodeType":"IfStatement","src":"22178:98:33","trueBody":{"id":8159,"nodeType":"Block","src":"22203:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":8155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22254:3:33","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":8156,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8139,"src":"22259:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8154,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"22224:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22224:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8158,"nodeType":"RevertStatement","src":"22217:48:33"}]}}]},"documentation":{"id":8137,"nodeType":"StructuredDocumentation","src":"21741:312:33","text":" @dev Returns the downcasted int184 from int256, reverting on\n overflow (when the input is less than smallest int184 or\n greater than largest int184).\n Counterpart to Solidity's `int184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":8162,"implemented":true,"kind":"function","modifiers":[],"name":"toInt184","nameLocation":"22067:8:33","nodeType":"FunctionDefinition","parameters":{"id":8140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8139,"mutability":"mutable","name":"value","nameLocation":"22083:5:33","nodeType":"VariableDeclaration","scope":8162,"src":"22076:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8138,"name":"int256","nodeType":"ElementaryTypeName","src":"22076:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22075:14:33"},"returnParameters":{"id":8143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8142,"mutability":"mutable","name":"downcasted","nameLocation":"22120:10:33","nodeType":"VariableDeclaration","scope":8162,"src":"22113:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"},"typeName":{"id":8141,"name":"int184","nodeType":"ElementaryTypeName","src":"22113:6:33","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"visibility":"internal"}],"src":"22112:19:33"},"scope":8765,"src":"22058:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8187,"nodeType":"Block","src":"22679:150:33","statements":[{"expression":{"id":8175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8170,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8168,"src":"22689:10:33","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8173,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8165,"src":"22709:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22702:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":8171,"name":"int176","nodeType":"ElementaryTypeName","src":"22702:6:33","typeDescriptions":{}}},"id":8174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22702:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"22689:26:33","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"id":8176,"nodeType":"ExpressionStatement","src":"22689:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8177,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8168,"src":"22729:10:33","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8178,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8165,"src":"22743:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22729:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8186,"nodeType":"IfStatement","src":"22725:98:33","trueBody":{"id":8185,"nodeType":"Block","src":"22750:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":8181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22801:3:33","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":8182,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8165,"src":"22806:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8180,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"22771:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22771:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8184,"nodeType":"RevertStatement","src":"22764:48:33"}]}}]},"documentation":{"id":8163,"nodeType":"StructuredDocumentation","src":"22288:312:33","text":" @dev Returns the downcasted int176 from int256, reverting on\n overflow (when the input is less than smallest int176 or\n greater than largest int176).\n Counterpart to Solidity's `int176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":8188,"implemented":true,"kind":"function","modifiers":[],"name":"toInt176","nameLocation":"22614:8:33","nodeType":"FunctionDefinition","parameters":{"id":8166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8165,"mutability":"mutable","name":"value","nameLocation":"22630:5:33","nodeType":"VariableDeclaration","scope":8188,"src":"22623:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8164,"name":"int256","nodeType":"ElementaryTypeName","src":"22623:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22622:14:33"},"returnParameters":{"id":8169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8168,"mutability":"mutable","name":"downcasted","nameLocation":"22667:10:33","nodeType":"VariableDeclaration","scope":8188,"src":"22660:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"},"typeName":{"id":8167,"name":"int176","nodeType":"ElementaryTypeName","src":"22660:6:33","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"visibility":"internal"}],"src":"22659:19:33"},"scope":8765,"src":"22605:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8213,"nodeType":"Block","src":"23226:150:33","statements":[{"expression":{"id":8201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8196,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8194,"src":"23236:10:33","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8199,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8191,"src":"23256:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23249:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":8197,"name":"int168","nodeType":"ElementaryTypeName","src":"23249:6:33","typeDescriptions":{}}},"id":8200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23249:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"23236:26:33","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"id":8202,"nodeType":"ExpressionStatement","src":"23236:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8203,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8194,"src":"23276:10:33","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8204,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8191,"src":"23290:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23276:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8212,"nodeType":"IfStatement","src":"23272:98:33","trueBody":{"id":8211,"nodeType":"Block","src":"23297:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":8207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23348:3:33","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":8208,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8191,"src":"23353:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8206,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"23318:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23318:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8210,"nodeType":"RevertStatement","src":"23311:48:33"}]}}]},"documentation":{"id":8189,"nodeType":"StructuredDocumentation","src":"22835:312:33","text":" @dev Returns the downcasted int168 from int256, reverting on\n overflow (when the input is less than smallest int168 or\n greater than largest int168).\n Counterpart to Solidity's `int168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":8214,"implemented":true,"kind":"function","modifiers":[],"name":"toInt168","nameLocation":"23161:8:33","nodeType":"FunctionDefinition","parameters":{"id":8192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8191,"mutability":"mutable","name":"value","nameLocation":"23177:5:33","nodeType":"VariableDeclaration","scope":8214,"src":"23170:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8190,"name":"int256","nodeType":"ElementaryTypeName","src":"23170:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23169:14:33"},"returnParameters":{"id":8195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8194,"mutability":"mutable","name":"downcasted","nameLocation":"23214:10:33","nodeType":"VariableDeclaration","scope":8214,"src":"23207:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"},"typeName":{"id":8193,"name":"int168","nodeType":"ElementaryTypeName","src":"23207:6:33","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"visibility":"internal"}],"src":"23206:19:33"},"scope":8765,"src":"23152:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8239,"nodeType":"Block","src":"23773:150:33","statements":[{"expression":{"id":8227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8222,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8220,"src":"23783:10:33","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8217,"src":"23803:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23796:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":8223,"name":"int160","nodeType":"ElementaryTypeName","src":"23796:6:33","typeDescriptions":{}}},"id":8226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23796:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"23783:26:33","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"id":8228,"nodeType":"ExpressionStatement","src":"23783:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8229,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8220,"src":"23823:10:33","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8230,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8217,"src":"23837:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23823:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8238,"nodeType":"IfStatement","src":"23819:98:33","trueBody":{"id":8237,"nodeType":"Block","src":"23844:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":8233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23895:3:33","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":8234,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8217,"src":"23900:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8232,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"23865:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23865:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8236,"nodeType":"RevertStatement","src":"23858:48:33"}]}}]},"documentation":{"id":8215,"nodeType":"StructuredDocumentation","src":"23382:312:33","text":" @dev Returns the downcasted int160 from int256, reverting on\n overflow (when the input is less than smallest int160 or\n greater than largest int160).\n Counterpart to Solidity's `int160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":8240,"implemented":true,"kind":"function","modifiers":[],"name":"toInt160","nameLocation":"23708:8:33","nodeType":"FunctionDefinition","parameters":{"id":8218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8217,"mutability":"mutable","name":"value","nameLocation":"23724:5:33","nodeType":"VariableDeclaration","scope":8240,"src":"23717:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8216,"name":"int256","nodeType":"ElementaryTypeName","src":"23717:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23716:14:33"},"returnParameters":{"id":8221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8220,"mutability":"mutable","name":"downcasted","nameLocation":"23761:10:33","nodeType":"VariableDeclaration","scope":8240,"src":"23754:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"},"typeName":{"id":8219,"name":"int160","nodeType":"ElementaryTypeName","src":"23754:6:33","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"visibility":"internal"}],"src":"23753:19:33"},"scope":8765,"src":"23699:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8265,"nodeType":"Block","src":"24320:150:33","statements":[{"expression":{"id":8253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8248,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8246,"src":"24330:10:33","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8251,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8243,"src":"24350:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24343:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":8249,"name":"int152","nodeType":"ElementaryTypeName","src":"24343:6:33","typeDescriptions":{}}},"id":8252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24343:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"24330:26:33","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"id":8254,"nodeType":"ExpressionStatement","src":"24330:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8255,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8246,"src":"24370:10:33","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8256,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8243,"src":"24384:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24370:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8264,"nodeType":"IfStatement","src":"24366:98:33","trueBody":{"id":8263,"nodeType":"Block","src":"24391:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":8259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24442:3:33","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":8260,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8243,"src":"24447:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8258,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"24412:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24412:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8262,"nodeType":"RevertStatement","src":"24405:48:33"}]}}]},"documentation":{"id":8241,"nodeType":"StructuredDocumentation","src":"23929:312:33","text":" @dev Returns the downcasted int152 from int256, reverting on\n overflow (when the input is less than smallest int152 or\n greater than largest int152).\n Counterpart to Solidity's `int152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":8266,"implemented":true,"kind":"function","modifiers":[],"name":"toInt152","nameLocation":"24255:8:33","nodeType":"FunctionDefinition","parameters":{"id":8244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8243,"mutability":"mutable","name":"value","nameLocation":"24271:5:33","nodeType":"VariableDeclaration","scope":8266,"src":"24264:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8242,"name":"int256","nodeType":"ElementaryTypeName","src":"24264:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24263:14:33"},"returnParameters":{"id":8247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8246,"mutability":"mutable","name":"downcasted","nameLocation":"24308:10:33","nodeType":"VariableDeclaration","scope":8266,"src":"24301:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"},"typeName":{"id":8245,"name":"int152","nodeType":"ElementaryTypeName","src":"24301:6:33","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"visibility":"internal"}],"src":"24300:19:33"},"scope":8765,"src":"24246:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8291,"nodeType":"Block","src":"24867:150:33","statements":[{"expression":{"id":8279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8274,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8272,"src":"24877:10:33","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8277,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8269,"src":"24897:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24890:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":8275,"name":"int144","nodeType":"ElementaryTypeName","src":"24890:6:33","typeDescriptions":{}}},"id":8278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24890:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"24877:26:33","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"id":8280,"nodeType":"ExpressionStatement","src":"24877:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8281,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8272,"src":"24917:10:33","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8282,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8269,"src":"24931:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24917:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8290,"nodeType":"IfStatement","src":"24913:98:33","trueBody":{"id":8289,"nodeType":"Block","src":"24938:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":8285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24989:3:33","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":8286,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8269,"src":"24994:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8284,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"24959:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24959:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8288,"nodeType":"RevertStatement","src":"24952:48:33"}]}}]},"documentation":{"id":8267,"nodeType":"StructuredDocumentation","src":"24476:312:33","text":" @dev Returns the downcasted int144 from int256, reverting on\n overflow (when the input is less than smallest int144 or\n greater than largest int144).\n Counterpart to Solidity's `int144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":8292,"implemented":true,"kind":"function","modifiers":[],"name":"toInt144","nameLocation":"24802:8:33","nodeType":"FunctionDefinition","parameters":{"id":8270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8269,"mutability":"mutable","name":"value","nameLocation":"24818:5:33","nodeType":"VariableDeclaration","scope":8292,"src":"24811:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8268,"name":"int256","nodeType":"ElementaryTypeName","src":"24811:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24810:14:33"},"returnParameters":{"id":8273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8272,"mutability":"mutable","name":"downcasted","nameLocation":"24855:10:33","nodeType":"VariableDeclaration","scope":8292,"src":"24848:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"},"typeName":{"id":8271,"name":"int144","nodeType":"ElementaryTypeName","src":"24848:6:33","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"visibility":"internal"}],"src":"24847:19:33"},"scope":8765,"src":"24793:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8317,"nodeType":"Block","src":"25414:150:33","statements":[{"expression":{"id":8305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8300,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8298,"src":"25424:10:33","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8303,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8295,"src":"25444:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25437:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":8301,"name":"int136","nodeType":"ElementaryTypeName","src":"25437:6:33","typeDescriptions":{}}},"id":8304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25437:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"25424:26:33","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"id":8306,"nodeType":"ExpressionStatement","src":"25424:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8307,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8298,"src":"25464:10:33","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8308,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8295,"src":"25478:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25464:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8316,"nodeType":"IfStatement","src":"25460:98:33","trueBody":{"id":8315,"nodeType":"Block","src":"25485:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":8311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25536:3:33","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":8312,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8295,"src":"25541:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8310,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"25506:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25506:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8314,"nodeType":"RevertStatement","src":"25499:48:33"}]}}]},"documentation":{"id":8293,"nodeType":"StructuredDocumentation","src":"25023:312:33","text":" @dev Returns the downcasted int136 from int256, reverting on\n overflow (when the input is less than smallest int136 or\n greater than largest int136).\n Counterpart to Solidity's `int136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":8318,"implemented":true,"kind":"function","modifiers":[],"name":"toInt136","nameLocation":"25349:8:33","nodeType":"FunctionDefinition","parameters":{"id":8296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8295,"mutability":"mutable","name":"value","nameLocation":"25365:5:33","nodeType":"VariableDeclaration","scope":8318,"src":"25358:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8294,"name":"int256","nodeType":"ElementaryTypeName","src":"25358:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25357:14:33"},"returnParameters":{"id":8299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8298,"mutability":"mutable","name":"downcasted","nameLocation":"25402:10:33","nodeType":"VariableDeclaration","scope":8318,"src":"25395:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"},"typeName":{"id":8297,"name":"int136","nodeType":"ElementaryTypeName","src":"25395:6:33","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"visibility":"internal"}],"src":"25394:19:33"},"scope":8765,"src":"25340:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8343,"nodeType":"Block","src":"25961:150:33","statements":[{"expression":{"id":8331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8326,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8324,"src":"25971:10:33","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8329,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8321,"src":"25991:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25984:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":8327,"name":"int128","nodeType":"ElementaryTypeName","src":"25984:6:33","typeDescriptions":{}}},"id":8330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25984:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"25971:26:33","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":8332,"nodeType":"ExpressionStatement","src":"25971:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8333,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8324,"src":"26011:10:33","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8334,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8321,"src":"26025:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26011:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8342,"nodeType":"IfStatement","src":"26007:98:33","trueBody":{"id":8341,"nodeType":"Block","src":"26032:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":8337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26083:3:33","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":8338,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8321,"src":"26088:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8336,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"26053:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26053:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8340,"nodeType":"RevertStatement","src":"26046:48:33"}]}}]},"documentation":{"id":8319,"nodeType":"StructuredDocumentation","src":"25570:312:33","text":" @dev Returns the downcasted int128 from int256, reverting on\n overflow (when the input is less than smallest int128 or\n greater than largest int128).\n Counterpart to Solidity's `int128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":8344,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nameLocation":"25896:8:33","nodeType":"FunctionDefinition","parameters":{"id":8322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8321,"mutability":"mutable","name":"value","nameLocation":"25912:5:33","nodeType":"VariableDeclaration","scope":8344,"src":"25905:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8320,"name":"int256","nodeType":"ElementaryTypeName","src":"25905:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25904:14:33"},"returnParameters":{"id":8325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8324,"mutability":"mutable","name":"downcasted","nameLocation":"25949:10:33","nodeType":"VariableDeclaration","scope":8344,"src":"25942:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":8323,"name":"int128","nodeType":"ElementaryTypeName","src":"25942:6:33","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"25941:19:33"},"scope":8765,"src":"25887:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8369,"nodeType":"Block","src":"26508:150:33","statements":[{"expression":{"id":8357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8352,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8350,"src":"26518:10:33","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8355,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8347,"src":"26538:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8354,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26531:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":8353,"name":"int120","nodeType":"ElementaryTypeName","src":"26531:6:33","typeDescriptions":{}}},"id":8356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26531:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"26518:26:33","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"id":8358,"nodeType":"ExpressionStatement","src":"26518:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8359,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8350,"src":"26558:10:33","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8347,"src":"26572:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26558:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8368,"nodeType":"IfStatement","src":"26554:98:33","trueBody":{"id":8367,"nodeType":"Block","src":"26579:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":8363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26630:3:33","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":8364,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8347,"src":"26635:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8362,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"26600:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26600:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8366,"nodeType":"RevertStatement","src":"26593:48:33"}]}}]},"documentation":{"id":8345,"nodeType":"StructuredDocumentation","src":"26117:312:33","text":" @dev Returns the downcasted int120 from int256, reverting on\n overflow (when the input is less than smallest int120 or\n greater than largest int120).\n Counterpart to Solidity's `int120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":8370,"implemented":true,"kind":"function","modifiers":[],"name":"toInt120","nameLocation":"26443:8:33","nodeType":"FunctionDefinition","parameters":{"id":8348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8347,"mutability":"mutable","name":"value","nameLocation":"26459:5:33","nodeType":"VariableDeclaration","scope":8370,"src":"26452:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8346,"name":"int256","nodeType":"ElementaryTypeName","src":"26452:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26451:14:33"},"returnParameters":{"id":8351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8350,"mutability":"mutable","name":"downcasted","nameLocation":"26496:10:33","nodeType":"VariableDeclaration","scope":8370,"src":"26489:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"},"typeName":{"id":8349,"name":"int120","nodeType":"ElementaryTypeName","src":"26489:6:33","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"visibility":"internal"}],"src":"26488:19:33"},"scope":8765,"src":"26434:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8395,"nodeType":"Block","src":"27055:150:33","statements":[{"expression":{"id":8383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8378,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8376,"src":"27065:10:33","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8373,"src":"27085:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27078:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":8379,"name":"int112","nodeType":"ElementaryTypeName","src":"27078:6:33","typeDescriptions":{}}},"id":8382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27078:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27065:26:33","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"id":8384,"nodeType":"ExpressionStatement","src":"27065:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8385,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8376,"src":"27105:10:33","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8386,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8373,"src":"27119:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27105:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8394,"nodeType":"IfStatement","src":"27101:98:33","trueBody":{"id":8393,"nodeType":"Block","src":"27126:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":8389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27177:3:33","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":8390,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8373,"src":"27182:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8388,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"27147:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27147:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8392,"nodeType":"RevertStatement","src":"27140:48:33"}]}}]},"documentation":{"id":8371,"nodeType":"StructuredDocumentation","src":"26664:312:33","text":" @dev Returns the downcasted int112 from int256, reverting on\n overflow (when the input is less than smallest int112 or\n greater than largest int112).\n Counterpart to Solidity's `int112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":8396,"implemented":true,"kind":"function","modifiers":[],"name":"toInt112","nameLocation":"26990:8:33","nodeType":"FunctionDefinition","parameters":{"id":8374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8373,"mutability":"mutable","name":"value","nameLocation":"27006:5:33","nodeType":"VariableDeclaration","scope":8396,"src":"26999:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8372,"name":"int256","nodeType":"ElementaryTypeName","src":"26999:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26998:14:33"},"returnParameters":{"id":8377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8376,"mutability":"mutable","name":"downcasted","nameLocation":"27043:10:33","nodeType":"VariableDeclaration","scope":8396,"src":"27036:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"},"typeName":{"id":8375,"name":"int112","nodeType":"ElementaryTypeName","src":"27036:6:33","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"visibility":"internal"}],"src":"27035:19:33"},"scope":8765,"src":"26981:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8421,"nodeType":"Block","src":"27602:150:33","statements":[{"expression":{"id":8409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8404,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8402,"src":"27612:10:33","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8399,"src":"27632:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27625:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":8405,"name":"int104","nodeType":"ElementaryTypeName","src":"27625:6:33","typeDescriptions":{}}},"id":8408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27625:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"27612:26:33","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"id":8410,"nodeType":"ExpressionStatement","src":"27612:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8411,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8402,"src":"27652:10:33","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8399,"src":"27666:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27652:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8420,"nodeType":"IfStatement","src":"27648:98:33","trueBody":{"id":8419,"nodeType":"Block","src":"27673:73:33","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":8415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27724:3:33","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":8416,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8399,"src":"27729:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8414,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"27694:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27694:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8418,"nodeType":"RevertStatement","src":"27687:48:33"}]}}]},"documentation":{"id":8397,"nodeType":"StructuredDocumentation","src":"27211:312:33","text":" @dev Returns the downcasted int104 from int256, reverting on\n overflow (when the input is less than smallest int104 or\n greater than largest int104).\n Counterpart to Solidity's `int104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":8422,"implemented":true,"kind":"function","modifiers":[],"name":"toInt104","nameLocation":"27537:8:33","nodeType":"FunctionDefinition","parameters":{"id":8400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8399,"mutability":"mutable","name":"value","nameLocation":"27553:5:33","nodeType":"VariableDeclaration","scope":8422,"src":"27546:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8398,"name":"int256","nodeType":"ElementaryTypeName","src":"27546:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27545:14:33"},"returnParameters":{"id":8403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8402,"mutability":"mutable","name":"downcasted","nameLocation":"27590:10:33","nodeType":"VariableDeclaration","scope":8422,"src":"27583:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"},"typeName":{"id":8401,"name":"int104","nodeType":"ElementaryTypeName","src":"27583:6:33","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"visibility":"internal"}],"src":"27582:19:33"},"scope":8765,"src":"27528:224:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8447,"nodeType":"Block","src":"28142:148:33","statements":[{"expression":{"id":8435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8430,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8428,"src":"28152:10:33","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8425,"src":"28171:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28165:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":8431,"name":"int96","nodeType":"ElementaryTypeName","src":"28165:5:33","typeDescriptions":{}}},"id":8434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28165:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"28152:25:33","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"id":8436,"nodeType":"ExpressionStatement","src":"28152:25:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8437,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8428,"src":"28191:10:33","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8438,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8425,"src":"28205:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28191:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8446,"nodeType":"IfStatement","src":"28187:97:33","trueBody":{"id":8445,"nodeType":"Block","src":"28212:72:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":8441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28263:2:33","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":8442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8425,"src":"28267:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8440,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"28233:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28233:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8444,"nodeType":"RevertStatement","src":"28226:47:33"}]}}]},"documentation":{"id":8423,"nodeType":"StructuredDocumentation","src":"27758:307:33","text":" @dev Returns the downcasted int96 from int256, reverting on\n overflow (when the input is less than smallest int96 or\n greater than largest int96).\n Counterpart to Solidity's `int96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":8448,"implemented":true,"kind":"function","modifiers":[],"name":"toInt96","nameLocation":"28079:7:33","nodeType":"FunctionDefinition","parameters":{"id":8426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8425,"mutability":"mutable","name":"value","nameLocation":"28094:5:33","nodeType":"VariableDeclaration","scope":8448,"src":"28087:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8424,"name":"int256","nodeType":"ElementaryTypeName","src":"28087:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28086:14:33"},"returnParameters":{"id":8429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8428,"mutability":"mutable","name":"downcasted","nameLocation":"28130:10:33","nodeType":"VariableDeclaration","scope":8448,"src":"28124:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"},"typeName":{"id":8427,"name":"int96","nodeType":"ElementaryTypeName","src":"28124:5:33","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"visibility":"internal"}],"src":"28123:18:33"},"scope":8765,"src":"28070:220:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8473,"nodeType":"Block","src":"28680:148:33","statements":[{"expression":{"id":8461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8456,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8454,"src":"28690:10:33","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8459,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8451,"src":"28709:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8458,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28703:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":8457,"name":"int88","nodeType":"ElementaryTypeName","src":"28703:5:33","typeDescriptions":{}}},"id":8460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28703:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"28690:25:33","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"id":8462,"nodeType":"ExpressionStatement","src":"28690:25:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8463,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8454,"src":"28729:10:33","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8464,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8451,"src":"28743:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28729:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8472,"nodeType":"IfStatement","src":"28725:97:33","trueBody":{"id":8471,"nodeType":"Block","src":"28750:72:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":8467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28801:2:33","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":8468,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8451,"src":"28805:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8466,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"28771:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28771:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8470,"nodeType":"RevertStatement","src":"28764:47:33"}]}}]},"documentation":{"id":8449,"nodeType":"StructuredDocumentation","src":"28296:307:33","text":" @dev Returns the downcasted int88 from int256, reverting on\n overflow (when the input is less than smallest int88 or\n greater than largest int88).\n Counterpart to Solidity's `int88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":8474,"implemented":true,"kind":"function","modifiers":[],"name":"toInt88","nameLocation":"28617:7:33","nodeType":"FunctionDefinition","parameters":{"id":8452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8451,"mutability":"mutable","name":"value","nameLocation":"28632:5:33","nodeType":"VariableDeclaration","scope":8474,"src":"28625:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8450,"name":"int256","nodeType":"ElementaryTypeName","src":"28625:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28624:14:33"},"returnParameters":{"id":8455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8454,"mutability":"mutable","name":"downcasted","nameLocation":"28668:10:33","nodeType":"VariableDeclaration","scope":8474,"src":"28662:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"},"typeName":{"id":8453,"name":"int88","nodeType":"ElementaryTypeName","src":"28662:5:33","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"visibility":"internal"}],"src":"28661:18:33"},"scope":8765,"src":"28608:220:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8499,"nodeType":"Block","src":"29218:148:33","statements":[{"expression":{"id":8487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8482,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8480,"src":"29228:10:33","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8477,"src":"29247:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29241:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":8483,"name":"int80","nodeType":"ElementaryTypeName","src":"29241:5:33","typeDescriptions":{}}},"id":8486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29241:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"29228:25:33","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"id":8488,"nodeType":"ExpressionStatement","src":"29228:25:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8489,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8480,"src":"29267:10:33","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8477,"src":"29281:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29267:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8498,"nodeType":"IfStatement","src":"29263:97:33","trueBody":{"id":8497,"nodeType":"Block","src":"29288:72:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":8493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29339:2:33","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":8494,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8477,"src":"29343:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8492,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"29309:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29309:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8496,"nodeType":"RevertStatement","src":"29302:47:33"}]}}]},"documentation":{"id":8475,"nodeType":"StructuredDocumentation","src":"28834:307:33","text":" @dev Returns the downcasted int80 from int256, reverting on\n overflow (when the input is less than smallest int80 or\n greater than largest int80).\n Counterpart to Solidity's `int80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":8500,"implemented":true,"kind":"function","modifiers":[],"name":"toInt80","nameLocation":"29155:7:33","nodeType":"FunctionDefinition","parameters":{"id":8478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8477,"mutability":"mutable","name":"value","nameLocation":"29170:5:33","nodeType":"VariableDeclaration","scope":8500,"src":"29163:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8476,"name":"int256","nodeType":"ElementaryTypeName","src":"29163:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29162:14:33"},"returnParameters":{"id":8481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8480,"mutability":"mutable","name":"downcasted","nameLocation":"29206:10:33","nodeType":"VariableDeclaration","scope":8500,"src":"29200:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"},"typeName":{"id":8479,"name":"int80","nodeType":"ElementaryTypeName","src":"29200:5:33","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"visibility":"internal"}],"src":"29199:18:33"},"scope":8765,"src":"29146:220:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8525,"nodeType":"Block","src":"29756:148:33","statements":[{"expression":{"id":8513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8508,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8506,"src":"29766:10:33","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8511,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8503,"src":"29785:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29779:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":8509,"name":"int72","nodeType":"ElementaryTypeName","src":"29779:5:33","typeDescriptions":{}}},"id":8512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29779:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"29766:25:33","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"id":8514,"nodeType":"ExpressionStatement","src":"29766:25:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8515,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8506,"src":"29805:10:33","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8516,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8503,"src":"29819:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29805:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8524,"nodeType":"IfStatement","src":"29801:97:33","trueBody":{"id":8523,"nodeType":"Block","src":"29826:72:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":8519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29877:2:33","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":8520,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8503,"src":"29881:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8518,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"29847:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29847:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8522,"nodeType":"RevertStatement","src":"29840:47:33"}]}}]},"documentation":{"id":8501,"nodeType":"StructuredDocumentation","src":"29372:307:33","text":" @dev Returns the downcasted int72 from int256, reverting on\n overflow (when the input is less than smallest int72 or\n greater than largest int72).\n Counterpart to Solidity's `int72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":8526,"implemented":true,"kind":"function","modifiers":[],"name":"toInt72","nameLocation":"29693:7:33","nodeType":"FunctionDefinition","parameters":{"id":8504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8503,"mutability":"mutable","name":"value","nameLocation":"29708:5:33","nodeType":"VariableDeclaration","scope":8526,"src":"29701:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8502,"name":"int256","nodeType":"ElementaryTypeName","src":"29701:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29700:14:33"},"returnParameters":{"id":8507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8506,"mutability":"mutable","name":"downcasted","nameLocation":"29744:10:33","nodeType":"VariableDeclaration","scope":8526,"src":"29738:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"},"typeName":{"id":8505,"name":"int72","nodeType":"ElementaryTypeName","src":"29738:5:33","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"visibility":"internal"}],"src":"29737:18:33"},"scope":8765,"src":"29684:220:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8551,"nodeType":"Block","src":"30294:148:33","statements":[{"expression":{"id":8539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8534,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8532,"src":"30304:10:33","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8537,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8529,"src":"30323:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30317:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":8535,"name":"int64","nodeType":"ElementaryTypeName","src":"30317:5:33","typeDescriptions":{}}},"id":8538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30317:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"30304:25:33","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"id":8540,"nodeType":"ExpressionStatement","src":"30304:25:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8541,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8532,"src":"30343:10:33","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8542,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8529,"src":"30357:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30343:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8550,"nodeType":"IfStatement","src":"30339:97:33","trueBody":{"id":8549,"nodeType":"Block","src":"30364:72:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":8545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30415:2:33","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":8546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8529,"src":"30419:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8544,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"30385:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30385:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8548,"nodeType":"RevertStatement","src":"30378:47:33"}]}}]},"documentation":{"id":8527,"nodeType":"StructuredDocumentation","src":"29910:307:33","text":" @dev Returns the downcasted int64 from int256, reverting on\n overflow (when the input is less than smallest int64 or\n greater than largest int64).\n Counterpart to Solidity's `int64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":8552,"implemented":true,"kind":"function","modifiers":[],"name":"toInt64","nameLocation":"30231:7:33","nodeType":"FunctionDefinition","parameters":{"id":8530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8529,"mutability":"mutable","name":"value","nameLocation":"30246:5:33","nodeType":"VariableDeclaration","scope":8552,"src":"30239:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8528,"name":"int256","nodeType":"ElementaryTypeName","src":"30239:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30238:14:33"},"returnParameters":{"id":8533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8532,"mutability":"mutable","name":"downcasted","nameLocation":"30282:10:33","nodeType":"VariableDeclaration","scope":8552,"src":"30276:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":8531,"name":"int64","nodeType":"ElementaryTypeName","src":"30276:5:33","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"30275:18:33"},"scope":8765,"src":"30222:220:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8577,"nodeType":"Block","src":"30832:148:33","statements":[{"expression":{"id":8565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8560,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8558,"src":"30842:10:33","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8563,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8555,"src":"30861:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30855:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":8561,"name":"int56","nodeType":"ElementaryTypeName","src":"30855:5:33","typeDescriptions":{}}},"id":8564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30855:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"30842:25:33","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":8566,"nodeType":"ExpressionStatement","src":"30842:25:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8567,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8558,"src":"30881:10:33","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8568,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8555,"src":"30895:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30881:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8576,"nodeType":"IfStatement","src":"30877:97:33","trueBody":{"id":8575,"nodeType":"Block","src":"30902:72:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":8571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30953:2:33","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":8572,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8555,"src":"30957:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8570,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"30923:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30923:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8574,"nodeType":"RevertStatement","src":"30916:47:33"}]}}]},"documentation":{"id":8553,"nodeType":"StructuredDocumentation","src":"30448:307:33","text":" @dev Returns the downcasted int56 from int256, reverting on\n overflow (when the input is less than smallest int56 or\n greater than largest int56).\n Counterpart to Solidity's `int56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":8578,"implemented":true,"kind":"function","modifiers":[],"name":"toInt56","nameLocation":"30769:7:33","nodeType":"FunctionDefinition","parameters":{"id":8556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8555,"mutability":"mutable","name":"value","nameLocation":"30784:5:33","nodeType":"VariableDeclaration","scope":8578,"src":"30777:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8554,"name":"int256","nodeType":"ElementaryTypeName","src":"30777:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30776:14:33"},"returnParameters":{"id":8559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8558,"mutability":"mutable","name":"downcasted","nameLocation":"30820:10:33","nodeType":"VariableDeclaration","scope":8578,"src":"30814:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":8557,"name":"int56","nodeType":"ElementaryTypeName","src":"30814:5:33","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"src":"30813:18:33"},"scope":8765,"src":"30760:220:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8603,"nodeType":"Block","src":"31370:148:33","statements":[{"expression":{"id":8591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8586,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8584,"src":"31380:10:33","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8589,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8581,"src":"31399:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31393:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":8587,"name":"int48","nodeType":"ElementaryTypeName","src":"31393:5:33","typeDescriptions":{}}},"id":8590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31393:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"31380:25:33","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"id":8592,"nodeType":"ExpressionStatement","src":"31380:25:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8593,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8584,"src":"31419:10:33","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8594,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8581,"src":"31433:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31419:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8602,"nodeType":"IfStatement","src":"31415:97:33","trueBody":{"id":8601,"nodeType":"Block","src":"31440:72:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":8597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31491:2:33","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":8598,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8581,"src":"31495:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8596,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"31461:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31461:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8600,"nodeType":"RevertStatement","src":"31454:47:33"}]}}]},"documentation":{"id":8579,"nodeType":"StructuredDocumentation","src":"30986:307:33","text":" @dev Returns the downcasted int48 from int256, reverting on\n overflow (when the input is less than smallest int48 or\n greater than largest int48).\n Counterpart to Solidity's `int48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":8604,"implemented":true,"kind":"function","modifiers":[],"name":"toInt48","nameLocation":"31307:7:33","nodeType":"FunctionDefinition","parameters":{"id":8582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8581,"mutability":"mutable","name":"value","nameLocation":"31322:5:33","nodeType":"VariableDeclaration","scope":8604,"src":"31315:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8580,"name":"int256","nodeType":"ElementaryTypeName","src":"31315:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31314:14:33"},"returnParameters":{"id":8585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8584,"mutability":"mutable","name":"downcasted","nameLocation":"31358:10:33","nodeType":"VariableDeclaration","scope":8604,"src":"31352:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"},"typeName":{"id":8583,"name":"int48","nodeType":"ElementaryTypeName","src":"31352:5:33","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"visibility":"internal"}],"src":"31351:18:33"},"scope":8765,"src":"31298:220:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8629,"nodeType":"Block","src":"31908:148:33","statements":[{"expression":{"id":8617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8612,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8610,"src":"31918:10:33","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8615,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8607,"src":"31937:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31931:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":8613,"name":"int40","nodeType":"ElementaryTypeName","src":"31931:5:33","typeDescriptions":{}}},"id":8616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31931:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"31918:25:33","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"id":8618,"nodeType":"ExpressionStatement","src":"31918:25:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8619,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8610,"src":"31957:10:33","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8620,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8607,"src":"31971:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31957:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8628,"nodeType":"IfStatement","src":"31953:97:33","trueBody":{"id":8627,"nodeType":"Block","src":"31978:72:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":8623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32029:2:33","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":8624,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8607,"src":"32033:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8622,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"31999:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31999:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8626,"nodeType":"RevertStatement","src":"31992:47:33"}]}}]},"documentation":{"id":8605,"nodeType":"StructuredDocumentation","src":"31524:307:33","text":" @dev Returns the downcasted int40 from int256, reverting on\n overflow (when the input is less than smallest int40 or\n greater than largest int40).\n Counterpart to Solidity's `int40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":8630,"implemented":true,"kind":"function","modifiers":[],"name":"toInt40","nameLocation":"31845:7:33","nodeType":"FunctionDefinition","parameters":{"id":8608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8607,"mutability":"mutable","name":"value","nameLocation":"31860:5:33","nodeType":"VariableDeclaration","scope":8630,"src":"31853:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8606,"name":"int256","nodeType":"ElementaryTypeName","src":"31853:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31852:14:33"},"returnParameters":{"id":8611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8610,"mutability":"mutable","name":"downcasted","nameLocation":"31896:10:33","nodeType":"VariableDeclaration","scope":8630,"src":"31890:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"},"typeName":{"id":8609,"name":"int40","nodeType":"ElementaryTypeName","src":"31890:5:33","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"visibility":"internal"}],"src":"31889:18:33"},"scope":8765,"src":"31836:220:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8655,"nodeType":"Block","src":"32446:148:33","statements":[{"expression":{"id":8643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8638,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8636,"src":"32456:10:33","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8641,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8633,"src":"32475:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32469:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":8639,"name":"int32","nodeType":"ElementaryTypeName","src":"32469:5:33","typeDescriptions":{}}},"id":8642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32469:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"32456:25:33","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":8644,"nodeType":"ExpressionStatement","src":"32456:25:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8645,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8636,"src":"32495:10:33","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8633,"src":"32509:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32495:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8654,"nodeType":"IfStatement","src":"32491:97:33","trueBody":{"id":8653,"nodeType":"Block","src":"32516:72:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":8649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32567:2:33","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":8650,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8633,"src":"32571:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8648,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"32537:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32537:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8652,"nodeType":"RevertStatement","src":"32530:47:33"}]}}]},"documentation":{"id":8631,"nodeType":"StructuredDocumentation","src":"32062:307:33","text":" @dev Returns the downcasted int32 from int256, reverting on\n overflow (when the input is less than smallest int32 or\n greater than largest int32).\n Counterpart to Solidity's `int32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":8656,"implemented":true,"kind":"function","modifiers":[],"name":"toInt32","nameLocation":"32383:7:33","nodeType":"FunctionDefinition","parameters":{"id":8634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8633,"mutability":"mutable","name":"value","nameLocation":"32398:5:33","nodeType":"VariableDeclaration","scope":8656,"src":"32391:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8632,"name":"int256","nodeType":"ElementaryTypeName","src":"32391:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32390:14:33"},"returnParameters":{"id":8637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8636,"mutability":"mutable","name":"downcasted","nameLocation":"32434:10:33","nodeType":"VariableDeclaration","scope":8656,"src":"32428:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":8635,"name":"int32","nodeType":"ElementaryTypeName","src":"32428:5:33","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"}],"src":"32427:18:33"},"scope":8765,"src":"32374:220:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8681,"nodeType":"Block","src":"32984:148:33","statements":[{"expression":{"id":8669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8664,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8662,"src":"32994:10:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8667,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8659,"src":"33013:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33007:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":8665,"name":"int24","nodeType":"ElementaryTypeName","src":"33007:5:33","typeDescriptions":{}}},"id":8668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33007:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"32994:25:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":8670,"nodeType":"ExpressionStatement","src":"32994:25:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8671,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8662,"src":"33033:10:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8672,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8659,"src":"33047:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33033:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8680,"nodeType":"IfStatement","src":"33029:97:33","trueBody":{"id":8679,"nodeType":"Block","src":"33054:72:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":8675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33105:2:33","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":8676,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8659,"src":"33109:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8674,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"33075:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33075:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8678,"nodeType":"RevertStatement","src":"33068:47:33"}]}}]},"documentation":{"id":8657,"nodeType":"StructuredDocumentation","src":"32600:307:33","text":" @dev Returns the downcasted int24 from int256, reverting on\n overflow (when the input is less than smallest int24 or\n greater than largest int24).\n Counterpart to Solidity's `int24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":8682,"implemented":true,"kind":"function","modifiers":[],"name":"toInt24","nameLocation":"32921:7:33","nodeType":"FunctionDefinition","parameters":{"id":8660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8659,"mutability":"mutable","name":"value","nameLocation":"32936:5:33","nodeType":"VariableDeclaration","scope":8682,"src":"32929:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8658,"name":"int256","nodeType":"ElementaryTypeName","src":"32929:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32928:14:33"},"returnParameters":{"id":8663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8662,"mutability":"mutable","name":"downcasted","nameLocation":"32972:10:33","nodeType":"VariableDeclaration","scope":8682,"src":"32966:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":8661,"name":"int24","nodeType":"ElementaryTypeName","src":"32966:5:33","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"32965:18:33"},"scope":8765,"src":"32912:220:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8707,"nodeType":"Block","src":"33522:148:33","statements":[{"expression":{"id":8695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8690,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8688,"src":"33532:10:33","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8685,"src":"33551:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8692,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33545:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":8691,"name":"int16","nodeType":"ElementaryTypeName","src":"33545:5:33","typeDescriptions":{}}},"id":8694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33545:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"33532:25:33","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":8696,"nodeType":"ExpressionStatement","src":"33532:25:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8697,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8688,"src":"33571:10:33","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8698,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8685,"src":"33585:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33571:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8706,"nodeType":"IfStatement","src":"33567:97:33","trueBody":{"id":8705,"nodeType":"Block","src":"33592:72:33","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":8701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33643:2:33","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":8702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8685,"src":"33647:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8700,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"33613:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33613:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8704,"nodeType":"RevertStatement","src":"33606:47:33"}]}}]},"documentation":{"id":8683,"nodeType":"StructuredDocumentation","src":"33138:307:33","text":" @dev Returns the downcasted int16 from int256, reverting on\n overflow (when the input is less than smallest int16 or\n greater than largest int16).\n Counterpart to Solidity's `int16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":8708,"implemented":true,"kind":"function","modifiers":[],"name":"toInt16","nameLocation":"33459:7:33","nodeType":"FunctionDefinition","parameters":{"id":8686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8685,"mutability":"mutable","name":"value","nameLocation":"33474:5:33","nodeType":"VariableDeclaration","scope":8708,"src":"33467:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8684,"name":"int256","nodeType":"ElementaryTypeName","src":"33467:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33466:14:33"},"returnParameters":{"id":8689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8688,"mutability":"mutable","name":"downcasted","nameLocation":"33510:10:33","nodeType":"VariableDeclaration","scope":8708,"src":"33504:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":8687,"name":"int16","nodeType":"ElementaryTypeName","src":"33504:5:33","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"33503:18:33"},"scope":8765,"src":"33450:220:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8733,"nodeType":"Block","src":"34053:146:33","statements":[{"expression":{"id":8721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8716,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8714,"src":"34063:10:33","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8719,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8711,"src":"34081:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8718,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34076:4:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":8717,"name":"int8","nodeType":"ElementaryTypeName","src":"34076:4:33","typeDescriptions":{}}},"id":8720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34076:11:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"34063:24:33","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"id":8722,"nodeType":"ExpressionStatement","src":"34063:24:33"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8723,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8714,"src":"34101:10:33","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8724,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8711,"src":"34115:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"34101:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8732,"nodeType":"IfStatement","src":"34097:96:33","trueBody":{"id":8731,"nodeType":"Block","src":"34122:71:33","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":8727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34173:1:33","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":8728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8711,"src":"34176:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8726,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7032,"src":"34143:29:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34143:39:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8730,"nodeType":"RevertStatement","src":"34136:46:33"}]}}]},"documentation":{"id":8709,"nodeType":"StructuredDocumentation","src":"33676:302:33","text":" @dev Returns the downcasted int8 from int256, reverting on\n overflow (when the input is less than smallest int8 or\n greater than largest int8).\n Counterpart to Solidity's `int8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":8734,"implemented":true,"kind":"function","modifiers":[],"name":"toInt8","nameLocation":"33992:6:33","nodeType":"FunctionDefinition","parameters":{"id":8712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8711,"mutability":"mutable","name":"value","nameLocation":"34006:5:33","nodeType":"VariableDeclaration","scope":8734,"src":"33999:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8710,"name":"int256","nodeType":"ElementaryTypeName","src":"33999:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33998:14:33"},"returnParameters":{"id":8715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8714,"mutability":"mutable","name":"downcasted","nameLocation":"34041:10:33","nodeType":"VariableDeclaration","scope":8734,"src":"34036:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"},"typeName":{"id":8713,"name":"int8","nodeType":"ElementaryTypeName","src":"34036:4:33","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"visibility":"internal"}],"src":"34035:17:33"},"scope":8765,"src":"33983:216:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8763,"nodeType":"Block","src":"34439:250:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8742,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8737,"src":"34552:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":8747,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34573:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":8746,"name":"int256","nodeType":"ElementaryTypeName","src":"34573:6:33","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":8745,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"34568:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":8748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34568:12:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":8749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34581:3:33","memberName":"max","nodeType":"MemberAccess","src":"34568:16:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34560:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":8743,"name":"uint256","nodeType":"ElementaryTypeName","src":"34560:7:33","typeDescriptions":{}}},"id":8750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34560:25:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34552:33:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8757,"nodeType":"IfStatement","src":"34548:105:33","trueBody":{"id":8756,"nodeType":"Block","src":"34587:66:33","statements":[{"errorCall":{"arguments":[{"id":8753,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8737,"src":"34636:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8752,"name":"SafeCastOverflowedUintToInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7037,"src":"34608:27:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":8754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34608:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8755,"nodeType":"RevertStatement","src":"34601:41:33"}]}},{"expression":{"arguments":[{"id":8760,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8737,"src":"34676:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8759,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34669:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":8758,"name":"int256","nodeType":"ElementaryTypeName","src":"34669:6:33","typeDescriptions":{}}},"id":8761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34669:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":8741,"id":8762,"nodeType":"Return","src":"34662:20:33"}]},"documentation":{"id":8735,"nodeType":"StructuredDocumentation","src":"34205:165:33","text":" @dev Converts an unsigned uint256 into a signed int256.\n Requirements:\n - input must be less than or equal to maxInt256."},"id":8764,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nameLocation":"34384:8:33","nodeType":"FunctionDefinition","parameters":{"id":8738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8737,"mutability":"mutable","name":"value","nameLocation":"34401:5:33","nodeType":"VariableDeclaration","scope":8764,"src":"34393:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8736,"name":"uint256","nodeType":"ElementaryTypeName","src":"34393:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34392:15:33"},"returnParameters":{"id":8741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8764,"src":"34431:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8739,"name":"int256","nodeType":"ElementaryTypeName","src":"34431:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34430:8:33"},"scope":8765,"src":"34375:314:33","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":8766,"src":"764:33927:33","usedErrors":[7020,7025,7032,7037],"usedEvents":[]}],"src":"192:34500:33"},"id":33},"contracts/BalancerContractRegistry.sol":{"ast":{"absolutePath":"contracts/BalancerContractRegistry.sol","exportedSymbols":{"BalancerContractRegistry":[9326],"ContractType":[33],"IBalancerContractRegistry":[202],"IVault":[1392],"SingletonAuthentication":[5483]},"id":9327,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":8767,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:34"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/standalone-utils/IBalancerContractRegistry.sol","file":"@balancer-labs/v3-interfaces/contracts/standalone-utils/IBalancerContractRegistry.sol","id":8770,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9327,"sourceUnit":203,"src":"72:152:34","symbolAliases":[{"foreign":{"id":8768,"name":"IBalancerContractRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"85:25:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":8769,"name":"ContractType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"116:12:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","id":8772,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9327,"sourceUnit":1393,"src":"225:81:34","symbolAliases":[{"foreign":{"id":8771,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"234:6:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol","file":"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol","id":8774,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9327,"sourceUnit":5484,"src":"308:104:34","symbolAliases":[{"foreign":{"id":8773,"name":"SingletonAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5483,"src":"317:23:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":8776,"name":"IBalancerContractRegistry","nameLocations":["2778:25:34"],"nodeType":"IdentifierPath","referencedDeclaration":202,"src":"2778:25:34"},"id":8777,"nodeType":"InheritanceSpecifier","src":"2778:25:34"},{"baseName":{"id":8778,"name":"SingletonAuthentication","nameLocations":["2805:23:34"],"nodeType":"IdentifierPath","referencedDeclaration":5483,"src":"2805:23:34"},"id":8779,"nodeType":"InheritanceSpecifier","src":"2805:23:34"}],"canonicalName":"BalancerContractRegistry","contractDependencies":[],"contractKind":"contract","documentation":{"id":8775,"nodeType":"StructuredDocumentation","src":"414:2326:34","text":" @notice On-chain registry of standard Balancer contracts.\n @dev Maintain a registry of official Balancer Factories, Routers, Hooks, and valid ERC4626 tokens, for two main\n purposes. The first is to support the many instances where we need to know that a contract is \"trusted\" (i.e.,\n is safe and behaves in the required manner). For instance, some hooks depend critically on the identity of the\n msg.sender, which must be passed down through the Router. Since Routers are permissionless, a malicious one could\n spoof the sender and \"fool\" the hook. The hook must therefore \"trust\" the Router.\n It is also important for the front-end to know when a particular wrapped token should be used with buffers. Not all\n \"ERC4626\" wrapped tokens are fully conforming, and buffer operations with non-conforming tokens may fail in various\n unexpected ways. It is not enough to simply check whether a buffer exists (e.g., by calling `getBufferAsset`),\n since best practice is for the pool creator to initialize buffers for all such tokens regardless. They are\n permissionless, and could otherwise be initialized by anyone in unexpected ways. This registry could be used to\n keep track of \"known good\" buffers, such that `isActiveBalancerContract(ContractType.ERC4626, <address>)` returns\n true for fully-compliant tokens with properly initialized buffers.\n Current solutions involve passing in the address of the trusted Router on deployment: but what if it needs to\n support multiple Routers? Or if the Router is deprecated and replaced? Instead, we can pass the registry address,\n and query this contract to determine whether the Router is a \"trusted\" one.\n The second use case is for off-chain queries, or other protocols that need to easily determine, say, the \"latest\"\n Weighted Pool Factory. This contract provides `isActiveBalancerContract(type, address)` for the first case, and\n `getBalancerContract(type, name)` for the second. It is also possible to query all known information about an\n address, using `getBalancerContractInfo(address)`, which returns a struct with the detailed state.\n Note that the `SingletonAuthentication` base contract provides `getVault`, so it is also possible to ask this\n contract for the Vault address, so it doesn't need to be a type."},"fullyImplemented":true,"id":9326,"linearizedBaseContracts":[9326,5483,3232,14,202],"name":"BalancerContractRegistry","nameLocation":"2750:24:34","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8783,"mutability":"mutable","name":"_contractRegistry","nameLocation":"3006:17:34","nodeType":"VariableDeclaration","scope":9326,"src":"2954:69:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"},"typeName":{"id":8782,"keyName":"contractId","keyNameLocation":"2970:10:34","keyType":{"id":8780,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2962:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2954:43:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"},"valueName":"addr","valueNameLocation":"2992:4:34","valueType":{"id":8781,"name":"address","nodeType":"ElementaryTypeName","src":"2984:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":8788,"mutability":"mutable","name":"_contractInfo","nameLocation":"3891:13:34","nodeType":"VariableDeclaration","scope":9326,"src":"3840:64:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo)"},"typeName":{"id":8787,"keyName":"addr","keyNameLocation":"3856:4:34","keyType":{"id":8784,"name":"address","nodeType":"ElementaryTypeName","src":"3848:7:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3840:42:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo)"},"valueName":"info","valueNameLocation":"3877:4:34","valueType":{"id":8786,"nodeType":"UserDefinedTypeName","pathNode":{"id":8785,"name":"ContractInfo","nameLocations":["3864:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":42,"src":"3864:12:34"},"referencedDeclaration":42,"src":"3864:12:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"}}},"visibility":"private"},{"constant":false,"id":8792,"mutability":"mutable","name":"_contractAliases","nameLocation":"4259:16:34","nodeType":"VariableDeclaration","scope":9326,"src":"4202:73:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"},"typeName":{"id":8791,"keyName":"contractAliasId","keyNameLocation":"4218:15:34","keyType":{"id":8789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4210:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"4202:48:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"},"valueName":"addr","valueNameLocation":"4245:4:34","valueType":{"id":8790,"name":"address","nodeType":"ElementaryTypeName","src":"4237:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"documentation":{"id":8793,"nodeType":"StructuredDocumentation","src":"4282:306:34","text":" @notice A `_contractRegistry` entry has no corresponding `_contractInfo`.\n @dev This should never happen.\n @param contractName The name of the contract that has a registry entry but no contract info\n @param contractAddress The address of the contract with missing state"},"errorSelector":"36a7ac0a","id":8799,"name":"InconsistentState","nameLocation":"4599:17:34","nodeType":"ErrorDefinition","parameters":{"id":8798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8795,"mutability":"mutable","name":"contractName","nameLocation":"4624:12:34","nodeType":"VariableDeclaration","scope":8799,"src":"4617:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8794,"name":"string","nodeType":"ElementaryTypeName","src":"4617:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":8797,"mutability":"mutable","name":"contractAddress","nameLocation":"4646:15:34","nodeType":"VariableDeclaration","scope":8799,"src":"4638:23:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8796,"name":"address","nodeType":"ElementaryTypeName","src":"4638:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4616:46:34"},"src":"4593:70:34"},{"body":{"id":8808,"nodeType":"Block","src":"4726:64:34","statements":[]},"id":8809,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":8805,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8802,"src":"4719:5:34","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}}],"id":8806,"kind":"baseConstructorSpecifier","modifierName":{"id":8804,"name":"SingletonAuthentication","nameLocations":["4695:23:34"],"nodeType":"IdentifierPath","referencedDeclaration":5483,"src":"4695:23:34"},"nodeType":"ModifierInvocation","src":"4695:30:34"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":8803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8802,"mutability":"mutable","name":"vault","nameLocation":"4688:5:34","nodeType":"VariableDeclaration","scope":8809,"src":"4681:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"},"typeName":{"id":8801,"nodeType":"UserDefinedTypeName","pathNode":{"id":8800,"name":"IVault","nameLocations":["4681:6:34"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"4681:6:34"},"referencedDeclaration":1392,"src":"4681:6:34","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"visibility":"internal"}],"src":"4680:14:34"},"returnParameters":{"id":8807,"nodeType":"ParameterList","parameters":[],"src":"4726:0:34"},"scope":9326,"src":"4669:121:34","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[140],"body":{"id":8935,"nodeType":"Block","src":"7250:1696:34","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8822,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8817,"src":"7303:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7330:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7322:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8823,"name":"address","nodeType":"ElementaryTypeName","src":"7322:7:34","typeDescriptions":{}}},"id":8826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7322:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7303:29:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8832,"nodeType":"IfStatement","src":"7299:88:34","trueBody":{"id":8831,"nodeType":"Block","src":"7334:53:34","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8828,"name":"ZeroContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"7355:19:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":8829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8830,"nodeType":"RevertStatement","src":"7348:28:34"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":8835,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8815,"src":"7407:12:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8834,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7401:5:34","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":8833,"name":"bytes","nodeType":"ElementaryTypeName","src":"7401:5:34","typeDescriptions":{}}},"id":8836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7401:19:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":8837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7421:6:34","memberName":"length","nodeType":"MemberAccess","src":"7401:26:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7431:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7401:31:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8844,"nodeType":"IfStatement","src":"7397:90:34","trueBody":{"id":8843,"nodeType":"Block","src":"7434:53:34","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8840,"name":"InvalidContractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"7455:19:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":8841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7455:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8842,"nodeType":"RevertStatement","src":"7448:28:34"}]}},{"assignments":[8847],"declarations":[{"constant":false,"id":8847,"mutability":"mutable","name":"info","nameLocation":"7565:4:34","nodeType":"VariableDeclaration","scope":8935,"src":"7545:24:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"},"typeName":{"id":8846,"nodeType":"UserDefinedTypeName","pathNode":{"id":8845,"name":"ContractInfo","nameLocations":["7545:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":42,"src":"7545:12:34"},"referencedDeclaration":42,"src":"7545:12:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"}},"visibility":"internal"}],"id":8851,"initialValue":{"baseExpression":{"id":8848,"name":"_contractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8788,"src":"7572:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo storage ref)"}},"id":8850,"indexExpression":{"id":8849,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8817,"src":"7586:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7572:30:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7545:57:34"},{"condition":{"expression":{"id":8852,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8847,"src":"7616:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":8853,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7621:12:34","memberName":"isRegistered","nodeType":"MemberAccess","referencedDeclaration":39,"src":"7616:17:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8861,"nodeType":"IfStatement","src":"7612:123:34","trueBody":{"id":8860,"nodeType":"Block","src":"7635:100:34","statements":[{"errorCall":{"arguments":[{"expression":{"id":8855,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8847,"src":"7689:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":8856,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7694:12:34","memberName":"contractType","nodeType":"MemberAccess","referencedDeclaration":37,"src":"7689:17:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},{"id":8857,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8817,"src":"7708:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},{"typeIdentifier":"t_address","typeString":"address"}],"id":8854,"name":"ContractAddressAlreadyRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"7656:32:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_enum$_ContractType_$33_$_t_address_$returns$_t_error_$","typeString":"function (enum ContractType,address) pure returns (error)"}},"id":8858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7656:68:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8859,"nodeType":"RevertStatement","src":"7649:75:34"}]}},{"assignments":[8863],"declarations":[{"constant":false,"id":8863,"mutability":"mutable","name":"contractId","nameLocation":"7828:10:34","nodeType":"VariableDeclaration","scope":8935,"src":"7820:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":8862,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7820:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":8867,"initialValue":{"arguments":[{"id":8865,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8815,"src":"7856:12:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8864,"name":"_getContractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9325,"src":"7841:14:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_bytes32_$","typeString":"function (string memory) pure returns (bytes32)"}},"id":8866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7841:28:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7820:49:34"},{"assignments":[8869],"declarations":[{"constant":false,"id":8869,"mutability":"mutable","name":"existingRegistryAddress","nameLocation":"7887:23:34","nodeType":"VariableDeclaration","scope":8935,"src":"7879:31:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8868,"name":"address","nodeType":"ElementaryTypeName","src":"7879:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":8873,"initialValue":{"baseExpression":{"id":8870,"name":"_contractRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8783,"src":"7913:17:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":8872,"indexExpression":{"id":8871,"name":"contractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8863,"src":"7931:10:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7913:29:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7879:63:34"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8874,"name":"existingRegistryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8869,"src":"7956:23:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":8877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7991:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8876,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7983:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8875,"name":"address","nodeType":"ElementaryTypeName","src":"7983:7:34","typeDescriptions":{}}},"id":8878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7983:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7956:37:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8893,"nodeType":"IfStatement","src":"7952:197:34","trueBody":{"id":8892,"nodeType":"Block","src":"7995:154:34","statements":[{"expression":{"id":8884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8880,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8847,"src":"8009:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":8881,"name":"_contractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8788,"src":"8016:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo storage ref)"}},"id":8883,"indexExpression":{"id":8882,"name":"existingRegistryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8869,"src":"8030:23:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8016:38:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"src":"8009:45:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":8885,"nodeType":"ExpressionStatement","src":"8009:45:34"},{"errorCall":{"arguments":[{"expression":{"id":8887,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8847,"src":"8106:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":8888,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8111:12:34","memberName":"contractType","nodeType":"MemberAccess","referencedDeclaration":37,"src":"8106:17:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},{"id":8889,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8815,"src":"8125:12:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8886,"name":"ContractNameAlreadyRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"8076:29:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_enum$_ContractType_$33_$_t_string_memory_ptr_$returns$_t_error_$","typeString":"function (enum ContractType,string memory) pure returns (error)"}},"id":8890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8076:62:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8891,"nodeType":"RevertStatement","src":"8069:69:34"}]}},{"assignments":[8895],"declarations":[{"constant":false,"id":8895,"mutability":"mutable","name":"existingAliasAddress","nameLocation":"8222:20:34","nodeType":"VariableDeclaration","scope":8935,"src":"8214:28:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8894,"name":"address","nodeType":"ElementaryTypeName","src":"8214:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":8899,"initialValue":{"baseExpression":{"id":8896,"name":"_contractAliases","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8792,"src":"8245:16:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":8898,"indexExpression":{"id":8897,"name":"contractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8863,"src":"8262:10:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8245:28:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8214:59:34"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8900,"name":"existingAliasAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8895,"src":"8287:20:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":8903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8319:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8311:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8901,"name":"address","nodeType":"ElementaryTypeName","src":"8311:7:34","typeDescriptions":{}}},"id":8904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8311:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8287:34:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8912,"nodeType":"IfStatement","src":"8283:132:34","trueBody":{"id":8911,"nodeType":"Block","src":"8323:92:34","statements":[{"errorCall":{"arguments":[{"id":8907,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8815,"src":"8369:12:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":8908,"name":"existingAliasAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8895,"src":"8383:20:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":8906,"name":"ContractNameInUseAsAlias","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"8344:24:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$_t_address_$returns$_t_error_$","typeString":"function (string memory,address) pure returns (error)"}},"id":8909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8344:60:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8910,"nodeType":"RevertStatement","src":"8337:67:34"}]}},{"expression":{"id":8917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":8913,"name":"_contractRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8783,"src":"8494:17:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":8915,"indexExpression":{"id":8914,"name":"contractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8863,"src":"8512:10:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8494:29:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8916,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8817,"src":"8526:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8494:47:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8918,"nodeType":"ExpressionStatement","src":"8494:47:34"},{"expression":{"id":8927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":8919,"name":"_contractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8788,"src":"8695:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo storage ref)"}},"id":8921,"indexExpression":{"id":8920,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8817,"src":"8709:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8695:30:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8923,"name":"contractType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8813,"src":"8769:12:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},{"hexValue":"74727565","id":8924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8809:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"74727565","id":8925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8837:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":8922,"name":"ContractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"8728:12:34","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ContractInfo_$42_storage_ptr_$","typeString":"type(struct IBalancerContractRegistry.ContractInfo storage pointer)"}},"id":8926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["8755:12:34","8795:12:34","8827:8:34"],"names":["contractType","isRegistered","isActive"],"nodeType":"FunctionCall","src":"8728:124:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"src":"8695:157:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"id":8928,"nodeType":"ExpressionStatement","src":"8695:157:34"},{"eventCall":{"arguments":[{"id":8930,"name":"contractType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8813,"src":"8895:12:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},{"id":8931,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8815,"src":"8909:12:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":8932,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8817,"src":"8923:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":8929,"name":"BalancerContractRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52,"src":"8868:26:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_enum$_ContractType_$33_$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (enum ContractType,string memory,address)"}},"id":8933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8868:71:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8934,"nodeType":"EmitStatement","src":"8863:76:34"}]},"documentation":{"id":8810,"nodeType":"StructuredDocumentation","src":"7038:41:34","text":"@inheritdoc IBalancerContractRegistry"},"functionSelector":"e0376ab4","id":8936,"implemented":true,"kind":"function","modifiers":[{"id":8820,"kind":"modifierInvocation","modifierName":{"id":8819,"name":"authenticate","nameLocations":["7237:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":3180,"src":"7237:12:34"},"nodeType":"ModifierInvocation","src":"7237:12:34"}],"name":"registerBalancerContract","nameLocation":"7093:24:34","nodeType":"FunctionDefinition","parameters":{"id":8818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8813,"mutability":"mutable","name":"contractType","nameLocation":"7140:12:34","nodeType":"VariableDeclaration","scope":8936,"src":"7127:25:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":8812,"nodeType":"UserDefinedTypeName","pathNode":{"id":8811,"name":"ContractType","nameLocations":["7127:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"7127:12:34"},"referencedDeclaration":33,"src":"7127:12:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":8815,"mutability":"mutable","name":"contractName","nameLocation":"7176:12:34","nodeType":"VariableDeclaration","scope":8936,"src":"7162:26:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8814,"name":"string","nodeType":"ElementaryTypeName","src":"7162:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":8817,"mutability":"mutable","name":"contractAddress","nameLocation":"7206:15:34","nodeType":"VariableDeclaration","scope":8936,"src":"7198:23:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8816,"name":"address","nodeType":"ElementaryTypeName","src":"7198:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7117:110:34"},"returnParameters":{"id":8821,"nodeType":"ParameterList","parameters":[],"src":"7250:0:34"},"scope":9326,"src":"7084:1862:34","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[146],"body":{"id":9015,"nodeType":"Block","src":"9084:851:34","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":8946,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8939,"src":"9104:12:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8945,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9098:5:34","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":8944,"name":"bytes","nodeType":"ElementaryTypeName","src":"9098:5:34","typeDescriptions":{}}},"id":8947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9098:19:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":8948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9118:6:34","memberName":"length","nodeType":"MemberAccess","src":"9098:26:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9098:31:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8955,"nodeType":"IfStatement","src":"9094:90:34","trueBody":{"id":8954,"nodeType":"Block","src":"9131:53:34","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8951,"name":"InvalidContractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"9152:19:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":8952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9152:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8953,"nodeType":"RevertStatement","src":"9145:28:34"}]}},{"assignments":[8957],"declarations":[{"constant":false,"id":8957,"mutability":"mutable","name":"contractId","nameLocation":"9243:10:34","nodeType":"VariableDeclaration","scope":9015,"src":"9235:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":8956,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9235:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":8961,"initialValue":{"arguments":[{"id":8959,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8939,"src":"9271:12:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8958,"name":"_getContractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9325,"src":"9256:14:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_bytes32_$","typeString":"function (string memory) pure returns (bytes32)"}},"id":8960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9256:28:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9235:49:34"},{"assignments":[8963],"declarations":[{"constant":false,"id":8963,"mutability":"mutable","name":"contractAddress","nameLocation":"9302:15:34","nodeType":"VariableDeclaration","scope":9015,"src":"9294:23:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8962,"name":"address","nodeType":"ElementaryTypeName","src":"9294:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":8967,"initialValue":{"baseExpression":{"id":8964,"name":"_contractRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8783,"src":"9320:17:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":8966,"indexExpression":{"id":8965,"name":"contractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8957,"src":"9338:10:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9320:29:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9294:55:34"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8968,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8963,"src":"9364:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9391:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9383:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8969,"name":"address","nodeType":"ElementaryTypeName","src":"9383:7:34","typeDescriptions":{}}},"id":8972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9383:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9364:29:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8979,"nodeType":"IfStatement","src":"9360:106:34","trueBody":{"id":8978,"nodeType":"Block","src":"9395:71:34","statements":[{"errorCall":{"arguments":[{"id":8975,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8939,"src":"9442:12:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8974,"name":"ContractNameNotRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"9416:25:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$returns$_t_error_$","typeString":"function (string memory) pure returns (error)"}},"id":8976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9416:39:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8977,"nodeType":"RevertStatement","src":"9409:46:34"}]}},{"assignments":[8982],"declarations":[{"constant":false,"id":8982,"mutability":"mutable","name":"info","nameLocation":"9496:4:34","nodeType":"VariableDeclaration","scope":9015,"src":"9476:24:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"},"typeName":{"id":8981,"nodeType":"UserDefinedTypeName","pathNode":{"id":8980,"name":"ContractInfo","nameLocations":["9476:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":42,"src":"9476:12:34"},"referencedDeclaration":42,"src":"9476:12:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"}},"visibility":"internal"}],"id":8986,"initialValue":{"baseExpression":{"id":8983,"name":"_contractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8788,"src":"9503:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo storage ref)"}},"id":8985,"indexExpression":{"id":8984,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8963,"src":"9517:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9503:30:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9476:57:34"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":8990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":8987,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8982,"src":"9633:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":8988,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9638:12:34","memberName":"isRegistered","nodeType":"MemberAccess","referencedDeclaration":39,"src":"9633:17:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":8989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9654:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"9633:26:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8997,"nodeType":"IfStatement","src":"9629:112:34","trueBody":{"id":8996,"nodeType":"Block","src":"9661:80:34","statements":[{"errorCall":{"arguments":[{"id":8992,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8939,"src":"9700:12:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":8993,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8963,"src":"9714:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":8991,"name":"InconsistentState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8799,"src":"9682:17:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$_t_address_$returns$_t_error_$","typeString":"function (string memory,address) pure returns (error)"}},"id":8994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9682:48:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8995,"nodeType":"RevertStatement","src":"9675:55:34"}]}},{"expression":{"id":9001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"9751:36:34","subExpression":{"baseExpression":{"id":8998,"name":"_contractRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8783,"src":"9758:17:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":9000,"indexExpression":{"id":8999,"name":"contractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8957,"src":"9776:10:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9758:29:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9002,"nodeType":"ExpressionStatement","src":"9751:36:34"},{"expression":{"id":9006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"9797:37:34","subExpression":{"baseExpression":{"id":9003,"name":"_contractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8788,"src":"9804:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo storage ref)"}},"id":9005,"indexExpression":{"id":9004,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8963,"src":"9818:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9804:30:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9007,"nodeType":"ExpressionStatement","src":"9797:37:34"},{"eventCall":{"arguments":[{"expression":{"id":9009,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8982,"src":"9879:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":9010,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9884:12:34","memberName":"contractType","nodeType":"MemberAccess","referencedDeclaration":37,"src":"9879:17:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},{"id":9011,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8939,"src":"9898:12:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":9012,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8963,"src":"9912:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9008,"name":"BalancerContractDeregistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62,"src":"9850:28:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_enum$_ContractType_$33_$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (enum ContractType,string memory,address)"}},"id":9013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9850:78:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9014,"nodeType":"EmitStatement","src":"9845:83:34"}]},"documentation":{"id":8937,"nodeType":"StructuredDocumentation","src":"8952:41:34","text":"@inheritdoc IBalancerContractRegistry"},"functionSelector":"c7f90793","id":9016,"implemented":true,"kind":"function","modifiers":[{"id":8942,"kind":"modifierInvocation","modifierName":{"id":8941,"name":"authenticate","nameLocations":["9071:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":3180,"src":"9071:12:34"},"nodeType":"ModifierInvocation","src":"9071:12:34"}],"name":"deregisterBalancerContract","nameLocation":"9007:26:34","nodeType":"FunctionDefinition","parameters":{"id":8940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8939,"mutability":"mutable","name":"contractName","nameLocation":"9048:12:34","nodeType":"VariableDeclaration","scope":9016,"src":"9034:26:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8938,"name":"string","nodeType":"ElementaryTypeName","src":"9034:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9033:28:34"},"returnParameters":{"id":8943,"nodeType":"ParameterList","parameters":[],"src":"9084:0:34"},"scope":9326,"src":"8998:937:34","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[152],"body":{"id":9078,"nodeType":"Block","src":"10069:949:34","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":9029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9024,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9019,"src":"10083:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":9027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10110:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":9026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10102:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9025,"name":"address","nodeType":"ElementaryTypeName","src":"10102:7:34","typeDescriptions":{}}},"id":9028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10102:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10083:29:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9034,"nodeType":"IfStatement","src":"10079:88:34","trueBody":{"id":9033,"nodeType":"Block","src":"10114:53:34","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9030,"name":"ZeroContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"10135:19:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10135:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9032,"nodeType":"RevertStatement","src":"10128:28:34"}]}},{"assignments":[9037],"declarations":[{"constant":false,"id":9037,"mutability":"mutable","name":"info","nameLocation":"10197:4:34","nodeType":"VariableDeclaration","scope":9078,"src":"10177:24:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"},"typeName":{"id":9036,"nodeType":"UserDefinedTypeName","pathNode":{"id":9035,"name":"ContractInfo","nameLocations":["10177:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":42,"src":"10177:12:34"},"referencedDeclaration":42,"src":"10177:12:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"}},"visibility":"internal"}],"id":9041,"initialValue":{"baseExpression":{"id":9038,"name":"_contractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8788,"src":"10204:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo storage ref)"}},"id":9040,"indexExpression":{"id":9039,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9019,"src":"10218:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10204:30:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10177:57:34"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":9045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":9042,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9037,"src":"10304:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":9043,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10309:12:34","memberName":"isRegistered","nodeType":"MemberAccess","referencedDeclaration":39,"src":"10304:17:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":9044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10325:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"10304:26:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9051,"nodeType":"IfStatement","src":"10300:109:34","trueBody":{"id":9050,"nodeType":"Block","src":"10332:77:34","statements":[{"errorCall":{"arguments":[{"id":9047,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9019,"src":"10382:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9046,"name":"ContractAddressNotRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"10353:28:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":9048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10353:45:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9049,"nodeType":"RevertStatement","src":"10346:52:34"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":9055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":9052,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9037,"src":"10503:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":9053,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10508:8:34","memberName":"isActive","nodeType":"MemberAccess","referencedDeclaration":41,"src":"10503:13:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":9054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10520:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"10503:22:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9061,"nodeType":"IfStatement","src":"10499:102:34","trueBody":{"id":9060,"nodeType":"Block","src":"10527:74:34","statements":[{"errorCall":{"arguments":[{"id":9057,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9019,"src":"10574:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9056,"name":"ContractAlreadyDeprecated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"10548:25:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":9058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10548:42:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9059,"nodeType":"RevertStatement","src":"10541:49:34"}]}},{"expression":{"id":9066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":9062,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9037,"src":"10884:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":9064,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10889:8:34","memberName":"isActive","nodeType":"MemberAccess","referencedDeclaration":41,"src":"10884:13:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":9065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10900:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"10884:21:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9067,"nodeType":"ExpressionStatement","src":"10884:21:34"},{"expression":{"id":9072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":9068,"name":"_contractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8788,"src":"10915:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo storage ref)"}},"id":9070,"indexExpression":{"id":9069,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9019,"src":"10929:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:30:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9071,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9037,"src":"10948:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"src":"10915:37:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"id":9073,"nodeType":"ExpressionStatement","src":"10915:37:34"},{"eventCall":{"arguments":[{"id":9075,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9019,"src":"10995:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9074,"name":"BalancerContractDeprecated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"10968:26:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":9076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10968:43:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9077,"nodeType":"EmitStatement","src":"10963:48:34"}]},"documentation":{"id":9017,"nodeType":"StructuredDocumentation","src":"9941:41:34","text":"@inheritdoc IBalancerContractRegistry"},"functionSelector":"44969a9c","id":9079,"implemented":true,"kind":"function","modifiers":[{"id":9022,"kind":"modifierInvocation","modifierName":{"id":9021,"name":"authenticate","nameLocations":["10056:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":3180,"src":"10056:12:34"},"nodeType":"ModifierInvocation","src":"10056:12:34"}],"name":"deprecateBalancerContract","nameLocation":"9996:25:34","nodeType":"FunctionDefinition","parameters":{"id":9020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9019,"mutability":"mutable","name":"contractAddress","nameLocation":"10030:15:34","nodeType":"VariableDeclaration","scope":9079,"src":"10022:23:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9018,"name":"address","nodeType":"ElementaryTypeName","src":"10022:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10021:25:34"},"returnParameters":{"id":9023,"nodeType":"ParameterList","parameters":[],"src":"10069:0:34"},"scope":9326,"src":"9987:1031:34","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[160],"body":{"id":9172,"nodeType":"Block","src":"11210:1370:34","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":9091,"name":"contractAlias","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9082,"src":"11269:13:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":9090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11263:5:34","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":9089,"name":"bytes","nodeType":"ElementaryTypeName","src":"11263:5:34","typeDescriptions":{}}},"id":9092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11263:20:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":9093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11284:6:34","memberName":"length","nodeType":"MemberAccess","src":"11263:27:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":9094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11294:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11263:32:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9100,"nodeType":"IfStatement","src":"11259:92:34","trueBody":{"id":9099,"nodeType":"Block","src":"11297:54:34","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9096,"name":"InvalidContractAlias","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"11318:20:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11318:22:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9098,"nodeType":"RevertStatement","src":"11311:29:34"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":9106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9101,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9084,"src":"11365:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":9104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11392:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":9103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11384:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9102,"name":"address","nodeType":"ElementaryTypeName","src":"11384:7:34","typeDescriptions":{}}},"id":9105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11384:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11365:29:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9111,"nodeType":"IfStatement","src":"11361:88:34","trueBody":{"id":9110,"nodeType":"Block","src":"11396:53:34","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9107,"name":"ZeroContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"11417:19:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11417:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9109,"nodeType":"RevertStatement","src":"11410:28:34"}]}},{"assignments":[9114],"declarations":[{"constant":false,"id":9114,"mutability":"mutable","name":"info","nameLocation":"11533:4:34","nodeType":"VariableDeclaration","scope":9172,"src":"11513:24:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"},"typeName":{"id":9113,"nodeType":"UserDefinedTypeName","pathNode":{"id":9112,"name":"ContractInfo","nameLocations":["11513:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":42,"src":"11513:12:34"},"referencedDeclaration":42,"src":"11513:12:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"}},"visibility":"internal"}],"id":9118,"initialValue":{"baseExpression":{"id":9115,"name":"_contractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8788,"src":"11540:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo storage ref)"}},"id":9117,"indexExpression":{"id":9116,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9084,"src":"11554:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11540:30:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11513:57:34"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":9122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":9119,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9114,"src":"11584:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":9120,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11589:12:34","memberName":"isRegistered","nodeType":"MemberAccess","referencedDeclaration":39,"src":"11584:17:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":9121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11605:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"11584:26:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9128,"nodeType":"IfStatement","src":"11580:109:34","trueBody":{"id":9127,"nodeType":"Block","src":"11612:77:34","statements":[{"errorCall":{"arguments":[{"id":9124,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9084,"src":"11662:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9123,"name":"ContractAddressNotRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"11633:28:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":9125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11633:45:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9126,"nodeType":"RevertStatement","src":"11626:52:34"}]}},{"assignments":[9130],"declarations":[{"constant":false,"id":9130,"mutability":"mutable","name":"contractId","nameLocation":"12061:10:34","nodeType":"VariableDeclaration","scope":9172,"src":"12053:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":9129,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12053:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":9134,"initialValue":{"arguments":[{"id":9132,"name":"contractAlias","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9082,"src":"12089:13:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":9131,"name":"_getContractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9325,"src":"12074:14:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_bytes32_$","typeString":"function (string memory) pure returns (bytes32)"}},"id":9133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12074:29:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"12053:50:34"},{"assignments":[9136],"declarations":[{"constant":false,"id":9136,"mutability":"mutable","name":"existingRegistryAddress","nameLocation":"12121:23:34","nodeType":"VariableDeclaration","scope":9172,"src":"12113:31:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9135,"name":"address","nodeType":"ElementaryTypeName","src":"12113:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":9140,"initialValue":{"baseExpression":{"id":9137,"name":"_contractRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8783,"src":"12147:17:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":9139,"indexExpression":{"id":9138,"name":"contractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9130,"src":"12165:10:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12147:29:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12113:63:34"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":9146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9141,"name":"existingRegistryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9136,"src":"12190:23:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":9144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12225:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":9143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12217:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9142,"name":"address","nodeType":"ElementaryTypeName","src":"12217:7:34","typeDescriptions":{}}},"id":9145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12217:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12190:37:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9160,"nodeType":"IfStatement","src":"12186:193:34","trueBody":{"id":9159,"nodeType":"Block","src":"12229:150:34","statements":[{"expression":{"id":9151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9147,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9114,"src":"12243:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":9148,"name":"_contractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8788,"src":"12250:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo storage ref)"}},"id":9150,"indexExpression":{"id":9149,"name":"existingRegistryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9136,"src":"12264:23:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12250:38:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"src":"12243:45:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":9152,"nodeType":"ExpressionStatement","src":"12243:45:34"},{"errorCall":{"arguments":[{"expression":{"id":9154,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9114,"src":"12335:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":9155,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12340:12:34","memberName":"contractType","nodeType":"MemberAccess","referencedDeclaration":37,"src":"12335:17:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},{"id":9156,"name":"contractAlias","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9082,"src":"12354:13:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":9153,"name":"ContractAliasInUseAsName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"12310:24:34","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_enum$_ContractType_$33_$_t_string_memory_ptr_$returns$_t_error_$","typeString":"function (enum ContractType,string memory) pure returns (error)"}},"id":9157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12310:58:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9158,"nodeType":"RevertStatement","src":"12303:65:34"}]}},{"expression":{"id":9165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":9161,"name":"_contractAliases","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8792,"src":"12459:16:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":9163,"indexExpression":{"id":9162,"name":"contractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9130,"src":"12476:10:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12459:28:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9164,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9084,"src":"12490:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12459:46:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":9166,"nodeType":"ExpressionStatement","src":"12459:46:34"},{"eventCall":{"arguments":[{"id":9168,"name":"contractAlias","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9082,"src":"12542:13:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":9169,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9084,"src":"12557:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9167,"name":"ContractAliasUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"12521:20:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,address)"}},"id":9170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12521:52:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9171,"nodeType":"EmitStatement","src":"12516:57:34"}]},"documentation":{"id":9080,"nodeType":"StructuredDocumentation","src":"11024:41:34","text":"@inheritdoc IBalancerContractRegistry"},"functionSelector":"2967af96","id":9173,"implemented":true,"kind":"function","modifiers":[{"id":9087,"kind":"modifierInvocation","modifierName":{"id":9086,"name":"authenticate","nameLocations":["11197:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":3180,"src":"11197:12:34"},"nodeType":"ModifierInvocation","src":"11197:12:34"}],"name":"addOrUpdateBalancerContractAlias","nameLocation":"11079:32:34","nodeType":"FunctionDefinition","parameters":{"id":9085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9082,"mutability":"mutable","name":"contractAlias","nameLocation":"11135:13:34","nodeType":"VariableDeclaration","scope":9173,"src":"11121:27:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":9081,"name":"string","nodeType":"ElementaryTypeName","src":"11121:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":9084,"mutability":"mutable","name":"contractAddress","nameLocation":"11166:15:34","nodeType":"VariableDeclaration","scope":9173,"src":"11158:23:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9083,"name":"address","nodeType":"ElementaryTypeName","src":"11158:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11111:76:34"},"returnParameters":{"id":9088,"nodeType":"ParameterList","parameters":[],"src":"11210:0:34"},"scope":9326,"src":"11070:1510:34","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[171],"body":{"id":9189,"nodeType":"Block","src":"12747:80:34","statements":[{"expression":{"arguments":[{"id":9185,"name":"contractType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9177,"src":"12790:12:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},{"id":9186,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9179,"src":"12804:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9184,"name":"_isActiveBalancerContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9216,"src":"12764:25:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_ContractType_$33_$_t_address_$returns$_t_bool_$","typeString":"function (enum ContractType,address) view returns (bool)"}},"id":9187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12764:56:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":9183,"id":9188,"nodeType":"Return","src":"12757:63:34"}]},"documentation":{"id":9174,"nodeType":"StructuredDocumentation","src":"12586:41:34","text":"@inheritdoc IBalancerContractRegistry"},"functionSelector":"ae2733a4","id":9190,"implemented":true,"kind":"function","modifiers":[],"name":"isActiveBalancerContract","nameLocation":"12641:24:34","nodeType":"FunctionDefinition","parameters":{"id":9180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9177,"mutability":"mutable","name":"contractType","nameLocation":"12679:12:34","nodeType":"VariableDeclaration","scope":9190,"src":"12666:25:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":9176,"nodeType":"UserDefinedTypeName","pathNode":{"id":9175,"name":"ContractType","nameLocations":["12666:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"12666:12:34"},"referencedDeclaration":33,"src":"12666:12:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":9179,"mutability":"mutable","name":"contractAddress","nameLocation":"12701:15:34","nodeType":"VariableDeclaration","scope":9190,"src":"12693:23:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9178,"name":"address","nodeType":"ElementaryTypeName","src":"12693:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12665:52:34"},"returnParameters":{"id":9183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9190,"src":"12741:4:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":9181,"name":"bool","nodeType":"ElementaryTypeName","src":"12741:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12740:6:34"},"scope":9326,"src":"12632:195:34","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":9215,"nodeType":"Block","src":"12971:235:34","statements":[{"assignments":[9202],"declarations":[{"constant":false,"id":9202,"mutability":"mutable","name":"info","nameLocation":"13001:4:34","nodeType":"VariableDeclaration","scope":9215,"src":"12981:24:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"},"typeName":{"id":9201,"nodeType":"UserDefinedTypeName","pathNode":{"id":9200,"name":"ContractInfo","nameLocations":["12981:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":42,"src":"12981:12:34"},"referencedDeclaration":42,"src":"12981:12:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"}},"visibility":"internal"}],"id":9206,"initialValue":{"baseExpression":{"id":9203,"name":"_contractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8788,"src":"13008:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo storage ref)"}},"id":9205,"indexExpression":{"id":9204,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9195,"src":"13022:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13008:30:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"12981:57:34"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":9213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":9207,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9202,"src":"13149:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":9208,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13154:8:34","memberName":"isActive","nodeType":"MemberAccess","referencedDeclaration":41,"src":"13149:13:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"id":9212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":9209,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9202,"src":"13166:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":9210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13171:12:34","memberName":"contractType","nodeType":"MemberAccess","referencedDeclaration":37,"src":"13166:17:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":9211,"name":"contractType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9193,"src":"13187:12:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"src":"13166:33:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13149:50:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":9199,"id":9214,"nodeType":"Return","src":"13142:57:34"}]},"id":9216,"implemented":true,"kind":"function","modifiers":[],"name":"_isActiveBalancerContract","nameLocation":"12842:25:34","nodeType":"FunctionDefinition","parameters":{"id":9196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9193,"mutability":"mutable","name":"contractType","nameLocation":"12890:12:34","nodeType":"VariableDeclaration","scope":9216,"src":"12877:25:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":9192,"nodeType":"UserDefinedTypeName","pathNode":{"id":9191,"name":"ContractType","nameLocations":["12877:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"12877:12:34"},"referencedDeclaration":33,"src":"12877:12:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":9195,"mutability":"mutable","name":"contractAddress","nameLocation":"12920:15:34","nodeType":"VariableDeclaration","scope":9216,"src":"12912:23:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9194,"name":"address","nodeType":"ElementaryTypeName","src":"12912:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12867:74:34"},"returnParameters":{"id":9199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9198,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9216,"src":"12965:4:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":9197,"name":"bool","nodeType":"ElementaryTypeName","src":"12965:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12964:6:34"},"scope":9326,"src":"12833:373:34","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[184],"body":{"id":9280,"nodeType":"Block","src":"13427:833:34","statements":[{"assignments":[9230],"declarations":[{"constant":false,"id":9230,"mutability":"mutable","name":"contractId","nameLocation":"13445:10:34","nodeType":"VariableDeclaration","scope":9280,"src":"13437:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":9229,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13437:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":9234,"initialValue":{"arguments":[{"id":9232,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9222,"src":"13473:12:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":9231,"name":"_getContractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9325,"src":"13458:14:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_bytes32_$","typeString":"function (string memory) pure returns (bytes32)"}},"id":9233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13458:28:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"13437:49:34"},{"assignments":[9236],"declarations":[{"constant":false,"id":9236,"mutability":"mutable","name":"registeredAddress","nameLocation":"13504:17:34","nodeType":"VariableDeclaration","scope":9280,"src":"13496:25:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9235,"name":"address","nodeType":"ElementaryTypeName","src":"13496:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":9240,"initialValue":{"baseExpression":{"id":9237,"name":"_contractRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8783,"src":"13524:17:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":9239,"indexExpression":{"id":9238,"name":"contractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9230,"src":"13542:10:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13524:29:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"13496:57:34"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":9246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9241,"name":"registeredAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9236,"src":"13641:17:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":9244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13670:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":9243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13662:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9242,"name":"address","nodeType":"ElementaryTypeName","src":"13662:7:34","typeDescriptions":{}}},"id":9245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13662:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13641:31:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9254,"nodeType":"IfStatement","src":"13637:110:34","trueBody":{"id":9253,"nodeType":"Block","src":"13674:73:34","statements":[{"expression":{"id":9251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9247,"name":"registeredAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9236,"src":"13688:17:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":9248,"name":"_contractAliases","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8792,"src":"13708:16:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":9250,"indexExpression":{"id":9249,"name":"contractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9230,"src":"13725:10:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13708:28:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13688:48:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":9252,"nodeType":"ExpressionStatement","src":"13688:48:34"}]}},{"assignments":[9257],"declarations":[{"constant":false,"id":9257,"mutability":"mutable","name":"info","nameLocation":"13777:4:34","nodeType":"VariableDeclaration","scope":9280,"src":"13757:24:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"},"typeName":{"id":9256,"nodeType":"UserDefinedTypeName","pathNode":{"id":9255,"name":"ContractInfo","nameLocations":["13757:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":42,"src":"13757:12:34"},"referencedDeclaration":42,"src":"13757:12:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"}},"visibility":"internal"}],"id":9261,"initialValue":{"baseExpression":{"id":9258,"name":"_contractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8788,"src":"13784:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo storage ref)"}},"id":9260,"indexExpression":{"id":9259,"name":"registeredAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9236,"src":"13798:17:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13784:32:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13757:59:34"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":9268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":9262,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9257,"src":"14100:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":9263,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14105:12:34","memberName":"isRegistered","nodeType":"MemberAccess","referencedDeclaration":39,"src":"14100:17:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"id":9267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":9264,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9257,"src":"14121:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":9265,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14126:12:34","memberName":"contractType","nodeType":"MemberAccess","referencedDeclaration":37,"src":"14121:17:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":9266,"name":"contractType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9220,"src":"14142:12:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"src":"14121:33:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14100:54:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9279,"nodeType":"IfStatement","src":"14096:158:34","trueBody":{"id":9278,"nodeType":"Block","src":"14156:98:34","statements":[{"expression":{"id":9271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9269,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9225,"src":"14170:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9270,"name":"registeredAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9236,"src":"14188:17:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14170:35:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":9272,"nodeType":"ExpressionStatement","src":"14170:35:34"},{"expression":{"id":9276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9273,"name":"isActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9227,"src":"14219:8:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":9274,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9257,"src":"14230:4:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo memory"}},"id":9275,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14235:8:34","memberName":"isActive","nodeType":"MemberAccess","referencedDeclaration":41,"src":"14230:13:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14219:24:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9277,"nodeType":"ExpressionStatement","src":"14219:24:34"}]}}]},"documentation":{"id":9217,"nodeType":"StructuredDocumentation","src":"13212:41:34","text":"@inheritdoc IBalancerContractRegistry"},"functionSelector":"41d8c0bb","id":9281,"implemented":true,"kind":"function","modifiers":[],"name":"getBalancerContract","nameLocation":"13267:19:34","nodeType":"FunctionDefinition","parameters":{"id":9223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9220,"mutability":"mutable","name":"contractType","nameLocation":"13309:12:34","nodeType":"VariableDeclaration","scope":9281,"src":"13296:25:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},"typeName":{"id":9219,"nodeType":"UserDefinedTypeName","pathNode":{"id":9218,"name":"ContractType","nameLocations":["13296:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":33,"src":"13296:12:34"},"referencedDeclaration":33,"src":"13296:12:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},"visibility":"internal"},{"constant":false,"id":9222,"mutability":"mutable","name":"contractName","nameLocation":"13345:12:34","nodeType":"VariableDeclaration","scope":9281,"src":"13331:26:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":9221,"name":"string","nodeType":"ElementaryTypeName","src":"13331:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13286:77:34"},"returnParameters":{"id":9228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9225,"mutability":"mutable","name":"contractAddress","nameLocation":"13395:15:34","nodeType":"VariableDeclaration","scope":9281,"src":"13387:23:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9224,"name":"address","nodeType":"ElementaryTypeName","src":"13387:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9227,"mutability":"mutable","name":"isActive","nameLocation":"13417:8:34","nodeType":"VariableDeclaration","scope":9281,"src":"13412:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":9226,"name":"bool","nodeType":"ElementaryTypeName","src":"13412:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13386:40:34"},"scope":9326,"src":"13258:1002:34","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[193],"body":{"id":9294,"nodeType":"Block","src":"14419:54:34","statements":[{"expression":{"baseExpression":{"id":9290,"name":"_contractInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8788,"src":"14436:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ContractInfo_$42_storage_$","typeString":"mapping(address => struct IBalancerContractRegistry.ContractInfo storage ref)"}},"id":9292,"indexExpression":{"id":9291,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9284,"src":"14450:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14436:30:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage","typeString":"struct IBalancerContractRegistry.ContractInfo storage ref"}},"functionReturnParameters":9289,"id":9293,"nodeType":"Return","src":"14429:37:34"}]},"documentation":{"id":9282,"nodeType":"StructuredDocumentation","src":"14266:41:34","text":"@inheritdoc IBalancerContractRegistry"},"functionSelector":"8554c327","id":9295,"implemented":true,"kind":"function","modifiers":[],"name":"getBalancerContractInfo","nameLocation":"14321:23:34","nodeType":"FunctionDefinition","parameters":{"id":9285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9284,"mutability":"mutable","name":"contractAddress","nameLocation":"14353:15:34","nodeType":"VariableDeclaration","scope":9295,"src":"14345:23:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9283,"name":"address","nodeType":"ElementaryTypeName","src":"14345:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14344:25:34"},"returnParameters":{"id":9289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9288,"mutability":"mutable","name":"info","nameLocation":"14413:4:34","nodeType":"VariableDeclaration","scope":9295,"src":"14393:24:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_memory_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"},"typeName":{"id":9287,"nodeType":"UserDefinedTypeName","pathNode":{"id":9286,"name":"ContractInfo","nameLocations":["14393:12:34"],"nodeType":"IdentifierPath","referencedDeclaration":42,"src":"14393:12:34"},"referencedDeclaration":42,"src":"14393:12:34","typeDescriptions":{"typeIdentifier":"t_struct$_ContractInfo_$42_storage_ptr","typeString":"struct IBalancerContractRegistry.ContractInfo"}},"visibility":"internal"}],"src":"14392:26:34"},"scope":9326,"src":"14312:161:34","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[201],"body":{"id":9309,"nodeType":"Block","src":"14595:78:34","statements":[{"expression":{"arguments":[{"expression":{"id":9304,"name":"ContractType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"14638:12:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ContractType_$33_$","typeString":"type(enum ContractType)"}},"id":9305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14651:6:34","memberName":"ROUTER","nodeType":"MemberAccess","referencedDeclaration":30,"src":"14638:19:34","typeDescriptions":{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"}},{"id":9306,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9298,"src":"14659:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_ContractType_$33","typeString":"enum ContractType"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9303,"name":"_isActiveBalancerContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9216,"src":"14612:25:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_ContractType_$33_$_t_address_$returns$_t_bool_$","typeString":"function (enum ContractType,address) view returns (bool)"}},"id":9307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14612:54:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":9302,"id":9308,"nodeType":"Return","src":"14605:61:34"}]},"documentation":{"id":9296,"nodeType":"StructuredDocumentation","src":"14479:41:34","text":"@inheritdoc IBalancerContractRegistry"},"functionSelector":"264e97e0","id":9310,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedRouter","nameLocation":"14534:15:34","nodeType":"FunctionDefinition","parameters":{"id":9299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9298,"mutability":"mutable","name":"router","nameLocation":"14558:6:34","nodeType":"VariableDeclaration","scope":9310,"src":"14550:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9297,"name":"address","nodeType":"ElementaryTypeName","src":"14550:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14549:16:34"},"returnParameters":{"id":9302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9310,"src":"14589:4:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":9300,"name":"bool","nodeType":"ElementaryTypeName","src":"14589:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14588:6:34"},"scope":9326,"src":"14525:148:34","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":9324,"nodeType":"Block","src":"14763:65:34","statements":[{"expression":{"arguments":[{"arguments":[{"id":9320,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9312,"src":"14807:12:34","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":9318,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"14790:3:34","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":9319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14794:12:34","memberName":"encodePacked","nodeType":"MemberAccess","src":"14790:16:34","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":9321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14790:30:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":9317,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"14780:9:34","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":9322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14780:41:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":9316,"id":9323,"nodeType":"Return","src":"14773:48:34"}]},"id":9325,"implemented":true,"kind":"function","modifiers":[],"name":"_getContractId","nameLocation":"14688:14:34","nodeType":"FunctionDefinition","parameters":{"id":9313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9312,"mutability":"mutable","name":"contractName","nameLocation":"14717:12:34","nodeType":"VariableDeclaration","scope":9325,"src":"14703:26:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":9311,"name":"string","nodeType":"ElementaryTypeName","src":"14703:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"14702:28:34"},"returnParameters":{"id":9316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9325,"src":"14754:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":9314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14754:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"14753:9:34"},"scope":9326,"src":"14679:149:34","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":9327,"src":"2741:12089:34","usedErrors":[5,82,90,97,105,110,115,120,123,126,129,8799],"usedEvents":[52,62,67,74]}],"src":"46:14785:34"},"id":34},"contracts/CallAndRevert.sol":{"ast":{"absolutePath":"contracts/CallAndRevert.sol","exportedSymbols":{"Address":[6988],"CallAndRevert":[9432],"RevertCodec":[3322]},"id":9433,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":9328,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:35"},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":9330,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9433,"sourceUnit":6989,"src":"72:68:35","symbolAliases":[{"foreign":{"id":9329,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6988,"src":"81:7:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/helpers/RevertCodec.sol","file":"@balancer-labs/v3-solidity-utils/contracts/helpers/RevertCodec.sol","id":9332,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9433,"sourceUnit":3323,"src":"142:97:35","symbolAliases":[{"foreign":{"id":9331,"name":"RevertCodec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"151:11:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"CallAndRevert","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":9432,"linearizedBaseContracts":[9432],"name":"CallAndRevert","nameLocation":"250:13:35","nodeType":"ContractDefinition","nodes":[{"errorSelector":"28f95541","id":9334,"name":"QuoteResultSpoofed","nameLocation":"276:18:35","nodeType":"ErrorDefinition","parameters":{"id":9333,"nodeType":"ParameterList","parameters":[],"src":"294:2:35"},"src":"270:27:35"},{"body":{"id":9370,"nodeType":"Block","src":"394:233:35","statements":[{"clauses":[{"block":{"id":9357,"nodeType":"Block","src":"469:53:35","statements":[{"expression":{"arguments":[{"hexValue":"556e65787065637465642073756363657373","id":9354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"490:20:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_52cc6744a1218fb09c6a53a5e53dd9c5152cf7440797e8ce2d6c7d521e9d14d5","typeString":"literal_string \"Unexpected success\""},"value":"Unexpected success"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_52cc6744a1218fb09c6a53a5e53dd9c5152cf7440797e8ce2d6c7d521e9d14d5","typeString":"literal_string \"Unexpected success\""}],"id":9353,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"483:6:35","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":9355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"483:28:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9356,"nodeType":"ExpressionStatement","src":"483:28:35"}]},"errorName":"","id":9358,"nodeType":"TryCatchClause","src":"469:53:35"},{"block":{"id":9367,"nodeType":"Block","src":"551:70:35","statements":[{"expression":{"arguments":[{"id":9364,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9360,"src":"603:6:35","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":9362,"name":"RevertCodec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"572:11:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_RevertCodec_$3322_$","typeString":"type(library RevertCodec)"}},"id":9363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"584:18:35","memberName":"catchEncodedResult","nodeType":"MemberAccess","referencedDeclaration":3284,"src":"572:30:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (bytes memory)"}},"id":9365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"572:38:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":9342,"id":9366,"nodeType":"Return","src":"565:45:35"}]},"errorName":"","id":9368,"nodeType":"TryCatchClause","parameters":{"id":9361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9360,"mutability":"mutable","name":"result","nameLocation":"543:6:35","nodeType":"VariableDeclaration","scope":9368,"src":"530:19:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":9359,"name":"bytes","nodeType":"ElementaryTypeName","src":"530:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"529:21:35"},"src":"523:98:35"}],"externalCall":{"arguments":[{"id":9350,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9336,"src":"455:6:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9351,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9338,"src":"463:4:35","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"arguments":[{"id":9346,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"430:4:35","typeDescriptions":{"typeIdentifier":"t_contract$_CallAndRevert_$9432","typeString":"contract CallAndRevert"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CallAndRevert_$9432","typeString":"contract CallAndRevert"}],"id":9345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"422:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9344,"name":"address","nodeType":"ElementaryTypeName","src":"422:7:35","typeDescriptions":{}}},"id":9347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"422:13:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9343,"name":"CallAndRevert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9432,"src":"408:13:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CallAndRevert_$9432_$","typeString":"type(contract CallAndRevert)"}},"id":9348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"408:28:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CallAndRevert_$9432","typeString":"contract CallAndRevert"}},"id":9349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"437:17:35","memberName":"callAndRevertHook","nodeType":"MemberAccess","referencedDeclaration":9431,"src":"408:46:35","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory) external"}},"id":9352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"408:60:35","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9369,"nodeType":"TryStatement","src":"404:217:35"}]},"id":9371,"implemented":true,"kind":"function","modifiers":[],"name":"_callAndRevert","nameLocation":"312:14:35","nodeType":"FunctionDefinition","parameters":{"id":9339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9336,"mutability":"mutable","name":"target","nameLocation":"335:6:35","nodeType":"VariableDeclaration","scope":9371,"src":"327:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9335,"name":"address","nodeType":"ElementaryTypeName","src":"327:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9338,"mutability":"mutable","name":"data","nameLocation":"356:4:35","nodeType":"VariableDeclaration","scope":9371,"src":"343:17:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":9337,"name":"bytes","nodeType":"ElementaryTypeName","src":"343:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"326:35:35"},"returnParameters":{"id":9342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9371,"src":"380:12:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":9340,"name":"bytes","nodeType":"ElementaryTypeName","src":"380:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"379:14:35"},"scope":9432,"src":"303:324:35","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":9430,"nodeType":"Block","src":"704:860:35","statements":[{"assignments":[9379,9381],"declarations":[{"constant":false,"id":9379,"mutability":"mutable","name":"success","nameLocation":"779:7:35","nodeType":"VariableDeclaration","scope":9430,"src":"774:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":9378,"name":"bool","nodeType":"ElementaryTypeName","src":"774:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":9381,"mutability":"mutable","name":"result","nameLocation":"801:6:35","nodeType":"VariableDeclaration","scope":9430,"src":"788:19:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":9380,"name":"bytes","nodeType":"ElementaryTypeName","src":"788:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":9387,"initialValue":{"arguments":[{"id":9385,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9375,"src":"825:4:35","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"components":[{"id":9382,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9373,"src":"812:6:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":9383,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"811:8:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":9384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"820:4:35","memberName":"call","nodeType":"MemberAccess","src":"811:13:35","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":9386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"811:19:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"773:57:35"},{"condition":{"id":9388,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9379,"src":"844:7:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":9428,"nodeType":"Block","src":"1127:431:35","statements":[{"assignments":[9406],"declarations":[{"constant":false,"id":9406,"mutability":"mutable","name":"errorSelector","nameLocation":"1260:13:35","nodeType":"VariableDeclaration","scope":9428,"src":"1253:20:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":9405,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1253:6:35","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":9411,"initialValue":{"arguments":[{"id":9409,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9381,"src":"1302:6:35","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":9407,"name":"RevertCodec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"1276:11:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_RevertCodec_$3322_$","typeString":"type(library RevertCodec)"}},"id":9408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1288:13:35","memberName":"parseSelector","nodeType":"MemberAccess","referencedDeclaration":3303,"src":"1276:25:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (bytes memory) pure returns (bytes4)"}},"id":9410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1276:33:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"1253:56:35"},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":9416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9412,"name":"errorSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9406,"src":"1327:13:35","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":9413,"name":"RevertCodec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"1344:11:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_RevertCodec_$3322_$","typeString":"type(library RevertCodec)"}},"id":9414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1356:6:35","memberName":"Result","nodeType":"MemberAccess","referencedDeclaration":3240,"src":"1344:18:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes_memory_ptr_$returns$_t_error_$","typeString":"function (bytes memory) pure returns (error)"}},"id":9415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1363:8:35","memberName":"selector","nodeType":"MemberAccess","src":"1344:27:35","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1327:44:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9421,"nodeType":"IfStatement","src":"1323:110:35","trueBody":{"id":9420,"nodeType":"Block","src":"1373:60:35","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9417,"name":"QuoteResultSpoofed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9334,"src":"1398:18:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1398:20:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9419,"nodeType":"RevertStatement","src":"1391:27:35"}]}},{"expression":{"arguments":[{"id":9425,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9381,"src":"1540:6:35","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":9422,"name":"RevertCodec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"1513:11:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_RevertCodec_$3322_$","typeString":"type(library RevertCodec)"}},"id":9424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1525:14:35","memberName":"bubbleUpRevert","nodeType":"MemberAccess","referencedDeclaration":3321,"src":"1513:26:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":9426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1513:34:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9427,"nodeType":"ExpressionStatement","src":"1513:34:35"}]},"id":9429,"nodeType":"IfStatement","src":"840:718:35","trueBody":{"id":9404,"nodeType":"Block","src":"853:268:35","statements":[{"expression":{"arguments":[{"expression":{"id":9392,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"990:3:35","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":9393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"994:6:35","memberName":"sender","nodeType":"MemberAccess","src":"990:10:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9394,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9379,"src":"1002:7:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":9395,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9381,"src":"1011:6:35","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":9389,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6988,"src":"955:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$6988_$","typeString":"type(library Address)"}},"id":9391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"963:26:35","memberName":"verifyCallResultFromTarget","nodeType":"MemberAccess","referencedDeclaration":6947,"src":"955:34:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":9396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:63:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":9397,"nodeType":"ExpressionStatement","src":"955:63:35"},{"errorCall":{"arguments":[{"id":9401,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9381,"src":"1103:6:35","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":9398,"name":"RevertCodec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"1084:11:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_RevertCodec_$3322_$","typeString":"type(library RevertCodec)"}},"id":9400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1096:6:35","memberName":"Result","nodeType":"MemberAccess","referencedDeclaration":3240,"src":"1084:18:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes_memory_ptr_$returns$_t_error_$","typeString":"function (bytes memory) pure returns (error)"}},"id":9402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1084:26:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9403,"nodeType":"RevertStatement","src":"1077:33:35"}]}}]},"functionSelector":"a7699638","id":9431,"implemented":true,"kind":"function","modifiers":[],"name":"callAndRevertHook","nameLocation":"642:17:35","nodeType":"FunctionDefinition","parameters":{"id":9376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9373,"mutability":"mutable","name":"target","nameLocation":"668:6:35","nodeType":"VariableDeclaration","scope":9431,"src":"660:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9372,"name":"address","nodeType":"ElementaryTypeName","src":"660:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9375,"mutability":"mutable","name":"data","nameLocation":"689:4:35","nodeType":"VariableDeclaration","scope":9431,"src":"676:17:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":9374,"name":"bytes","nodeType":"ElementaryTypeName","src":"676:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"659:35:35"},"returnParameters":{"id":9377,"nodeType":"ParameterList","parameters":[],"src":"704:0:35"},"scope":9432,"src":"633:931:35","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":9433,"src":"241:1325:35","usedErrors":[3240,3243,6748,6751,9334],"usedEvents":[]}],"src":"46:1521:35"},"id":35},"contracts/PriceImpactHelper.sol":{"ast":{"absolutePath":"contracts/PriceImpactHelper.sol","exportedSymbols":{"CallAndRevert":[9432],"FixedPoint":[3621],"IERC20":[6383],"IRouter":[1354],"IVault":[1392],"PriceImpactHelper":[10118],"SafeCast":[8765]},"id":10119,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":9434,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:36"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":9436,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10119,"sourceUnit":6384,"src":"72:72:36","symbolAliases":[{"foreign":{"id":9435,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"81:6:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"@openzeppelin/contracts/utils/math/SafeCast.sol","id":9438,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10119,"sourceUnit":8766,"src":"145:75:36","symbolAliases":[{"foreign":{"id":9437,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8765,"src":"154:8:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","id":9440,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10119,"sourceUnit":1393,"src":"222:81:36","symbolAliases":[{"foreign":{"id":9439,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"231:6:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol","id":9442,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10119,"sourceUnit":1355,"src":"304:83:36","symbolAliases":[{"foreign":{"id":9441,"name":"IRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"313:7:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol","file":"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol","id":9444,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10119,"sourceUnit":3622,"src":"389:92:36","symbolAliases":[{"foreign":{"id":9443,"name":"FixedPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"398:10:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/CallAndRevert.sol","file":"./CallAndRevert.sol","id":9446,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10119,"sourceUnit":9433,"src":"483:52:36","symbolAliases":[{"foreign":{"id":9445,"name":"CallAndRevert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9432,"src":"492:13:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":9447,"name":"CallAndRevert","nameLocations":["567:13:36"],"nodeType":"IdentifierPath","referencedDeclaration":9432,"src":"567:13:36"},"id":9448,"nodeType":"InheritanceSpecifier","src":"567:13:36"}],"canonicalName":"PriceImpactHelper","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":10118,"linearizedBaseContracts":[10118,9432],"name":"PriceImpactHelper","nameLocation":"546:17:36","nodeType":"ContractDefinition","nodes":[{"global":false,"id":9451,"libraryName":{"id":9449,"name":"FixedPoint","nameLocations":["593:10:36"],"nodeType":"IdentifierPath","referencedDeclaration":3621,"src":"593:10:36"},"nodeType":"UsingForDirective","src":"587:29:36","typeName":{"id":9450,"name":"uint256","nodeType":"ElementaryTypeName","src":"608:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"global":false,"id":9453,"libraryName":{"id":9452,"name":"SafeCast","nameLocations":["627:8:36"],"nodeType":"IdentifierPath","referencedDeclaration":8765,"src":"627:8:36"},"nodeType":"UsingForDirective","src":"621:21:36"},{"constant":false,"id":9456,"mutability":"immutable","name":"_vault","nameLocation":"674:6:36","nodeType":"VariableDeclaration","scope":10118,"src":"648:32:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"},"typeName":{"id":9455,"nodeType":"UserDefinedTypeName","pathNode":{"id":9454,"name":"IVault","nameLocations":["648:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"648:6:36"},"referencedDeclaration":1392,"src":"648:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"visibility":"internal"},{"constant":false,"id":9459,"mutability":"immutable","name":"_router","nameLocation":"713:7:36","nodeType":"VariableDeclaration","scope":10118,"src":"686:34:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"},"typeName":{"id":9458,"nodeType":"UserDefinedTypeName","pathNode":{"id":9457,"name":"IRouter","nameLocations":["686:7:36"],"nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"686:7:36"},"referencedDeclaration":1354,"src":"686:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}},"visibility":"internal"},{"body":{"id":9476,"nodeType":"Block","src":"769:57:36","statements":[{"expression":{"id":9470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9468,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9456,"src":"779:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9469,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9462,"src":"788:5:36","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"src":"779:14:36","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"id":9471,"nodeType":"ExpressionStatement","src":"779:14:36"},{"expression":{"id":9474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9472,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9459,"src":"803:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9473,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9465,"src":"813:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}},"src":"803:16:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}},"id":9475,"nodeType":"ExpressionStatement","src":"803:16:36"}]},"id":9477,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":9466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9462,"mutability":"mutable","name":"vault","nameLocation":"746:5:36","nodeType":"VariableDeclaration","scope":9477,"src":"739:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"},"typeName":{"id":9461,"nodeType":"UserDefinedTypeName","pathNode":{"id":9460,"name":"IVault","nameLocations":["739:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"739:6:36"},"referencedDeclaration":1392,"src":"739:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"visibility":"internal"},{"constant":false,"id":9465,"mutability":"mutable","name":"router","nameLocation":"761:6:36","nodeType":"VariableDeclaration","scope":9477,"src":"753:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"},"typeName":{"id":9464,"nodeType":"UserDefinedTypeName","pathNode":{"id":9463,"name":"IRouter","nameLocations":["753:7:36"],"nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"753:7:36"},"referencedDeclaration":1354,"src":"753:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}},"visibility":"internal"}],"src":"738:30:36"},"returnParameters":{"id":9467,"nodeType":"ParameterList","parameters":[],"src":"769:0:36"},"scope":10118,"src":"727:99:36","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":9613,"nodeType":"Block","src":"1232:1364:36","statements":[{"assignments":[9490],"declarations":[{"constant":false,"id":9490,"mutability":"mutable","name":"bptAmountOut","nameLocation":"1250:12:36","nodeType":"VariableDeclaration","scope":9613,"src":"1242:20:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9489,"name":"uint256","nodeType":"ElementaryTypeName","src":"1242:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9496,"initialValue":{"arguments":[{"id":9492,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9479,"src":"1294:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9493,"name":"exactAmountsIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9482,"src":"1300:14:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":9494,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9484,"src":"1316:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9491,"name":"_queryAddLiquidityUnbalanced","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9650,"src":"1265:28:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_address_$returns$_t_uint256_$","typeString":"function (address,uint256[] memory,address) returns (uint256)"}},"id":9495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1265:58:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1242:81:36"},{"assignments":[9501],"declarations":[{"constant":false,"id":9501,"mutability":"mutable","name":"proportionalAmountsOut","nameLocation":"1350:22:36","nodeType":"VariableDeclaration","scope":9613,"src":"1333:39:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":9499,"name":"uint256","nodeType":"ElementaryTypeName","src":"1333:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9500,"nodeType":"ArrayTypeName","src":"1333:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":9507,"initialValue":{"arguments":[{"id":9503,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9479,"src":"1409:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9504,"name":"bptAmountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9490,"src":"1415:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9505,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9484,"src":"1429:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9502,"name":"_queryRemoveLiquidityProportional","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9687,"src":"1375:33:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256,address) returns (uint256[] memory)"}},"id":9506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1375:61:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1333:103:36"},{"assignments":[9512],"declarations":[{"constant":false,"id":9512,"mutability":"mutable","name":"deltas","nameLocation":"1535:6:36","nodeType":"VariableDeclaration","scope":9613,"src":"1519:22:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":9510,"name":"int256","nodeType":"ElementaryTypeName","src":"1519:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9511,"nodeType":"ArrayTypeName","src":"1519:8:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"id":9519,"initialValue":{"arguments":[{"expression":{"id":9516,"name":"exactAmountsIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9482,"src":"1557:14:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":9517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1572:6:36","memberName":"length","nodeType":"MemberAccess","src":"1557:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1544:12:36","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (int256[] memory)"},"typeName":{"baseType":{"id":9513,"name":"int256","nodeType":"ElementaryTypeName","src":"1548:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9514,"nodeType":"ArrayTypeName","src":"1548:8:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}}},"id":9518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1544:35:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1519:60:36"},{"body":{"id":9547,"nodeType":"Block","src":"1641:104:36","statements":[{"expression":{"id":9545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":9531,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9512,"src":"1655:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9533,"indexExpression":{"id":9532,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9521,"src":"1662:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1655:9:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":9544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":9534,"name":"proportionalAmountsOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9501,"src":"1667:22:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":9536,"indexExpression":{"id":9535,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9521,"src":"1690:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1667:25:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1693:8:36","memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":8764,"src":"1667:34:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":9538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1667:36:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":9539,"name":"exactAmountsIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9482,"src":"1706:14:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":9541,"indexExpression":{"id":9540,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9521,"src":"1721:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1706:17:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1724:8:36","memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":8764,"src":"1706:26:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":9543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1706:28:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1667:67:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1655:79:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9546,"nodeType":"ExpressionStatement","src":"1655:79:36"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9524,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9521,"src":"1609:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":9525,"name":"exactAmountsIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9482,"src":"1613:14:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":9526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1628:6:36","memberName":"length","nodeType":"MemberAccess","src":"1613:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1609:25:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9548,"initializationExpression":{"assignments":[9521],"declarations":[{"constant":false,"id":9521,"mutability":"mutable","name":"i","nameLocation":"1602:1:36","nodeType":"VariableDeclaration","scope":9548,"src":"1594:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9520,"name":"uint256","nodeType":"ElementaryTypeName","src":"1594:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9523,"initialValue":{"hexValue":"30","id":9522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1606:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1594:13:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":9529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1636:3:36","subExpression":{"id":9528,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9521,"src":"1636:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9530,"nodeType":"ExpressionStatement","src":"1636:3:36"},"nodeType":"ForStatement","src":"1589:156:36"},{"assignments":[9553],"declarations":[{"constant":false,"id":9553,"mutability":"mutable","name":"deltaBPTs","nameLocation":"1878:9:36","nodeType":"VariableDeclaration","scope":9613,"src":"1862:25:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":9551,"name":"int256","nodeType":"ElementaryTypeName","src":"1862:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9552,"nodeType":"ArrayTypeName","src":"1862:8:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"id":9560,"initialValue":{"arguments":[{"expression":{"id":9557,"name":"exactAmountsIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9482,"src":"1903:14:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":9558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1918:6:36","memberName":"length","nodeType":"MemberAccess","src":"1903:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9556,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1890:12:36","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (int256[] memory)"},"typeName":{"baseType":{"id":9554,"name":"int256","nodeType":"ElementaryTypeName","src":"1894:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9555,"nodeType":"ArrayTypeName","src":"1894:8:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}}},"id":9559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1890:35:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1862:63:36"},{"body":{"id":9583,"nodeType":"Block","src":"1987:107:36","statements":[{"expression":{"id":9581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":9572,"name":"deltaBPTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9553,"src":"2001:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9574,"indexExpression":{"id":9573,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9562,"src":"2011:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2001:12:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":9576,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9479,"src":"2059:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9577,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9562,"src":"2065:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9578,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9512,"src":"2068:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},{"id":9579,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9484,"src":"2076:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9575,"name":"_queryAddLiquidityUnbalancedForTokenDeltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9847,"src":"2016:42:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_array$_t_int256_$dyn_memory_ptr_$_t_address_$returns$_t_int256_$","typeString":"function (address,uint256,int256[] memory,address) returns (int256)"}},"id":9580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:67:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2001:82:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9582,"nodeType":"ExpressionStatement","src":"2001:82:36"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9565,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9562,"src":"1955:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":9566,"name":"exactAmountsIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9482,"src":"1959:14:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":9567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1974:6:36","memberName":"length","nodeType":"MemberAccess","src":"1959:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1955:25:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9584,"initializationExpression":{"assignments":[9562],"declarations":[{"constant":false,"id":9562,"mutability":"mutable","name":"i","nameLocation":"1948:1:36","nodeType":"VariableDeclaration","scope":9584,"src":"1940:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9561,"name":"uint256","nodeType":"ElementaryTypeName","src":"1940:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9564,"initialValue":{"hexValue":"30","id":9563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1952:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1940:13:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":9570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1982:3:36","subExpression":{"id":9569,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9562,"src":"1982:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9571,"nodeType":"ExpressionStatement","src":"1982:3:36"},"nodeType":"ForStatement","src":"1935:159:36"},{"assignments":[9586],"declarations":[{"constant":false,"id":9586,"mutability":"mutable","name":"remainingDeltaIndex","nameLocation":"2192:19:36","nodeType":"VariableDeclaration","scope":9613,"src":"2184:27:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9585,"name":"uint256","nodeType":"ElementaryTypeName","src":"2184:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9593,"initialValue":{"arguments":[{"id":9588,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9479,"src":"2229:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9589,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9512,"src":"2235:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},{"id":9590,"name":"deltaBPTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9553,"src":"2243:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},{"id":9591,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9484,"src":"2254:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"},{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9587,"name":"_zeroOutDeltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10011,"src":"2214:14:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$_t_address_$returns$_t_uint256_$","typeString":"function (address,int256[] memory,int256[] memory,address) returns (uint256)"}},"id":9592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2214:47:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2184:77:36"},{"assignments":[9595],"declarations":[{"constant":false,"id":9595,"mutability":"mutable","name":"delta","nameLocation":"2468:5:36","nodeType":"VariableDeclaration","scope":9613,"src":"2460:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9594,"name":"uint256","nodeType":"ElementaryTypeName","src":"2460:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9603,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"components":[{"id":9599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2477:28:36","subExpression":{"baseExpression":{"id":9596,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9512,"src":"2478:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9598,"indexExpression":{"id":9597,"name":"remainingDeltaIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9586,"src":"2485:19:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2478:27:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":9600,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2476:30:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2507:9:36","memberName":"toUint256","nodeType":"MemberAccess","referencedDeclaration":7928,"src":"2476:40:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$attached_to$_t_int256_$","typeString":"function (int256) pure returns (uint256)"}},"id":9602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2476:42:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2460:58:36"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":9606,"name":"exactAmountsIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9482,"src":"2549:14:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":9608,"indexExpression":{"id":9607,"name":"remainingDeltaIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9586,"src":"2564:19:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2549:35:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":9604,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9595,"src":"2535:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2541:7:36","memberName":"divDown","nodeType":"MemberAccess","referencedDeclaration":3403,"src":"2535:13:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":9609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2535:50:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":9610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2588:1:36","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2535:54:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":9488,"id":9612,"nodeType":"Return","src":"2528:61:36"}]},"functionSelector":"48406a54","id":9614,"implemented":true,"kind":"function","modifiers":[],"name":"calculateAddLiquidityUnbalancedPriceImpact","nameLocation":"1057:42:36","nodeType":"FunctionDefinition","parameters":{"id":9485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9479,"mutability":"mutable","name":"pool","nameLocation":"1117:4:36","nodeType":"VariableDeclaration","scope":9614,"src":"1109:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9478,"name":"address","nodeType":"ElementaryTypeName","src":"1109:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9482,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"1148:14:36","nodeType":"VariableDeclaration","scope":9614,"src":"1131:31:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":9480,"name":"uint256","nodeType":"ElementaryTypeName","src":"1131:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9481,"nodeType":"ArrayTypeName","src":"1131:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":9484,"mutability":"mutable","name":"sender","nameLocation":"1180:6:36","nodeType":"VariableDeclaration","scope":9614,"src":"1172:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9483,"name":"address","nodeType":"ElementaryTypeName","src":"1172:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1099:93:36"},"returnParameters":{"id":9488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9487,"mutability":"mutable","name":"priceImpact","nameLocation":"1219:11:36","nodeType":"VariableDeclaration","scope":9614,"src":"1211:19:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9486,"name":"uint256","nodeType":"ElementaryTypeName","src":"1211:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:21:36"},"scope":10118,"src":"1048:1548:36","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":9649,"nodeType":"Block","src":"2978:441:36","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":9631,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9459,"src":"3079:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}],"id":9630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3071:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9629,"name":"address","nodeType":"ElementaryTypeName","src":"3071:7:36","typeDescriptions":{}}},"id":9632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3071:16:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"expression":{"id":9635,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9459,"src":"3157:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}},"id":9636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3165:27:36","memberName":"queryAddLiquidityUnbalanced","nodeType":"MemberAccess","referencedDeclaration":1192,"src":"3157:35:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_address_$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,uint256[] memory,address,bytes memory) external returns (uint256)"}},"id":9637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3193:8:36","memberName":"selector","nodeType":"MemberAccess","src":"3157:44:36","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":9638,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9616,"src":"3227:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9639,"name":"exactAmountsIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9619,"src":"3257:14:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":9640,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9621,"src":"3297:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"","id":9641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3329:2:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":9633,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3109:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":9634,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3113:18:36","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3109:22:36","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":9642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3109:244:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":9628,"name":"_callAndRevert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9371,"src":"3035:14:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":9643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3035:336:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":9645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3390:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":9644,"name":"uint256","nodeType":"ElementaryTypeName","src":"3390:7:36","typeDescriptions":{}}}],"id":9646,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3389:9:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":9626,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3007:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":9627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3011:6:36","memberName":"decode","nodeType":"MemberAccess","src":"3007:10:36","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":9647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3007:405:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":9625,"id":9648,"nodeType":"Return","src":"2988:424:36"}]},"id":9650,"implemented":true,"kind":"function","modifiers":[],"name":"_queryAddLiquidityUnbalanced","nameLocation":"2829:28:36","nodeType":"FunctionDefinition","parameters":{"id":9622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9616,"mutability":"mutable","name":"pool","nameLocation":"2875:4:36","nodeType":"VariableDeclaration","scope":9650,"src":"2867:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9615,"name":"address","nodeType":"ElementaryTypeName","src":"2867:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9619,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"2906:14:36","nodeType":"VariableDeclaration","scope":9650,"src":"2889:31:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":9617,"name":"uint256","nodeType":"ElementaryTypeName","src":"2889:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9618,"nodeType":"ArrayTypeName","src":"2889:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":9621,"mutability":"mutable","name":"sender","nameLocation":"2938:6:36","nodeType":"VariableDeclaration","scope":9650,"src":"2930:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9620,"name":"address","nodeType":"ElementaryTypeName","src":"2930:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2857:93:36"},"returnParameters":{"id":9625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9624,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9650,"src":"2969:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9623,"name":"uint256","nodeType":"ElementaryTypeName","src":"2969:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2968:9:36"},"scope":10118,"src":"2820:599:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":9686,"nodeType":"Block","src":"3586:446:36","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":9667,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9459,"src":"3687:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}],"id":9666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3679:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9665,"name":"address","nodeType":"ElementaryTypeName","src":"3679:7:36","typeDescriptions":{}}},"id":9668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3679:16:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"expression":{"id":9671,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9459,"src":"3765:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}},"id":9672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3773:32:36","memberName":"queryRemoveLiquidityProportional","nodeType":"MemberAccess","referencedDeclaration":1246,"src":"3765:40:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256,address,bytes memory) external returns (uint256[] memory)"}},"id":9673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3806:8:36","memberName":"selector","nodeType":"MemberAccess","src":"3765:49:36","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":9674,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9652,"src":"3840:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9675,"name":"bptAmountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9654,"src":"3870:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9676,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9656,"src":"3908:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"","id":9677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3940:2:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":9669,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3717:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":9670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3721:18:36","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3717:22:36","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":9678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3717:247:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":9664,"name":"_callAndRevert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9371,"src":"3643:14:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":9679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3643:339:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"baseExpression":{"id":9681,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4001:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":9680,"name":"uint256","nodeType":"ElementaryTypeName","src":"4001:7:36","typeDescriptions":{}}},"id":9682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"4001:9:36","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"type(uint256[] memory)"}}],"id":9683,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4000:11:36","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"type(uint256[] memory)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"type(uint256[] memory)"}],"expression":{"id":9662,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3615:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":9663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3619:6:36","memberName":"decode","nodeType":"MemberAccess","src":"3615:10:36","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":9684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3615:410:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":9661,"id":9685,"nodeType":"Return","src":"3596:429:36"}]},"id":9687,"implemented":true,"kind":"function","modifiers":[],"name":"_queryRemoveLiquidityProportional","nameLocation":"3434:33:36","nodeType":"FunctionDefinition","parameters":{"id":9657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9652,"mutability":"mutable","name":"pool","nameLocation":"3485:4:36","nodeType":"VariableDeclaration","scope":9687,"src":"3477:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9651,"name":"address","nodeType":"ElementaryTypeName","src":"3477:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9654,"mutability":"mutable","name":"bptAmountOut","nameLocation":"3507:12:36","nodeType":"VariableDeclaration","scope":9687,"src":"3499:20:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9653,"name":"uint256","nodeType":"ElementaryTypeName","src":"3499:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":9656,"mutability":"mutable","name":"sender","nameLocation":"3537:6:36","nodeType":"VariableDeclaration","scope":9687,"src":"3529:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9655,"name":"address","nodeType":"ElementaryTypeName","src":"3529:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3467:82:36"},"returnParameters":{"id":9661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9687,"src":"3568:16:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":9658,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9659,"nodeType":"ArrayTypeName","src":"3568:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3567:18:36"},"scope":10118,"src":"3425:607:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":9729,"nodeType":"Block","src":"4230:502:36","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":9709,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9459,"src":"4331:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}],"id":9708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4323:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9707,"name":"address","nodeType":"ElementaryTypeName","src":"4323:7:36","typeDescriptions":{}}},"id":9710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4323:16:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"expression":{"id":9713,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9459,"src":"4409:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}},"id":9714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4417:27:36","memberName":"querySwapSingleTokenExactIn","nodeType":"MemberAccess","referencedDeclaration":1333,"src":"4409:35:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_contract$_IERC20_$6383_$_t_contract$_IERC20_$6383_$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,contract IERC20,contract IERC20,uint256,address,bytes memory) external returns (uint256)"}},"id":9715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4445:8:36","memberName":"selector","nodeType":"MemberAccess","src":"4409:44:36","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":9716,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9689,"src":"4479:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9717,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9692,"src":"4509:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":9718,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9695,"src":"4542:8:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":9719,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9697,"src":"4576:8:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9720,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9699,"src":"4610:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"","id":9721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4642:2:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":9711,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4361:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":9712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4365:18:36","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4361:22:36","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":9722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4361:305:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":9706,"name":"_callAndRevert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9371,"src":"4287:14:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":9723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4287:397:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":9725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4703:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":9724,"name":"uint256","nodeType":"ElementaryTypeName","src":"4703:7:36","typeDescriptions":{}}}],"id":9726,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4702:9:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":9704,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4259:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":9705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4263:6:36","memberName":"decode","nodeType":"MemberAccess","src":"4259:10:36","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":9727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4259:466:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":9703,"id":9728,"nodeType":"Return","src":"4240:485:36"}]},"id":9730,"implemented":true,"kind":"function","modifiers":[],"name":"_querySwapSingleTokenExactIn","nameLocation":"4047:28:36","nodeType":"FunctionDefinition","parameters":{"id":9700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9689,"mutability":"mutable","name":"pool","nameLocation":"4093:4:36","nodeType":"VariableDeclaration","scope":9730,"src":"4085:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9688,"name":"address","nodeType":"ElementaryTypeName","src":"4085:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9692,"mutability":"mutable","name":"tokenIn","nameLocation":"4114:7:36","nodeType":"VariableDeclaration","scope":9730,"src":"4107:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":9691,"nodeType":"UserDefinedTypeName","pathNode":{"id":9690,"name":"IERC20","nameLocations":["4107:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"4107:6:36"},"referencedDeclaration":6383,"src":"4107:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":9695,"mutability":"mutable","name":"tokenOut","nameLocation":"4138:8:36","nodeType":"VariableDeclaration","scope":9730,"src":"4131:15:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":9694,"nodeType":"UserDefinedTypeName","pathNode":{"id":9693,"name":"IERC20","nameLocations":["4131:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"4131:6:36"},"referencedDeclaration":6383,"src":"4131:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":9697,"mutability":"mutable","name":"amountIn","nameLocation":"4164:8:36","nodeType":"VariableDeclaration","scope":9730,"src":"4156:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9696,"name":"uint256","nodeType":"ElementaryTypeName","src":"4156:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":9699,"mutability":"mutable","name":"sender","nameLocation":"4190:6:36","nodeType":"VariableDeclaration","scope":9730,"src":"4182:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9698,"name":"address","nodeType":"ElementaryTypeName","src":"4182:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4075:127:36"},"returnParameters":{"id":9703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9730,"src":"4221:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9701,"name":"uint256","nodeType":"ElementaryTypeName","src":"4221:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4220:9:36"},"scope":10118,"src":"4038:694:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":9772,"nodeType":"Block","src":"4932:504:36","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":9752,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9459,"src":"5033:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}],"id":9751,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5025:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9750,"name":"address","nodeType":"ElementaryTypeName","src":"5025:7:36","typeDescriptions":{}}},"id":9753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5025:16:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"expression":{"id":9756,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9459,"src":"5111:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}},"id":9757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5119:28:36","memberName":"querySwapSingleTokenExactOut","nodeType":"MemberAccess","referencedDeclaration":1353,"src":"5111:36:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_contract$_IERC20_$6383_$_t_contract$_IERC20_$6383_$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,contract IERC20,contract IERC20,uint256,address,bytes memory) external returns (uint256)"}},"id":9758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5148:8:36","memberName":"selector","nodeType":"MemberAccess","src":"5111:45:36","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":9759,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9732,"src":"5182:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9760,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9735,"src":"5212:7:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":9761,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9738,"src":"5245:8:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":9762,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9740,"src":"5279:9:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9763,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9742,"src":"5314:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"","id":9764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5346:2:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":9754,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5063:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":9755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5067:18:36","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"5063:22:36","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":9765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5063:307:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":9749,"name":"_callAndRevert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9371,"src":"4989:14:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":9766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4989:399:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":9768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5407:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":9767,"name":"uint256","nodeType":"ElementaryTypeName","src":"5407:7:36","typeDescriptions":{}}}],"id":9769,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5406:9:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":9747,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4961:3:36","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":9748,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4965:6:36","memberName":"decode","nodeType":"MemberAccess","src":"4961:10:36","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":9770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4961:468:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":9746,"id":9771,"nodeType":"Return","src":"4942:487:36"}]},"id":9773,"implemented":true,"kind":"function","modifiers":[],"name":"_querySwapSingleTokenExactOut","nameLocation":"4747:29:36","nodeType":"FunctionDefinition","parameters":{"id":9743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9732,"mutability":"mutable","name":"pool","nameLocation":"4794:4:36","nodeType":"VariableDeclaration","scope":9773,"src":"4786:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9731,"name":"address","nodeType":"ElementaryTypeName","src":"4786:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9735,"mutability":"mutable","name":"tokenIn","nameLocation":"4815:7:36","nodeType":"VariableDeclaration","scope":9773,"src":"4808:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":9734,"nodeType":"UserDefinedTypeName","pathNode":{"id":9733,"name":"IERC20","nameLocations":["4808:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"4808:6:36"},"referencedDeclaration":6383,"src":"4808:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":9738,"mutability":"mutable","name":"tokenOut","nameLocation":"4839:8:36","nodeType":"VariableDeclaration","scope":9773,"src":"4832:15:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":9737,"nodeType":"UserDefinedTypeName","pathNode":{"id":9736,"name":"IERC20","nameLocations":["4832:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"4832:6:36"},"referencedDeclaration":6383,"src":"4832:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":9740,"mutability":"mutable","name":"amountOut","nameLocation":"4865:9:36","nodeType":"VariableDeclaration","scope":9773,"src":"4857:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9739,"name":"uint256","nodeType":"ElementaryTypeName","src":"4857:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":9742,"mutability":"mutable","name":"sender","nameLocation":"4892:6:36","nodeType":"VariableDeclaration","scope":9773,"src":"4884:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9741,"name":"address","nodeType":"ElementaryTypeName","src":"4884:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4776:128:36"},"returnParameters":{"id":9746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9745,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9773,"src":"4923:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9744,"name":"uint256","nodeType":"ElementaryTypeName","src":"4923:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4922:9:36"},"scope":10118,"src":"4738:698:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":9846,"nodeType":"Block","src":"5847:412:36","statements":[{"assignments":[9791],"declarations":[{"constant":false,"id":9791,"mutability":"mutable","name":"zerosWithSingleDelta","nameLocation":"5874:20:36","nodeType":"VariableDeclaration","scope":9846,"src":"5857:37:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":9789,"name":"uint256","nodeType":"ElementaryTypeName","src":"5857:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9790,"nodeType":"ArrayTypeName","src":"5857:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":9798,"initialValue":{"arguments":[{"expression":{"id":9795,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9780,"src":"5911:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5918:6:36","memberName":"length","nodeType":"MemberAccess","src":"5911:13:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5897:13:36","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":9792,"name":"uint256","nodeType":"ElementaryTypeName","src":"5901:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9793,"nodeType":"ArrayTypeName","src":"5901:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":9797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5897:28:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5857:68:36"},{"assignments":[9800],"declarations":[{"constant":false,"id":9800,"mutability":"mutable","name":"delta","nameLocation":"5942:5:36","nodeType":"VariableDeclaration","scope":9846,"src":"5935:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":9799,"name":"int256","nodeType":"ElementaryTypeName","src":"5935:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":9804,"initialValue":{"baseExpression":{"id":9801,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9780,"src":"5950:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9803,"indexExpression":{"id":9802,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9777,"src":"5957:10:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5950:18:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"5935:33:36"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":9807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9805,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9800,"src":"5983:5:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":9806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5992:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5983:10:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9811,"nodeType":"IfStatement","src":"5979:49:36","trueBody":{"id":9810,"nodeType":"Block","src":"5995:33:36","statements":[{"expression":{"hexValue":"30","id":9808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6016:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":9786,"id":9809,"nodeType":"Return","src":"6009:8:36"}]}},{"expression":{"id":9825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":9812,"name":"zerosWithSingleDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9791,"src":"6038:20:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":9814,"indexExpression":{"id":9813,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9777,"src":"6059:10:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6038:32:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":9819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9817,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9800,"src":"6081:5:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":9818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6089:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6081:9:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":9822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"6101:6:36","subExpression":{"id":9821,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9800,"src":"6102:5:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6081:26:36","trueExpression":{"id":9820,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9800,"src":"6093:5:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":9816,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6073:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":9815,"name":"uint256","nodeType":"ElementaryTypeName","src":"6073:7:36","typeDescriptions":{}}},"id":9824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6073:35:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6038:70:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9826,"nodeType":"ExpressionStatement","src":"6038:70:36"},{"assignments":[9828],"declarations":[{"constant":false,"id":9828,"mutability":"mutable","name":"result","nameLocation":"6125:6:36","nodeType":"VariableDeclaration","scope":9846,"src":"6118:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":9827,"name":"int256","nodeType":"ElementaryTypeName","src":"6118:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":9837,"initialValue":{"arguments":[{"arguments":[{"id":9832,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9775,"src":"6170:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9833,"name":"zerosWithSingleDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9791,"src":"6176:20:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":9834,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9782,"src":"6198:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9831,"name":"_queryAddLiquidityUnbalanced","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9650,"src":"6141:28:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_address_$returns$_t_uint256_$","typeString":"function (address,uint256[] memory,address) returns (uint256)"}},"id":9835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6141:64:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9830,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6134:6:36","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":9829,"name":"int256","nodeType":"ElementaryTypeName","src":"6134:6:36","typeDescriptions":{}}},"id":9836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6134:72:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"6118:88:36"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":9840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9838,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9800,"src":"6224:5:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":9839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6232:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6224:9:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":9843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"6245:7:36","subExpression":{"id":9842,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9828,"src":"6246:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6224:28:36","trueExpression":{"id":9841,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9828,"src":"6236:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":9786,"id":9845,"nodeType":"Return","src":"6217:35:36"}]},"id":9847,"implemented":true,"kind":"function","modifiers":[],"name":"_queryAddLiquidityUnbalancedForTokenDeltas","nameLocation":"5666:42:36","nodeType":"FunctionDefinition","parameters":{"id":9783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9775,"mutability":"mutable","name":"pool","nameLocation":"5726:4:36","nodeType":"VariableDeclaration","scope":9847,"src":"5718:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9774,"name":"address","nodeType":"ElementaryTypeName","src":"5718:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9777,"mutability":"mutable","name":"tokenIndex","nameLocation":"5748:10:36","nodeType":"VariableDeclaration","scope":9847,"src":"5740:18:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9776,"name":"uint256","nodeType":"ElementaryTypeName","src":"5740:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":9780,"mutability":"mutable","name":"deltas","nameLocation":"5784:6:36","nodeType":"VariableDeclaration","scope":9847,"src":"5768:22:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":9778,"name":"int256","nodeType":"ElementaryTypeName","src":"5768:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9779,"nodeType":"ArrayTypeName","src":"5768:8:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":9782,"mutability":"mutable","name":"sender","nameLocation":"5808:6:36","nodeType":"VariableDeclaration","scope":9847,"src":"5800:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9781,"name":"address","nodeType":"ElementaryTypeName","src":"5800:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5708:112:36"},"returnParameters":{"id":9786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9847,"src":"5839:6:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":9784,"name":"int256","nodeType":"ElementaryTypeName","src":"5839:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"5838:8:36"},"scope":10118,"src":"5657:602:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":10010,"nodeType":"Block","src":"6435:1945:36","statements":[{"assignments":[9863],"declarations":[{"constant":false,"id":9863,"mutability":"mutable","name":"maxNegativeDeltaIndex","nameLocation":"6524:21:36","nodeType":"VariableDeclaration","scope":10010,"src":"6516:29:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9862,"name":"uint256","nodeType":"ElementaryTypeName","src":"6516:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9865,"initialValue":{"hexValue":"30","id":9864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6516:33:36"},{"assignments":[9870],"declarations":[{"constant":false,"id":9870,"mutability":"mutable","name":"poolTokens","nameLocation":"6575:10:36","nodeType":"VariableDeclaration","scope":10010,"src":"6559:26:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":9868,"nodeType":"UserDefinedTypeName","pathNode":{"id":9867,"name":"IERC20","nameLocations":["6559:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"6559:6:36"},"referencedDeclaration":6383,"src":"6559:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":9869,"nodeType":"ArrayTypeName","src":"6559:8:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"id":9875,"initialValue":{"arguments":[{"id":9873,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9849,"src":"6609:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":9871,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9456,"src":"6588:6:36","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"id":9872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6595:13:36","memberName":"getPoolTokens","nodeType":"MemberAccess","referencedDeclaration":2426,"src":"6588:20:36","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr_$","typeString":"function (address) view external returns (contract IERC20[] memory)"}},"id":9874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6588:26:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"nodeType":"VariableDeclarationStatement","src":"6559:55:36"},{"body":{"id":10006,"nodeType":"Block","src":"6673:1662:36","statements":[{"assignments":[9890],"declarations":[{"constant":false,"id":9890,"mutability":"mutable","name":"minPositiveDeltaIndex","nameLocation":"6762:21:36","nodeType":"VariableDeclaration","scope":10006,"src":"6754:29:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9889,"name":"uint256","nodeType":"ElementaryTypeName","src":"6754:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9894,"initialValue":{"arguments":[{"id":9892,"name":"deltaBPTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9855,"src":"6804:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}],"id":9891,"name":"_minPositiveIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10064,"src":"6786:17:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_int256_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (int256[] memory) pure returns (uint256)"}},"id":9893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6786:28:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6754:60:36"},{"expression":{"id":9899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9895,"name":"maxNegativeDeltaIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9863,"src":"6828:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":9897,"name":"deltaBPTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9855,"src":"6870:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}],"id":9896,"name":"_maxNegativeIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10117,"src":"6852:17:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_int256_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (int256[] memory) pure returns (uint256)"}},"id":9898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6852:28:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6828:52:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9900,"nodeType":"ExpressionStatement","src":"6828:52:36"},{"assignments":[9902],"declarations":[{"constant":false,"id":9902,"mutability":"mutable","name":"givenTokenIndex","nameLocation":"6903:15:36","nodeType":"VariableDeclaration","scope":10006,"src":"6895:23:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9901,"name":"uint256","nodeType":"ElementaryTypeName","src":"6895:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9903,"nodeType":"VariableDeclarationStatement","src":"6895:23:36"},{"assignments":[9905],"declarations":[{"constant":false,"id":9905,"mutability":"mutable","name":"resultTokenIndex","nameLocation":"6940:16:36","nodeType":"VariableDeclaration","scope":10006,"src":"6932:24:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9904,"name":"uint256","nodeType":"ElementaryTypeName","src":"6932:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9906,"nodeType":"VariableDeclarationStatement","src":"6932:24:36"},{"assignments":[9908],"declarations":[{"constant":false,"id":9908,"mutability":"mutable","name":"resultAmount","nameLocation":"6978:12:36","nodeType":"VariableDeclaration","scope":10006,"src":"6970:20:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9907,"name":"uint256","nodeType":"ElementaryTypeName","src":"6970:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9909,"nodeType":"VariableDeclarationStatement","src":"6970:20:36"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":9917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":9910,"name":"deltaBPTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9855,"src":"7009:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9912,"indexExpression":{"id":9911,"name":"minPositiveDeltaIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9890,"src":"7019:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7009:32:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":9916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"7044:33:36","subExpression":{"baseExpression":{"id":9913,"name":"deltaBPTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9855,"src":"7045:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9915,"indexExpression":{"id":9914,"name":"maxNegativeDeltaIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9863,"src":"7055:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7045:32:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"7009:68:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":9973,"nodeType":"Block","src":"7504:423:36","statements":[{"expression":{"id":9947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9945,"name":"givenTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9902,"src":"7522:15:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9946,"name":"maxNegativeDeltaIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9863,"src":"7540:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7522:39:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9948,"nodeType":"ExpressionStatement","src":"7522:39:36"},{"expression":{"id":9951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9949,"name":"resultTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9905,"src":"7579:16:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9950,"name":"minPositiveDeltaIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9890,"src":"7598:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7579:40:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9952,"nodeType":"ExpressionStatement","src":"7579:40:36"},{"expression":{"id":9971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9953,"name":"resultAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9908,"src":"7637:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":9955,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9849,"src":"7703:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":9956,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9870,"src":"7729:10:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":9958,"indexExpression":{"id":9957,"name":"resultTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9905,"src":"7740:16:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7729:28:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"baseExpression":{"id":9959,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9870,"src":"7779:10:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":9961,"indexExpression":{"id":9960,"name":"givenTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9902,"src":"7790:15:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7779:27:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"components":[{"id":9965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"7829:24:36","subExpression":{"baseExpression":{"id":9962,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9852,"src":"7830:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9964,"indexExpression":{"id":9963,"name":"givenTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9902,"src":"7837:15:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7830:23:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":9966,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7828:26:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7855:9:36","memberName":"toUint256","nodeType":"MemberAccess","referencedDeclaration":7928,"src":"7828:36:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$attached_to$_t_int256_$","typeString":"function (int256) pure returns (uint256)"}},"id":9968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7828:38:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9969,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9857,"src":"7888:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9954,"name":"_querySwapSingleTokenExactOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9773,"src":"7652:29:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_contract$_IERC20_$6383_$_t_contract$_IERC20_$6383_$_t_uint256_$_t_address_$returns$_t_uint256_$","typeString":"function (address,contract IERC20,contract IERC20,uint256,address) returns (uint256)"}},"id":9970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7652:260:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7637:275:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9972,"nodeType":"ExpressionStatement","src":"7637:275:36"}]},"id":9974,"nodeType":"IfStatement","src":"7005:922:36","trueBody":{"id":9944,"nodeType":"Block","src":"7079:419:36","statements":[{"expression":{"id":9920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9918,"name":"givenTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9902,"src":"7097:15:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9919,"name":"minPositiveDeltaIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9890,"src":"7115:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7097:39:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9921,"nodeType":"ExpressionStatement","src":"7097:39:36"},{"expression":{"id":9924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9922,"name":"resultTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9905,"src":"7154:16:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9923,"name":"maxNegativeDeltaIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9863,"src":"7173:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7154:40:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9925,"nodeType":"ExpressionStatement","src":"7154:40:36"},{"expression":{"id":9942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9926,"name":"resultAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9908,"src":"7212:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":9928,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9849,"src":"7277:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":9929,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9870,"src":"7303:10:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":9931,"indexExpression":{"id":9930,"name":"givenTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9902,"src":"7314:15:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7303:27:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"baseExpression":{"id":9932,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9870,"src":"7352:10:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":9934,"indexExpression":{"id":9933,"name":"resultTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9905,"src":"7363:16:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7352:28:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":9935,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9852,"src":"7402:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9937,"indexExpression":{"id":9936,"name":"givenTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9902,"src":"7409:15:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7402:23:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7426:9:36","memberName":"toUint256","nodeType":"MemberAccess","referencedDeclaration":7928,"src":"7402:33:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$attached_to$_t_int256_$","typeString":"function (int256) pure returns (uint256)"}},"id":9939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7402:35:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9940,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9857,"src":"7459:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9927,"name":"_querySwapSingleTokenExactIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9730,"src":"7227:28:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_contract$_IERC20_$6383_$_t_contract$_IERC20_$6383_$_t_uint256_$_t_address_$returns$_t_uint256_$","typeString":"function (address,contract IERC20,contract IERC20,uint256,address) returns (uint256)"}},"id":9941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7227:256:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7212:271:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9943,"nodeType":"ExpressionStatement","src":"7212:271:36"}]}},{"expression":{"id":9979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":9975,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9852,"src":"7984:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9977,"indexExpression":{"id":9976,"name":"givenTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9902,"src":"7991:15:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7984:23:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":9978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8010:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7984:27:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9980,"nodeType":"ExpressionStatement","src":"7984:27:36"},{"expression":{"id":9985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":9981,"name":"deltaBPTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9855,"src":"8025:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9983,"indexExpression":{"id":9982,"name":"givenTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9902,"src":"8035:15:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8025:26:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":9984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8054:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8025:30:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9986,"nodeType":"ExpressionStatement","src":"8025:30:36"},{"expression":{"id":9993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":9987,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9852,"src":"8069:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9989,"indexExpression":{"id":9988,"name":"resultTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9905,"src":"8076:16:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8069:24:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":9990,"name":"resultAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9908,"src":"8097:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8110:8:36","memberName":"toInt256","nodeType":"MemberAccess","referencedDeclaration":8764,"src":"8097:21:36","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_int256_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (int256)"}},"id":9992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8097:23:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"8069:51:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9994,"nodeType":"ExpressionStatement","src":"8069:51:36"},{"expression":{"id":10004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":9995,"name":"deltaBPTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9855,"src":"8134:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9997,"indexExpression":{"id":9996,"name":"resultTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9905,"src":"8144:16:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8134:27:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":9999,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9849,"src":"8224:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10000,"name":"resultTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9905,"src":"8246:16:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":10001,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9852,"src":"8280:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},{"id":10002,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9857,"src":"8304:6:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9998,"name":"_queryAddLiquidityUnbalancedForTokenDeltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9847,"src":"8164:42:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_array$_t_int256_$dyn_memory_ptr_$_t_address_$returns$_t_int256_$","typeString":"function (address,uint256,int256[] memory,address) returns (int256)"}},"id":10003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8164:160:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"8134:190:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":10005,"nodeType":"ExpressionStatement","src":"8134:190:36"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9880,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9877,"src":"6645:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":9881,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9852,"src":"6649:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":9882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6656:6:36","memberName":"length","nodeType":"MemberAccess","src":"6649:13:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":9883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6665:1:36","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6649:17:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6645:21:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10007,"initializationExpression":{"assignments":[9877],"declarations":[{"constant":false,"id":9877,"mutability":"mutable","name":"i","nameLocation":"6638:1:36","nodeType":"VariableDeclaration","scope":10007,"src":"6630:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9876,"name":"uint256","nodeType":"ElementaryTypeName","src":"6630:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9879,"initialValue":{"hexValue":"30","id":9878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6642:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6630:13:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":9887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6668:3:36","subExpression":{"id":9886,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9877,"src":"6668:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9888,"nodeType":"ExpressionStatement","src":"6668:3:36"},"nodeType":"ForStatement","src":"6625:1710:36"},{"expression":{"id":10008,"name":"maxNegativeDeltaIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9863,"src":"8352:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":9861,"id":10009,"nodeType":"Return","src":"8345:28:36"}]},"id":10011,"implemented":true,"kind":"function","modifiers":[],"name":"_zeroOutDeltas","nameLocation":"6274:14:36","nodeType":"FunctionDefinition","parameters":{"id":9858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9849,"mutability":"mutable","name":"pool","nameLocation":"6306:4:36","nodeType":"VariableDeclaration","scope":10011,"src":"6298:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9848,"name":"address","nodeType":"ElementaryTypeName","src":"6298:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9852,"mutability":"mutable","name":"deltas","nameLocation":"6336:6:36","nodeType":"VariableDeclaration","scope":10011,"src":"6320:22:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":9850,"name":"int256","nodeType":"ElementaryTypeName","src":"6320:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9851,"nodeType":"ArrayTypeName","src":"6320:8:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":9855,"mutability":"mutable","name":"deltaBPTs","nameLocation":"6368:9:36","nodeType":"VariableDeclaration","scope":10011,"src":"6352:25:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":9853,"name":"int256","nodeType":"ElementaryTypeName","src":"6352:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9854,"nodeType":"ArrayTypeName","src":"6352:8:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":9857,"mutability":"mutable","name":"sender","nameLocation":"6395:6:36","nodeType":"VariableDeclaration","scope":10011,"src":"6387:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9856,"name":"address","nodeType":"ElementaryTypeName","src":"6387:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6288:119:36"},"returnParameters":{"id":9861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":10011,"src":"6426:7:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9859,"name":"uint256","nodeType":"ElementaryTypeName","src":"6426:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6425:9:36"},"scope":10118,"src":"6265:2115:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":10063,"nodeType":"Block","src":"8576:232:36","statements":[{"assignments":[10020],"declarations":[{"constant":false,"id":10020,"mutability":"mutable","name":"min","nameLocation":"8593:3:36","nodeType":"VariableDeclaration","scope":10063,"src":"8586:10:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":10019,"name":"int256","nodeType":"ElementaryTypeName","src":"8586:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":10026,"initialValue":{"expression":{"arguments":[{"id":10023,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8604:6:36","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":10022,"name":"int256","nodeType":"ElementaryTypeName","src":"8604:6:36","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":10021,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8599:4:36","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":10024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8599:12:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":10025,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8612:3:36","memberName":"max","nodeType":"MemberAccess","src":"8599:16:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"8586:29:36"},{"body":{"id":10061,"nodeType":"Block","src":"8668:134:36","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":10048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":10042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":10038,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10014,"src":"8686:5:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":10040,"indexExpression":{"id":10039,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10028,"src":"8692:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8686:8:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":10041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8686:12:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":10047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":10043,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10014,"src":"8702:5:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":10045,"indexExpression":{"id":10044,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10028,"src":"8708:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8702:8:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":10046,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10020,"src":"8713:3:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"8702:14:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8686:30:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10060,"nodeType":"IfStatement","src":"8682:110:36","trueBody":{"id":10059,"nodeType":"Block","src":"8718:74:36","statements":[{"expression":{"id":10053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":10049,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10020,"src":"8736:3:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":10050,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10014,"src":"8742:5:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":10052,"indexExpression":{"id":10051,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10028,"src":"8748:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8742:8:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"8736:14:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":10054,"nodeType":"ExpressionStatement","src":"8736:14:36"},{"expression":{"id":10057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":10055,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10017,"src":"8768:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":10056,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10028,"src":"8776:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8768:9:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10058,"nodeType":"ExpressionStatement","src":"8768:9:36"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":10034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":10031,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10028,"src":"8645:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":10032,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10014,"src":"8649:5:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":10033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8655:6:36","memberName":"length","nodeType":"MemberAccess","src":"8649:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8645:16:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10062,"initializationExpression":{"assignments":[10028],"declarations":[{"constant":false,"id":10028,"mutability":"mutable","name":"i","nameLocation":"8638:1:36","nodeType":"VariableDeclaration","scope":10062,"src":"8630:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10027,"name":"uint256","nodeType":"ElementaryTypeName","src":"8630:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":10030,"initialValue":{"hexValue":"30","id":10029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8642:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8630:13:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":10036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8663:3:36","subExpression":{"id":10035,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10028,"src":"8663:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10037,"nodeType":"ExpressionStatement","src":"8663:3:36"},"nodeType":"ForStatement","src":"8625:177:36"}]},"id":10064,"implemented":true,"kind":"function","modifiers":[],"name":"_minPositiveIndex","nameLocation":"8497:17:36","nodeType":"FunctionDefinition","parameters":{"id":10015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10014,"mutability":"mutable","name":"array","nameLocation":"8531:5:36","nodeType":"VariableDeclaration","scope":10064,"src":"8515:21:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":10012,"name":"int256","nodeType":"ElementaryTypeName","src":"8515:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":10013,"nodeType":"ArrayTypeName","src":"8515:8:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"src":"8514:23:36"},"returnParameters":{"id":10018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10017,"mutability":"mutable","name":"index","nameLocation":"8569:5:36","nodeType":"VariableDeclaration","scope":10064,"src":"8561:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10016,"name":"uint256","nodeType":"ElementaryTypeName","src":"8561:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8560:15:36"},"scope":10118,"src":"8488:320:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":10116,"nodeType":"Block","src":"9003:232:36","statements":[{"assignments":[10073],"declarations":[{"constant":false,"id":10073,"mutability":"mutable","name":"max","nameLocation":"9020:3:36","nodeType":"VariableDeclaration","scope":10116,"src":"9013:10:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":10072,"name":"int256","nodeType":"ElementaryTypeName","src":"9013:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":10079,"initialValue":{"expression":{"arguments":[{"id":10076,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9031:6:36","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":10075,"name":"int256","nodeType":"ElementaryTypeName","src":"9031:6:36","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":10074,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9026:4:36","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":10077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9026:12:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":10078,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9039:3:36","memberName":"min","nodeType":"MemberAccess","src":"9026:16:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"9013:29:36"},{"body":{"id":10114,"nodeType":"Block","src":"9095:134:36","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":10101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":10095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":10091,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10067,"src":"9113:5:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":10093,"indexExpression":{"id":10092,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10081,"src":"9119:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9113:8:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":10094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9124:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9113:12:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":10100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":10096,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10067,"src":"9129:5:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":10098,"indexExpression":{"id":10097,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10081,"src":"9135:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9129:8:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":10099,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10073,"src":"9140:3:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9129:14:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9113:30:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10113,"nodeType":"IfStatement","src":"9109:110:36","trueBody":{"id":10112,"nodeType":"Block","src":"9145:74:36","statements":[{"expression":{"id":10106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":10102,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10073,"src":"9163:3:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":10103,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10067,"src":"9169:5:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":10105,"indexExpression":{"id":10104,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10081,"src":"9175:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9169:8:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9163:14:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":10107,"nodeType":"ExpressionStatement","src":"9163:14:36"},{"expression":{"id":10110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":10108,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10070,"src":"9195:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":10109,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10081,"src":"9203:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9195:9:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10111,"nodeType":"ExpressionStatement","src":"9195:9:36"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":10087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":10084,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10081,"src":"9072:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":10085,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10067,"src":"9076:5:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},"id":10086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9082:6:36","memberName":"length","nodeType":"MemberAccess","src":"9076:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9072:16:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10115,"initializationExpression":{"assignments":[10081],"declarations":[{"constant":false,"id":10081,"mutability":"mutable","name":"i","nameLocation":"9065:1:36","nodeType":"VariableDeclaration","scope":10115,"src":"9057:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10080,"name":"uint256","nodeType":"ElementaryTypeName","src":"9057:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":10083,"initialValue":{"hexValue":"30","id":10082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9069:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9057:13:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":10089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9090:3:36","subExpression":{"id":10088,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10081,"src":"9090:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10090,"nodeType":"ExpressionStatement","src":"9090:3:36"},"nodeType":"ForStatement","src":"9052:177:36"}]},"id":10117,"implemented":true,"kind":"function","modifiers":[],"name":"_maxNegativeIndex","nameLocation":"8924:17:36","nodeType":"FunctionDefinition","parameters":{"id":10068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10067,"mutability":"mutable","name":"array","nameLocation":"8958:5:36","nodeType":"VariableDeclaration","scope":10117,"src":"8942:21:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":10065,"name":"int256","nodeType":"ElementaryTypeName","src":"8942:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":10066,"nodeType":"ArrayTypeName","src":"8942:8:36","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"src":"8941:23:36"},"returnParameters":{"id":10071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10070,"mutability":"mutable","name":"index","nameLocation":"8996:5:36","nodeType":"VariableDeclaration","scope":10117,"src":"8988:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10069,"name":"uint256","nodeType":"ElementaryTypeName","src":"8988:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8987:15:36"},"scope":10118,"src":"8915:320:36","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":10119,"src":"537:8700:36","usedErrors":[3240,3243,6748,6751,7025,7037,9334],"usedEvents":[]}],"src":"46:9192:36"},"id":36},"contracts/ProtocolFeeSweeper.sol":{"ast":{"absolutePath":"contracts/ProtocolFeeSweeper.sol","exportedSymbols":{"IERC20":[6383],"IProtocolFeeBurner":[239],"IProtocolFeeController":[857],"IProtocolFeeSweeper":[352],"IVault":[1392],"ProtocolFeeSweeper":[10763],"ReentrancyGuardTransient":[5046],"SafeERC20":[6735],"SingletonAuthentication":[5483]},"id":10764,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":10120,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:37"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":10122,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10764,"sourceUnit":6736,"src":"72:84:37","symbolAliases":[{"foreign":{"id":10121,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6735,"src":"81:9:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":10124,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10764,"sourceUnit":6384,"src":"157:72:37","symbolAliases":[{"foreign":{"id":10123,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"166:6:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeSweeper.sol","file":"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeSweeper.sol","id":10126,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10764,"sourceUnit":353,"src":"231:118:37","symbolAliases":[{"foreign":{"id":10125,"name":"IProtocolFeeSweeper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"240:19:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol","file":"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol","id":10128,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10764,"sourceUnit":240,"src":"350:116:37","symbolAliases":[{"foreign":{"id":10127,"name":"IProtocolFeeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"359:18:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","id":10130,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10764,"sourceUnit":858,"src":"467:113:37","symbolAliases":[{"foreign":{"id":10129,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"476:22:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","id":10132,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10764,"sourceUnit":1393,"src":"581:81:37","symbolAliases":[{"foreign":{"id":10131,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"590:6:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol","file":"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol","id":10134,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10764,"sourceUnit":5484,"src":"664:104:37","symbolAliases":[{"foreign":{"id":10133,"name":"SingletonAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5483,"src":"673:23:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol","file":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol","id":10136,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10764,"sourceUnit":5047,"src":"769:132:37","symbolAliases":[{"foreign":{"id":10135,"name":"ReentrancyGuardTransient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5046,"src":"782:24:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":10138,"name":"IProtocolFeeSweeper","nameLocations":["1762:19:37"],"nodeType":"IdentifierPath","referencedDeclaration":352,"src":"1762:19:37"},"id":10139,"nodeType":"InheritanceSpecifier","src":"1762:19:37"},{"baseName":{"id":10140,"name":"SingletonAuthentication","nameLocations":["1783:23:37"],"nodeType":"IdentifierPath","referencedDeclaration":5483,"src":"1783:23:37"},"id":10141,"nodeType":"InheritanceSpecifier","src":"1783:23:37"},{"baseName":{"id":10142,"name":"ReentrancyGuardTransient","nameLocations":["1808:24:37"],"nodeType":"IdentifierPath","referencedDeclaration":5046,"src":"1808:24:37"},"id":10143,"nodeType":"InheritanceSpecifier","src":"1808:24:37"}],"canonicalName":"ProtocolFeeSweeper","contractDependencies":[],"contractKind":"contract","documentation":{"id":10137,"nodeType":"StructuredDocumentation","src":"903:827:37","text":" @notice Withdraw protocol fees, convert them to a target token, and forward to a recipient.\n @dev This withdraws all protocol fees previously collected and allocated to the protocol by the\n `ProtocolFeeController`, processes them with a configurable \"burner\" (e.g., from CowSwap) and forwards them to\n a recipient address.\n An off-chain process can call `collectAggregateFees(pool)` on the fee controller for a given pool, which will\n collect and allocate the fees to the protocol and pool creator. `getProtocolFeeAmounts(pool)` returns the fee\n amounts available for withdrawal. If these are great enough, `sweepProtocolFees(pool)` here will withdraw,\n convert, and forward them to the final recipient. There is also a `sweepProtocolFeesForToken` function to\n target a single token within a pool."},"fullyImplemented":true,"id":10763,"linearizedBaseContracts":[10763,5046,5483,3232,14,352],"name":"ProtocolFeeSweeper","nameLocation":"1740:18:37","nodeType":"ContractDefinition","nodes":[{"global":false,"id":10147,"libraryName":{"id":10144,"name":"SafeERC20","nameLocations":["1845:9:37"],"nodeType":"IdentifierPath","referencedDeclaration":6735,"src":"1845:9:37"},"nodeType":"UsingForDirective","src":"1839:27:37","typeName":{"id":10146,"nodeType":"UserDefinedTypeName","pathNode":{"id":10145,"name":"IERC20","nameLocations":["1859:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"1859:6:37"},"referencedDeclaration":6383,"src":"1859:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}}},{"documentation":{"id":10148,"nodeType":"StructuredDocumentation","src":"1872:78:37","text":"@notice All pool tokens are ERC20, so this contract should not handle ETH."},"errorSelector":"f2238896","id":10150,"name":"CannotReceiveEth","nameLocation":"1961:16:37","nodeType":"ErrorDefinition","parameters":{"id":10149,"nodeType":"ParameterList","parameters":[],"src":"1977:2:37"},"src":"1955:25:37"},{"constant":false,"id":10153,"mutability":"mutable","name":"_targetToken","nameLocation":"2112:12:37","nodeType":"VariableDeclaration","scope":10763,"src":"2097:27:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":10152,"nodeType":"UserDefinedTypeName","pathNode":{"id":10151,"name":"IERC20","nameLocations":["2097:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2097:6:37"},"referencedDeclaration":6383,"src":"2097:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"private"},{"constant":false,"id":10155,"mutability":"mutable","name":"_feeRecipient","nameLocation":"2204:13:37","nodeType":"VariableDeclaration","scope":10763,"src":"2188:29:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10154,"name":"address","nodeType":"ElementaryTypeName","src":"2188:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":10158,"mutability":"mutable","name":"_protocolFeeBurner","nameLocation":"2342:18:37","nodeType":"VariableDeclaration","scope":10763,"src":"2315:45:37","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"},"typeName":{"id":10157,"nodeType":"UserDefinedTypeName","pathNode":{"id":10156,"name":"IProtocolFeeBurner","nameLocations":["2315:18:37"],"nodeType":"IdentifierPath","referencedDeclaration":239,"src":"2315:18:37"},"referencedDeclaration":239,"src":"2315:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"visibility":"private"},{"body":{"id":10173,"nodeType":"Block","src":"2547:47:37","statements":[{"expression":{"arguments":[{"id":10170,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10163,"src":"2574:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":10169,"name":"_setFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10636,"src":"2557:16:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":10171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2557:30:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10172,"nodeType":"ExpressionStatement","src":"2557:30:37"}]},"id":10174,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":10166,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10161,"src":"2540:5:37","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}}],"id":10167,"kind":"baseConstructorSpecifier","modifierName":{"id":10165,"name":"SingletonAuthentication","nameLocations":["2516:23:37"],"nodeType":"IdentifierPath","referencedDeclaration":5483,"src":"2516:23:37"},"nodeType":"ModifierInvocation","src":"2516:30:37"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":10164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10161,"mutability":"mutable","name":"vault","nameLocation":"2487:5:37","nodeType":"VariableDeclaration","scope":10174,"src":"2480:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"},"typeName":{"id":10160,"nodeType":"UserDefinedTypeName","pathNode":{"id":10159,"name":"IVault","nameLocations":["2480:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"2480:6:37"},"referencedDeclaration":1392,"src":"2480:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"visibility":"internal"},{"constant":false,"id":10163,"mutability":"mutable","name":"feeRecipient","nameLocation":"2502:12:37","nodeType":"VariableDeclaration","scope":10174,"src":"2494:20:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10162,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2479:36:37"},"returnParameters":{"id":10168,"nodeType":"ParameterList","parameters":[],"src":"2547:0:37"},"scope":10763,"src":"2468:126:37","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[290],"body":{"id":10207,"nodeType":"Block","src":"2741:218:37","statements":[{"assignments":[10189],"declarations":[{"constant":false,"id":10189,"mutability":"mutable","name":"feeBurner","nameLocation":"2770:9:37","nodeType":"VariableDeclaration","scope":10207,"src":"2751:28:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"},"typeName":{"id":10188,"nodeType":"UserDefinedTypeName","pathNode":{"id":10187,"name":"IProtocolFeeBurner","nameLocations":["2751:18:37"],"nodeType":"IdentifierPath","referencedDeclaration":239,"src":"2751:18:37"},"referencedDeclaration":239,"src":"2751:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"visibility":"internal"}],"id":10192,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":10190,"name":"_getValidBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10556,"src":"2782:15:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IProtocolFeeBurner_$239_$","typeString":"function () view returns (contract IProtocolFeeBurner)"}},"id":10191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2782:17:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"nodeType":"VariableDeclarationStatement","src":"2751:48:37"},{"assignments":[10194],"declarations":[{"constant":false,"id":10194,"mutability":"mutable","name":"withdrawnBalance","nameLocation":"2818:16:37","nodeType":"VariableDeclaration","scope":10207,"src":"2810:24:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10193,"name":"uint256","nodeType":"ElementaryTypeName","src":"2810:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":10199,"initialValue":{"arguments":[{"id":10196,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10177,"src":"2867:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10197,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10180,"src":"2873:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}],"id":10195,"name":"_withdrawProtocolFeesForToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10252,"src":"2837:29:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_contract$_IERC20_$6383_$returns$_t_uint256_$","typeString":"function (address,contract IERC20) returns (uint256)"}},"id":10198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2837:45:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2810:72:37"},{"expression":{"arguments":[{"id":10201,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10177,"src":"2908:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10202,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10180,"src":"2914:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":10203,"name":"withdrawnBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10194,"src":"2924:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":10204,"name":"feeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10189,"src":"2942:9:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}],"id":10200,"name":"_sweepFeeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10491,"src":"2893:14:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_contract$_IERC20_$6383_$_t_uint256_$_t_contract$_IProtocolFeeBurner_$239_$returns$__$","typeString":"function (address,contract IERC20,uint256,contract IProtocolFeeBurner)"}},"id":10205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2893:59:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10206,"nodeType":"ExpressionStatement","src":"2893:59:37"}]},"documentation":{"id":10175,"nodeType":"StructuredDocumentation","src":"2600:35:37","text":"@inheritdoc IProtocolFeeSweeper"},"functionSelector":"c414dbd4","id":10208,"implemented":true,"kind":"function","modifiers":[{"id":10183,"kind":"modifierInvocation","modifierName":{"id":10182,"name":"nonReentrant","nameLocations":["2715:12:37"],"nodeType":"IdentifierPath","referencedDeclaration":5001,"src":"2715:12:37"},"nodeType":"ModifierInvocation","src":"2715:12:37"},{"id":10185,"kind":"modifierInvocation","modifierName":{"id":10184,"name":"authenticate","nameLocations":["2728:12:37"],"nodeType":"IdentifierPath","referencedDeclaration":3180,"src":"2728:12:37"},"nodeType":"ModifierInvocation","src":"2728:12:37"}],"name":"sweepProtocolFeesForToken","nameLocation":"2649:25:37","nodeType":"FunctionDefinition","parameters":{"id":10181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10177,"mutability":"mutable","name":"pool","nameLocation":"2683:4:37","nodeType":"VariableDeclaration","scope":10208,"src":"2675:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10176,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":10180,"mutability":"mutable","name":"feeToken","nameLocation":"2696:8:37","nodeType":"VariableDeclaration","scope":10208,"src":"2689:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":10179,"nodeType":"UserDefinedTypeName","pathNode":{"id":10178,"name":"IERC20","nameLocations":["2689:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"2689:6:37"},"referencedDeclaration":6383,"src":"2689:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"2674:31:37"},"returnParameters":{"id":10186,"nodeType":"ParameterList","parameters":[],"src":"2741:0:37"},"scope":10763,"src":"2640:319:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":10251,"nodeType":"Block","src":"3079:620:37","statements":[{"assignments":[10219],"declarations":[{"constant":false,"id":10219,"mutability":"mutable","name":"existingBalance","nameLocation":"3265:15:37","nodeType":"VariableDeclaration","scope":10251,"src":"3257:23:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10218,"name":"uint256","nodeType":"ElementaryTypeName","src":"3257:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":10227,"initialValue":{"arguments":[{"arguments":[{"id":10224,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3310:4:37","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}],"id":10223,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3302:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10222,"name":"address","nodeType":"ElementaryTypeName","src":"3302:7:37","typeDescriptions":{}}},"id":10225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3302:13:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":10220,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10213,"src":"3283:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":10221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3292:9:37","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":6340,"src":"3283:18:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":10226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3283:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3257:59:37"},{"expression":{"arguments":[{"id":10231,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10210,"src":"3581:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":10234,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3595:4:37","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}],"id":10233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3587:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10232,"name":"address","nodeType":"ElementaryTypeName","src":"3587:7:37","typeDescriptions":{}}},"id":10235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3587:13:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10236,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10213,"src":"3602:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":10228,"name":"getProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10569,"src":"3525:24:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IProtocolFeeController_$857_$","typeString":"function () view returns (contract IProtocolFeeController)"}},"id":10229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3525:26:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"}},"id":10230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3552:28:37","memberName":"withdrawProtocolFeesForToken","nodeType":"MemberAccess","referencedDeclaration":842,"src":"3525:55:37","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_contract$_IERC20_$6383_$returns$__$","typeString":"function (address,address,contract IERC20) external"}},"id":10237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3525:86:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10238,"nodeType":"ExpressionStatement","src":"3525:86:37"},{"expression":{"id":10249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":10239,"name":"withdrawnBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10216,"src":"3622:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":10248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":10244,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3668:4:37","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}],"id":10243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3660:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10242,"name":"address","nodeType":"ElementaryTypeName","src":"3660:7:37","typeDescriptions":{}}},"id":10245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3660:13:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":10240,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10213,"src":"3641:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":10241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3650:9:37","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":6340,"src":"3641:18:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":10246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3641:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":10247,"name":"existingBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10219,"src":"3677:15:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3641:51:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3622:70:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10250,"nodeType":"ExpressionStatement","src":"3622:70:37"}]},"id":10252,"implemented":true,"kind":"function","modifiers":[],"name":"_withdrawProtocolFeesForToken","nameLocation":"2974:29:37","nodeType":"FunctionDefinition","parameters":{"id":10214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10210,"mutability":"mutable","name":"pool","nameLocation":"3012:4:37","nodeType":"VariableDeclaration","scope":10252,"src":"3004:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10209,"name":"address","nodeType":"ElementaryTypeName","src":"3004:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":10213,"mutability":"mutable","name":"feeToken","nameLocation":"3025:8:37","nodeType":"VariableDeclaration","scope":10252,"src":"3018:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":10212,"nodeType":"UserDefinedTypeName","pathNode":{"id":10211,"name":"IERC20","nameLocations":["3018:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"3018:6:37"},"referencedDeclaration":6383,"src":"3018:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"3003:31:37"},"returnParameters":{"id":10217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10216,"mutability":"mutable","name":"withdrawnBalance","nameLocation":"3061:16:37","nodeType":"VariableDeclaration","scope":10252,"src":"3053:24:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10215,"name":"uint256","nodeType":"ElementaryTypeName","src":"3053:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3052:26:37"},"scope":10763,"src":"2965:734:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[296],"body":{"id":10304,"nodeType":"Block","src":"3821:321:37","statements":[{"assignments":[10264],"declarations":[{"constant":false,"id":10264,"mutability":"mutable","name":"feeBurner","nameLocation":"3850:9:37","nodeType":"VariableDeclaration","scope":10304,"src":"3831:28:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"},"typeName":{"id":10263,"nodeType":"UserDefinedTypeName","pathNode":{"id":10262,"name":"IProtocolFeeBurner","nameLocations":["3831:18:37"],"nodeType":"IdentifierPath","referencedDeclaration":239,"src":"3831:18:37"},"referencedDeclaration":239,"src":"3831:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"visibility":"internal"}],"id":10267,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":10265,"name":"_getValidBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10556,"src":"3862:15:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IProtocolFeeBurner_$239_$","typeString":"function () view returns (contract IProtocolFeeBurner)"}},"id":10266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3862:17:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"nodeType":"VariableDeclarationStatement","src":"3831:48:37"},{"assignments":[10272,10275],"declarations":[{"constant":false,"id":10272,"mutability":"mutable","name":"poolTokens","nameLocation":"3907:10:37","nodeType":"VariableDeclaration","scope":10304,"src":"3891:26:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":10270,"nodeType":"UserDefinedTypeName","pathNode":{"id":10269,"name":"IERC20","nameLocations":["3891:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"3891:6:37"},"referencedDeclaration":6383,"src":"3891:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":10271,"nodeType":"ArrayTypeName","src":"3891:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":10275,"mutability":"mutable","name":"withdrawnBalances","nameLocation":"3936:17:37","nodeType":"VariableDeclaration","scope":10304,"src":"3919:34:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":10273,"name":"uint256","nodeType":"ElementaryTypeName","src":"3919:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10274,"nodeType":"ArrayTypeName","src":"3919:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":10279,"initialValue":{"arguments":[{"id":10277,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10255,"src":"3979:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":10276,"name":"_withdrawProtocolFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10416,"src":"3957:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address) returns (contract IERC20[] memory,uint256[] memory)"}},"id":10278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3957:27:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(contract IERC20[] memory,uint256[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"3890:94:37"},{"body":{"id":10302,"nodeType":"Block","src":"4043:93:37","statements":[{"expression":{"arguments":[{"id":10292,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10255,"src":"4072:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":10293,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10272,"src":"4078:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":10295,"indexExpression":{"id":10294,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10281,"src":"4089:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4078:13:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"baseExpression":{"id":10296,"name":"withdrawnBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10275,"src":"4093:17:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":10298,"indexExpression":{"id":10297,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10281,"src":"4111:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4093:20:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":10299,"name":"feeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10264,"src":"4115:9:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}],"id":10291,"name":"_sweepFeeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10491,"src":"4057:14:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_contract$_IERC20_$6383_$_t_uint256_$_t_contract$_IProtocolFeeBurner_$239_$returns$__$","typeString":"function (address,contract IERC20,uint256,contract IProtocolFeeBurner)"}},"id":10300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4057:68:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10301,"nodeType":"ExpressionStatement","src":"4057:68:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":10287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":10284,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10281,"src":"4015:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":10285,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10272,"src":"4019:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":10286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4030:6:37","memberName":"length","nodeType":"MemberAccess","src":"4019:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4015:21:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10303,"initializationExpression":{"assignments":[10281],"declarations":[{"constant":false,"id":10281,"mutability":"mutable","name":"i","nameLocation":"4008:1:37","nodeType":"VariableDeclaration","scope":10303,"src":"4000:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10280,"name":"uint256","nodeType":"ElementaryTypeName","src":"4000:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":10283,"initialValue":{"hexValue":"30","id":10282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4012:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4000:13:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":10289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4038:3:37","subExpression":{"id":10288,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10281,"src":"4040:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10290,"nodeType":"ExpressionStatement","src":"4038:3:37"},"nodeType":"ForStatement","src":"3995:141:37"}]},"documentation":{"id":10253,"nodeType":"StructuredDocumentation","src":"3705:35:37","text":"@inheritdoc IProtocolFeeSweeper"},"functionSelector":"5884e804","id":10305,"implemented":true,"kind":"function","modifiers":[{"id":10258,"kind":"modifierInvocation","modifierName":{"id":10257,"name":"nonReentrant","nameLocations":["3795:12:37"],"nodeType":"IdentifierPath","referencedDeclaration":5001,"src":"3795:12:37"},"nodeType":"ModifierInvocation","src":"3795:12:37"},{"id":10260,"kind":"modifierInvocation","modifierName":{"id":10259,"name":"authenticate","nameLocations":["3808:12:37"],"nodeType":"IdentifierPath","referencedDeclaration":3180,"src":"3808:12:37"},"nodeType":"ModifierInvocation","src":"3808:12:37"}],"name":"sweepProtocolFees","nameLocation":"3754:17:37","nodeType":"FunctionDefinition","parameters":{"id":10256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10255,"mutability":"mutable","name":"pool","nameLocation":"3780:4:37","nodeType":"VariableDeclaration","scope":10305,"src":"3772:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10254,"name":"address","nodeType":"ElementaryTypeName","src":"3772:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3771:14:37"},"returnParameters":{"id":10261,"nodeType":"ParameterList","parameters":[],"src":"3821:0:37"},"scope":10763,"src":"3745:397:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":10415,"nodeType":"Block","src":"4289:961:37","statements":[{"expression":{"id":10323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":10317,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10312,"src":"4299:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":10321,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10307,"src":"4337:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":10318,"name":"getVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5427,"src":"4312:8:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IVault_$1392_$","typeString":"function () view returns (contract IVault)"}},"id":10319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4312:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"id":10320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4323:13:37","memberName":"getPoolTokens","nodeType":"MemberAccess","referencedDeclaration":2426,"src":"4312:24:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr_$","typeString":"function (address) view external returns (contract IERC20[] memory)"}},"id":10322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4312:30:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"src":"4299:43:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":10324,"nodeType":"ExpressionStatement","src":"4299:43:37"},{"assignments":[10326],"declarations":[{"constant":false,"id":10326,"mutability":"mutable","name":"numTokens","nameLocation":"4360:9:37","nodeType":"VariableDeclaration","scope":10415,"src":"4352:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10325,"name":"uint256","nodeType":"ElementaryTypeName","src":"4352:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":10329,"initialValue":{"expression":{"id":10327,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10312,"src":"4372:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":10328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4383:6:37","memberName":"length","nodeType":"MemberAccess","src":"4372:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4352:37:37"},{"assignments":[10334],"declarations":[{"constant":false,"id":10334,"mutability":"mutable","name":"existingBalances","nameLocation":"4585:16:37","nodeType":"VariableDeclaration","scope":10415,"src":"4568:33:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":10332,"name":"uint256","nodeType":"ElementaryTypeName","src":"4568:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10333,"nodeType":"ArrayTypeName","src":"4568:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":10340,"initialValue":{"arguments":[{"id":10338,"name":"numTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10326,"src":"4618:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":10337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4604:13:37","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":10335,"name":"uint256","nodeType":"ElementaryTypeName","src":"4608:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10336,"nodeType":"ArrayTypeName","src":"4608:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":10339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4604:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"4568:60:37"},{"body":{"id":10365,"nodeType":"Block","src":"4678:85:37","statements":[{"expression":{"id":10363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":10351,"name":"existingBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10334,"src":"4692:16:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":10353,"indexExpression":{"id":10352,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10342,"src":"4709:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4692:19:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":10360,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4746:4:37","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}],"id":10359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4738:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10358,"name":"address","nodeType":"ElementaryTypeName","src":"4738:7:37","typeDescriptions":{}}},"id":10361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4738:13:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":10354,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10312,"src":"4714:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":10356,"indexExpression":{"id":10355,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10342,"src":"4725:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4714:13:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":10357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4728:9:37","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":6340,"src":"4714:23:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":10362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4714:38:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4692:60:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10364,"nodeType":"ExpressionStatement","src":"4692:60:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":10347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":10345,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10342,"src":"4658:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":10346,"name":"numTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10326,"src":"4662:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4658:13:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10366,"initializationExpression":{"assignments":[10342],"declarations":[{"constant":false,"id":10342,"mutability":"mutable","name":"i","nameLocation":"4651:1:37","nodeType":"VariableDeclaration","scope":10366,"src":"4643:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10341,"name":"uint256","nodeType":"ElementaryTypeName","src":"4643:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":10344,"initialValue":{"hexValue":"30","id":10343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4655:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4643:13:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":10349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4673:3:37","subExpression":{"id":10348,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10342,"src":"4675:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10350,"nodeType":"ExpressionStatement","src":"4673:3:37"},"nodeType":"ForStatement","src":"4638:125:37"},{"expression":{"arguments":[{"id":10370,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10307,"src":"5011:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":10373,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5025:4:37","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}],"id":10372,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5017:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10371,"name":"address","nodeType":"ElementaryTypeName","src":"5017:7:37","typeDescriptions":{}}},"id":10374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5017:13:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":10367,"name":"getProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10569,"src":"4963:24:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IProtocolFeeController_$857_$","typeString":"function () view returns (contract IProtocolFeeController)"}},"id":10368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4963:26:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"}},"id":10369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4990:20:37","memberName":"withdrawProtocolFees","nodeType":"MemberAccess","referencedDeclaration":831,"src":"4963:47:37","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) external"}},"id":10375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4963:68:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10376,"nodeType":"ExpressionStatement","src":"4963:68:37"},{"expression":{"id":10383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":10377,"name":"withdrawnBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10315,"src":"5042:17:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":10381,"name":"numTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10326,"src":"5076:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":10380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5062:13:37","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":10378,"name":"uint256","nodeType":"ElementaryTypeName","src":"5066:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10379,"nodeType":"ArrayTypeName","src":"5066:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":10382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5062:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"5042:44:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":10384,"nodeType":"ExpressionStatement","src":"5042:44:37"},{"body":{"id":10413,"nodeType":"Block","src":"5136:108:37","statements":[{"expression":{"id":10411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":10395,"name":"withdrawnBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10315,"src":"5150:17:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":10397,"indexExpression":{"id":10396,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10386,"src":"5168:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5150:20:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":10410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":10404,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5205:4:37","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}],"id":10403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5197:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10402,"name":"address","nodeType":"ElementaryTypeName","src":"5197:7:37","typeDescriptions":{}}},"id":10405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5197:13:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":10398,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10312,"src":"5173:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":10400,"indexExpression":{"id":10399,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10386,"src":"5184:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5173:13:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":10401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5187:9:37","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":6340,"src":"5173:23:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":10406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5173:38:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"baseExpression":{"id":10407,"name":"existingBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10334,"src":"5214:16:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":10409,"indexExpression":{"id":10408,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10386,"src":"5231:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5214:19:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5173:60:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5150:83:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10412,"nodeType":"ExpressionStatement","src":"5150:83:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":10391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":10389,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10386,"src":"5116:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":10390,"name":"numTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10326,"src":"5120:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5116:13:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10414,"initializationExpression":{"assignments":[10386],"declarations":[{"constant":false,"id":10386,"mutability":"mutable","name":"i","nameLocation":"5109:1:37","nodeType":"VariableDeclaration","scope":10414,"src":"5101:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10385,"name":"uint256","nodeType":"ElementaryTypeName","src":"5101:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":10388,"initialValue":{"hexValue":"30","id":10387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5113:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5101:13:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":10393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5131:3:37","subExpression":{"id":10392,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10386,"src":"5133:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10394,"nodeType":"ExpressionStatement","src":"5131:3:37"},"nodeType":"ForStatement","src":"5096:148:37"}]},"id":10416,"implemented":true,"kind":"function","modifiers":[],"name":"_withdrawProtocolFees","nameLocation":"4157:21:37","nodeType":"FunctionDefinition","parameters":{"id":10308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10307,"mutability":"mutable","name":"pool","nameLocation":"4196:4:37","nodeType":"VariableDeclaration","scope":10416,"src":"4188:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10306,"name":"address","nodeType":"ElementaryTypeName","src":"4188:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4178:28:37"},"returnParameters":{"id":10316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10312,"mutability":"mutable","name":"poolTokens","nameLocation":"4241:10:37","nodeType":"VariableDeclaration","scope":10416,"src":"4225:26:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":10310,"nodeType":"UserDefinedTypeName","pathNode":{"id":10309,"name":"IERC20","nameLocations":["4225:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"4225:6:37"},"referencedDeclaration":6383,"src":"4225:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":10311,"nodeType":"ArrayTypeName","src":"4225:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":10315,"mutability":"mutable","name":"withdrawnBalances","nameLocation":"4270:17:37","nodeType":"VariableDeclaration","scope":10416,"src":"4253:34:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":10313,"name":"uint256","nodeType":"ElementaryTypeName","src":"4253:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10314,"nodeType":"ArrayTypeName","src":"4253:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4224:64:37"},"scope":10763,"src":"4148:1102:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":10490,"nodeType":"Block","src":"5536:1042:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":10431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":10429,"name":"withdrawnTokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10423,"src":"5593:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":10430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5618:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5593:26:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10434,"nodeType":"IfStatement","src":"5589:63:37","trueBody":{"id":10433,"nodeType":"Block","src":"5621:31:37","statements":[{"functionReturnParameters":10428,"id":10432,"nodeType":"Return","src":"5635:7:37"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":10443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":10437,"name":"feeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10426,"src":"5759:9:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}],"id":10436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5751:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10435,"name":"address","nodeType":"ElementaryTypeName","src":"5751:7:37","typeDescriptions":{}}},"id":10438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5751:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":10441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5781:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":10440,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5773:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10439,"name":"address","nodeType":"ElementaryTypeName","src":"5773:7:37","typeDescriptions":{}}},"id":10442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5773:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5751:32:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":10488,"nodeType":"Block","src":"5872:700:37","statements":[{"assignments":[10453],"declarations":[{"constant":false,"id":10453,"mutability":"mutable","name":"targetToken","nameLocation":"5893:11:37","nodeType":"VariableDeclaration","scope":10488,"src":"5886:18:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":10452,"nodeType":"UserDefinedTypeName","pathNode":{"id":10451,"name":"IERC20","nameLocations":["5886:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"5886:6:37"},"referencedDeclaration":6383,"src":"5886:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"id":10455,"initialValue":{"id":10454,"name":"_targetToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10153,"src":"5907:12:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"5886:33:37"},{"condition":{"commonType":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"id":10458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":10456,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10421,"src":"6038:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":10457,"name":"targetToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10453,"src":"6050:11:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"src":"6038:23:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":10486,"nodeType":"Block","src":"6158:404:37","statements":[{"expression":{"arguments":[{"arguments":[{"id":10471,"name":"feeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10426,"src":"6318:9:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}],"id":10470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6310:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10469,"name":"address","nodeType":"ElementaryTypeName","src":"6310:7:37","typeDescriptions":{}}},"id":10472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6310:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10473,"name":"withdrawnTokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10423,"src":"6330:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":10466,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10421,"src":"6288:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":10468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6297:12:37","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":6495,"src":"6288:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6383_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$6383_$","typeString":"function (contract IERC20,address,uint256)"}},"id":10474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6288:64:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10475,"nodeType":"ExpressionStatement","src":"6288:64:37"},{"expression":{"arguments":[{"id":10479,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10418,"src":"6481:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10480,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10421,"src":"6487:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":10481,"name":"withdrawnTokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10423,"src":"6497:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":10482,"name":"targetToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10453,"src":"6520:11:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":10483,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10155,"src":"6533:13:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":10476,"name":"feeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10426,"src":"6466:9:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"id":10478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6476:4:37","memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":238,"src":"6466:14:37","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_contract$_IERC20_$6383_$_t_uint256_$_t_contract$_IERC20_$6383_$_t_address_$returns$__$","typeString":"function (address,contract IERC20,uint256,contract IERC20,address) external"}},"id":10484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6466:81:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10485,"nodeType":"ExpressionStatement","src":"6466:81:37"}]},"id":10487,"nodeType":"IfStatement","src":"6034:528:37","trueBody":{"id":10465,"nodeType":"Block","src":"6063:89:37","statements":[{"expression":{"arguments":[{"id":10460,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10418,"src":"6099:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10461,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10421,"src":"6105:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":10462,"name":"withdrawnTokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10423,"src":"6115:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":10459,"name":"_transferFeeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10520,"src":"6081:17:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_contract$_IERC20_$6383_$_t_uint256_$returns$__$","typeString":"function (address,contract IERC20,uint256)"}},"id":10463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6081:56:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10464,"nodeType":"ExpressionStatement","src":"6081:56:37"}]}}]},"id":10489,"nodeType":"IfStatement","src":"5747:825:37","trueBody":{"id":10450,"nodeType":"Block","src":"5785:81:37","statements":[{"expression":{"arguments":[{"id":10445,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10418,"src":"5817:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10446,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10421,"src":"5823:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":10447,"name":"withdrawnTokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10423,"src":"5833:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":10444,"name":"_transferFeeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10520,"src":"5799:17:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_contract$_IERC20_$6383_$_t_uint256_$returns$__$","typeString":"function (address,contract IERC20,uint256)"}},"id":10448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5799:56:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10449,"nodeType":"ExpressionStatement","src":"5799:56:37"}]}}]},"id":10491,"implemented":true,"kind":"function","modifiers":[],"name":"_sweepFeeToken","nameLocation":"5382:14:37","nodeType":"FunctionDefinition","parameters":{"id":10427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10418,"mutability":"mutable","name":"pool","nameLocation":"5414:4:37","nodeType":"VariableDeclaration","scope":10491,"src":"5406:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10417,"name":"address","nodeType":"ElementaryTypeName","src":"5406:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":10421,"mutability":"mutable","name":"feeToken","nameLocation":"5435:8:37","nodeType":"VariableDeclaration","scope":10491,"src":"5428:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":10420,"nodeType":"UserDefinedTypeName","pathNode":{"id":10419,"name":"IERC20","nameLocations":["5428:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"5428:6:37"},"referencedDeclaration":6383,"src":"5428:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":10423,"mutability":"mutable","name":"withdrawnTokenBalance","nameLocation":"5461:21:37","nodeType":"VariableDeclaration","scope":10491,"src":"5453:29:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10422,"name":"uint256","nodeType":"ElementaryTypeName","src":"5453:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":10426,"mutability":"mutable","name":"feeBurner","nameLocation":"5511:9:37","nodeType":"VariableDeclaration","scope":10491,"src":"5492:28:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"},"typeName":{"id":10425,"nodeType":"UserDefinedTypeName","pathNode":{"id":10424,"name":"IProtocolFeeBurner","nameLocations":["5492:18:37"],"nodeType":"IdentifierPath","referencedDeclaration":239,"src":"5492:18:37"},"referencedDeclaration":239,"src":"5492:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"visibility":"internal"}],"src":"5396:130:37"},"returnParameters":{"id":10428,"nodeType":"ParameterList","parameters":[],"src":"5536:0:37"},"scope":10763,"src":"5373:1205:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":10519,"nodeType":"Block","src":"6681:197:37","statements":[{"assignments":[10502],"declarations":[{"constant":false,"id":10502,"mutability":"mutable","name":"recipient","nameLocation":"6699:9:37","nodeType":"VariableDeclaration","scope":10519,"src":"6691:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10501,"name":"address","nodeType":"ElementaryTypeName","src":"6691:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":10504,"initialValue":{"id":10503,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10155,"src":"6711:13:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6691:33:37"},{"expression":{"arguments":[{"id":10508,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10502,"src":"6756:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10509,"name":"withdrawnTokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10498,"src":"6767:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":10505,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10496,"src":"6734:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":10507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6743:12:37","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":6495,"src":"6734:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6383_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$6383_$","typeString":"function (contract IERC20,address,uint256)"}},"id":10510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6734:55:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10511,"nodeType":"ExpressionStatement","src":"6734:55:37"},{"eventCall":{"arguments":[{"id":10513,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10493,"src":"6822:4:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10514,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10496,"src":"6828:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":10515,"name":"withdrawnTokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10498,"src":"6838:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":10516,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10502,"src":"6861:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":10512,"name":"ProtocolFeeSwept","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"6805:16:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_contract$_IERC20_$6383_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,contract IERC20,uint256,address)"}},"id":10517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6805:66:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10518,"nodeType":"EmitStatement","src":"6800:71:37"}]},"id":10520,"implemented":true,"kind":"function","modifiers":[],"name":"_transferFeeToken","nameLocation":"6593:17:37","nodeType":"FunctionDefinition","parameters":{"id":10499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10493,"mutability":"mutable","name":"pool","nameLocation":"6619:4:37","nodeType":"VariableDeclaration","scope":10520,"src":"6611:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10492,"name":"address","nodeType":"ElementaryTypeName","src":"6611:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":10496,"mutability":"mutable","name":"feeToken","nameLocation":"6632:8:37","nodeType":"VariableDeclaration","scope":10520,"src":"6625:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":10495,"nodeType":"UserDefinedTypeName","pathNode":{"id":10494,"name":"IERC20","nameLocations":["6625:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"6625:6:37"},"referencedDeclaration":6383,"src":"6625:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":10498,"mutability":"mutable","name":"withdrawnTokenBalance","nameLocation":"6650:21:37","nodeType":"VariableDeclaration","scope":10520,"src":"6642:29:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10497,"name":"uint256","nodeType":"ElementaryTypeName","src":"6642:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6610:62:37"},"returnParameters":{"id":10500,"nodeType":"ParameterList","parameters":[],"src":"6681:0:37"},"scope":10763,"src":"6584:294:37","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":10555,"nodeType":"Block","src":"6963:220:37","statements":[{"expression":{"id":10528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":10526,"name":"feeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10524,"src":"6973:9:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":10527,"name":"_protocolFeeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10158,"src":"6985:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"src":"6973:30:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"id":10529,"nodeType":"ExpressionStatement","src":"6973:30:37"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":10538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":10532,"name":"feeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10524,"src":"7026:9:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}],"id":10531,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7018:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10530,"name":"address","nodeType":"ElementaryTypeName","src":"7018:7:37","typeDescriptions":{}}},"id":10533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7018:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":10536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7048:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":10535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7040:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10534,"name":"address","nodeType":"ElementaryTypeName","src":"7040:7:37","typeDescriptions":{}}},"id":10537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7040:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7018:32:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10554,"nodeType":"IfStatement","src":"7014:163:37","trueBody":{"id":10553,"nodeType":"Block","src":"7052:125:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":10547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":10541,"name":"_targetToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10153,"src":"7078:12:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}],"id":10540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7070:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10539,"name":"address","nodeType":"ElementaryTypeName","src":"7070:7:37","typeDescriptions":{}}},"id":10542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7070:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":10545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7103:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":10544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7095:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10543,"name":"address","nodeType":"ElementaryTypeName","src":"7095:7:37","typeDescriptions":{}}},"id":10546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7095:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7070:35:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10552,"nodeType":"IfStatement","src":"7066:101:37","trueBody":{"id":10551,"nodeType":"Block","src":"7107:60:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":10548,"name":"InvalidTargetToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"7132:18:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":10549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7132:20:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":10550,"nodeType":"RevertStatement","src":"7125:27:37"}]}}]}}]},"id":10556,"implemented":true,"kind":"function","modifiers":[],"name":"_getValidBurner","nameLocation":"6893:15:37","nodeType":"FunctionDefinition","parameters":{"id":10521,"nodeType":"ParameterList","parameters":[],"src":"6908:2:37"},"returnParameters":{"id":10525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10524,"mutability":"mutable","name":"feeBurner","nameLocation":"6952:9:37","nodeType":"VariableDeclaration","scope":10556,"src":"6933:28:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"},"typeName":{"id":10523,"nodeType":"UserDefinedTypeName","pathNode":{"id":10522,"name":"IProtocolFeeBurner","nameLocations":["6933:18:37"],"nodeType":"IdentifierPath","referencedDeclaration":239,"src":"6933:18:37"},"referencedDeclaration":239,"src":"6933:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"visibility":"internal"}],"src":"6932:30:37"},"scope":10763,"src":"6884:299:37","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[303],"body":{"id":10568,"nodeType":"Block","src":"7310:61:37","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":10563,"name":"getVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5427,"src":"7327:8:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IVault_$1392_$","typeString":"function () view returns (contract IVault)"}},"id":10564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7327:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"id":10565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7338:24:37","memberName":"getProtocolFeeController","nodeType":"MemberAccess","referencedDeclaration":2641,"src":"7327:35:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IProtocolFeeController_$857_$","typeString":"function () view external returns (contract IProtocolFeeController)"}},"id":10566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7327:37:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"}},"functionReturnParameters":10562,"id":10567,"nodeType":"Return","src":"7320:44:37"}]},"documentation":{"id":10557,"nodeType":"StructuredDocumentation","src":"7189:35:37","text":"@inheritdoc IProtocolFeeSweeper"},"functionSelector":"85f2dbd4","id":10569,"implemented":true,"kind":"function","modifiers":[],"name":"getProtocolFeeController","nameLocation":"7238:24:37","nodeType":"FunctionDefinition","parameters":{"id":10558,"nodeType":"ParameterList","parameters":[],"src":"7262:2:37"},"returnParameters":{"id":10562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":10569,"src":"7286:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"},"typeName":{"id":10560,"nodeType":"UserDefinedTypeName","pathNode":{"id":10559,"name":"IProtocolFeeController","nameLocations":["7286:22:37"],"nodeType":"IdentifierPath","referencedDeclaration":857,"src":"7286:22:37"},"referencedDeclaration":857,"src":"7286:22:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$857","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"src":"7285:24:37"},"scope":10763,"src":"7229:142:37","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[310],"body":{"id":10578,"nodeType":"Block","src":"7474:36:37","statements":[{"expression":{"id":10576,"name":"_targetToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10153,"src":"7491:12:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"functionReturnParameters":10575,"id":10577,"nodeType":"Return","src":"7484:19:37"}]},"documentation":{"id":10570,"nodeType":"StructuredDocumentation","src":"7377:35:37","text":"@inheritdoc IProtocolFeeSweeper"},"functionSelector":"80db0d51","id":10579,"implemented":true,"kind":"function","modifiers":[],"name":"getTargetToken","nameLocation":"7426:14:37","nodeType":"FunctionDefinition","parameters":{"id":10571,"nodeType":"ParameterList","parameters":[],"src":"7440:2:37"},"returnParameters":{"id":10575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":10579,"src":"7466:6:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":10573,"nodeType":"UserDefinedTypeName","pathNode":{"id":10572,"name":"IERC20","nameLocations":["7466:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"7466:6:37"},"referencedDeclaration":6383,"src":"7466:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"7465:8:37"},"scope":10763,"src":"7417:93:37","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[316],"body":{"id":10587,"nodeType":"Block","src":"7615:37:37","statements":[{"expression":{"id":10585,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10155,"src":"7632:13:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":10584,"id":10586,"nodeType":"Return","src":"7625:20:37"}]},"documentation":{"id":10580,"nodeType":"StructuredDocumentation","src":"7516:35:37","text":"@inheritdoc IProtocolFeeSweeper"},"functionSelector":"4ccb20c0","id":10588,"implemented":true,"kind":"function","modifiers":[],"name":"getFeeRecipient","nameLocation":"7565:15:37","nodeType":"FunctionDefinition","parameters":{"id":10581,"nodeType":"ParameterList","parameters":[],"src":"7580:2:37"},"returnParameters":{"id":10584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":10588,"src":"7606:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10582,"name":"address","nodeType":"ElementaryTypeName","src":"7606:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7605:9:37"},"scope":10763,"src":"7556:96:37","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[323],"body":{"id":10597,"nodeType":"Block","src":"7773:42:37","statements":[{"expression":{"id":10595,"name":"_protocolFeeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10158,"src":"7790:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"functionReturnParameters":10594,"id":10596,"nodeType":"Return","src":"7783:25:37"}]},"documentation":{"id":10589,"nodeType":"StructuredDocumentation","src":"7658:35:37","text":"@inheritdoc IProtocolFeeSweeper"},"functionSelector":"55f90510","id":10598,"implemented":true,"kind":"function","modifiers":[],"name":"getProtocolFeeBurner","nameLocation":"7707:20:37","nodeType":"FunctionDefinition","parameters":{"id":10590,"nodeType":"ParameterList","parameters":[],"src":"7727:2:37"},"returnParameters":{"id":10594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":10598,"src":"7753:18:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"},"typeName":{"id":10592,"nodeType":"UserDefinedTypeName","pathNode":{"id":10591,"name":"IProtocolFeeBurner","nameLocations":["7753:18:37"],"nodeType":"IdentifierPath","referencedDeclaration":239,"src":"7753:18:37"},"referencedDeclaration":239,"src":"7753:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"visibility":"internal"}],"src":"7752:20:37"},"scope":10763,"src":"7698:117:37","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[329],"body":{"id":10610,"nodeType":"Block","src":"8148:47:37","statements":[{"expression":{"arguments":[{"id":10607,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10601,"src":"8175:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":10606,"name":"_setFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10636,"src":"8158:16:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":10608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8158:30:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10609,"nodeType":"ExpressionStatement","src":"8158:30:37"}]},"documentation":{"id":10599,"nodeType":"StructuredDocumentation","src":"8039:35:37","text":"@inheritdoc IProtocolFeeSweeper"},"functionSelector":"e74b981b","id":10611,"implemented":true,"kind":"function","modifiers":[{"id":10604,"kind":"modifierInvocation","modifierName":{"id":10603,"name":"authenticate","nameLocations":["8135:12:37"],"nodeType":"IdentifierPath","referencedDeclaration":3180,"src":"8135:12:37"},"nodeType":"ModifierInvocation","src":"8135:12:37"}],"name":"setFeeRecipient","nameLocation":"8088:15:37","nodeType":"FunctionDefinition","parameters":{"id":10602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10601,"mutability":"mutable","name":"feeRecipient","nameLocation":"8112:12:37","nodeType":"VariableDeclaration","scope":10611,"src":"8104:20:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10600,"name":"address","nodeType":"ElementaryTypeName","src":"8104:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8103:22:37"},"returnParameters":{"id":10605,"nodeType":"ParameterList","parameters":[],"src":"8148:0:37"},"scope":10763,"src":"8079:116:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":10635,"nodeType":"Block","src":"8258:707:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":10621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":10616,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10613,"src":"8794:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":10619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8818:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":10618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8810:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10617,"name":"address","nodeType":"ElementaryTypeName","src":"8810:7:37","typeDescriptions":{}}},"id":10620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8810:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8794:26:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10626,"nodeType":"IfStatement","src":"8790:85:37","trueBody":{"id":10625,"nodeType":"Block","src":"8822:53:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":10622,"name":"InvalidFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"8843:19:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":10623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8843:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":10624,"nodeType":"RevertStatement","src":"8836:28:37"}]}},{"expression":{"id":10629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":10627,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10155,"src":"8885:13:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":10628,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10613,"src":"8901:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8885:28:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":10630,"nodeType":"ExpressionStatement","src":"8885:28:37"},{"eventCall":{"arguments":[{"id":10632,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10613,"src":"8945:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":10631,"name":"FeeRecipientSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"8929:15:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":10633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8929:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10634,"nodeType":"EmitStatement","src":"8924:34:37"}]},"id":10636,"implemented":true,"kind":"function","modifiers":[],"name":"_setFeeRecipient","nameLocation":"8210:16:37","nodeType":"FunctionDefinition","parameters":{"id":10614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10613,"mutability":"mutable","name":"feeRecipient","nameLocation":"8235:12:37","nodeType":"VariableDeclaration","scope":10636,"src":"8227:20:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10612,"name":"address","nodeType":"ElementaryTypeName","src":"8227:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8226:22:37"},"returnParameters":{"id":10615,"nodeType":"ParameterList","parameters":[],"src":"8258:0:37"},"scope":10763,"src":"8201:764:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[336],"body":{"id":10656,"nodeType":"Block","src":"9101:119:37","statements":[{"expression":{"id":10647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":10645,"name":"_protocolFeeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10158,"src":"9111:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":10646,"name":"protocolFeeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10640,"src":"9132:17:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"src":"9111:38:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"id":10648,"nodeType":"ExpressionStatement","src":"9111:38:37"},{"eventCall":{"arguments":[{"arguments":[{"id":10652,"name":"protocolFeeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10640,"src":"9194:17:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}],"id":10651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9186:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10650,"name":"address","nodeType":"ElementaryTypeName","src":"9186:7:37","typeDescriptions":{}}},"id":10653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9186:26:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":10649,"name":"ProtocolFeeBurnerSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"9165:20:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":10654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9165:48:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10655,"nodeType":"EmitStatement","src":"9160:53:37"}]},"documentation":{"id":10637,"nodeType":"StructuredDocumentation","src":"8971:35:37","text":"@inheritdoc IProtocolFeeSweeper"},"functionSelector":"e651a319","id":10657,"implemented":true,"kind":"function","modifiers":[{"id":10643,"kind":"modifierInvocation","modifierName":{"id":10642,"name":"authenticate","nameLocations":["9088:12:37"],"nodeType":"IdentifierPath","referencedDeclaration":3180,"src":"9088:12:37"},"nodeType":"ModifierInvocation","src":"9088:12:37"}],"name":"setProtocolFeeBurner","nameLocation":"9020:20:37","nodeType":"FunctionDefinition","parameters":{"id":10641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10640,"mutability":"mutable","name":"protocolFeeBurner","nameLocation":"9060:17:37","nodeType":"VariableDeclaration","scope":10657,"src":"9041:36:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"},"typeName":{"id":10639,"nodeType":"UserDefinedTypeName","pathNode":{"id":10638,"name":"IProtocolFeeBurner","nameLocations":["9041:18:37"],"nodeType":"IdentifierPath","referencedDeclaration":239,"src":"9041:18:37"},"referencedDeclaration":239,"src":"9041:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeBurner_$239","typeString":"contract IProtocolFeeBurner"}},"visibility":"internal"}],"src":"9040:38:37"},"returnParameters":{"id":10644,"nodeType":"ParameterList","parameters":[],"src":"9101:0:37"},"scope":10763,"src":"9011:209:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[343],"body":{"id":10674,"nodeType":"Block","src":"9332:86:37","statements":[{"expression":{"id":10668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":10666,"name":"_targetToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10153,"src":"9342:12:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":10667,"name":"targetToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10661,"src":"9357:11:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"src":"9342:26:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":10669,"nodeType":"ExpressionStatement","src":"9342:26:37"},{"eventCall":{"arguments":[{"id":10671,"name":"targetToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10661,"src":"9399:11:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}],"id":10670,"name":"TargetTokenSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"9384:14:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$6383_$returns$__$","typeString":"function (contract IERC20)"}},"id":10672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9384:27:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10673,"nodeType":"EmitStatement","src":"9379:32:37"}]},"documentation":{"id":10658,"nodeType":"StructuredDocumentation","src":"9226:35:37","text":"@inheritdoc IProtocolFeeSweeper"},"functionSelector":"1b66cb00","id":10675,"implemented":true,"kind":"function","modifiers":[{"id":10664,"kind":"modifierInvocation","modifierName":{"id":10663,"name":"authenticate","nameLocations":["9319:12:37"],"nodeType":"IdentifierPath","referencedDeclaration":3180,"src":"9319:12:37"},"nodeType":"ModifierInvocation","src":"9319:12:37"}],"name":"setTargetToken","nameLocation":"9275:14:37","nodeType":"FunctionDefinition","parameters":{"id":10662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10661,"mutability":"mutable","name":"targetToken","nameLocation":"9297:11:37","nodeType":"VariableDeclaration","scope":10675,"src":"9290:18:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":10660,"nodeType":"UserDefinedTypeName","pathNode":{"id":10659,"name":"IERC20","nameLocations":["9290:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"9290:6:37"},"referencedDeclaration":6383,"src":"9290:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"9289:20:37"},"returnParameters":{"id":10665,"nodeType":"ParameterList","parameters":[],"src":"9332:0:37"},"scope":10763,"src":"9266:152:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[351],"body":{"id":10737,"nodeType":"Block","src":"9542:397:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":10688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":10685,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9556:3:37","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":10686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9560:6:37","memberName":"sender","nodeType":"MemberAccess","src":"9556:10:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":10687,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10155,"src":"9570:13:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9556:27:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10693,"nodeType":"IfStatement","src":"9552:83:37","trueBody":{"id":10692,"nodeType":"Block","src":"9585:50:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":10689,"name":"SenderNotAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"9606:16:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":10690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9606:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":10691,"nodeType":"RevertStatement","src":"9599:25:37"}]}},{"body":{"id":10735,"nodeType":"Block","src":"9692:241:37","statements":[{"assignments":[10707],"declarations":[{"constant":false,"id":10707,"mutability":"mutable","name":"feeToken","nameLocation":"9713:8:37","nodeType":"VariableDeclaration","scope":10735,"src":"9706:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":10706,"nodeType":"UserDefinedTypeName","pathNode":{"id":10705,"name":"IERC20","nameLocations":["9706:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"9706:6:37"},"referencedDeclaration":6383,"src":"9706:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"}],"id":10711,"initialValue":{"baseExpression":{"id":10708,"name":"feeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10680,"src":"9724:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":10710,"indexExpression":{"id":10709,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10695,"src":"9734:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9724:12:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"9706:30:37"},{"assignments":[10713],"declarations":[{"constant":false,"id":10713,"mutability":"mutable","name":"tokenBalance","nameLocation":"9758:12:37","nodeType":"VariableDeclaration","scope":10735,"src":"9750:20:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10712,"name":"uint256","nodeType":"ElementaryTypeName","src":"9750:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":10721,"initialValue":{"arguments":[{"arguments":[{"id":10718,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9800:4:37","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeSweeper_$10763","typeString":"contract ProtocolFeeSweeper"}],"id":10717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9792:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10716,"name":"address","nodeType":"ElementaryTypeName","src":"9792:7:37","typeDescriptions":{}}},"id":10719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9792:13:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":10714,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10707,"src":"9773:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":10715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9782:9:37","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":6340,"src":"9773:18:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":10720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9773:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9750:56:37"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":10724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":10722,"name":"tokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10713,"src":"9825:12:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":10723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9840:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9825:16:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10734,"nodeType":"IfStatement","src":"9821:102:37","trueBody":{"id":10733,"nodeType":"Block","src":"9843:80:37","statements":[{"expression":{"arguments":[{"expression":{"id":10728,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9883:3:37","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":10729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9887:6:37","memberName":"sender","nodeType":"MemberAccess","src":"9883:10:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10730,"name":"tokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10713,"src":"9895:12:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":10725,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10707,"src":"9861:8:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":10727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9870:12:37","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":6495,"src":"9861:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6383_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$6383_$","typeString":"function (contract IERC20,address,uint256)"}},"id":10731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9861:47:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10732,"nodeType":"ExpressionStatement","src":"9861:47:37"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":10701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":10698,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10695,"src":"9665:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":10699,"name":"feeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10680,"src":"9669:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":10700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9679:6:37","memberName":"length","nodeType":"MemberAccess","src":"9669:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9665:20:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10736,"initializationExpression":{"assignments":[10695],"declarations":[{"constant":false,"id":10695,"mutability":"mutable","name":"i","nameLocation":"9658:1:37","nodeType":"VariableDeclaration","scope":10736,"src":"9650:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10694,"name":"uint256","nodeType":"ElementaryTypeName","src":"9650:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":10697,"initialValue":{"hexValue":"30","id":10696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9662:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9650:13:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":10703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"9687:3:37","subExpression":{"id":10702,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10695,"src":"9689:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":10704,"nodeType":"ExpressionStatement","src":"9687:3:37"},"nodeType":"ForStatement","src":"9645:288:37"}]},"documentation":{"id":10676,"nodeType":"StructuredDocumentation","src":"9424:35:37","text":"@inheritdoc IProtocolFeeSweeper"},"functionSelector":"b0edcc53","id":10738,"implemented":true,"kind":"function","modifiers":[{"id":10683,"kind":"modifierInvocation","modifierName":{"id":10682,"name":"nonReentrant","nameLocations":["9529:12:37"],"nodeType":"IdentifierPath","referencedDeclaration":5001,"src":"9529:12:37"},"nodeType":"ModifierInvocation","src":"9529:12:37"}],"name":"recoverProtocolFees","nameLocation":"9473:19:37","nodeType":"FunctionDefinition","parameters":{"id":10681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10680,"mutability":"mutable","name":"feeTokens","nameLocation":"9509:9:37","nodeType":"VariableDeclaration","scope":10738,"src":"9493:25:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":10678,"nodeType":"UserDefinedTypeName","pathNode":{"id":10677,"name":"IERC20","nameLocations":["9493:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"9493:6:37"},"referencedDeclaration":6383,"src":"9493:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"id":10679,"nodeType":"ArrayTypeName","src":"9493:8:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6383_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"9492:27:37"},"returnParameters":{"id":10684,"nodeType":"ParameterList","parameters":[],"src":"9542:0:37"},"scope":10763,"src":"9464:475:37","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":10744,"nodeType":"Block","src":"10421:42:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":10741,"name":"CannotReceiveEth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10150,"src":"10438:16:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":10742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10438:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":10743,"nodeType":"RevertStatement","src":"10431:25:37"}]},"id":10745,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":10739,"nodeType":"ParameterList","parameters":[],"src":"10401:2:37"},"returnParameters":{"id":10740,"nodeType":"ParameterList","parameters":[],"src":"10421:0:37"},"scope":10763,"src":"10394:69:37","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":10761,"nodeType":"Block","src":"10541:121:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":10751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":10748,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10555:3:37","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":10749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10559:5:37","memberName":"value","nodeType":"MemberAccess","src":"10555:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":10750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10567:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10555:13:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10756,"nodeType":"IfStatement","src":"10551:69:37","trueBody":{"id":10755,"nodeType":"Block","src":"10570:50:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":10752,"name":"CannotReceiveEth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10150,"src":"10591:16:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":10753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10591:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":10754,"nodeType":"RevertStatement","src":"10584:25:37"}]}},{"expression":{"arguments":[{"hexValue":"4e6f7420696d706c656d656e746564","id":10758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10637:17:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f5474d7a5849b3f79e8aee7ea2c60bcd36a60a08b4fa41f97e2fccf1c4df98b","typeString":"literal_string \"Not implemented\""},"value":"Not implemented"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9f5474d7a5849b3f79e8aee7ea2c60bcd36a60a08b4fa41f97e2fccf1c4df98b","typeString":"literal_string \"Not implemented\""}],"id":10757,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"10630:6:37","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":10759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10630:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10760,"nodeType":"ExpressionStatement","src":"10630:25:37"}]},"id":10762,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":10746,"nodeType":"ParameterList","parameters":[],"src":"10521:2:37"},"returnParameters":{"id":10747,"nodeType":"ParameterList","parameters":[],"src":"10541:0:37"},"scope":10763,"src":"10513:149:37","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":10764,"src":"1731:8933:37","usedErrors":[5,278,281,4990,6462,6743,6748,6751,10150],"usedEvents":[253,258,263,275]}],"src":"46:10619:37"},"id":37},"contracts/test/PriceImpactHelperMock.sol":{"ast":{"absolutePath":"contracts/test/PriceImpactHelperMock.sol","exportedSymbols":{"IRouter":[1354],"IVault":[1392],"PriceImpactHelper":[10118],"PriceImpactHelperMock":[10859]},"id":10860,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":10765,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:38"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","id":10767,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10860,"sourceUnit":1393,"src":"72:81:38","symbolAliases":[{"foreign":{"id":10766,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"81:6:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol","id":10769,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10860,"sourceUnit":1355,"src":"154:83:38","symbolAliases":[{"foreign":{"id":10768,"name":"IRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"163:7:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/PriceImpactHelper.sol","file":"../PriceImpactHelper.sol","id":10771,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10860,"sourceUnit":10119,"src":"239:61:38","symbolAliases":[{"foreign":{"id":10770,"name":"PriceImpactHelper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10118,"src":"248:17:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":10772,"name":"PriceImpactHelper","nameLocations":["336:17:38"],"nodeType":"IdentifierPath","referencedDeclaration":10118,"src":"336:17:38"},"id":10773,"nodeType":"InheritanceSpecifier","src":"336:17:38"}],"canonicalName":"PriceImpactHelperMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":10859,"linearizedBaseContracts":[10859,10118,9432],"name":"PriceImpactHelperMock","nameLocation":"311:21:38","nodeType":"ContractDefinition","nodes":[{"body":{"id":10786,"nodeType":"Block","src":"435:2:38","statements":[]},"id":10787,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":10782,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10776,"src":"420:5:38","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},{"id":10783,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10779,"src":"427:6:38","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}}],"id":10784,"kind":"baseConstructorSpecifier","modifierName":{"id":10781,"name":"PriceImpactHelper","nameLocations":["402:17:38"],"nodeType":"IdentifierPath","referencedDeclaration":10118,"src":"402:17:38"},"nodeType":"ModifierInvocation","src":"402:32:38"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":10780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10776,"mutability":"mutable","name":"vault","nameLocation":"379:5:38","nodeType":"VariableDeclaration","scope":10787,"src":"372:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"},"typeName":{"id":10775,"nodeType":"UserDefinedTypeName","pathNode":{"id":10774,"name":"IVault","nameLocations":["372:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"372:6:38"},"referencedDeclaration":1392,"src":"372:6:38","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1392","typeString":"contract IVault"}},"visibility":"internal"},{"constant":false,"id":10779,"mutability":"mutable","name":"router","nameLocation":"394:6:38","nodeType":"VariableDeclaration","scope":10787,"src":"386:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"},"typeName":{"id":10778,"nodeType":"UserDefinedTypeName","pathNode":{"id":10777,"name":"IRouter","nameLocations":["386:7:38"],"nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"386:7:38"},"referencedDeclaration":1354,"src":"386:7:38","typeDescriptions":{"typeIdentifier":"t_contract$_IRouter_$1354","typeString":"contract IRouter"}},"visibility":"internal"}],"src":"371:30:38"},"returnParameters":{"id":10785,"nodeType":"ParameterList","parameters":[],"src":"435:0:38"},"scope":10859,"src":"360:77:38","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":10808,"nodeType":"Block","src":"641:100:38","statements":[{"expression":{"arguments":[{"id":10802,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10789,"src":"701:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10803,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10791,"src":"707:10:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":10804,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10794,"src":"719:6:38","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},{"id":10805,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10796,"src":"727:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":10801,"name":"_queryAddLiquidityUnbalancedForTokenDeltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9847,"src":"658:42:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_array$_t_int256_$dyn_memory_ptr_$_t_address_$returns$_t_int256_$","typeString":"function (address,uint256,int256[] memory,address) returns (int256)"}},"id":10806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"658:76:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":10800,"id":10807,"nodeType":"Return","src":"651:83:38"}]},"functionSelector":"e3a50d82","id":10809,"implemented":true,"kind":"function","modifiers":[],"name":"queryAddLiquidityUnbalancedForTokenDeltas","nameLocation":"452:41:38","nodeType":"FunctionDefinition","parameters":{"id":10797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10789,"mutability":"mutable","name":"pool","nameLocation":"511:4:38","nodeType":"VariableDeclaration","scope":10809,"src":"503:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10788,"name":"address","nodeType":"ElementaryTypeName","src":"503:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":10791,"mutability":"mutable","name":"tokenIndex","nameLocation":"533:10:38","nodeType":"VariableDeclaration","scope":10809,"src":"525:18:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10790,"name":"uint256","nodeType":"ElementaryTypeName","src":"525:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":10794,"mutability":"mutable","name":"deltas","nameLocation":"569:6:38","nodeType":"VariableDeclaration","scope":10809,"src":"553:22:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":10792,"name":"int256","nodeType":"ElementaryTypeName","src":"553:6:38","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":10793,"nodeType":"ArrayTypeName","src":"553:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":10796,"mutability":"mutable","name":"sender","nameLocation":"593:6:38","nodeType":"VariableDeclaration","scope":10809,"src":"585:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10795,"name":"address","nodeType":"ElementaryTypeName","src":"585:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"493:112:38"},"returnParameters":{"id":10800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10799,"mutability":"mutable","name":"deltaBPT","nameLocation":"631:8:38","nodeType":"VariableDeclaration","scope":10809,"src":"624:15:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":10798,"name":"int256","nodeType":"ElementaryTypeName","src":"624:6:38","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"623:17:38"},"scope":10859,"src":"443:298:38","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":10831,"nodeType":"Block","src":"916:71:38","statements":[{"expression":{"arguments":[{"id":10825,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10811,"src":"948:4:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10826,"name":"deltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10814,"src":"954:6:38","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},{"id":10827,"name":"deltaBPTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10817,"src":"962:9:38","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}},{"id":10828,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10819,"src":"973:6:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"},{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":10824,"name":"_zeroOutDeltas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10011,"src":"933:14:38","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$_t_address_$returns$_t_uint256_$","typeString":"function (address,int256[] memory,int256[] memory,address) returns (uint256)"}},"id":10829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:47:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":10823,"id":10830,"nodeType":"Return","src":"926:54:38"}]},"functionSelector":"3b064ca3","id":10832,"implemented":true,"kind":"function","modifiers":[],"name":"zeroOutDeltas","nameLocation":"756:13:38","nodeType":"FunctionDefinition","parameters":{"id":10820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10811,"mutability":"mutable","name":"pool","nameLocation":"787:4:38","nodeType":"VariableDeclaration","scope":10832,"src":"779:12:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10810,"name":"address","nodeType":"ElementaryTypeName","src":"779:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":10814,"mutability":"mutable","name":"deltas","nameLocation":"817:6:38","nodeType":"VariableDeclaration","scope":10832,"src":"801:22:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":10812,"name":"int256","nodeType":"ElementaryTypeName","src":"801:6:38","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":10813,"nodeType":"ArrayTypeName","src":"801:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":10817,"mutability":"mutable","name":"deltaBPTs","nameLocation":"849:9:38","nodeType":"VariableDeclaration","scope":10832,"src":"833:25:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":10815,"name":"int256","nodeType":"ElementaryTypeName","src":"833:6:38","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":10816,"nodeType":"ArrayTypeName","src":"833:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":10819,"mutability":"mutable","name":"sender","nameLocation":"876:6:38","nodeType":"VariableDeclaration","scope":10832,"src":"868:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10818,"name":"address","nodeType":"ElementaryTypeName","src":"868:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"769:119:38"},"returnParameters":{"id":10823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10822,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":10832,"src":"907:7:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10821,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"906:9:38"},"scope":10859,"src":"747:240:38","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":10844,"nodeType":"Block","src":"1074:48:38","statements":[{"expression":{"arguments":[{"id":10841,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10835,"src":"1109:5:38","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}],"id":10840,"name":"_minPositiveIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10064,"src":"1091:17:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_int256_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (int256[] memory) pure returns (uint256)"}},"id":10842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1091:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":10839,"id":10843,"nodeType":"Return","src":"1084:31:38"}]},"functionSelector":"0d4277d1","id":10845,"implemented":true,"kind":"function","modifiers":[],"name":"minPositiveIndex","nameLocation":"1002:16:38","nodeType":"FunctionDefinition","parameters":{"id":10836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10835,"mutability":"mutable","name":"array","nameLocation":"1035:5:38","nodeType":"VariableDeclaration","scope":10845,"src":"1019:21:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":10833,"name":"int256","nodeType":"ElementaryTypeName","src":"1019:6:38","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":10834,"nodeType":"ArrayTypeName","src":"1019:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"src":"1018:23:38"},"returnParameters":{"id":10839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10838,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":10845,"src":"1065:7:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10837,"name":"uint256","nodeType":"ElementaryTypeName","src":"1065:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1064:9:38"},"scope":10859,"src":"993:129:38","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":10857,"nodeType":"Block","src":"1209:48:38","statements":[{"expression":{"arguments":[{"id":10854,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10848,"src":"1244:5:38","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[] memory"}],"id":10853,"name":"_maxNegativeIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10117,"src":"1226:17:38","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_int256_$dyn_memory_ptr_$returns$_t_uint256_$","typeString":"function (int256[] memory) pure returns (uint256)"}},"id":10855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:24:38","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":10852,"id":10856,"nodeType":"Return","src":"1219:31:38"}]},"functionSelector":"01ef39ee","id":10858,"implemented":true,"kind":"function","modifiers":[],"name":"maxNegativeIndex","nameLocation":"1137:16:38","nodeType":"FunctionDefinition","parameters":{"id":10849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10848,"mutability":"mutable","name":"array","nameLocation":"1170:5:38","nodeType":"VariableDeclaration","scope":10858,"src":"1154:21:38","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":10846,"name":"int256","nodeType":"ElementaryTypeName","src":"1154:6:38","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":10847,"nodeType":"ArrayTypeName","src":"1154:8:38","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"src":"1153:23:38"},"returnParameters":{"id":10852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":10858,"src":"1200:7:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10850,"name":"uint256","nodeType":"ElementaryTypeName","src":"1200:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1199:9:38"},"scope":10859,"src":"1128:129:38","stateMutability":"pure","virtual":false,"visibility":"external"}],"scope":10860,"src":"302:957:38","usedErrors":[3240,3243,6748,6751,7025,7037,9334],"usedEvents":[]}],"src":"46:1214:38"},"id":38},"contracts/test/ProtocolFeeBurnerMock.sol":{"ast":{"absolutePath":"contracts/test/ProtocolFeeBurnerMock.sol","exportedSymbols":{"ERC20TestToken":[5377],"IERC20":[6383],"IProtocolFeeBurner":[239],"ProtocolFeeBurnerMock":[10907]},"id":10908,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":10861,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:39"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":10863,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10908,"sourceUnit":6384,"src":"72:72:39","symbolAliases":[{"foreign":{"id":10862,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6383,"src":"81:6:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol","file":"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol","id":10865,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10908,"sourceUnit":240,"src":"146:116:39","symbolAliases":[{"foreign":{"id":10864,"name":"IProtocolFeeBurner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"155:18:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/test/ERC20TestToken.sol","file":"@balancer-labs/v3-solidity-utils/contracts/test/ERC20TestToken.sol","id":10867,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":10908,"sourceUnit":5378,"src":"264:100:39","symbolAliases":[{"foreign":{"id":10866,"name":"ERC20TestToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"273:14:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":10868,"name":"IProtocolFeeBurner","nameLocations":["400:18:39"],"nodeType":"IdentifierPath","referencedDeclaration":239,"src":"400:18:39"},"id":10869,"nodeType":"InheritanceSpecifier","src":"400:18:39"}],"canonicalName":"ProtocolFeeBurnerMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":10907,"linearizedBaseContracts":[10907,239],"name":"ProtocolFeeBurnerMock","nameLocation":"375:21:39","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[238],"body":{"id":10905,"nodeType":"Block","src":"627:355:39","statements":[{"expression":{"arguments":[{"id":10892,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10882,"src":"763:9:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10893,"name":"feeTokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10877,"src":"774:14:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[{"id":10888,"name":"targetToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10880,"src":"744:11:39","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}],"id":10887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"736:7:39","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":10886,"name":"address","nodeType":"ElementaryTypeName","src":"736:7:39","typeDescriptions":{}}},"id":10889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:20:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":10885,"name":"ERC20TestToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"721:14:39","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20TestToken_$5377_$","typeString":"type(contract ERC20TestToken)"}},"id":10890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"721:36:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ERC20TestToken_$5377","typeString":"contract ERC20TestToken"}},"id":10891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"758:4:39","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":5310,"src":"721:41:39","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":10894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"721:68:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10895,"nodeType":"ExpressionStatement","src":"721:68:39"},{"eventCall":{"arguments":[{"id":10897,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10872,"src":"904:4:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":10898,"name":"feeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10875,"src":"910:8:39","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":10899,"name":"feeTokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10877,"src":"920:14:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":10900,"name":"targetToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10880,"src":"936:11:39","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},{"id":10901,"name":"feeTokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10877,"src":"949:14:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":10902,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10882,"src":"965:9:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":10896,"name":"ProtocolFeeBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"886:17:39","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_contract$_IERC20_$6383_$_t_uint256_$_t_contract$_IERC20_$6383_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,contract IERC20,uint256,contract IERC20,uint256,address)"}},"id":10903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"886:89:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":10904,"nodeType":"EmitStatement","src":"881:94:39"}]},"documentation":{"id":10870,"nodeType":"StructuredDocumentation","src":"425:34:39","text":"@inheritdoc IProtocolFeeBurner"},"functionSelector":"54caad00","id":10906,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"473:4:39","nodeType":"FunctionDefinition","parameters":{"id":10883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10872,"mutability":"mutable","name":"pool","nameLocation":"495:4:39","nodeType":"VariableDeclaration","scope":10906,"src":"487:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10871,"name":"address","nodeType":"ElementaryTypeName","src":"487:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":10875,"mutability":"mutable","name":"feeToken","nameLocation":"516:8:39","nodeType":"VariableDeclaration","scope":10906,"src":"509:15:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":10874,"nodeType":"UserDefinedTypeName","pathNode":{"id":10873,"name":"IERC20","nameLocations":["509:6:39"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"509:6:39"},"referencedDeclaration":6383,"src":"509:6:39","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":10877,"mutability":"mutable","name":"feeTokenAmount","nameLocation":"542:14:39","nodeType":"VariableDeclaration","scope":10906,"src":"534:22:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10876,"name":"uint256","nodeType":"ElementaryTypeName","src":"534:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":10880,"mutability":"mutable","name":"targetToken","nameLocation":"573:11:39","nodeType":"VariableDeclaration","scope":10906,"src":"566:18:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"},"typeName":{"id":10879,"nodeType":"UserDefinedTypeName","pathNode":{"id":10878,"name":"IERC20","nameLocations":["566:6:39"],"nodeType":"IdentifierPath","referencedDeclaration":6383,"src":"566:6:39"},"referencedDeclaration":6383,"src":"566:6:39","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6383","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":10882,"mutability":"mutable","name":"recipient","nameLocation":"602:9:39","nodeType":"VariableDeclaration","scope":10906,"src":"594:17:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10881,"name":"address","nodeType":"ElementaryTypeName","src":"594:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"477:140:39"},"returnParameters":{"id":10884,"nodeType":"ParameterList","parameters":[],"src":"627:0:39"},"scope":10907,"src":"464:518:39","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":10908,"src":"366:618:39","usedErrors":[],"usedEvents":[222]}],"src":"46:939:39"},"id":39}},"contracts":{"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"IAuthentication":{"abi":[{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"actionId","type":"bytes32"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"actionId\":\"The computed actionId\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}]},\"kind\":\"user\",\"methods\":{\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"notice\":\"Simple interface for permissioned calling of external functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":\"IAuthentication\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"IRateProvider":{"abi":[{"inputs":[],"name":"getRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getRate()":"679aefce"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRate()\":{\"details\":\"The meaning of this rate depends on the context. Note that there may be an error associated with a token rate, and the caller might require a certain rounding direction to ensure correctness. This (legacy) interface does not take a rounding direction or return an error, so great care must be taken when interpreting and using rates in downstream computations.\",\"returns\":{\"rate\":\"The current token rate\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRate()\":{\"notice\":\"An 18 decimal fixed point number representing the exchange rate of one token to another related token.\"}},\"notice\":\"General interface for token exchange rates.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":\"IRateProvider\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/standalone-utils/IBalancerContractRegistry.sol":{"IBalancerContractRegistry":{"abi":[{"inputs":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractAddressAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractAddressNotRegistered","type":"error"},{"inputs":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"string","name":"contractName","type":"string"}],"name":"ContractAliasInUseAsName","type":"error"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractAlreadyDeprecated","type":"error"},{"inputs":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"string","name":"contractName","type":"string"}],"name":"ContractNameAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"string","name":"contractName","type":"string"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractNameInUseAsAlias","type":"error"},{"inputs":[{"internalType":"string","name":"contractName","type":"string"}],"name":"ContractNameNotRegistered","type":"error"},{"inputs":[],"name":"InvalidContractAlias","type":"error"},{"inputs":[],"name":"InvalidContractName","type":"error"},{"inputs":[],"name":"ZeroContractAddress","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"BalancerContractDeprecated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"indexed":true,"internalType":"string","name":"contractName","type":"string"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"BalancerContractDeregistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"indexed":true,"internalType":"string","name":"contractName","type":"string"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"BalancerContractRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"string","name":"contractAlias","type":"string"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractAliasUpdated","type":"event"},{"inputs":[{"internalType":"string","name":"contractAlias","type":"string"},{"internalType":"address","name":"existingContract","type":"address"}],"name":"addOrUpdateBalancerContractAlias","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"name":"deprecateBalancerContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"contractName","type":"string"}],"name":"deregisterBalancerContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"string","name":"contractName","type":"string"}],"name":"getBalancerContract","outputs":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"bool","name":"isActive","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"name":"getBalancerContractInfo","outputs":[{"components":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"bool","name":"isRegistered","type":"bool"},{"internalType":"bool","name":"isActive","type":"bool"}],"internalType":"struct IBalancerContractRegistry.ContractInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"isActiveBalancerContract","outputs":[{"internalType":"bool","name":"isActive","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"}],"name":"isTrustedRouter","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"string","name":"contractName","type":"string"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"registerBalancerContract","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addOrUpdateBalancerContractAlias(string,address)":"2967af96","deprecateBalancerContract(address)":"44969a9c","deregisterBalancerContract(string)":"c7f90793","getBalancerContract(uint8,string)":"41d8c0bb","getBalancerContractInfo(address)":"8554c327","isActiveBalancerContract(uint8,address)":"ae2733a4","isTrustedRouter(address)":"264e97e0","registerBalancerContract(uint8,string,address)":"e0376ab4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractAddressAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractAddressNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"ContractAliasInUseAsName\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractAlreadyDeprecated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"ContractNameAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractNameInUseAsAlias\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"ContractNameNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContractAlias\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContractName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroContractAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"BalancerContractDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"BalancerContractDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"BalancerContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contractAlias\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractAliasUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractAlias\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"existingContract\",\"type\":\"address\"}],\"name\":\"addOrUpdateBalancerContractAlias\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"deprecateBalancerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"deregisterBalancerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"getBalancerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getBalancerContractInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerContractRegistry.ContractInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isActiveBalancerContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"isTrustedRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"registerBalancerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ContractAddressAlreadyRegistered(uint8,address)\":[{\"details\":\"Both names and addresses must be unique in the primary registration mapping. Though there are two mappings to accommodate searching by either name or address, conceptually there is a single guaranteed-consistent name => address => state mapping.\",\"params\":{\"contractAddress\":\"The address of the previously registered contract\",\"contractType\":\"The contract type, provided for documentation purposes\"}}],\"ContractAddressNotRegistered(address)\":[{\"details\":\"A contract being deprecated was never registered, or the target of an alias isn't a previously registered contract.\",\"params\":{\"contractAddress\":\"The address of the contract that was not registered\"}}],\"ContractAliasInUseAsName(uint8,string)\":[{\"details\":\"This could lead to inconsistent (or at least redundant) internal state if allowed.\",\"params\":{\"contractName\":\"The name of the previously registered contract (and proposed alias)\",\"contractType\":\"The registered contract type, provided for documentation purposes\"}}],\"ContractAlreadyDeprecated(address)\":[{\"params\":{\"contractAddress\":\"The address of the previously deprecated contract\"}}],\"ContractNameAlreadyRegistered(uint8,string)\":[{\"details\":\"Note that names must be unique; it is not possible to register two contracts with the same name and different types, or the same name and different addresses.\",\"params\":{\"contractName\":\"The name of the previously registered contract\",\"contractType\":\"The registered contract type, provided for documentation purposes\"}}],\"ContractNameInUseAsAlias(string,address)\":[{\"details\":\"This could lead to inconsistent (or at least redundant) internal state if allowed.\",\"params\":{\"contractAddress\":\"The address of the previously registered contract\",\"contractName\":\"The name of the previously registered contract\"}}],\"ContractNameNotRegistered(string)\":[{\"params\":{\"contractName\":\"The name of the unregistered contract\"}}]},\"events\":{\"BalancerContractDeprecated(address)\":{\"details\":\"This sets the `isActive` flag to false.\",\"params\":{\"contractAddress\":\"The address of the contract being deprecated\"}},\"BalancerContractDeregistered(uint8,string,address)\":{\"params\":{\"contractAddress\":\"The address of the contract being deregistered\",\"contractName\":\"The name of the contract being deregistered\",\"contractType\":\"The type of contract being deregistered\"}},\"BalancerContractRegistered(uint8,string,address)\":{\"params\":{\"contractAddress\":\"The address of the contract being registered\",\"contractName\":\"The name of the contract being registered\",\"contractType\":\"The type of contract being registered\"}},\"ContractAliasUpdated(string,address)\":{\"params\":{\"contractAddress\":\"The address of the contract being deprecated\",\"contractAlias\":\"The alias name\"}}},\"kind\":\"dev\",\"methods\":{\"addOrUpdateBalancerContractAlias(string,address)\":{\"details\":\"This is a permissioned function to support querying by a contract alias. For instance, we might create a `WeightedPool` alias meaning the \\\"latest\\\" version of the `WeightedPoolFactory`, so that off-chain users don't need to track specific versions. Once added, an alias can also be updated to point to a different address (e.g., when migrating from the v2 to the v3 weighted pool).\",\"params\":{\"contractAlias\":\"An alternate name that can be used to fetch a contract address\",\"existingContract\":\"The target address of the contract alias\"}},\"deprecateBalancerContract(address)\":{\"details\":\"This is a permissioned function that sets the `isActive` flag to false in the contract info. It uses the address instead of the name for maximum clarity, and to avoid having to handle aliases. Addresses and names are enforced unique, so either the name or address could be specified in principle.\",\"params\":{\"contractAddress\":\"The address of the contract being deprecated\"}},\"deregisterBalancerContract(string)\":{\"details\":\"This is a permissioned function, and makes it possible to correct errors without complex update logic. If a contract was registered with an incorrect type, name, or address, this allows governance to simply delete it, and register it again with the correct data. It must start with the name, as this is the registry key, required for complete deletion. Note that there might still be an alias targeting the address being deleted, but accessing it will just return inactive, and this orphan alias can simply be overwritten with `addOrUpdateBalancerContractAlias` to point to the correct address.\",\"params\":{\"contractName\":\"The name of the contract being deprecated (cannot be an alias)\"}},\"getBalancerContract(uint8,string)\":{\"details\":\"This could target a particular version (e.g. `20241205-v3-weighted-pool`), or a contract alias (e.g., `WeightedPool`).\",\"params\":{\"contractName\":\"The name of the contract\",\"contractType\":\"The type of the contract\"},\"returns\":{\"contractAddress\":\"The address of the associated contract, if registered, or zero\",\"isActive\":\"True if the contract was registered and not deprecated\"}},\"getBalancerContractInfo(address)\":{\"params\":{\"contractAddress\":\"The address of the associated contract\"},\"returns\":{\"info\":\"ContractInfo struct corresponding to the address\"}},\"isActiveBalancerContract(uint8,address)\":{\"params\":{\"contractAddress\":\"The address of the contract\",\"contractType\":\"The type of contract\"},\"returns\":{\"isActive\":\"True if the given address is a registered and active contract of the specified type\"}},\"registerBalancerContract(uint8,string,address)\":{\"details\":\"This is a permissioned function, and does only basic validation of the address (non-zero) and the name (not blank). Governance must ensure this is called with valid information. Emits the `BalancerContractRegistered` event if successful. Reverts if either the name or address is invalid or already in use.\",\"params\":{\"contractAddress\":\"The address of the contract\",\"contractName\":\"A text description of the contract, usually the deployed version (e.g., \\\"v3-pool-weighted\\\")\",\"contractType\":\"The type of contract being registered\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ContractAddressAlreadyRegistered(uint8,address)\":[{\"notice\":\"A contract has already been registered under the given address.\"}],\"ContractAddressNotRegistered(address)\":[{\"notice\":\"An operation that requires a valid contract specified an unrecognized address.\"}],\"ContractAliasInUseAsName(uint8,string)\":[{\"notice\":\"The proposed alias has already been registered as a contract.\"}],\"ContractAlreadyDeprecated(address)\":[{\"notice\":\"Contracts can only be deprecated once.\"}],\"ContractNameAlreadyRegistered(uint8,string)\":[{\"notice\":\"A contract has already been registered under the given name.\"}],\"ContractNameInUseAsAlias(string,address)\":[{\"notice\":\"The proposed contract name has already been added as an alias.\"}],\"ContractNameNotRegistered(string)\":[{\"notice\":\"Thrown when attempting to deregister a contract that was not previously registered.\"}],\"InvalidContractAlias()\":[{\"notice\":\"Cannot add an empty string as an alias.\"}],\"InvalidContractName()\":[{\"notice\":\"Cannot register (or deregister) a contract with an empty string as a name.\"}],\"ZeroContractAddress()\":[{\"notice\":\"Cannot register or deprecate contracts, or add an alias targeting the zero address.\"}]},\"events\":{\"BalancerContractDeprecated(address)\":{\"notice\":\"Emitted when a registered contract is deprecated.\"},\"BalancerContractDeregistered(uint8,string,address)\":{\"notice\":\"Emitted when a new contract is deregistered (deleted).\"},\"BalancerContractRegistered(uint8,string,address)\":{\"notice\":\"Emitted when a new contract is registered.\"},\"ContractAliasUpdated(string,address)\":{\"notice\":\"Emitted when an alias is added or updated.\"}},\"kind\":\"user\",\"methods\":{\"addOrUpdateBalancerContractAlias(string,address)\":{\"notice\":\"Add an alias for a registered contract.\"},\"deprecateBalancerContract(address)\":{\"notice\":\"Deprecate an official Balancer contract.\"},\"deregisterBalancerContract(string)\":{\"notice\":\"Deregister an official Balancer contract (e.g., a trusted router, standard pool factory, or hook).\"},\"getBalancerContract(uint8,string)\":{\"notice\":\"Look up a registered contract by type and name.\"},\"getBalancerContractInfo(address)\":{\"notice\":\"Look up complete information about a registered contract by address.\"},\"isActiveBalancerContract(uint8,address)\":{\"notice\":\"Determine whether an address is an official contract of the specified type.\"},\"isTrustedRouter(address)\":{\"notice\":\"Returns `true` if the given address is an active contract under the ROUTER type.\"},\"registerBalancerContract(uint8,string,address)\":{\"notice\":\"Register an official Balancer contract (e.g., a trusted router, standard pool factory, or hook).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/standalone-utils/IBalancerContractRegistry.sol\":\"IBalancerContractRegistry\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/standalone-utils/IBalancerContractRegistry.sol\":{\"keccak256\":\"0xc243ec53db3f6df55e600459e723c1b15642eeb12f2202992edaa39af850d47d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b130e873859d2e6b4778be1bdb05a75019cc7f97e23092b8210b3ee9573b6113\",\"dweb:/ipfs/QmfQGk6ecHefaHiNKCH9dnUp7YMAuvzvPQLQwmri7Nq6Cc\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol":{"IProtocolFeeBurner":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"feeToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"feeTokenAmount","type":"uint256"},{"indexed":true,"internalType":"contract IERC20","name":"targetToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"targetTokenAmount","type":"uint256"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"}],"name":"ProtocolFeeBurned","type":"event"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"feeToken","type":"address"},{"internalType":"uint256","name":"feeTokenAmount","type":"uint256"},{"internalType":"contract IERC20","name":"targetToken","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"burn(address,address,uint256,address,address)":"54caad00"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ProtocolFeeBurned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,address,uint256,address,address)\":{\"details\":\"Assumes the sweeper has transferred the tokens to the burner prior to the call.\",\"params\":{\"feeToken\":\"The feeToken collected from the pool\",\"feeTokenAmount\":\"The number of fee tokens collected\",\"pool\":\"The pool the fees came from (only used for documentation in the event)\",\"recipient\":\"The recipient of the swap proceeds\",\"targetToken\":\"The desired target token (token out of the swap)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,address,uint256,address,address)\":{\"notice\":\"Swap an exact amount of `feeToken` for the `targetToken`, and send proceeds to the `recipient`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol\":\"IProtocolFeeBurner\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol\":{\"keccak256\":\"0xf86625ec7c352729de98584baef50c1561eddfb074e7c0ebf95819749dc21030\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://cda5545fbfbb61fdbaca25b25a9c1e773842096de65692fb2d8f62660d3ac7c6\",\"dweb:/ipfs/QmU36BdVf3CS7JYnXdew3kPjcoEysLKwiGofXvHcDkdLcr\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeSweeper.sol":{"IProtocolFeeSweeper":{"abi":[{"inputs":[],"name":"InvalidFeeRecipient","type":"error"},{"inputs":[],"name":"InvalidTargetToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"feeRecipient","type":"address"}],"name":"FeeRecipientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"protocolFeeBurner","type":"address"}],"name":"ProtocolFeeBurnerSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"feeToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"feeTokenAmount","type":"uint256"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"}],"name":"ProtocolFeeSwept","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TargetTokenSet","type":"event"},{"inputs":[],"name":"getFeeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeeBurner","outputs":[{"internalType":"contract IProtocolFeeBurner","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeeController","outputs":[{"internalType":"contract IProtocolFeeController","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTargetToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20[]","name":"feeTokens","type":"address[]"}],"name":"recoverProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"feeRecipient","type":"address"}],"name":"setFeeRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IProtocolFeeBurner","name":"protocolFeeBurner","type":"address"}],"name":"setProtocolFeeBurner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"targetToken","type":"address"}],"name":"setTargetToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"sweepProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"feeToken","type":"address"}],"name":"sweepProtocolFeesForToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getFeeRecipient()":"4ccb20c0","getProtocolFeeBurner()":"55f90510","getProtocolFeeController()":"85f2dbd4","getTargetToken()":"80db0d51","recoverProtocolFees(address[])":"b0edcc53","setFeeRecipient(address)":"e74b981b","setProtocolFeeBurner(address)":"e651a319","setTargetToken(address)":"1b66cb00","sweepProtocolFees(address)":"5884e804","sweepProtocolFeesForToken(address,address)":"c414dbd4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidFeeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTargetToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocolFeeBurner\",\"type\":\"address\"}],\"name\":\"ProtocolFeeBurnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ProtocolFeeSwept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TargetTokenSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeBurner\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeBurner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeController\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"feeTokens\",\"type\":\"address[]\"}],\"name\":\"recoverProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolFeeBurner\",\"name\":\"protocolFeeBurner\",\"type\":\"address\"}],\"name\":\"setProtocolFeeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"targetToken\",\"type\":\"address\"}],\"name\":\"setTargetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"sweepProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"sweepProtocolFeesForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeRecipientSet(address)\":{\"params\":{\"feeRecipient\":\"The final destination of collected protocol fees\"}},\"ProtocolFeeBurnerSet(address)\":{\"params\":{\"protocolFeeBurner\":\"The contract used to \\\"burn\\\" protocol fees (i.e., convert them to the target token)\"}},\"ProtocolFeeSwept(address,address,uint256,address)\":{\"details\":\"This can happen if no target token or burner contract was specified, or the fee token is the target token.\",\"params\":{\"feeToken\":\"The token the fee was collected in (also the target token in this case; no swap necessary)\",\"feeTokenAmount\":\"The number of feeTokens\",\"pool\":\"The pool on which the fee was collected\",\"recipient\":\"The recipient of the fee tokens\"}},\"TargetTokenSet(address)\":{\"params\":{\"token\":\"The preferred token for receiving protocol fees\"}}},\"kind\":\"dev\",\"methods\":{\"getFeeRecipient()\":{\"details\":\"Can be changed by `setFeeRecipient`.\",\"returns\":{\"_0\":\"feeRecipient The current fee recipient\"}},\"getProtocolFeeBurner()\":{\"details\":\"Can be changed by `setProtocolFeeBurner`.\",\"returns\":{\"_0\":\"protocolFeeBurner The currently active protocol fee burner\"}},\"getProtocolFeeController()\":{\"details\":\"It is not immutable in the Vault, so we need to fetch it every time.\",\"returns\":{\"_0\":\"protocolFeeController The address of the current `ProtocolFeeController`\"}},\"getTargetToken()\":{\"details\":\"This is the token the burner will swap all fee tokens for. Can be changed by `setTargetToken`.\",\"returns\":{\"_0\":\"targetToken The current target token\"}},\"recoverProtocolFees(address[])\":{\"details\":\"It will recover the full balance of all the tokens. This can only be called by the `feeRecipient`.\",\"params\":{\"feeTokens\":\"The tokens to recover\"}},\"setFeeRecipient(address)\":{\"details\":\"This is a permissioned function.\",\"params\":{\"feeRecipient\":\"The address of the new fee recipient\"}},\"setProtocolFeeBurner(address)\":{\"details\":\"This is a permissioned function. If it is not set, the contract will fall back to forwarding all fee tokens directly to the fee recipient. Note that if this function is called, `setTargetToken` must be called as well, or any sweep operations using the burner will revert with `InvalidTargetToken`.\",\"params\":{\"protocolFeeBurner\":\"The address of the current protocol fee burner\"}},\"setTargetToken(address)\":{\"details\":\"This is the token for which the burner will attempt to swap all collected fee tokens.\",\"params\":{\"targetToken\":\"The address of the target token\"}},\"sweepProtocolFees(address)\":{\"details\":\"This will withdraw all fee tokens from the controller to this contract, and attempt to convert and forward the proceeds to the fee recipient. Note that this requires governance to grant this contract permission to call `withdrawProtocolFees` on the `ProtocolFeeController`. This is a permissioned call, since it involves a swap and a permissionless sweep could be triggered at times disadvantageous to the protocol (e.g., flash crashes).\",\"params\":{\"pool\":\"The pool that incurred the fees we're withdrawing\"}},\"sweepProtocolFeesForToken(address,address)\":{\"details\":\"This will withdraw the fee token from the controller to this contract, and attempt to convert and forward the proceeds to the fee recipient. Note that this requires governance to grant this contract permission to call `withdrawProtocolFeesForToken` on the `ProtocolFeeController`. Since the general idea is to sweep when the token value crosses a certain threshold, we expect that this might be the most commonly used sweeping function. This is a permissioned call, since it involves a swap and a permissionless sweep could be triggered at times disadvantageous to the protocol (e.g., flash crashes).\",\"params\":{\"feeToken\":\"The fee token in the pool\",\"pool\":\"The pool that incurred the fees we're withdrawing\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidFeeRecipient()\":[{\"notice\":\"The fee recipient is invalid.\"}],\"InvalidTargetToken()\":[{\"notice\":\"The target token is invalid.\"}]},\"events\":{\"FeeRecipientSet(address)\":{\"notice\":\"Emitted when the fee recipient address is set or updated.\"},\"ProtocolFeeBurnerSet(address)\":{\"notice\":\"Emitted when the protocol fee burner contract is set or updated.\"},\"ProtocolFeeSwept(address,address,uint256,address)\":{\"notice\":\"Emitted when a fee token is transferred directly, vs. calling the burner.\"},\"TargetTokenSet(address)\":{\"notice\":\"Emitted when the target token is set or updated.\"}},\"kind\":\"user\",\"methods\":{\"getFeeRecipient()\":{\"notice\":\"Getter for the current fee recipient.\"},\"getProtocolFeeBurner()\":{\"notice\":\"Getter for the current protocol fee burner.\"},\"getProtocolFeeController()\":{\"notice\":\"Return the address of the current `ProtocolFeeController` from the Vault.\"},\"getTargetToken()\":{\"notice\":\"Getter for the target token.\"},\"recoverProtocolFees(address[])\":{\"notice\":\"Retrieve any tokens \\\"stuck\\\" in this contract (e.g., dust, or failed conversions).\"},\"setFeeRecipient(address)\":{\"notice\":\"Update the fee recipient address.\"},\"setProtocolFeeBurner(address)\":{\"notice\":\"Update the address of the protocol fee burner, used to convert protocol fees to a target token.\"},\"setTargetToken(address)\":{\"notice\":\"Update the address of the target token.\"},\"sweepProtocolFees(address)\":{\"notice\":\"Withdraw, convert, and forward protocol fees for a given pool.\"},\"sweepProtocolFeesForToken(address,address)\":{\"notice\":\"Withdraw, convert, and forward protocol fees for a given pool and token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeSweeper.sol\":\"IProtocolFeeSweeper\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol\":{\"keccak256\":\"0xf86625ec7c352729de98584baef50c1561eddfb074e7c0ebf95819749dc21030\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://cda5545fbfbb61fdbaca25b25a9c1e773842096de65692fb2d8f62660d3ac7c6\",\"dweb:/ipfs/QmU36BdVf3CS7JYnXdew3kPjcoEysLKwiGofXvHcDkdLcr\"]},\"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeSweeper.sol\":{\"keccak256\":\"0xfadd8901deab25520ba20ae97493551114d472d703e14bb7ca225c2534248697\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b04c5c6cd99ece833f04f1d1f42a88ef6f376f0a205ef241a535e0be514fea78\",\"dweb:/ipfs/QmZwfAML57y83dUhKasZ4QAPymS4Jdi8Xxf2hsy3owJ6H1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0x743734d3d3503d705f0a778c4b0dd61fdb067e89a07481ddbead0654e6808318\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6198f27b2d01f346fdd3d1302e9a6ddd543d2f06afd675d84919c2242bd26d8d\",\"dweb:/ipfs/QmYntQih5MwxxdGnVu2BPVLeqFuJEH761cByAesjwE6JKT\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol":{"IAuthorizer":{"abi":[{"inputs":[{"internalType":"bytes32","name":"actionId","type":"bytes32"},{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"where","type":"address"}],"name":"canPerform","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"canPerform(bytes32,address,address)":"9be2a884"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"}],\"name\":\"canPerform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"params\":{\"account\":\"Account trying to perform the action\",\"actionId\":\"Identifier for the action to be performed\",\"where\":\"Target contract for the action\"},\"returns\":{\"success\":\"True if the action is permitted\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"notice\":\"Returns true if `account` can perform the action described by `actionId` in the contract `where`.\"}},\"notice\":\"Interface to the Vault's permission system.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":\"IAuthorizer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol":{"IHooks":{"abi":[{"inputs":[],"name":"getHookFlags","outputs":[{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"}],"internalType":"struct HookFlags","name":"hookFlags","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256[]","name":"amountsInScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"amountsInRaw","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onAfterAddLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256[]","name":"hookAdjustedAmountsInRaw","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onAfterInitialize","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOutScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"amountsOutRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onAfterRemoveLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256[]","name":"hookAdjustedAmountsOutRaw","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountInScaled18","type":"uint256"},{"internalType":"uint256","name":"amountOutScaled18","type":"uint256"},{"internalType":"uint256","name":"tokenInBalanceScaled18","type":"uint256"},{"internalType":"uint256","name":"tokenOutBalanceScaled18","type":"uint256"},{"internalType":"uint256","name":"amountCalculatedScaled18","type":"uint256"},{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct AfterSwapParams","name":"params","type":"tuple"}],"name":"onAfterSwap","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256","name":"hookAdjustedAmountCalculatedRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256[]","name":"maxAmountsInScaled18","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onBeforeAddLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onBeforeInitialize","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOutScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onBeforeRemoveLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"params","type":"tuple"},{"internalType":"address","name":"pool","type":"address"}],"name":"onBeforeSwap","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"params","type":"tuple"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"}],"name":"onComputeDynamicSwapFeePercentage","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256","name":"dynamicSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"factory","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"onRegister","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getHookFlags()":"d77153a7","onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)":"976907cc","onAfterInitialize(uint256[],uint256,bytes)":"38be241d","onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)":"2754888d","onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))":"18b6eb55","onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)":"45421ec7","onBeforeInitialize(uint256[],bytes)":"1c149e28","onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)":"ba5f9f40","onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)":"5211fa77","onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)":"a0e8f5ac","onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))":"0b89f182"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getHookFlags\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"}],\"internalType\":\"struct HookFlags\",\"name\":\"hookFlags\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onAfterAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"hookAdjustedAmountsInRaw\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onAfterInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onAfterRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"hookAdjustedAmountsOutRaw\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenInBalanceScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutBalanceScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCalculatedScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct AfterSwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"onAfterSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"hookAdjustedAmountCalculatedRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsInScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onBeforeAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onBeforeInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOutScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onBeforeRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"onBeforeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"onComputeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dynamicSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"onRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Hooks are functions invoked by the Vault at specific points in the flow of each operation. This guarantees that they are called in the correct order, and with the correct arguments. To maintain this security, these functions should only be called by the Vault. The recommended way to do this is to derive the hook contract from `BaseHooks`, then use the `onlyVault` modifier from `VaultGuard`. (See the examples in /pool-hooks.)\",\"kind\":\"dev\",\"methods\":{\"getHookFlags()\":{\"details\":\"The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero). `onRegister` is the only \\\"mandatory\\\" hook.\",\"returns\":{\"hookFlags\":\"Flags indicating which hooks the contract supports\"}},\"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)\":{\"details\":\"Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"amountsInRaw\":\"Actual amounts of tokens added, sorted in token registration order\",\"amountsInScaled18\":\"Actual amounts of tokens added, sorted in token registration order\",\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"bptAmountOut\":\"Amount of pool tokens minted\",\"kind\":\"The add liquidity operation type (e.g., proportional, custom)\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated an add liquidity operation on the Vault\",\"userData\":\"Additional (optional) data provided by the user\"},\"returns\":{\"hookAdjustedAmountsInRaw\":\"New amountsInRaw, potentially modified by the hook\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onAfterInitialize(uint256[],uint256,bytes)\":{\"details\":\"Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"bptAmountOut\":\"Amount of pool tokens minted during initialization\",\"exactAmountsIn\":\"Exact amounts of input tokens\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool accepts the initialization results\"}},\"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)\":{\"details\":\"Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"amountsOutRaw\":\"Actual amount of tokens to receive, sorted in token registration order\",\"amountsOutScaled18\":\"Scaled amount of tokens to receive, sorted in token registration order\",\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"bptAmountIn\":\"Amount of pool tokens to burn\",\"kind\":\"The type of remove liquidity operation (e.g., proportional, custom)\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated a remove liquidity operation on the Vault\",\"userData\":\"Additional (optional) data provided by the user\"},\"returns\":{\"hookAdjustedAmountsOutRaw\":\"New amountsOutRaw, potentially modified by the hook\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))\":{\"details\":\"Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see above for struct definition)\"},\"returns\":{\"hookAdjustedAmountCalculatedRaw\":\"New amount calculated, potentially modified by the hook\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"kind\":\"The add liquidity operation type (e.g., proportional, custom)\",\"maxAmountsInScaled18\":\"Maximum amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated an add liquidity operation on the Vault\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeInitialize(uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with initialization\"}},\"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"kind\":\"The type of remove liquidity operation (e.g., proportional, custom)\",\"maxBptAmountIn\":\"Maximum amount of input pool tokens\",\"minAmountsOutScaled18\":\"Minimum output amounts, sorted in token registration order\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated a remove liquidity operation on the Vault\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)\":{\"details\":\"Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see PoolSwapParams for struct definition)\",\"pool\":\"Pool address, used to get pool information from the Vault (poolData, token config, etc.)\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)\":{\"details\":\"Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see PoolSwapParams for struct definition)\",\"pool\":\"Pool address, used to get pool information from the Vault (poolData, token config, etc.)\",\"staticSwapFeePercentage\":\"18-decimal FP value of the static swap fee percentage, for reference\"},\"returns\":{\"dynamicSwapFeePercentage\":\"Value of the swap fee percentage, as an 18-decimal FP value\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))\":{\"details\":\"Returns true if registration was successful, and false to revert the pool registration. Make sure this function is properly implemented (e.g. check the factory, and check that the given pool is from the factory). The Vault address will be msg.sender.\",\"params\":{\"factory\":\"Address of the pool factory (contract deploying the pool)\",\"liquidityManagement\":\"Liquidity management flags indicating which functions are enabled\",\"pool\":\"Address of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"},\"returns\":{\"success\":\"True if the hook allowed the registration, false otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getHookFlags()\":{\"notice\":\"Return the set of hooks implemented by the contract.\"},\"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)\":{\"notice\":\"Hook to be executed after adding liquidity.\"},\"onAfterInitialize(uint256[],uint256,bytes)\":{\"notice\":\"Hook to be executed after pool initialization.\"},\"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"Hook to be executed after removing liquidity.\"},\"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))\":{\"notice\":\"Called after a swap to perform further actions once the balances have been updated by the swap.\"},\"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)\":{\"notice\":\"Hook to be executed before adding liquidity.\"},\"onBeforeInitialize(uint256[],bytes)\":{\"notice\":\"Hook executed before pool initialization.\"},\"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)\":{\"notice\":\"Hook to be executed before removing liquidity.\"},\"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)\":{\"notice\":\"Called before a swap to give the Pool an opportunity to perform actions.\"},\"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)\":{\"notice\":\"Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees.\"},\"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))\":{\"notice\":\"Hook executed when a pool is registered with a non-zero hooks contract.\"}},\"notice\":\"Interface for pool hooks.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":\"IHooks\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol":{"IProtocolFeeController":{"abi":[{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"pool","type":"address"}],"name":"CallerIsNotPoolCreator","type":"error"},{"inputs":[],"name":"PoolCreatorFeePercentageTooHigh","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolCreatorNotRegistered","type":"error"},{"inputs":[],"name":"ProtocolSwapFeePercentageTooHigh","type":"error"},{"inputs":[],"name":"ProtocolYieldFeePercentageTooHigh","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"GlobalProtocolSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"yieldFeePercentage","type":"uint256"}],"name":"GlobalProtocolYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PoolCreatorFeesWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolCreatorSwapFeePercentage","type":"uint256"}],"name":"PoolCreatorSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolCreatorYieldFeePercentage","type":"uint256"}],"name":"PoolCreatorYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ProtocolFeesWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ProtocolSwapFeeCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"ProtocolSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ProtocolYieldFeeCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"yieldFeePercentage","type":"uint256"}],"name":"ProtocolYieldFeePercentageChanged","type":"event"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"protocolFeePercentage","type":"uint256"},{"internalType":"uint256","name":"poolCreatorFeePercentage","type":"uint256"}],"name":"computeAggregateFeePercentage","outputs":[{"internalType":"uint256","name":"aggregateFeePercentage","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getGlobalProtocolSwapFeePercentage","outputs":[{"internalType":"uint256","name":"protocolSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGlobalProtocolYieldFeePercentage","outputs":[{"internalType":"uint256","name":"protocolYieldFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolCreatorFeeAmounts","outputs":[{"internalType":"uint256[]","name":"feeAmounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolProtocolSwapFeeInfo","outputs":[{"internalType":"uint256","name":"protocolSwapFeePercentage","type":"uint256"},{"internalType":"bool","name":"isOverride","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolProtocolYieldFeeInfo","outputs":[{"internalType":"uint256","name":"protocolYieldFeePercentage","type":"uint256"},{"internalType":"bool","name":"isOverride","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getProtocolFeeAmounts","outputs":[{"internalType":"uint256[]","name":"feeAmounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"},{"internalType":"bool","name":"protocolFeeExempt","type":"bool"}],"name":"registerPool","outputs":[{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newProtocolSwapFeePercentage","type":"uint256"}],"name":"setGlobalProtocolSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newProtocolYieldFeePercentage","type":"uint256"}],"name":"setGlobalProtocolYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"poolCreatorSwapFeePercentage","type":"uint256"}],"name":"setPoolCreatorSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"poolCreatorYieldFeePercentage","type":"uint256"}],"name":"setPoolCreatorYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newProtocolSwapFeePercentage","type":"uint256"}],"name":"setProtocolSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newProtocolYieldFeePercentage","type":"uint256"}],"name":"setProtocolYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"updateProtocolSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"updateProtocolYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"withdrawPoolCreatorFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawPoolCreatorFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"withdrawProtocolFeesForToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"collectAggregateFees(address)":"8f4ab9ca","computeAggregateFeePercentage(uint256,uint256)":"0ddd60c6","getGlobalProtocolSwapFeePercentage()":"7869ee18","getGlobalProtocolYieldFeePercentage()":"55fb76af","getPoolCreatorFeeAmounts(address)":"9e95f3fd","getPoolProtocolSwapFeeInfo(address)":"5c15a0b4","getPoolProtocolYieldFeeInfo(address)":"7a2b97dc","getProtocolFeeAmounts(address)":"8df44c54","registerPool(address,address,bool)":"77ff76e7","setGlobalProtocolSwapFeePercentage(uint256)":"8a3c5c69","setGlobalProtocolYieldFeePercentage(uint256)":"a93df2a4","setPoolCreatorSwapFeePercentage(address,uint256)":"1377c16c","setPoolCreatorYieldFeePercentage(address,uint256)":"3af52712","setProtocolSwapFeePercentage(address,uint256)":"fd267f39","setProtocolYieldFeePercentage(address,uint256)":"abaa3356","updateProtocolSwapFeePercentage(address)":"71ecc8fb","updateProtocolYieldFeePercentage(address)":"71447ea8","vault()":"fbfa77cf","withdrawPoolCreatorFees(address)":"52f125f0","withdrawPoolCreatorFees(address,address)":"f7061445","withdrawProtocolFees(address,address)":"cf7b287f","withdrawProtocolFeesForToken(address,address,address)":"b53a70b2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"CallerIsNotPoolCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolCreatorFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreatorNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolSwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolYieldFeePercentageTooHigh\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"GlobalProtocolSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"GlobalProtocolYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolCreatorFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolCreatorSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"PoolCreatorSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolCreatorYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"PoolCreatorYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolSwapFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ProtocolSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolYieldFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ProtocolYieldFeePercentageChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolCreatorFeePercentage\",\"type\":\"uint256\"}],\"name\":\"computeAggregateFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aggregateFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalProtocolSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalProtocolYieldFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolYieldFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCreatorFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolProtocolSwapFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOverride\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolProtocolYieldFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolYieldFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOverride\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getProtocolFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setGlobalProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setGlobalProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolCreatorSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setPoolCreatorSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolCreatorYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setPoolCreatorYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"updateProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"updateProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"withdrawPoolCreatorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawPoolCreatorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFeesForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CallerIsNotPoolCreator(address,address)\":[{\"params\":{\"caller\":\"The account attempting to withdraw pool creator fees\",\"pool\":\"The pool the caller tried to withdraw from\"}}],\"PoolCreatorNotRegistered(address)\":[{\"params\":{\"pool\":\"The pool with no creator\"}}],\"ProtocolSwapFeePercentageTooHigh()\":[{\"details\":\"Note that this is checked for both the global and pool-specific protocol swap fee percentages.\"}],\"ProtocolYieldFeePercentageTooHigh()\":[{\"details\":\"Note that this is checked for both the global and pool-specific protocol yield fee percentages.\"}]},\"events\":{\"GlobalProtocolSwapFeePercentageChanged(uint256)\":{\"params\":{\"swapFeePercentage\":\"The updated protocol swap fee percentage\"}},\"GlobalProtocolYieldFeePercentageChanged(uint256)\":{\"params\":{\"yieldFeePercentage\":\"The updated protocol yield fee percentage\"}},\"PoolCreatorFeesWithdrawn(address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the fee token that was withdrawn\",\"pool\":\"The pool from which pool creator fees are being withdrawn\",\"recipient\":\"The recipient of the funds (the pool creator if permissionless, or another account)\",\"token\":\"The token being withdrawn\"}},\"PoolCreatorSwapFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose pool creator swap fee will be changed\",\"poolCreatorSwapFeePercentage\":\"The new pool creator swap fee percentage for the pool\"}},\"PoolCreatorYieldFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose pool creator yield fee will be changed\",\"poolCreatorYieldFeePercentage\":\"The new pool creator yield fee percentage for the pool\"}},\"ProtocolFeesWithdrawn(address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the fee token that was withdrawn\",\"pool\":\"The pool from which protocol fees are being withdrawn\",\"recipient\":\"The recipient of the funds\",\"token\":\"The token being withdrawn\"}},\"ProtocolSwapFeeCollected(address,address,uint256)\":{\"details\":\"Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs in the Vault, but fee collection happens in the ProtocolFeeController, the swap fees reported here may encompass multiple operations.\",\"params\":{\"amount\":\"The amount of the token collected in fees\",\"pool\":\"The pool on which the swap fee was charged\",\"token\":\"The token in which the swap fee was charged\"}},\"ProtocolSwapFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose protocol swap fee will be changed\",\"swapFeePercentage\":\"The updated protocol swap fee percentage\"}},\"ProtocolYieldFeeCollected(address,address,uint256)\":{\"details\":\"Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs in the Vault, but fee collection happens in the ProtocolFeeController, the yield fees reported here may encompass multiple operations.\",\"params\":{\"amount\":\"The amount of the token collected in fees\",\"pool\":\"The pool on which the yield fee was charged\",\"token\":\"The token in which the yield fee was charged\"}},\"ProtocolYieldFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose protocol yield fee will be changed\",\"yieldFeePercentage\":\"The updated protocol yield fee percentage\"}}},\"kind\":\"dev\",\"methods\":{\"collectAggregateFees(address)\":{\"params\":{\"pool\":\"The pool with aggregate fees\"}},\"computeAggregateFeePercentage(uint256,uint256)\":{\"details\":\"Not tied to any particular pool; this just performs the low-level \\\"additive fee\\\" calculation. Note that pool creator fees are calculated based on creatorAndLpFees, and not in totalFees. Since aggregate fees are stored in the Vault with 24-bit precision, this will truncate any values that require greater precision. It is expected that pool creators will negotiate with the DAO and agree on reasonable values for these fee components, but the truncation ensures it will not revert for any valid set of fee percentages. See example below: tokenOutAmount = 10000; poolSwapFeePct = 10%; protocolFeePct = 40%; creatorFeePct = 60% totalFees = tokenOutAmount * poolSwapFeePct = 10000 * 10% = 1000 protocolFees = totalFees * protocolFeePct = 1000 * 40% = 400 creatorAndLpFees = totalFees - protocolFees = 1000 - 400 = 600 creatorFees = creatorAndLpFees * creatorFeePct = 600 * 60% = 360 lpFees (will stay in the pool) = creatorAndLpFees - creatorFees = 600 - 360 = 240\",\"params\":{\"poolCreatorFeePercentage\":\"The pool creator portion of the aggregate fee percentage\",\"protocolFeePercentage\":\"The protocol portion of the aggregate fee percentage\"},\"returns\":{\"aggregateFeePercentage\":\"The computed aggregate percentage\"}},\"getGlobalProtocolSwapFeePercentage()\":{\"returns\":{\"protocolSwapFeePercentage\":\"The global protocol swap fee percentage\"}},\"getGlobalProtocolYieldFeePercentage()\":{\"returns\":{\"protocolYieldFeePercentage\":\"The global protocol yield fee percentage\"}},\"getPoolCreatorFeeAmounts(address)\":{\"details\":\"Includes both swap and yield fees.\",\"params\":{\"pool\":\"The address of the pool on which fees were collected\"},\"returns\":{\"feeAmounts\":\"The total amounts of each token available for withdrawal, sorted in token registration order\"}},\"getPoolProtocolSwapFeeInfo(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"isOverride\":\"True if the protocol fee has been overridden\",\"protocolSwapFeePercentage\":\"The global protocol swap fee percentage\"}},\"getPoolProtocolYieldFeeInfo(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"isOverride\":\"True if the protocol fee has been overridden\",\"protocolYieldFeePercentage\":\"The global protocol yield fee percentage\"}},\"getProtocolFeeAmounts(address)\":{\"details\":\"Includes both swap and yield fees.\",\"params\":{\"pool\":\"The address of the pool on which fees were collected\"},\"returns\":{\"feeAmounts\":\"The total amounts of each token available for withdrawal, sorted in token registration order\"}},\"registerPool(address,address,bool)\":{\"details\":\"This must be called from the Vault during pool registration. It will initialize the pool to the global protocol fee percentage values (or 0, if the `protocolFeeExempt` flags is set), and return the initial aggregate fee percentages, based on an initial pool creator fee of 0.\",\"params\":{\"pool\":\"The address of the pool being registered\",\"poolCreator\":\"The address of the pool creator (or 0 if there won't be a pool creator fee)\",\"protocolFeeExempt\":\"If true, the pool is initially exempt from protocol fees\"},\"returns\":{\"aggregateSwapFeePercentage\":\"The initial aggregate swap fee percentage\",\"aggregateYieldFeePercentage\":\"The initial aggregate yield fee percentage\"}},\"setGlobalProtocolSwapFeePercentage(uint256)\":{\"params\":{\"newProtocolSwapFeePercentage\":\"The new protocol swap fee percentage\"}},\"setGlobalProtocolYieldFeePercentage(uint256)\":{\"params\":{\"newProtocolYieldFeePercentage\":\"The new protocol yield fee percentage\"}},\"setPoolCreatorSwapFeePercentage(address,uint256)\":{\"details\":\"Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to the \\\"net\\\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\",\"params\":{\"pool\":\"The address of the pool for which the pool creator fee will be changed\",\"poolCreatorSwapFeePercentage\":\"The new pool creator swap fee percentage to apply to the pool\"}},\"setPoolCreatorYieldFeePercentage(address,uint256)\":{\"details\":\"Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to the \\\"net\\\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\",\"params\":{\"pool\":\"The address of the pool for which the pool creator fee will be changed\",\"poolCreatorYieldFeePercentage\":\"The new pool creator yield fee percentage to apply to the pool\"}},\"setProtocolSwapFeePercentage(address,uint256)\":{\"params\":{\"newProtocolSwapFeePercentage\":\"The new protocol swap fee percentage for the pool\",\"pool\":\"The address of the pool for which we are setting the protocol swap fee\"}},\"setProtocolYieldFeePercentage(address,uint256)\":{\"params\":{\"newProtocolYieldFeePercentage\":\"The new protocol yield fee percentage for the pool\",\"pool\":\"The address of the pool for which we are setting the protocol yield fee\"}},\"updateProtocolSwapFeePercentage(address)\":{\"details\":\"This is a permissionless call, and will set the pool's fee to the current global fee, if it is different from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\",\"params\":{\"pool\":\"The pool for which we are setting the protocol swap fee\"}},\"updateProtocolYieldFeePercentage(address)\":{\"details\":\"This is a permissionless call, and will set the pool's fee to the current global fee, if it is different from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\",\"params\":{\"pool\":\"The pool for which we are setting the protocol yield fee\"}},\"vault()\":{\"returns\":{\"_0\":\"vault The Vault address\"}},\"withdrawPoolCreatorFees(address)\":{\"details\":\"Sends swap and yield pool creator fees to the registered poolCreator. Since this is a known and immutable value, this function is permissionless.\",\"params\":{\"pool\":\"The pool on which fees were collected\"}},\"withdrawPoolCreatorFees(address,address)\":{\"details\":\"Sends swap and yield pool creator fees to the recipient.\",\"params\":{\"pool\":\"The pool on which fees were collected\",\"recipient\":\"Address to send the tokens\"}},\"withdrawProtocolFees(address,address)\":{\"details\":\"Sends swap and yield protocol fees to the recipient.\",\"params\":{\"pool\":\"The pool on which fees were collected\",\"recipient\":\"Address to send the tokens\"}},\"withdrawProtocolFeesForToken(address,address,address)\":{\"details\":\"Sends swap and yield protocol fees to the recipient.\",\"params\":{\"pool\":\"The pool on which fees were collected\",\"recipient\":\"Address to send the tokens\",\"token\":\"Token to withdraw\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"CallerIsNotPoolCreator(address,address)\":[{\"notice\":\"Error raised if the wrong account attempts to withdraw pool creator fees.\"}],\"PoolCreatorFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the pool creator swap or yield fee percentage exceeds the maximum allowed value.\"}],\"PoolCreatorNotRegistered(address)\":[{\"notice\":\"Error raised if there is no pool creator on a withdrawal attempt from the given pool.\"}],\"ProtocolSwapFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\"}],\"ProtocolYieldFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\"}]},\"events\":{\"GlobalProtocolSwapFeePercentageChanged(uint256)\":{\"notice\":\"Emitted when the protocol swap fee percentage is updated.\"},\"GlobalProtocolYieldFeePercentageChanged(uint256)\":{\"notice\":\"Emitted when the protocol yield fee percentage is updated.\"},\"PoolCreatorFeesWithdrawn(address,address,address,uint256)\":{\"notice\":\"Logs the withdrawal of pool creator fees in a specific token and amount.\"},\"PoolCreatorSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the pool creator swap fee percentage of a pool is updated.\"},\"PoolCreatorYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the pool creator yield fee percentage of a pool is updated.\"},\"ProtocolFeesWithdrawn(address,address,address,uint256)\":{\"notice\":\"Logs the withdrawal of protocol fees in a specific token and amount.\"},\"ProtocolSwapFeeCollected(address,address,uint256)\":{\"notice\":\"Logs the collection of protocol swap fees in a specific token and amount.\"},\"ProtocolSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the protocol swap fee percentage is updated for a specific pool.\"},\"ProtocolYieldFeeCollected(address,address,uint256)\":{\"notice\":\"Logs the collection of protocol yield fees in a specific token and amount.\"},\"ProtocolYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the protocol yield fee percentage is updated for a specific pool.\"}},\"kind\":\"user\",\"methods\":{\"collectAggregateFees(address)\":{\"notice\":\"Collects aggregate fees from the Vault for a given pool.\"},\"computeAggregateFeePercentage(uint256,uint256)\":{\"notice\":\"Returns a calculated aggregate percentage from protocol and pool creator fee percentages.\"},\"getGlobalProtocolSwapFeePercentage()\":{\"notice\":\"Getter for the current global protocol swap fee.\"},\"getGlobalProtocolYieldFeePercentage()\":{\"notice\":\"Getter for the current global protocol yield fee.\"},\"getPoolCreatorFeeAmounts(address)\":{\"notice\":\"Returns the amount of each pool token allocated to the pool creator for withdrawal.\"},\"getPoolProtocolSwapFeeInfo(address)\":{\"notice\":\"Getter for the current protocol swap fee for a given pool.\"},\"getPoolProtocolYieldFeeInfo(address)\":{\"notice\":\"Getter for the current protocol yield fee for a given pool.\"},\"getProtocolFeeAmounts(address)\":{\"notice\":\"Returns the amount of each pool token allocated to the protocol for withdrawal.\"},\"registerPool(address,address,bool)\":{\"notice\":\"Add pool-specific entries to the protocol swap and yield percentages.\"},\"setGlobalProtocolSwapFeePercentage(uint256)\":{\"notice\":\"Set the global protocol swap fee percentage, used by standard pools.\"},\"setGlobalProtocolYieldFeePercentage(uint256)\":{\"notice\":\"Set the global protocol yield fee percentage, used by standard pools.\"},\"setPoolCreatorSwapFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new pool creator swap fee percentage to the specified pool.\"},\"setPoolCreatorYieldFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new pool creator yield fee percentage to the specified pool.\"},\"setProtocolSwapFeePercentage(address,uint256)\":{\"notice\":\"Override the protocol swap fee percentage for a specific pool.\"},\"setProtocolYieldFeePercentage(address,uint256)\":{\"notice\":\"Override the protocol yield fee percentage for a specific pool.\"},\"updateProtocolSwapFeePercentage(address)\":{\"notice\":\"Override the protocol swap fee percentage for a specific pool.\"},\"updateProtocolYieldFeePercentage(address)\":{\"notice\":\"Override the protocol yield fee percentage for a specific pool.\"},\"vault()\":{\"notice\":\"Get the address of the main Vault contract.\"},\"withdrawPoolCreatorFees(address)\":{\"notice\":\"Withdraw collected pool creator fees for a given pool.\"},\"withdrawPoolCreatorFees(address,address)\":{\"notice\":\"Withdraw collected pool creator fees for a given pool. This is a permissioned function.\"},\"withdrawProtocolFees(address,address)\":{\"notice\":\"Withdraw collected protocol fees for a given pool (all tokens). This is a permissioned function.\"},\"withdrawProtocolFeesForToken(address,address,address)\":{\"notice\":\"Withdraw collected protocol fees for a given pool and a given token. This is a permissioned function.\"}},\"notice\":\"Contract that handles protocol and pool creator fees for the Vault.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":\"IProtocolFeeController\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0x743734d3d3503d705f0a778c4b0dd61fdb067e89a07481ddbead0654e6808318\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6198f27b2d01f346fdd3d1302e9a6ddd543d2f06afd675d84919c2242bd26d8d\",\"dweb:/ipfs/QmYntQih5MwxxdGnVu2BPVLeqFuJEH761cByAesjwE6JKT\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol":{"IRouter":{"abi":[{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"addLiquidityCustom","outputs":[{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"exactBptAmountOut","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"addLiquidityProportional","outputs":[{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"},{"internalType":"uint256","name":"exactBptAmountOut","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"addLiquiditySingleTokenExactOut","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"addLiquidityUnbalanced","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"donate","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"initialize","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"queryAddLiquidityCustom","outputs":[{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"exactBptAmountOut","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"queryAddLiquidityProportional","outputs":[{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"exactBptAmountOut","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"queryAddLiquiditySingleTokenExactOut","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"queryAddLiquidityUnbalanced","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"queryRemoveLiquidityCustom","outputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"queryRemoveLiquidityProportional","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"}],"name":"queryRemoveLiquidityRecovery","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"queryRemoveLiquiditySingleTokenExactIn","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"exactAmountOut","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"queryRemoveLiquiditySingleTokenExactOut","outputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"exactAmountIn","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"querySwapSingleTokenExactIn","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"exactAmountOut","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"querySwapSingleTokenExactOut","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"removeLiquidityCustom","outputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"removeLiquidityProportional","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"}],"name":"removeLiquidityRecovery","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"removeLiquiditySingleTokenExactIn","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"exactAmountOut","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"removeLiquiditySingleTokenExactOut","outputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"exactAmountIn","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"swapSingleTokenExactIn","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"exactAmountOut","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"swapSingleTokenExactOut","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addLiquidityCustom(address,uint256[],uint256,bool,bytes)":"0ca078ec","addLiquidityProportional(address,uint256[],uint256,bool,bytes)":"724dba33","addLiquiditySingleTokenExactOut(address,address,uint256,uint256,bool,bytes)":"72657d17","addLiquidityUnbalanced(address,uint256[],uint256,bool,bytes)":"c08bc851","donate(address,uint256[],bool,bytes)":"bf6ee3fd","initialize(address,address[],uint256[],uint256,bool,bytes)":"026b3d95","queryAddLiquidityCustom(address,uint256[],uint256,address,bytes)":"452db952","queryAddLiquidityProportional(address,uint256,address,bytes)":"9de90518","queryAddLiquiditySingleTokenExactOut(address,address,uint256,address,bytes)":"1d56798d","queryAddLiquidityUnbalanced(address,uint256[],address,bytes)":"da001f7d","queryRemoveLiquidityCustom(address,uint256,uint256[],address,bytes)":"c330c7be","queryRemoveLiquidityProportional(address,uint256,address,bytes)":"0f710888","queryRemoveLiquidityRecovery(address,uint256)":"b037ed36","queryRemoveLiquiditySingleTokenExactIn(address,uint256,address,address,bytes)":"23b39241","queryRemoveLiquiditySingleTokenExactOut(address,address,uint256,address,bytes)":"53d0bb98","querySwapSingleTokenExactIn(address,address,address,uint256,address,bytes)":"3ebc54e5","querySwapSingleTokenExactOut(address,address,address,uint256,address,bytes)":"175d4408","removeLiquidityCustom(address,uint256,uint256[],bool,bytes)":"82bf2b24","removeLiquidityProportional(address,uint256,uint256[],bool,bytes)":"51682750","removeLiquidityRecovery(address,uint256,uint256[])":"08c04793","removeLiquiditySingleTokenExactIn(address,uint256,address,uint256,bool,bytes)":"ecb2182c","removeLiquiditySingleTokenExactOut(address,uint256,address,uint256,bool,bytes)":"e7326def","swapSingleTokenExactIn(address,address,address,uint256,uint256,uint256,bool,bytes)":"750283bc","swapSingleTokenExactOut(address,address,address,uint256,uint256,uint256,bool,bytes)":"94e86ef8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"addLiquidityCustom\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"addLiquidityProportional\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"addLiquiditySingleTokenExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"addLiquidityUnbalanced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryAddLiquidityCustom\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryAddLiquidityProportional\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryAddLiquiditySingleTokenExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryAddLiquidityUnbalanced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryRemoveLiquidityCustom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryRemoveLiquidityProportional\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"}],\"name\":\"queryRemoveLiquidityRecovery\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryRemoveLiquiditySingleTokenExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryRemoveLiquiditySingleTokenExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"querySwapSingleTokenExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"querySwapSingleTokenExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"removeLiquidityCustom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"removeLiquidityProportional\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"removeLiquidityRecovery\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"removeLiquiditySingleTokenExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"removeLiquiditySingleTokenExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"swapSingleTokenExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"swapSingleTokenExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidityCustom(address,uint256[],uint256,bool,bytes)\":{\"details\":\"The given maximum and minimum amounts given may be interpreted as exact depending on the pool type. In any case the caller can expect them to be hard boundaries for the request.\",\"params\":{\"maxAmountsIn\":\"Maximum amounts of tokens to be added, sorted in token registration order\",\"minBptAmountOut\":\"Minimum amount of pool tokens to be received\",\"pool\":\"Address of the liquidity pool\",\"userData\":\"Additional (optional) data sent with the request to add liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"amountsIn\":\"Actual amounts of tokens added, sorted in token registration order\",\"bptAmountOut\":\"Actual amount of pool tokens received\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"addLiquidityProportional(address,uint256[],uint256,bool,bytes)\":{\"params\":{\"exactBptAmountOut\":\"Exact amount of pool tokens to be received\",\"maxAmountsIn\":\"Maximum amounts of tokens to be added, sorted in token registration order\",\"pool\":\"Address of the liquidity pool\",\"userData\":\"Additional (optional) data sent with the request to add liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"amountsIn\":\"Actual amounts of tokens added, sorted in token registration order\"}},\"addLiquiditySingleTokenExactOut(address,address,uint256,uint256,bool,bytes)\":{\"params\":{\"exactBptAmountOut\":\"Exact amount of pool tokens to be received\",\"maxAmountIn\":\"Maximum amount of tokens to be added\",\"pool\":\"Address of the liquidity pool\",\"tokenIn\":\"Token used to add liquidity\",\"userData\":\"Additional (optional) data sent with the request to add liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"amountIn\":\"Actual amount of tokens added\"}},\"addLiquidityUnbalanced(address,uint256[],uint256,bool,bytes)\":{\"params\":{\"exactAmountsIn\":\"Exact amounts of tokens to be added, sorted in token registration order\",\"minBptAmountOut\":\"Minimum amount of pool tokens to be received\",\"pool\":\"Address of the liquidity pool\",\"userData\":\"Additional (optional) data sent with the request to add liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"bptAmountOut\":\"Actual amount of pool tokens received\"}},\"donate(address,uint256[],bool,bytes)\":{\"details\":\"To support donation, the pool config `enableDonation` flag must be set to true.\",\"params\":{\"amountsIn\":\"Amounts of tokens to be donated, sorted in token registration order\",\"pool\":\"Address of the liquidity pool\",\"userData\":\"Additional (optional) data sent with the request to donate liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"}},\"initialize(address,address[],uint256[],uint256,bool,bytes)\":{\"params\":{\"exactAmountsIn\":\"Exact amounts of tokens to be added, sorted in token registration order\",\"minBptAmountOut\":\"Minimum amount of pool tokens to be received\",\"pool\":\"Address of the liquidity pool\",\"tokens\":\"Pool tokens, in token registration order\",\"userData\":\"Additional (optional) data sent with the request to add initial liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"bptAmountOut\":\"Actual amount of pool tokens minted in exchange for initial liquidity\"}},\"queryAddLiquidityCustom(address,uint256[],uint256,address,bytes)\":{\"params\":{\"maxAmountsIn\":\"Maximum amounts of tokens to be added, sorted in token registration order\",\"minBptAmountOut\":\"Expected minimum amount of pool tokens to receive\",\"pool\":\"Address of the liquidity pool\",\"sender\":\"The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\",\"userData\":\"Additional (optional) data sent with the query request\"},\"returns\":{\"amountsIn\":\"Expected amounts of tokens to add, sorted in token registration order\",\"bptAmountOut\":\"Expected amount of pool tokens to receive\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"queryAddLiquidityProportional(address,uint256,address,bytes)\":{\"params\":{\"exactBptAmountOut\":\"Exact amount of pool tokens to be received\",\"pool\":\"Address of the liquidity pool\",\"sender\":\"The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\",\"userData\":\"Additional (optional) data sent with the query request\"},\"returns\":{\"amountsIn\":\"Expected amounts of tokens to add, sorted in token registration order\"}},\"queryAddLiquiditySingleTokenExactOut(address,address,uint256,address,bytes)\":{\"params\":{\"exactBptAmountOut\":\"Expected exact amount of pool tokens to receive\",\"pool\":\"Address of the liquidity pool\",\"sender\":\"The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\",\"tokenIn\":\"Token used to add liquidity\",\"userData\":\"Additional (optional) data sent with the query request\"},\"returns\":{\"amountIn\":\"Expected amount of tokens to add\"}},\"queryAddLiquidityUnbalanced(address,uint256[],address,bytes)\":{\"params\":{\"exactAmountsIn\":\"Exact amounts of tokens to be added, sorted in token registration order\",\"pool\":\"Address of the liquidity pool\",\"sender\":\"The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\",\"userData\":\"Additional (optional) data sent with the query request\"},\"returns\":{\"bptAmountOut\":\"Expected amount of pool tokens to receive\"}},\"queryRemoveLiquidityCustom(address,uint256,uint256[],address,bytes)\":{\"params\":{\"maxBptAmountIn\":\"Maximum amount of pool tokens provided\",\"minAmountsOut\":\"Expected minimum amounts of tokens to receive, sorted in token registration order\",\"pool\":\"Address of the liquidity pool\",\"sender\":\"The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\",\"userData\":\"Additional (optional) data sent with the query request\"},\"returns\":{\"amountsOut\":\"Expected amounts of tokens to receive, sorted in token registration order\",\"bptAmountIn\":\"Expected amount of pool tokens to burn\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"queryRemoveLiquidityProportional(address,uint256,address,bytes)\":{\"params\":{\"exactBptAmountIn\":\"Exact amount of pool tokens provided for the query\",\"pool\":\"Address of the liquidity pool\",\"sender\":\"The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\",\"userData\":\"Additional (optional) data sent with the query request\"},\"returns\":{\"amountsOut\":\"Expected amounts of tokens to receive, sorted in token registration order\"}},\"queryRemoveLiquidityRecovery(address,uint256)\":{\"params\":{\"exactBptAmountIn\":\"Exact amount of pool tokens provided for the query\",\"pool\":\"Address of the liquidity pool\"},\"returns\":{\"amountsOut\":\"Expected amounts of tokens to receive, sorted in token registration order\"}},\"queryRemoveLiquiditySingleTokenExactIn(address,uint256,address,address,bytes)\":{\"params\":{\"exactBptAmountIn\":\"Exact amount of pool tokens provided for the query\",\"pool\":\"Address of the liquidity pool\",\"sender\":\"The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\",\"tokenOut\":\"Token used to remove liquidity\",\"userData\":\"Additional (optional) data sent with the query request\"},\"returns\":{\"amountOut\":\"Expected amount of tokens to receive\"}},\"queryRemoveLiquiditySingleTokenExactOut(address,address,uint256,address,bytes)\":{\"params\":{\"exactAmountOut\":\"Expected exact amount of tokens to receive\",\"pool\":\"Address of the liquidity pool\",\"sender\":\"The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\",\"tokenOut\":\"Token used to remove liquidity\",\"userData\":\"Additional (optional) data sent with the query request\"},\"returns\":{\"bptAmountIn\":\"Expected amount of pool tokens to burn\"}},\"querySwapSingleTokenExactIn(address,address,address,uint256,address,bytes)\":{\"params\":{\"exactAmountIn\":\"Exact amounts of input tokens to send\",\"pool\":\"Address of the liquidity pool\",\"sender\":\"The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\",\"tokenIn\":\"Token to be swapped from\",\"tokenOut\":\"Token to be swapped to\",\"userData\":\"Additional (optional) data sent with the query request\"},\"returns\":{\"amountOut\":\"Calculated amount of output tokens to be received in exchange for the given input tokens\"}},\"querySwapSingleTokenExactOut(address,address,address,uint256,address,bytes)\":{\"params\":{\"exactAmountOut\":\"Exact amounts of input tokens to receive\",\"pool\":\"Address of the liquidity pool\",\"sender\":\"The sender passed to the operation. It can influence results (e.g., with user-dependent hooks)\",\"tokenIn\":\"Token to be swapped from\",\"tokenOut\":\"Token to be swapped to\",\"userData\":\"Additional (optional) data sent with the query request\"},\"returns\":{\"amountIn\":\"Calculated amount of input tokens to be sent in exchange for the requested output tokens\"}},\"removeLiquidityCustom(address,uint256,uint256[],bool,bytes)\":{\"details\":\"The given maximum and minimum amounts given may be interpreted as exact depending on the pool type. In any case the caller can expect them to be hard boundaries for the request.\",\"params\":{\"maxBptAmountIn\":\"Maximum amount of pool tokens provided\",\"minAmountsOut\":\"Minimum amounts of tokens to be received, sorted in token registration order\",\"pool\":\"Address of the liquidity pool\",\"userData\":\"Additional (optional) data sent with the request to remove liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"amountsOut\":\"Actual amounts of tokens received, sorted in token registration order\",\"bptAmountIn\":\"Actual amount of pool tokens burned\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"removeLiquidityProportional(address,uint256,uint256[],bool,bytes)\":{\"params\":{\"exactBptAmountIn\":\"Exact amount of pool tokens provided\",\"minAmountsOut\":\"Minimum amounts of tokens to be received, sorted in token registration order\",\"pool\":\"Address of the liquidity pool\",\"userData\":\"Additional (optional) data sent with the request to remove liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"amountsOut\":\"Actual amounts of tokens received, sorted in token registration order\"}},\"removeLiquidityRecovery(address,uint256,uint256[])\":{\"params\":{\"exactBptAmountIn\":\"Exact amount of pool tokens provided\",\"minAmountsOut\":\"Minimum amounts of tokens to be received, sorted in token registration order\",\"pool\":\"Address of the liquidity pool\"},\"returns\":{\"amountsOut\":\"Actual amounts of tokens received, sorted in token registration order\"}},\"removeLiquiditySingleTokenExactIn(address,uint256,address,uint256,bool,bytes)\":{\"params\":{\"exactBptAmountIn\":\"Exact amount of pool tokens provided\",\"minAmountOut\":\"Minimum amount of tokens to be received\",\"pool\":\"Address of the liquidity pool\",\"tokenOut\":\"Token used to remove liquidity\",\"userData\":\"Additional (optional) data sent with the request to remove liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"amountOut\":\"Actual amount of tokens received\"}},\"removeLiquiditySingleTokenExactOut(address,uint256,address,uint256,bool,bytes)\":{\"params\":{\"exactAmountOut\":\"Exact amount of tokens to be received\",\"maxBptAmountIn\":\"Maximum amount of pool tokens provided\",\"pool\":\"Address of the liquidity pool\",\"tokenOut\":\"Token used to remove liquidity\",\"userData\":\"Additional (optional) data sent with the request to remove liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"bptAmountIn\":\"Actual amount of pool tokens burned\"}},\"swapSingleTokenExactIn(address,address,address,uint256,uint256,uint256,bool,bytes)\":{\"params\":{\"deadline\":\"Deadline for the swap, after which it will revert\",\"exactAmountIn\":\"Exact amounts of input tokens to send\",\"minAmountOut\":\"Minimum amount of tokens to be received\",\"pool\":\"Address of the liquidity pool\",\"tokenIn\":\"Token to be swapped from\",\"tokenOut\":\"Token to be swapped to\",\"userData\":\"Additional (optional) data sent with the swap request\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"amountOut\":\"Calculated amount of output tokens to be received in exchange for the given input tokens\"}},\"swapSingleTokenExactOut(address,address,address,uint256,uint256,uint256,bool,bytes)\":{\"params\":{\"deadline\":\"Deadline for the swap, after which it will revert\",\"exactAmountOut\":\"Exact amounts of input tokens to receive\",\"maxAmountIn\":\"Maximum amount of tokens to be sent\",\"pool\":\"Address of the liquidity pool\",\"tokenIn\":\"Token to be swapped from\",\"tokenOut\":\"Token to be swapped to\",\"userData\":\"Additional (optional) data sent with the swap request\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"amountIn\":\"Calculated amount of input tokens to be sent in exchange for the requested output tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidityCustom(address,uint256[],uint256,bool,bytes)\":{\"notice\":\"Adds liquidity to a pool with a custom request.\"},\"addLiquidityProportional(address,uint256[],uint256,bool,bytes)\":{\"notice\":\"Adds liquidity to a pool with proportional token amounts, receiving an exact amount of pool tokens.\"},\"addLiquiditySingleTokenExactOut(address,address,uint256,uint256,bool,bytes)\":{\"notice\":\"Adds liquidity to a pool in a single token, receiving an exact amount of pool tokens.\"},\"addLiquidityUnbalanced(address,uint256[],uint256,bool,bytes)\":{\"notice\":\"Adds liquidity to a pool with arbitrary token amounts.\"},\"donate(address,uint256[],bool,bytes)\":{\"notice\":\"Adds liquidity to a pool by donating the amounts in (no BPT out).\"},\"initialize(address,address[],uint256[],uint256,bool,bytes)\":{\"notice\":\"Initialize a liquidity pool.\"},\"queryAddLiquidityCustom(address,uint256[],uint256,address,bytes)\":{\"notice\":\"Queries an `addLiquidityCustom` operation without actually executing it.\"},\"queryAddLiquidityProportional(address,uint256,address,bytes)\":{\"notice\":\"Queries an `addLiquidityProportional` operation without actually executing it.\"},\"queryAddLiquiditySingleTokenExactOut(address,address,uint256,address,bytes)\":{\"notice\":\"Queries an `addLiquiditySingleTokenExactOut` operation without actually executing it.\"},\"queryAddLiquidityUnbalanced(address,uint256[],address,bytes)\":{\"notice\":\"Queries an `addLiquidityUnbalanced` operation without actually executing it.\"},\"queryRemoveLiquidityCustom(address,uint256,uint256[],address,bytes)\":{\"notice\":\"Queries a `removeLiquidityCustom` operation without actually executing it.\"},\"queryRemoveLiquidityProportional(address,uint256,address,bytes)\":{\"notice\":\"Queries a `removeLiquidityProportional` operation without actually executing it.\"},\"queryRemoveLiquidityRecovery(address,uint256)\":{\"notice\":\"Queries a `removeLiquidityRecovery` operation without actually executing it.\"},\"queryRemoveLiquiditySingleTokenExactIn(address,uint256,address,address,bytes)\":{\"notice\":\"Queries a `removeLiquiditySingleTokenExactIn` operation without actually executing it.\"},\"queryRemoveLiquiditySingleTokenExactOut(address,address,uint256,address,bytes)\":{\"notice\":\"Queries a `removeLiquiditySingleTokenExactOut` operation without actually executing it.\"},\"querySwapSingleTokenExactIn(address,address,address,uint256,address,bytes)\":{\"notice\":\"Queries a swap operation specifying an exact input token amount without actually executing it.\"},\"querySwapSingleTokenExactOut(address,address,address,uint256,address,bytes)\":{\"notice\":\"Queries a swap operation specifying an exact output token amount without actually executing it.\"},\"removeLiquidityCustom(address,uint256,uint256[],bool,bytes)\":{\"notice\":\"Removes liquidity from a pool with a custom request.\"},\"removeLiquidityProportional(address,uint256,uint256[],bool,bytes)\":{\"notice\":\"Removes liquidity with proportional token amounts from a pool, burning an exact pool token amount.\"},\"removeLiquidityRecovery(address,uint256,uint256[])\":{\"notice\":\"Removes liquidity proportionally, burning an exact pool token amount. Only available in Recovery Mode.\"},\"removeLiquiditySingleTokenExactIn(address,uint256,address,uint256,bool,bytes)\":{\"notice\":\"Removes liquidity from a pool via a single token, burning an exact pool token amount.\"},\"removeLiquiditySingleTokenExactOut(address,uint256,address,uint256,bool,bytes)\":{\"notice\":\"Removes liquidity from a pool via a single token, specifying the exact amount of tokens to receive.\"},\"swapSingleTokenExactIn(address,address,address,uint256,uint256,uint256,bool,bytes)\":{\"notice\":\"Executes a swap operation specifying an exact input token amount.\"},\"swapSingleTokenExactOut(address,address,address,uint256,uint256,uint256,bool,bytes)\":{\"notice\":\"Executes a swap operation specifying an exact output token amount.\"}},\"notice\":\"User-friendly interface to basic Vault operations: swap, add/remove liquidity, and associated queries.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol\":\"IRouter\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol\":{\"keccak256\":\"0x39a5cd3ee5c0bab644f068ad8ba617a0cf71a91610693b1c93c9536464151ee3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6a5f61af5cda44d8ef95e610c0b418f2cfb984e9c47a58fb1fa8c8bc949def75\",\"dweb:/ipfs/Qmby1D2D5Ym44jgBTTM8eTGnmNGCCKrb8ujpkhVPE6C6Cr\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol":{"IVault":{"abi":[{"inputs":[],"name":"AfterAddLiquidityHookFailed","type":"error"},{"inputs":[],"name":"AfterInitializeHookFailed","type":"error"},{"inputs":[],"name":"AfterRemoveLiquidityHookFailed","type":"error"},{"inputs":[],"name":"AfterSwapHookFailed","type":"error"},{"inputs":[],"name":"AmountGivenZero","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"AmountInAboveMax","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"AmountOutBelowMin","type":"error"},{"inputs":[],"name":"BalanceNotSettled","type":"error"},{"inputs":[],"name":"BeforeAddLiquidityHookFailed","type":"error"},{"inputs":[],"name":"BeforeInitializeHookFailed","type":"error"},{"inputs":[],"name":"BeforeRemoveLiquidityHookFailed","type":"error"},{"inputs":[],"name":"BeforeSwapHookFailed","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"BptAmountInAboveMax","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"BptAmountOutBelowMin","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"BufferAlreadyInitialized","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"BufferNotInitialized","type":"error"},{"inputs":[],"name":"BufferSharesInvalidOwner","type":"error"},{"inputs":[],"name":"BufferSharesInvalidReceiver","type":"error"},{"inputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"}],"name":"BufferTotalSupplyTooLow","type":"error"},{"inputs":[],"name":"CannotReceiveEth","type":"error"},{"inputs":[],"name":"CannotSwapSameToken","type":"error"},{"inputs":[],"name":"DoesNotSupportAddLiquidityCustom","type":"error"},{"inputs":[],"name":"DoesNotSupportDonation","type":"error"},{"inputs":[],"name":"DoesNotSupportRemoveLiquidityCustom","type":"error"},{"inputs":[],"name":"DoesNotSupportUnbalancedLiquidity","type":"error"},{"inputs":[],"name":"DynamicSwapFeeHookFailed","type":"error"},{"inputs":[],"name":"FeePrecisionTooHigh","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"HookAdjustedAmountInAboveMax","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"HookAdjustedAmountOutBelowMin","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"HookAdjustedSwapLimit","type":"error"},{"inputs":[{"internalType":"address","name":"poolHooksContract","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"poolFactory","type":"address"}],"name":"HookRegistrationFailed","type":"error"},{"inputs":[],"name":"InvalidAddLiquidityKind","type":"error"},{"inputs":[],"name":"InvalidRemoveLiquidityKind","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[],"name":"InvalidTokenConfiguration","type":"error"},{"inputs":[],"name":"InvalidTokenDecimals","type":"error"},{"inputs":[],"name":"InvalidTokenType","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"InvalidUnderlyingToken","type":"error"},{"inputs":[{"internalType":"uint256","name":"issuedShares","type":"uint256"},{"internalType":"uint256","name":"minIssuedShares","type":"uint256"}],"name":"IssuedSharesBelowMin","type":"error"},{"inputs":[],"name":"MaxTokens","type":"error"},{"inputs":[],"name":"MinTokens","type":"error"},{"inputs":[],"name":"NotEnoughBufferShares","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"expectedUnderlyingAmount","type":"uint256"},{"internalType":"uint256","name":"actualUnderlyingAmount","type":"uint256"}],"name":"NotEnoughUnderlying","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"expectedWrappedAmount","type":"uint256"},{"internalType":"uint256","name":"actualWrappedAmount","type":"uint256"}],"name":"NotEnoughWrapped","type":"error"},{"inputs":[],"name":"NotVaultDelegateCall","type":"error"},{"inputs":[],"name":"PauseBufferPeriodDurationTooLarge","type":"error"},{"inputs":[],"name":"PercentageAboveMax","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyInitialized","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolInRecoveryMode","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotInRecoveryMode","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotInitialized","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotPaused","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolPauseWindowExpired","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolPaused","type":"error"},{"inputs":[],"name":"ProtocolFeesExceedTotalCollected","type":"error"},{"inputs":[],"name":"QueriesDisabled","type":"error"},{"inputs":[],"name":"QueriesDisabledPermanently","type":"error"},{"inputs":[],"name":"QuoteResultSpoofed","type":"error"},{"inputs":[],"name":"RouterNotTrusted","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderIsNotVault","type":"error"},{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[],"name":"SwapFeePercentageTooHigh","type":"error"},{"inputs":[],"name":"SwapFeePercentageTooLow","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"SwapLimit","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TokenAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TokenNotRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"expectedToken","type":"address"},{"internalType":"address","name":"actualToken","type":"address"}],"name":"TokensMismatch","type":"error"},{"inputs":[],"name":"TradeAmountTooSmall","type":"error"},{"inputs":[],"name":"VaultBuffersArePaused","type":"error"},{"inputs":[],"name":"VaultIsNotUnlocked","type":"error"},{"inputs":[],"name":"VaultNotPaused","type":"error"},{"inputs":[],"name":"VaultPauseWindowDurationTooLarge","type":"error"},{"inputs":[],"name":"VaultPauseWindowExpired","type":"error"},{"inputs":[],"name":"VaultPaused","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"WrapAmountTooSmall","type":"error"},{"inputs":[],"name":"WrongProtocolFeeControllerDeployment","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"underlyingToken","type":"address"}],"name":"WrongUnderlyingToken","type":"error"},{"inputs":[],"name":"WrongVaultAdminDeployment","type":"error"},{"inputs":[],"name":"WrongVaultExtensionDeployment","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"}],"name":"AggregateSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}],"name":"AggregateYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"AuthorizerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnedShares","type":"uint256"}],"name":"BufferSharesBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"issuedShares","type":"uint256"}],"name":"BufferSharesMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":true,"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"amountsAddedRaw","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"swapFeeAmountsRaw","type":"uint256[]"}],"name":"LiquidityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWrapped","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"LiquidityAddedToBuffer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":true,"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"amountsRemovedRaw","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"swapFeeAmountsRaw","type":"uint256[]"}],"name":"LiquidityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWrapped","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"LiquidityRemovedFromBuffer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"}],"name":"PoolInitialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"PoolPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"bool","name":"recoveryMode","type":"bool"}],"name":"PoolRecoveryModeStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"factory","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"indexed":false,"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"indexed":false,"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"},{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"indexed":false,"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"indexed":false,"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"PoolRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IProtocolFeeController","name":"newProtocolFeeController","type":"address"}],"name":"ProtocolFeeControllerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"SwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnedShares","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"withdrawnUnderlying","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"Unwrap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"bytes32","name":"eventKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"eventData","type":"bytes"}],"name":"VaultAuxiliary","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"VaultBuffersPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"VaultPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"VaultQueriesDisabled","type":"event"},{"anonymous":false,"inputs":[],"name":"VaultQueriesEnabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"depositedUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"mintedShares","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"Wrap","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct AddLiquidityParams","name":"params","type":"tuple"}],"name":"addLiquidity","outputs":[{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"maxAmountUnderlyingInRaw","type":"uint256"},{"internalType":"uint256","name":"maxAmountWrappedInRaw","type":"uint256"},{"internalType":"uint256","name":"exactSharesToIssue","type":"uint256"},{"internalType":"address","name":"sharesOwner","type":"address"}],"name":"addLiquidityToBuffer","outputs":[{"internalType":"uint256","name":"amountUnderlyingRaw","type":"uint256"},{"internalType":"uint256","name":"amountWrappedRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"tokenAllowance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"areBuffersPaused","outputs":[{"internalType":"bool","name":"buffersPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"tokenBalance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFees","outputs":[{"internalType":"uint256[]","name":"swapFeeAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"yieldFeeAmounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"swapParams","type":"tuple"}],"name":"computeDynamicSwapFeePercentage","outputs":[{"internalType":"uint256","name":"dynamicSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"disableQuery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"disableQueryPermanently","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"disableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"eventKey","type":"bytes32"},{"internalType":"bytes","name":"eventData","type":"bytes"}],"name":"emitAuxiliaryEvent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enableQuery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"enableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"enum WrappingDirection","name":"direction","type":"uint8"},{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"}],"internalType":"struct BufferWrapOrUnwrapParams","name":"params","type":"tuple"}],"name":"erc4626BufferWrapOrUnwrap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"actionId","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getAddLiquidityCalledFlag","outputs":[{"internalType":"bool","name":"liquidityAdded","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateSwapFeeAmount","outputs":[{"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateYieldFeeAmount","outputs":[{"internalType":"uint256","name":"yieldFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"authorizer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getBptRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferAsset","outputs":[{"internalType":"address","name":"underlyingToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferBalance","outputs":[{"internalType":"uint256","name":"underlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"wrappedBalanceRaw","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"bufferMinimumTotalSupply","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"liquidityOwner","type":"address"}],"name":"getBufferOwnerShares","outputs":[{"internalType":"uint256","name":"ownerShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodDuration","outputs":[{"internalType":"uint32","name":"bufferPeriodDuration","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodEndTime","outputs":[{"internalType":"uint32","name":"bufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferTotalShares","outputs":[{"internalType":"uint256","name":"bufferShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getCurrentLiveBalances","outputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getERC4626BufferAsset","outputs":[{"internalType":"address","name":"asset","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getHooksConfig","outputs":[{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaximumPoolTokens","outputs":[{"internalType":"uint256","name":"maxTokens","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getMinimumPoolTokens","outputs":[{"internalType":"uint256","name":"minTokens","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getMinimumTradeAmount","outputs":[{"internalType":"uint256","name":"minimumTradeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumWrapAmount","outputs":[{"internalType":"uint256","name":"minimumWrapAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonzeroDeltaCount","outputs":[{"internalType":"uint256","name":"nonzeroDeltaCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPauseWindowEndTime","outputs":[{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolConfig","outputs":[{"components":[{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"},{"internalType":"uint40","name":"tokenDecimalDiffs","type":"uint40"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"isPoolRegistered","type":"bool"},{"internalType":"bool","name":"isPoolInitialized","type":"bool"},{"internalType":"bool","name":"isPoolPaused","type":"bool"},{"internalType":"bool","name":"isPoolInRecoveryMode","type":"bool"}],"internalType":"struct PoolConfig","name":"poolConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolData","outputs":[{"components":[{"internalType":"PoolConfigBits","name":"poolConfigBits","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"},{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"}],"internalType":"struct PoolData","name":"poolData","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPoolMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"poolMinimumTotalSupply","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolPausedState","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"},{"internalType":"uint32","name":"poolPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"poolBufferPeriodEndTime","type":"uint32"},{"internalType":"address","name":"pauseManager","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolRoleAccounts","outputs":[{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getPoolTokenCountAndIndexOfToken","outputs":[{"internalType":"uint256","name":"tokenCount","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenInfo","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"lastBalancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenRates","outputs":[{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeeController","outputs":[{"internalType":"contract IProtocolFeeController","name":"protocolFeeController","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getReservesOf","outputs":[{"internalType":"uint256","name":"reserveAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getStaticSwapFeePercentage","outputs":[{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getTokenDelta","outputs":[{"internalType":"int256","name":"tokenDelta","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultAdmin","outputs":[{"internalType":"address","name":"vaultAdmin","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultExtension","outputs":[{"internalType":"address","name":"vaultExtension","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultPausedState","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"},{"internalType":"uint32","name":"vaultPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"vaultBufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"initialize","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"amountUnderlyingRaw","type":"uint256"},{"internalType":"uint256","name":"amountWrappedRaw","type":"uint256"},{"internalType":"uint256","name":"minIssuedShares","type":"uint256"},{"internalType":"address","name":"sharesOwner","type":"address"}],"name":"initializeBuffer","outputs":[{"internalType":"uint256","name":"issuedShares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"isERC4626BufferInitialized","outputs":[{"internalType":"bool","name":"isBufferInitialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInRecoveryMode","outputs":[{"internalType":"bool","name":"inRecoveryMode","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInitialized","outputs":[{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolPaused","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"registered","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabled","outputs":[{"internalType":"bool","name":"queryDisabled","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabledPermanently","outputs":[{"internalType":"bool","name":"queryDisabledPermanently","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isUnlocked","outputs":[{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isVaultPaused","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"pausePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseVaultBuffers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"quote","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"quoteAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"protocolFeeExempt","type":"bool"},{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"},{"internalType":"address","name":"poolHooksContract","type":"address"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"registerPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct RemoveLiquidityParams","name":"params","type":"tuple"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"sharesToRemove","type":"uint256"},{"internalType":"uint256","name":"minAmountUnderlyingOutRaw","type":"uint256"},{"internalType":"uint256","name":"minAmountWrappedOutRaw","type":"uint256"}],"name":"removeLiquidityFromBuffer","outputs":[{"internalType":"uint256","name":"removedUnderlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"removedWrappedBalanceRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"}],"name":"removeLiquidityRecovery","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"sendTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"setAuthorizer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IProtocolFeeController","name":"newProtocolFeeController","type":"address"}],"name":"setProtocolFeeController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"setStaticSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amountHint","type":"uint256"}],"name":"settle","outputs":[{"internalType":"uint256","name":"credit","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct VaultSwapParams","name":"vaultSwapParams","type":"tuple"}],"name":"swap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"tokenTotalSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"unlock","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"unpausePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseVaultBuffers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newAggregateSwapFeePercentage","type":"uint256"}],"name":"updateAggregateSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newAggregateYieldFeePercentage","type":"uint256"}],"name":"updateAggregateYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addLiquidity((address,address,uint256[],uint256,uint8,bytes))":"4af29ec4","addLiquidityToBuffer(address,uint256,uint256,uint256,address)":"e2a92b1a","allowance(address,address,address)":"927da105","approve(address,address,uint256)":"e1f21c67","areBuffersPaused()":"55cba7fe","balanceOf(address,address)":"f7888aec","collectAggregateFees(address)":"8f4ab9ca","computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))":"4d472bdd","disableQuery()":"de1a36a6","disableQueryPermanently()":"821440f2","disableRecoveryMode(address)":"bffb78b2","emitAuxiliaryEvent(bytes32,bytes)":"c8088247","enableQuery()":"e0d55605","enableRecoveryMode(address)":"dc3f574e","erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))":"43583be5","getActionId(bytes4)":"851c1bb3","getAddLiquidityCalledFlag(address)":"ace9b89b","getAggregateSwapFeeAmount(address,address)":"85e0b999","getAggregateYieldFeeAmount(address,address)":"00fdfa13","getAuthorizer()":"aaabadc5","getBptRate(address)":"4f037ee7","getBufferAsset(address)":"0387587d","getBufferBalance(address)":"4021fe0f","getBufferMinimumTotalSupply()":"26a8a991","getBufferOwnerShares(address,address)":"9385e39a","getBufferPeriodDuration()":"20c1fb7a","getBufferPeriodEndTime()":"cd51c12f","getBufferTotalShares(address)":"f2784e07","getCurrentLiveBalances(address)":"535cfd8a","getERC4626BufferAsset(address)":"4afbaf5a","getHooksConfig(address)":"ce8630d4","getMaximumPoolTokens()":"2e42f4d5","getMinimumPoolTokens()":"a8175b27","getMinimumTradeAmount()":"e2cb0ba0","getMinimumWrapAmount()":"53956aa2","getNonzeroDeltaCount()":"db817187","getPauseWindowEndTime()":"8a8d123a","getPoolConfig(address)":"f29486a1","getPoolData(address)":"13d21cdf","getPoolMinimumTotalSupply()":"d0965a6b","getPoolPausedState(address)":"15e32046","getPoolRoleAccounts(address)":"e9ddeb26","getPoolTokenCountAndIndexOfToken(address,address)":"c9c1661b","getPoolTokenInfo(address)":"67e0e076","getPoolTokenRates(address)":"7e361bde","getPoolTokens(address)":"ca4f2803","getProtocolFeeController()":"85f2dbd4","getReservesOf(address)":"96787092","getStaticSwapFeePercentage(address)":"b45090f9","getTokenDelta(address)":"9e825ff5","getVaultAdmin()":"1ba0ae45","getVaultExtension()":"b9a8effa","getVaultPausedState()":"85c8c015","initialize(address,address,address[],uint256[],uint256,bytes)":"ba8a2be0","initializeBuffer(address,uint256,uint256,uint256,address)":"653eb3b0","isERC4626BufferInitialized(address)":"6844846b","isPoolInRecoveryMode(address)":"be7d628a","isPoolInitialized(address)":"532cec7c","isPoolPaused(address)":"6c9bc732","isPoolRegistered(address)":"c673bdaf","isQueryDisabled()":"b4aef0ab","isQueryDisabledPermanently()":"13ef8a5d","isUnlocked()":"8380edb7","isVaultPaused()":"098401f5","pausePool(address)":"55aca1ec","pauseVault()":"9e0879c2","pauseVaultBuffers()":"e085c5a8","quote(bytes)":"edfa3568","quoteAndRevert(bytes)":"757d64b3","registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))":"eeec802f","removeLiquidity((address,address,uint256,uint256[],uint8,bytes))":"21457897","removeLiquidityFromBuffer(address,uint256,uint256,uint256)":"ebc7955c","removeLiquidityRecovery(address,address,uint256,uint256[])":"a07d6040","sendTo(address,address,uint256)":"ae639329","setAuthorizer(address)":"058a628f","setProtocolFeeController(address)":"2d771389","setStaticSwapFeePercentage(address,uint256)":"d15126ba","settle(address,uint256)":"15afd409","swap((uint8,address,address,address,uint256,uint256,bytes))":"2bfb780c","totalSupply(address)":"e4dc2aa4","transfer(address,address,uint256)":"beabacc8","transferFrom(address,address,address,uint256)":"15dacbea","unlock(bytes)":"48c89491","unpausePool(address)":"f21c38cd","unpauseVault()":"0b7562be","unpauseVaultBuffers()":"b9212b49","updateAggregateSwapFeePercentage(address,uint256)":"5e0b06f4","updateAggregateYieldFeePercentage(address,uint256)":"e253670a","vault()":"fbfa77cf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AfterAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountGivenZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"AmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"AmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"BptAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"BptAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"BufferAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"BufferNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BufferSharesInvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BufferSharesInvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"BufferTotalSupplyTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReceiveEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSwapSameToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportAddLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportDonation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportRemoveLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportUnbalancedLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DynamicSwapFeeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeePrecisionTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedSwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolHooksContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"HookRegistrationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRemoveLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"InvalidUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIssuedShares\",\"type\":\"uint256\"}],\"name\":\"IssuedSharesBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBufferShares\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedUnderlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualUnderlyingAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughUnderlying\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedWrappedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualWrappedAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughWrapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaultDelegateCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PauseBufferPeriodDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PercentageAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeesExceedTotalCollected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabledPermanently\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteResultSpoofed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterNotTrusted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualToken\",\"type\":\"address\"}],\"name\":\"TokensMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradeAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultBuffersArePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultIsNotUnlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"WrapAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongProtocolFeeControllerDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"WrongUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultAdminDeployment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultExtensionDeployment\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"AggregateSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"AggregateYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"}],\"name\":\"BufferSharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"}],\"name\":\"BufferSharesMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsAddedRaw\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmountsRaw\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"LiquidityAddedToBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsRemovedRaw\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmountsRaw\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"LiquidityRemovedFromBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PoolPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"recoveryMode\",\"type\":\"bool\"}],\"name\":\"PoolRecoveryModeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IProtocolFeeController\",\"name\":\"newProtocolFeeController\",\"type\":\"address\"}],\"name\":\"ProtocolFeeControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"Unwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"eventKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"VaultAuxiliary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultBuffersPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultQueriesDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultQueriesEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"Wrap\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountUnderlyingInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountWrappedInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactSharesToIssue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sharesOwner\",\"type\":\"address\"}],\"name\":\"addLiquidityToBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlyingRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWrappedRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areBuffersPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"buffersPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yieldFeeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"}],\"name\":\"computeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynamicSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQueryPermanently\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"disableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"emitAuxiliaryEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"enum WrappingDirection\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"}],\"internalType\":\"struct BufferWrapOrUnwrapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"erc4626BufferWrapOrUnwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAddLiquidityCalledFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"liquidityAdded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateSwapFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateYieldFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"authorizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBptRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityOwner\",\"type\":\"address\"}],\"name\":\"getBufferOwnerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ownerShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getCurrentLiveBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getERC4626BufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getHooksConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTradeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumWrapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumWrapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonzeroDeltaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonzeroDeltaCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseWindowEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"tokenDecimalDiffs\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPoolRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInRecoveryMode\",\"type\":\"bool\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"poolConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"PoolConfigBits\",\"name\":\"poolConfigBits\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"poolPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"poolBufferPeriodEndTime\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolRoleAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenCountAndIndexOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastBalancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeController\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"protocolFeeController\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStaticSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"tokenDelta\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultAdmin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultExtension\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vaultPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vaultBufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountUnderlyingRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWrappedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIssuedShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sharesOwner\",\"type\":\"address\"}],\"name\":\"initializeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"isERC4626BufferInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBufferInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inRecoveryMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabledPermanently\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabledPermanently\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVaultBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quoteAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"poolHooksContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesToRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountUnderlyingOutRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountWrappedOutRaw\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityFromBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"removedUnderlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedWrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"removeLiquidityRecovery\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"newProtocolFeeController\",\"type\":\"address\"}],\"name\":\"setProtocolFeeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setStaticSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountHint\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct VaultSwapParams\",\"name\":\"vaultSwapParams\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVaultBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAggregateSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateAggregateSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateAggregateYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AmountInAboveMax(address,uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total token amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\",\"tokenIn\":\"The incoming token\"}}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\",\"tokenOut\":\"The outgoing token\"}}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total BPT amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\"}}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\"}}],\"BufferAlreadyInitialized(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"BufferNotInitialized(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"BufferTotalSupplyTooLow(uint256)\":[{\"params\":{\"totalSupply\":\"The total supply value that was below the minimum\"}}],\"FeePrecisionTooHigh()\":[{\"details\":\"Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%). Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between the aggregate fee calculated here and that stored in the Vault.\"}],\"HookAdjustedAmountInAboveMax(address,uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total token amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\",\"tokenIn\":\"The incoming token\"}}],\"HookAdjustedAmountOutBelowMin(address,uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\",\"tokenOut\":\"The outgoing token\"}}],\"HookAdjustedSwapLimit(uint256,uint256)\":[{\"params\":{\"amount\":\"The total amount in or out\",\"limit\":\"The amount of the limit that has been exceeded\"}}],\"HookRegistrationFailed(address,address,address)\":[{\"params\":{\"pool\":\"Address of the rejected pool\",\"poolFactory\":\"Address of the pool factory\",\"poolHooksContract\":\"Address of the hook contract that rejected the pool registration\"}}],\"InvalidUnderlyingToken(address)\":[{\"details\":\"This should never happen, but a malicious wrapper contract might do this (e.g., in an attempt to re-initialize the buffer).\",\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"IssuedSharesBelowMin(uint256,uint256)\":[{\"details\":\"Shares issued during initialization are below the requested amount.\"}],\"NotEnoughUnderlying(address,uint256,uint256)\":[{\"details\":\"A wrap/unwrap operation consumed more or returned less underlying tokens than it should.\"}],\"NotEnoughWrapped(address,uint256,uint256)\":[{\"details\":\"A wrap/unwrap operation consumed more or returned less wrapped tokens than it should.\"}],\"NotVaultDelegateCall()\":[{\"details\":\"It can only be called by the Vault via delegatecall.\"}],\"PoolAlreadyInitialized(address)\":[{\"params\":{\"pool\":\"The already initialized pool\"}}],\"PoolAlreadyRegistered(address)\":[{\"params\":{\"pool\":\"The already registered pool\"}}],\"PoolInRecoveryMode(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInRecoveryMode(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInitialized(address)\":[{\"params\":{\"pool\":\"The uninitialized pool\"}}],\"PoolNotPaused(address)\":[{\"params\":{\"pool\":\"The unpaused pool\"}}],\"PoolNotRegistered(address)\":[{\"params\":{\"pool\":\"The unregistered pool\"}}],\"PoolPauseWindowExpired(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolPaused(address)\":[{\"params\":{\"pool\":\"The paused pool\"}}],\"ProtocolFeesExceedTotalCollected()\":[{\"details\":\"This occurs when the sum of the parts (aggregate swap or yield fee) is greater than the whole (total swap or yield fee). Also validated when the protocol fee controller updates aggregate fee percentages in the Vault.\"}],\"SenderIsNotVault(address)\":[{\"params\":{\"sender\":\"The account attempting to call a permissioned function\"}}],\"SwapFeePercentageTooHigh()\":[{\"details\":\"The Vault itself does not impose a universal minimum. Rather, it validates against the range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error if it is above the maximum value returned by the pool. Pools with dynamic fees do not check these limits.\"}],\"SwapFeePercentageTooLow()\":[{\"details\":\"The Vault itself does not impose a universal minimum. Rather, it validates against the range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error if it is below the minimum value returned by the pool. Pools with dynamic fees do not check these limits.\"}],\"SwapLimit(uint256,uint256)\":[{\"params\":{\"amount\":\"The total amount in or out\",\"limit\":\"The amount of the limit that has been exceeded\"}}],\"TokenAlreadyRegistered(address)\":[{\"params\":{\"token\":\"The duplicate token\"}}],\"TokenNotRegistered(address)\":[{\"params\":{\"token\":\"The unregistered token\"}}],\"TokensMismatch(address,address,address)\":[{\"params\":{\"actualToken\":\"The actual token found at that index\",\"expectedToken\":\"The correct token at a given index in the pool\",\"pool\":\"Address of the pool\"}}],\"WrapAmountTooSmall(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"WrongUnderlyingToken(address,address)\":[{\"details\":\"This should never happen, but a malicious wrapper contract might not return the correct address. Legitimate wrapper contracts should make the asset a constant or immutable value.\",\"params\":{\"underlyingToken\":\"The underlying token returned by `asset`\",\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}]},\"events\":{\"AggregateSwapFeePercentageChanged(address,uint256)\":{\"details\":\"The `ProtocolFeeController` will emit an event with the underlying change.\",\"params\":{\"aggregateSwapFeePercentage\":\"The new aggregate swap fee percentage\",\"pool\":\"The pool whose aggregate swap fee percentage changed\"}},\"AggregateYieldFeePercentageChanged(address,uint256)\":{\"details\":\"The `ProtocolFeeController` will emit an event with the underlying change.\",\"params\":{\"aggregateYieldFeePercentage\":\"The new aggregate yield fee percentage\",\"pool\":\"The pool whose aggregate yield fee percentage changed\"}},\"AuthorizerChanged(address)\":{\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"BufferSharesBurned(address,address,uint256)\":{\"details\":\"The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares` retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the \\\"totalSupply\\\" of a buffer.\",\"params\":{\"burnedShares\":\"The amount of \\\"internal BPT\\\" shares burned\",\"from\":\"The owner of the burned shares\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"BufferSharesMinted(address,address,uint256)\":{\"details\":\"The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares` retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the \\\"totalSupply\\\" of a buffer.\",\"params\":{\"issuedShares\":\"The amount of \\\"internal BPT\\\" shares created\",\"to\":\"The owner of the minted shares\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"LiquidityAdded(address,address,uint8,uint256,uint256[],uint256[])\":{\"params\":{\"amountsAddedRaw\":\"The amount of each token that was added, sorted in token registration order\",\"kind\":\"The add liquidity operation type (e.g., proportional, custom)\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool with liquidity added\",\"swapFeeAmountsRaw\":\"The total swap fees charged, sorted in token registration order\",\"totalSupply\":\"The total supply of the pool after the operation\"}},\"LiquidityAddedToBuffer(address,uint256,uint256,bytes32)\":{\"details\":\"The underlying token can be derived from the wrapped token, so it's not included here.\",\"params\":{\"amountUnderlying\":\"The amount of the underlying token that was deposited\",\"amountWrapped\":\"The amount of the wrapped token that was deposited\",\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"LiquidityRemoved(address,address,uint8,uint256,uint256[],uint256[])\":{\"params\":{\"amountsRemovedRaw\":\"The amount of each token that was removed, sorted in token registration order\",\"kind\":\"The remove liquidity operation type (e.g., proportional, custom)\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool with liquidity removed\",\"swapFeeAmountsRaw\":\"The total swap fees charged, sorted in token registration order\",\"totalSupply\":\"The total supply of the pool after the operation\"}},\"LiquidityRemovedFromBuffer(address,uint256,uint256,bytes32)\":{\"details\":\"The underlying token can be derived from the wrapped token, so it's not included here.\",\"params\":{\"amountUnderlying\":\"The amount of the underlying token that was withdrawn\",\"amountWrapped\":\"The amount of the wrapped token that was withdrawn\",\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"PoolInitialized(address)\":{\"params\":{\"pool\":\"The pool being initialized\"}},\"PoolPausedStateChanged(address,bool)\":{\"params\":{\"paused\":\"True if the pool was paused\",\"pool\":\"The pool that was just paused or unpaused\"}},\"PoolRecoveryModeStateChanged(address,bool)\":{\"params\":{\"pool\":\"The pool\",\"recoveryMode\":\"True if recovery mode was enabled\"}},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,uint32,(address,address,address),(bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),(bool,bool,bool,bool))\":{\"params\":{\"factory\":\"The factory creating the pool\",\"hooksConfig\":\"Flags indicating which hooks the pool supports and address of hooks contract\",\"liquidityManagement\":\"Supported liquidity management hook flags\",\"pauseWindowEndTime\":\"The pool's pause window end time\",\"pool\":\"The pool being registered\",\"roleAccounts\":\"Addresses the Vault will allow to change certain pool settings\",\"swapFeePercentage\":\"The static swap fee of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"ProtocolFeeControllerChanged(address)\":{\"params\":{\"newProtocolFeeController\":\"The address of the new protocol fee controller\"}},\"Swap(address,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"Number of tokenIn tokens\",\"amountOut\":\"Number of tokenOut tokens\",\"pool\":\"The pool with the tokens being swapped\",\"swapFeeAmount\":\"Swap fee amount paid\",\"swapFeePercentage\":\"Swap fee percentage applied (can differ if dynamic)\",\"tokenIn\":\"The token entering the Vault (balance increases)\",\"tokenOut\":\"The token leaving the Vault (balance decreases)\"}},\"SwapFeePercentageChanged(address,uint256)\":{\"params\":{\"swapFeePercentage\":\"The new swap fee percentage for the pool\"}},\"Unwrap(address,uint256,uint256,bytes32)\":{\"params\":{\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"burnedShares\":\"Number of shares (wrapped tokens) burned\",\"withdrawnUnderlying\":\"Number of underlying tokens withdrawn\",\"wrappedToken\":\"The wrapped token address\"}},\"VaultAuxiliary(address,bytes32,bytes)\":{\"params\":{\"eventData\":\"Encoded event data\",\"eventKey\":\"Event key\",\"pool\":\"Pool address\"}},\"VaultBuffersPausedStateChanged(bool)\":{\"details\":\"If buffers all paused, all buffer operations (i.e., all calls through the Router with `isBuffer` set to true) will revert.\",\"params\":{\"paused\":\"True if the Vault buffers were paused\"}},\"VaultPausedStateChanged(bool)\":{\"params\":{\"paused\":\"True if the Vault was paused\"}},\"Wrap(address,uint256,uint256,bytes32)\":{\"params\":{\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"depositedUnderlying\":\"Number of underlying tokens deposited\",\"mintedShares\":\"Number of shares (wrapped tokens) minted\",\"wrappedToken\":\"The wrapped token address\"}}},\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"details\":\"Caution should be exercised when adding liquidity because the Vault has the capability to transfer tokens from any user, given that it holds all allowances.\",\"params\":{\"params\":\"Parameters for the add liquidity (see above for struct definition)\"},\"returns\":{\"amountsIn\":\"Actual amounts of input tokens\",\"bptAmountOut\":\"Output pool token amount\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"addLiquidityToBuffer(address,uint256,uint256,uint256,address)\":{\"details\":\"The buffer needs to be initialized beforehand.\",\"params\":{\"exactSharesToIssue\":\"The value in underlying tokens that `sharesOwner` wants to add to the buffer, in underlying token decimals\",\"maxAmountUnderlyingInRaw\":\"Maximum amount of underlying tokens to add to the buffer. It is expressed in underlying token native decimals\",\"maxAmountWrappedInRaw\":\"Maximum amount of wrapped tokens to add to the buffer. It is expressed in wrapped token native decimals\",\"sharesOwner\":\"Address that will own the deposited liquidity. Only this address will be able to remove liquidity from the buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"amountUnderlyingRaw\":\"Amount of underlying tokens deposited into the buffer\",\"amountWrappedRaw\":\"Amount of wrapped tokens deposited into the buffer\"}},\"allowance(address,address,address)\":{\"params\":{\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\",\"token\":\"Address of the token\"},\"returns\":{\"tokenAllowance\":\"Amount of tokens the spender is allowed to spend\"}},\"approve(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to approve\",\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\"},\"returns\":{\"success\":\"True if successful, false otherwise\"}},\"areBuffersPaused()\":{\"details\":\"When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true) will revert. Pausing buffers is reversible. Note that ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they would likely be paused and unpaused together). Call `isVaultPaused` to check the pause state of the Vault.\",\"returns\":{\"buffersPaused\":\"True if the Vault buffers are paused\"}},\"balanceOf(address,address)\":{\"params\":{\"account\":\"Address of the account\",\"token\":\"Address of the token\"},\"returns\":{\"tokenBalance\":\"Token balance of the account\"}},\"collectAggregateFees(address)\":{\"details\":\"Fees are sent to the ProtocolFeeController address.\",\"params\":{\"pool\":\"The pool on which all aggregate fees should be collected\"},\"returns\":{\"swapFeeAmounts\":\"An array with the total swap fees collected, sorted in token registration order\",\"yieldFeeAmounts\":\"An array with the total yield fees collected, sorted in token registration order\"}},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"details\":\"Reverts if the hook doesn't return the success flag set to `true`.\",\"params\":{\"pool\":\"The pool\",\"swapParams\":\"The swap parameters used to compute the fee\"},\"returns\":{\"dynamicSwapFeePercentage\":\"The dynamic swap fee percentage\"}},\"disableQuery()\":{\"details\":\"The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2). This function can be acted upon as an emergency measure in ambiguous contexts where it's not 100% clear whether disabling queries is completely necessary; queries can still be re-enabled after this call.\"},\"disableQueryPermanently()\":{\"details\":\"Shall only be used when there is no doubt that queries pose a fundamental threat to the system.\"},\"disableRecoveryMode(address)\":{\"details\":\"This is a permissioned function. It re-syncs live balances (which could not be updated during Recovery Mode), forfeiting any yield fees that accrued while enabled. It makes external calls, and could potentially fail if there is an issue with any associated Rate Providers.\",\"params\":{\"pool\":\"The address of the pool\"}},\"emitAuxiliaryEvent(bytes32,bytes)\":{\"params\":{\"eventData\":\"Encoded event data\",\"eventKey\":\"Event key\"}},\"enableQuery()\":{\"details\":\"Only works if queries are not permanently disabled.\"},\"enableRecoveryMode(address)\":{\"details\":\"This is a permissioned function. It enables a safe proportional withdrawal, with no external calls. Since there are no external calls, ensuring that entering Recovery Mode cannot fail, we cannot compute and so must forfeit any yield fees between the last operation and enabling Recovery Mode. For the same reason, live balances cannot be updated while in Recovery Mode, as doing so might cause withdrawals to fail.\",\"params\":{\"pool\":\"The address of the pool\"}},\"erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))\":{\"details\":\"All parameters are given in raw token decimal encoding. It requires the buffer to be initialized, and uses the internal wrapped token buffer when it has enough liquidity to avoid external calls.\",\"params\":{\"params\":\"Parameters for the wrap/unwrap operation (see struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"actionId\":\"The computed actionId\"}},\"getAddLiquidityCalledFlag(address)\":{\"details\":\"Taxing remove liquidity proportional whenever liquidity was added in the same `unlock` call adds an extra layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional is the only standard way to exit a position without fees, and this flag is used to enable fees in that case. It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse than a simple swap for every pool type.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"liquidityAdded\":\"True if liquidity has been added to this pool in the current transaction Note that there is no `sessionId` argument; it always returns the value for the current (i.e., latest) session.\"}},\"getAggregateSwapFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"swapFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAggregateYieldFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"yieldFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAuthorizer()\":{\"details\":\"The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can be changed through a permissioned call.\",\"returns\":{\"authorizer\":\"Address of the authorizer contract\"}},\"getBptRate(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"rate\":\"BPT rate\"}},\"getBufferAsset(address)\":{\"details\":\"The asset can never change after buffer initialization.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingToken\":\"Address of the underlying token registered for the wrapper; `address(0)` if the buffer has not been initialized.\"}},\"getBufferBalance(address)\":{\"details\":\"All values are in native token decimals of the wrapped or underlying tokens.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingBalanceRaw\":\"Amount of underlying tokens deposited into the buffer, in native token decimals\",\"wrappedBalanceRaw\":\"Amount of wrapped tokens deposited into the buffer, in native token decimals\"}},\"getBufferMinimumTotalSupply()\":{\"details\":\"This prevents buffers from being completely drained. When the buffer is initialized, this minimum number of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal to the Vault, as buffers are not tokenized.\",\"returns\":{\"bufferMinimumTotalSupply\":\"The minimum total supply a buffer can have after initialization\"}},\"getBufferOwnerShares(address,address)\":{\"params\":{\"liquidityOwner\":\"Address of the user that owns liquidity in the wrapped token's buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"ownerShares\":\"Amount of shares allocated to the liquidity owner, in native underlying token decimals\"}},\"getBufferPeriodDuration()\":{\"details\":\"This value is immutable. It represents the period during which, if paused, the Vault will remain paused. This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer timestamps are 32 bits.\",\"returns\":{\"bufferPeriodDuration\":\"The length of the buffer period in seconds\"}},\"getBufferPeriodEndTime()\":{\"details\":\"This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer timestamps are 32 bits.\",\"returns\":{\"bufferPeriodEndTime\":\"The timestamp after which the Vault remains permanently unpaused\"}},\"getBufferTotalShares(address)\":{\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"bufferShares\":\"Amount of supply shares of the buffer, in native underlying token decimals\"}},\"getCurrentLiveBalances(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesLiveScaled18\":\"Token balances after paying yield fees, applying decimal scaling and rates\"}},\"getERC4626BufferAsset(address)\":{\"details\":\"To avoid malicious wrappers (e.g., that might potentially change their asset after deployment), routers should never call `wrapper.asset()` directly, at least without checking it against the asset registered with the Vault on initialization.\",\"params\":{\"wrappedToken\":\"The wrapped token specifying the buffer\"},\"returns\":{\"asset\":\"The underlying asset of the wrapped token\"}},\"getHooksConfig(address)\":{\"details\":\"The `HooksConfig` contains flags indicating which pool hooks are implemented.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"hooksConfig\":\"The hooks configuration as a `HooksConfig` struct\"}},\"getMaximumPoolTokens()\":{\"returns\":{\"maxTokens\":\"The maximum token count of a pool\"}},\"getMinimumPoolTokens()\":{\"details\":\"We expect the vast majority of pools to be 2-token.\",\"returns\":{\"minTokens\":\"The minimum token count of a pool\"}},\"getMinimumTradeAmount()\":{\"details\":\"This limit is applied to the 18-decimal \\\"upscaled\\\" amount in any operation (swap, add/remove liquidity).\",\"returns\":{\"minimumTradeAmount\":\"The minimum trade amount as an 18-decimal floating point number\"}},\"getMinimumWrapAmount()\":{\"details\":\"This limit is applied to the wrap operation amount, in native underlying token decimals.\",\"returns\":{\"minimumWrapAmount\":\"The minimum wrap amount in native underlying token decimals\"}},\"getNonzeroDeltaCount()\":{\"returns\":{\"nonzeroDeltaCount\":\"The current value of `_nonzeroDeltaCount`\"}},\"getPauseWindowEndTime()\":{\"details\":\"This value is immutable, and represents the timestamp after which the Vault can no longer be paused by governance. Balancer timestamps are 32 bits.\",\"returns\":{\"pauseWindowEndTime\":\"The timestamp when the Vault's pause window ends\"}},\"getPoolConfig(address)\":{\"details\":\"The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"poolConfig\":\"The pool configuration as a `PoolConfig` struct\"}},\"getPoolData(address)\":{\"details\":\"This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\",\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"poolData\":\"The `PoolData` result\"}},\"getPoolMinimumTotalSupply()\":{\"details\":\"This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\",\"returns\":{\"poolMinimumTotalSupply\":\"The minimum total supply a pool can have after initialization\"}},\"getPoolPausedState(address)\":{\"details\":\"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period. Balancer timestamps are 32 bits.\",\"params\":{\"pool\":\"The pool whose data is requested\"},\"returns\":{\"pauseManager\":\"The pause manager, or the zero address\",\"poolBufferPeriodEndTime\":\"The timestamp after which the Pool unpauses itself (if paused)\",\"poolPauseWindowEndTime\":\"The timestamp of the end of the Pool's pause window\",\"poolPaused\":\"True if the Pool is paused\"}},\"getPoolRoleAccounts(address)\":{\"params\":{\"pool\":\"The address of the pool whose roles are being queried\"},\"returns\":{\"roleAccounts\":\"A struct containing the role accounts for the pool (or 0 if unassigned)\"}},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"details\":\"Reverts if the pool is not registered, or if the token does not belong to the pool.\",\"params\":{\"pool\":\"Address of the pool\",\"token\":\"Address of the token\"},\"returns\":{\"index\":\"Index corresponding to the given token in the pool's token list\",\"tokenCount\":\"Number of tokens in the pool\"}},\"getPoolTokenInfo(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesRaw\":\"Current native decimal balances of the pool tokens, sorted in token registration order\",\"lastBalancesLiveScaled18\":\"Last saved live balances, sorted in token registration order\",\"tokenInfo\":\"Token info structs (type, rate provider, yield flag), sorted in token registration order\",\"tokens\":\"The pool tokens, sorted in registration order\"}},\"getPoolTokenRates(address)\":{\"details\":\"This function performs external calls if tokens are yield-bearing. All returned arrays are in token registration order.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"decimalScalingFactors\":\"Conversion factor used to adjust for token decimals for uniform precision in calculations. FP(1) for 18-decimal tokens\",\"tokenRates\":\"18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\"}},\"getPoolTokens(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"tokens\":\"List of tokens in the pool\"}},\"getProtocolFeeController()\":{\"returns\":{\"protocolFeeController\":\"Address of the ProtocolFeeController\"}},\"getReservesOf(address)\":{\"params\":{\"token\":\"The token for which to retrieve the reserve\"},\"returns\":{\"reserveAmount\":\"The amount of reserves for the given token\"}},\"getStaticSwapFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool whose static swap fee percentage is being queried\"},\"returns\":{\"swapFeePercentage\":\"The current static swap fee percentage for the specified pool\"}},\"getTokenDelta(address)\":{\"details\":\"This function allows reading the value from the `_tokenDeltas` mapping.\",\"params\":{\"token\":\"The token for which the delta is being fetched\"},\"returns\":{\"tokenDelta\":\"The delta of the specified token\"}},\"getVaultAdmin()\":{\"details\":\"The VaultAdmin contract mostly implements permissioned functions.\",\"returns\":{\"vaultAdmin\":\"The address of the Vault admin\"}},\"getVaultExtension()\":{\"details\":\"Function is in the main Vault contract. The VaultExtension handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls.\",\"returns\":{\"vaultExtension\":\"Address of the VaultExtension\"}},\"getVaultPausedState()\":{\"details\":\"Balancer timestamps are 32 bits.\",\"returns\":{\"vaultBufferPeriodEndTime\":\"The timestamp of the end of the Vault's buffer period\",\"vaultPauseWindowEndTime\":\"The timestamp of the end of the Vault's pause window\",\"vaultPaused\":\"True if the Vault is paused\"}},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Address of the pool to initialize\",\"to\":\"Address that will receive the output BPT\",\"tokens\":\"Tokens used to seed the pool (must match the registered tokens)\",\"userData\":\"Additional (optional) data required for adding initial liquidity\"},\"returns\":{\"bptAmountOut\":\"Output pool token amount\"}},\"initializeBuffer(address,uint256,uint256,uint256,address)\":{\"params\":{\"amountUnderlyingRaw\":\"Amount of underlying tokens that will be deposited into the buffer\",\"amountWrappedRaw\":\"Amount of wrapped tokens that will be deposited into the buffer\",\"minIssuedShares\":\"Minimum amount of shares to receive from the buffer, expressed in underlying token native decimals\",\"sharesOwner\":\"Address that will own the deposited liquidity. Only this address will be able to remove liquidity from the buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"issuedShares\":\"the amount of tokens sharesOwner has in the buffer, expressed in underlying token amounts. (it is the BPT of an internal ERC4626 buffer). It is expressed in underlying token native decimals.\"}},\"isERC4626BufferInitialized(address)\":{\"details\":\"An initialized buffer should have an asset registered in the Vault.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"isBufferInitialized\":\"True if the ERC4626 buffer is initialized\"}},\"isPoolInRecoveryMode(address)\":{\"details\":\"Recovery Mode enables a safe proportional withdrawal path, with no external calls.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"inRecoveryMode\":\"True if the pool is in Recovery Mode, false otherwise\"}},\"isPoolInitialized(address)\":{\"details\":\"An initialized pool can be considered registered as well.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"initialized\":\"True if the pool is initialized, false otherwise\"}},\"isPoolPaused(address)\":{\"details\":\"If a pool is paused, all non-Recovery Mode state-changing operations will revert.\",\"params\":{\"pool\":\"The pool to be checked\"},\"returns\":{\"poolPaused\":\"True if the pool is paused\"}},\"isPoolRegistered(address)\":{\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"registered\":\"True if the pool is registered, false otherwise\"}},\"isQueryDisabled()\":{\"details\":\"If true, queries might either be disabled temporarily or permanently.\",\"returns\":{\"queryDisabled\":\"True if query functionality is reversibly disabled\"}},\"isQueryDisabledPermanently()\":{\"details\":\"This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\",\"returns\":{\"queryDisabledPermanently\":\"True if query functionality is permanently disabled\"}},\"isUnlocked()\":{\"details\":\"The Vault must be unlocked to perform state-changing liquidity operations.\",\"returns\":{\"unlocked\":\"True if the Vault is unlocked, false otherwise\"}},\"isVaultPaused()\":{\"details\":\"If the Vault is paused, all non-Recovery Mode state-changing operations on pools will revert. Note that ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they would likely be paused and unpaused together). Call `areBuffersPaused` to check the pause state of the buffers.\",\"returns\":{\"vaultPaused\":\"True if the Vault is paused\"}},\"pausePool(address)\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during pool factory deployment.\",\"params\":{\"pool\":\"The pool being paused\"}},\"pauseVault()\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during deployment. Note that ERC4626 buffer operations have an independent pause mechanism, which is not affected by pausing the Vault. Custom routers could still wrap/unwrap using buffers while the Vault is paused, unless buffers are also paused (with `pauseVaultBuffers`).\"},\"pauseVaultBuffers()\":{\"details\":\"When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. Currently it's not possible to pause vault buffers individually. This is a permissioned call, and is reversible (see `unpauseVaultBuffers`). Note that the Vault has a separate and independent pausing mechanism. It is possible to pause the Vault (i.e. pool operations), without affecting buffers, and vice versa.\"},\"quote(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `onlyWhenUnlocked`. `transient` modifier ensuring balances changes within the Vault are settled.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}},\"quoteAndRevert(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `onlyWhenUnlocked`. `transient` modifier ensuring balances changes within the Vault are settled. This call always reverts, returning the result in the revert reason.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"}},\"registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))\":{\"details\":\"A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused pool will automatically unpause. Balancer timestamps are 32 bits. A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to the Vault. If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the authorizer.\",\"params\":{\"liquidityManagement\":\"Liquidity management flags with implemented methods\",\"pauseWindowEndTime\":\"The timestamp after which it is no longer possible to pause the pool\",\"pool\":\"The address of the pool being registered\",\"poolHooksContract\":\"Contract that implements the hooks for the pool\",\"protocolFeeExempt\":\"If true, the pool's initial aggregate fees will be set to 0\",\"roleAccounts\":\"Addresses the Vault will allow to change certain pool settings\",\"swapFeePercentage\":\"The initial static swap fee percentage of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"details\":\"Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user. Untrusted routers require prior approval from the user. This is the only function allowed to call _queryModeBalanceIncrease (and only in a query context).\",\"params\":{\"params\":\"Parameters for the remove liquidity (see above for struct definition)\"},\"returns\":{\"amountsOut\":\"Actual amounts of output tokens\",\"bptAmountIn\":\"Actual amount of BPT burned\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"removeLiquidityFromBuffer(address,uint256,uint256,uint256)\":{\"details\":\"Only proportional exits are supported, and the sender has to be the owner of the shares. This function unlocks the Vault just for this operation; it does not work with a Router as an entrypoint. Pre-conditions: - The buffer needs to be initialized. - sharesOwner is the original msg.sender, it needs to be checked in the Router. That's why   this call is authenticated; only routers approved by the DAO can remove the liquidity of a buffer. - The buffer needs to have some liquidity and have its asset registered in `_bufferAssets` storage.\",\"params\":{\"minAmountUnderlyingOutRaw\":\"Minimum amount of underlying tokens to receive from the buffer. It is expressed in underlying token native decimals\",\"minAmountWrappedOutRaw\":\"Minimum amount of wrapped tokens to receive from the buffer. It is expressed in wrapped token native decimals\",\"sharesToRemove\":\"Amount of shares to remove from the buffer. Cannot be greater than sharesOwner's total shares. It is expressed in underlying token native decimals\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"removedUnderlyingBalanceRaw\":\"Amount of underlying tokens returned to the user\",\"removedWrappedBalanceRaw\":\"Amount of wrapped tokens returned to the user\"}},\"removeLiquidityRecovery(address,address,uint256,uint256[])\":{\"params\":{\"exactBptAmountIn\":\"Input pool token amount\",\"from\":\"Address of user to burn pool tokens from\",\"minAmountsOut\":\"Minimum amounts of tokens to be received, sorted in token registration order\",\"pool\":\"Address of the pool\"},\"returns\":{\"amountsOut\":\"Actual calculated amounts of output tokens, sorted in token registration order\"}},\"sendTo(address,address,uint256)\":{\"details\":\"There is no inverse operation for this function. Transfer funds to the Vault and call `settle` to cancel debts.\",\"params\":{\"amount\":\"Amount of tokens to send\",\"to\":\"Recipient address\",\"token\":\"Address of the token\"}},\"setAuthorizer(address)\":{\"details\":\"This is a permissioned call. Emits an `AuthorizerChanged` event.\",\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"setProtocolFeeController(address)\":{\"details\":\"This is a permissioned call. Emits a `ProtocolFeeControllerChanged` event.\",\"params\":{\"newProtocolFeeController\":\"The address of the new Protocol Fee Controller\"}},\"setStaticSwapFeePercentage(address,uint256)\":{\"details\":\"This is a permissioned function, disabled if the pool is paused. The swap fee percentage must be within the bounds specified by the pool's implementation of `ISwapFeePercentageBounds`. Emits the SwapFeePercentageChanged event.\",\"params\":{\"pool\":\"The address of the pool for which the static swap fee will be changed\",\"swapFeePercentage\":\"The new swap fee percentage to apply to the pool\"}},\"settle(address,uint256)\":{\"details\":\"Protects the caller against leftover dust in the Vault for the token being settled. The caller should know in advance how many tokens were paid to the Vault, so it can provide it as a hint to discard any excess in the Vault balance. If the given hint is equal to or higher than the difference in reserves, the difference in reserves is given as credit to the caller. If it's higher, the caller sent fewer tokens than expected, so settlement would fail. If the given hint is lower than the difference in reserves, the hint is given as credit to the caller. In this case, the excess would be absorbed by the Vault (and reflected correctly in the reserves), but would not affect settlement. The credit supplied by the Vault can be calculated as `min(reserveDifference, amountHint)`, where the reserve difference equals current balance of the token minus existing reserves of the token when the function is called.\",\"params\":{\"amountHint\":\"Amount paid as reported by the caller\",\"token\":\"Address of the token\"},\"returns\":{\"credit\":\"Credit received in return of the payment\"}},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"details\":\"All parameters are given in raw token decimal encoding.\",\"params\":{\"vaultSwapParams\":\"Parameters for the swap (see above for struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"totalSupply(address)\":{\"params\":{\"token\":\"The token address\"},\"returns\":{\"tokenTotalSupply\":\"Total supply of the token\"}},\"transfer(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"owner\":\"Address of the owner\",\"to\":\"Address of the recipient\"},\"returns\":{\"_0\":\"success True if successful, false otherwise\"}},\"transferFrom(address,address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"from\":\"Address of the sender\",\"spender\":\"Address allowed to perform the transfer\",\"to\":\"Address of the recipient\"},\"returns\":{\"success\":\"True if successful, false otherwise\"}},\"unlock(bytes)\":{\"details\":\"Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`, meaning all balances for the caller have to be settled at the end.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}},\"unpausePool(address)\":{\"details\":\"This is a permissioned function that will only work on a paused Pool within the Buffer Period set during deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\",\"params\":{\"pool\":\"The pool being unpaused\"}},\"unpauseVault()\":{\"details\":\"This is a permissioned function that will only work on a paused Vault within the Buffer Period set during deployment. Note that the Vault will automatically unpause after the Buffer Period expires. As noted above, ERC4626 buffers and Vault operations on pools are independent. Unpausing the Vault does not reverse `pauseVaultBuffers`. If buffers were also paused, they will remain in that state until explicitly unpaused.\"},\"unpauseVaultBuffers()\":{\"details\":\"When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. As noted above, ERC4626 buffers and Vault operations on pools are independent. Unpausing buffers does not reverse `pauseVault`. If the Vault was also paused, it will remain in that state until explicitly unpaused. This is a permissioned call.\"},\"updateAggregateSwapFeePercentage(address,uint256)\":{\"details\":\"Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol). Emits an `AggregateSwapFeePercentageChanged` event.\",\"params\":{\"newAggregateSwapFeePercentage\":\"The new aggregate swap fee percentage\",\"pool\":\"The pool whose swap fee percentage will be updated\"}},\"updateAggregateYieldFeePercentage(address,uint256)\":{\"details\":\"Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol). Emits an `AggregateYieldFeePercentageChanged` event.\",\"params\":{\"newAggregateYieldFeePercentage\":\"The new aggregate yield fee percentage\",\"pool\":\"The pool whose yield fee percentage will be updated\"}},\"vault()\":{\"returns\":{\"_0\":\"vault The main Vault address.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AfterAddLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert.\"}],\"AfterInitializeHookFailed()\":[{\"notice\":\"The pool has returned false to the afterInitialize hook, indicating the transaction should revert.\"}],\"AfterRemoveLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert.\"}],\"AfterSwapHookFailed()\":[{\"notice\":\"The pool has returned false to the afterSwap hook, indicating the transaction should revert.\"}],\"AmountGivenZero()\":[{\"notice\":\"The user tried to swap zero tokens.\"}],\"AmountInAboveMax(address,uint256,uint256)\":[{\"notice\":\"A required amountIn exceeds the maximum limit specified for the operation.\"}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"notice\":\"The actual amount out is below the minimum limit specified for the operation.\"}],\"BalanceNotSettled()\":[{\"notice\":\"A transient accounting operation completed with outstanding token deltas.\"}],\"BeforeAddLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert.\"}],\"BeforeInitializeHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeInitialize hook, indicating the transaction should revert.\"}],\"BeforeRemoveLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert.\"}],\"BeforeSwapHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"notice\":\"The required BPT amount in exceeds the maximum limit specified for the operation.\"}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"notice\":\"The BPT amount received from adding liquidity is below the minimum specified for the operation.\"}],\"BufferAlreadyInitialized(address)\":[{\"notice\":\"The buffer for the given wrapped token was already initialized.\"}],\"BufferNotInitialized(address)\":[{\"notice\":\"The buffer for the given wrapped token was not initialized.\"}],\"BufferSharesInvalidOwner()\":[{\"notice\":\"Buffer shares were burned from the zero address.\"}],\"BufferSharesInvalidReceiver()\":[{\"notice\":\"Buffer shares were minted to the zero address.\"}],\"BufferTotalSupplyTooLow(uint256)\":[{\"notice\":\"The total supply of a buffer can't be lower than the absolute minimum.\"}],\"CannotReceiveEth()\":[{\"notice\":\"The contract should not receive ETH.\"}],\"CannotSwapSameToken()\":[{\"notice\":\"The user attempted to swap a token for itself.\"}],\"DoesNotSupportAddLiquidityCustom()\":[{\"notice\":\"Pool does not support adding liquidity with a customized input.\"}],\"DoesNotSupportDonation()\":[{\"notice\":\"Pool does not support adding liquidity through donation.\"}],\"DoesNotSupportRemoveLiquidityCustom()\":[{\"notice\":\"Pool does not support removing liquidity with a customized input.\"}],\"DoesNotSupportUnbalancedLiquidity()\":[{\"notice\":\"Pool does not support adding / removing liquidity with an unbalanced input.\"}],\"DynamicSwapFeeHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"FeePrecisionTooHigh()\":[{\"notice\":\"Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\"}],\"HookAdjustedAmountInAboveMax(address,uint256,uint256)\":[{\"notice\":\"A hook adjusted amountIn exceeds the maximum limit specified for the operation.\"}],\"HookAdjustedAmountOutBelowMin(address,uint256,uint256)\":[{\"notice\":\"The hook adjusted amount out is below the minimum limit specified for the operation.\"}],\"HookAdjustedSwapLimit(uint256,uint256)\":[{\"notice\":\"A hook adjusted amount in or out has exceeded the limit specified in the swap request.\"}],\"HookRegistrationFailed(address,address,address)\":[{\"notice\":\"A hook contract rejected a pool on registration.\"}],\"InvalidAddLiquidityKind()\":[{\"notice\":\"Add liquidity kind not supported.\"}],\"InvalidRemoveLiquidityKind()\":[{\"notice\":\"Remove liquidity kind not supported.\"}],\"InvalidToken()\":[{\"notice\":\"Invalid tokens (e.g., zero) cannot be registered.\"}],\"InvalidTokenConfiguration()\":[{\"notice\":\"The data in a TokenConfig struct is inconsistent or unsupported.\"}],\"InvalidTokenDecimals()\":[{\"notice\":\"Tokens with more than 18 decimals are not supported.\"}],\"InvalidTokenType()\":[{\"notice\":\"The token type given in a TokenConfig during pool registration is invalid.\"}],\"InvalidUnderlyingToken(address)\":[{\"notice\":\"A wrapped token reported the zero address as its underlying token asset.\"}],\"MaxTokens()\":[{\"notice\":\"The token count is above the maximum allowed.\"}],\"MinTokens()\":[{\"notice\":\"The token count is below the minimum allowed.\"}],\"NotEnoughBufferShares()\":[{\"notice\":\"The user is trying to remove more than their allocated shares from the buffer.\"}],\"NotVaultDelegateCall()\":[{\"notice\":\"The `VaultExtension` contract was called by an account directly.\"}],\"PauseBufferPeriodDurationTooLarge()\":[{\"notice\":\"The caller specified a buffer period longer than the maximum.\"}],\"PercentageAboveMax()\":[{\"notice\":\"A given percentage is above the maximum (usually a value close to FixedPoint.ONE, or 1e18 wei).\"}],\"PoolAlreadyInitialized(address)\":[{\"notice\":\"A pool has already been initialized. `initialize` may only be called once.\"}],\"PoolAlreadyRegistered(address)\":[{\"notice\":\"A pool has already been registered. `registerPool` may only be called once.\"}],\"PoolInRecoveryMode(address)\":[{\"notice\":\"Cannot enable recovery mode when already enabled.\"}],\"PoolNotInRecoveryMode(address)\":[{\"notice\":\"Cannot disable recovery mode when not enabled.\"}],\"PoolNotInitialized(address)\":[{\"notice\":\"A referenced pool has not been initialized.\"}],\"PoolNotPaused(address)\":[{\"notice\":\"Governance tried to unpause the Pool when it was not paused.\"}],\"PoolNotRegistered(address)\":[{\"notice\":\"A pool has not been registered.\"}],\"PoolPauseWindowExpired(address)\":[{\"notice\":\"Governance tried to pause a Pool after the pause period expired.\"}],\"PoolPaused(address)\":[{\"notice\":\"A user tried to perform an operation involving a paused Pool.\"}],\"ProtocolFeesExceedTotalCollected()\":[{\"notice\":\"Error raised when there is an overflow in the fee calculation.\"}],\"QueriesDisabled()\":[{\"notice\":\"A user tried to execute a query operation when they were disabled.\"}],\"QueriesDisabledPermanently()\":[{\"notice\":\"An admin tried to re-enable queries, but they were disabled permanently.\"}],\"QuoteResultSpoofed()\":[{\"notice\":\"Quote reverted with a reserved error code.\"}],\"RouterNotTrusted()\":[{\"notice\":\"An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance).\"}],\"SenderIsNotVault(address)\":[{\"notice\":\"Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\"}],\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}],\"SwapFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the swap fee percentage is greater than the maximum allowed value.\"}],\"SwapFeePercentageTooLow()\":[{\"notice\":\"Error raised when the swap fee percentage is less than the minimum allowed value.\"}],\"SwapLimit(uint256,uint256)\":[{\"notice\":\"An amount in or out has exceeded the limit specified in the swap request.\"}],\"TokenAlreadyRegistered(address)\":[{\"notice\":\"A token was already registered (i.e., it is a duplicate in the pool).\"}],\"TokenNotRegistered(address)\":[{\"notice\":\"The user attempted to operate with a token that is not in the pool.\"}],\"TokensMismatch(address,address,address)\":[{\"notice\":\"The token list passed into an operation does not match the pool tokens in the pool.\"}],\"TradeAmountTooSmall()\":[{\"notice\":\"The amount given or calculated for an operation is below the minimum limit.\"}],\"VaultBuffersArePaused()\":[{\"notice\":\"Buffer operation attempted while vault buffers are paused.\"}],\"VaultIsNotUnlocked()\":[{\"notice\":\"A user called a Vault function (swap, add/remove liquidity) outside the lock context.\"}],\"VaultNotPaused()\":[{\"notice\":\"Governance tried to unpause the Vault when it was not paused.\"}],\"VaultPauseWindowDurationTooLarge()\":[{\"notice\":\"The caller specified a pause window period longer than the maximum.\"}],\"VaultPauseWindowExpired()\":[{\"notice\":\"Governance tried to pause the Vault after the pause period expired.\"}],\"VaultPaused()\":[{\"notice\":\"A user tried to perform an operation while the Vault was paused.\"}],\"WrapAmountTooSmall(address)\":[{\"notice\":\"The amount given to wrap/unwrap was too small, which can introduce rounding issues.\"}],\"WrongProtocolFeeControllerDeployment()\":[{\"notice\":\"The `ProtocolFeeController` contract was configured with an incorrect Vault address.\"}],\"WrongUnderlyingToken(address,address)\":[{\"notice\":\"The wrapped token asset does not match the underlying token.\"}],\"WrongVaultAdminDeployment()\":[{\"notice\":\"The `VaultAdmin` contract was configured with an incorrect Vault address.\"}],\"WrongVaultExtensionDeployment()\":[{\"notice\":\"The `VaultExtension` contract was configured with an incorrect Vault address.\"}]},\"events\":{\"AggregateSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"A protocol or pool creator fee has changed, causing an update to the aggregate swap fee.\"},\"AggregateYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"A protocol or pool creator fee has changed, causing an update to the aggregate yield fee.\"},\"AuthorizerChanged(address)\":{\"notice\":\"A new authorizer is set by `setAuthorizer`.\"},\"BufferSharesBurned(address,address,uint256)\":{\"notice\":\"Buffer shares were burned for an ERC4626 buffer corresponding to a given wrapped token.\"},\"BufferSharesMinted(address,address,uint256)\":{\"notice\":\"Buffer shares were minted for an ERC4626 buffer corresponding to a given wrapped token.\"},\"LiquidityAdded(address,address,uint8,uint256,uint256[],uint256[])\":{\"notice\":\"Liquidity has been added to a pool (including initialization).\"},\"LiquidityAddedToBuffer(address,uint256,uint256,bytes32)\":{\"notice\":\"Liquidity was added to an ERC4626 buffer corresponding to the given wrapped token.\"},\"LiquidityRemoved(address,address,uint8,uint256,uint256[],uint256[])\":{\"notice\":\"Liquidity has been removed from a pool.\"},\"LiquidityRemovedFromBuffer(address,uint256,uint256,bytes32)\":{\"notice\":\"Liquidity was removed from an ERC4626 buffer.\"},\"PoolInitialized(address)\":{\"notice\":\"A Pool was initialized by calling `initialize`.\"},\"PoolPausedStateChanged(address,bool)\":{\"notice\":\"A Pool's pause status has changed.\"},\"PoolRecoveryModeStateChanged(address,bool)\":{\"notice\":\"Recovery mode has been enabled or disabled for a pool.\"},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,uint32,(address,address,address),(bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),(bool,bool,bool,bool))\":{\"notice\":\"A Pool was registered by calling `registerPool`.\"},\"ProtocolFeeControllerChanged(address)\":{\"notice\":\"A new protocol fee controller is set by `setProtocolFeeController`.\"},\"Swap(address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"A swap has occurred.\"},\"SwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the swap fee percentage of a pool is updated.\"},\"Unwrap(address,uint256,uint256,bytes32)\":{\"notice\":\"An unwrap operation has occurred.\"},\"VaultAuxiliary(address,bytes32,bytes)\":{\"notice\":\"Pools can use this event to emit event data from the Vault.\"},\"VaultBuffersPausedStateChanged(bool)\":{\"notice\":\"The Vault buffers pause status has changed.\"},\"VaultPausedStateChanged(bool)\":{\"notice\":\"The Vault's pause status has changed.\"},\"VaultQueriesDisabled()\":{\"notice\":\"`disableQuery` has been called on the Vault, disabling query functionality.\"},\"VaultQueriesEnabled()\":{\"notice\":\"`enableQuery` has been called on the Vault, enabling query functionality.\"},\"Wrap(address,uint256,uint256,bytes32)\":{\"notice\":\"A wrap operation has occurred.\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"notice\":\"Adds liquidity to a pool.\"},\"addLiquidityToBuffer(address,uint256,uint256,uint256,address)\":{\"notice\":\"Adds liquidity to an internal ERC4626 buffer in the Vault, proportionally.\"},\"allowance(address,address,address)\":{\"notice\":\"Gets the allowance of a spender for a given ERC20 token and owner.\"},\"approve(address,address,uint256)\":{\"notice\":\"Approves a spender to spend pool tokens on behalf of sender.\"},\"areBuffersPaused()\":{\"notice\":\"Indicates whether the Vault buffers are paused.\"},\"balanceOf(address,address)\":{\"notice\":\"Gets the balance of an account for a given ERC20 token.\"},\"collectAggregateFees(address)\":{\"notice\":\"Collects accumulated aggregate swap and yield fees for the specified pool.\"},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"notice\":\"Query the current dynamic swap fee percentage of a pool, given a set of swap parameters.\"},\"disableQuery()\":{\"notice\":\"Disables query functionality on the Vault. Can only be called by governance.\"},\"disableQueryPermanently()\":{\"notice\":\"Disables query functionality permanently on the Vault. Can only be called by governance.\"},\"disableRecoveryMode(address)\":{\"notice\":\"Disable recovery mode for a pool.\"},\"emitAuxiliaryEvent(bytes32,bytes)\":{\"notice\":\"Pools can use this event to emit event data from the Vault.\"},\"enableQuery()\":{\"notice\":\"Enables query functionality on the Vault. Can only be called by governance.\"},\"enableRecoveryMode(address)\":{\"notice\":\"Enable recovery mode for a pool.\"},\"erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))\":{\"notice\":\"Wraps/unwraps tokens based on the parameters provided.\"},\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getAddLiquidityCalledFlag(address)\":{\"notice\":\"This flag is used to detect and tax \\\"round-trip\\\" interactions (adding and removing liquidity in the same pool).\"},\"getAggregateSwapFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\"},\"getAggregateYieldFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\"},\"getAuthorizer()\":{\"notice\":\"Returns the Authorizer address.\"},\"getBptRate(address)\":{\"notice\":\"The current rate of a pool token (BPT) = invariant / totalSupply.\"},\"getBufferAsset(address)\":{\"notice\":\"Returns the asset registered for a given wrapped token.\"},\"getBufferBalance(address)\":{\"notice\":\"Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\"},\"getBufferMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\"},\"getBufferOwnerShares(address,address)\":{\"notice\":\"Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets in the buffer.\"},\"getBufferPeriodDuration()\":{\"notice\":\"Returns the Vault's buffer period duration.\"},\"getBufferPeriodEndTime()\":{\"notice\":\"Returns the Vault's buffer period end time.\"},\"getBufferTotalShares(address)\":{\"notice\":\"Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\"},\"getCurrentLiveBalances(address)\":{\"notice\":\"Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in registration order.\"},\"getERC4626BufferAsset(address)\":{\"notice\":\"Gets the registered asset for a given buffer.\"},\"getHooksConfig(address)\":{\"notice\":\"Gets the hooks configuration parameters of a pool.\"},\"getMaximumPoolTokens()\":{\"notice\":\"Get the maximum number of tokens in a pool.\"},\"getMinimumPoolTokens()\":{\"notice\":\"Get the minimum number of tokens in a pool.\"},\"getMinimumTradeAmount()\":{\"notice\":\"Get the minimum trade amount in a pool operation.\"},\"getMinimumWrapAmount()\":{\"notice\":\"Get the minimum wrap amount in a buffer operation.\"},\"getNonzeroDeltaCount()\":{\"notice\":\"Returns the count of non-zero deltas.\"},\"getPauseWindowEndTime()\":{\"notice\":\"Returns the Vault's pause window end time.\"},\"getPoolConfig(address)\":{\"notice\":\"Gets the configuration parameters of a pool.\"},\"getPoolData(address)\":{\"notice\":\"Returns comprehensive pool data for the given pool.\"},\"getPoolMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of pool tokens (BPT) for an initialized pool.\"},\"getPoolPausedState(address)\":{\"notice\":\"Returns the paused status, and end times of the Pool's pause window and buffer period.\"},\"getPoolRoleAccounts(address)\":{\"notice\":\"Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\"},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"notice\":\"Gets the index of a token in a given pool.\"},\"getPoolTokenInfo(address)\":{\"notice\":\"Gets the raw data for a pool: tokens, raw balances, scaling factors.\"},\"getPoolTokenRates(address)\":{\"notice\":\"Gets pool token rates.\"},\"getPoolTokens(address)\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"getProtocolFeeController()\":{\"notice\":\"Returns the Protocol Fee Controller address.\"},\"getReservesOf(address)\":{\"notice\":\"Retrieves the reserve (i.e., total Vault balance) of a given token.\"},\"getStaticSwapFeePercentage(address)\":{\"notice\":\"Fetches the static swap fee percentage for a given pool.\"},\"getTokenDelta(address)\":{\"notice\":\"Retrieves the token delta for a specific token.\"},\"getVaultAdmin()\":{\"notice\":\"Returns the VaultAdmin contract address.\"},\"getVaultExtension()\":{\"notice\":\"Returns the VaultExtension contract address.\"},\"getVaultPausedState()\":{\"notice\":\"Returns the paused status, and end times of the Vault's pause window and buffer period.\"},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"notice\":\"Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\"},\"initializeBuffer(address,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes buffer for the given wrapped token.\"},\"isERC4626BufferInitialized(address)\":{\"notice\":\"Checks if the wrapped token has an initialized buffer in the Vault.\"},\"isPoolInRecoveryMode(address)\":{\"notice\":\"Checks whether a pool is in Recovery Mode.\"},\"isPoolInitialized(address)\":{\"notice\":\"Checks whether a pool is initialized.\"},\"isPoolPaused(address)\":{\"notice\":\"Indicates whether a pool is paused.\"},\"isPoolRegistered(address)\":{\"notice\":\"Checks whether a pool is registered.\"},\"isQueryDisabled()\":{\"notice\":\"Returns true if queries are disabled on the Vault.\"},\"isQueryDisabledPermanently()\":{\"notice\":\"Returns true if queries are disabled permanently; false if they are enabled.\"},\"isUnlocked()\":{\"notice\":\"Returns whether the Vault is unlocked (i.e., executing an operation).\"},\"isVaultPaused()\":{\"notice\":\"Indicates whether the Vault is paused.\"},\"pausePool(address)\":{\"notice\":\"Pause the Pool: an emergency action which disables all pool functions.\"},\"pauseVault()\":{\"notice\":\"Pause the Vault: an emergency action which disables all operational state-changing functions on pools.\"},\"pauseVaultBuffers()\":{\"notice\":\"Pauses native vault buffers globally.\"},\"quote(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"quoteAndRevert(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))\":{\"notice\":\"Registers a pool, associating it with its factory and the tokens it manages.\"},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"notice\":\"Removes liquidity from a pool.\"},\"removeLiquidityFromBuffer(address,uint256,uint256,uint256)\":{\"notice\":\"Removes liquidity from an internal ERC4626 buffer in the Vault.\"},\"removeLiquidityRecovery(address,address,uint256,uint256[])\":{\"notice\":\"Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out. The request is implemented by the Vault without any interaction with the pool, ensuring that it works the same for all pools, and cannot be disabled by a new pool type.\"},\"sendTo(address,address,uint256)\":{\"notice\":\"Sends tokens to a recipient.\"},\"setAuthorizer(address)\":{\"notice\":\"Sets a new Authorizer for the Vault.\"},\"setProtocolFeeController(address)\":{\"notice\":\"Sets a new Protocol Fee Controller for the Vault.\"},\"setStaticSwapFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new static swap fee percentage to the specified pool.\"},\"settle(address,uint256)\":{\"notice\":\"Settles deltas for a token; must be successful for the current lock to be released.\"},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"notice\":\"Swaps tokens based on provided parameters.\"},\"totalSupply(address)\":{\"notice\":\"Gets the total supply of a given ERC20 token.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers pool token from owner to a recipient.\"},\"transferFrom(address,address,address,uint256)\":{\"notice\":\"Transfers pool token from a sender to a recipient using an allowance.\"},\"unlock(bytes)\":{\"notice\":\"Creates a context for a sequence of operations (i.e., \\\"unlocks\\\" the Vault).\"},\"unpausePool(address)\":{\"notice\":\"Reverse a `pause` operation, and restore the Pool to normal functionality.\"},\"unpauseVault()\":{\"notice\":\"Reverse a `pause` operation, and restore Vault pool operations to normal functionality.\"},\"unpauseVaultBuffers()\":{\"notice\":\"Unpauses native vault buffers globally.\"},\"updateAggregateSwapFeePercentage(address,uint256)\":{\"notice\":\"Update an aggregate swap fee percentage.\"},\"updateAggregateYieldFeePercentage(address,uint256)\":{\"notice\":\"Update an aggregate yield fee percentage.\"}},\"notice\":\"Composite interface for all Vault operations: swap, add/remove liquidity, and associated queries.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":\"IVault\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0x743734d3d3503d705f0a778c4b0dd61fdb067e89a07481ddbead0654e6808318\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6198f27b2d01f346fdd3d1302e9a6ddd543d2f06afd675d84919c2242bd26d8d\",\"dweb:/ipfs/QmYntQih5MwxxdGnVu2BPVLeqFuJEH761cByAesjwE6JKT\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol":{"IVaultAdmin":{"abi":[{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"maxAmountUnderlyingInRaw","type":"uint256"},{"internalType":"uint256","name":"maxAmountWrappedInRaw","type":"uint256"},{"internalType":"uint256","name":"exactSharesToIssue","type":"uint256"},{"internalType":"address","name":"sharesOwner","type":"address"}],"name":"addLiquidityToBuffer","outputs":[{"internalType":"uint256","name":"amountUnderlyingRaw","type":"uint256"},{"internalType":"uint256","name":"amountWrappedRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"areBuffersPaused","outputs":[{"internalType":"bool","name":"buffersPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFees","outputs":[{"internalType":"uint256[]","name":"swapFeeAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"yieldFeeAmounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"disableQuery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"disableQueryPermanently","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"disableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enableQuery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"enableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferAsset","outputs":[{"internalType":"address","name":"underlyingToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferBalance","outputs":[{"internalType":"uint256","name":"underlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"wrappedBalanceRaw","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"bufferMinimumTotalSupply","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"liquidityOwner","type":"address"}],"name":"getBufferOwnerShares","outputs":[{"internalType":"uint256","name":"ownerShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodDuration","outputs":[{"internalType":"uint32","name":"bufferPeriodDuration","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodEndTime","outputs":[{"internalType":"uint32","name":"bufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferTotalShares","outputs":[{"internalType":"uint256","name":"bufferShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaximumPoolTokens","outputs":[{"internalType":"uint256","name":"maxTokens","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getMinimumPoolTokens","outputs":[{"internalType":"uint256","name":"minTokens","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getMinimumTradeAmount","outputs":[{"internalType":"uint256","name":"minimumTradeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumWrapAmount","outputs":[{"internalType":"uint256","name":"minimumWrapAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPauseWindowEndTime","outputs":[{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPoolMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"poolMinimumTotalSupply","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getVaultPausedState","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"},{"internalType":"uint32","name":"vaultPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"vaultBufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"amountUnderlyingRaw","type":"uint256"},{"internalType":"uint256","name":"amountWrappedRaw","type":"uint256"},{"internalType":"uint256","name":"minIssuedShares","type":"uint256"},{"internalType":"address","name":"sharesOwner","type":"address"}],"name":"initializeBuffer","outputs":[{"internalType":"uint256","name":"issuedShares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isVaultPaused","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"pausePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseVaultBuffers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"sharesToRemove","type":"uint256"},{"internalType":"uint256","name":"minAmountUnderlyingOutRaw","type":"uint256"},{"internalType":"uint256","name":"minAmountWrappedOutRaw","type":"uint256"}],"name":"removeLiquidityFromBuffer","outputs":[{"internalType":"uint256","name":"removedUnderlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"removedWrappedBalanceRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"setAuthorizer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IProtocolFeeController","name":"newProtocolFeeController","type":"address"}],"name":"setProtocolFeeController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"setStaticSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"unpausePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseVaultBuffers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newAggregateSwapFeePercentage","type":"uint256"}],"name":"updateAggregateSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newAggregateYieldFeePercentage","type":"uint256"}],"name":"updateAggregateYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addLiquidityToBuffer(address,uint256,uint256,uint256,address)":"e2a92b1a","areBuffersPaused()":"55cba7fe","collectAggregateFees(address)":"8f4ab9ca","disableQuery()":"de1a36a6","disableQueryPermanently()":"821440f2","disableRecoveryMode(address)":"bffb78b2","enableQuery()":"e0d55605","enableRecoveryMode(address)":"dc3f574e","getBufferAsset(address)":"0387587d","getBufferBalance(address)":"4021fe0f","getBufferMinimumTotalSupply()":"26a8a991","getBufferOwnerShares(address,address)":"9385e39a","getBufferPeriodDuration()":"20c1fb7a","getBufferPeriodEndTime()":"cd51c12f","getBufferTotalShares(address)":"f2784e07","getMaximumPoolTokens()":"2e42f4d5","getMinimumPoolTokens()":"a8175b27","getMinimumTradeAmount()":"e2cb0ba0","getMinimumWrapAmount()":"53956aa2","getPauseWindowEndTime()":"8a8d123a","getPoolMinimumTotalSupply()":"d0965a6b","getVaultPausedState()":"85c8c015","initializeBuffer(address,uint256,uint256,uint256,address)":"653eb3b0","isVaultPaused()":"098401f5","pausePool(address)":"55aca1ec","pauseVault()":"9e0879c2","pauseVaultBuffers()":"e085c5a8","removeLiquidityFromBuffer(address,uint256,uint256,uint256)":"ebc7955c","setAuthorizer(address)":"058a628f","setProtocolFeeController(address)":"2d771389","setStaticSwapFeePercentage(address,uint256)":"d15126ba","unpausePool(address)":"f21c38cd","unpauseVault()":"0b7562be","unpauseVaultBuffers()":"b9212b49","updateAggregateSwapFeePercentage(address,uint256)":"5e0b06f4","updateAggregateYieldFeePercentage(address,uint256)":"e253670a","vault()":"fbfa77cf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountUnderlyingInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountWrappedInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactSharesToIssue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sharesOwner\",\"type\":\"address\"}],\"name\":\"addLiquidityToBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlyingRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWrappedRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areBuffersPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"buffersPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yieldFeeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQueryPermanently\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"disableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityOwner\",\"type\":\"address\"}],\"name\":\"getBufferOwnerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ownerShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTradeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumWrapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumWrapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseWindowEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vaultPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vaultBufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountUnderlyingRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWrappedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIssuedShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sharesOwner\",\"type\":\"address\"}],\"name\":\"initializeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVaultBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesToRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountUnderlyingOutRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountWrappedOutRaw\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityFromBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"removedUnderlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedWrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"newProtocolFeeController\",\"type\":\"address\"}],\"name\":\"setProtocolFeeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setStaticSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVaultBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAggregateSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateAggregateSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateAggregateYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"`VaultAdmin` is the Proxy extension of `VaultExtension`, and handles the least critical operations, as two delegate calls add gas to each call. Most of the permissioned calls are here.\",\"kind\":\"dev\",\"methods\":{\"addLiquidityToBuffer(address,uint256,uint256,uint256,address)\":{\"details\":\"The buffer needs to be initialized beforehand.\",\"params\":{\"exactSharesToIssue\":\"The value in underlying tokens that `sharesOwner` wants to add to the buffer, in underlying token decimals\",\"maxAmountUnderlyingInRaw\":\"Maximum amount of underlying tokens to add to the buffer. It is expressed in underlying token native decimals\",\"maxAmountWrappedInRaw\":\"Maximum amount of wrapped tokens to add to the buffer. It is expressed in wrapped token native decimals\",\"sharesOwner\":\"Address that will own the deposited liquidity. Only this address will be able to remove liquidity from the buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"amountUnderlyingRaw\":\"Amount of underlying tokens deposited into the buffer\",\"amountWrappedRaw\":\"Amount of wrapped tokens deposited into the buffer\"}},\"areBuffersPaused()\":{\"details\":\"When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true) will revert. Pausing buffers is reversible. Note that ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they would likely be paused and unpaused together). Call `isVaultPaused` to check the pause state of the Vault.\",\"returns\":{\"buffersPaused\":\"True if the Vault buffers are paused\"}},\"collectAggregateFees(address)\":{\"details\":\"Fees are sent to the ProtocolFeeController address.\",\"params\":{\"pool\":\"The pool on which all aggregate fees should be collected\"},\"returns\":{\"swapFeeAmounts\":\"An array with the total swap fees collected, sorted in token registration order\",\"yieldFeeAmounts\":\"An array with the total yield fees collected, sorted in token registration order\"}},\"disableQuery()\":{\"details\":\"The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2). This function can be acted upon as an emergency measure in ambiguous contexts where it's not 100% clear whether disabling queries is completely necessary; queries can still be re-enabled after this call.\"},\"disableQueryPermanently()\":{\"details\":\"Shall only be used when there is no doubt that queries pose a fundamental threat to the system.\"},\"disableRecoveryMode(address)\":{\"details\":\"This is a permissioned function. It re-syncs live balances (which could not be updated during Recovery Mode), forfeiting any yield fees that accrued while enabled. It makes external calls, and could potentially fail if there is an issue with any associated Rate Providers.\",\"params\":{\"pool\":\"The address of the pool\"}},\"enableQuery()\":{\"details\":\"Only works if queries are not permanently disabled.\"},\"enableRecoveryMode(address)\":{\"details\":\"This is a permissioned function. It enables a safe proportional withdrawal, with no external calls. Since there are no external calls, ensuring that entering Recovery Mode cannot fail, we cannot compute and so must forfeit any yield fees between the last operation and enabling Recovery Mode. For the same reason, live balances cannot be updated while in Recovery Mode, as doing so might cause withdrawals to fail.\",\"params\":{\"pool\":\"The address of the pool\"}},\"getBufferAsset(address)\":{\"details\":\"The asset can never change after buffer initialization.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingToken\":\"Address of the underlying token registered for the wrapper; `address(0)` if the buffer has not been initialized.\"}},\"getBufferBalance(address)\":{\"details\":\"All values are in native token decimals of the wrapped or underlying tokens.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingBalanceRaw\":\"Amount of underlying tokens deposited into the buffer, in native token decimals\",\"wrappedBalanceRaw\":\"Amount of wrapped tokens deposited into the buffer, in native token decimals\"}},\"getBufferMinimumTotalSupply()\":{\"details\":\"This prevents buffers from being completely drained. When the buffer is initialized, this minimum number of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal to the Vault, as buffers are not tokenized.\",\"returns\":{\"bufferMinimumTotalSupply\":\"The minimum total supply a buffer can have after initialization\"}},\"getBufferOwnerShares(address,address)\":{\"params\":{\"liquidityOwner\":\"Address of the user that owns liquidity in the wrapped token's buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"ownerShares\":\"Amount of shares allocated to the liquidity owner, in native underlying token decimals\"}},\"getBufferPeriodDuration()\":{\"details\":\"This value is immutable. It represents the period during which, if paused, the Vault will remain paused. This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer timestamps are 32 bits.\",\"returns\":{\"bufferPeriodDuration\":\"The length of the buffer period in seconds\"}},\"getBufferPeriodEndTime()\":{\"details\":\"This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer timestamps are 32 bits.\",\"returns\":{\"bufferPeriodEndTime\":\"The timestamp after which the Vault remains permanently unpaused\"}},\"getBufferTotalShares(address)\":{\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"bufferShares\":\"Amount of supply shares of the buffer, in native underlying token decimals\"}},\"getMaximumPoolTokens()\":{\"returns\":{\"maxTokens\":\"The maximum token count of a pool\"}},\"getMinimumPoolTokens()\":{\"details\":\"We expect the vast majority of pools to be 2-token.\",\"returns\":{\"minTokens\":\"The minimum token count of a pool\"}},\"getMinimumTradeAmount()\":{\"details\":\"This limit is applied to the 18-decimal \\\"upscaled\\\" amount in any operation (swap, add/remove liquidity).\",\"returns\":{\"minimumTradeAmount\":\"The minimum trade amount as an 18-decimal floating point number\"}},\"getMinimumWrapAmount()\":{\"details\":\"This limit is applied to the wrap operation amount, in native underlying token decimals.\",\"returns\":{\"minimumWrapAmount\":\"The minimum wrap amount in native underlying token decimals\"}},\"getPauseWindowEndTime()\":{\"details\":\"This value is immutable, and represents the timestamp after which the Vault can no longer be paused by governance. Balancer timestamps are 32 bits.\",\"returns\":{\"pauseWindowEndTime\":\"The timestamp when the Vault's pause window ends\"}},\"getPoolMinimumTotalSupply()\":{\"details\":\"This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\",\"returns\":{\"poolMinimumTotalSupply\":\"The minimum total supply a pool can have after initialization\"}},\"getVaultPausedState()\":{\"details\":\"Balancer timestamps are 32 bits.\",\"returns\":{\"vaultBufferPeriodEndTime\":\"The timestamp of the end of the Vault's buffer period\",\"vaultPauseWindowEndTime\":\"The timestamp of the end of the Vault's pause window\",\"vaultPaused\":\"True if the Vault is paused\"}},\"initializeBuffer(address,uint256,uint256,uint256,address)\":{\"params\":{\"amountUnderlyingRaw\":\"Amount of underlying tokens that will be deposited into the buffer\",\"amountWrappedRaw\":\"Amount of wrapped tokens that will be deposited into the buffer\",\"minIssuedShares\":\"Minimum amount of shares to receive from the buffer, expressed in underlying token native decimals\",\"sharesOwner\":\"Address that will own the deposited liquidity. Only this address will be able to remove liquidity from the buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"issuedShares\":\"the amount of tokens sharesOwner has in the buffer, expressed in underlying token amounts. (it is the BPT of an internal ERC4626 buffer). It is expressed in underlying token native decimals.\"}},\"isVaultPaused()\":{\"details\":\"If the Vault is paused, all non-Recovery Mode state-changing operations on pools will revert. Note that ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they would likely be paused and unpaused together). Call `areBuffersPaused` to check the pause state of the buffers.\",\"returns\":{\"vaultPaused\":\"True if the Vault is paused\"}},\"pausePool(address)\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during pool factory deployment.\",\"params\":{\"pool\":\"The pool being paused\"}},\"pauseVault()\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during deployment. Note that ERC4626 buffer operations have an independent pause mechanism, which is not affected by pausing the Vault. Custom routers could still wrap/unwrap using buffers while the Vault is paused, unless buffers are also paused (with `pauseVaultBuffers`).\"},\"pauseVaultBuffers()\":{\"details\":\"When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. Currently it's not possible to pause vault buffers individually. This is a permissioned call, and is reversible (see `unpauseVaultBuffers`). Note that the Vault has a separate and independent pausing mechanism. It is possible to pause the Vault (i.e. pool operations), without affecting buffers, and vice versa.\"},\"removeLiquidityFromBuffer(address,uint256,uint256,uint256)\":{\"details\":\"Only proportional exits are supported, and the sender has to be the owner of the shares. This function unlocks the Vault just for this operation; it does not work with a Router as an entrypoint. Pre-conditions: - The buffer needs to be initialized. - sharesOwner is the original msg.sender, it needs to be checked in the Router. That's why   this call is authenticated; only routers approved by the DAO can remove the liquidity of a buffer. - The buffer needs to have some liquidity and have its asset registered in `_bufferAssets` storage.\",\"params\":{\"minAmountUnderlyingOutRaw\":\"Minimum amount of underlying tokens to receive from the buffer. It is expressed in underlying token native decimals\",\"minAmountWrappedOutRaw\":\"Minimum amount of wrapped tokens to receive from the buffer. It is expressed in wrapped token native decimals\",\"sharesToRemove\":\"Amount of shares to remove from the buffer. Cannot be greater than sharesOwner's total shares. It is expressed in underlying token native decimals\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"removedUnderlyingBalanceRaw\":\"Amount of underlying tokens returned to the user\",\"removedWrappedBalanceRaw\":\"Amount of wrapped tokens returned to the user\"}},\"setAuthorizer(address)\":{\"details\":\"This is a permissioned call. Emits an `AuthorizerChanged` event.\",\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"setProtocolFeeController(address)\":{\"details\":\"This is a permissioned call. Emits a `ProtocolFeeControllerChanged` event.\",\"params\":{\"newProtocolFeeController\":\"The address of the new Protocol Fee Controller\"}},\"setStaticSwapFeePercentage(address,uint256)\":{\"details\":\"This is a permissioned function, disabled if the pool is paused. The swap fee percentage must be within the bounds specified by the pool's implementation of `ISwapFeePercentageBounds`. Emits the SwapFeePercentageChanged event.\",\"params\":{\"pool\":\"The address of the pool for which the static swap fee will be changed\",\"swapFeePercentage\":\"The new swap fee percentage to apply to the pool\"}},\"unpausePool(address)\":{\"details\":\"This is a permissioned function that will only work on a paused Pool within the Buffer Period set during deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\",\"params\":{\"pool\":\"The pool being unpaused\"}},\"unpauseVault()\":{\"details\":\"This is a permissioned function that will only work on a paused Vault within the Buffer Period set during deployment. Note that the Vault will automatically unpause after the Buffer Period expires. As noted above, ERC4626 buffers and Vault operations on pools are independent. Unpausing the Vault does not reverse `pauseVaultBuffers`. If buffers were also paused, they will remain in that state until explicitly unpaused.\"},\"unpauseVaultBuffers()\":{\"details\":\"When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. As noted above, ERC4626 buffers and Vault operations on pools are independent. Unpausing buffers does not reverse `pauseVault`. If the Vault was also paused, it will remain in that state until explicitly unpaused. This is a permissioned call.\"},\"updateAggregateSwapFeePercentage(address,uint256)\":{\"details\":\"Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol). Emits an `AggregateSwapFeePercentageChanged` event.\",\"params\":{\"newAggregateSwapFeePercentage\":\"The new aggregate swap fee percentage\",\"pool\":\"The pool whose swap fee percentage will be updated\"}},\"updateAggregateYieldFeePercentage(address,uint256)\":{\"details\":\"Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol). Emits an `AggregateYieldFeePercentageChanged` event.\",\"params\":{\"newAggregateYieldFeePercentage\":\"The new aggregate yield fee percentage\",\"pool\":\"The pool whose yield fee percentage will be updated\"}},\"vault()\":{\"details\":\"The main Vault contains the entrypoint and main liquidity operation implementations.\",\"returns\":{\"_0\":\"vault The address of the main Vault\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidityToBuffer(address,uint256,uint256,uint256,address)\":{\"notice\":\"Adds liquidity to an internal ERC4626 buffer in the Vault, proportionally.\"},\"areBuffersPaused()\":{\"notice\":\"Indicates whether the Vault buffers are paused.\"},\"collectAggregateFees(address)\":{\"notice\":\"Collects accumulated aggregate swap and yield fees for the specified pool.\"},\"disableQuery()\":{\"notice\":\"Disables query functionality on the Vault. Can only be called by governance.\"},\"disableQueryPermanently()\":{\"notice\":\"Disables query functionality permanently on the Vault. Can only be called by governance.\"},\"disableRecoveryMode(address)\":{\"notice\":\"Disable recovery mode for a pool.\"},\"enableQuery()\":{\"notice\":\"Enables query functionality on the Vault. Can only be called by governance.\"},\"enableRecoveryMode(address)\":{\"notice\":\"Enable recovery mode for a pool.\"},\"getBufferAsset(address)\":{\"notice\":\"Returns the asset registered for a given wrapped token.\"},\"getBufferBalance(address)\":{\"notice\":\"Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\"},\"getBufferMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\"},\"getBufferOwnerShares(address,address)\":{\"notice\":\"Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets in the buffer.\"},\"getBufferPeriodDuration()\":{\"notice\":\"Returns the Vault's buffer period duration.\"},\"getBufferPeriodEndTime()\":{\"notice\":\"Returns the Vault's buffer period end time.\"},\"getBufferTotalShares(address)\":{\"notice\":\"Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\"},\"getMaximumPoolTokens()\":{\"notice\":\"Get the maximum number of tokens in a pool.\"},\"getMinimumPoolTokens()\":{\"notice\":\"Get the minimum number of tokens in a pool.\"},\"getMinimumTradeAmount()\":{\"notice\":\"Get the minimum trade amount in a pool operation.\"},\"getMinimumWrapAmount()\":{\"notice\":\"Get the minimum wrap amount in a buffer operation.\"},\"getPauseWindowEndTime()\":{\"notice\":\"Returns the Vault's pause window end time.\"},\"getPoolMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of pool tokens (BPT) for an initialized pool.\"},\"getVaultPausedState()\":{\"notice\":\"Returns the paused status, and end times of the Vault's pause window and buffer period.\"},\"initializeBuffer(address,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes buffer for the given wrapped token.\"},\"isVaultPaused()\":{\"notice\":\"Indicates whether the Vault is paused.\"},\"pausePool(address)\":{\"notice\":\"Pause the Pool: an emergency action which disables all pool functions.\"},\"pauseVault()\":{\"notice\":\"Pause the Vault: an emergency action which disables all operational state-changing functions on pools.\"},\"pauseVaultBuffers()\":{\"notice\":\"Pauses native vault buffers globally.\"},\"removeLiquidityFromBuffer(address,uint256,uint256,uint256)\":{\"notice\":\"Removes liquidity from an internal ERC4626 buffer in the Vault.\"},\"setAuthorizer(address)\":{\"notice\":\"Sets a new Authorizer for the Vault.\"},\"setProtocolFeeController(address)\":{\"notice\":\"Sets a new Protocol Fee Controller for the Vault.\"},\"setStaticSwapFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new static swap fee percentage to the specified pool.\"},\"unpausePool(address)\":{\"notice\":\"Reverse a `pause` operation, and restore the Pool to normal functionality.\"},\"unpauseVault()\":{\"notice\":\"Reverse a `pause` operation, and restore Vault pool operations to normal functionality.\"},\"unpauseVaultBuffers()\":{\"notice\":\"Unpauses native vault buffers globally.\"},\"updateAggregateSwapFeePercentage(address,uint256)\":{\"notice\":\"Update an aggregate swap fee percentage.\"},\"updateAggregateYieldFeePercentage(address,uint256)\":{\"notice\":\"Update an aggregate yield fee percentage.\"},\"vault()\":{\"notice\":\"Returns the main Vault address.\"}},\"notice\":\"Interface for functions defined on the `VaultAdmin` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":\"IVaultAdmin\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0x743734d3d3503d705f0a778c4b0dd61fdb067e89a07481ddbead0654e6808318\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6198f27b2d01f346fdd3d1302e9a6ddd543d2f06afd675d84919c2242bd26d8d\",\"dweb:/ipfs/QmYntQih5MwxxdGnVu2BPVLeqFuJEH761cByAesjwE6JKT\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol":{"IVaultErrors":{"abi":[{"inputs":[],"name":"AfterAddLiquidityHookFailed","type":"error"},{"inputs":[],"name":"AfterInitializeHookFailed","type":"error"},{"inputs":[],"name":"AfterRemoveLiquidityHookFailed","type":"error"},{"inputs":[],"name":"AfterSwapHookFailed","type":"error"},{"inputs":[],"name":"AmountGivenZero","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"AmountInAboveMax","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"AmountOutBelowMin","type":"error"},{"inputs":[],"name":"BalanceNotSettled","type":"error"},{"inputs":[],"name":"BeforeAddLiquidityHookFailed","type":"error"},{"inputs":[],"name":"BeforeInitializeHookFailed","type":"error"},{"inputs":[],"name":"BeforeRemoveLiquidityHookFailed","type":"error"},{"inputs":[],"name":"BeforeSwapHookFailed","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"BptAmountInAboveMax","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"BptAmountOutBelowMin","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"BufferAlreadyInitialized","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"BufferNotInitialized","type":"error"},{"inputs":[],"name":"BufferSharesInvalidOwner","type":"error"},{"inputs":[],"name":"BufferSharesInvalidReceiver","type":"error"},{"inputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"}],"name":"BufferTotalSupplyTooLow","type":"error"},{"inputs":[],"name":"CannotReceiveEth","type":"error"},{"inputs":[],"name":"CannotSwapSameToken","type":"error"},{"inputs":[],"name":"DoesNotSupportAddLiquidityCustom","type":"error"},{"inputs":[],"name":"DoesNotSupportDonation","type":"error"},{"inputs":[],"name":"DoesNotSupportRemoveLiquidityCustom","type":"error"},{"inputs":[],"name":"DoesNotSupportUnbalancedLiquidity","type":"error"},{"inputs":[],"name":"DynamicSwapFeeHookFailed","type":"error"},{"inputs":[],"name":"FeePrecisionTooHigh","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"HookAdjustedAmountInAboveMax","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"HookAdjustedAmountOutBelowMin","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"HookAdjustedSwapLimit","type":"error"},{"inputs":[{"internalType":"address","name":"poolHooksContract","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"poolFactory","type":"address"}],"name":"HookRegistrationFailed","type":"error"},{"inputs":[],"name":"InvalidAddLiquidityKind","type":"error"},{"inputs":[],"name":"InvalidRemoveLiquidityKind","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[],"name":"InvalidTokenConfiguration","type":"error"},{"inputs":[],"name":"InvalidTokenDecimals","type":"error"},{"inputs":[],"name":"InvalidTokenType","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"InvalidUnderlyingToken","type":"error"},{"inputs":[{"internalType":"uint256","name":"issuedShares","type":"uint256"},{"internalType":"uint256","name":"minIssuedShares","type":"uint256"}],"name":"IssuedSharesBelowMin","type":"error"},{"inputs":[],"name":"MaxTokens","type":"error"},{"inputs":[],"name":"MinTokens","type":"error"},{"inputs":[],"name":"NotEnoughBufferShares","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"expectedUnderlyingAmount","type":"uint256"},{"internalType":"uint256","name":"actualUnderlyingAmount","type":"uint256"}],"name":"NotEnoughUnderlying","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"expectedWrappedAmount","type":"uint256"},{"internalType":"uint256","name":"actualWrappedAmount","type":"uint256"}],"name":"NotEnoughWrapped","type":"error"},{"inputs":[],"name":"NotVaultDelegateCall","type":"error"},{"inputs":[],"name":"PauseBufferPeriodDurationTooLarge","type":"error"},{"inputs":[],"name":"PercentageAboveMax","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyInitialized","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolInRecoveryMode","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotInRecoveryMode","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotInitialized","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotPaused","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolPauseWindowExpired","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolPaused","type":"error"},{"inputs":[],"name":"ProtocolFeesExceedTotalCollected","type":"error"},{"inputs":[],"name":"QueriesDisabled","type":"error"},{"inputs":[],"name":"QueriesDisabledPermanently","type":"error"},{"inputs":[],"name":"QuoteResultSpoofed","type":"error"},{"inputs":[],"name":"RouterNotTrusted","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderIsNotVault","type":"error"},{"inputs":[],"name":"SwapFeePercentageTooHigh","type":"error"},{"inputs":[],"name":"SwapFeePercentageTooLow","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"SwapLimit","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TokenAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TokenNotRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"expectedToken","type":"address"},{"internalType":"address","name":"actualToken","type":"address"}],"name":"TokensMismatch","type":"error"},{"inputs":[],"name":"TradeAmountTooSmall","type":"error"},{"inputs":[],"name":"VaultBuffersArePaused","type":"error"},{"inputs":[],"name":"VaultIsNotUnlocked","type":"error"},{"inputs":[],"name":"VaultNotPaused","type":"error"},{"inputs":[],"name":"VaultPauseWindowDurationTooLarge","type":"error"},{"inputs":[],"name":"VaultPauseWindowExpired","type":"error"},{"inputs":[],"name":"VaultPaused","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"WrapAmountTooSmall","type":"error"},{"inputs":[],"name":"WrongProtocolFeeControllerDeployment","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"underlyingToken","type":"address"}],"name":"WrongUnderlyingToken","type":"error"},{"inputs":[],"name":"WrongVaultAdminDeployment","type":"error"},{"inputs":[],"name":"WrongVaultExtensionDeployment","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AfterAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountGivenZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"AmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"AmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"BptAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"BptAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"BufferAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"BufferNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BufferSharesInvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BufferSharesInvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"BufferTotalSupplyTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReceiveEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSwapSameToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportAddLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportDonation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportRemoveLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportUnbalancedLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DynamicSwapFeeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeePrecisionTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedSwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolHooksContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"HookRegistrationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRemoveLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"InvalidUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIssuedShares\",\"type\":\"uint256\"}],\"name\":\"IssuedSharesBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBufferShares\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedUnderlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualUnderlyingAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughUnderlying\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedWrappedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualWrappedAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughWrapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaultDelegateCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PauseBufferPeriodDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PercentageAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeesExceedTotalCollected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabledPermanently\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteResultSpoofed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterNotTrusted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualToken\",\"type\":\"address\"}],\"name\":\"TokensMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradeAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultBuffersArePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultIsNotUnlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"WrapAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongProtocolFeeControllerDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"WrongUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultAdminDeployment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultExtensionDeployment\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"AmountInAboveMax(address,uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total token amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\",\"tokenIn\":\"The incoming token\"}}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\",\"tokenOut\":\"The outgoing token\"}}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total BPT amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\"}}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\"}}],\"BufferAlreadyInitialized(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"BufferNotInitialized(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"BufferTotalSupplyTooLow(uint256)\":[{\"params\":{\"totalSupply\":\"The total supply value that was below the minimum\"}}],\"FeePrecisionTooHigh()\":[{\"details\":\"Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%). Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between the aggregate fee calculated here and that stored in the Vault.\"}],\"HookAdjustedAmountInAboveMax(address,uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total token amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\",\"tokenIn\":\"The incoming token\"}}],\"HookAdjustedAmountOutBelowMin(address,uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\",\"tokenOut\":\"The outgoing token\"}}],\"HookAdjustedSwapLimit(uint256,uint256)\":[{\"params\":{\"amount\":\"The total amount in or out\",\"limit\":\"The amount of the limit that has been exceeded\"}}],\"HookRegistrationFailed(address,address,address)\":[{\"params\":{\"pool\":\"Address of the rejected pool\",\"poolFactory\":\"Address of the pool factory\",\"poolHooksContract\":\"Address of the hook contract that rejected the pool registration\"}}],\"InvalidUnderlyingToken(address)\":[{\"details\":\"This should never happen, but a malicious wrapper contract might do this (e.g., in an attempt to re-initialize the buffer).\",\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"IssuedSharesBelowMin(uint256,uint256)\":[{\"details\":\"Shares issued during initialization are below the requested amount.\"}],\"NotEnoughUnderlying(address,uint256,uint256)\":[{\"details\":\"A wrap/unwrap operation consumed more or returned less underlying tokens than it should.\"}],\"NotEnoughWrapped(address,uint256,uint256)\":[{\"details\":\"A wrap/unwrap operation consumed more or returned less wrapped tokens than it should.\"}],\"NotVaultDelegateCall()\":[{\"details\":\"It can only be called by the Vault via delegatecall.\"}],\"PoolAlreadyInitialized(address)\":[{\"params\":{\"pool\":\"The already initialized pool\"}}],\"PoolAlreadyRegistered(address)\":[{\"params\":{\"pool\":\"The already registered pool\"}}],\"PoolInRecoveryMode(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInRecoveryMode(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInitialized(address)\":[{\"params\":{\"pool\":\"The uninitialized pool\"}}],\"PoolNotPaused(address)\":[{\"params\":{\"pool\":\"The unpaused pool\"}}],\"PoolNotRegistered(address)\":[{\"params\":{\"pool\":\"The unregistered pool\"}}],\"PoolPauseWindowExpired(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolPaused(address)\":[{\"params\":{\"pool\":\"The paused pool\"}}],\"ProtocolFeesExceedTotalCollected()\":[{\"details\":\"This occurs when the sum of the parts (aggregate swap or yield fee) is greater than the whole (total swap or yield fee). Also validated when the protocol fee controller updates aggregate fee percentages in the Vault.\"}],\"SenderIsNotVault(address)\":[{\"params\":{\"sender\":\"The account attempting to call a permissioned function\"}}],\"SwapFeePercentageTooHigh()\":[{\"details\":\"The Vault itself does not impose a universal minimum. Rather, it validates against the range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error if it is above the maximum value returned by the pool. Pools with dynamic fees do not check these limits.\"}],\"SwapFeePercentageTooLow()\":[{\"details\":\"The Vault itself does not impose a universal minimum. Rather, it validates against the range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error if it is below the minimum value returned by the pool. Pools with dynamic fees do not check these limits.\"}],\"SwapLimit(uint256,uint256)\":[{\"params\":{\"amount\":\"The total amount in or out\",\"limit\":\"The amount of the limit that has been exceeded\"}}],\"TokenAlreadyRegistered(address)\":[{\"params\":{\"token\":\"The duplicate token\"}}],\"TokenNotRegistered(address)\":[{\"params\":{\"token\":\"The unregistered token\"}}],\"TokensMismatch(address,address,address)\":[{\"params\":{\"actualToken\":\"The actual token found at that index\",\"expectedToken\":\"The correct token at a given index in the pool\",\"pool\":\"Address of the pool\"}}],\"WrapAmountTooSmall(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"WrongUnderlyingToken(address,address)\":[{\"details\":\"This should never happen, but a malicious wrapper contract might not return the correct address. Legitimate wrapper contracts should make the asset a constant or immutable value.\",\"params\":{\"underlyingToken\":\"The underlying token returned by `asset`\",\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"AfterAddLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert.\"}],\"AfterInitializeHookFailed()\":[{\"notice\":\"The pool has returned false to the afterInitialize hook, indicating the transaction should revert.\"}],\"AfterRemoveLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert.\"}],\"AfterSwapHookFailed()\":[{\"notice\":\"The pool has returned false to the afterSwap hook, indicating the transaction should revert.\"}],\"AmountGivenZero()\":[{\"notice\":\"The user tried to swap zero tokens.\"}],\"AmountInAboveMax(address,uint256,uint256)\":[{\"notice\":\"A required amountIn exceeds the maximum limit specified for the operation.\"}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"notice\":\"The actual amount out is below the minimum limit specified for the operation.\"}],\"BalanceNotSettled()\":[{\"notice\":\"A transient accounting operation completed with outstanding token deltas.\"}],\"BeforeAddLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert.\"}],\"BeforeInitializeHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeInitialize hook, indicating the transaction should revert.\"}],\"BeforeRemoveLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert.\"}],\"BeforeSwapHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"notice\":\"The required BPT amount in exceeds the maximum limit specified for the operation.\"}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"notice\":\"The BPT amount received from adding liquidity is below the minimum specified for the operation.\"}],\"BufferAlreadyInitialized(address)\":[{\"notice\":\"The buffer for the given wrapped token was already initialized.\"}],\"BufferNotInitialized(address)\":[{\"notice\":\"The buffer for the given wrapped token was not initialized.\"}],\"BufferSharesInvalidOwner()\":[{\"notice\":\"Buffer shares were burned from the zero address.\"}],\"BufferSharesInvalidReceiver()\":[{\"notice\":\"Buffer shares were minted to the zero address.\"}],\"BufferTotalSupplyTooLow(uint256)\":[{\"notice\":\"The total supply of a buffer can't be lower than the absolute minimum.\"}],\"CannotReceiveEth()\":[{\"notice\":\"The contract should not receive ETH.\"}],\"CannotSwapSameToken()\":[{\"notice\":\"The user attempted to swap a token for itself.\"}],\"DoesNotSupportAddLiquidityCustom()\":[{\"notice\":\"Pool does not support adding liquidity with a customized input.\"}],\"DoesNotSupportDonation()\":[{\"notice\":\"Pool does not support adding liquidity through donation.\"}],\"DoesNotSupportRemoveLiquidityCustom()\":[{\"notice\":\"Pool does not support removing liquidity with a customized input.\"}],\"DoesNotSupportUnbalancedLiquidity()\":[{\"notice\":\"Pool does not support adding / removing liquidity with an unbalanced input.\"}],\"DynamicSwapFeeHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"FeePrecisionTooHigh()\":[{\"notice\":\"Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\"}],\"HookAdjustedAmountInAboveMax(address,uint256,uint256)\":[{\"notice\":\"A hook adjusted amountIn exceeds the maximum limit specified for the operation.\"}],\"HookAdjustedAmountOutBelowMin(address,uint256,uint256)\":[{\"notice\":\"The hook adjusted amount out is below the minimum limit specified for the operation.\"}],\"HookAdjustedSwapLimit(uint256,uint256)\":[{\"notice\":\"A hook adjusted amount in or out has exceeded the limit specified in the swap request.\"}],\"HookRegistrationFailed(address,address,address)\":[{\"notice\":\"A hook contract rejected a pool on registration.\"}],\"InvalidAddLiquidityKind()\":[{\"notice\":\"Add liquidity kind not supported.\"}],\"InvalidRemoveLiquidityKind()\":[{\"notice\":\"Remove liquidity kind not supported.\"}],\"InvalidToken()\":[{\"notice\":\"Invalid tokens (e.g., zero) cannot be registered.\"}],\"InvalidTokenConfiguration()\":[{\"notice\":\"The data in a TokenConfig struct is inconsistent or unsupported.\"}],\"InvalidTokenDecimals()\":[{\"notice\":\"Tokens with more than 18 decimals are not supported.\"}],\"InvalidTokenType()\":[{\"notice\":\"The token type given in a TokenConfig during pool registration is invalid.\"}],\"InvalidUnderlyingToken(address)\":[{\"notice\":\"A wrapped token reported the zero address as its underlying token asset.\"}],\"MaxTokens()\":[{\"notice\":\"The token count is above the maximum allowed.\"}],\"MinTokens()\":[{\"notice\":\"The token count is below the minimum allowed.\"}],\"NotEnoughBufferShares()\":[{\"notice\":\"The user is trying to remove more than their allocated shares from the buffer.\"}],\"NotVaultDelegateCall()\":[{\"notice\":\"The `VaultExtension` contract was called by an account directly.\"}],\"PauseBufferPeriodDurationTooLarge()\":[{\"notice\":\"The caller specified a buffer period longer than the maximum.\"}],\"PercentageAboveMax()\":[{\"notice\":\"A given percentage is above the maximum (usually a value close to FixedPoint.ONE, or 1e18 wei).\"}],\"PoolAlreadyInitialized(address)\":[{\"notice\":\"A pool has already been initialized. `initialize` may only be called once.\"}],\"PoolAlreadyRegistered(address)\":[{\"notice\":\"A pool has already been registered. `registerPool` may only be called once.\"}],\"PoolInRecoveryMode(address)\":[{\"notice\":\"Cannot enable recovery mode when already enabled.\"}],\"PoolNotInRecoveryMode(address)\":[{\"notice\":\"Cannot disable recovery mode when not enabled.\"}],\"PoolNotInitialized(address)\":[{\"notice\":\"A referenced pool has not been initialized.\"}],\"PoolNotPaused(address)\":[{\"notice\":\"Governance tried to unpause the Pool when it was not paused.\"}],\"PoolNotRegistered(address)\":[{\"notice\":\"A pool has not been registered.\"}],\"PoolPauseWindowExpired(address)\":[{\"notice\":\"Governance tried to pause a Pool after the pause period expired.\"}],\"PoolPaused(address)\":[{\"notice\":\"A user tried to perform an operation involving a paused Pool.\"}],\"ProtocolFeesExceedTotalCollected()\":[{\"notice\":\"Error raised when there is an overflow in the fee calculation.\"}],\"QueriesDisabled()\":[{\"notice\":\"A user tried to execute a query operation when they were disabled.\"}],\"QueriesDisabledPermanently()\":[{\"notice\":\"An admin tried to re-enable queries, but they were disabled permanently.\"}],\"QuoteResultSpoofed()\":[{\"notice\":\"Quote reverted with a reserved error code.\"}],\"RouterNotTrusted()\":[{\"notice\":\"An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance).\"}],\"SenderIsNotVault(address)\":[{\"notice\":\"Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\"}],\"SwapFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the swap fee percentage is greater than the maximum allowed value.\"}],\"SwapFeePercentageTooLow()\":[{\"notice\":\"Error raised when the swap fee percentage is less than the minimum allowed value.\"}],\"SwapLimit(uint256,uint256)\":[{\"notice\":\"An amount in or out has exceeded the limit specified in the swap request.\"}],\"TokenAlreadyRegistered(address)\":[{\"notice\":\"A token was already registered (i.e., it is a duplicate in the pool).\"}],\"TokenNotRegistered(address)\":[{\"notice\":\"The user attempted to operate with a token that is not in the pool.\"}],\"TokensMismatch(address,address,address)\":[{\"notice\":\"The token list passed into an operation does not match the pool tokens in the pool.\"}],\"TradeAmountTooSmall()\":[{\"notice\":\"The amount given or calculated for an operation is below the minimum limit.\"}],\"VaultBuffersArePaused()\":[{\"notice\":\"Buffer operation attempted while vault buffers are paused.\"}],\"VaultIsNotUnlocked()\":[{\"notice\":\"A user called a Vault function (swap, add/remove liquidity) outside the lock context.\"}],\"VaultNotPaused()\":[{\"notice\":\"Governance tried to unpause the Vault when it was not paused.\"}],\"VaultPauseWindowDurationTooLarge()\":[{\"notice\":\"The caller specified a pause window period longer than the maximum.\"}],\"VaultPauseWindowExpired()\":[{\"notice\":\"Governance tried to pause the Vault after the pause period expired.\"}],\"VaultPaused()\":[{\"notice\":\"A user tried to perform an operation while the Vault was paused.\"}],\"WrapAmountTooSmall(address)\":[{\"notice\":\"The amount given to wrap/unwrap was too small, which can introduce rounding issues.\"}],\"WrongProtocolFeeControllerDeployment()\":[{\"notice\":\"The `ProtocolFeeController` contract was configured with an incorrect Vault address.\"}],\"WrongUnderlyingToken(address,address)\":[{\"notice\":\"The wrapped token asset does not match the underlying token.\"}],\"WrongVaultAdminDeployment()\":[{\"notice\":\"The `VaultAdmin` contract was configured with an incorrect Vault address.\"}],\"WrongVaultExtensionDeployment()\":[{\"notice\":\"The `VaultExtension` contract was configured with an incorrect Vault address.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Errors are declared inside an interface (namespace) to improve DX with Typechain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":\"IVaultErrors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol":{"IVaultEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"}],"name":"AggregateSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}],"name":"AggregateYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"AuthorizerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnedShares","type":"uint256"}],"name":"BufferSharesBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"issuedShares","type":"uint256"}],"name":"BufferSharesMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":true,"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"amountsAddedRaw","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"swapFeeAmountsRaw","type":"uint256[]"}],"name":"LiquidityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWrapped","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"LiquidityAddedToBuffer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":true,"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"amountsRemovedRaw","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"swapFeeAmountsRaw","type":"uint256[]"}],"name":"LiquidityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWrapped","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"LiquidityRemovedFromBuffer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"}],"name":"PoolInitialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"PoolPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"bool","name":"recoveryMode","type":"bool"}],"name":"PoolRecoveryModeStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"factory","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"indexed":false,"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"indexed":false,"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"},{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"indexed":false,"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"indexed":false,"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"PoolRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IProtocolFeeController","name":"newProtocolFeeController","type":"address"}],"name":"ProtocolFeeControllerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"SwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnedShares","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"withdrawnUnderlying","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"Unwrap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"bytes32","name":"eventKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"eventData","type":"bytes"}],"name":"VaultAuxiliary","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"VaultBuffersPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"VaultPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"VaultQueriesDisabled","type":"event"},{"anonymous":false,"inputs":[],"name":"VaultQueriesEnabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"depositedUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"mintedShares","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"Wrap","type":"event"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"AggregateSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"AggregateYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"}],\"name\":\"BufferSharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"}],\"name\":\"BufferSharesMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsAddedRaw\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmountsRaw\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"LiquidityAddedToBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsRemovedRaw\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmountsRaw\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"LiquidityRemovedFromBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PoolPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"recoveryMode\",\"type\":\"bool\"}],\"name\":\"PoolRecoveryModeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IProtocolFeeController\",\"name\":\"newProtocolFeeController\",\"type\":\"address\"}],\"name\":\"ProtocolFeeControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"Unwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"eventKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"VaultAuxiliary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultBuffersPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultQueriesDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultQueriesEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"Wrap\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Events are declared inside an interface (namespace) to improve DX with Typechain.\",\"events\":{\"AggregateSwapFeePercentageChanged(address,uint256)\":{\"details\":\"The `ProtocolFeeController` will emit an event with the underlying change.\",\"params\":{\"aggregateSwapFeePercentage\":\"The new aggregate swap fee percentage\",\"pool\":\"The pool whose aggregate swap fee percentage changed\"}},\"AggregateYieldFeePercentageChanged(address,uint256)\":{\"details\":\"The `ProtocolFeeController` will emit an event with the underlying change.\",\"params\":{\"aggregateYieldFeePercentage\":\"The new aggregate yield fee percentage\",\"pool\":\"The pool whose aggregate yield fee percentage changed\"}},\"AuthorizerChanged(address)\":{\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"BufferSharesBurned(address,address,uint256)\":{\"details\":\"The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares` retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the \\\"totalSupply\\\" of a buffer.\",\"params\":{\"burnedShares\":\"The amount of \\\"internal BPT\\\" shares burned\",\"from\":\"The owner of the burned shares\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"BufferSharesMinted(address,address,uint256)\":{\"details\":\"The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares` retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the \\\"totalSupply\\\" of a buffer.\",\"params\":{\"issuedShares\":\"The amount of \\\"internal BPT\\\" shares created\",\"to\":\"The owner of the minted shares\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"LiquidityAdded(address,address,uint8,uint256,uint256[],uint256[])\":{\"params\":{\"amountsAddedRaw\":\"The amount of each token that was added, sorted in token registration order\",\"kind\":\"The add liquidity operation type (e.g., proportional, custom)\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool with liquidity added\",\"swapFeeAmountsRaw\":\"The total swap fees charged, sorted in token registration order\",\"totalSupply\":\"The total supply of the pool after the operation\"}},\"LiquidityAddedToBuffer(address,uint256,uint256,bytes32)\":{\"details\":\"The underlying token can be derived from the wrapped token, so it's not included here.\",\"params\":{\"amountUnderlying\":\"The amount of the underlying token that was deposited\",\"amountWrapped\":\"The amount of the wrapped token that was deposited\",\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"LiquidityRemoved(address,address,uint8,uint256,uint256[],uint256[])\":{\"params\":{\"amountsRemovedRaw\":\"The amount of each token that was removed, sorted in token registration order\",\"kind\":\"The remove liquidity operation type (e.g., proportional, custom)\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool with liquidity removed\",\"swapFeeAmountsRaw\":\"The total swap fees charged, sorted in token registration order\",\"totalSupply\":\"The total supply of the pool after the operation\"}},\"LiquidityRemovedFromBuffer(address,uint256,uint256,bytes32)\":{\"details\":\"The underlying token can be derived from the wrapped token, so it's not included here.\",\"params\":{\"amountUnderlying\":\"The amount of the underlying token that was withdrawn\",\"amountWrapped\":\"The amount of the wrapped token that was withdrawn\",\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"PoolInitialized(address)\":{\"params\":{\"pool\":\"The pool being initialized\"}},\"PoolPausedStateChanged(address,bool)\":{\"params\":{\"paused\":\"True if the pool was paused\",\"pool\":\"The pool that was just paused or unpaused\"}},\"PoolRecoveryModeStateChanged(address,bool)\":{\"params\":{\"pool\":\"The pool\",\"recoveryMode\":\"True if recovery mode was enabled\"}},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,uint32,(address,address,address),(bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),(bool,bool,bool,bool))\":{\"params\":{\"factory\":\"The factory creating the pool\",\"hooksConfig\":\"Flags indicating which hooks the pool supports and address of hooks contract\",\"liquidityManagement\":\"Supported liquidity management hook flags\",\"pauseWindowEndTime\":\"The pool's pause window end time\",\"pool\":\"The pool being registered\",\"roleAccounts\":\"Addresses the Vault will allow to change certain pool settings\",\"swapFeePercentage\":\"The static swap fee of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"ProtocolFeeControllerChanged(address)\":{\"params\":{\"newProtocolFeeController\":\"The address of the new protocol fee controller\"}},\"Swap(address,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"Number of tokenIn tokens\",\"amountOut\":\"Number of tokenOut tokens\",\"pool\":\"The pool with the tokens being swapped\",\"swapFeeAmount\":\"Swap fee amount paid\",\"swapFeePercentage\":\"Swap fee percentage applied (can differ if dynamic)\",\"tokenIn\":\"The token entering the Vault (balance increases)\",\"tokenOut\":\"The token leaving the Vault (balance decreases)\"}},\"SwapFeePercentageChanged(address,uint256)\":{\"params\":{\"swapFeePercentage\":\"The new swap fee percentage for the pool\"}},\"Unwrap(address,uint256,uint256,bytes32)\":{\"params\":{\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"burnedShares\":\"Number of shares (wrapped tokens) burned\",\"withdrawnUnderlying\":\"Number of underlying tokens withdrawn\",\"wrappedToken\":\"The wrapped token address\"}},\"VaultAuxiliary(address,bytes32,bytes)\":{\"params\":{\"eventData\":\"Encoded event data\",\"eventKey\":\"Event key\",\"pool\":\"Pool address\"}},\"VaultBuffersPausedStateChanged(bool)\":{\"details\":\"If buffers all paused, all buffer operations (i.e., all calls through the Router with `isBuffer` set to true) will revert.\",\"params\":{\"paused\":\"True if the Vault buffers were paused\"}},\"VaultPausedStateChanged(bool)\":{\"params\":{\"paused\":\"True if the Vault was paused\"}},\"Wrap(address,uint256,uint256,bytes32)\":{\"params\":{\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"depositedUnderlying\":\"Number of underlying tokens deposited\",\"mintedShares\":\"Number of shares (wrapped tokens) minted\",\"wrappedToken\":\"The wrapped token address\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AggregateSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"A protocol or pool creator fee has changed, causing an update to the aggregate swap fee.\"},\"AggregateYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"A protocol or pool creator fee has changed, causing an update to the aggregate yield fee.\"},\"AuthorizerChanged(address)\":{\"notice\":\"A new authorizer is set by `setAuthorizer`.\"},\"BufferSharesBurned(address,address,uint256)\":{\"notice\":\"Buffer shares were burned for an ERC4626 buffer corresponding to a given wrapped token.\"},\"BufferSharesMinted(address,address,uint256)\":{\"notice\":\"Buffer shares were minted for an ERC4626 buffer corresponding to a given wrapped token.\"},\"LiquidityAdded(address,address,uint8,uint256,uint256[],uint256[])\":{\"notice\":\"Liquidity has been added to a pool (including initialization).\"},\"LiquidityAddedToBuffer(address,uint256,uint256,bytes32)\":{\"notice\":\"Liquidity was added to an ERC4626 buffer corresponding to the given wrapped token.\"},\"LiquidityRemoved(address,address,uint8,uint256,uint256[],uint256[])\":{\"notice\":\"Liquidity has been removed from a pool.\"},\"LiquidityRemovedFromBuffer(address,uint256,uint256,bytes32)\":{\"notice\":\"Liquidity was removed from an ERC4626 buffer.\"},\"PoolInitialized(address)\":{\"notice\":\"A Pool was initialized by calling `initialize`.\"},\"PoolPausedStateChanged(address,bool)\":{\"notice\":\"A Pool's pause status has changed.\"},\"PoolRecoveryModeStateChanged(address,bool)\":{\"notice\":\"Recovery mode has been enabled or disabled for a pool.\"},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,uint32,(address,address,address),(bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),(bool,bool,bool,bool))\":{\"notice\":\"A Pool was registered by calling `registerPool`.\"},\"ProtocolFeeControllerChanged(address)\":{\"notice\":\"A new protocol fee controller is set by `setProtocolFeeController`.\"},\"Swap(address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"A swap has occurred.\"},\"SwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the swap fee percentage of a pool is updated.\"},\"Unwrap(address,uint256,uint256,bytes32)\":{\"notice\":\"An unwrap operation has occurred.\"},\"VaultAuxiliary(address,bytes32,bytes)\":{\"notice\":\"Pools can use this event to emit event data from the Vault.\"},\"VaultBuffersPausedStateChanged(bool)\":{\"notice\":\"The Vault buffers pause status has changed.\"},\"VaultPausedStateChanged(bool)\":{\"notice\":\"The Vault's pause status has changed.\"},\"VaultQueriesDisabled()\":{\"notice\":\"`disableQuery` has been called on the Vault, disabling query functionality.\"},\"VaultQueriesEnabled()\":{\"notice\":\"`enableQuery` has been called on the Vault, enabling query functionality.\"},\"Wrap(address,uint256,uint256,bytes32)\":{\"notice\":\"A wrap operation has occurred.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":\"IVaultEvents\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0x743734d3d3503d705f0a778c4b0dd61fdb067e89a07481ddbead0654e6808318\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6198f27b2d01f346fdd3d1302e9a6ddd543d2f06afd675d84919c2242bd26d8d\",\"dweb:/ipfs/QmYntQih5MwxxdGnVu2BPVLeqFuJEH761cByAesjwE6JKT\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol":{"IVaultExtension":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"tokenAllowance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"tokenBalance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"swapParams","type":"tuple"}],"name":"computeDynamicSwapFeePercentage","outputs":[{"internalType":"uint256","name":"dynamicSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"eventKey","type":"bytes32"},{"internalType":"bytes","name":"eventData","type":"bytes"}],"name":"emitAuxiliaryEvent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getAddLiquidityCalledFlag","outputs":[{"internalType":"bool","name":"liquidityAdded","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateSwapFeeAmount","outputs":[{"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateYieldFeeAmount","outputs":[{"internalType":"uint256","name":"yieldFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"authorizer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getBptRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getCurrentLiveBalances","outputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getERC4626BufferAsset","outputs":[{"internalType":"address","name":"asset","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getHooksConfig","outputs":[{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonzeroDeltaCount","outputs":[{"internalType":"uint256","name":"nonzeroDeltaCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolConfig","outputs":[{"components":[{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"},{"internalType":"uint40","name":"tokenDecimalDiffs","type":"uint40"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"isPoolRegistered","type":"bool"},{"internalType":"bool","name":"isPoolInitialized","type":"bool"},{"internalType":"bool","name":"isPoolPaused","type":"bool"},{"internalType":"bool","name":"isPoolInRecoveryMode","type":"bool"}],"internalType":"struct PoolConfig","name":"poolConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolData","outputs":[{"components":[{"internalType":"PoolConfigBits","name":"poolConfigBits","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"},{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"}],"internalType":"struct PoolData","name":"poolData","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolPausedState","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"},{"internalType":"uint32","name":"poolPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"poolBufferPeriodEndTime","type":"uint32"},{"internalType":"address","name":"pauseManager","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolRoleAccounts","outputs":[{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenInfo","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"lastBalancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenRates","outputs":[{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeeController","outputs":[{"internalType":"contract IProtocolFeeController","name":"protocolFeeController","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getReservesOf","outputs":[{"internalType":"uint256","name":"reserveAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getStaticSwapFeePercentage","outputs":[{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getTokenDelta","outputs":[{"internalType":"int256","name":"tokenDelta","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultAdmin","outputs":[{"internalType":"address","name":"vaultAdmin","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"initialize","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"isERC4626BufferInitialized","outputs":[{"internalType":"bool","name":"isBufferInitialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInRecoveryMode","outputs":[{"internalType":"bool","name":"inRecoveryMode","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInitialized","outputs":[{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolPaused","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"registered","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabled","outputs":[{"internalType":"bool","name":"queryDisabled","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabledPermanently","outputs":[{"internalType":"bool","name":"queryDisabledPermanently","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isUnlocked","outputs":[{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"quote","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"quoteAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"protocolFeeExempt","type":"bool"},{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"},{"internalType":"address","name":"poolHooksContract","type":"address"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"registerPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"}],"name":"removeLiquidityRecovery","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"tokenTotalSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address,address)":"927da105","approve(address,address,uint256)":"e1f21c67","balanceOf(address,address)":"f7888aec","computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))":"4d472bdd","emitAuxiliaryEvent(bytes32,bytes)":"c8088247","getAddLiquidityCalledFlag(address)":"ace9b89b","getAggregateSwapFeeAmount(address,address)":"85e0b999","getAggregateYieldFeeAmount(address,address)":"00fdfa13","getAuthorizer()":"aaabadc5","getBptRate(address)":"4f037ee7","getCurrentLiveBalances(address)":"535cfd8a","getERC4626BufferAsset(address)":"4afbaf5a","getHooksConfig(address)":"ce8630d4","getNonzeroDeltaCount()":"db817187","getPoolConfig(address)":"f29486a1","getPoolData(address)":"13d21cdf","getPoolPausedState(address)":"15e32046","getPoolRoleAccounts(address)":"e9ddeb26","getPoolTokenInfo(address)":"67e0e076","getPoolTokenRates(address)":"7e361bde","getPoolTokens(address)":"ca4f2803","getProtocolFeeController()":"85f2dbd4","getReservesOf(address)":"96787092","getStaticSwapFeePercentage(address)":"b45090f9","getTokenDelta(address)":"9e825ff5","getVaultAdmin()":"1ba0ae45","initialize(address,address,address[],uint256[],uint256,bytes)":"ba8a2be0","isERC4626BufferInitialized(address)":"6844846b","isPoolInRecoveryMode(address)":"be7d628a","isPoolInitialized(address)":"532cec7c","isPoolPaused(address)":"6c9bc732","isPoolRegistered(address)":"c673bdaf","isQueryDisabled()":"b4aef0ab","isQueryDisabledPermanently()":"13ef8a5d","isUnlocked()":"8380edb7","quote(bytes)":"edfa3568","quoteAndRevert(bytes)":"757d64b3","registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))":"eeec802f","removeLiquidityRecovery(address,address,uint256,uint256[])":"a07d6040","totalSupply(address)":"e4dc2aa4","vault()":"fbfa77cf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"}],\"name\":\"computeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynamicSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"emitAuxiliaryEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAddLiquidityCalledFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"liquidityAdded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateSwapFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateYieldFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"authorizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBptRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getCurrentLiveBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getERC4626BufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getHooksConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonzeroDeltaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonzeroDeltaCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"tokenDecimalDiffs\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPoolRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInRecoveryMode\",\"type\":\"bool\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"poolConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"PoolConfigBits\",\"name\":\"poolConfigBits\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"poolPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"poolBufferPeriodEndTime\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolRoleAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastBalancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeController\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"protocolFeeController\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStaticSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"tokenDelta\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultAdmin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"isERC4626BufferInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBufferInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inRecoveryMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabledPermanently\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabledPermanently\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quoteAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"poolHooksContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"removeLiquidityRecovery\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"`VaultExtension` handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and liquidity operations.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"params\":{\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\",\"token\":\"Address of the token\"},\"returns\":{\"tokenAllowance\":\"Amount of tokens the spender is allowed to spend\"}},\"approve(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to approve\",\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\"},\"returns\":{\"success\":\"True if successful, false otherwise\"}},\"balanceOf(address,address)\":{\"params\":{\"account\":\"Address of the account\",\"token\":\"Address of the token\"},\"returns\":{\"tokenBalance\":\"Token balance of the account\"}},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"details\":\"Reverts if the hook doesn't return the success flag set to `true`.\",\"params\":{\"pool\":\"The pool\",\"swapParams\":\"The swap parameters used to compute the fee\"},\"returns\":{\"dynamicSwapFeePercentage\":\"The dynamic swap fee percentage\"}},\"emitAuxiliaryEvent(bytes32,bytes)\":{\"params\":{\"eventData\":\"Encoded event data\",\"eventKey\":\"Event key\"}},\"getAddLiquidityCalledFlag(address)\":{\"details\":\"Taxing remove liquidity proportional whenever liquidity was added in the same `unlock` call adds an extra layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional is the only standard way to exit a position without fees, and this flag is used to enable fees in that case. It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse than a simple swap for every pool type.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"liquidityAdded\":\"True if liquidity has been added to this pool in the current transaction Note that there is no `sessionId` argument; it always returns the value for the current (i.e., latest) session.\"}},\"getAggregateSwapFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"swapFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAggregateYieldFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"yieldFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAuthorizer()\":{\"details\":\"The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can be changed through a permissioned call.\",\"returns\":{\"authorizer\":\"Address of the authorizer contract\"}},\"getBptRate(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"rate\":\"BPT rate\"}},\"getCurrentLiveBalances(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesLiveScaled18\":\"Token balances after paying yield fees, applying decimal scaling and rates\"}},\"getERC4626BufferAsset(address)\":{\"details\":\"To avoid malicious wrappers (e.g., that might potentially change their asset after deployment), routers should never call `wrapper.asset()` directly, at least without checking it against the asset registered with the Vault on initialization.\",\"params\":{\"wrappedToken\":\"The wrapped token specifying the buffer\"},\"returns\":{\"asset\":\"The underlying asset of the wrapped token\"}},\"getHooksConfig(address)\":{\"details\":\"The `HooksConfig` contains flags indicating which pool hooks are implemented.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"hooksConfig\":\"The hooks configuration as a `HooksConfig` struct\"}},\"getNonzeroDeltaCount()\":{\"returns\":{\"nonzeroDeltaCount\":\"The current value of `_nonzeroDeltaCount`\"}},\"getPoolConfig(address)\":{\"details\":\"The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"poolConfig\":\"The pool configuration as a `PoolConfig` struct\"}},\"getPoolData(address)\":{\"details\":\"This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\",\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"poolData\":\"The `PoolData` result\"}},\"getPoolPausedState(address)\":{\"details\":\"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period. Balancer timestamps are 32 bits.\",\"params\":{\"pool\":\"The pool whose data is requested\"},\"returns\":{\"pauseManager\":\"The pause manager, or the zero address\",\"poolBufferPeriodEndTime\":\"The timestamp after which the Pool unpauses itself (if paused)\",\"poolPauseWindowEndTime\":\"The timestamp of the end of the Pool's pause window\",\"poolPaused\":\"True if the Pool is paused\"}},\"getPoolRoleAccounts(address)\":{\"params\":{\"pool\":\"The address of the pool whose roles are being queried\"},\"returns\":{\"roleAccounts\":\"A struct containing the role accounts for the pool (or 0 if unassigned)\"}},\"getPoolTokenInfo(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesRaw\":\"Current native decimal balances of the pool tokens, sorted in token registration order\",\"lastBalancesLiveScaled18\":\"Last saved live balances, sorted in token registration order\",\"tokenInfo\":\"Token info structs (type, rate provider, yield flag), sorted in token registration order\",\"tokens\":\"The pool tokens, sorted in registration order\"}},\"getPoolTokenRates(address)\":{\"details\":\"This function performs external calls if tokens are yield-bearing. All returned arrays are in token registration order.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"decimalScalingFactors\":\"Conversion factor used to adjust for token decimals for uniform precision in calculations. FP(1) for 18-decimal tokens\",\"tokenRates\":\"18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\"}},\"getPoolTokens(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"tokens\":\"List of tokens in the pool\"}},\"getProtocolFeeController()\":{\"returns\":{\"protocolFeeController\":\"Address of the ProtocolFeeController\"}},\"getReservesOf(address)\":{\"params\":{\"token\":\"The token for which to retrieve the reserve\"},\"returns\":{\"reserveAmount\":\"The amount of reserves for the given token\"}},\"getStaticSwapFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool whose static swap fee percentage is being queried\"},\"returns\":{\"swapFeePercentage\":\"The current static swap fee percentage for the specified pool\"}},\"getTokenDelta(address)\":{\"details\":\"This function allows reading the value from the `_tokenDeltas` mapping.\",\"params\":{\"token\":\"The token for which the delta is being fetched\"},\"returns\":{\"tokenDelta\":\"The delta of the specified token\"}},\"getVaultAdmin()\":{\"details\":\"The VaultAdmin contract mostly implements permissioned functions.\",\"returns\":{\"vaultAdmin\":\"The address of the Vault admin\"}},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Address of the pool to initialize\",\"to\":\"Address that will receive the output BPT\",\"tokens\":\"Tokens used to seed the pool (must match the registered tokens)\",\"userData\":\"Additional (optional) data required for adding initial liquidity\"},\"returns\":{\"bptAmountOut\":\"Output pool token amount\"}},\"isERC4626BufferInitialized(address)\":{\"details\":\"An initialized buffer should have an asset registered in the Vault.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"isBufferInitialized\":\"True if the ERC4626 buffer is initialized\"}},\"isPoolInRecoveryMode(address)\":{\"details\":\"Recovery Mode enables a safe proportional withdrawal path, with no external calls.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"inRecoveryMode\":\"True if the pool is in Recovery Mode, false otherwise\"}},\"isPoolInitialized(address)\":{\"details\":\"An initialized pool can be considered registered as well.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"initialized\":\"True if the pool is initialized, false otherwise\"}},\"isPoolPaused(address)\":{\"details\":\"If a pool is paused, all non-Recovery Mode state-changing operations will revert.\",\"params\":{\"pool\":\"The pool to be checked\"},\"returns\":{\"poolPaused\":\"True if the pool is paused\"}},\"isPoolRegistered(address)\":{\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"registered\":\"True if the pool is registered, false otherwise\"}},\"isQueryDisabled()\":{\"details\":\"If true, queries might either be disabled temporarily or permanently.\",\"returns\":{\"queryDisabled\":\"True if query functionality is reversibly disabled\"}},\"isQueryDisabledPermanently()\":{\"details\":\"This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\",\"returns\":{\"queryDisabledPermanently\":\"True if query functionality is permanently disabled\"}},\"isUnlocked()\":{\"details\":\"The Vault must be unlocked to perform state-changing liquidity operations.\",\"returns\":{\"unlocked\":\"True if the Vault is unlocked, false otherwise\"}},\"quote(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `onlyWhenUnlocked`. `transient` modifier ensuring balances changes within the Vault are settled.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}},\"quoteAndRevert(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `onlyWhenUnlocked`. `transient` modifier ensuring balances changes within the Vault are settled. This call always reverts, returning the result in the revert reason.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"}},\"registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))\":{\"details\":\"A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused pool will automatically unpause. Balancer timestamps are 32 bits. A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to the Vault. If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the authorizer.\",\"params\":{\"liquidityManagement\":\"Liquidity management flags with implemented methods\",\"pauseWindowEndTime\":\"The timestamp after which it is no longer possible to pause the pool\",\"pool\":\"The address of the pool being registered\",\"poolHooksContract\":\"Contract that implements the hooks for the pool\",\"protocolFeeExempt\":\"If true, the pool's initial aggregate fees will be set to 0\",\"roleAccounts\":\"Addresses the Vault will allow to change certain pool settings\",\"swapFeePercentage\":\"The initial static swap fee percentage of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"removeLiquidityRecovery(address,address,uint256,uint256[])\":{\"params\":{\"exactBptAmountIn\":\"Input pool token amount\",\"from\":\"Address of user to burn pool tokens from\",\"minAmountsOut\":\"Minimum amounts of tokens to be received, sorted in token registration order\",\"pool\":\"Address of the pool\"},\"returns\":{\"amountsOut\":\"Actual calculated amounts of output tokens, sorted in token registration order\"}},\"totalSupply(address)\":{\"params\":{\"token\":\"The token address\"},\"returns\":{\"tokenTotalSupply\":\"Total supply of the token\"}},\"vault()\":{\"details\":\"The main Vault contains the entrypoint and main liquidity operation implementations.\",\"returns\":{\"_0\":\"vault The address of the main Vault\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"Gets the allowance of a spender for a given ERC20 token and owner.\"},\"approve(address,address,uint256)\":{\"notice\":\"Approves a spender to spend pool tokens on behalf of sender.\"},\"balanceOf(address,address)\":{\"notice\":\"Gets the balance of an account for a given ERC20 token.\"},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"notice\":\"Query the current dynamic swap fee percentage of a pool, given a set of swap parameters.\"},\"emitAuxiliaryEvent(bytes32,bytes)\":{\"notice\":\"Pools can use this event to emit event data from the Vault.\"},\"getAddLiquidityCalledFlag(address)\":{\"notice\":\"This flag is used to detect and tax \\\"round-trip\\\" interactions (adding and removing liquidity in the same pool).\"},\"getAggregateSwapFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\"},\"getAggregateYieldFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\"},\"getAuthorizer()\":{\"notice\":\"Returns the Authorizer address.\"},\"getBptRate(address)\":{\"notice\":\"The current rate of a pool token (BPT) = invariant / totalSupply.\"},\"getCurrentLiveBalances(address)\":{\"notice\":\"Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in registration order.\"},\"getERC4626BufferAsset(address)\":{\"notice\":\"Gets the registered asset for a given buffer.\"},\"getHooksConfig(address)\":{\"notice\":\"Gets the hooks configuration parameters of a pool.\"},\"getNonzeroDeltaCount()\":{\"notice\":\"Returns the count of non-zero deltas.\"},\"getPoolConfig(address)\":{\"notice\":\"Gets the configuration parameters of a pool.\"},\"getPoolData(address)\":{\"notice\":\"Returns comprehensive pool data for the given pool.\"},\"getPoolPausedState(address)\":{\"notice\":\"Returns the paused status, and end times of the Pool's pause window and buffer period.\"},\"getPoolRoleAccounts(address)\":{\"notice\":\"Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\"},\"getPoolTokenInfo(address)\":{\"notice\":\"Gets the raw data for a pool: tokens, raw balances, scaling factors.\"},\"getPoolTokenRates(address)\":{\"notice\":\"Gets pool token rates.\"},\"getPoolTokens(address)\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"getProtocolFeeController()\":{\"notice\":\"Returns the Protocol Fee Controller address.\"},\"getReservesOf(address)\":{\"notice\":\"Retrieves the reserve (i.e., total Vault balance) of a given token.\"},\"getStaticSwapFeePercentage(address)\":{\"notice\":\"Fetches the static swap fee percentage for a given pool.\"},\"getTokenDelta(address)\":{\"notice\":\"Retrieves the token delta for a specific token.\"},\"getVaultAdmin()\":{\"notice\":\"Returns the VaultAdmin contract address.\"},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"notice\":\"Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\"},\"isERC4626BufferInitialized(address)\":{\"notice\":\"Checks if the wrapped token has an initialized buffer in the Vault.\"},\"isPoolInRecoveryMode(address)\":{\"notice\":\"Checks whether a pool is in Recovery Mode.\"},\"isPoolInitialized(address)\":{\"notice\":\"Checks whether a pool is initialized.\"},\"isPoolPaused(address)\":{\"notice\":\"Indicates whether a pool is paused.\"},\"isPoolRegistered(address)\":{\"notice\":\"Checks whether a pool is registered.\"},\"isQueryDisabled()\":{\"notice\":\"Returns true if queries are disabled on the Vault.\"},\"isQueryDisabledPermanently()\":{\"notice\":\"Returns true if queries are disabled permanently; false if they are enabled.\"},\"isUnlocked()\":{\"notice\":\"Returns whether the Vault is unlocked (i.e., executing an operation).\"},\"quote(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"quoteAndRevert(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))\":{\"notice\":\"Registers a pool, associating it with its factory and the tokens it manages.\"},\"removeLiquidityRecovery(address,address,uint256,uint256[])\":{\"notice\":\"Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out. The request is implemented by the Vault without any interaction with the pool, ensuring that it works the same for all pools, and cannot be disabled by a new pool type.\"},\"totalSupply(address)\":{\"notice\":\"Gets the total supply of a given ERC20 token.\"},\"vault()\":{\"notice\":\"Returns the main Vault address.\"}},\"notice\":\"Interface for functions defined on the `VaultExtension` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":\"IVaultExtension\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0x743734d3d3503d705f0a778c4b0dd61fdb067e89a07481ddbead0654e6808318\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6198f27b2d01f346fdd3d1302e9a6ddd543d2f06afd675d84919c2242bd26d8d\",\"dweb:/ipfs/QmYntQih5MwxxdGnVu2BPVLeqFuJEH761cByAesjwE6JKT\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol":{"IVaultMain":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct AddLiquidityParams","name":"params","type":"tuple"}],"name":"addLiquidity","outputs":[{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"enum WrappingDirection","name":"direction","type":"uint8"},{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"}],"internalType":"struct BufferWrapOrUnwrapParams","name":"params","type":"tuple"}],"name":"erc4626BufferWrapOrUnwrap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getPoolTokenCountAndIndexOfToken","outputs":[{"internalType":"uint256","name":"tokenCount","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultExtension","outputs":[{"internalType":"address","name":"vaultExtension","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct RemoveLiquidityParams","name":"params","type":"tuple"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"sendTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amountHint","type":"uint256"}],"name":"settle","outputs":[{"internalType":"uint256","name":"credit","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct VaultSwapParams","name":"vaultSwapParams","type":"tuple"}],"name":"swap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"unlock","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addLiquidity((address,address,uint256[],uint256,uint8,bytes))":"4af29ec4","erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))":"43583be5","getPoolTokenCountAndIndexOfToken(address,address)":"c9c1661b","getVaultExtension()":"b9a8effa","removeLiquidity((address,address,uint256,uint256[],uint8,bytes))":"21457897","sendTo(address,address,uint256)":"ae639329","settle(address,uint256)":"15afd409","swap((uint8,address,address,address,uint256,uint256,bytes))":"2bfb780c","transfer(address,address,uint256)":"beabacc8","transferFrom(address,address,address,uint256)":"15dacbea","unlock(bytes)":"48c89491"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"enum WrappingDirection\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"}],\"internalType\":\"struct BufferWrapOrUnwrapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"erc4626BufferWrapOrUnwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenCountAndIndexOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultExtension\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountHint\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct VaultSwapParams\",\"name\":\"vaultSwapParams\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These are generally \\\"critical path\\\" functions (swap, add/remove liquidity) that are in the main contract for technical or performance reasons.\",\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"details\":\"Caution should be exercised when adding liquidity because the Vault has the capability to transfer tokens from any user, given that it holds all allowances.\",\"params\":{\"params\":\"Parameters for the add liquidity (see above for struct definition)\"},\"returns\":{\"amountsIn\":\"Actual amounts of input tokens\",\"bptAmountOut\":\"Output pool token amount\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))\":{\"details\":\"All parameters are given in raw token decimal encoding. It requires the buffer to be initialized, and uses the internal wrapped token buffer when it has enough liquidity to avoid external calls.\",\"params\":{\"params\":\"Parameters for the wrap/unwrap operation (see struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"details\":\"Reverts if the pool is not registered, or if the token does not belong to the pool.\",\"params\":{\"pool\":\"Address of the pool\",\"token\":\"Address of the token\"},\"returns\":{\"index\":\"Index corresponding to the given token in the pool's token list\",\"tokenCount\":\"Number of tokens in the pool\"}},\"getVaultExtension()\":{\"details\":\"Function is in the main Vault contract. The VaultExtension handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls.\",\"returns\":{\"vaultExtension\":\"Address of the VaultExtension\"}},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"details\":\"Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user. Untrusted routers require prior approval from the user. This is the only function allowed to call _queryModeBalanceIncrease (and only in a query context).\",\"params\":{\"params\":\"Parameters for the remove liquidity (see above for struct definition)\"},\"returns\":{\"amountsOut\":\"Actual amounts of output tokens\",\"bptAmountIn\":\"Actual amount of BPT burned\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"sendTo(address,address,uint256)\":{\"details\":\"There is no inverse operation for this function. Transfer funds to the Vault and call `settle` to cancel debts.\",\"params\":{\"amount\":\"Amount of tokens to send\",\"to\":\"Recipient address\",\"token\":\"Address of the token\"}},\"settle(address,uint256)\":{\"details\":\"Protects the caller against leftover dust in the Vault for the token being settled. The caller should know in advance how many tokens were paid to the Vault, so it can provide it as a hint to discard any excess in the Vault balance. If the given hint is equal to or higher than the difference in reserves, the difference in reserves is given as credit to the caller. If it's higher, the caller sent fewer tokens than expected, so settlement would fail. If the given hint is lower than the difference in reserves, the hint is given as credit to the caller. In this case, the excess would be absorbed by the Vault (and reflected correctly in the reserves), but would not affect settlement. The credit supplied by the Vault can be calculated as `min(reserveDifference, amountHint)`, where the reserve difference equals current balance of the token minus existing reserves of the token when the function is called.\",\"params\":{\"amountHint\":\"Amount paid as reported by the caller\",\"token\":\"Address of the token\"},\"returns\":{\"credit\":\"Credit received in return of the payment\"}},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"details\":\"All parameters are given in raw token decimal encoding.\",\"params\":{\"vaultSwapParams\":\"Parameters for the swap (see above for struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"transfer(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"owner\":\"Address of the owner\",\"to\":\"Address of the recipient\"},\"returns\":{\"_0\":\"success True if successful, false otherwise\"}},\"transferFrom(address,address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"from\":\"Address of the sender\",\"spender\":\"Address allowed to perform the transfer\",\"to\":\"Address of the recipient\"},\"returns\":{\"success\":\"True if successful, false otherwise\"}},\"unlock(bytes)\":{\"details\":\"Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`, meaning all balances for the caller have to be settled at the end.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"notice\":\"Adds liquidity to a pool.\"},\"erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))\":{\"notice\":\"Wraps/unwraps tokens based on the parameters provided.\"},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"notice\":\"Gets the index of a token in a given pool.\"},\"getVaultExtension()\":{\"notice\":\"Returns the VaultExtension contract address.\"},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"notice\":\"Removes liquidity from a pool.\"},\"sendTo(address,address,uint256)\":{\"notice\":\"Sends tokens to a recipient.\"},\"settle(address,uint256)\":{\"notice\":\"Settles deltas for a token; must be successful for the current lock to be released.\"},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"notice\":\"Swaps tokens based on provided parameters.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers pool token from owner to a recipient.\"},\"transferFrom(address,address,address,uint256)\":{\"notice\":\"Transfers pool token from a sender to a recipient using an allowance.\"},\"unlock(bytes)\":{\"notice\":\"Creates a context for a sequence of operations (i.e., \\\"unlocks\\\" the Vault).\"}},\"notice\":\"Interface for functions defined on the main Vault contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":\"IVaultMain\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol":{"Authentication":{"abi":[{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied to external functions to make them only callable by authorized accounts. Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in multi-contract systems. There are two main uses for it:  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers    unique. The contract's own address is a good option.  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier    shared by the entire family (and no other contract) should be used instead.\"},\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"_0\":\"The computed actionId\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}]},\"kind\":\"user\",\"methods\":{\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"notice\":\"Building block for performing access control on external functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\":\"Authentication\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\":{\"keccak256\":\"0x807237870f3aaa26cd815c5f600c1d0c60861a2f962fcc341d4b80942288ab52\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://90f108409488d0c38147d2ac7b9facd694dbf1001c501136a249091788c22232\",\"dweb:/ipfs/QmRCaCCGcuL4kxBEbrpq6FfENBJk4Zo8CNe8TRusatuYJ6\"]}},\"version\":1}"}},"@balancer-labs/v3-solidity-utils/contracts/helpers/RevertCodec.sol":{"RevertCodec":{"abi":[{"inputs":[],"name":"ErrorSelectorNotFound","type":"error"},{"inputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"name":"Result","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212208683019c0f17e585a20b0fc05084b8273a26fbb5ee6a380f717073becaabfbfa64736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 DUP4 ADD SWAP13 0xF OR 0xE5 DUP6 LOG2 SIGNEXTEND 0xF 0xC0 POP DUP5 0xB8 0x27 GASPRICE 0x26 0xFB 0xB5 0xEE PUSH11 0x380F717073BECAABFBFA64 PUSH20 0x6F6C634300081B00330000000000000000000000 ","sourceMap":"231:2016:17:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea26469706673582212208683019c0f17e585a20b0fc05084b8273a26fbb5ee6a380f717073becaabfbfa64736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 DUP4 ADD SWAP13 0xF OR 0xE5 DUP6 LOG2 SIGNEXTEND 0xF 0xC0 POP DUP5 0xB8 0x27 GASPRICE 0x26 0xFB 0xB5 0xEE PUSH11 0x380F717073BECAABFBFA64 PUSH20 0x6F6C634300081B00330000000000000000000000 ","sourceMap":"231:2016:17:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ErrorSelectorNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"Result\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"Result(bytes)\":[{\"params\":{\"result\":\"The result of the query operation\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"ErrorSelectorNotFound()\":[{\"notice\":\"Handle the \\\"reverted without a reason\\\" case (i.e., no return data).\"}],\"Result(bytes)\":[{\"notice\":\"On success of the primary operation in a `quoteAndRevert`, this error is thrown with the return data.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Support `quoteAndRevert`: a v2-style query which always reverts, and returns the result in the return data.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-solidity-utils/contracts/helpers/RevertCodec.sol\":\"RevertCodec\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-solidity-utils/contracts/helpers/RevertCodec.sol\":{\"keccak256\":\"0xb4ee9e1543d36bdf9eeb4a9d5ab41170723239a1e27a2272f2e31de4765c019b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3b70dd5e4fa496c2c1efb6bd20368587ba3c9c0d0afac9dc3631a29ff2628f99\",\"dweb:/ipfs/QmQigXUkpDuVK5VSX67RABrAC9bashPcHMasgPRNJb4k8Z\"]}},\"version\":1}"}},"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol":{"FixedPoint":{"abi":[{"inputs":[],"name":"ZeroDivision","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220e9cc622b7f35aaf8f3efa30ad767c4a02aedd5ccde9b7738c8491078c2823d0164736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE9 0xCC PUSH3 0x2B7F35 0xAA 0xF8 RETURN 0xEF LOG3 EXP 0xD7 PUSH8 0xC4A02AEDD5CCDE9B PUSH24 0x38C8491078C2823D0164736F6C634300081B003300000000 ","sourceMap":"239:5688:18:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea2646970667358221220e9cc622b7f35aaf8f3efa30ad767c4a02aedd5ccde9b7738c8491078c2823d0164736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE9 0xCC PUSH3 0x2B7F35 0xAA 0xF8 RETURN 0xEF LOG3 EXP 0xD7 PUSH8 0xC4A02AEDD5CCDE9B PUSH24 0x38C8491078C2823D0164736F6C634300081B003300000000 ","sourceMap":"239:5688:18:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ZeroDivision\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"ZeroDivision()\":[{\"notice\":\"Attempted division by zero.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Support 18-decimal fixed point arithmetic. All Vault calculations use this for high and uniform precision.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol\":\"FixedPoint\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol\":{\"keccak256\":\"0x84bcae7004be7e91a88e76a3ac317490bc6845754a12cee88fcab76b1c5de37b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://15f903480fec5ae8042baf458e2246693b0b4a22687e65c2ed3afdf6993bff82\",\"dweb:/ipfs/QmcxsVeSbQ4qYnEZFoeFmiqaoV3rAx1oNhACCZCMZ1E6uf\"]},\"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol\":{\"keccak256\":\"0x70449e2b423b9850e39adddd7301205aa8b6e9e4ae788fd44d0968cac018eb2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce2174a3629b45dca032f9cf53df35dea240626913b8882a9e2da21610b02796\",\"dweb:/ipfs/Qmf8E4DePnZXjqb3V4A38gSobjgRK6VqavqPByuXvJxtBG\"]}},\"version\":1}"}},"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol":{"LogExpMath":{"abi":[{"inputs":[],"name":"BaseOutOfBounds","type":"error"},{"inputs":[],"name":"ExponentOutOfBounds","type":"error"},{"inputs":[],"name":"InvalidExponent","type":"error"},{"inputs":[],"name":"OutOfBounds","type":"error"},{"inputs":[],"name":"ProductOutOfBounds","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220f7e8e3ef4405ba858296891409b167de675961dcc03dc03125ef5eed9c9eb29264736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 0xE8 0xE3 0xEF PREVRANDAO SDIV 0xBA DUP6 DUP3 SWAP7 DUP10 EQ MULMOD 0xB1 PUSH8 0xDE675961DCC03DC0 BALANCE 0x25 0xEF MCOPY 0xED SWAP13 SWAP15 0xB2 SWAP3 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"595:21889:19:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea2646970667358221220f7e8e3ef4405ba858296891409b167de675961dcc03dc03125ef5eed9c9eb29264736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 0xE8 0xE3 0xEF PREVRANDAO SDIV 0xBA DUP6 DUP3 SWAP7 DUP10 EQ MULMOD 0xB1 PUSH8 0xDE675961DCC03DC0 BALANCE 0x25 0xEF MCOPY 0xED SWAP13 SWAP15 0xB2 SWAP3 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"595:21889:19:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaseOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExponentOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExponent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProductOutOfBounds\",\"type\":\"error\"}],\"devdoc\":{\"author\":\"Fernando Martinelli - @fernandomartinelliSergio Yuhjtman     - @sergioyuhjtmanDaniel Fernandez    - @dmf7z\",\"details\":\"Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument). Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural exponentiation and logarithm (where the base is Euler's number). All math operations are unchecked in order to save gas.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"BaseOutOfBounds()\":[{\"notice\":\"This error is thrown when a base is not within an acceptable range.\"}],\"ExponentOutOfBounds()\":[{\"notice\":\"This error is thrown when a exponent is not within an acceptable range.\"}],\"InvalidExponent()\":[{\"notice\":\"This error is thrown when an exponent used in the exp function is not within an acceptable range.\"}],\"OutOfBounds()\":[{\"notice\":\"This error is thrown when a variable or result is not within the acceptable bounds defined in the function.\"}],\"ProductOutOfBounds()\":[{\"notice\":\"This error is thrown when the exponent * ln(base) is not within an acceptable range.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol\":\"LogExpMath\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol\":{\"keccak256\":\"0x70449e2b423b9850e39adddd7301205aa8b6e9e4ae788fd44d0968cac018eb2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce2174a3629b45dca032f9cf53df35dea240626913b8882a9e2da21610b02796\",\"dweb:/ipfs/Qmf8E4DePnZXjqb3V4A38gSobjgRK6VqavqPByuXvJxtBG\"]}},\"version\":1}"}},"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol":{"ReentrancyGuardTransient":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"NOTE: This variant only works on networks where EIP-1153 is available.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"notice\":\"Unauthorized reentrant call.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Variant of {ReentrancyGuard} that uses transient storage.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol\":\"ReentrancyGuardTransient\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol\":{\"keccak256\":\"0x0986ee17e49747c89956b4d46947b65b7c2942d5854fd39d764a7cb2735ff8af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://38fedef8f551d12a155f54ab1c863db60fed1226a397a321ac729e9db65f4593\",\"dweb:/ipfs/QmaxBFc45J79aehsbSoLzNWVfBhqxkkWnKpunmKrbzV1pL\"]},\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol\":{\"keccak256\":\"0xba524eab3f4f1b735008624cf11264842bec509e05ac025f93b8c843547fbfd3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c539df1afd342c47fdbd96fb28a183b7b30e055c4e435cdf77140ec92e68a42\",\"dweb:/ipfs/QmZ4akawS7TKrJkBeoi4bfyGWRmQgXshtkAMupuxkgH5Ur\"]}},\"version\":1}"}},"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol":{"StorageSlotExtension":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212207d1ece238b2a90fbead6c43dfa8046238cc35e0b4dec12d000c4f2cebfef20e164736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0x1ECE238B2A90FBEAD6C43DFA8046238CC35E0B4DEC12D000C4F2CEBFEF20 0xE1 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"278:4371:21:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea26469706673582212207d1ece238b2a90fbead6c43dfa8046238cc35e0b4dec12d000c4f2cebfef20e164736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0x1ECE238B2A90FBEAD6C43DFA8046238CC35E0B4DEC12D000C4F2CEBFEF20 0xE1 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"278:4371:21:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"TIP: Consider using this library along with {SlotDerivation}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for reading and writing primitive types to specific storage slots. Based on OpenZeppelin; just adding support for int256.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol\":\"StorageSlotExtension\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol\":{\"keccak256\":\"0xba524eab3f4f1b735008624cf11264842bec509e05ac025f93b8c843547fbfd3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c539df1afd342c47fdbd96fb28a183b7b30e055c4e435cdf77140ec92e68a42\",\"dweb:/ipfs/QmZ4akawS7TKrJkBeoi4bfyGWRmQgXshtkAMupuxkgH5Ur\"]}},\"version\":1}"}},"@balancer-labs/v3-solidity-utils/contracts/test/ERC20TestToken.sol":{"ERC20TestToken":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals_","type":"uint8"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"inputs":[],"name":"ZeroTransfer","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"abi_decode_string_fromMemory":{"entryPoint":795,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":758,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"60a0604052346102f257610d7d80380380610019816102f6565b92833981016060828203126102f25781516001600160401b03908181116102f2578261004691850161031b565b90602092838501518281116102f25760409161006391870161031b565b9401519360ff851685036102f2578251828111610209576003918254916001958684811c941680156102e8575b888510146102d4578190601f94858111610286575b508890858311600114610228575f9261021d575b50505f1982861b1c191690861b1783555b80519384116102095760049586548681811c911680156101ff575b828210146101ec578381116101a9575b508092851160011461014457509383949184925f95610139575b50501b925f19911b1c19161790555b608052604051610a10908161036d8239608051816104ff0152f35b015193505f8061010f565b92919084601f198116885f52855f20955f905b8983831061018f5750505010610176575b50505050811b01905561011e565b01519060f8845f19921b161c191690555f808080610168565b858701518955909701969485019488935090810190610157565b875f52815f208480880160051c8201928489106101e3575b0160051c019087905b8281106101d85750506100f5565b5f81550187906101ca565b925081926101c1565b602288634e487b7160e01b5f525260245ffd5b90607f16906100e5565b634e487b7160e01b5f52604160045260245ffd5b015190505f806100b9565b90889350601f19831691875f528a5f20925f5b8c8282106102705750508411610259575b505050811b0183556100ca565b01515f1983881b60f8161c191690555f808061024c565b8385015186558c9790950194938401930161023b565b909150855f52885f208580850160051c8201928b86106102cb575b918a91869594930160051c01915b8281106102bd5750506100a5565b5f81558594508a91016102af565b925081926102a1565b634e487b7160e01b5f52602260045260245ffd5b93607f1693610090565b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761020957604052565b81601f820112156102f2578051906001600160401b0382116102095761034a601f8301601f19166020016102f6565b92828452602083830101116102f257815f9260208093018386015e830101529056fe6080604090808252600480361015610015575f80fd5b5f3560e01c91826306fdde031461077557508163095ea7b31461069657816318160ddd1461067857816323b872dd14610523578163313ce567146104e657816340c10f191461040557816370a08231146103c257816395d89b41146102415781639dc29fac14610151578163a9059cbb146100f3575063dd62ed3e14610099575f80fd5b346100ef57806003193601126100ef576020906100b4610888565b6100bc6108ab565b9073ffffffffffffffffffffffffffffffffffffffff8091165f5260018452825f2091165f528252805f20549051908152f35b5f80fd5b82346100ef57806003193601126100ef5761010c610888565b60243592831561012b575060209261012491336108ce565b5160018152f35b7f10cadee3000000000000000000000000000000000000000000000000000000005f525ffd5b9050346100ef57816003193601126100ef5761016b610888565b9173ffffffffffffffffffffffffffffffffffffffff602435931691821561021657825f525f602052815f2054908482106101e35750837fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef925f956020938688528785520381872055816002540360025551908152a3005b909291507fe450d38c000000000000000000000000000000000000000000000000000000005f525260245260445260645ffd5b5f907f96c6fd1e0000000000000000000000000000000000000000000000000000000082525260245ffd5b9050346100ef575f6003193601126100ef5781515f928254936001948060011c600182169687156103b8575b602092838310891461038c57869798838897985290815f1461034f57506001146102f2575b50505003601f01601f191682019267ffffffffffffffff8411838510176102c657508291826102c292528261085e565b0390f35b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5f888152929493507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106103395750505090601f1992601f92820101918193610292565b805488850187015287945092850192810161031c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f601f19610292565b6022887f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b90607f169061026d565b82346100ef5760206003193601126100ef5760209073ffffffffffffffffffffffffffffffffffffffff6103f4610888565b165f525f8252805f20549051908152f35b82346100ef57806003193601126100ef5761041e610888565b9073ffffffffffffffffffffffffffffffffffffffff60243592169283156104bb576002549083820180921161048f57505f927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209260025585855284835280852082815401905551908152a3005b6011907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5f907fec442f050000000000000000000000000000000000000000000000000000000082525260245ffd5b82346100ef575f6003193601126100ef576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b82346100ef5760606003193601126100ef5761053d610888565b6105456108ab565b9060443593841561012b5773ffffffffffffffffffffffffffffffffffffffff8216805f526001602052845f20335f52602052845f2054917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83036105b3575b6020866101248988886108ce565b8683106106445781156106195733156105ee575091856101249492602097945f5260018852865f20335f52885203855f2055919481936105a5565b5f907f94280d620000000000000000000000000000000000000000000000000000000082525260245ffd5b5f907fe602df050000000000000000000000000000000000000000000000000000000082525260245ffd5b8287917ffb8f41b2000000000000000000000000000000000000000000000000000000005f5233905260245260445260645ffd5b82346100ef575f6003193601126100ef576020906002549051908152f35b82346100ef57806003193601126100ef576106af610888565b60243590331561074a5773ffffffffffffffffffffffffffffffffffffffff1690811561071f5760209350335f5260018452825f20825f52845280835f205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b5f847f94280d620000000000000000000000000000000000000000000000000000000082525260245ffd5b5f847fe602df050000000000000000000000000000000000000000000000000000000082525260245ffd5b909150346100ef575f6003193601126100ef575f92600354936001948060011c60018216968715610854575b602092838310891461038c57869798838897985290815f1461034f57506001146107f55750505003601f01601f191682019267ffffffffffffffff8411838510176102c657508291826102c292528261085e565b60035f908152929493507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061083e5750505090601f1992601f92820101918193610292565b8054888501870152879450928501928101610821565b90607f16906107a1565b601f19601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100ef57565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036100ef57565b73ffffffffffffffffffffffffffffffffffffffff8091169182156109ae571691821561098257815f525f60205260405f205481811061095057817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f5260405f20818154019055604051908152a3565b827fe450d38c000000000000000000000000000000000000000000000000000000005f5260045260245260445260645ffd5b7fec442f05000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b7f96c6fd1e000000000000000000000000000000000000000000000000000000005f525f60045260245ffdfea26469706673582212203149a51d4ac94fa7d0fcc677aca8cb21ae765deaf205d8b1ed48dee89e3a3a3c64736f6c634300081b0033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x2F2 JUMPI PUSH2 0xD7D DUP1 CODESIZE SUB DUP1 PUSH2 0x19 DUP2 PUSH2 0x2F6 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD PUSH1 0x60 DUP3 DUP3 SUB SLT PUSH2 0x2F2 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 DUP2 GT PUSH2 0x2F2 JUMPI DUP3 PUSH2 0x46 SWAP2 DUP6 ADD PUSH2 0x31B JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP3 DUP4 DUP6 ADD MLOAD DUP3 DUP2 GT PUSH2 0x2F2 JUMPI PUSH1 0x40 SWAP2 PUSH2 0x63 SWAP2 DUP8 ADD PUSH2 0x31B JUMP JUMPDEST SWAP5 ADD MLOAD SWAP4 PUSH1 0xFF DUP6 AND DUP6 SUB PUSH2 0x2F2 JUMPI DUP3 MLOAD DUP3 DUP2 GT PUSH2 0x209 JUMPI PUSH1 0x3 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x1 SWAP6 DUP7 DUP5 DUP2 SHR SWAP5 AND DUP1 ISZERO PUSH2 0x2E8 JUMPI JUMPDEST DUP9 DUP6 LT EQ PUSH2 0x2D4 JUMPI DUP2 SWAP1 PUSH1 0x1F SWAP5 DUP6 DUP2 GT PUSH2 0x286 JUMPI JUMPDEST POP DUP9 SWAP1 DUP6 DUP4 GT PUSH1 0x1 EQ PUSH2 0x228 JUMPI PUSH0 SWAP3 PUSH2 0x21D JUMPI JUMPDEST POP POP PUSH0 NOT DUP3 DUP7 SHL SHR NOT AND SWAP1 DUP7 SHL OR DUP4 SSTORE JUMPDEST DUP1 MLOAD SWAP4 DUP5 GT PUSH2 0x209 JUMPI PUSH1 0x4 SWAP6 DUP7 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH2 0x1FF JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH2 0x1EC JUMPI DUP4 DUP2 GT PUSH2 0x1A9 JUMPI JUMPDEST POP DUP1 SWAP3 DUP6 GT PUSH1 0x1 EQ PUSH2 0x144 JUMPI POP SWAP4 DUP4 SWAP5 SWAP2 DUP5 SWAP3 PUSH0 SWAP6 PUSH2 0x139 JUMPI JUMPDEST POP POP SHL SWAP3 PUSH0 NOT SWAP2 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x80 MSTORE PUSH1 0x40 MLOAD PUSH2 0xA10 SWAP1 DUP2 PUSH2 0x36D DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x4FF ADD MSTORE RETURN JUMPDEST ADD MLOAD SWAP4 POP PUSH0 DUP1 PUSH2 0x10F JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP5 PUSH1 0x1F NOT DUP2 AND DUP9 PUSH0 MSTORE DUP6 PUSH0 KECCAK256 SWAP6 PUSH0 SWAP1 JUMPDEST DUP10 DUP4 DUP4 LT PUSH2 0x18F JUMPI POP POP POP LT PUSH2 0x176 JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x11E JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE PUSH0 DUP1 DUP1 DUP1 PUSH2 0x168 JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH2 0x157 JUMP JUMPDEST DUP8 PUSH0 MSTORE DUP2 PUSH0 KECCAK256 DUP5 DUP1 DUP9 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP5 DUP10 LT PUSH2 0x1E3 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP8 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH2 0x1D8 JUMPI POP POP PUSH2 0xF5 JUMP JUMPDEST PUSH0 DUP2 SSTORE ADD DUP8 SWAP1 PUSH2 0x1CA JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x22 DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0xE5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADD MLOAD SWAP1 POP PUSH0 DUP1 PUSH2 0xB9 JUMP JUMPDEST SWAP1 DUP9 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP8 PUSH0 MSTORE DUP11 PUSH0 KECCAK256 SWAP3 PUSH0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH2 0x270 JUMPI POP POP DUP5 GT PUSH2 0x259 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP4 SSTORE PUSH2 0xCA JUMP JUMPDEST ADD MLOAD PUSH0 NOT DUP4 DUP9 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE PUSH0 DUP1 DUP1 PUSH2 0x24C JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP13 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x23B JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 PUSH0 MSTORE DUP9 PUSH0 KECCAK256 DUP6 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP7 LT PUSH2 0x2CB JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x2BD JUMPI POP POP PUSH2 0xA5 JUMP JUMPDEST PUSH0 DUP2 SSTORE DUP6 SWAP5 POP DUP11 SWAP2 ADD PUSH2 0x2AF JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x90 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH2 0x209 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x2F2 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x209 JUMPI PUSH2 0x34A PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2F6 JUMP JUMPDEST SWAP3 DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x2F2 JUMPI DUP2 PUSH0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD MCOPY DUP4 ADD ADD MSTORE SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x775 JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x696 JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x678 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x523 JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x4E6 JUMPI DUP2 PUSH4 0x40C10F19 EQ PUSH2 0x405 JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x3C2 JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x241 JUMPI DUP2 PUSH4 0x9DC29FAC EQ PUSH2 0x151 JUMPI DUP2 PUSH4 0xA9059CBB EQ PUSH2 0xF3 JUMPI POP PUSH4 0xDD62ED3E EQ PUSH2 0x99 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xEF JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH1 0x20 SWAP1 PUSH2 0xB4 PUSH2 0x888 JUMP JUMPDEST PUSH2 0xBC PUSH2 0x8AB JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND PUSH0 MSTORE PUSH1 0x1 DUP5 MSTORE DUP3 PUSH0 KECCAK256 SWAP2 AND PUSH0 MSTORE DUP3 MSTORE DUP1 PUSH0 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH2 0x10C PUSH2 0x888 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP3 DUP4 ISZERO PUSH2 0x12B JUMPI POP PUSH1 0x20 SWAP3 PUSH2 0x124 SWAP2 CALLER PUSH2 0x8CE JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH32 0x10CADEE300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xEF JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH2 0x16B PUSH2 0x888 JUMP JUMPDEST SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD SWAP4 AND SWAP2 DUP3 ISZERO PUSH2 0x216 JUMPI DUP3 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE DUP2 PUSH0 KECCAK256 SLOAD SWAP1 DUP5 DUP3 LT PUSH2 0x1E3 JUMPI POP DUP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH0 SWAP6 PUSH1 0x20 SWAP4 DUP7 DUP9 MSTORE DUP8 DUP6 MSTORE SUB DUP2 DUP8 KECCAK256 SSTORE DUP2 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 STOP JUMPDEST SWAP1 SWAP3 SWAP2 POP PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST PUSH0 SWAP1 PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xEF JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI DUP2 MLOAD PUSH0 SWAP3 DUP3 SLOAD SWAP4 PUSH1 0x1 SWAP5 DUP1 PUSH1 0x1 SHR PUSH1 0x1 DUP3 AND SWAP7 DUP8 ISZERO PUSH2 0x3B8 JUMPI JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP4 LT DUP10 EQ PUSH2 0x38C JUMPI DUP7 SWAP8 SWAP9 DUP4 DUP9 SWAP8 SWAP9 MSTORE SWAP1 DUP2 PUSH0 EQ PUSH2 0x34F JUMPI POP PUSH1 0x1 EQ PUSH2 0x2F2 JUMPI JUMPDEST POP POP POP SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x2C6 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x2C2 SWAP3 MSTORE DUP3 PUSH2 0x85E JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x41 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP9 DUP2 MSTORE SWAP3 SWAP5 SWAP4 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x339 JUMPI POP POP POP SWAP1 PUSH1 0x1F NOT SWAP3 PUSH1 0x1F SWAP3 DUP3 ADD ADD SWAP2 DUP2 SWAP4 PUSH2 0x292 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP6 ADD DUP8 ADD MSTORE DUP8 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x31C JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP8 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP DUP2 PUSH1 0x1F PUSH1 0x1F NOT PUSH2 0x292 JUMP JUMPDEST PUSH1 0x22 DUP9 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x26D JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x3F4 PUSH2 0x888 JUMP JUMPDEST AND PUSH0 MSTORE PUSH0 DUP3 MSTORE DUP1 PUSH0 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH2 0x41E PUSH2 0x888 JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD SWAP3 AND SWAP3 DUP4 ISZERO PUSH2 0x4BB JUMPI PUSH1 0x2 SLOAD SWAP1 DUP4 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x48F JUMPI POP PUSH0 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x2 SSTORE DUP6 DUP6 MSTORE DUP5 DUP4 MSTORE DUP1 DUP6 KECCAK256 DUP3 DUP2 SLOAD ADD SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 STOP JUMPDEST PUSH1 0x11 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 SWAP1 PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0xFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH2 0x53D PUSH2 0x888 JUMP JUMPDEST PUSH2 0x545 PUSH2 0x8AB JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP4 DUP5 ISZERO PUSH2 0x12B JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP1 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP5 PUSH0 KECCAK256 CALLER PUSH0 MSTORE PUSH1 0x20 MSTORE DUP5 PUSH0 KECCAK256 SLOAD SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 SUB PUSH2 0x5B3 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x124 DUP10 DUP9 DUP9 PUSH2 0x8CE JUMP JUMPDEST DUP7 DUP4 LT PUSH2 0x644 JUMPI DUP2 ISZERO PUSH2 0x619 JUMPI CALLER ISZERO PUSH2 0x5EE JUMPI POP SWAP2 DUP6 PUSH2 0x124 SWAP5 SWAP3 PUSH1 0x20 SWAP8 SWAP5 PUSH0 MSTORE PUSH1 0x1 DUP9 MSTORE DUP7 PUSH0 KECCAK256 CALLER PUSH0 MSTORE DUP9 MSTORE SUB DUP6 PUSH0 KECCAK256 SSTORE SWAP2 SWAP5 DUP2 SWAP4 PUSH2 0x5A5 JUMP JUMPDEST PUSH0 SWAP1 PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP3 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 SWAP1 PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 DUP8 SWAP2 PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE CALLER SWAP1 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH2 0x6AF PUSH2 0x888 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER ISZERO PUSH2 0x74A JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 ISZERO PUSH2 0x71F JUMPI PUSH1 0x20 SWAP4 POP CALLER PUSH0 MSTORE PUSH1 0x1 DUP5 MSTORE DUP3 PUSH0 KECCAK256 DUP3 PUSH0 MSTORE DUP5 MSTORE DUP1 DUP4 PUSH0 KECCAK256 SSTORE DUP3 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 CALLER SWAP3 LOG3 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP5 PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP3 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP5 PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 SWAP2 POP CALLVALUE PUSH2 0xEF JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH0 SWAP3 PUSH1 0x3 SLOAD SWAP4 PUSH1 0x1 SWAP5 DUP1 PUSH1 0x1 SHR PUSH1 0x1 DUP3 AND SWAP7 DUP8 ISZERO PUSH2 0x854 JUMPI JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP4 LT DUP10 EQ PUSH2 0x38C JUMPI DUP7 SWAP8 SWAP9 DUP4 DUP9 SWAP8 SWAP9 MSTORE SWAP1 DUP2 PUSH0 EQ PUSH2 0x34F JUMPI POP PUSH1 0x1 EQ PUSH2 0x7F5 JUMPI POP POP POP SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x2C6 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x2C2 SWAP3 MSTORE DUP3 PUSH2 0x85E JUMP JUMPDEST PUSH1 0x3 PUSH0 SWAP1 DUP2 MSTORE SWAP3 SWAP5 SWAP4 POP PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0x83E JUMPI POP POP POP SWAP1 PUSH1 0x1F NOT SWAP3 PUSH1 0x1F SWAP3 DUP3 ADD ADD SWAP2 DUP2 SWAP4 PUSH2 0x292 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP6 ADD DUP8 ADD MSTORE DUP8 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x821 JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x7A1 JUMP JUMPDEST PUSH1 0x1F NOT PUSH1 0x1F PUSH1 0x20 PUSH1 0x40 SWAP5 DUP2 DUP6 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP3 DUP9 ADD MSTORE ADD DUP7 DUP7 ADD MCOPY PUSH0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0xEF JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0xEF JUMPI JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0x9AE JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x982 JUMPI DUP2 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP2 DUP2 LT PUSH2 0x950 JUMPI DUP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 DUP6 PUSH0 MSTORE PUSH0 DUP5 MSTORE SUB PUSH1 0x40 PUSH0 KECCAK256 SSTORE DUP5 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST DUP3 PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE BLOBHASH 0xA5 SAR BLOBBASEFEE 0xC9 0x4F 0xA7 0xD0 0xFC 0xC6 PUSH24 0xACA8CB21AE765DEAF205D8B1ED48DEE89E3A3A3C64736F6C PUSH4 0x4300081B STOP CALLER ","sourceMap":"144:1033:22:-:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;144:1033:22;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1962:13:26;144:1033:22;;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;;;-1:-1:-1;144:1033:22;;;;-1:-1:-1;;;;144:1033:22;;;;;;;;;;;;;;;;;;;;1985:17:26;144:1033:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;;;;;;413:21;;144:1033;;;;;;;;413:21;144:1033;;;;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;-1:-1:-1;144:1033:22;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;-1:-1:-1;144:1033:22;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;;-1:-1:-1;144:1033:22;;;;;;;;;;;;-1:-1:-1;144:1033:22;;1985:17:26;144:1033:22;;-1:-1:-1;144:1033:22;;;;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;-1:-1:-1;144:1033:22;;-1:-1:-1;144:1033:22;;;;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;;;;-1:-1:-1;144:1033:22;;;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;;-1:-1:-1;;144:1033:22;;;-1:-1:-1;;;;;144:1033:22;;;;;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;144:1033:22;;;;;;;;-1:-1:-1;;144:1033:22;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;:::o"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":2219,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_3923":{"entryPoint":2184,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_string":{"entryPoint":2142,"id":null,"parameterSlots":2,"returnSlots":1},"fun_transfer":{"entryPoint":2254,"id":6035,"parameterSlots":3,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"5267":[{"length":32,"start":1279}]},"linkReferences":{},"object":"6080604090808252600480361015610015575f80fd5b5f3560e01c91826306fdde031461077557508163095ea7b31461069657816318160ddd1461067857816323b872dd14610523578163313ce567146104e657816340c10f191461040557816370a08231146103c257816395d89b41146102415781639dc29fac14610151578163a9059cbb146100f3575063dd62ed3e14610099575f80fd5b346100ef57806003193601126100ef576020906100b4610888565b6100bc6108ab565b9073ffffffffffffffffffffffffffffffffffffffff8091165f5260018452825f2091165f528252805f20549051908152f35b5f80fd5b82346100ef57806003193601126100ef5761010c610888565b60243592831561012b575060209261012491336108ce565b5160018152f35b7f10cadee3000000000000000000000000000000000000000000000000000000005f525ffd5b9050346100ef57816003193601126100ef5761016b610888565b9173ffffffffffffffffffffffffffffffffffffffff602435931691821561021657825f525f602052815f2054908482106101e35750837fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef925f956020938688528785520381872055816002540360025551908152a3005b909291507fe450d38c000000000000000000000000000000000000000000000000000000005f525260245260445260645ffd5b5f907f96c6fd1e0000000000000000000000000000000000000000000000000000000082525260245ffd5b9050346100ef575f6003193601126100ef5781515f928254936001948060011c600182169687156103b8575b602092838310891461038c57869798838897985290815f1461034f57506001146102f2575b50505003601f01601f191682019267ffffffffffffffff8411838510176102c657508291826102c292528261085e565b0390f35b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5f888152929493507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106103395750505090601f1992601f92820101918193610292565b805488850187015287945092850192810161031c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f601f19610292565b6022887f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b90607f169061026d565b82346100ef5760206003193601126100ef5760209073ffffffffffffffffffffffffffffffffffffffff6103f4610888565b165f525f8252805f20549051908152f35b82346100ef57806003193601126100ef5761041e610888565b9073ffffffffffffffffffffffffffffffffffffffff60243592169283156104bb576002549083820180921161048f57505f927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209260025585855284835280852082815401905551908152a3005b6011907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5f907fec442f050000000000000000000000000000000000000000000000000000000082525260245ffd5b82346100ef575f6003193601126100ef576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b82346100ef5760606003193601126100ef5761053d610888565b6105456108ab565b9060443593841561012b5773ffffffffffffffffffffffffffffffffffffffff8216805f526001602052845f20335f52602052845f2054917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83036105b3575b6020866101248988886108ce565b8683106106445781156106195733156105ee575091856101249492602097945f5260018852865f20335f52885203855f2055919481936105a5565b5f907f94280d620000000000000000000000000000000000000000000000000000000082525260245ffd5b5f907fe602df050000000000000000000000000000000000000000000000000000000082525260245ffd5b8287917ffb8f41b2000000000000000000000000000000000000000000000000000000005f5233905260245260445260645ffd5b82346100ef575f6003193601126100ef576020906002549051908152f35b82346100ef57806003193601126100ef576106af610888565b60243590331561074a5773ffffffffffffffffffffffffffffffffffffffff1690811561071f5760209350335f5260018452825f20825f52845280835f205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b5f847f94280d620000000000000000000000000000000000000000000000000000000082525260245ffd5b5f847fe602df050000000000000000000000000000000000000000000000000000000082525260245ffd5b909150346100ef575f6003193601126100ef575f92600354936001948060011c60018216968715610854575b602092838310891461038c57869798838897985290815f1461034f57506001146107f55750505003601f01601f191682019267ffffffffffffffff8411838510176102c657508291826102c292528261085e565b60035f908152929493507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061083e5750505090601f1992601f92820101918193610292565b8054888501870152879450928501928101610821565b90607f16906107a1565b601f19601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100ef57565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036100ef57565b73ffffffffffffffffffffffffffffffffffffffff8091169182156109ae571691821561098257815f525f60205260405f205481811061095057817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f5260405f20818154019055604051908152a3565b827fe450d38c000000000000000000000000000000000000000000000000000000005f5260045260245260445260645ffd5b7fec442f05000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b7f96c6fd1e000000000000000000000000000000000000000000000000000000005f525f60045260245ffdfea26469706673582212203149a51d4ac94fa7d0fcc677aca8cb21ae765deaf205d8b1ed48dee89e3a3a3c64736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x775 JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x696 JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x678 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x523 JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x4E6 JUMPI DUP2 PUSH4 0x40C10F19 EQ PUSH2 0x405 JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x3C2 JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x241 JUMPI DUP2 PUSH4 0x9DC29FAC EQ PUSH2 0x151 JUMPI DUP2 PUSH4 0xA9059CBB EQ PUSH2 0xF3 JUMPI POP PUSH4 0xDD62ED3E EQ PUSH2 0x99 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xEF JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH1 0x20 SWAP1 PUSH2 0xB4 PUSH2 0x888 JUMP JUMPDEST PUSH2 0xBC PUSH2 0x8AB JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND PUSH0 MSTORE PUSH1 0x1 DUP5 MSTORE DUP3 PUSH0 KECCAK256 SWAP2 AND PUSH0 MSTORE DUP3 MSTORE DUP1 PUSH0 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH2 0x10C PUSH2 0x888 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP3 DUP4 ISZERO PUSH2 0x12B JUMPI POP PUSH1 0x20 SWAP3 PUSH2 0x124 SWAP2 CALLER PUSH2 0x8CE JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH32 0x10CADEE300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xEF JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH2 0x16B PUSH2 0x888 JUMP JUMPDEST SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD SWAP4 AND SWAP2 DUP3 ISZERO PUSH2 0x216 JUMPI DUP3 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE DUP2 PUSH0 KECCAK256 SLOAD SWAP1 DUP5 DUP3 LT PUSH2 0x1E3 JUMPI POP DUP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH0 SWAP6 PUSH1 0x20 SWAP4 DUP7 DUP9 MSTORE DUP8 DUP6 MSTORE SUB DUP2 DUP8 KECCAK256 SSTORE DUP2 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 STOP JUMPDEST SWAP1 SWAP3 SWAP2 POP PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST PUSH0 SWAP1 PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xEF JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI DUP2 MLOAD PUSH0 SWAP3 DUP3 SLOAD SWAP4 PUSH1 0x1 SWAP5 DUP1 PUSH1 0x1 SHR PUSH1 0x1 DUP3 AND SWAP7 DUP8 ISZERO PUSH2 0x3B8 JUMPI JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP4 LT DUP10 EQ PUSH2 0x38C JUMPI DUP7 SWAP8 SWAP9 DUP4 DUP9 SWAP8 SWAP9 MSTORE SWAP1 DUP2 PUSH0 EQ PUSH2 0x34F JUMPI POP PUSH1 0x1 EQ PUSH2 0x2F2 JUMPI JUMPDEST POP POP POP SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x2C6 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x2C2 SWAP3 MSTORE DUP3 PUSH2 0x85E JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x41 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP9 DUP2 MSTORE SWAP3 SWAP5 SWAP4 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x339 JUMPI POP POP POP SWAP1 PUSH1 0x1F NOT SWAP3 PUSH1 0x1F SWAP3 DUP3 ADD ADD SWAP2 DUP2 SWAP4 PUSH2 0x292 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP6 ADD DUP8 ADD MSTORE DUP8 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x31C JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 DUP8 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP DUP2 PUSH1 0x1F PUSH1 0x1F NOT PUSH2 0x292 JUMP JUMPDEST PUSH1 0x22 DUP9 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x26D JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x3F4 PUSH2 0x888 JUMP JUMPDEST AND PUSH0 MSTORE PUSH0 DUP3 MSTORE DUP1 PUSH0 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH2 0x41E PUSH2 0x888 JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD SWAP3 AND SWAP3 DUP4 ISZERO PUSH2 0x4BB JUMPI PUSH1 0x2 SLOAD SWAP1 DUP4 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x48F JUMPI POP PUSH0 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x2 SSTORE DUP6 DUP6 MSTORE DUP5 DUP4 MSTORE DUP1 DUP6 KECCAK256 DUP3 DUP2 SLOAD ADD SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 STOP JUMPDEST PUSH1 0x11 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 SWAP1 PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0xFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH2 0x53D PUSH2 0x888 JUMP JUMPDEST PUSH2 0x545 PUSH2 0x8AB JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP4 DUP5 ISZERO PUSH2 0x12B JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP1 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP5 PUSH0 KECCAK256 CALLER PUSH0 MSTORE PUSH1 0x20 MSTORE DUP5 PUSH0 KECCAK256 SLOAD SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 SUB PUSH2 0x5B3 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x124 DUP10 DUP9 DUP9 PUSH2 0x8CE JUMP JUMPDEST DUP7 DUP4 LT PUSH2 0x644 JUMPI DUP2 ISZERO PUSH2 0x619 JUMPI CALLER ISZERO PUSH2 0x5EE JUMPI POP SWAP2 DUP6 PUSH2 0x124 SWAP5 SWAP3 PUSH1 0x20 SWAP8 SWAP5 PUSH0 MSTORE PUSH1 0x1 DUP9 MSTORE DUP7 PUSH0 KECCAK256 CALLER PUSH0 MSTORE DUP9 MSTORE SUB DUP6 PUSH0 KECCAK256 SSTORE SWAP2 SWAP5 DUP2 SWAP4 PUSH2 0x5A5 JUMP JUMPDEST PUSH0 SWAP1 PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP3 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 SWAP1 PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 DUP8 SWAP2 PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE CALLER SWAP1 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0xEF JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH2 0x6AF PUSH2 0x888 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER ISZERO PUSH2 0x74A JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 ISZERO PUSH2 0x71F JUMPI PUSH1 0x20 SWAP4 POP CALLER PUSH0 MSTORE PUSH1 0x1 DUP5 MSTORE DUP3 PUSH0 KECCAK256 DUP3 PUSH0 MSTORE DUP5 MSTORE DUP1 DUP4 PUSH0 KECCAK256 SSTORE DUP3 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 CALLER SWAP3 LOG3 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP5 PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP3 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP5 PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 SWAP2 POP CALLVALUE PUSH2 0xEF JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xEF JUMPI PUSH0 SWAP3 PUSH1 0x3 SLOAD SWAP4 PUSH1 0x1 SWAP5 DUP1 PUSH1 0x1 SHR PUSH1 0x1 DUP3 AND SWAP7 DUP8 ISZERO PUSH2 0x854 JUMPI JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP4 LT DUP10 EQ PUSH2 0x38C JUMPI DUP7 SWAP8 SWAP9 DUP4 DUP9 SWAP8 SWAP9 MSTORE SWAP1 DUP2 PUSH0 EQ PUSH2 0x34F JUMPI POP PUSH1 0x1 EQ PUSH2 0x7F5 JUMPI POP POP POP SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x2C6 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x2C2 SWAP3 MSTORE DUP3 PUSH2 0x85E JUMP JUMPDEST PUSH1 0x3 PUSH0 SWAP1 DUP2 MSTORE SWAP3 SWAP5 SWAP4 POP PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0x83E JUMPI POP POP POP SWAP1 PUSH1 0x1F NOT SWAP3 PUSH1 0x1F SWAP3 DUP3 ADD ADD SWAP2 DUP2 SWAP4 PUSH2 0x292 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP6 ADD DUP8 ADD MSTORE DUP8 SWAP5 POP SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x821 JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x7A1 JUMP JUMPDEST PUSH1 0x1F NOT PUSH1 0x1F PUSH1 0x20 PUSH1 0x40 SWAP5 DUP2 DUP6 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP3 DUP9 ADD MSTORE ADD DUP7 DUP7 ADD MCOPY PUSH0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0xEF JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0xEF JUMPI JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0x9AE JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x982 JUMPI DUP2 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP2 DUP2 LT PUSH2 0x950 JUMPI DUP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 DUP6 PUSH0 MSTORE PUSH0 DUP5 MSTORE SUB PUSH1 0x40 PUSH0 KECCAK256 SSTORE DUP5 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST DUP3 PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE BLOBHASH 0xA5 SAR BLOBBASEFEE 0xC9 0x4F 0xA7 0xD0 0xFC 0xC6 PUSH24 0xACA8CB21AE765DEAF205D8B1ED48DEE89E3A3A3C64736F6C PUSH4 0x4300081B STOP CALLER ","sourceMap":"144:1033:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;3952:11:26;144:1033:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;:::i;:::-;;;837:10;;;833:62;;735:10:32;144:1033:22;735:10:32;3754:5:26;735:10:32;;3754:5:26;:::i;:::-;144:1033:22;;;;;833:62;870:14;144:1033;870:14;144:1033;870:14;144:1033;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;:::i;:::-;;;;;;;8317:21:26;;;8313:89;;144:1033:22;;;;;;;;;;6603:19:26;;;;6599:115;;144:1033:22;;7346:25:26;144:1033:22;;;;;;;;;;;;;;;;;7073:21:26;144:1033:22;;7073:21:26;144:1033:22;;;;;7346:25:26;144:1033:22;6599:115:26;6649:50;;;;;144:1033:22;6649:50:26;144:1033:22;;;;;;;6649:50:26;8313:89;144:1033:22;8361:30:26;;;;144:1033:22;;;8361:30:26;144:1033:22;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;144:1033:22;;;-1:-1:-1;;144:1033:22;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;;-1:-1:-1;144:1033:22;;-1:-1:-1;;144:1033:22;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;:::i;:::-;;;;;;;7791:21:26;;;7787:91;;6496:21;144:1033:22;;;;;;;;;;;;;7346:25:26;144:1033:22;;;6496:21:26;144:1033:22;;;;;;;;;;;;;;;;;;;;7346:25:26;144:1033:22;;;;;;;;;;;7787:91:26;144:1033:22;7835:32:26;;;;144:1033:22;;;7835:32:26;144:1033:22;;;;;;-1:-1:-1;;144:1033:22;;;;;;;;;521:9;144:1033;;;;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;:::i;:::-;;;:::i;:::-;;;;1058:10;;;1054:62;;144:1033;;;;;;;;;;;;735:10:32;144:1033:22;;;;;;;;10828:37:26;10848:17;10828:37;;10824:310;;144:1033:22;;5249:5:26;;;;;;:::i;10824:310::-;10885:24;;;10881:130;;10061:19;;10057:89;;735:10:32;10159:21:26;10155:90;;144:1033:22;;;5249:5:26;144:1033:22;;;;;;;;;;;;;735:10:32;144:1033:22;;;;;;;;;10824:310:26;;;;;;10155:90;144:1033:22;10203:31:26;;;;144:1033:22;;;10203:31:26;10057:89;144:1033:22;10103:32:26;;;;144:1033:22;;;10103:32:26;10881:130;10936:60;;;;144:1033:22;10936:60:26;735:10:32;144:1033:22;;;;;;;;10936:60:26;144:1033:22;;;;;;-1:-1:-1;;144:1033:22;;;;;;;3222:12:26;144:1033:22;;;;;;;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;:::i;:::-;;;735:10:32;;10061:19:26;10057:89;;144:1033:22;;10159:21:26;;;10155:90;;144:1033:22;735:10:32;;;144:1033:22;;9105:4:26;144:1033:22;;;;;;;;;;;;;;;;;;;;10333:31:26;735:10:32;;10333:31:26;;144:1033:22;9105:4:26;144:1033:22;;;10155:90:26;144:1033:22;10203:31:26;;;;144:1033:22;;;10203:31:26;10057:89;144:1033:22;10103:32:26;;;;144:1033:22;;;10103:32:26;144:1033:22;;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;2151:5:26;144:1033:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;144:1033:22;;;-1:-1:-1;;144:1033:22;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2151:5:26;144:1033:22;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;144:1033:22;;;;;;;;;;;;;;;;-1:-1:-1;;144:1033:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;5656:300:26:-;144:1033:22;;;;5739:18:26;;;5735:86;;144:1033:22;5834:16:26;;;5830:86;;144:1033:22;6356:540:26;144:1033:22;6356:540:26;144:1033:22;;;6356:540:26;144:1033:22;;6603:19:26;;;6599:115;;144:1033:22;7346:25:26;144:1033:22;;;;6356:540:26;144:1033:22;6356:540:26;144:1033:22;;;;6356:540:26;144:1033:22;;;6356:540:26;144:1033:22;;6356:540:26;144:1033:22;;;;;;;;;;;;7346:25:26;5656:300::o;6599:115::-;6649:50;;6356:540;6649:50;;144:1033:22;;;;;;6356:540:26;6649:50;5830:86;5873:32;5755:1;5873:32;5755:1;5873:32;144:1033:22;;5755:1:26;5873:32;5735:86;5780:30;5755:1;5780:30;5755:1;5780:30;144:1033:22;;5755:1:26;5780:30"},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(address,uint256)":"9dc29fac","decimals()":"313ce567","mint(address,uint256)":"40c10f19","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroTransfer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ZeroTransfer()\":[{\"details\":\"Simulate tokens that don't allow zero transfers.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-solidity-utils/contracts/test/ERC20TestToken.sol\":\"ERC20TestToken\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-solidity-utils/contracts/test/ERC20TestToken.sol\":{\"keccak256\":\"0x6c1d91dd0f44221f140ab22e9e981ef1f9028018428f0c9cb41577e757e1b4b8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c42dce6530450a6476970b6bd0aa8feec8b12c5b3837702f94395ab3157cede7\",\"dweb:/ipfs/QmYb3V9wcMTjdN1XwNdQM4ZHG9EcFvKLZNKDFRyraBW5DQ\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]}},\"version\":1}"}},"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol":{"SingletonAuthentication":{"abi":[{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3","getAuthorizer()":"aaabadc5","getVault()":"8d928af8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The disambiguator is the contract's own address. This is used in the construction of actionIds for permissioned functions, to avoid conflicts when multiple contracts (or multiple versions of the same contract) use the same function name.\",\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"_0\":\"The computed actionId\"}},\"getAuthorizer()\":{\"returns\":{\"_0\":\"authorizer An interface pointer to the Authorizer\"}},\"getVault()\":{\"returns\":{\"_0\":\"vault An interface pointer to the Vault\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}]},\"kind\":\"user\",\"methods\":{\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getAuthorizer()\":{\"notice\":\"Get the address of the Authorizer.\"},\"getVault()\":{\"notice\":\"Get the address of the Balancer Vault.\"}},\"notice\":\"Base contract suitable for Singleton contracts (e.g., pool factories) that have permissioned functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol\":\"SingletonAuthentication\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0x743734d3d3503d705f0a778c4b0dd61fdb067e89a07481ddbead0654e6808318\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6198f27b2d01f346fdd3d1302e9a6ddd543d2f06afd675d84919c2242bd26d8d\",\"dweb:/ipfs/QmYntQih5MwxxdGnVu2BPVLeqFuJEH761cByAesjwE6JKT\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\":{\"keccak256\":\"0x807237870f3aaa26cd815c5f600c1d0c60861a2f962fcc341d4b80942288ab52\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://90f108409488d0c38147d2ac7b9facd694dbf1001c501136a249091788c22232\",\"dweb:/ipfs/QmRCaCCGcuL4kxBEbrpq6FfENBJk4Zo8CNe8TRusatuYJ6\"]},\"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol\":{\"keccak256\":\"0x67518bf3b6bd96f5897c56867fc57f3c31bb9b97abf93cf960de145a5eb82414\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://563857d8606cbd4f727c75f09901d09ec9faa73778fe85e2af851982cdb9b6e8\",\"dweb:/ipfs/QmU7x1gWCPGPAcxA8Qq3z8hscrGRFwsc28qad4RMihZ8qB\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@openzeppelin/contracts/interfaces/IERC4626.sol":{"IERC4626":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asset","outputs":[{"internalType":"address","name":"assetTokenAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"convertToAssets","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"convertToShares","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"maxDeposit","outputs":[{"internalType":"uint256","name":"maxAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"maxMint","outputs":[{"internalType":"uint256","name":"maxShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxRedeem","outputs":[{"internalType":"uint256","name":"maxShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxWithdraw","outputs":[{"internalType":"uint256","name":"maxAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewDeposit","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewMint","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewRedeem","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewWithdraw","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"totalManagedAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","asset()":"38d52e0f","balanceOf(address)":"70a08231","convertToAssets(uint256)":"07a2d13a","convertToShares(uint256)":"c6e6f592","decimals()":"313ce567","deposit(uint256,address)":"6e553f65","maxDeposit(address)":"402d267d","maxMint(address)":"c63d75b6","maxRedeem(address)":"d905777e","maxWithdraw(address)":"ce96cb77","mint(uint256,address)":"94bf804d","name()":"06fdde03","previewDeposit(uint256)":"ef8b30f7","previewMint(uint256)":"b3d7f6b9","previewRedeem(uint256)":"4cdad506","previewWithdraw(uint256)":"0a28a477","redeem(uint256,address,address)":"ba087652","symbol()":"95d89b41","totalAssets()":"01e1d114","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","withdraw(uint256,address,address)":"b460af94"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"asset()\":{\"details\":\"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"deposit(uint256,address)\":{\"details\":\"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"maxDeposit(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert.\"},\"maxMint(address)\":{\"details\":\"Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert.\"},\"maxRedeem(address)\":{\"details\":\"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert.\"},\"maxWithdraw(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert.\"},\"mint(uint256,address)\":{\"details\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"redeem(uint256,address,address)\":{\"details\":\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalAssets()\":{\"details\":\"Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"withdraw(uint256,address,address)\":{\"details\":\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":\"IERC4626\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}"},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}"},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"currentAllowance","type":"uint256"},{"internalType":"uint256","name":"requestedDecrease","type":"uint256"}],"name":"SafeERC20FailedDecreaseAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212202d84903a7d88d39beea6e8c10e7299cd816b0bde2b5e6443ed9adc8d7885d05564736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D DUP5 SWAP1 GASPRICE PUSH30 0x88D39BEEA6E8C10E7299CD816B0BDE2B5E6443ED9ADC8D7885D05564736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"751:5018:30:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea26469706673582212202d84903a7d88d39beea6e8c10e7299cd816b0bde2b5e6443ed9adc8d7885d05564736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D DUP5 SWAP1 GASPRICE PUSH30 0x88D39BEEA6E8C10E7299CD816B0BDE2B5E6443ED9ADC8D7885D05564736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"751:5018:30:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212207308dc04867882e716a35b4e93fd57711740b1913fb9480b2ee92ca52acf78a664736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x8DC04867882E716A35B4E93FD57711740B1913F 0xB9 BASEFEE SIGNEXTEND 0x2E 0xE9 0x2C 0xA5 0x2A 0xCF PUSH25 0xA664736F6C634300081B003300000000000000000000000000 ","sourceMap":"195:6066:31:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea26469706673582212207308dc04867882e716a35b4e93fd57711740b1913fb9480b2ee92ca52acf78a664736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x8DC04867882E716A35B4E93FD57711740B1913F 0xB9 BASEFEE SIGNEXTEND 0x2E 0xE9 0x2C 0xA5 0x2A 0xCF PUSH25 0xA664736F6C634300081B003300000000000000000000000000 ","sourceMap":"195:6066:31:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"SafeCast":{"abi":[{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntDowncast","type":"error"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntToUint","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintToInt","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220c8c1339c0f0f32d1cd42e01b472992f3fdb072f8c07de7950d5d5c048b0f797464736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 0xC1 CALLER SWAP13 0xF 0xF ORIGIN 0xD1 0xCD TIMESTAMP 0xE0 SHL SELFBALANCE 0x29 SWAP3 RETURN REVERT 0xB0 PUSH19 0xF8C07DE7950D5D5C048B0F797464736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"764:33927:33:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea2646970667358221220c8c1339c0f0f32d1cd42e01b472992f3fdb072f8c07de7950d5d5c048b0f797464736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 0xC1 CALLER SWAP13 0xF 0xF ORIGIN 0xD1 0xCD TIMESTAMP 0xE0 SHL SELFBALANCE 0x29 SWAP3 RETURN REVERT 0xB0 PUSH19 0xF8C07DE7950D5D5C048B0F797464736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"764:33927:33:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"errors\":{\"SafeCastOverflowedIntDowncast(uint8,int256)\":[{\"details\":\"Value doesn't fit in an int of `bits` size.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c\",\"dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj\"]}},\"version\":1}"}},"contracts/BalancerContractRegistry.sol":{"BalancerContractRegistry":{"abi":[{"inputs":[{"internalType":"contract IVault","name":"vault","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractAddressAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractAddressNotRegistered","type":"error"},{"inputs":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"string","name":"contractName","type":"string"}],"name":"ContractAliasInUseAsName","type":"error"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractAlreadyDeprecated","type":"error"},{"inputs":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"string","name":"contractName","type":"string"}],"name":"ContractNameAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"string","name":"contractName","type":"string"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractNameInUseAsAlias","type":"error"},{"inputs":[{"internalType":"string","name":"contractName","type":"string"}],"name":"ContractNameNotRegistered","type":"error"},{"inputs":[{"internalType":"string","name":"contractName","type":"string"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"InconsistentState","type":"error"},{"inputs":[],"name":"InvalidContractAlias","type":"error"},{"inputs":[],"name":"InvalidContractName","type":"error"},{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[],"name":"ZeroContractAddress","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"BalancerContractDeprecated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"indexed":true,"internalType":"string","name":"contractName","type":"string"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"BalancerContractDeregistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"indexed":true,"internalType":"string","name":"contractName","type":"string"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"BalancerContractRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"string","name":"contractAlias","type":"string"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractAliasUpdated","type":"event"},{"inputs":[{"internalType":"string","name":"contractAlias","type":"string"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"addOrUpdateBalancerContractAlias","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"name":"deprecateBalancerContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"contractName","type":"string"}],"name":"deregisterBalancerContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"string","name":"contractName","type":"string"}],"name":"getBalancerContract","outputs":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"bool","name":"isActive","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"name":"getBalancerContractInfo","outputs":[{"components":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"bool","name":"isRegistered","type":"bool"},{"internalType":"bool","name":"isActive","type":"bool"}],"internalType":"struct IBalancerContractRegistry.ContractInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"isActiveBalancerContract","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"}],"name":"isTrustedRouter","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum ContractType","name":"contractType","type":"uint8"},{"internalType":"string","name":"contractName","type":"string"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"registerBalancerContract","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60c034607a57601f61124738819003918201601f19168301916001600160401b03831184841017607e57808492602094604052833981010312607a57516001600160a01b0381168103607a573060805260a0526040516111b49081610093823960805181610f27015260a0518181816106d70152610fa40152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080604081815260049182361015610015575f80fd5b5f3560e01c908163264e97e014610c6b575080632967af9614610a7457806341d8c0bb1461096157806344969a9c146107f6578063851c1bb3146107a65780638554c327146106fb5780638d928af8146106ab578063aaabadc514610672578063ae2733a41461059f578063c7f90793146103dd5763e0376ab414610098575f80fd5b346103d95760606003193601126103d957813560058110156103d95760243567ffffffffffffffff81116103d9576100d39036908501610dd6565b6044359273ffffffffffffffffffffffffffffffffffffffff948585168095036103d9576100ff611051565b84156103b35782511561038d57845f52602060018152825f209683519761012589610d4c565b549760ff986101368a821683610e84565b89808260081c16151591828685015260101c16151586830152610354575061015d85611156565b90815f525f835280855f205416806102c65750815f5260028352845f2054168061028d57505f525f8152825f20867fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790558251926101be84610d4c565b6101c88685610e84565b8184019060018252600181860193818552895f52525f20935192600584101561026157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000061023a96979862ff000061ff0087549451151560081b169451151560101b16941691161717179055610ee0565b907fb12ed936cf481273b3ed037dc706d110c49bd7ba6743e67082cd772a6e9102e25f80a4005b6021907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b836102c2879287519384937f6d4f9990000000000000000000000000000000000000000000000000000000008552840161101d565b0390fd5b846102c288610311878e8b965f5260018252865f20918751926102e884610d4c565b54906102f683831685610e84565b828260081c1615159084015260101c16151586820152610e90565b9361034581519586957fa1e69ed3000000000000000000000000000000000000000000000000000000008752860190610e4a565b60248401526044830190610e9d565b518790846005821015610261577f25a14e0c000000000000000000000000000000000000000000000000000000005f525260245260445ffd5b7f830c907e000000000000000000000000000000000000000000000000000000005f525ffd5b7fb4d92c53000000000000000000000000000000000000000000000000000000005f525ffd5b5f80fd5b5090346103d957602091826003193601126103d957813567ffffffffffffffff81116103d9576104109036908401610dd6565b90610419611051565b8151156105785761042982611156565b90815f525f855273ffffffffffffffffffffffffffffffffffffffff815f20541694851561053e57855f5260018152815f209282519361046885610d4c565b5461047660ff821686610e84565b60ff808260081c16159182158588015260101c1615158486015261050b575f929160019184528381528284207fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055878452528120555191600583101561026157506104e490610ee0565b907ffa2e7bfe3791287aa74ffe867372b78e61b60e0516978c4952f83f7416fafb7c5f80a4005b82517f36a7ac0a000000000000000000000000000000000000000000000000000000008152806102c28988838b0161101d565b846102c28584519384937fcd3599f90000000000000000000000000000000000000000000000000000000085528401526024830190610e9d565b827f830c907e000000000000000000000000000000000000000000000000000000005f525ffd5b50346103d957806003193601126103d95781359060058210156103d95773ffffffffffffffffffffffffffffffffffffffff6105d9610d29565b165f526001602052805f209160ff8251936105f385610d4c565b5461060082821686610e84565b818160081c161515602086015260101c1615159283838201528361062b575b60208484519015158152f35b90919250516005811015610646576020935014905f8061061f565b6021847f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b50346103d9575f6003193601126103d95760209073ffffffffffffffffffffffffffffffffffffffff6106a3610f61565b915191168152f35b50346103d9575f6003193601126103d9576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346103d95760206003193601126103d95760609073ffffffffffffffffffffffffffffffffffffffff61072d610d06565b5f83805161073a81610d4c565b8281528260208201520152165f526001602052805f209080519161075d83610d4c565b5461076b60ff821684610e84565b6020830160ff8260081c161515815260ff8385019260101c16151582526107958351809551610e4a565b511515602084015251151590820152f35b5090346103d95760206003193601126103d95735907fffffffff00000000000000000000000000000000000000000000000000000000821682036103d9576107ef602092610efc565b9051908152f35b50346103d95760206003193601126103d95773ffffffffffffffffffffffffffffffffffffffff610825610d06565b61082d611051565b169182156103b357825f526001602052815f209180519261084d84610d4c565b549061085c60ff831685610e84565b602084019060ff8360081c16158015835260ff8287019460101c16151584526109365782511561090b575f8352855f5260016020525f20935192600584101561026157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000060ff62ff000061ff0087549451151560081b169451151560101b169416911617171790557f07b81cace396ea12f83465895486ac006cd17917e41b9759ad5e663404f1497b5f80a2005b85847f1f118c35000000000000000000000000000000000000000000000000000000005f525260245ffd5b85847ff5b5d364000000000000000000000000000000000000000000000000000000005f525260245ffd5b5090346103d957816003193601126103d957803560058110156103d95760243567ffffffffffffffff81116103d95761099d9036908401610dd6565b905f926109aa5f93611156565b5f525f60205273ffffffffffffffffffffffffffffffffffffffff9182865f205416908115610a61575b8382165f526001602052865f20908751916109ee83610d4c565b54936109fd60ff861684610e84565b60ff8560081c1615159283602082015260ff8a82019660101c161515865283610a4a575b505050610a3a575b505083519216825215156020820152f35b9051909350151591505f80610a29565b5191925060058210156102615750145f8080610a21565b9050600260205282865f205416906109d4565b5090346103d957816003193601126103d957803567ffffffffffffffff81116103d957610aa49036908301610dd6565b610aac610d29565b91610ab5611051565b815115610c455773ffffffffffffffffffffffffffffffffffffffff809316928315610c1e57835f5260209160018352855f20865190610af482610d4c565b5460ff91610b0483831682610e84565b8883808460081c16159384158985015260101c161515910152610bf357610b2a85611156565b92835f525f8552875f20541680610b9d5786610b77878a600289895f52525f20837fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055610ee0565b7f06618a6a1a6a413a59097e7c362ee8260afae8f07bd94bc0938e5730584654835f80a3005b85610bbf868a95946102c2945f5260018252865f20918751926102e884610d4c565b9361034581519586957f4466cf0c000000000000000000000000000000000000000000000000000000008752860190610e4a565b85827ff5b5d364000000000000000000000000000000000000000000000000000000005f525260245ffd5b507fb4d92c53000000000000000000000000000000000000000000000000000000005f525ffd5b7f907f9fd9000000000000000000000000000000000000000000000000000000005f525ffd5b919050346103d95760206003193601126103d95773ffffffffffffffffffffffffffffffffffffffff610c9c610d06565b165f52600160205260ff815f20610cb284610d4c565b54610cbf82821685610e84565b818160081c161515602085015260101c16151591828282015282610cea575b60208383519015158152f35b909150519160058310156102615750600260209214905f610cde565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036103d957565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036103d957565b6060810190811067ffffffffffffffff821117610d6857604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610d6857604052565b81601f820112156103d95780359067ffffffffffffffff8211610d685760405192610e2960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185610d95565b828452602083830101116103d957815f926020809301838601378301015290565b906005821015610e575752565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6005821015610e575752565b516005811015610e575790565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b602090604051918183925191829101835e81015f815203902090565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060208201927f0000000000000000000000000000000000000000000000000000000000000000845216604082015260248152610f5b81610d4c565b51902090565b6040517faaabadc500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa918215611012575f92610fd957505090565b9091506020813d60201161100a575b81610ff560209383610d95565b810103126103d9575190811681036103d95790565b3d9150610fe8565b6040513d5f823e3d90fd5b9073ffffffffffffffffffffffffffffffffffffffff61104a602092959495604085526040850190610e9d565b9416910152565b61107d7fffffffff000000000000000000000000000000000000000000000000000000005f3516610efc565b602073ffffffffffffffffffffffffffffffffffffffff61109c610f61565b16916064604051809481937f9be2a88400000000000000000000000000000000000000000000000000000000835260048301523360248301523060448301525afa908115611012575f9161111b575b50156110f357565b7f23dada53000000000000000000000000000000000000000000000000000000005f5260045ffd5b90506020813d60201161114e575b8161113660209383610d95565b810103126103d9575180151581036103d9575f6110eb565b3d9150611129565b604051610f5b6020828180820195805191829101875e81015f83820152038084520182610d9556fea26469706673582212209710c4af385b620a141f69b5a6fff71fd2b040dff91ac04502db0300f2e3a39a64736f6c634300081b0033","opcodes":"PUSH1 0xC0 CALLVALUE PUSH1 0x7A JUMPI PUSH1 0x1F PUSH2 0x1247 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH1 0x7E JUMPI DUP1 DUP5 SWAP3 PUSH1 0x20 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH1 0x7A JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH1 0x7A JUMPI ADDRESS PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH1 0x40 MLOAD PUSH2 0x11B4 SWAP1 DUP2 PUSH2 0x93 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0xF27 ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x6D7 ADD MSTORE PUSH2 0xFA4 ADD MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x264E97E0 EQ PUSH2 0xC6B JUMPI POP DUP1 PUSH4 0x2967AF96 EQ PUSH2 0xA74 JUMPI DUP1 PUSH4 0x41D8C0BB EQ PUSH2 0x961 JUMPI DUP1 PUSH4 0x44969A9C EQ PUSH2 0x7F6 JUMPI DUP1 PUSH4 0x851C1BB3 EQ PUSH2 0x7A6 JUMPI DUP1 PUSH4 0x8554C327 EQ PUSH2 0x6FB JUMPI DUP1 PUSH4 0x8D928AF8 EQ PUSH2 0x6AB JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0x672 JUMPI DUP1 PUSH4 0xAE2733A4 EQ PUSH2 0x59F JUMPI DUP1 PUSH4 0xC7F90793 EQ PUSH2 0x3DD JUMPI PUSH4 0xE0376AB4 EQ PUSH2 0x98 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3D9 JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI DUP2 CALLDATALOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x3D9 JUMPI PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3D9 JUMPI PUSH2 0xD3 SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0xDD6 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 DUP6 AND DUP1 SWAP6 SUB PUSH2 0x3D9 JUMPI PUSH2 0xFF PUSH2 0x1051 JUMP JUMPDEST DUP5 ISZERO PUSH2 0x3B3 JUMPI DUP3 MLOAD ISZERO PUSH2 0x38D JUMPI DUP5 PUSH0 MSTORE PUSH1 0x20 PUSH1 0x1 DUP2 MSTORE DUP3 PUSH0 KECCAK256 SWAP7 DUP4 MLOAD SWAP8 PUSH2 0x125 DUP10 PUSH2 0xD4C JUMP JUMPDEST SLOAD SWAP8 PUSH1 0xFF SWAP9 PUSH2 0x136 DUP11 DUP3 AND DUP4 PUSH2 0xE84 JUMP JUMPDEST DUP10 DUP1 DUP3 PUSH1 0x8 SHR AND ISZERO ISZERO SWAP2 DUP3 DUP7 DUP6 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO DUP7 DUP4 ADD MSTORE PUSH2 0x354 JUMPI POP PUSH2 0x15D DUP6 PUSH2 0x1156 JUMP JUMPDEST SWAP1 DUP2 PUSH0 MSTORE PUSH0 DUP4 MSTORE DUP1 DUP6 PUSH0 KECCAK256 SLOAD AND DUP1 PUSH2 0x2C6 JUMPI POP DUP2 PUSH0 MSTORE PUSH1 0x2 DUP4 MSTORE DUP5 PUSH0 KECCAK256 SLOAD AND DUP1 PUSH2 0x28D JUMPI POP PUSH0 MSTORE PUSH0 DUP2 MSTORE DUP3 PUSH0 KECCAK256 DUP7 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP3 SLOAD AND OR SWAP1 SSTORE DUP3 MLOAD SWAP3 PUSH2 0x1BE DUP5 PUSH2 0xD4C JUMP JUMPDEST PUSH2 0x1C8 DUP7 DUP6 PUSH2 0xE84 JUMP JUMPDEST DUP2 DUP5 ADD SWAP1 PUSH1 0x1 DUP3 MSTORE PUSH1 0x1 DUP2 DUP7 ADD SWAP4 DUP2 DUP6 MSTORE DUP10 PUSH0 MSTORE MSTORE PUSH0 KECCAK256 SWAP4 MLOAD SWAP3 PUSH1 0x5 DUP5 LT ISZERO PUSH2 0x261 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000 PUSH2 0x23A SWAP7 SWAP8 SWAP9 PUSH3 0xFF0000 PUSH2 0xFF00 DUP8 SLOAD SWAP5 MLOAD ISZERO ISZERO PUSH1 0x8 SHL AND SWAP5 MLOAD ISZERO ISZERO PUSH1 0x10 SHL AND SWAP5 AND SWAP2 AND OR OR OR SWAP1 SSTORE PUSH2 0xEE0 JUMP JUMPDEST SWAP1 PUSH32 0xB12ED936CF481273B3ED037DC706D110C49BD7BA6743E67082CD772A6E9102E2 PUSH0 DUP1 LOG4 STOP JUMPDEST PUSH1 0x21 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP4 PUSH2 0x2C2 DUP8 SWAP3 DUP8 MLOAD SWAP4 DUP5 SWAP4 PUSH32 0x6D4F999000000000000000000000000000000000000000000000000000000000 DUP6 MSTORE DUP5 ADD PUSH2 0x101D JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST DUP5 PUSH2 0x2C2 DUP9 PUSH2 0x311 DUP8 DUP15 DUP12 SWAP7 PUSH0 MSTORE PUSH1 0x1 DUP3 MSTORE DUP7 PUSH0 KECCAK256 SWAP2 DUP8 MLOAD SWAP3 PUSH2 0x2E8 DUP5 PUSH2 0xD4C JUMP JUMPDEST SLOAD SWAP1 PUSH2 0x2F6 DUP4 DUP4 AND DUP6 PUSH2 0xE84 JUMP JUMPDEST DUP3 DUP3 PUSH1 0x8 SHR AND ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO DUP7 DUP3 ADD MSTORE PUSH2 0xE90 JUMP JUMPDEST SWAP4 PUSH2 0x345 DUP2 MLOAD SWAP6 DUP7 SWAP6 PUSH32 0xA1E69ED300000000000000000000000000000000000000000000000000000000 DUP8 MSTORE DUP7 ADD SWAP1 PUSH2 0xE4A JUMP JUMPDEST PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0xE9D JUMP JUMPDEST MLOAD DUP8 SWAP1 DUP5 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x261 JUMPI PUSH32 0x25A14E0C00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST PUSH32 0x830C907E00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST PUSH32 0xB4D92C5300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x3D9 JUMPI PUSH1 0x20 SWAP2 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3D9 JUMPI PUSH2 0x410 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0xDD6 JUMP JUMPDEST SWAP1 PUSH2 0x419 PUSH2 0x1051 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x578 JUMPI PUSH2 0x429 DUP3 PUSH2 0x1156 JUMP JUMPDEST SWAP1 DUP2 PUSH0 MSTORE PUSH0 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 PUSH0 KECCAK256 SLOAD AND SWAP5 DUP6 ISZERO PUSH2 0x53E JUMPI DUP6 PUSH0 MSTORE PUSH1 0x1 DUP2 MSTORE DUP2 PUSH0 KECCAK256 SWAP3 DUP3 MLOAD SWAP4 PUSH2 0x468 DUP6 PUSH2 0xD4C JUMP JUMPDEST SLOAD PUSH2 0x476 PUSH1 0xFF DUP3 AND DUP7 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0xFF DUP1 DUP3 PUSH1 0x8 SHR AND ISZERO SWAP2 DUP3 ISZERO DUP6 DUP9 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO DUP5 DUP7 ADD MSTORE PUSH2 0x50B JUMPI PUSH0 SWAP3 SWAP2 PUSH1 0x1 SWAP2 DUP5 MSTORE DUP4 DUP2 MSTORE DUP3 DUP5 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP2 SLOAD AND SWAP1 SSTORE DUP8 DUP5 MSTORE MSTORE DUP2 KECCAK256 SSTORE MLOAD SWAP2 PUSH1 0x5 DUP4 LT ISZERO PUSH2 0x261 JUMPI POP PUSH2 0x4E4 SWAP1 PUSH2 0xEE0 JUMP JUMPDEST SWAP1 PUSH32 0xFA2E7BFE3791287AA74FFE867372B78E61B60E0516978C4952F83F7416FAFB7C PUSH0 DUP1 LOG4 STOP JUMPDEST DUP3 MLOAD PUSH32 0x36A7AC0A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP1 PUSH2 0x2C2 DUP10 DUP9 DUP4 DUP12 ADD PUSH2 0x101D JUMP JUMPDEST DUP5 PUSH2 0x2C2 DUP6 DUP5 MLOAD SWAP4 DUP5 SWAP4 PUSH32 0xCD3599F900000000000000000000000000000000000000000000000000000000 DUP6 MSTORE DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0xE9D JUMP JUMPDEST DUP3 PUSH32 0x830C907E00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST POP CALLVALUE PUSH2 0x3D9 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI DUP2 CALLDATALOAD SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x3D9 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x5D9 PUSH2 0xD29 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH0 KECCAK256 SWAP2 PUSH1 0xFF DUP3 MLOAD SWAP4 PUSH2 0x5F3 DUP6 PUSH2 0xD4C JUMP JUMPDEST SLOAD PUSH2 0x600 DUP3 DUP3 AND DUP7 PUSH2 0xE84 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO SWAP3 DUP4 DUP4 DUP3 ADD MSTORE DUP4 PUSH2 0x62B JUMPI JUMPDEST PUSH1 0x20 DUP5 DUP5 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 SWAP3 POP MLOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x646 JUMPI PUSH1 0x20 SWAP4 POP EQ SWAP1 PUSH0 DUP1 PUSH2 0x61F JUMP JUMPDEST PUSH1 0x21 DUP5 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP CALLVALUE PUSH2 0x3D9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x6A3 PUSH2 0xF61 JUMP JUMPDEST SWAP2 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x3D9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x3D9 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x72D PUSH2 0xD06 JUMP JUMPDEST PUSH0 DUP4 DUP1 MLOAD PUSH2 0x73A DUP2 PUSH2 0xD4C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE AND PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH0 KECCAK256 SWAP1 DUP1 MLOAD SWAP2 PUSH2 0x75D DUP4 PUSH2 0xD4C JUMP JUMPDEST SLOAD PUSH2 0x76B PUSH1 0xFF DUP3 AND DUP5 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND ISZERO ISZERO DUP2 MSTORE PUSH1 0xFF DUP4 DUP6 ADD SWAP3 PUSH1 0x10 SHR AND ISZERO ISZERO DUP3 MSTORE PUSH2 0x795 DUP4 MLOAD DUP1 SWAP6 MLOAD PUSH2 0xE4A JUMP JUMPDEST MLOAD ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE MLOAD ISZERO ISZERO SWAP1 DUP3 ADD MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x3D9 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI CALLDATALOAD SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND DUP3 SUB PUSH2 0x3D9 JUMPI PUSH2 0x7EF PUSH1 0x20 SWAP3 PUSH2 0xEFC JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x3D9 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x825 PUSH2 0xD06 JUMP JUMPDEST PUSH2 0x82D PUSH2 0x1051 JUMP JUMPDEST AND SWAP2 DUP3 ISZERO PUSH2 0x3B3 JUMPI DUP3 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 PUSH0 KECCAK256 SWAP2 DUP1 MLOAD SWAP3 PUSH2 0x84D DUP5 PUSH2 0xD4C JUMP JUMPDEST SLOAD SWAP1 PUSH2 0x85C PUSH1 0xFF DUP4 AND DUP6 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD SWAP1 PUSH1 0xFF DUP4 PUSH1 0x8 SHR AND ISZERO DUP1 ISZERO DUP4 MSTORE PUSH1 0xFF DUP3 DUP8 ADD SWAP5 PUSH1 0x10 SHR AND ISZERO ISZERO DUP5 MSTORE PUSH2 0x936 JUMPI DUP3 MLOAD ISZERO PUSH2 0x90B JUMPI PUSH0 DUP4 MSTORE DUP6 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH0 KECCAK256 SWAP4 MLOAD SWAP3 PUSH1 0x5 DUP5 LT ISZERO PUSH2 0x261 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000 PUSH1 0xFF PUSH3 0xFF0000 PUSH2 0xFF00 DUP8 SLOAD SWAP5 MLOAD ISZERO ISZERO PUSH1 0x8 SHL AND SWAP5 MLOAD ISZERO ISZERO PUSH1 0x10 SHL AND SWAP5 AND SWAP2 AND OR OR OR SWAP1 SSTORE PUSH32 0x7B81CACE396EA12F83465895486AC006CD17917E41B9759AD5E663404F1497B PUSH0 DUP1 LOG2 STOP JUMPDEST DUP6 DUP5 PUSH32 0x1F118C3500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP6 DUP5 PUSH32 0xF5B5D36400000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x3D9 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI DUP1 CALLDATALOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x3D9 JUMPI PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3D9 JUMPI PUSH2 0x99D SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0xDD6 JUMP JUMPDEST SWAP1 PUSH0 SWAP3 PUSH2 0x9AA PUSH0 SWAP4 PUSH2 0x1156 JUMP JUMPDEST PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP7 PUSH0 KECCAK256 SLOAD AND SWAP1 DUP2 ISZERO PUSH2 0xA61 JUMPI JUMPDEST DUP4 DUP3 AND PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP7 PUSH0 KECCAK256 SWAP1 DUP8 MLOAD SWAP2 PUSH2 0x9EE DUP4 PUSH2 0xD4C JUMP JUMPDEST SLOAD SWAP4 PUSH2 0x9FD PUSH1 0xFF DUP7 AND DUP5 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0xFF DUP6 PUSH1 0x8 SHR AND ISZERO ISZERO SWAP3 DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xFF DUP11 DUP3 ADD SWAP7 PUSH1 0x10 SHR AND ISZERO ISZERO DUP7 MSTORE DUP4 PUSH2 0xA4A JUMPI JUMPDEST POP POP POP PUSH2 0xA3A JUMPI JUMPDEST POP POP DUP4 MLOAD SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 MLOAD SWAP1 SWAP4 POP ISZERO ISZERO SWAP2 POP PUSH0 DUP1 PUSH2 0xA29 JUMP JUMPDEST MLOAD SWAP2 SWAP3 POP PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x261 JUMPI POP EQ PUSH0 DUP1 DUP1 PUSH2 0xA21 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 PUSH1 0x20 MSTORE DUP3 DUP7 PUSH0 KECCAK256 SLOAD AND SWAP1 PUSH2 0x9D4 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x3D9 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3D9 JUMPI PUSH2 0xAA4 SWAP1 CALLDATASIZE SWAP1 DUP4 ADD PUSH2 0xDD6 JUMP JUMPDEST PUSH2 0xAAC PUSH2 0xD29 JUMP JUMPDEST SWAP2 PUSH2 0xAB5 PUSH2 0x1051 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0xC45 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP4 AND SWAP3 DUP4 ISZERO PUSH2 0xC1E JUMPI DUP4 PUSH0 MSTORE PUSH1 0x20 SWAP2 PUSH1 0x1 DUP4 MSTORE DUP6 PUSH0 KECCAK256 DUP7 MLOAD SWAP1 PUSH2 0xAF4 DUP3 PUSH2 0xD4C JUMP JUMPDEST SLOAD PUSH1 0xFF SWAP2 PUSH2 0xB04 DUP4 DUP4 AND DUP3 PUSH2 0xE84 JUMP JUMPDEST DUP9 DUP4 DUP1 DUP5 PUSH1 0x8 SHR AND ISZERO SWAP4 DUP5 ISZERO DUP10 DUP6 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO SWAP2 ADD MSTORE PUSH2 0xBF3 JUMPI PUSH2 0xB2A DUP6 PUSH2 0x1156 JUMP JUMPDEST SWAP3 DUP4 PUSH0 MSTORE PUSH0 DUP6 MSTORE DUP8 PUSH0 KECCAK256 SLOAD AND DUP1 PUSH2 0xB9D JUMPI DUP7 PUSH2 0xB77 DUP8 DUP11 PUSH1 0x2 DUP10 DUP10 PUSH0 MSTORE MSTORE PUSH0 KECCAK256 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0xEE0 JUMP JUMPDEST PUSH32 0x6618A6A1A6A413A59097E7C362EE8260AFAE8F07BD94BC0938E573058465483 PUSH0 DUP1 LOG3 STOP JUMPDEST DUP6 PUSH2 0xBBF DUP7 DUP11 SWAP6 SWAP5 PUSH2 0x2C2 SWAP5 PUSH0 MSTORE PUSH1 0x1 DUP3 MSTORE DUP7 PUSH0 KECCAK256 SWAP2 DUP8 MLOAD SWAP3 PUSH2 0x2E8 DUP5 PUSH2 0xD4C JUMP JUMPDEST SWAP4 PUSH2 0x345 DUP2 MLOAD SWAP6 DUP7 SWAP6 PUSH32 0x4466CF0C00000000000000000000000000000000000000000000000000000000 DUP8 MSTORE DUP7 ADD SWAP1 PUSH2 0xE4A JUMP JUMPDEST DUP6 DUP3 PUSH32 0xF5B5D36400000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP PUSH32 0xB4D92C5300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST PUSH32 0x907F9FD900000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x3D9 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xC9C PUSH2 0xD06 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0xFF DUP2 PUSH0 KECCAK256 PUSH2 0xCB2 DUP5 PUSH2 0xD4C JUMP JUMPDEST SLOAD PUSH2 0xCBF DUP3 DUP3 AND DUP6 PUSH2 0xE84 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO SWAP2 DUP3 DUP3 DUP3 ADD MSTORE DUP3 PUSH2 0xCEA JUMPI JUMPDEST PUSH1 0x20 DUP4 DUP4 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP MLOAD SWAP2 PUSH1 0x5 DUP4 LT ISZERO PUSH2 0x261 JUMPI POP PUSH1 0x2 PUSH1 0x20 SWAP3 EQ SWAP1 PUSH0 PUSH2 0xCDE JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x3D9 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x3D9 JUMPI JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xD68 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xD68 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x3D9 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xD68 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0xE29 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND ADD DUP6 PUSH2 0xD95 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x3D9 JUMPI DUP2 PUSH0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0xE57 JUMPI MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x5 DUP3 LT ISZERO PUSH2 0xE57 JUMPI MSTORE JUMP JUMPDEST MLOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0xE57 JUMPI SWAP1 JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x20 DUP1 SWAP5 DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP8 MSTORE ADD DUP7 DUP7 ADD MCOPY PUSH0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP2 DUP4 SWAP3 MLOAD SWAP2 DUP3 SWAP2 ADD DUP4 MCOPY DUP2 ADD PUSH0 DUP2 MSTORE SUB SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x0 DUP5 MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0xF5B DUP2 PUSH2 0xD4C JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x1012 JUMPI PUSH0 SWAP3 PUSH2 0xFD9 JUMPI POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x100A JUMPI JUMPDEST DUP2 PUSH2 0xFF5 PUSH1 0x20 SWAP4 DUP4 PUSH2 0xD95 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D9 JUMPI MLOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x3D9 JUMPI SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xFE8 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x104A PUSH1 0x20 SWAP3 SWAP6 SWAP5 SWAP6 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0xE9D JUMP JUMPDEST SWAP5 AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x107D PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH0 CALLDATALOAD AND PUSH2 0xEFC JUMP JUMPDEST PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x109C PUSH2 0xF61 JUMP JUMPDEST AND SWAP2 PUSH1 0x64 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH32 0x9BE2A88400000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1012 JUMPI PUSH0 SWAP2 PUSH2 0x111B JUMPI JUMPDEST POP ISZERO PUSH2 0x10F3 JUMPI JUMP JUMPDEST PUSH32 0x23DADA5300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x114E JUMPI JUMPDEST DUP2 PUSH2 0x1136 PUSH1 0x20 SWAP4 DUP4 PUSH2 0xD95 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D9 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x3D9 JUMPI PUSH0 PUSH2 0x10EB JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1129 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF5B PUSH1 0x20 DUP3 DUP2 DUP1 DUP3 ADD SWAP6 DUP1 MLOAD SWAP2 DUP3 SWAP2 ADD DUP8 MCOPY DUP2 ADD PUSH0 DUP4 DUP3 ADD MSTORE SUB DUP1 DUP5 MSTORE ADD DUP3 PUSH2 0xD95 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 LT 0xC4 0xAF CODESIZE JUMPDEST PUSH3 0xA141F PUSH10 0xB5A6FFF71FD2B040DFF9 BYTE 0xC0 GASLIMIT MUL 0xDB SUB STOP CALLCODE 0xE3 LOG3 SWAP11 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"2741:12089:34:-:0;;;;;;;;;;;;;-1:-1:-1;;2741:12089:34;;;;-1:-1:-1;;;;;2741:12089:34;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2741:12089:34;;;;;;978:4:23;1347:46:16;;998:14:23;;2741:12089:34;;;;;;;;1347:46:16;2741:12089:34;;;;;998:14:23;2741:12089:34;;;;;;;;;;;;-1:-1:-1;2741:12089:34;;;;;;-1:-1:-1;2741:12089:34;;;;;-1:-1:-1;2741:12089:34"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":3369,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_11951":{"entryPoint":3334,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_string":{"entryPoint":3542,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_enum_ContractType":{"entryPoint":3658,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_string":{"entryPoint":3741,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_address":{"entryPoint":4125,"id":null,"parameterSlots":3,"returnSlots":1},"finalize_allocation":{"entryPoint":3477,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_11954":{"entryPoint":3404,"id":null,"parameterSlots":1,"returnSlots":0},"fun_authenticateCaller":{"entryPoint":4177,"id":3203,"parameterSlots":0,"returnSlots":0},"fun_getActionId":{"entryPoint":3836,"id":3221,"parameterSlots":1,"returnSlots":1},"fun_getAuthorizer":{"entryPoint":3937,"id":5440,"parameterSlots":0,"returnSlots":1},"fun_getContractId":{"entryPoint":4438,"id":9325,"parameterSlots":1,"returnSlots":1},"packed_hashed_string_to_string":{"entryPoint":3808,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_memoryt_enum_ContractType":{"entryPoint":3728,"id":null,"parameterSlots":1,"returnSlots":1},"write_to_memory_enum_ContractType":{"entryPoint":3716,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"3161":[{"length":32,"start":3879}],"5391":[{"length":32,"start":1751},{"length":32,"start":4004}]},"linkReferences":{},"object":"6080604081815260049182361015610015575f80fd5b5f3560e01c908163264e97e014610c6b575080632967af9614610a7457806341d8c0bb1461096157806344969a9c146107f6578063851c1bb3146107a65780638554c327146106fb5780638d928af8146106ab578063aaabadc514610672578063ae2733a41461059f578063c7f90793146103dd5763e0376ab414610098575f80fd5b346103d95760606003193601126103d957813560058110156103d95760243567ffffffffffffffff81116103d9576100d39036908501610dd6565b6044359273ffffffffffffffffffffffffffffffffffffffff948585168095036103d9576100ff611051565b84156103b35782511561038d57845f52602060018152825f209683519761012589610d4c565b549760ff986101368a821683610e84565b89808260081c16151591828685015260101c16151586830152610354575061015d85611156565b90815f525f835280855f205416806102c65750815f5260028352845f2054168061028d57505f525f8152825f20867fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790558251926101be84610d4c565b6101c88685610e84565b8184019060018252600181860193818552895f52525f20935192600584101561026157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000061023a96979862ff000061ff0087549451151560081b169451151560101b16941691161717179055610ee0565b907fb12ed936cf481273b3ed037dc706d110c49bd7ba6743e67082cd772a6e9102e25f80a4005b6021907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b836102c2879287519384937f6d4f9990000000000000000000000000000000000000000000000000000000008552840161101d565b0390fd5b846102c288610311878e8b965f5260018252865f20918751926102e884610d4c565b54906102f683831685610e84565b828260081c1615159084015260101c16151586820152610e90565b9361034581519586957fa1e69ed3000000000000000000000000000000000000000000000000000000008752860190610e4a565b60248401526044830190610e9d565b518790846005821015610261577f25a14e0c000000000000000000000000000000000000000000000000000000005f525260245260445ffd5b7f830c907e000000000000000000000000000000000000000000000000000000005f525ffd5b7fb4d92c53000000000000000000000000000000000000000000000000000000005f525ffd5b5f80fd5b5090346103d957602091826003193601126103d957813567ffffffffffffffff81116103d9576104109036908401610dd6565b90610419611051565b8151156105785761042982611156565b90815f525f855273ffffffffffffffffffffffffffffffffffffffff815f20541694851561053e57855f5260018152815f209282519361046885610d4c565b5461047660ff821686610e84565b60ff808260081c16159182158588015260101c1615158486015261050b575f929160019184528381528284207fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055878452528120555191600583101561026157506104e490610ee0565b907ffa2e7bfe3791287aa74ffe867372b78e61b60e0516978c4952f83f7416fafb7c5f80a4005b82517f36a7ac0a000000000000000000000000000000000000000000000000000000008152806102c28988838b0161101d565b846102c28584519384937fcd3599f90000000000000000000000000000000000000000000000000000000085528401526024830190610e9d565b827f830c907e000000000000000000000000000000000000000000000000000000005f525ffd5b50346103d957806003193601126103d95781359060058210156103d95773ffffffffffffffffffffffffffffffffffffffff6105d9610d29565b165f526001602052805f209160ff8251936105f385610d4c565b5461060082821686610e84565b818160081c161515602086015260101c1615159283838201528361062b575b60208484519015158152f35b90919250516005811015610646576020935014905f8061061f565b6021847f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b50346103d9575f6003193601126103d95760209073ffffffffffffffffffffffffffffffffffffffff6106a3610f61565b915191168152f35b50346103d9575f6003193601126103d9576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346103d95760206003193601126103d95760609073ffffffffffffffffffffffffffffffffffffffff61072d610d06565b5f83805161073a81610d4c565b8281528260208201520152165f526001602052805f209080519161075d83610d4c565b5461076b60ff821684610e84565b6020830160ff8260081c161515815260ff8385019260101c16151582526107958351809551610e4a565b511515602084015251151590820152f35b5090346103d95760206003193601126103d95735907fffffffff00000000000000000000000000000000000000000000000000000000821682036103d9576107ef602092610efc565b9051908152f35b50346103d95760206003193601126103d95773ffffffffffffffffffffffffffffffffffffffff610825610d06565b61082d611051565b169182156103b357825f526001602052815f209180519261084d84610d4c565b549061085c60ff831685610e84565b602084019060ff8360081c16158015835260ff8287019460101c16151584526109365782511561090b575f8352855f5260016020525f20935192600584101561026157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000060ff62ff000061ff0087549451151560081b169451151560101b169416911617171790557f07b81cace396ea12f83465895486ac006cd17917e41b9759ad5e663404f1497b5f80a2005b85847f1f118c35000000000000000000000000000000000000000000000000000000005f525260245ffd5b85847ff5b5d364000000000000000000000000000000000000000000000000000000005f525260245ffd5b5090346103d957816003193601126103d957803560058110156103d95760243567ffffffffffffffff81116103d95761099d9036908401610dd6565b905f926109aa5f93611156565b5f525f60205273ffffffffffffffffffffffffffffffffffffffff9182865f205416908115610a61575b8382165f526001602052865f20908751916109ee83610d4c565b54936109fd60ff861684610e84565b60ff8560081c1615159283602082015260ff8a82019660101c161515865283610a4a575b505050610a3a575b505083519216825215156020820152f35b9051909350151591505f80610a29565b5191925060058210156102615750145f8080610a21565b9050600260205282865f205416906109d4565b5090346103d957816003193601126103d957803567ffffffffffffffff81116103d957610aa49036908301610dd6565b610aac610d29565b91610ab5611051565b815115610c455773ffffffffffffffffffffffffffffffffffffffff809316928315610c1e57835f5260209160018352855f20865190610af482610d4c565b5460ff91610b0483831682610e84565b8883808460081c16159384158985015260101c161515910152610bf357610b2a85611156565b92835f525f8552875f20541680610b9d5786610b77878a600289895f52525f20837fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055610ee0565b7f06618a6a1a6a413a59097e7c362ee8260afae8f07bd94bc0938e5730584654835f80a3005b85610bbf868a95946102c2945f5260018252865f20918751926102e884610d4c565b9361034581519586957f4466cf0c000000000000000000000000000000000000000000000000000000008752860190610e4a565b85827ff5b5d364000000000000000000000000000000000000000000000000000000005f525260245ffd5b507fb4d92c53000000000000000000000000000000000000000000000000000000005f525ffd5b7f907f9fd9000000000000000000000000000000000000000000000000000000005f525ffd5b919050346103d95760206003193601126103d95773ffffffffffffffffffffffffffffffffffffffff610c9c610d06565b165f52600160205260ff815f20610cb284610d4c565b54610cbf82821685610e84565b818160081c161515602085015260101c16151591828282015282610cea575b60208383519015158152f35b909150519160058310156102615750600260209214905f610cde565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036103d957565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036103d957565b6060810190811067ffffffffffffffff821117610d6857604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610d6857604052565b81601f820112156103d95780359067ffffffffffffffff8211610d685760405192610e2960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185610d95565b828452602083830101116103d957815f926020809301838601378301015290565b906005821015610e575752565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6005821015610e575752565b516005811015610e575790565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b602090604051918183925191829101835e81015f815203902090565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060208201927f0000000000000000000000000000000000000000000000000000000000000000845216604082015260248152610f5b81610d4c565b51902090565b6040517faaabadc500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa918215611012575f92610fd957505090565b9091506020813d60201161100a575b81610ff560209383610d95565b810103126103d9575190811681036103d95790565b3d9150610fe8565b6040513d5f823e3d90fd5b9073ffffffffffffffffffffffffffffffffffffffff61104a602092959495604085526040850190610e9d565b9416910152565b61107d7fffffffff000000000000000000000000000000000000000000000000000000005f3516610efc565b602073ffffffffffffffffffffffffffffffffffffffff61109c610f61565b16916064604051809481937f9be2a88400000000000000000000000000000000000000000000000000000000835260048301523360248301523060448301525afa908115611012575f9161111b575b50156110f357565b7f23dada53000000000000000000000000000000000000000000000000000000005f5260045ffd5b90506020813d60201161114e575b8161113660209383610d95565b810103126103d9575180151581036103d9575f6110eb565b3d9150611129565b604051610f5b6020828180820195805191829101875e81015f83820152038084520182610d9556fea26469706673582212209710c4af385b620a141f69b5a6fff71fd2b040dff91ac04502db0300f2e3a39a64736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x264E97E0 EQ PUSH2 0xC6B JUMPI POP DUP1 PUSH4 0x2967AF96 EQ PUSH2 0xA74 JUMPI DUP1 PUSH4 0x41D8C0BB EQ PUSH2 0x961 JUMPI DUP1 PUSH4 0x44969A9C EQ PUSH2 0x7F6 JUMPI DUP1 PUSH4 0x851C1BB3 EQ PUSH2 0x7A6 JUMPI DUP1 PUSH4 0x8554C327 EQ PUSH2 0x6FB JUMPI DUP1 PUSH4 0x8D928AF8 EQ PUSH2 0x6AB JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0x672 JUMPI DUP1 PUSH4 0xAE2733A4 EQ PUSH2 0x59F JUMPI DUP1 PUSH4 0xC7F90793 EQ PUSH2 0x3DD JUMPI PUSH4 0xE0376AB4 EQ PUSH2 0x98 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3D9 JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI DUP2 CALLDATALOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x3D9 JUMPI PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3D9 JUMPI PUSH2 0xD3 SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0xDD6 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 DUP6 AND DUP1 SWAP6 SUB PUSH2 0x3D9 JUMPI PUSH2 0xFF PUSH2 0x1051 JUMP JUMPDEST DUP5 ISZERO PUSH2 0x3B3 JUMPI DUP3 MLOAD ISZERO PUSH2 0x38D JUMPI DUP5 PUSH0 MSTORE PUSH1 0x20 PUSH1 0x1 DUP2 MSTORE DUP3 PUSH0 KECCAK256 SWAP7 DUP4 MLOAD SWAP8 PUSH2 0x125 DUP10 PUSH2 0xD4C JUMP JUMPDEST SLOAD SWAP8 PUSH1 0xFF SWAP9 PUSH2 0x136 DUP11 DUP3 AND DUP4 PUSH2 0xE84 JUMP JUMPDEST DUP10 DUP1 DUP3 PUSH1 0x8 SHR AND ISZERO ISZERO SWAP2 DUP3 DUP7 DUP6 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO DUP7 DUP4 ADD MSTORE PUSH2 0x354 JUMPI POP PUSH2 0x15D DUP6 PUSH2 0x1156 JUMP JUMPDEST SWAP1 DUP2 PUSH0 MSTORE PUSH0 DUP4 MSTORE DUP1 DUP6 PUSH0 KECCAK256 SLOAD AND DUP1 PUSH2 0x2C6 JUMPI POP DUP2 PUSH0 MSTORE PUSH1 0x2 DUP4 MSTORE DUP5 PUSH0 KECCAK256 SLOAD AND DUP1 PUSH2 0x28D JUMPI POP PUSH0 MSTORE PUSH0 DUP2 MSTORE DUP3 PUSH0 KECCAK256 DUP7 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP3 SLOAD AND OR SWAP1 SSTORE DUP3 MLOAD SWAP3 PUSH2 0x1BE DUP5 PUSH2 0xD4C JUMP JUMPDEST PUSH2 0x1C8 DUP7 DUP6 PUSH2 0xE84 JUMP JUMPDEST DUP2 DUP5 ADD SWAP1 PUSH1 0x1 DUP3 MSTORE PUSH1 0x1 DUP2 DUP7 ADD SWAP4 DUP2 DUP6 MSTORE DUP10 PUSH0 MSTORE MSTORE PUSH0 KECCAK256 SWAP4 MLOAD SWAP3 PUSH1 0x5 DUP5 LT ISZERO PUSH2 0x261 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000 PUSH2 0x23A SWAP7 SWAP8 SWAP9 PUSH3 0xFF0000 PUSH2 0xFF00 DUP8 SLOAD SWAP5 MLOAD ISZERO ISZERO PUSH1 0x8 SHL AND SWAP5 MLOAD ISZERO ISZERO PUSH1 0x10 SHL AND SWAP5 AND SWAP2 AND OR OR OR SWAP1 SSTORE PUSH2 0xEE0 JUMP JUMPDEST SWAP1 PUSH32 0xB12ED936CF481273B3ED037DC706D110C49BD7BA6743E67082CD772A6E9102E2 PUSH0 DUP1 LOG4 STOP JUMPDEST PUSH1 0x21 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP4 PUSH2 0x2C2 DUP8 SWAP3 DUP8 MLOAD SWAP4 DUP5 SWAP4 PUSH32 0x6D4F999000000000000000000000000000000000000000000000000000000000 DUP6 MSTORE DUP5 ADD PUSH2 0x101D JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST DUP5 PUSH2 0x2C2 DUP9 PUSH2 0x311 DUP8 DUP15 DUP12 SWAP7 PUSH0 MSTORE PUSH1 0x1 DUP3 MSTORE DUP7 PUSH0 KECCAK256 SWAP2 DUP8 MLOAD SWAP3 PUSH2 0x2E8 DUP5 PUSH2 0xD4C JUMP JUMPDEST SLOAD SWAP1 PUSH2 0x2F6 DUP4 DUP4 AND DUP6 PUSH2 0xE84 JUMP JUMPDEST DUP3 DUP3 PUSH1 0x8 SHR AND ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO DUP7 DUP3 ADD MSTORE PUSH2 0xE90 JUMP JUMPDEST SWAP4 PUSH2 0x345 DUP2 MLOAD SWAP6 DUP7 SWAP6 PUSH32 0xA1E69ED300000000000000000000000000000000000000000000000000000000 DUP8 MSTORE DUP7 ADD SWAP1 PUSH2 0xE4A JUMP JUMPDEST PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0xE9D JUMP JUMPDEST MLOAD DUP8 SWAP1 DUP5 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x261 JUMPI PUSH32 0x25A14E0C00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST PUSH32 0x830C907E00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST PUSH32 0xB4D92C5300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x3D9 JUMPI PUSH1 0x20 SWAP2 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3D9 JUMPI PUSH2 0x410 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0xDD6 JUMP JUMPDEST SWAP1 PUSH2 0x419 PUSH2 0x1051 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x578 JUMPI PUSH2 0x429 DUP3 PUSH2 0x1156 JUMP JUMPDEST SWAP1 DUP2 PUSH0 MSTORE PUSH0 DUP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 PUSH0 KECCAK256 SLOAD AND SWAP5 DUP6 ISZERO PUSH2 0x53E JUMPI DUP6 PUSH0 MSTORE PUSH1 0x1 DUP2 MSTORE DUP2 PUSH0 KECCAK256 SWAP3 DUP3 MLOAD SWAP4 PUSH2 0x468 DUP6 PUSH2 0xD4C JUMP JUMPDEST SLOAD PUSH2 0x476 PUSH1 0xFF DUP3 AND DUP7 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0xFF DUP1 DUP3 PUSH1 0x8 SHR AND ISZERO SWAP2 DUP3 ISZERO DUP6 DUP9 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO DUP5 DUP7 ADD MSTORE PUSH2 0x50B JUMPI PUSH0 SWAP3 SWAP2 PUSH1 0x1 SWAP2 DUP5 MSTORE DUP4 DUP2 MSTORE DUP3 DUP5 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP2 SLOAD AND SWAP1 SSTORE DUP8 DUP5 MSTORE MSTORE DUP2 KECCAK256 SSTORE MLOAD SWAP2 PUSH1 0x5 DUP4 LT ISZERO PUSH2 0x261 JUMPI POP PUSH2 0x4E4 SWAP1 PUSH2 0xEE0 JUMP JUMPDEST SWAP1 PUSH32 0xFA2E7BFE3791287AA74FFE867372B78E61B60E0516978C4952F83F7416FAFB7C PUSH0 DUP1 LOG4 STOP JUMPDEST DUP3 MLOAD PUSH32 0x36A7AC0A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP1 PUSH2 0x2C2 DUP10 DUP9 DUP4 DUP12 ADD PUSH2 0x101D JUMP JUMPDEST DUP5 PUSH2 0x2C2 DUP6 DUP5 MLOAD SWAP4 DUP5 SWAP4 PUSH32 0xCD3599F900000000000000000000000000000000000000000000000000000000 DUP6 MSTORE DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0xE9D JUMP JUMPDEST DUP3 PUSH32 0x830C907E00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST POP CALLVALUE PUSH2 0x3D9 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI DUP2 CALLDATALOAD SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x3D9 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x5D9 PUSH2 0xD29 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH0 KECCAK256 SWAP2 PUSH1 0xFF DUP3 MLOAD SWAP4 PUSH2 0x5F3 DUP6 PUSH2 0xD4C JUMP JUMPDEST SLOAD PUSH2 0x600 DUP3 DUP3 AND DUP7 PUSH2 0xE84 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO SWAP3 DUP4 DUP4 DUP3 ADD MSTORE DUP4 PUSH2 0x62B JUMPI JUMPDEST PUSH1 0x20 DUP5 DUP5 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 SWAP3 POP MLOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x646 JUMPI PUSH1 0x20 SWAP4 POP EQ SWAP1 PUSH0 DUP1 PUSH2 0x61F JUMP JUMPDEST PUSH1 0x21 DUP5 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP CALLVALUE PUSH2 0x3D9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x6A3 PUSH2 0xF61 JUMP JUMPDEST SWAP2 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x3D9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x3D9 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x72D PUSH2 0xD06 JUMP JUMPDEST PUSH0 DUP4 DUP1 MLOAD PUSH2 0x73A DUP2 PUSH2 0xD4C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE AND PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH0 KECCAK256 SWAP1 DUP1 MLOAD SWAP2 PUSH2 0x75D DUP4 PUSH2 0xD4C JUMP JUMPDEST SLOAD PUSH2 0x76B PUSH1 0xFF DUP3 AND DUP5 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND ISZERO ISZERO DUP2 MSTORE PUSH1 0xFF DUP4 DUP6 ADD SWAP3 PUSH1 0x10 SHR AND ISZERO ISZERO DUP3 MSTORE PUSH2 0x795 DUP4 MLOAD DUP1 SWAP6 MLOAD PUSH2 0xE4A JUMP JUMPDEST MLOAD ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE MLOAD ISZERO ISZERO SWAP1 DUP3 ADD MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x3D9 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI CALLDATALOAD SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND DUP3 SUB PUSH2 0x3D9 JUMPI PUSH2 0x7EF PUSH1 0x20 SWAP3 PUSH2 0xEFC JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x3D9 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x825 PUSH2 0xD06 JUMP JUMPDEST PUSH2 0x82D PUSH2 0x1051 JUMP JUMPDEST AND SWAP2 DUP3 ISZERO PUSH2 0x3B3 JUMPI DUP3 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 PUSH0 KECCAK256 SWAP2 DUP1 MLOAD SWAP3 PUSH2 0x84D DUP5 PUSH2 0xD4C JUMP JUMPDEST SLOAD SWAP1 PUSH2 0x85C PUSH1 0xFF DUP4 AND DUP6 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD SWAP1 PUSH1 0xFF DUP4 PUSH1 0x8 SHR AND ISZERO DUP1 ISZERO DUP4 MSTORE PUSH1 0xFF DUP3 DUP8 ADD SWAP5 PUSH1 0x10 SHR AND ISZERO ISZERO DUP5 MSTORE PUSH2 0x936 JUMPI DUP3 MLOAD ISZERO PUSH2 0x90B JUMPI PUSH0 DUP4 MSTORE DUP6 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH0 KECCAK256 SWAP4 MLOAD SWAP3 PUSH1 0x5 DUP5 LT ISZERO PUSH2 0x261 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000 PUSH1 0xFF PUSH3 0xFF0000 PUSH2 0xFF00 DUP8 SLOAD SWAP5 MLOAD ISZERO ISZERO PUSH1 0x8 SHL AND SWAP5 MLOAD ISZERO ISZERO PUSH1 0x10 SHL AND SWAP5 AND SWAP2 AND OR OR OR SWAP1 SSTORE PUSH32 0x7B81CACE396EA12F83465895486AC006CD17917E41B9759AD5E663404F1497B PUSH0 DUP1 LOG2 STOP JUMPDEST DUP6 DUP5 PUSH32 0x1F118C3500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP6 DUP5 PUSH32 0xF5B5D36400000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x3D9 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI DUP1 CALLDATALOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x3D9 JUMPI PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3D9 JUMPI PUSH2 0x99D SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0xDD6 JUMP JUMPDEST SWAP1 PUSH0 SWAP3 PUSH2 0x9AA PUSH0 SWAP4 PUSH2 0x1156 JUMP JUMPDEST PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP7 PUSH0 KECCAK256 SLOAD AND SWAP1 DUP2 ISZERO PUSH2 0xA61 JUMPI JUMPDEST DUP4 DUP3 AND PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP7 PUSH0 KECCAK256 SWAP1 DUP8 MLOAD SWAP2 PUSH2 0x9EE DUP4 PUSH2 0xD4C JUMP JUMPDEST SLOAD SWAP4 PUSH2 0x9FD PUSH1 0xFF DUP7 AND DUP5 PUSH2 0xE84 JUMP JUMPDEST PUSH1 0xFF DUP6 PUSH1 0x8 SHR AND ISZERO ISZERO SWAP3 DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xFF DUP11 DUP3 ADD SWAP7 PUSH1 0x10 SHR AND ISZERO ISZERO DUP7 MSTORE DUP4 PUSH2 0xA4A JUMPI JUMPDEST POP POP POP PUSH2 0xA3A JUMPI JUMPDEST POP POP DUP4 MLOAD SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 MLOAD SWAP1 SWAP4 POP ISZERO ISZERO SWAP2 POP PUSH0 DUP1 PUSH2 0xA29 JUMP JUMPDEST MLOAD SWAP2 SWAP3 POP PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x261 JUMPI POP EQ PUSH0 DUP1 DUP1 PUSH2 0xA21 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 PUSH1 0x20 MSTORE DUP3 DUP7 PUSH0 KECCAK256 SLOAD AND SWAP1 PUSH2 0x9D4 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x3D9 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3D9 JUMPI PUSH2 0xAA4 SWAP1 CALLDATASIZE SWAP1 DUP4 ADD PUSH2 0xDD6 JUMP JUMPDEST PUSH2 0xAAC PUSH2 0xD29 JUMP JUMPDEST SWAP2 PUSH2 0xAB5 PUSH2 0x1051 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0xC45 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP4 AND SWAP3 DUP4 ISZERO PUSH2 0xC1E JUMPI DUP4 PUSH0 MSTORE PUSH1 0x20 SWAP2 PUSH1 0x1 DUP4 MSTORE DUP6 PUSH0 KECCAK256 DUP7 MLOAD SWAP1 PUSH2 0xAF4 DUP3 PUSH2 0xD4C JUMP JUMPDEST SLOAD PUSH1 0xFF SWAP2 PUSH2 0xB04 DUP4 DUP4 AND DUP3 PUSH2 0xE84 JUMP JUMPDEST DUP9 DUP4 DUP1 DUP5 PUSH1 0x8 SHR AND ISZERO SWAP4 DUP5 ISZERO DUP10 DUP6 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO SWAP2 ADD MSTORE PUSH2 0xBF3 JUMPI PUSH2 0xB2A DUP6 PUSH2 0x1156 JUMP JUMPDEST SWAP3 DUP4 PUSH0 MSTORE PUSH0 DUP6 MSTORE DUP8 PUSH0 KECCAK256 SLOAD AND DUP1 PUSH2 0xB9D JUMPI DUP7 PUSH2 0xB77 DUP8 DUP11 PUSH1 0x2 DUP10 DUP10 PUSH0 MSTORE MSTORE PUSH0 KECCAK256 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0xEE0 JUMP JUMPDEST PUSH32 0x6618A6A1A6A413A59097E7C362EE8260AFAE8F07BD94BC0938E573058465483 PUSH0 DUP1 LOG3 STOP JUMPDEST DUP6 PUSH2 0xBBF DUP7 DUP11 SWAP6 SWAP5 PUSH2 0x2C2 SWAP5 PUSH0 MSTORE PUSH1 0x1 DUP3 MSTORE DUP7 PUSH0 KECCAK256 SWAP2 DUP8 MLOAD SWAP3 PUSH2 0x2E8 DUP5 PUSH2 0xD4C JUMP JUMPDEST SWAP4 PUSH2 0x345 DUP2 MLOAD SWAP6 DUP7 SWAP6 PUSH32 0x4466CF0C00000000000000000000000000000000000000000000000000000000 DUP8 MSTORE DUP7 ADD SWAP1 PUSH2 0xE4A JUMP JUMPDEST DUP6 DUP3 PUSH32 0xF5B5D36400000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP PUSH32 0xB4D92C5300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST PUSH32 0x907F9FD900000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x3D9 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3D9 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xC9C PUSH2 0xD06 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0xFF DUP2 PUSH0 KECCAK256 PUSH2 0xCB2 DUP5 PUSH2 0xD4C JUMP JUMPDEST SLOAD PUSH2 0xCBF DUP3 DUP3 AND DUP6 PUSH2 0xE84 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x10 SHR AND ISZERO ISZERO SWAP2 DUP3 DUP3 DUP3 ADD MSTORE DUP3 PUSH2 0xCEA JUMPI JUMPDEST PUSH1 0x20 DUP4 DUP4 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP MLOAD SWAP2 PUSH1 0x5 DUP4 LT ISZERO PUSH2 0x261 JUMPI POP PUSH1 0x2 PUSH1 0x20 SWAP3 EQ SWAP1 PUSH0 PUSH2 0xCDE JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x3D9 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x3D9 JUMPI JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xD68 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xD68 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x3D9 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xD68 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0xE29 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND ADD DUP6 PUSH2 0xD95 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x3D9 JUMPI DUP2 PUSH0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0xE57 JUMPI MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x5 DUP3 LT ISZERO PUSH2 0xE57 JUMPI MSTORE JUMP JUMPDEST MLOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0xE57 JUMPI SWAP1 JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x20 DUP1 SWAP5 DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP8 MSTORE ADD DUP7 DUP7 ADD MCOPY PUSH0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP2 DUP4 SWAP3 MLOAD SWAP2 DUP3 SWAP2 ADD DUP4 MCOPY DUP2 ADD PUSH0 DUP2 MSTORE SUB SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x0 DUP5 MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0xF5B DUP2 PUSH2 0xD4C JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x1012 JUMPI PUSH0 SWAP3 PUSH2 0xFD9 JUMPI POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x100A JUMPI JUMPDEST DUP2 PUSH2 0xFF5 PUSH1 0x20 SWAP4 DUP4 PUSH2 0xD95 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D9 JUMPI MLOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x3D9 JUMPI SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xFE8 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x104A PUSH1 0x20 SWAP3 SWAP6 SWAP5 SWAP6 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0xE9D JUMP JUMPDEST SWAP5 AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x107D PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH0 CALLDATALOAD AND PUSH2 0xEFC JUMP JUMPDEST PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x109C PUSH2 0xF61 JUMP JUMPDEST AND SWAP2 PUSH1 0x64 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH32 0x9BE2A88400000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1012 JUMPI PUSH0 SWAP2 PUSH2 0x111B JUMPI JUMPDEST POP ISZERO PUSH2 0x10F3 JUMPI JUMP JUMPDEST PUSH32 0x23DADA5300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x114E JUMPI JUMPDEST DUP2 PUSH2 0x1136 PUSH1 0x20 SWAP4 DUP4 PUSH2 0xD95 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3D9 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x3D9 JUMPI PUSH0 PUSH2 0x10EB JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1129 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF5B PUSH1 0x20 DUP3 DUP2 DUP1 DUP3 ADD SWAP6 DUP1 MLOAD SWAP2 DUP3 SWAP2 ADD DUP8 MCOPY DUP2 ADD PUSH0 DUP4 DUP3 ADD MSTORE SUB DUP1 DUP5 MSTORE ADD DUP3 PUSH2 0xD95 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 LT 0xC4 0xAF CODESIZE JUMPDEST PUSH3 0xA141F PUSH10 0xB5A6FFF71FD2B040DFF9 BYTE 0xC0 GASLIMIT MUL 0xDB SUB STOP CALLCODE 0xE3 LOG3 SWAP11 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"2741:12089:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2741:12089:34;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;1525:73:16;;:::i;:::-;7303:29:34;;7299:88;;2741:12089;;7401:31;7397:90;;2741:12089;;;;7572:13;2741:12089;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;7612:123;;7841:28;;;;:::i;:::-;2741:12089;;;;;;;;;;;;;7956:37;7952:197;;2741:12089;;;;8245:16;2741:12089;;;;;;;8287:34;8283:132;;2741:12089;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8728:124;;;;:::i;:::-;;;;2741:12089;7572:13;2741:12089;;7572:13;8728:124;;;2741:12089;;;;;;;;;;;;;;;;;;;;;8868:71;2741:12089;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8868:71;:::i;:::-;;;2741:12089;8868:71;;2741:12089;;;;;;;;;;;8283:132;2741:12089;8344:60;2741:12089;;;;8344:60;;;;;;;;;:::i;:::-;;;;7952:197;2741:12089;;;8106:17;2741:12089;;;;;;7572:13;2741:12089;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;8106:17;:::i;:::-;2741:12089;;;;8076:62;;;;;;;;2741:12089;;:::i;:::-;;;;;;;;;;:::i;7612:123::-;2741:12089;;;;;;;;;;7656:68;2741:12089;7656:68;2741:12089;;;;;7656:68;7397:90;7455:21;2741:12089;7455:21;2741:12089;7455:21;7299:88;7355:21;2741:12089;7355:21;2741:12089;7355:21;2741:12089;;;;;;;;;;;;;-1:-1:-1;;2741:12089:34;;;;;;;;;;;;;;;;;;;:::i;:::-;1525:73:16;;;:::i;:::-;2741:12089:34;;9098:31;9094:90;;9256:28;;;:::i;:::-;2741:12089;;;;;;;;;;;;;9364:29;;;9360:106;;2741:12089;;;9503:13;2741:12089;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;9629:112;;2741:12089;;;9503:13;2741:12089;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9850:78;;;;:::i;:::-;;;2741:12089;9850:78;;2741:12089;9629:112;2741:12089;;9682:48;;;2741:12089;9682:48;2741:12089;;9682:48;;;;:::i;9360:106::-;2741:12089;;;;;9416:39;;;;;;;;2741:12089;;;;;;:::i;9094:90::-;9152:21;;2741:12089;9152:21;2741:12089;9152:21;2741:12089;;;;;;-1:-1:-1;;2741:12089:34;;;;;;;;;;;;;;;;;:::i;:::-;;;;13008:13;2741:12089;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;13149:50;;;2741:12089;;;;;;;;;;;13149:50;2741:12089;;;;;;;;;;;;;;13166:33;13149:50;;;;;2741:12089;;;;;;;;;;;;;;;;-1:-1:-1;;2741:12089:34;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;2741:12089:34;;;;;;;;;1216:6:23;2741:12089:34;;;;;;;;;;-1:-1:-1;;2741:12089:34;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;14436:13;2741:12089;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2741:12089:34;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;2741:12089:34;;;;;;;;:::i;:::-;1525:73:16;;:::i;:::-;2741:12089:34;10083:29;;;10079:88;;2741:12089;;;10204:13;2741:12089;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;10300:109;;2741:12089;;;10499:102;;2741:12089;;;;;;10204:13;2741:12089;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10968:43;2741:12089;10968:43;;2741:12089;10499:102;10548:42;;;2741:12089;10548:42;2741:12089;;;10548:42;10300:109;10353:45;;;2741:12089;10353:45;2741:12089;;;10353:45;2741:12089;;;;;;;-1:-1:-1;;2741:12089:34;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;13412:13;13458:28;2741:12089;13458:28;;:::i;:::-;2741:12089;;;;;;;;;;;;;13641:31;;;13637:110;;2741:12089;;;;;;13784:13;2741:12089;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;14100:54;;;2741:12089;14096:158;;;;;2741:12089;;;;;;;;;;;;;;;;14096:158;2741:12089;;14170:35;;-1:-1:-1;2741:12089:34;;;-1:-1:-1;14096:158:34;;;;14100:54;2741:12089;;;-1:-1:-1;2741:12089:34;;;;;;;14121:33;14100:54;;;;;13637:110;2741:12089;;13708:16;2741:12089;;;;;;;;13637:110;;;2741:12089;;;;;;;-1:-1:-1;;2741:12089:34;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;1525:73:16;;;:::i;:::-;2741:12089:34;;11263:32;11259:92;;2741:12089;;;;11365:29;;;11361:88;;2741:12089;;;;;11540:13;2741:12089;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;11580:109;;12074:29;;;:::i;:::-;2741:12089;;;;;;;;;;;;12190:37;12186:193;;2741:12089;12521:52;2741:12089;;12459:16;2741:12089;;;;;;;;;;;;;;;12521:52;:::i;:::-;;2741:12089;12521:52;;2741:12089;12186:193;2741:12089;12335:17;2741:12089;;;;;;;;11540:13;2741:12089;;;;;;;;;;;;:::i;12335:17::-;2741:12089;;;;12310:58;;;;;;;;2741:12089;;:::i;11580:109::-;11633:45;;;2741:12089;11633:45;2741:12089;;;11633:45;11361:88;11417:21;;2741:12089;11417:21;2741:12089;11417:21;11259:92;11318:22;2741:12089;11318:22;2741:12089;11318:22;2741:12089;;;;;;;;-1:-1:-1;;2741:12089:34;;;;;;;;:::i;:::-;;;;13008:13;2741:12089;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;13149:50;;;2741:12089;;;;;;;;;;;13149:50;2741:12089;;;;;;;;;;;;14638:19;2741:12089;;13166:33;13149:50;;;;2741:12089;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;2741:12089:34;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;:::o;:::-;;-1:-1:-1;2741:12089:34;;;;;-1:-1:-1;2741:12089:34;;;;;;;;;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2741:12089:34;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;2741:12089:34;;;;;;:::o;1931:430:16:-;2741:12089:34;;;2303:50:16;;;2320:22;;2741:12089:34;;;;;;;2303:50:16;;;;;;:::i;:::-;2741:12089:34;2293:61:16;;1931:430;:::o;1366:109:23:-;2741:12089:34;;;1442:26:23;;2741:12089:34;1442:26:23;2741:12089:34;1442:26:23;2741:12089:34;1216:6:23;2741:12089:34;;1442:26:23;;;;;;;;;;;1435:33;;1366:109;:::o;1442:26::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;2741:12089:34;;;;;;;;;;;;1366:109:23;:::o;1442:26::-;;;-1:-1:-1;1442:26:23;;;2741:12089:34;;;1442:26:23;2741:12089:34;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;1688:201:16:-;1762:20;1774:7;;;;1762:20;:::i;:::-;1592:60:23;2741:12089:34;1592:15:23;;:::i;:::-;2741:12089:34;;;;;1592:60:23;;;;2741:12089:34;1592:60:23;;;;;2741:12089:34;1820:10:16;2741:12089:34;;;;1646:4:23;2741:12089:34;;;;1592:60:23;;;;;;;1774:7:16;1592:60:23;;;1688:201:16;1797:34;;1793:90;;1688:201::o;1793:90::-;1854:18;1774:7;1854:18;1592:60:23;1774:7:16;1854:18;1592:60:23;;;;;;;;;;;;;;;;;:::i;:::-;;;2741:12089:34;;;;;;;;;;;;1592:60:23;;;;;;-1:-1:-1;1592:60:23;;14679:149:34;2741:12089;;14790:30;;;;;;;2741:12089;;;;;;;;;;;-1:-1:-1;2741:12089:34;;;;14790:30;;;;;;;:::i"},"methodIdentifiers":{"addOrUpdateBalancerContractAlias(string,address)":"2967af96","deprecateBalancerContract(address)":"44969a9c","deregisterBalancerContract(string)":"c7f90793","getActionId(bytes4)":"851c1bb3","getAuthorizer()":"aaabadc5","getBalancerContract(uint8,string)":"41d8c0bb","getBalancerContractInfo(address)":"8554c327","getVault()":"8d928af8","isActiveBalancerContract(uint8,address)":"ae2733a4","isTrustedRouter(address)":"264e97e0","registerBalancerContract(uint8,string,address)":"e0376ab4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractAddressAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractAddressNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"ContractAliasInUseAsName\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractAlreadyDeprecated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"ContractNameAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractNameInUseAsAlias\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"ContractNameNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"InconsistentState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContractAlias\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContractName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroContractAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"BalancerContractDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"BalancerContractDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"BalancerContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contractAlias\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractAliasUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractAlias\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"addOrUpdateBalancerContractAlias\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"deprecateBalancerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"deregisterBalancerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"getBalancerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getBalancerContractInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerContractRegistry.ContractInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isActiveBalancerContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"isTrustedRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"registerBalancerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Maintain a registry of official Balancer Factories, Routers, Hooks, and valid ERC4626 tokens, for two main purposes. The first is to support the many instances where we need to know that a contract is \\\"trusted\\\" (i.e., is safe and behaves in the required manner). For instance, some hooks depend critically on the identity of the msg.sender, which must be passed down through the Router. Since Routers are permissionless, a malicious one could spoof the sender and \\\"fool\\\" the hook. The hook must therefore \\\"trust\\\" the Router. It is also important for the front-end to know when a particular wrapped token should be used with buffers. Not all \\\"ERC4626\\\" wrapped tokens are fully conforming, and buffer operations with non-conforming tokens may fail in various unexpected ways. It is not enough to simply check whether a buffer exists (e.g., by calling `getBufferAsset`), since best practice is for the pool creator to initialize buffers for all such tokens regardless. They are permissionless, and could otherwise be initialized by anyone in unexpected ways. This registry could be used to keep track of \\\"known good\\\" buffers, such that `isActiveBalancerContract(ContractType.ERC4626, <address>)` returns true for fully-compliant tokens with properly initialized buffers. Current solutions involve passing in the address of the trusted Router on deployment: but what if it needs to support multiple Routers? Or if the Router is deprecated and replaced? Instead, we can pass the registry address, and query this contract to determine whether the Router is a \\\"trusted\\\" one. The second use case is for off-chain queries, or other protocols that need to easily determine, say, the \\\"latest\\\" Weighted Pool Factory. This contract provides `isActiveBalancerContract(type, address)` for the first case, and `getBalancerContract(type, name)` for the second. It is also possible to query all known information about an address, using `getBalancerContractInfo(address)`, which returns a struct with the detailed state. Note that the `SingletonAuthentication` base contract provides `getVault`, so it is also possible to ask this contract for the Vault address, so it doesn't need to be a type.\",\"errors\":{\"ContractAddressAlreadyRegistered(uint8,address)\":[{\"details\":\"Both names and addresses must be unique in the primary registration mapping. Though there are two mappings to accommodate searching by either name or address, conceptually there is a single guaranteed-consistent name => address => state mapping.\",\"params\":{\"contractAddress\":\"The address of the previously registered contract\",\"contractType\":\"The contract type, provided for documentation purposes\"}}],\"ContractAddressNotRegistered(address)\":[{\"details\":\"A contract being deprecated was never registered, or the target of an alias isn't a previously registered contract.\",\"params\":{\"contractAddress\":\"The address of the contract that was not registered\"}}],\"ContractAliasInUseAsName(uint8,string)\":[{\"details\":\"This could lead to inconsistent (or at least redundant) internal state if allowed.\",\"params\":{\"contractName\":\"The name of the previously registered contract (and proposed alias)\",\"contractType\":\"The registered contract type, provided for documentation purposes\"}}],\"ContractAlreadyDeprecated(address)\":[{\"params\":{\"contractAddress\":\"The address of the previously deprecated contract\"}}],\"ContractNameAlreadyRegistered(uint8,string)\":[{\"details\":\"Note that names must be unique; it is not possible to register two contracts with the same name and different types, or the same name and different addresses.\",\"params\":{\"contractName\":\"The name of the previously registered contract\",\"contractType\":\"The registered contract type, provided for documentation purposes\"}}],\"ContractNameInUseAsAlias(string,address)\":[{\"details\":\"This could lead to inconsistent (or at least redundant) internal state if allowed.\",\"params\":{\"contractAddress\":\"The address of the previously registered contract\",\"contractName\":\"The name of the previously registered contract\"}}],\"ContractNameNotRegistered(string)\":[{\"params\":{\"contractName\":\"The name of the unregistered contract\"}}],\"InconsistentState(string,address)\":[{\"details\":\"This should never happen.\",\"params\":{\"contractAddress\":\"The address of the contract with missing state\",\"contractName\":\"The name of the contract that has a registry entry but no contract info\"}}]},\"events\":{\"BalancerContractDeprecated(address)\":{\"details\":\"This sets the `isActive` flag to false.\",\"params\":{\"contractAddress\":\"The address of the contract being deprecated\"}},\"BalancerContractDeregistered(uint8,string,address)\":{\"params\":{\"contractAddress\":\"The address of the contract being deregistered\",\"contractName\":\"The name of the contract being deregistered\",\"contractType\":\"The type of contract being deregistered\"}},\"BalancerContractRegistered(uint8,string,address)\":{\"params\":{\"contractAddress\":\"The address of the contract being registered\",\"contractName\":\"The name of the contract being registered\",\"contractType\":\"The type of contract being registered\"}},\"ContractAliasUpdated(string,address)\":{\"params\":{\"contractAddress\":\"The address of the contract being deprecated\",\"contractAlias\":\"The alias name\"}}},\"kind\":\"dev\",\"methods\":{\"addOrUpdateBalancerContractAlias(string,address)\":{\"details\":\"This is a permissioned function to support querying by a contract alias. For instance, we might create a `WeightedPool` alias meaning the \\\"latest\\\" version of the `WeightedPoolFactory`, so that off-chain users don't need to track specific versions. Once added, an alias can also be updated to point to a different address (e.g., when migrating from the v2 to the v3 weighted pool).\",\"params\":{\"contractAlias\":\"An alternate name that can be used to fetch a contract address\",\"existingContract\":\"The target address of the contract alias\"}},\"deprecateBalancerContract(address)\":{\"details\":\"This is a permissioned function that sets the `isActive` flag to false in the contract info. It uses the address instead of the name for maximum clarity, and to avoid having to handle aliases. Addresses and names are enforced unique, so either the name or address could be specified in principle.\",\"params\":{\"contractAddress\":\"The address of the contract being deprecated\"}},\"deregisterBalancerContract(string)\":{\"details\":\"This is a permissioned function, and makes it possible to correct errors without complex update logic. If a contract was registered with an incorrect type, name, or address, this allows governance to simply delete it, and register it again with the correct data. It must start with the name, as this is the registry key, required for complete deletion. Note that there might still be an alias targeting the address being deleted, but accessing it will just return inactive, and this orphan alias can simply be overwritten with `addOrUpdateBalancerContractAlias` to point to the correct address.\",\"params\":{\"contractName\":\"The name of the contract being deprecated (cannot be an alias)\"}},\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"_0\":\"The computed actionId\"}},\"getAuthorizer()\":{\"returns\":{\"_0\":\"authorizer An interface pointer to the Authorizer\"}},\"getBalancerContract(uint8,string)\":{\"details\":\"This could target a particular version (e.g. `20241205-v3-weighted-pool`), or a contract alias (e.g., `WeightedPool`).\",\"params\":{\"contractName\":\"The name of the contract\",\"contractType\":\"The type of the contract\"},\"returns\":{\"contractAddress\":\"The address of the associated contract, if registered, or zero\",\"isActive\":\"True if the contract was registered and not deprecated\"}},\"getBalancerContractInfo(address)\":{\"params\":{\"contractAddress\":\"The address of the associated contract\"},\"returns\":{\"info\":\"ContractInfo struct corresponding to the address\"}},\"getVault()\":{\"returns\":{\"_0\":\"vault An interface pointer to the Vault\"}},\"isActiveBalancerContract(uint8,address)\":{\"params\":{\"contractAddress\":\"The address of the contract\",\"contractType\":\"The type of contract\"},\"returns\":{\"_0\":\"True if the given address is a registered and active contract of the specified type\"}},\"registerBalancerContract(uint8,string,address)\":{\"details\":\"This is a permissioned function, and does only basic validation of the address (non-zero) and the name (not blank). Governance must ensure this is called with valid information. Emits the `BalancerContractRegistered` event if successful. Reverts if either the name or address is invalid or already in use.\",\"params\":{\"contractAddress\":\"The address of the contract\",\"contractName\":\"A text description of the contract, usually the deployed version (e.g., \\\"v3-pool-weighted\\\")\",\"contractType\":\"The type of contract being registered\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ContractAddressAlreadyRegistered(uint8,address)\":[{\"notice\":\"A contract has already been registered under the given address.\"}],\"ContractAddressNotRegistered(address)\":[{\"notice\":\"An operation that requires a valid contract specified an unrecognized address.\"}],\"ContractAliasInUseAsName(uint8,string)\":[{\"notice\":\"The proposed alias has already been registered as a contract.\"}],\"ContractAlreadyDeprecated(address)\":[{\"notice\":\"Contracts can only be deprecated once.\"}],\"ContractNameAlreadyRegistered(uint8,string)\":[{\"notice\":\"A contract has already been registered under the given name.\"}],\"ContractNameInUseAsAlias(string,address)\":[{\"notice\":\"The proposed contract name has already been added as an alias.\"}],\"ContractNameNotRegistered(string)\":[{\"notice\":\"Thrown when attempting to deregister a contract that was not previously registered.\"}],\"InconsistentState(string,address)\":[{\"notice\":\"A `_contractRegistry` entry has no corresponding `_contractInfo`.\"}],\"InvalidContractAlias()\":[{\"notice\":\"Cannot add an empty string as an alias.\"}],\"InvalidContractName()\":[{\"notice\":\"Cannot register (or deregister) a contract with an empty string as a name.\"}],\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}],\"ZeroContractAddress()\":[{\"notice\":\"Cannot register or deprecate contracts, or add an alias targeting the zero address.\"}]},\"events\":{\"BalancerContractDeprecated(address)\":{\"notice\":\"Emitted when a registered contract is deprecated.\"},\"BalancerContractDeregistered(uint8,string,address)\":{\"notice\":\"Emitted when a new contract is deregistered (deleted).\"},\"BalancerContractRegistered(uint8,string,address)\":{\"notice\":\"Emitted when a new contract is registered.\"},\"ContractAliasUpdated(string,address)\":{\"notice\":\"Emitted when an alias is added or updated.\"}},\"kind\":\"user\",\"methods\":{\"addOrUpdateBalancerContractAlias(string,address)\":{\"notice\":\"Add an alias for a registered contract.\"},\"deprecateBalancerContract(address)\":{\"notice\":\"Deprecate an official Balancer contract.\"},\"deregisterBalancerContract(string)\":{\"notice\":\"Deregister an official Balancer contract (e.g., a trusted router, standard pool factory, or hook).\"},\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getAuthorizer()\":{\"notice\":\"Get the address of the Authorizer.\"},\"getBalancerContract(uint8,string)\":{\"notice\":\"Look up a registered contract by type and name.\"},\"getBalancerContractInfo(address)\":{\"notice\":\"Look up complete information about a registered contract by address.\"},\"getVault()\":{\"notice\":\"Get the address of the Balancer Vault.\"},\"isActiveBalancerContract(uint8,address)\":{\"notice\":\"Determine whether an address is an official contract of the specified type.\"},\"isTrustedRouter(address)\":{\"notice\":\"Returns `true` if the given address is an active contract under the ROUTER type.\"},\"registerBalancerContract(uint8,string,address)\":{\"notice\":\"Register an official Balancer contract (e.g., a trusted router, standard pool factory, or hook).\"}},\"notice\":\"On-chain registry of standard Balancer contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BalancerContractRegistry.sol\":\"BalancerContractRegistry\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/standalone-utils/IBalancerContractRegistry.sol\":{\"keccak256\":\"0xc243ec53db3f6df55e600459e723c1b15642eeb12f2202992edaa39af850d47d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b130e873859d2e6b4778be1bdb05a75019cc7f97e23092b8210b3ee9573b6113\",\"dweb:/ipfs/QmfQGk6ecHefaHiNKCH9dnUp7YMAuvzvPQLQwmri7Nq6Cc\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0x743734d3d3503d705f0a778c4b0dd61fdb067e89a07481ddbead0654e6808318\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6198f27b2d01f346fdd3d1302e9a6ddd543d2f06afd675d84919c2242bd26d8d\",\"dweb:/ipfs/QmYntQih5MwxxdGnVu2BPVLeqFuJEH761cByAesjwE6JKT\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\":{\"keccak256\":\"0x807237870f3aaa26cd815c5f600c1d0c60861a2f962fcc341d4b80942288ab52\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://90f108409488d0c38147d2ac7b9facd694dbf1001c501136a249091788c22232\",\"dweb:/ipfs/QmRCaCCGcuL4kxBEbrpq6FfENBJk4Zo8CNe8TRusatuYJ6\"]},\"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol\":{\"keccak256\":\"0x67518bf3b6bd96f5897c56867fc57f3c31bb9b97abf93cf960de145a5eb82414\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://563857d8606cbd4f727c75f09901d09ec9faa73778fe85e2af851982cdb9b6e8\",\"dweb:/ipfs/QmU7x1gWCPGPAcxA8Qq3z8hscrGRFwsc28qad4RMihZ8qB\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"contracts/BalancerContractRegistry.sol\":{\"keccak256\":\"0xe663b63efd85bfd87be43f71aa1ab26bea25b774d28a7395247dae4c7c574549\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://56b5ebe6871f2531c7c5f640ecc3a71819502aabaed032ae7b1b097c1de6bbec\",\"dweb:/ipfs/QmVNHtCJWMuQcQBq5zbucsTXAHdGpzgGNkvt7TAxHtvxGW\"]}},\"version\":1}"}},"contracts/CallAndRevert.sol":{"CallAndRevert":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[],"name":"ErrorSelectorNotFound","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"QuoteResultSpoofed","type":"error"},{"inputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"name":"Result","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"callAndRevertHook","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608080604052346015576103b0908161001a8239f35b5f80fdfe6080604052600480361015610012575f80fd5b5f3560e01c63a769963814610025575f80fd5b346102325760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102325780359073ffffffffffffffffffffffffffffffffffffffff82168203610232576024359167ffffffffffffffff8311610232573660238401121561023257828201356100a76100a2826102a7565b610236565b91818352602094858401903660248583010111610232575f948588868297602484960187378301015251925af1903d1561022957823d926100ea6100a2856102a7565b9384523d5f8386013e5b8015610179577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0918461012c604496601f94336102e1565b506040519687957f5ab64fb80000000000000000000000000000000000000000000000000000000087528601528051918291826024880152018686015e5f85828601015201168101030190fd5b5050808251106101dd577f5ab64fb8000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000848401511614610203578151156101dd575080519101fd5b7fa7285689000000000000000000000000000000000000000000000000000000005f525ffd5b7f28f95541000000000000000000000000000000000000000000000000000000005f525ffd5b826060926100f4565b5f80fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff82111761027a57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b67ffffffffffffffff811161027a57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b9061031e57508051156102f657805190602001fd5b7f1425ea42000000000000000000000000000000000000000000000000000000005f5260045ffd5b81511580610371575b61032f575090565b73ffffffffffffffffffffffffffffffffffffffff907f9996b315000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b50803b1561032756fea264697066735822122027a3808c6ba8335e514cee6562c3e784b479a87c753694d6c1e7b69553857ee764736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x15 JUMPI PUSH2 0x3B0 SWAP1 DUP2 PUSH2 0x1A DUP3 CODECOPY RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xA7699638 EQ PUSH2 0x25 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x232 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x232 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x232 JUMPI PUSH1 0x24 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x232 JUMPI CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH2 0x232 JUMPI DUP3 DUP3 ADD CALLDATALOAD PUSH2 0xA7 PUSH2 0xA2 DUP3 PUSH2 0x2A7 JUMP JUMPDEST PUSH2 0x236 JUMP JUMPDEST SWAP2 DUP2 DUP4 MSTORE PUSH1 0x20 SWAP5 DUP6 DUP5 ADD SWAP1 CALLDATASIZE PUSH1 0x24 DUP6 DUP4 ADD ADD GT PUSH2 0x232 JUMPI PUSH0 SWAP5 DUP6 DUP9 DUP7 DUP3 SWAP8 PUSH1 0x24 DUP5 SWAP7 ADD DUP8 CALLDATACOPY DUP4 ADD ADD MSTORE MLOAD SWAP3 GAS CALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x229 JUMPI DUP3 RETURNDATASIZE SWAP3 PUSH2 0xEA PUSH2 0xA2 DUP6 PUSH2 0x2A7 JUMP JUMPDEST SWAP4 DUP5 MSTORE RETURNDATASIZE PUSH0 DUP4 DUP7 ADD RETURNDATACOPY JUMPDEST DUP1 ISZERO PUSH2 0x179 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 DUP5 PUSH2 0x12C PUSH1 0x44 SWAP7 PUSH1 0x1F SWAP5 CALLER PUSH2 0x2E1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP6 PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 DUP8 MSTORE DUP7 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH1 0x24 DUP9 ADD MSTORE ADD DUP7 DUP7 ADD MCOPY PUSH0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST POP POP DUP1 DUP3 MLOAD LT PUSH2 0x1DD JUMPI PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP5 DUP5 ADD MLOAD AND EQ PUSH2 0x203 JUMPI DUP2 MLOAD ISZERO PUSH2 0x1DD JUMPI POP DUP1 MLOAD SWAP2 ADD REVERT JUMPDEST PUSH32 0xA728568900000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST PUSH32 0x28F9554100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST DUP3 PUSH1 0x60 SWAP3 PUSH2 0xF4 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x40 MLOAD SWAP4 ADD AND DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x27A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x27A JUMPI PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x31E JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x2F6 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x371 JUMPI JUMPDEST PUSH2 0x32F JUMPI POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x327 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 LOG3 DUP1 DUP13 PUSH12 0xA8335E514CEE6562C3E784B4 PUSH26 0xA87C753694D6C1E7B69553857EE764736F6C634300081B003300 ","sourceMap":"241:1325:35:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"allocate_memory":{"entryPoint":566,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":679,"id":null,"parameterSlots":1,"returnSlots":1},"fun_verifyCallResultFromTarget":{"entryPoint":737,"id":6947,"parameterSlots":3,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600480361015610012575f80fd5b5f3560e01c63a769963814610025575f80fd5b346102325760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102325780359073ffffffffffffffffffffffffffffffffffffffff82168203610232576024359167ffffffffffffffff8311610232573660238401121561023257828201356100a76100a2826102a7565b610236565b91818352602094858401903660248583010111610232575f948588868297602484960187378301015251925af1903d1561022957823d926100ea6100a2856102a7565b9384523d5f8386013e5b8015610179577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0918461012c604496601f94336102e1565b506040519687957f5ab64fb80000000000000000000000000000000000000000000000000000000087528601528051918291826024880152018686015e5f85828601015201168101030190fd5b5050808251106101dd577f5ab64fb8000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000848401511614610203578151156101dd575080519101fd5b7fa7285689000000000000000000000000000000000000000000000000000000005f525ffd5b7f28f95541000000000000000000000000000000000000000000000000000000005f525ffd5b826060926100f4565b5f80fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff82111761027a57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b67ffffffffffffffff811161027a57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b9061031e57508051156102f657805190602001fd5b7f1425ea42000000000000000000000000000000000000000000000000000000005f5260045ffd5b81511580610371575b61032f575090565b73ffffffffffffffffffffffffffffffffffffffff907f9996b315000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b50803b1561032756fea264697066735822122027a3808c6ba8335e514cee6562c3e784b479a87c753694d6c1e7b69553857ee764736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xA7699638 EQ PUSH2 0x25 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x232 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x232 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x232 JUMPI PUSH1 0x24 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x232 JUMPI CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH2 0x232 JUMPI DUP3 DUP3 ADD CALLDATALOAD PUSH2 0xA7 PUSH2 0xA2 DUP3 PUSH2 0x2A7 JUMP JUMPDEST PUSH2 0x236 JUMP JUMPDEST SWAP2 DUP2 DUP4 MSTORE PUSH1 0x20 SWAP5 DUP6 DUP5 ADD SWAP1 CALLDATASIZE PUSH1 0x24 DUP6 DUP4 ADD ADD GT PUSH2 0x232 JUMPI PUSH0 SWAP5 DUP6 DUP9 DUP7 DUP3 SWAP8 PUSH1 0x24 DUP5 SWAP7 ADD DUP8 CALLDATACOPY DUP4 ADD ADD MSTORE MLOAD SWAP3 GAS CALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x229 JUMPI DUP3 RETURNDATASIZE SWAP3 PUSH2 0xEA PUSH2 0xA2 DUP6 PUSH2 0x2A7 JUMP JUMPDEST SWAP4 DUP5 MSTORE RETURNDATASIZE PUSH0 DUP4 DUP7 ADD RETURNDATACOPY JUMPDEST DUP1 ISZERO PUSH2 0x179 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 DUP5 PUSH2 0x12C PUSH1 0x44 SWAP7 PUSH1 0x1F SWAP5 CALLER PUSH2 0x2E1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP6 PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 DUP8 MSTORE DUP7 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH1 0x24 DUP9 ADD MSTORE ADD DUP7 DUP7 ADD MCOPY PUSH0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST POP POP DUP1 DUP3 MLOAD LT PUSH2 0x1DD JUMPI PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP5 DUP5 ADD MLOAD AND EQ PUSH2 0x203 JUMPI DUP2 MLOAD ISZERO PUSH2 0x1DD JUMPI POP DUP1 MLOAD SWAP2 ADD REVERT JUMPDEST PUSH32 0xA728568900000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST PUSH32 0x28F9554100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST DUP3 PUSH1 0x60 SWAP3 PUSH2 0xF4 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x40 MLOAD SWAP4 ADD AND DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x27A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x27A JUMPI PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x31E JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x2F6 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x371 JUMPI JUMPDEST PUSH2 0x32F JUMPI POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x327 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 LOG3 DUP1 DUP13 PUSH12 0xA8335E514CEE6562C3E784B4 PUSH26 0xA87C753694D6C1E7B69553857EE764736F6C634300081B003300 ","sourceMap":"241:1325:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;811:19;;;;;241:1325;;;;;;;;;;;:::i;:::-;;;;;;;;;;;840:718;;;;241:1325;990:10;;955:63;241:1325;990:10;241:1325;990:10;;955:63;:::i;:::-;;241:1325;;1084:26;;;;;;;;241:1325;;;;;;;;;;;;;;;;;;;;;;;;;;;1084:26;;;;840:718;241:1325;;;;;1443:21:17;1439:82;;1344:27:35;241:1325;1530:151:17;;;;241:1325:35;1327:44;1323:110;;241:1325;;1881:21:17;:17;;2008:160;;;;;;1877:362;2205:23;241:1325:35;2205:23:17;241:1325:35;2205:23:17;1323:110:35;1398:20;241:1325;1398:20;241:1325;1398:20;241:1325;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;4625:582:31:-;;4797:8;;-1:-1:-1;241:1325:35;;5874:21:31;:17;;6046:142;;;;;;5870:383;6225:17;5894:1;6225:17;;5894:1;6225:17;4793:408;241:1325:35;;5045:22:31;:49;;;4793:408;5041:119;;5173:17;;:::o;5041:119::-;241:1325:35;5121:24:31;;5066:1;5121:24;241:1325:35;5121:24:31;241:1325:35;;5066:1:31;5121:24;5045:49;5071:18;;;:23;5045:49;"},"methodIdentifiers":{"callAndRevertHook(address,bytes)":"a7699638"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorSelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteResultSpoofed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"Result\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callAndRevertHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"Result(bytes)\":[{\"params\":{\"result\":\"The result of the query operation\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"ErrorSelectorNotFound()\":[{\"notice\":\"Handle the \\\"reverted without a reason\\\" case (i.e., no return data).\"}],\"Result(bytes)\":[{\"notice\":\"On success of the primary operation in a `quoteAndRevert`, this error is thrown with the return data.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CallAndRevert.sol\":\"CallAndRevert\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-solidity-utils/contracts/helpers/RevertCodec.sol\":{\"keccak256\":\"0xb4ee9e1543d36bdf9eeb4a9d5ab41170723239a1e27a2272f2e31de4765c019b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3b70dd5e4fa496c2c1efb6bd20368587ba3c9c0d0afac9dc3631a29ff2628f99\",\"dweb:/ipfs/QmQigXUkpDuVK5VSX67RABrAC9bashPcHMasgPRNJb4k8Z\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"contracts/CallAndRevert.sol\":{\"keccak256\":\"0xe0f09e833265592b398c7607db658e3541b800f66c9536ee129ae6863e4185f2\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://bc7dd31dd95f738debb5ca8c8b80e90384c1d8b72dc70e02dd7ae22e7c77f337\",\"dweb:/ipfs/QmNaJXyazNRD1fbqs6QJSwB3VWKu3ZjHqecMqKg57UeMuS\"]}},\"version\":1}"}},"contracts/PriceImpactHelper.sol":{"PriceImpactHelper":{"abi":[{"inputs":[{"internalType":"contract IVault","name":"vault","type":"address"},{"internalType":"contract IRouter","name":"router","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[],"name":"ErrorSelectorNotFound","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"QuoteResultSpoofed","type":"error"},{"inputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"name":"Result","type":"error"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntToUint","type":"error"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintToInt","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"address","name":"sender","type":"address"}],"name":"calculateAddLiquidityUnbalancedPriceImpact","outputs":[{"internalType":"uint256","name":"priceImpact","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"callAndRevertHook","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60c03461009a57601f6111fb38819003918201601f19168301916001600160401b0383118484101761009e57808492604094855283398101031261009a5780516001600160a01b0391828216820361009a5760200151918216820361009a5760805260a05260405161114890816100b38239608051816104b1015260a05181818161030201528181610735015281816108e40152610cd70152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c806348406a54146101a75763a76996381461002f575f80fd5b346101a35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357610066610aaf565b6024359067ffffffffffffffff82116101a357366023830112156101a35781600401359061009382610b0d565b926100a16040519485610ad2565b828452602084019036602485830101116101a3575f94856020868297602484960187378301015251925af16100d4610bc7565b90801561012957906100ea816101259333610e82565b506040519182917f5ab64fb8000000000000000000000000000000000000000000000000000000008352602060048401526024830190610bf6565b0390fd5b507f5ab64fb8000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000061017583610e3b565b1603610e73577f28f95541000000000000000000000000000000000000000000000000000000005f5260045ffd5b5f80fd5b346101a35760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a3576101de610aaf565b67ffffffffffffffff6024358181116101a357366023820112156101a35780600401359061020b82610af5565b916102196040519384610ad2565b8083526024602084019160051b830101913683116101a357602401905b828210610a9f5750505073ffffffffffffffffffffffffffffffffffffffff604435169182604435036101a3576102706044358386610c1b565b92604051907f0f71088800000000000000000000000000000000000000000000000000000000602083015273ffffffffffffffffffffffffffffffffffffffff86169485602484015260448301526064820152608060848201525f60a482015260a4815260e081019080821083831117610a72576103279160405273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016610f1b565b9081518201916020818185019403126101a3576020810151908282116101a357019180603f840112156101a357602083015161036281610af5565b936103706040519586610ad2565b8185526040602086019260051b8201019283116101a357604001905b828210610a62575050506103a08351610b29565b945f5b8451811015610425576103bf6103b98286610b5a565b51610d21565b906103cd6103b98288610b5a565b915f83820393128184128116918413901516176103f8576001916103f1828a610b5a565b52016103a3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b50915091926104348451610b29565b925f5b855181101561046257600190610451604435898388610d76565b61045b8288610b5a565b5201610437565b50919094935f95604051907fca4f280300000000000000000000000000000000000000000000000000000000825260048201525f8160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa938415610a57575f946109ad575b505094905f915b85517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081116103f85783101561092f57505f917f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff965f5b8651811015610595575f6105568289610b5a565b511380610582575b61056b575b600101610542565b61057a91985080945086610b5a565b519683610563565b508861058e8289610b5a565b511261055e565b509650919490925f907f8000000000000000000000000000000000000000000000000000000000000000975f5b8751811015610615575f6105d6828a610b5a565b511280610602575b6105eb575b6001016105c2565b6105fa91995080935087610b5a565b5197826105e3565b508961060e828a610b5a565b51136105de565b5092969750939281976106288188610b5a565b5161063c610636858a610b5a565b51610b9b565b13156107df5761075a8661071e8a61071061068e6106888773ffffffffffffffffffffffffffffffffffffffff6106808c82610678858c610b5a565b511699610b5a565b511694610b5a565b51610e06565b936040519485937f3ebc54e5000000000000000000000000000000000000000000000000000000006020860152604435928d60248701939060e095929373ffffffffffffffffffffffffffffffffffffffff8095818094168852166020870152166040850152606084015216608082015260c060a08201525f60c08201520190565b03601f198101835282610ad2565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016610f1b565b6020818051810103126101a3575f610787838261078061078d9660208f97015196610b5a565b528a610b5a565b52610d21565b916107988189610b5a565b515f84820194851291129080158216911516176103f8576001926107bc828a610b5a565b526107d56107ce6044358a8489610d76565b9188610b5a565b52019190956104e8565b91806107eb8488610b5a565b5173ffffffffffffffffffffffffffffffffffffffff16908661080e828a610b5a565b5173ffffffffffffffffffffffffffffffffffffffff1691610830908c610b5a565b5161083a90610b9b565b61084390610e06565b6040517f175d440800000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff92831660248201529382166044808601919091529282166064850152608484015290351660a482015260c060c48201525f60e48083019190915281526108c961010482610ad2565b6109099073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016610f1b565b8080518101036020136101a3575f610787838261078061078d9660208f97015196610b5a565b61094f816109496109446106368b958b610b5a565b610e06565b92610b5a565b5190670de0b6b3a7640000908181029181830414901517156103f857811561098057602091604051910460011c8152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b909193503d805f843e6109c08184610ad2565b8201916020818403126101a35780519182116101a357019080601f830112156101a3578151906109ef82610af5565b926109fd6040519485610ad2565b82845260208085019360051b8201019182116101a357602001915b818310610a2a575050509186806104e1565b825173ffffffffffffffffffffffffffffffffffffffff811681036101a357815260209283019201610a18565b6040513d5f823e3d90fd5b815181526020918201910161038c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8135815260209182019101610236565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101a357565b90601f601f19910116810190811067ffffffffffffffff821117610a7257604052565b67ffffffffffffffff8111610a725760051b60200190565b67ffffffffffffffff8111610a7257601f01601f191660200190565b90610b3382610af5565b610b406040519182610ad2565b828152601f19610b508294610af5565b0190602036910137565b8051821015610b6e5760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f800000000000000000000000000000000000000000000000000000000000000081146103f8575f0390565b3d15610bf1573d90610bd882610b0d565b91610be66040519384610ad2565b82523d5f602084013e565b606090565b90601f19601f602080948051918291828752018686015e5f8582860101520116010190565b90929173ffffffffffffffffffffffffffffffffffffffff604051916020937fda001f7d00000000000000000000000000000000000000000000000000000000858501528260a48501911660248501526080604485015286518091528460c485019701905f5b818110610d0d5750505083610cfc94959683610cd5931660648601525f858203917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc83016084880152528085520183610ad2565b7f000000000000000000000000000000000000000000000000000000000000000016610f1b565b81818051810103126101a357015190565b825189529786019791860191600101610c81565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111610d4b5790565b7f24775e06000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b929091610db183825192601f19610da5610d8f86610af5565b95610d9d6040519788610ad2565b808752610af5565b01366020860137610b5a565b51938415610dfd57610dd993610dd35f871396875f14610dee57915b84610b5a565b52610c1b565b9015610de25790565b610deb90610b9b565b90565b610df790610b9b565b91610dcd565b50505050505f90565b5f8112610e105790565b7fa8ce4432000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b6004815110610e4b576020015190565b7fa7285689000000000000000000000000000000000000000000000000000000005f5260045ffd5b805115610e4b57805190602001fd5b90610ebf5750805115610e9757805190602001fd5b7f1425ea42000000000000000000000000000000000000000000000000000000005f5260045ffd5b81511580610f12575b610ed0575090565b73ffffffffffffffffffffffffffffffffffffffff907f9996b315000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b50803b15610ec8565b90303b156101a3575f610f8091604051809381927fa769963800000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8597166004840152604060248401526044830190610bf6565b038183305af190816110f5575b5061109757610f9a610bc7565b907f5ab64fb8000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000610fe684610e3b565b16036110915781519160207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc938481016004840152820193828286019503011261108d5760248101519067ffffffffffffffff821161108957018260438201121561108d5760248101519061105a82610b0d565b936110686040519586610ad2565b828552604483830101116110895790806044602093018386015e8301015290565b8280fd5b5080fd5b50610e73565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e6578706563746564207375636365737300000000000000000000000000006044820152fd5b90915067ffffffffffffffff8111610a72576040525f905f610f8d56fea26469706673582212208d7438e351266540a42f02d9aa1dd7d14d8e4bfa505baa0c981d2e4cc61450bd64736f6c634300081b0033","opcodes":"PUSH1 0xC0 CALLVALUE PUSH2 0x9A JUMPI PUSH1 0x1F PUSH2 0x11FB CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x9E JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x9A JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND DUP3 SUB PUSH2 0x9A JUMPI PUSH1 0x20 ADD MLOAD SWAP2 DUP3 AND DUP3 SUB PUSH2 0x9A JUMPI PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1148 SWAP1 DUP2 PUSH2 0xB3 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x4B1 ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x302 ADD MSTORE DUP2 DUP2 PUSH2 0x735 ADD MSTORE DUP2 DUP2 PUSH2 0x8E4 ADD MSTORE PUSH2 0xCD7 ADD MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x48406A54 EQ PUSH2 0x1A7 JUMPI PUSH4 0xA7699638 EQ PUSH2 0x2F JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1A3 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH2 0x66 PUSH2 0xAAF JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1A3 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x1A3 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP1 PUSH2 0x93 DUP3 PUSH2 0xB0D JUMP JUMPDEST SWAP3 PUSH2 0xA1 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xAD2 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP1 CALLDATASIZE PUSH1 0x24 DUP6 DUP4 ADD ADD GT PUSH2 0x1A3 JUMPI PUSH0 SWAP5 DUP6 PUSH1 0x20 DUP7 DUP3 SWAP8 PUSH1 0x24 DUP5 SWAP7 ADD DUP8 CALLDATACOPY DUP4 ADD ADD MSTORE MLOAD SWAP3 GAS CALL PUSH2 0xD4 PUSH2 0xBC7 JUMP JUMPDEST SWAP1 DUP1 ISZERO PUSH2 0x129 JUMPI SWAP1 PUSH2 0xEA DUP2 PUSH2 0x125 SWAP4 CALLER PUSH2 0xE82 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0xBF6 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH2 0x175 DUP4 PUSH2 0xE3B JUMP JUMPDEST AND SUB PUSH2 0xE73 JUMPI PUSH32 0x28F9554100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1A3 JUMPI PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH2 0x1DE PUSH2 0xAAF JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x1A3 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x1A3 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP1 PUSH2 0x20B DUP3 PUSH2 0xAF5 JUMP JUMPDEST SWAP2 PUSH2 0x219 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xAD2 JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x24 PUSH1 0x20 DUP5 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0x1A3 JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xA9F JUMPI POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD AND SWAP2 DUP3 PUSH1 0x44 CALLDATALOAD SUB PUSH2 0x1A3 JUMPI PUSH2 0x270 PUSH1 0x44 CALLDATALOAD DUP4 DUP7 PUSH2 0xC1B JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xF71088800000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP5 DUP6 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x84 DUP3 ADD MSTORE PUSH0 PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xA4 DUP2 MSTORE PUSH1 0xE0 DUP2 ADD SWAP1 DUP1 DUP3 LT DUP4 DUP4 GT OR PUSH2 0xA72 JUMPI PUSH2 0x327 SWAP2 PUSH1 0x40 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH2 0xF1B JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP3 ADD SWAP2 PUSH1 0x20 DUP2 DUP2 DUP6 ADD SWAP5 SUB SLT PUSH2 0x1A3 JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP1 DUP3 DUP3 GT PUSH2 0x1A3 JUMPI ADD SWAP2 DUP1 PUSH1 0x3F DUP5 ADD SLT ISZERO PUSH2 0x1A3 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x362 DUP2 PUSH2 0xAF5 JUMP JUMPDEST SWAP4 PUSH2 0x370 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0xAD2 JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x40 PUSH1 0x20 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x1A3 JUMPI PUSH1 0x40 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xA62 JUMPI POP POP POP PUSH2 0x3A0 DUP4 MLOAD PUSH2 0xB29 JUMP JUMPDEST SWAP5 PUSH0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x425 JUMPI PUSH2 0x3BF PUSH2 0x3B9 DUP3 DUP7 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH2 0xD21 JUMP JUMPDEST SWAP1 PUSH2 0x3CD PUSH2 0x3B9 DUP3 DUP9 PUSH2 0xB5A JUMP JUMPDEST SWAP2 PUSH0 DUP4 DUP3 SUB SWAP4 SLT DUP2 DUP5 SLT DUP2 AND SWAP2 DUP5 SGT SWAP1 ISZERO AND OR PUSH2 0x3F8 JUMPI PUSH1 0x1 SWAP2 PUSH2 0x3F1 DUP3 DUP11 PUSH2 0xB5A JUMP JUMPDEST MSTORE ADD PUSH2 0x3A3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 POP SWAP2 SWAP3 PUSH2 0x434 DUP5 MLOAD PUSH2 0xB29 JUMP JUMPDEST SWAP3 PUSH0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x462 JUMPI PUSH1 0x1 SWAP1 PUSH2 0x451 PUSH1 0x44 CALLDATALOAD DUP10 DUP4 DUP9 PUSH2 0xD76 JUMP JUMPDEST PUSH2 0x45B DUP3 DUP9 PUSH2 0xB5A JUMP JUMPDEST MSTORE ADD PUSH2 0x437 JUMP JUMPDEST POP SWAP2 SWAP1 SWAP5 SWAP4 PUSH0 SWAP6 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xCA4F280300000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0x24 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0xA57 JUMPI PUSH0 SWAP5 PUSH2 0x9AD JUMPI JUMPDEST POP POP SWAP5 SWAP1 PUSH0 SWAP2 JUMPDEST DUP6 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 GT PUSH2 0x3F8 JUMPI DUP4 LT ISZERO PUSH2 0x92F JUMPI POP PUSH0 SWAP2 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 PUSH0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x595 JUMPI PUSH0 PUSH2 0x556 DUP3 DUP10 PUSH2 0xB5A JUMP JUMPDEST MLOAD SGT DUP1 PUSH2 0x582 JUMPI JUMPDEST PUSH2 0x56B JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x542 JUMP JUMPDEST PUSH2 0x57A SWAP2 SWAP9 POP DUP1 SWAP5 POP DUP7 PUSH2 0xB5A JUMP JUMPDEST MLOAD SWAP7 DUP4 PUSH2 0x563 JUMP JUMPDEST POP DUP9 PUSH2 0x58E DUP3 DUP10 PUSH2 0xB5A JUMP JUMPDEST MLOAD SLT PUSH2 0x55E JUMP JUMPDEST POP SWAP7 POP SWAP2 SWAP5 SWAP1 SWAP3 PUSH0 SWAP1 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 SWAP8 PUSH0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x615 JUMPI PUSH0 PUSH2 0x5D6 DUP3 DUP11 PUSH2 0xB5A JUMP JUMPDEST MLOAD SLT DUP1 PUSH2 0x602 JUMPI JUMPDEST PUSH2 0x5EB JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH2 0x5FA SWAP2 SWAP10 POP DUP1 SWAP4 POP DUP8 PUSH2 0xB5A JUMP JUMPDEST MLOAD SWAP8 DUP3 PUSH2 0x5E3 JUMP JUMPDEST POP DUP10 PUSH2 0x60E DUP3 DUP11 PUSH2 0xB5A JUMP JUMPDEST MLOAD SGT PUSH2 0x5DE JUMP JUMPDEST POP SWAP3 SWAP7 SWAP8 POP SWAP4 SWAP3 DUP2 SWAP8 PUSH2 0x628 DUP2 DUP9 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH2 0x63C PUSH2 0x636 DUP6 DUP11 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH2 0xB9B JUMP JUMPDEST SGT ISZERO PUSH2 0x7DF JUMPI PUSH2 0x75A DUP7 PUSH2 0x71E DUP11 PUSH2 0x710 PUSH2 0x68E PUSH2 0x688 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x680 DUP13 DUP3 PUSH2 0x678 DUP6 DUP13 PUSH2 0xB5A JUMP JUMPDEST MLOAD AND SWAP10 PUSH2 0xB5A JUMP JUMPDEST MLOAD AND SWAP5 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH2 0xE06 JUMP JUMPDEST SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 PUSH32 0x3EBC54E500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x44 CALLDATALOAD SWAP3 DUP14 PUSH1 0x24 DUP8 ADD SWAP4 SWAP1 PUSH1 0xE0 SWAP6 SWAP3 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP6 DUP2 DUP1 SWAP5 AND DUP9 MSTORE AND PUSH1 0x20 DUP8 ADD MSTORE AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 PUSH1 0xC0 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0xAD2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH2 0xF1B JUMP JUMPDEST PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x1A3 JUMPI PUSH0 PUSH2 0x787 DUP4 DUP3 PUSH2 0x780 PUSH2 0x78D SWAP7 PUSH1 0x20 DUP16 SWAP8 ADD MLOAD SWAP7 PUSH2 0xB5A JUMP JUMPDEST MSTORE DUP11 PUSH2 0xB5A JUMP JUMPDEST MSTORE PUSH2 0xD21 JUMP JUMPDEST SWAP2 PUSH2 0x798 DUP2 DUP10 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH0 DUP5 DUP3 ADD SWAP5 DUP6 SLT SWAP2 SLT SWAP1 DUP1 ISZERO DUP3 AND SWAP2 ISZERO AND OR PUSH2 0x3F8 JUMPI PUSH1 0x1 SWAP3 PUSH2 0x7BC DUP3 DUP11 PUSH2 0xB5A JUMP JUMPDEST MSTORE PUSH2 0x7D5 PUSH2 0x7CE PUSH1 0x44 CALLDATALOAD DUP11 DUP5 DUP10 PUSH2 0xD76 JUMP JUMPDEST SWAP2 DUP9 PUSH2 0xB5A JUMP JUMPDEST MSTORE ADD SWAP2 SWAP1 SWAP6 PUSH2 0x4E8 JUMP JUMPDEST SWAP2 DUP1 PUSH2 0x7EB DUP5 DUP9 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP7 PUSH2 0x80E DUP3 DUP11 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH2 0x830 SWAP1 DUP13 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH2 0x83A SWAP1 PUSH2 0xB9B JUMP JUMPDEST PUSH2 0x843 SWAP1 PUSH2 0xE06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x175D440800000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP4 DUP3 AND PUSH1 0x44 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 DUP3 AND PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0x84 DUP5 ADD MSTORE SWAP1 CALLDATALOAD AND PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC0 PUSH1 0xC4 DUP3 ADD MSTORE PUSH0 PUSH1 0xE4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MSTORE PUSH2 0x8C9 PUSH2 0x104 DUP3 PUSH2 0xAD2 JUMP JUMPDEST PUSH2 0x909 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH2 0xF1B JUMP JUMPDEST DUP1 DUP1 MLOAD DUP2 ADD SUB PUSH1 0x20 SGT PUSH2 0x1A3 JUMPI PUSH0 PUSH2 0x787 DUP4 DUP3 PUSH2 0x780 PUSH2 0x78D SWAP7 PUSH1 0x20 DUP16 SWAP8 ADD MLOAD SWAP7 PUSH2 0xB5A JUMP JUMPDEST PUSH2 0x94F DUP2 PUSH2 0x949 PUSH2 0x944 PUSH2 0x636 DUP12 SWAP6 DUP12 PUSH2 0xB5A JUMP JUMPDEST PUSH2 0xE06 JUMP JUMPDEST SWAP3 PUSH2 0xB5A JUMP JUMPDEST MLOAD SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x3F8 JUMPI DUP2 ISZERO PUSH2 0x980 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x40 MLOAD SWAP2 DIV PUSH1 0x1 SHR DUP2 MSTORE RETURN JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 SWAP2 SWAP4 POP RETURNDATASIZE DUP1 PUSH0 DUP5 RETURNDATACOPY PUSH2 0x9C0 DUP2 DUP5 PUSH2 0xAD2 JUMP JUMPDEST DUP3 ADD SWAP2 PUSH1 0x20 DUP2 DUP5 SUB SLT PUSH2 0x1A3 JUMPI DUP1 MLOAD SWAP2 DUP3 GT PUSH2 0x1A3 JUMPI ADD SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1A3 JUMPI DUP2 MLOAD SWAP1 PUSH2 0x9EF DUP3 PUSH2 0xAF5 JUMP JUMPDEST SWAP3 PUSH2 0x9FD PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xAD2 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP4 PUSH1 0x5 SHL DUP3 ADD ADD SWAP2 DUP3 GT PUSH2 0x1A3 JUMPI PUSH1 0x20 ADD SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0xA2A JUMPI POP POP POP SWAP2 DUP7 DUP1 PUSH2 0x4E1 JUMP JUMPDEST DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x1A3 JUMPI DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x38C JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x236 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x1A3 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH1 0x1F NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA72 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA72 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA72 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xB33 DUP3 PUSH2 0xAF5 JUMP JUMPDEST PUSH2 0xB40 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0xAD2 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x1F NOT PUSH2 0xB50 DUP3 SWAP5 PUSH2 0xAF5 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xB6E JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 EQ PUSH2 0x3F8 JUMPI PUSH0 SUB SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0xBF1 JUMPI RETURNDATASIZE SWAP1 PUSH2 0xBD8 DUP3 PUSH2 0xB0D JUMP JUMPDEST SWAP2 PUSH2 0xBE6 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xAD2 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT PUSH1 0x1F PUSH1 0x20 DUP1 SWAP5 DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP8 MSTORE ADD DUP7 DUP7 ADD MCOPY PUSH0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 SWAP4 PUSH32 0xDA001F7D00000000000000000000000000000000000000000000000000000000 DUP6 DUP6 ADD MSTORE DUP3 PUSH1 0xA4 DUP6 ADD SWAP2 AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x44 DUP6 ADD MSTORE DUP7 MLOAD DUP1 SWAP2 MSTORE DUP5 PUSH1 0xC4 DUP6 ADD SWAP8 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0xD0D JUMPI POP POP POP DUP4 PUSH2 0xCFC SWAP5 SWAP6 SWAP7 DUP4 PUSH2 0xCD5 SWAP4 AND PUSH1 0x64 DUP7 ADD MSTORE PUSH0 DUP6 DUP3 SUB SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC DUP4 ADD PUSH1 0x84 DUP9 ADD MSTORE MSTORE DUP1 DUP6 MSTORE ADD DUP4 PUSH2 0xAD2 JUMP JUMPDEST PUSH32 0x0 AND PUSH2 0xF1B JUMP JUMPDEST DUP2 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x1A3 JUMPI ADD MLOAD SWAP1 JUMP JUMPDEST DUP3 MLOAD DUP10 MSTORE SWAP8 DUP7 ADD SWAP8 SWAP2 DUP7 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xC81 JUMP JUMPDEST PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD4B JUMPI SWAP1 JUMP JUMPDEST PUSH32 0x24775E0600000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0xDB1 DUP4 DUP3 MLOAD SWAP3 PUSH1 0x1F NOT PUSH2 0xDA5 PUSH2 0xD8F DUP7 PUSH2 0xAF5 JUMP JUMPDEST SWAP6 PUSH2 0xD9D PUSH1 0x40 MLOAD SWAP8 DUP9 PUSH2 0xAD2 JUMP JUMPDEST DUP1 DUP8 MSTORE PUSH2 0xAF5 JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP7 ADD CALLDATACOPY PUSH2 0xB5A JUMP JUMPDEST MLOAD SWAP4 DUP5 ISZERO PUSH2 0xDFD JUMPI PUSH2 0xDD9 SWAP4 PUSH2 0xDD3 PUSH0 DUP8 SGT SWAP7 DUP8 PUSH0 EQ PUSH2 0xDEE JUMPI SWAP2 JUMPDEST DUP5 PUSH2 0xB5A JUMP JUMPDEST MSTORE PUSH2 0xC1B JUMP JUMPDEST SWAP1 ISZERO PUSH2 0xDE2 JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xDEB SWAP1 PUSH2 0xB9B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDF7 SWAP1 PUSH2 0xB9B JUMP JUMPDEST SWAP2 PUSH2 0xDCD JUMP JUMPDEST POP POP POP POP POP PUSH0 SWAP1 JUMP JUMPDEST PUSH0 DUP2 SLT PUSH2 0xE10 JUMPI SWAP1 JUMP JUMPDEST PUSH32 0xA8CE443200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x4 DUP2 MLOAD LT PUSH2 0xE4B JUMPI PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH32 0xA728568900000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP1 MLOAD ISZERO PUSH2 0xE4B JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST SWAP1 PUSH2 0xEBF JUMPI POP DUP1 MLOAD ISZERO PUSH2 0xE97 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0xF12 JUMPI JUMPDEST PUSH2 0xED0 JUMPI POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0xEC8 JUMP JUMPDEST SWAP1 ADDRESS EXTCODESIZE ISZERO PUSH2 0x1A3 JUMPI PUSH0 PUSH2 0xF80 SWAP2 PUSH1 0x40 MLOAD DUP1 SWAP4 DUP2 SWAP3 PUSH32 0xA769963800000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 SWAP8 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0xBF6 JUMP JUMPDEST SUB DUP2 DUP4 ADDRESS GAS CALL SWAP1 DUP2 PUSH2 0x10F5 JUMPI JUMPDEST POP PUSH2 0x1097 JUMPI PUSH2 0xF9A PUSH2 0xBC7 JUMP JUMPDEST SWAP1 PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH2 0xFE6 DUP5 PUSH2 0xE3B JUMP JUMPDEST AND SUB PUSH2 0x1091 JUMPI DUP2 MLOAD SWAP2 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC SWAP4 DUP5 DUP2 ADD PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD SWAP4 DUP3 DUP3 DUP7 ADD SWAP6 SUB ADD SLT PUSH2 0x108D JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1089 JUMPI ADD DUP3 PUSH1 0x43 DUP3 ADD SLT ISZERO PUSH2 0x108D JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH2 0x105A DUP3 PUSH2 0xB0D JUMP JUMPDEST SWAP4 PUSH2 0x1068 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0xAD2 JUMP JUMPDEST DUP3 DUP6 MSTORE PUSH1 0x44 DUP4 DUP4 ADD ADD GT PUSH2 0x1089 JUMPI SWAP1 DUP1 PUSH1 0x44 PUSH1 0x20 SWAP4 ADD DUP4 DUP7 ADD MCOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP PUSH2 0xE73 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E657870656374656420737563636573730000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA72 JUMPI PUSH1 0x40 MSTORE PUSH0 SWAP1 PUSH0 PUSH2 0xF8D JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 PUSH21 0x38E351266540A42F02D9AA1DD7D14D8E4BFA505BAA 0xC SWAP9 SAR 0x2E 0x4C 0xC6 EQ POP 0xBD PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"537:8700:36:-:0;;;;;;;;;;;;;-1:-1:-1;;537:8700:36;;;;-1:-1:-1;;;;;537:8700:36;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;537:8700:36;;;;;;;;;;;;;;;;;;779:14;;803:16;;537:8700;;;;;;;;779:14;537:8700;;;;;803:16;537:8700;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;537:8700:36;;;;;;-1:-1:-1;537:8700:36;;;;;-1:-1:-1;537:8700:36"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":2735,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_address_contract_IERC20_contract_IERC20_uint256_address_stringliteral_c5d2":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_bytes":{"entryPoint":3062,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_and_zero_memory_array_array_int256_dyn":{"entryPoint":2857,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":2805,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":2829,"id":null,"parameterSlots":1,"returnSlots":1},"extract_returndata":{"entryPoint":3015,"id":null,"parameterSlots":0,"returnSlots":1},"finalize_allocation":{"entryPoint":2770,"id":null,"parameterSlots":2,"returnSlots":0},"fun_bubbleUpRevert":{"entryPoint":3699,"id":3321,"parameterSlots":1,"returnSlots":0},"fun_callAndRevert":{"entryPoint":3867,"id":9371,"parameterSlots":2,"returnSlots":1},"fun_parseSelector":{"entryPoint":3643,"id":3303,"parameterSlots":1,"returnSlots":1},"fun_queryAddLiquidityUnbalanced":{"entryPoint":3099,"id":9650,"parameterSlots":3,"returnSlots":1},"fun_queryAddLiquidityUnbalancedForTokenDeltas":{"entryPoint":3446,"id":9847,"parameterSlots":4,"returnSlots":1},"fun_toInt256":{"entryPoint":3361,"id":8764,"parameterSlots":1,"returnSlots":1},"fun_toUint256":{"entryPoint":3590,"id":7928,"parameterSlots":1,"returnSlots":1},"fun_verifyCallResultFromTarget":{"entryPoint":3714,"id":6947,"parameterSlots":3,"returnSlots":1},"memory_array_index_access_uint256_dyn":{"entryPoint":2906,"id":null,"parameterSlots":2,"returnSlots":1},"negate_int256":{"entryPoint":2971,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"immutableReferences":{"9456":[{"length":32,"start":1201}],"9459":[{"length":32,"start":770},{"length":32,"start":1845},{"length":32,"start":2276},{"length":32,"start":3287}]},"linkReferences":{},"object":"60806040526004361015610011575f80fd5b5f3560e01c806348406a54146101a75763a76996381461002f575f80fd5b346101a35760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a357610066610aaf565b6024359067ffffffffffffffff82116101a357366023830112156101a35781600401359061009382610b0d565b926100a16040519485610ad2565b828452602084019036602485830101116101a3575f94856020868297602484960187378301015251925af16100d4610bc7565b90801561012957906100ea816101259333610e82565b506040519182917f5ab64fb8000000000000000000000000000000000000000000000000000000008352602060048401526024830190610bf6565b0390fd5b507f5ab64fb8000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000061017583610e3b565b1603610e73577f28f95541000000000000000000000000000000000000000000000000000000005f5260045ffd5b5f80fd5b346101a35760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a3576101de610aaf565b67ffffffffffffffff6024358181116101a357366023820112156101a35780600401359061020b82610af5565b916102196040519384610ad2565b8083526024602084019160051b830101913683116101a357602401905b828210610a9f5750505073ffffffffffffffffffffffffffffffffffffffff604435169182604435036101a3576102706044358386610c1b565b92604051907f0f71088800000000000000000000000000000000000000000000000000000000602083015273ffffffffffffffffffffffffffffffffffffffff86169485602484015260448301526064820152608060848201525f60a482015260a4815260e081019080821083831117610a72576103279160405273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016610f1b565b9081518201916020818185019403126101a3576020810151908282116101a357019180603f840112156101a357602083015161036281610af5565b936103706040519586610ad2565b8185526040602086019260051b8201019283116101a357604001905b828210610a62575050506103a08351610b29565b945f5b8451811015610425576103bf6103b98286610b5a565b51610d21565b906103cd6103b98288610b5a565b915f83820393128184128116918413901516176103f8576001916103f1828a610b5a565b52016103a3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b50915091926104348451610b29565b925f5b855181101561046257600190610451604435898388610d76565b61045b8288610b5a565b5201610437565b50919094935f95604051907fca4f280300000000000000000000000000000000000000000000000000000000825260048201525f8160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa938415610a57575f946109ad575b505094905f915b85517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081116103f85783101561092f57505f917f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff965f5b8651811015610595575f6105568289610b5a565b511380610582575b61056b575b600101610542565b61057a91985080945086610b5a565b519683610563565b508861058e8289610b5a565b511261055e565b509650919490925f907f8000000000000000000000000000000000000000000000000000000000000000975f5b8751811015610615575f6105d6828a610b5a565b511280610602575b6105eb575b6001016105c2565b6105fa91995080935087610b5a565b5197826105e3565b508961060e828a610b5a565b51136105de565b5092969750939281976106288188610b5a565b5161063c610636858a610b5a565b51610b9b565b13156107df5761075a8661071e8a61071061068e6106888773ffffffffffffffffffffffffffffffffffffffff6106808c82610678858c610b5a565b511699610b5a565b511694610b5a565b51610e06565b936040519485937f3ebc54e5000000000000000000000000000000000000000000000000000000006020860152604435928d60248701939060e095929373ffffffffffffffffffffffffffffffffffffffff8095818094168852166020870152166040850152606084015216608082015260c060a08201525f60c08201520190565b03601f198101835282610ad2565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016610f1b565b6020818051810103126101a3575f610787838261078061078d9660208f97015196610b5a565b528a610b5a565b52610d21565b916107988189610b5a565b515f84820194851291129080158216911516176103f8576001926107bc828a610b5a565b526107d56107ce6044358a8489610d76565b9188610b5a565b52019190956104e8565b91806107eb8488610b5a565b5173ffffffffffffffffffffffffffffffffffffffff16908661080e828a610b5a565b5173ffffffffffffffffffffffffffffffffffffffff1691610830908c610b5a565b5161083a90610b9b565b61084390610e06565b6040517f175d440800000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff92831660248201529382166044808601919091529282166064850152608484015290351660a482015260c060c48201525f60e48083019190915281526108c961010482610ad2565b6109099073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016610f1b565b8080518101036020136101a3575f610787838261078061078d9660208f97015196610b5a565b61094f816109496109446106368b958b610b5a565b610e06565b92610b5a565b5190670de0b6b3a7640000908181029181830414901517156103f857811561098057602091604051910460011c8152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b909193503d805f843e6109c08184610ad2565b8201916020818403126101a35780519182116101a357019080601f830112156101a3578151906109ef82610af5565b926109fd6040519485610ad2565b82845260208085019360051b8201019182116101a357602001915b818310610a2a575050509186806104e1565b825173ffffffffffffffffffffffffffffffffffffffff811681036101a357815260209283019201610a18565b6040513d5f823e3d90fd5b815181526020918201910161038c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8135815260209182019101610236565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101a357565b90601f601f19910116810190811067ffffffffffffffff821117610a7257604052565b67ffffffffffffffff8111610a725760051b60200190565b67ffffffffffffffff8111610a7257601f01601f191660200190565b90610b3382610af5565b610b406040519182610ad2565b828152601f19610b508294610af5565b0190602036910137565b8051821015610b6e5760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f800000000000000000000000000000000000000000000000000000000000000081146103f8575f0390565b3d15610bf1573d90610bd882610b0d565b91610be66040519384610ad2565b82523d5f602084013e565b606090565b90601f19601f602080948051918291828752018686015e5f8582860101520116010190565b90929173ffffffffffffffffffffffffffffffffffffffff604051916020937fda001f7d00000000000000000000000000000000000000000000000000000000858501528260a48501911660248501526080604485015286518091528460c485019701905f5b818110610d0d5750505083610cfc94959683610cd5931660648601525f858203917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc83016084880152528085520183610ad2565b7f000000000000000000000000000000000000000000000000000000000000000016610f1b565b81818051810103126101a357015190565b825189529786019791860191600101610c81565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111610d4b5790565b7f24775e06000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b929091610db183825192601f19610da5610d8f86610af5565b95610d9d6040519788610ad2565b808752610af5565b01366020860137610b5a565b51938415610dfd57610dd993610dd35f871396875f14610dee57915b84610b5a565b52610c1b565b9015610de25790565b610deb90610b9b565b90565b610df790610b9b565b91610dcd565b50505050505f90565b5f8112610e105790565b7fa8ce4432000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b6004815110610e4b576020015190565b7fa7285689000000000000000000000000000000000000000000000000000000005f5260045ffd5b805115610e4b57805190602001fd5b90610ebf5750805115610e9757805190602001fd5b7f1425ea42000000000000000000000000000000000000000000000000000000005f5260045ffd5b81511580610f12575b610ed0575090565b73ffffffffffffffffffffffffffffffffffffffff907f9996b315000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b50803b15610ec8565b90303b156101a3575f610f8091604051809381927fa769963800000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8597166004840152604060248401526044830190610bf6565b038183305af190816110f5575b5061109757610f9a610bc7565b907f5ab64fb8000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000610fe684610e3b565b16036110915781519160207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc938481016004840152820193828286019503011261108d5760248101519067ffffffffffffffff821161108957018260438201121561108d5760248101519061105a82610b0d565b936110686040519586610ad2565b828552604483830101116110895790806044602093018386015e8301015290565b8280fd5b5080fd5b50610e73565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e6578706563746564207375636365737300000000000000000000000000006044820152fd5b90915067ffffffffffffffff8111610a72576040525f905f610f8d56fea26469706673582212208d7438e351266540a42f02d9aa1dd7d14d8e4bfa505baa0c981d2e4cc61450bd64736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x48406A54 EQ PUSH2 0x1A7 JUMPI PUSH4 0xA7699638 EQ PUSH2 0x2F JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1A3 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH2 0x66 PUSH2 0xAAF JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1A3 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x1A3 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP1 PUSH2 0x93 DUP3 PUSH2 0xB0D JUMP JUMPDEST SWAP3 PUSH2 0xA1 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xAD2 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP1 CALLDATASIZE PUSH1 0x24 DUP6 DUP4 ADD ADD GT PUSH2 0x1A3 JUMPI PUSH0 SWAP5 DUP6 PUSH1 0x20 DUP7 DUP3 SWAP8 PUSH1 0x24 DUP5 SWAP7 ADD DUP8 CALLDATACOPY DUP4 ADD ADD MSTORE MLOAD SWAP3 GAS CALL PUSH2 0xD4 PUSH2 0xBC7 JUMP JUMPDEST SWAP1 DUP1 ISZERO PUSH2 0x129 JUMPI SWAP1 PUSH2 0xEA DUP2 PUSH2 0x125 SWAP4 CALLER PUSH2 0xE82 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x20 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0xBF6 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH2 0x175 DUP4 PUSH2 0xE3B JUMP JUMPDEST AND SUB PUSH2 0xE73 JUMPI PUSH32 0x28F9554100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1A3 JUMPI PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH2 0x1DE PUSH2 0xAAF JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x1A3 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x1A3 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP1 PUSH2 0x20B DUP3 PUSH2 0xAF5 JUMP JUMPDEST SWAP2 PUSH2 0x219 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xAD2 JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x24 PUSH1 0x20 DUP5 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0x1A3 JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xA9F JUMPI POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD AND SWAP2 DUP3 PUSH1 0x44 CALLDATALOAD SUB PUSH2 0x1A3 JUMPI PUSH2 0x270 PUSH1 0x44 CALLDATALOAD DUP4 DUP7 PUSH2 0xC1B JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xF71088800000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP5 DUP6 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x84 DUP3 ADD MSTORE PUSH0 PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xA4 DUP2 MSTORE PUSH1 0xE0 DUP2 ADD SWAP1 DUP1 DUP3 LT DUP4 DUP4 GT OR PUSH2 0xA72 JUMPI PUSH2 0x327 SWAP2 PUSH1 0x40 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH2 0xF1B JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP3 ADD SWAP2 PUSH1 0x20 DUP2 DUP2 DUP6 ADD SWAP5 SUB SLT PUSH2 0x1A3 JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP1 DUP3 DUP3 GT PUSH2 0x1A3 JUMPI ADD SWAP2 DUP1 PUSH1 0x3F DUP5 ADD SLT ISZERO PUSH2 0x1A3 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x362 DUP2 PUSH2 0xAF5 JUMP JUMPDEST SWAP4 PUSH2 0x370 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0xAD2 JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x40 PUSH1 0x20 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x1A3 JUMPI PUSH1 0x40 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xA62 JUMPI POP POP POP PUSH2 0x3A0 DUP4 MLOAD PUSH2 0xB29 JUMP JUMPDEST SWAP5 PUSH0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x425 JUMPI PUSH2 0x3BF PUSH2 0x3B9 DUP3 DUP7 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH2 0xD21 JUMP JUMPDEST SWAP1 PUSH2 0x3CD PUSH2 0x3B9 DUP3 DUP9 PUSH2 0xB5A JUMP JUMPDEST SWAP2 PUSH0 DUP4 DUP3 SUB SWAP4 SLT DUP2 DUP5 SLT DUP2 AND SWAP2 DUP5 SGT SWAP1 ISZERO AND OR PUSH2 0x3F8 JUMPI PUSH1 0x1 SWAP2 PUSH2 0x3F1 DUP3 DUP11 PUSH2 0xB5A JUMP JUMPDEST MSTORE ADD PUSH2 0x3A3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 POP SWAP2 SWAP3 PUSH2 0x434 DUP5 MLOAD PUSH2 0xB29 JUMP JUMPDEST SWAP3 PUSH0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x462 JUMPI PUSH1 0x1 SWAP1 PUSH2 0x451 PUSH1 0x44 CALLDATALOAD DUP10 DUP4 DUP9 PUSH2 0xD76 JUMP JUMPDEST PUSH2 0x45B DUP3 DUP9 PUSH2 0xB5A JUMP JUMPDEST MSTORE ADD PUSH2 0x437 JUMP JUMPDEST POP SWAP2 SWAP1 SWAP5 SWAP4 PUSH0 SWAP6 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xCA4F280300000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0x24 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0xA57 JUMPI PUSH0 SWAP5 PUSH2 0x9AD JUMPI JUMPDEST POP POP SWAP5 SWAP1 PUSH0 SWAP2 JUMPDEST DUP6 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 GT PUSH2 0x3F8 JUMPI DUP4 LT ISZERO PUSH2 0x92F JUMPI POP PUSH0 SWAP2 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 PUSH0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x595 JUMPI PUSH0 PUSH2 0x556 DUP3 DUP10 PUSH2 0xB5A JUMP JUMPDEST MLOAD SGT DUP1 PUSH2 0x582 JUMPI JUMPDEST PUSH2 0x56B JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x542 JUMP JUMPDEST PUSH2 0x57A SWAP2 SWAP9 POP DUP1 SWAP5 POP DUP7 PUSH2 0xB5A JUMP JUMPDEST MLOAD SWAP7 DUP4 PUSH2 0x563 JUMP JUMPDEST POP DUP9 PUSH2 0x58E DUP3 DUP10 PUSH2 0xB5A JUMP JUMPDEST MLOAD SLT PUSH2 0x55E JUMP JUMPDEST POP SWAP7 POP SWAP2 SWAP5 SWAP1 SWAP3 PUSH0 SWAP1 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 SWAP8 PUSH0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x615 JUMPI PUSH0 PUSH2 0x5D6 DUP3 DUP11 PUSH2 0xB5A JUMP JUMPDEST MLOAD SLT DUP1 PUSH2 0x602 JUMPI JUMPDEST PUSH2 0x5EB JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH2 0x5FA SWAP2 SWAP10 POP DUP1 SWAP4 POP DUP8 PUSH2 0xB5A JUMP JUMPDEST MLOAD SWAP8 DUP3 PUSH2 0x5E3 JUMP JUMPDEST POP DUP10 PUSH2 0x60E DUP3 DUP11 PUSH2 0xB5A JUMP JUMPDEST MLOAD SGT PUSH2 0x5DE JUMP JUMPDEST POP SWAP3 SWAP7 SWAP8 POP SWAP4 SWAP3 DUP2 SWAP8 PUSH2 0x628 DUP2 DUP9 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH2 0x63C PUSH2 0x636 DUP6 DUP11 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH2 0xB9B JUMP JUMPDEST SGT ISZERO PUSH2 0x7DF JUMPI PUSH2 0x75A DUP7 PUSH2 0x71E DUP11 PUSH2 0x710 PUSH2 0x68E PUSH2 0x688 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x680 DUP13 DUP3 PUSH2 0x678 DUP6 DUP13 PUSH2 0xB5A JUMP JUMPDEST MLOAD AND SWAP10 PUSH2 0xB5A JUMP JUMPDEST MLOAD AND SWAP5 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH2 0xE06 JUMP JUMPDEST SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 PUSH32 0x3EBC54E500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x44 CALLDATALOAD SWAP3 DUP14 PUSH1 0x24 DUP8 ADD SWAP4 SWAP1 PUSH1 0xE0 SWAP6 SWAP3 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP6 DUP2 DUP1 SWAP5 AND DUP9 MSTORE AND PUSH1 0x20 DUP8 ADD MSTORE AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 PUSH1 0xC0 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0xAD2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH2 0xF1B JUMP JUMPDEST PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x1A3 JUMPI PUSH0 PUSH2 0x787 DUP4 DUP3 PUSH2 0x780 PUSH2 0x78D SWAP7 PUSH1 0x20 DUP16 SWAP8 ADD MLOAD SWAP7 PUSH2 0xB5A JUMP JUMPDEST MSTORE DUP11 PUSH2 0xB5A JUMP JUMPDEST MSTORE PUSH2 0xD21 JUMP JUMPDEST SWAP2 PUSH2 0x798 DUP2 DUP10 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH0 DUP5 DUP3 ADD SWAP5 DUP6 SLT SWAP2 SLT SWAP1 DUP1 ISZERO DUP3 AND SWAP2 ISZERO AND OR PUSH2 0x3F8 JUMPI PUSH1 0x1 SWAP3 PUSH2 0x7BC DUP3 DUP11 PUSH2 0xB5A JUMP JUMPDEST MSTORE PUSH2 0x7D5 PUSH2 0x7CE PUSH1 0x44 CALLDATALOAD DUP11 DUP5 DUP10 PUSH2 0xD76 JUMP JUMPDEST SWAP2 DUP9 PUSH2 0xB5A JUMP JUMPDEST MSTORE ADD SWAP2 SWAP1 SWAP6 PUSH2 0x4E8 JUMP JUMPDEST SWAP2 DUP1 PUSH2 0x7EB DUP5 DUP9 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP7 PUSH2 0x80E DUP3 DUP11 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH2 0x830 SWAP1 DUP13 PUSH2 0xB5A JUMP JUMPDEST MLOAD PUSH2 0x83A SWAP1 PUSH2 0xB9B JUMP JUMPDEST PUSH2 0x843 SWAP1 PUSH2 0xE06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x175D440800000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP4 DUP3 AND PUSH1 0x44 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 DUP3 AND PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0x84 DUP5 ADD MSTORE SWAP1 CALLDATALOAD AND PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC0 PUSH1 0xC4 DUP3 ADD MSTORE PUSH0 PUSH1 0xE4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MSTORE PUSH2 0x8C9 PUSH2 0x104 DUP3 PUSH2 0xAD2 JUMP JUMPDEST PUSH2 0x909 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH2 0xF1B JUMP JUMPDEST DUP1 DUP1 MLOAD DUP2 ADD SUB PUSH1 0x20 SGT PUSH2 0x1A3 JUMPI PUSH0 PUSH2 0x787 DUP4 DUP3 PUSH2 0x780 PUSH2 0x78D SWAP7 PUSH1 0x20 DUP16 SWAP8 ADD MLOAD SWAP7 PUSH2 0xB5A JUMP JUMPDEST PUSH2 0x94F DUP2 PUSH2 0x949 PUSH2 0x944 PUSH2 0x636 DUP12 SWAP6 DUP12 PUSH2 0xB5A JUMP JUMPDEST PUSH2 0xE06 JUMP JUMPDEST SWAP3 PUSH2 0xB5A JUMP JUMPDEST MLOAD SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x3F8 JUMPI DUP2 ISZERO PUSH2 0x980 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x40 MLOAD SWAP2 DIV PUSH1 0x1 SHR DUP2 MSTORE RETURN JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 SWAP2 SWAP4 POP RETURNDATASIZE DUP1 PUSH0 DUP5 RETURNDATACOPY PUSH2 0x9C0 DUP2 DUP5 PUSH2 0xAD2 JUMP JUMPDEST DUP3 ADD SWAP2 PUSH1 0x20 DUP2 DUP5 SUB SLT PUSH2 0x1A3 JUMPI DUP1 MLOAD SWAP2 DUP3 GT PUSH2 0x1A3 JUMPI ADD SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1A3 JUMPI DUP2 MLOAD SWAP1 PUSH2 0x9EF DUP3 PUSH2 0xAF5 JUMP JUMPDEST SWAP3 PUSH2 0x9FD PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xAD2 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP4 PUSH1 0x5 SHL DUP3 ADD ADD SWAP2 DUP3 GT PUSH2 0x1A3 JUMPI PUSH1 0x20 ADD SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0xA2A JUMPI POP POP POP SWAP2 DUP7 DUP1 PUSH2 0x4E1 JUMP JUMPDEST DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x1A3 JUMPI DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x38C JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x236 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x1A3 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH1 0x1F NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA72 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA72 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA72 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xB33 DUP3 PUSH2 0xAF5 JUMP JUMPDEST PUSH2 0xB40 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0xAD2 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x1F NOT PUSH2 0xB50 DUP3 SWAP5 PUSH2 0xAF5 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xB6E JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 EQ PUSH2 0x3F8 JUMPI PUSH0 SUB SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0xBF1 JUMPI RETURNDATASIZE SWAP1 PUSH2 0xBD8 DUP3 PUSH2 0xB0D JUMP JUMPDEST SWAP2 PUSH2 0xBE6 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xAD2 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT PUSH1 0x1F PUSH1 0x20 DUP1 SWAP5 DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP8 MSTORE ADD DUP7 DUP7 ADD MCOPY PUSH0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 SWAP4 PUSH32 0xDA001F7D00000000000000000000000000000000000000000000000000000000 DUP6 DUP6 ADD MSTORE DUP3 PUSH1 0xA4 DUP6 ADD SWAP2 AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x44 DUP6 ADD MSTORE DUP7 MLOAD DUP1 SWAP2 MSTORE DUP5 PUSH1 0xC4 DUP6 ADD SWAP8 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0xD0D JUMPI POP POP POP DUP4 PUSH2 0xCFC SWAP5 SWAP6 SWAP7 DUP4 PUSH2 0xCD5 SWAP4 AND PUSH1 0x64 DUP7 ADD MSTORE PUSH0 DUP6 DUP3 SUB SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC DUP4 ADD PUSH1 0x84 DUP9 ADD MSTORE MSTORE DUP1 DUP6 MSTORE ADD DUP4 PUSH2 0xAD2 JUMP JUMPDEST PUSH32 0x0 AND PUSH2 0xF1B JUMP JUMPDEST DUP2 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x1A3 JUMPI ADD MLOAD SWAP1 JUMP JUMPDEST DUP3 MLOAD DUP10 MSTORE SWAP8 DUP7 ADD SWAP8 SWAP2 DUP7 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xC81 JUMP JUMPDEST PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD4B JUMPI SWAP1 JUMP JUMPDEST PUSH32 0x24775E0600000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0xDB1 DUP4 DUP3 MLOAD SWAP3 PUSH1 0x1F NOT PUSH2 0xDA5 PUSH2 0xD8F DUP7 PUSH2 0xAF5 JUMP JUMPDEST SWAP6 PUSH2 0xD9D PUSH1 0x40 MLOAD SWAP8 DUP9 PUSH2 0xAD2 JUMP JUMPDEST DUP1 DUP8 MSTORE PUSH2 0xAF5 JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP7 ADD CALLDATACOPY PUSH2 0xB5A JUMP JUMPDEST MLOAD SWAP4 DUP5 ISZERO PUSH2 0xDFD JUMPI PUSH2 0xDD9 SWAP4 PUSH2 0xDD3 PUSH0 DUP8 SGT SWAP7 DUP8 PUSH0 EQ PUSH2 0xDEE JUMPI SWAP2 JUMPDEST DUP5 PUSH2 0xB5A JUMP JUMPDEST MSTORE PUSH2 0xC1B JUMP JUMPDEST SWAP1 ISZERO PUSH2 0xDE2 JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xDEB SWAP1 PUSH2 0xB9B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDF7 SWAP1 PUSH2 0xB9B JUMP JUMPDEST SWAP2 PUSH2 0xDCD JUMP JUMPDEST POP POP POP POP POP PUSH0 SWAP1 JUMP JUMPDEST PUSH0 DUP2 SLT PUSH2 0xE10 JUMPI SWAP1 JUMP JUMPDEST PUSH32 0xA8CE443200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x4 DUP2 MLOAD LT PUSH2 0xE4B JUMPI PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH32 0xA728568900000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP1 MLOAD ISZERO PUSH2 0xE4B JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST SWAP1 PUSH2 0xEBF JUMPI POP DUP1 MLOAD ISZERO PUSH2 0xE97 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0xF12 JUMPI JUMPDEST PUSH2 0xED0 JUMPI POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0xEC8 JUMP JUMPDEST SWAP1 ADDRESS EXTCODESIZE ISZERO PUSH2 0x1A3 JUMPI PUSH0 PUSH2 0xF80 SWAP2 PUSH1 0x40 MLOAD DUP1 SWAP4 DUP2 SWAP3 PUSH32 0xA769963800000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 SWAP8 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0xBF6 JUMP JUMPDEST SUB DUP2 DUP4 ADDRESS GAS CALL SWAP1 DUP2 PUSH2 0x10F5 JUMPI JUMPDEST POP PUSH2 0x1097 JUMPI PUSH2 0xF9A PUSH2 0xBC7 JUMP JUMPDEST SWAP1 PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH2 0xFE6 DUP5 PUSH2 0xE3B JUMP JUMPDEST AND SUB PUSH2 0x1091 JUMPI DUP2 MLOAD SWAP2 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC SWAP4 DUP5 DUP2 ADD PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD SWAP4 DUP3 DUP3 DUP7 ADD SWAP6 SUB ADD SLT PUSH2 0x108D JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1089 JUMPI ADD DUP3 PUSH1 0x43 DUP3 ADD SLT ISZERO PUSH2 0x108D JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH2 0x105A DUP3 PUSH2 0xB0D JUMP JUMPDEST SWAP4 PUSH2 0x1068 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0xAD2 JUMP JUMPDEST DUP3 DUP6 MSTORE PUSH1 0x44 DUP4 DUP4 ADD ADD GT PUSH2 0x1089 JUMPI SWAP1 DUP1 PUSH1 0x44 PUSH1 0x20 SWAP4 ADD DUP4 DUP7 ADD MCOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP PUSH2 0xE73 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E657870656374656420737563636573730000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA72 JUMPI PUSH1 0x40 MSTORE PUSH0 SWAP1 PUSH0 PUSH2 0xF8D JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 PUSH21 0x38E351266540A42F02D9AA1DD7D14D8E4BFA505BAA 0xC SWAP9 SAR 0x2E 0x4C 0xC6 EQ POP 0xBD PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"537:8700:36:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;811:19:35;;;;;;:::i;:::-;840:718;;;;;990:10;955:63;990:10;537:8700:36;990:10:35;;955:63;:::i;:::-;;537:8700:36;;1084:26:35;;;;;;537:8700:36;;1084:26:35;;537:8700:36;;;;;;:::i;:::-;1084:26:35;;;840:718;1276:33;1344:27;537:8700:36;1276:33:35;;;:::i;:::-;537:8700:36;1327:44:35;1540:6;1323:110;1398:20;537:8700:36;1398:20:35;537:8700:36;;1398:20:35;537:8700:36;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1265:58;537:8700;;1265:58;;;:::i;:::-;537:8700;;;3717:247;537:8700;;3717:247;;;537:8700;;;3717:247;;537:8700;3717:247;;537:8700;;;;;;;;;;;;;;;;;;;;3717:247;;537:8700;;;;;;;;;;;;;3643:339;537:8700;;;;3687:7;537:8700;3643:339;:::i;:::-;537:8700;;;3615:410;;;537:8700;3615:410;;;;537:8700;;;;;;3615:410;;537:8700;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1544:35;537:8700;;1544:35;:::i;:::-;1594:13;537:8700;1636:3;537:8700;;1609:25;;;;;1667:36;:25;;;;:::i;:::-;537:8700;1667:36;:::i;:::-;1706:17;:28;:17;;;;:::i;:28::-;537:8700;;;;;;;;;;;;;;;;;;;;;;1655:79;;;;;:::i;:::-;537:8700;;1594:13;;537:8700;;;;;;;;;;1609:25;;;;;;1890:35;537:8700;;1890:35;:::i;:::-;1940:13;537:8700;1982:3;537:8700;;1955:25;;;;;537:8700;;2016:67;537:8700;;2016:67;;;;:::i;:::-;2001:82;;;;:::i;:::-;537:8700;;1940:13;;1955:25;;;;;;537:8700;;;;6588:26;537:8700;6588:26;;537:8700;6588:26;;537:8700;;6588:6;537:8700;6588:6;537:8700;6588:6;537:8700;6588:26;;;;;;;537:8700;6588:26;;;1935:159;6630:13;;;;537:8700;6625:1710;6668:3;537:8700;;;;;;;;;;6645:21;;;;;6786:28;537:8700;8586:29;8599:16;8630:13;537:8700;8663:3;537:8700;;8645:16;;;;;537:8700;8686:8;;;;:::i;:::-;537:8700;8686:12;:30;;;8663:3;8682:110;;8663:3;537:8700;;8630:13;;8682:110;8742:8;;;;;;;;;:::i;:::-;537:8700;;8768:9;8682:110;;8686:30;8702:8;;;;;;:::i;:::-;537:8700;8702:14;8686:30;;8645:16;;;;;;;;537:8700;9013:29;9026:16;9057:13;537:8700;9090:3;537:8700;;9072:16;;;;;537:8700;9113:8;;;;:::i;:::-;537:8700;9113:12;:30;;;9090:3;9109:110;;9090:3;537:8700;;9057:13;;9109:110;9169:8;;;;;;;;;:::i;:::-;537:8700;;9195:9;9109:110;;9113:30;9129:8;;;;;;:::i;:::-;537:8700;9129:14;9113:30;;9072:16;;;;;;;;6828:52;6895:23;7009:32;;;;:::i;:::-;537:8700;7044:33;7045:32;;;;:::i;:::-;537:8700;7044:33;:::i;:::-;-1:-1:-1;7045:32:36;;;4287:397;7097:39;4361:305;7097:39;4361:305;7402:35;:23;7097:39;537:8700;7352:28;7154:40;7303:27;;;;;:::i;:::-;537:8700;;7352:28;;:::i;:::-;537:8700;;7402:23;;:::i;:::-;537:8700;7402:35;:::i;:::-;537:8700;;;4361:305;;;537:8700;;4361:305;;;537:8700;;4361:305;;537:8700;4361:305;;537:8700;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4361:305;;-1:-1:-1;;4361:305:36;;;;;;:::i;:::-;537:8700;3687:7;537:8700;4287:397;:::i;:::-;537:8700;;;;4259:466;;537:8700;;;;;8025:30;4259:466;;7984:27;8097:23;4259:466;537:8700;4259:466;;;537:8700;7005:922;7984:27;:::i;:::-;537:8700;8025:30;;:::i;:::-;537:8700;8097:23;:::i;:::-;8069:51;;;;;:::i;:::-;537:8700;;;;;;;;;;;;;;;;;;;;;;8069:51;;;;;:::i;:::-;537:8700;8134:190;8164:160;537:8700;;8164:160;;;;:::i;:::-;8134:190;;;:::i;:::-;537:8700;;6630:13;;;;;7005:922;7522:39;;7729:28;7522:39;7729:28;;:::i;:::-;537:8700;;;7779:27;;;;;;:::i;:::-;537:8700;;;7830:23;;;;;:::i;:::-;537:8700;7829:24;;;:::i;:::-;7828:38;;;:::i;:::-;537:8700;;;;5063:307;;;537:8700;;;;;5063:307;;537:8700;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;537:8700:36;;;;;;;;5063:307;;;537:8700;;5063:307;:::i;:::-;4989:399;;537:8700;3687:7;537:8700;4989:399;:::i;:::-;537:8700;;;4961:468;;537:8700;;-1:-1:-1;537:8700:36;;;8025:30;4961:468;;7984:27;8097:23;4961:468;537:8700;4961:468;;;537:8700;7005:922;7984:27;:::i;6645:21::-;2549:35;6645:21;2476:42;2477:28;2478:27;6645:21;;;2478:27;:::i;2477:28::-;2476:42;:::i;:::-;2549:35;;:::i;:::-;537:8700;465:4:18;;;;;;;;;;;;;;;;;537:8700:36;;;;;;;;;;;;;;;;;;;;;;;;;6588:26;;;;;;;537:8700;6588:26;;;;;;:::i;:::-;;;537:8700;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;6588:26;;;;;;;;537:8700;;;;;;;;;;;;;;;;;;;;6588:26;537:8700;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;537:8700:36;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;537:8700:36;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;537:8700:36;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;537:8700:36;;;;:::o;:::-;;;:::o;:::-;;-1:-1:-1;;537:8700:36;;;;;;;;;;;;;;;;;-1:-1:-1;537:8700:36;;;;;;;;;;;:::o;2820:599::-;;;;537:8700;;;3109:244;;;537:8700;3109:244;;;;537:8700;;;;;;3109:244;;;537:8700;;;;;;;;;;;;;;;;;;-1:-1:-1;537:8700:36;;;;;;;;;;3035:336;537:8700;;;;3109:244;537:8700;;;;;;-1:-1:-1;537:8700:36;;;;;;;;;;;;3109:244;;;;;;:::i;:::-;3079:7;537:8700;3035:336;:::i;:::-;537:8700;;;;3007:405;;537:8700;;;;3007:405;537:8700;2820:599;:::o;537:8700::-;;;;;;;;;;;;;;;;;34375:314:33;34568:16;34552:33;;34548:105;;34375:314;:::o;34548:105::-;34608:34;;;;537:8700:36;;34608:34:33;;5657:602:36;;;;5950:18;537:8700;;;;-1:-1:-1;;537:8700:36;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;5950:18;:::i;:::-;537:8700;5983:10;;;5979:49;;6141:64;6081:9;6038:70;537:8700;6081:9;;:26;;;;;;;;6038:70;;:::i;:::-;537:8700;6141:64;:::i;:::-;6224:28;;;;5657:602;:::o;6224:28::-;6245:7;;;:::i;:::-;5657:602;:::o;6081:26::-;6101:6;;;:::i;:::-;6081:26;;;5979:49;6009:8;;;;;537:8700;6009:8;:::o;17166:193:33:-;17253:1;17245:9;;17241:81;;17166:193;:::o;17241:81::-;17277:34;17253:1;17277:34;;537:8700:36;;17253:1:33;17277:34;1336:351:17;1463:1;537:8700:36;;1443:21:17;1439:82;;1530:151;;;1336:351;:::o;1439:82::-;1487:23;;;1463:1;1487:23;;1741:504;537:8700:36;;1881:21:17;:17;;2008:160;;;;;;4625:582:31;;4797:8;;-1:-1:-1;537:8700:36;;5874:21:31;:17;;6046:142;;;;;;5870:383;6225:17;5894:1;6225:17;;5894:1;6225:17;4793:408;537:8700:36;;5045:22:31;:49;;;4793:408;5041:119;;5173:17;;:::o;5041:119::-;537:8700:36;5121:24:31;;5066:1;5121:24;537:8700:36;5121:24:31;537:8700:36;;5066:1:31;5121:24;5045:49;5071:18;;;:23;5045:49;;303:324:35;;430:4;408:60;;;;;537:8700:36;;;;408:60:35;;;;537:8700:36;408:60:35;;537:8700:36;408:60:35;537:8700:36;;408:60:35;;;537:8700:36;;;;;;;;;;;:::i;:::-;408:60:35;430:4;;;408:60;;;;;;303:324;-1:-1:-1;404:217:35;;523:98;;:::i;:::-;720:36:17;787:15;537:8700:36;720:36:17;;;:::i;:::-;537:8700:36;770:32:17;766:185;;537:8700:36;;1013:179:17;1209:30;1013:179;;;;;408:60:35;1013:179:17;;;1209:30;;;;;;;537:8700:36;;;;;;;1209:30:17;;537:8700:36;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;1209:30:17;537:8700:36;;;;;;;;;;565:45:35;:::o;537:8700:36:-;;;;;;;;766:185:17;930:9;;:::i;404:217:35:-;537:8700:36;;;483:28:35;;;537:8700:36;408:60:35;483:28;;537:8700:36;;;;;;;;;;;483:28:35;408:60;537:8700:36;;;;;;;;;;408:60:35;;;;"},"methodIdentifiers":{"calculateAddLiquidityUnbalancedPriceImpact(address,uint256[],address)":"48406a54","callAndRevertHook(address,bytes)":"a7699638"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract IRouter\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorSelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteResultSpoofed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"Result\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"calculateAddLiquidityUnbalancedPriceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpact\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callAndRevertHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"Result(bytes)\":[{\"params\":{\"result\":\"The result of the query operation\"}}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"ErrorSelectorNotFound()\":[{\"notice\":\"Handle the \\\"reverted without a reason\\\" case (i.e., no return data).\"}],\"Result(bytes)\":[{\"notice\":\"On success of the primary operation in a `quoteAndRevert`, this error is thrown with the return data.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceImpactHelper.sol\":\"PriceImpactHelper\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0x743734d3d3503d705f0a778c4b0dd61fdb067e89a07481ddbead0654e6808318\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6198f27b2d01f346fdd3d1302e9a6ddd543d2f06afd675d84919c2242bd26d8d\",\"dweb:/ipfs/QmYntQih5MwxxdGnVu2BPVLeqFuJEH761cByAesjwE6JKT\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol\":{\"keccak256\":\"0x39a5cd3ee5c0bab644f068ad8ba617a0cf71a91610693b1c93c9536464151ee3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6a5f61af5cda44d8ef95e610c0b418f2cfb984e9c47a58fb1fa8c8bc949def75\",\"dweb:/ipfs/Qmby1D2D5Ym44jgBTTM8eTGnmNGCCKrb8ujpkhVPE6C6Cr\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@balancer-labs/v3-solidity-utils/contracts/helpers/RevertCodec.sol\":{\"keccak256\":\"0xb4ee9e1543d36bdf9eeb4a9d5ab41170723239a1e27a2272f2e31de4765c019b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3b70dd5e4fa496c2c1efb6bd20368587ba3c9c0d0afac9dc3631a29ff2628f99\",\"dweb:/ipfs/QmQigXUkpDuVK5VSX67RABrAC9bashPcHMasgPRNJb4k8Z\"]},\"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol\":{\"keccak256\":\"0x84bcae7004be7e91a88e76a3ac317490bc6845754a12cee88fcab76b1c5de37b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://15f903480fec5ae8042baf458e2246693b0b4a22687e65c2ed3afdf6993bff82\",\"dweb:/ipfs/QmcxsVeSbQ4qYnEZFoeFmiqaoV3rAx1oNhACCZCMZ1E6uf\"]},\"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol\":{\"keccak256\":\"0x70449e2b423b9850e39adddd7301205aa8b6e9e4ae788fd44d0968cac018eb2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce2174a3629b45dca032f9cf53df35dea240626913b8882a9e2da21610b02796\",\"dweb:/ipfs/Qmf8E4DePnZXjqb3V4A38gSobjgRK6VqavqPByuXvJxtBG\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c\",\"dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj\"]},\"contracts/CallAndRevert.sol\":{\"keccak256\":\"0xe0f09e833265592b398c7607db658e3541b800f66c9536ee129ae6863e4185f2\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://bc7dd31dd95f738debb5ca8c8b80e90384c1d8b72dc70e02dd7ae22e7c77f337\",\"dweb:/ipfs/QmNaJXyazNRD1fbqs6QJSwB3VWKu3ZjHqecMqKg57UeMuS\"]},\"contracts/PriceImpactHelper.sol\":{\"keccak256\":\"0xc7a235e866cb76517b3e21a399fffcaab048f41c370e38123e52f9369d071b38\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b71a034acf450b2b356a80e5f7cbe62137ba4702891a8e174b558d91180ade8a\",\"dweb:/ipfs/QmU5hLqocw2S1vXgmwd756CVwbG3yySQJe1ipbAJjRbPCU\"]}},\"version\":1}"}},"contracts/ProtocolFeeSweeper.sol":{"ProtocolFeeSweeper":{"abi":[{"inputs":[{"internalType":"contract IVault","name":"vault","type":"address"},{"internalType":"address","name":"feeRecipient","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"CannotReceiveEth","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"InvalidFeeRecipient","type":"error"},{"inputs":[],"name":"InvalidTargetToken","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"feeRecipient","type":"address"}],"name":"FeeRecipientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"protocolFeeBurner","type":"address"}],"name":"ProtocolFeeBurnerSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"feeToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"feeTokenAmount","type":"uint256"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"}],"name":"ProtocolFeeSwept","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TargetTokenSet","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeeBurner","outputs":[{"internalType":"contract IProtocolFeeBurner","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeeController","outputs":[{"internalType":"contract IProtocolFeeController","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTargetToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20[]","name":"feeTokens","type":"address[]"}],"name":"recoverProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"feeRecipient","type":"address"}],"name":"setFeeRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IProtocolFeeBurner","name":"protocolFeeBurner","type":"address"}],"name":"setProtocolFeeBurner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"targetToken","type":"address"}],"name":"setTargetToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"sweepProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"feeToken","type":"address"}],"name":"sweepProtocolFeesForToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60c0346100e857601f61157b38819003918201601f19168301916001600160401b038311848410176100ec5780849260409485528339810103126100e85780516001600160a01b039182821682036100e857602001519182168092036100e8573060805260a05280156100d957600180546001600160a01b03191682179055604051907fbf9a9534339a9d6b81696e05dcfb614b7dc518a31d48be3cfb757988381fb3235f80a261147a9081610101823960805181610d71015260a0518181816106d40152818161083701528181610dff0152610ebb0152f35b630ed1b8b360e31b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe604060808152600490813610156100a0575b361561007957346100795790602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600f60248201527f4e6f7420696d706c656d656e74656400000000000000000000000000000000006044820152fd5b507ff2238896000000000000000000000000000000000000000000000000000000005f525ffd5b5f5f3560e01c80631b66cb0014610bc35780634ccb20c014610b8f57806355f9051014610b5b5780635884e804146107b157806380db0d511461077e578063851c1bb31461072a57806385f2dbd4146106f85780638d928af8146106a7578063aaabadc51461066d578063b0edcc531461047e578063c414dbd414610280578063e651a319146101f55763e74b981b1461013a5750610011565b82346101f15760206003193601126101f15773ffffffffffffffffffffffffffffffffffffffff610169610c48565b610171610ef0565b169081156101cb5750807fffffffffffffffffffffffff000000000000000000000000000000000000000060015416176001557fbf9a9534339a9d6b81696e05dcfb614b7dc518a31d48be3cfb757988381fb3238280a280f35b827f768dc598000000000000000000000000000000000000000000000000000000008152fd5b5080fd5b5082346101f15760206003193601126101f1573573ffffffffffffffffffffffffffffffffffffffff81168091036101f15761022f610ef0565b807fffffffffffffffffffffffff000000000000000000000000000000000000000060025416176002557f6dd63e026b620e01b87e78897f638f7a04877f832707e6a0ee9818ac02d51b518280a280f35b5091903461044757806003193601126104475761029b610c48565b60243573ffffffffffffffffffffffffffffffffffffffff9283821680830361040c576102c6610fe9565b6102ce610ef0565b6102d661103e565b948251967f70a082310000000000000000000000000000000000000000000000000000000080895230828a015289602093848b602481895afa9a8b1561043d57829b61044b575b5080610327610dbc565b1690813b1561044757829060648b838b5195869485937fb53a70b2000000000000000000000000000000000000000000000000000000008552168a8401523060248401528b60448401525af1801561043d57908594939291610420575b505060249086519586938492835230908301525afa928315610417575087926103e3575b50506103bd946103b7916110e3565b9161111d565b807f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d80f35b90809250813d8311610410575b6103fa8183610cac565b8101031261040c5751846103b76103a8565b5f80fd5b503d6103f0565b513d89823e3d90fd5b61042c91929450610c6b565b6104395782918a5f610384565b8980fd5b87513d84823e3d90fd5b8280fd5b8580929c508193503d8311610477575b6104658183610cac565b8101031261040c578a9051995f61031d565b503d61045b565b5082346101f157602090816003193601126104475780359367ffffffffffffffff851161066957366023860112156106695784820135946024906104c187610ced565b966104ce84519889610cac565b80885260248689019160051b8301019136831161066557602401905b828210610639575050506104fc610fe9565b73ffffffffffffffffffffffffffffffffffffffff9360019480600154163303610612578697865b610550575b88807f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d80f35b805188101561060d57816105648983610d05565b5116978551987f70a08231000000000000000000000000000000000000000000000000000000008a5230888b0152848a8781845afa801561060357899a8c916105ce575b5090818a93926105bc575b50500197610524565b6105c79133906111f8565b8b806105b3565b8093929a50868092503d83116105fc575b6105e98183610cac565b8101031261040c579051899890896105a8565b503d6105df565b87513d8d823e3d90fd5b610529565b84877f23dada53000000000000000000000000000000000000000000000000000000008152fd5b813573ffffffffffffffffffffffffffffffffffffffff8116810361040c5781529086019086016104ea565b8780fd5b8380fd5b5090346101f157816003193601126101f15760209073ffffffffffffffffffffffffffffffffffffffff61069f610e78565b915191168152f35b5090346101f157816003193601126101f1576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5090346101f157816003193601126101f15760209073ffffffffffffffffffffffffffffffffffffffff61069f610dbc565b5091346104475760206003193601126104475735917fffffffff000000000000000000000000000000000000000000000000000000008316830361077b5750610774602092610d46565b9051908152f35b80fd5b5090346101f157816003193601126101f15773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b50903461040c576020928360031936011261040c576107ce610c48565b916107d7610fe9565b6107df610ef0565b6107e761103e565b9473ffffffffffffffffffffffffffffffffffffffff918051917fca4f280300000000000000000000000000000000000000000000000000000000835283861691828685015260245f85602481897f0000000000000000000000000000000000000000000000000000000000000000165afa948515610b51575f95610aba575b5084519261087484611094565b945f5b858110610a1f575087610888610dbc565b1690813b1561040c575f9060448b83885195869485937fcf7b287f0000000000000000000000000000000000000000000000000000000085528401523060248401525af18015610a1557610a02575b506108e184611094565b978a5b8581106109505750505050505050845b81518110156109295780610923888561090f60019587610d05565b511661091b8489610d05565b51908961111d565b016108f4565b85807f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d80f35b80838a61095e87948c610d05565b51168751938480927f70a0823100000000000000000000000000000000000000000000000000000000825230888301525afa9182156109f8578d926109c7575b506109b66001926109af838b610d05565b51906110e3565b6109c0828d610d05565b52016108e4565b91508382813d83116109f1575b6109de8183610cac565b8101031261040c579051906109b661099e565b503d6109d4565b86513d8f823e3d90fd5b610a0d919a50610c6b565b5f985f6108d7565b84513d5f823e3d90fd5b88610a2a828a610d05565b511690838b868851809581937f70a0823100000000000000000000000000000000000000000000000000000000835230908301525afa8015610ab0575f90610a82575b60019250610a7b828a610d05565b5201610877565b508382813d8311610aa9575b610a988183610cac565b8101031261040c5760019151610a6d565b503d610a8e565b86513d5f823e3d90fd5b9094503d805f833e610acc8183610cac565b810190838183031261040c5780519067ffffffffffffffff821161040c57019080601f8301121561040c578151610b0281610ced565b92610b0f85519485610cac565b818452858085019260051b82010192831161040c578501905b828210610b3957505050935f610867565b8151898116810361040c578152908501908501610b28565b82513d5f823e3d90fd5b823461040c575f60031936011261040c5760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b823461040c575f60031936011261040c5760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b3461040c57602060031936011261040c5773ffffffffffffffffffffffffffffffffffffffff610bf1610c48565b610bf9610ef0565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000005f5416175f557f873950c2ac59c570001b99d815ffb260542df229d07132922e2e6f9941fd3da65f80a2005b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361040c57565b67ffffffffffffffff8111610c7f57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610c7f57604052565b67ffffffffffffffff8111610c7f5760051b60200190565b8051821015610d195760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b6040517fffffffff0000000000000000000000000000000000000000000000000000000060208201927f00000000000000000000000000000000000000000000000000000000000000008452166040820152602481526060810181811067ffffffffffffffff821117610c7f5760405251902090565b6040517f85f2dbd400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa918215610e6d575f92610e3457505090565b9091506020813d602011610e65575b81610e5060209383610cac565b8101031261040c5751908116810361040c5790565b3d9150610e43565b6040513d5f823e3d90fd5b6040517faaabadc500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa918215610e6d575f92610e3457505090565b610f1c7fffffffff000000000000000000000000000000000000000000000000000000005f3516610d46565b602073ffffffffffffffffffffffffffffffffffffffff610f3b610e78565b16916064604051809481937f9be2a88400000000000000000000000000000000000000000000000000000000835260048301523360248301523060448301525afa908115610e6d575f91610fba575b5015610f9257565b7f23dada53000000000000000000000000000000000000000000000000000000005f5260045ffd5b610fdc915060203d602011610fe2575b610fd48183610cac565b810190611335565b5f610f8a565b503d610fca565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805c611016576001905d565b7f3ee5aeb5000000000000000000000000000000000000000000000000000000005f5260045ffd5b73ffffffffffffffffffffffffffffffffffffffff90816002541691826110625750565b5f54161561106c57565b7f8562eb45000000000000000000000000000000000000000000000000000000005f5260045ffd5b9061109e82610ced565b6110ab6040519182610cac565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06110d98294610ced565b0190602036910137565b919082039182116110f057565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b82156111f25773ffffffffffffffffffffffffffffffffffffffff9384168061114d575061114b935061134d565b565b5f548386169590811686810361116a5750505061114b935061134d565b9291949093818661117a926111f8565b836001541694803b1561040c575f9560a4948793604051998a9889977f54caad0000000000000000000000000000000000000000000000000000000000895216600488015260248701526044860152606485015260848401525af18015610e6d576111e3575b50565b6111ec90610c6b565b5f6111e0565b50505050565b6040519260208401907fa9059cbb00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8094166024860152604485015260448452608084019067ffffffffffffffff9385831085841117610c7f575f9384936040521694519082865af1903d15611328573d908111610c7f576112cc91604051916112bc60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610cac565b82523d5f602084013e5b836113ab565b805190811515918261130d575b50506112e25750565b7f5274afe7000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b6113209250602080918301019101611335565b155f806112d9565b506112cc906060906112c6565b9081602091031261040c5751801515810361040c5790565b919060407fd6b9382ec1786c32610e376e8ee8f2f16abeda4ace3b6276ac958193c75bbbc89173ffffffffffffffffffffffffffffffffffffffff8091816001541661139a8782846111f8565b8451968752602087015216941692a3565b906113e857508051156113c057805190602001fd5b7f1425ea42000000000000000000000000000000000000000000000000000000005f5260045ffd5b8151158061143b575b6113f9575090565b73ffffffffffffffffffffffffffffffffffffffff907f9996b315000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b50803b156113f156fea264697066735822122035c9f746fc0206fac020a4aebffe3697900b67d7e803702d23e31c0d159a806664736f6c634300081b0033","opcodes":"PUSH1 0xC0 CALLVALUE PUSH2 0xE8 JUMPI PUSH1 0x1F PUSH2 0x157B CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0xEC JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0xE8 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND DUP3 SUB PUSH2 0xE8 JUMPI PUSH1 0x20 ADD MLOAD SWAP2 DUP3 AND DUP1 SWAP3 SUB PUSH2 0xE8 JUMPI ADDRESS PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE DUP1 ISZERO PUSH2 0xD9 JUMPI PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 PUSH32 0xBF9A9534339A9D6B81696E05DCFB614B7DC518A31D48BE3CFB757988381FB323 PUSH0 DUP1 LOG2 PUSH2 0x147A SWAP1 DUP2 PUSH2 0x101 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0xD71 ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x6D4 ADD MSTORE DUP2 DUP2 PUSH2 0x837 ADD MSTORE DUP2 DUP2 PUSH2 0xDFF ADD MSTORE PUSH2 0xEBB ADD MSTORE RETURN JUMPDEST PUSH4 0xED1B8B3 PUSH1 0xE3 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0xA0 JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x79 JUMPI CALLVALUE PUSH2 0x79 JUMPI SWAP1 PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420696D706C656D656E7465640000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH32 0xF223889600000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST PUSH0 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1B66CB00 EQ PUSH2 0xBC3 JUMPI DUP1 PUSH4 0x4CCB20C0 EQ PUSH2 0xB8F JUMPI DUP1 PUSH4 0x55F90510 EQ PUSH2 0xB5B JUMPI DUP1 PUSH4 0x5884E804 EQ PUSH2 0x7B1 JUMPI DUP1 PUSH4 0x80DB0D51 EQ PUSH2 0x77E JUMPI DUP1 PUSH4 0x851C1BB3 EQ PUSH2 0x72A JUMPI DUP1 PUSH4 0x85F2DBD4 EQ PUSH2 0x6F8 JUMPI DUP1 PUSH4 0x8D928AF8 EQ PUSH2 0x6A7 JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0x66D JUMPI DUP1 PUSH4 0xB0EDCC53 EQ PUSH2 0x47E JUMPI DUP1 PUSH4 0xC414DBD4 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0xE651A319 EQ PUSH2 0x1F5 JUMPI PUSH4 0xE74B981B EQ PUSH2 0x13A JUMPI POP PUSH2 0x11 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x1F1 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F1 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x169 PUSH2 0xC48 JUMP JUMPDEST PUSH2 0x171 PUSH2 0xEF0 JUMP JUMPDEST AND SWAP1 DUP2 ISZERO PUSH2 0x1CB JUMPI POP DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 PUSH1 0x1 SLOAD AND OR PUSH1 0x1 SSTORE PUSH32 0xBF9A9534339A9D6B81696E05DCFB614B7DC518A31D48BE3CFB757988381FB323 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST DUP3 PUSH32 0x768DC59800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP DUP3 CALLVALUE PUSH2 0x1F1 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F1 JUMPI CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 SWAP2 SUB PUSH2 0x1F1 JUMPI PUSH2 0x22F PUSH2 0xEF0 JUMP JUMPDEST DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH32 0x6DD63E026B620E01B87E78897F638F7A04877F832707E6A0EE9818AC02D51B51 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x447 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x447 JUMPI PUSH2 0x29B PUSH2 0xC48 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 AND DUP1 DUP4 SUB PUSH2 0x40C JUMPI PUSH2 0x2C6 PUSH2 0xFE9 JUMP JUMPDEST PUSH2 0x2CE PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x2D6 PUSH2 0x103E JUMP JUMPDEST SWAP5 DUP3 MLOAD SWAP7 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP1 DUP10 MSTORE ADDRESS DUP3 DUP11 ADD MSTORE DUP10 PUSH1 0x20 SWAP4 DUP5 DUP12 PUSH1 0x24 DUP2 DUP10 GAS STATICCALL SWAP11 DUP12 ISZERO PUSH2 0x43D JUMPI DUP3 SWAP12 PUSH2 0x44B JUMPI JUMPDEST POP DUP1 PUSH2 0x327 PUSH2 0xDBC JUMP JUMPDEST AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x447 JUMPI DUP3 SWAP1 PUSH1 0x64 DUP12 DUP4 DUP12 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0xB53A70B200000000000000000000000000000000000000000000000000000000 DUP6 MSTORE AND DUP11 DUP5 ADD MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE DUP12 PUSH1 0x44 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x43D JUMPI SWAP1 DUP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x420 JUMPI JUMPDEST POP POP PUSH1 0x24 SWAP1 DUP7 MLOAD SWAP6 DUP7 SWAP4 DUP5 SWAP3 DUP4 MSTORE ADDRESS SWAP1 DUP4 ADD MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x417 JUMPI POP DUP8 SWAP3 PUSH2 0x3E3 JUMPI JUMPDEST POP POP PUSH2 0x3BD SWAP5 PUSH2 0x3B7 SWAP2 PUSH2 0x10E3 JUMP JUMPDEST SWAP2 PUSH2 0x111D JUMP JUMPDEST DUP1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 TSTORE DUP1 RETURN JUMPDEST SWAP1 DUP1 SWAP3 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x410 JUMPI JUMPDEST PUSH2 0x3FA DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x40C JUMPI MLOAD DUP5 PUSH2 0x3B7 PUSH2 0x3A8 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x3F0 JUMP JUMPDEST MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x42C SWAP2 SWAP3 SWAP5 POP PUSH2 0xC6B JUMP JUMPDEST PUSH2 0x439 JUMPI DUP3 SWAP2 DUP11 PUSH0 PUSH2 0x384 JUMP JUMPDEST DUP10 DUP1 REVERT JUMPDEST DUP8 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP6 DUP1 SWAP3 SWAP13 POP DUP2 SWAP4 POP RETURNDATASIZE DUP4 GT PUSH2 0x477 JUMPI JUMPDEST PUSH2 0x465 DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x40C JUMPI DUP11 SWAP1 MLOAD SWAP10 PUSH0 PUSH2 0x31D JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x45B JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x1F1 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x447 JUMPI DUP1 CALLDATALOAD SWAP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP6 GT PUSH2 0x669 JUMPI CALLDATASIZE PUSH1 0x23 DUP7 ADD SLT ISZERO PUSH2 0x669 JUMPI DUP5 DUP3 ADD CALLDATALOAD SWAP5 PUSH1 0x24 SWAP1 PUSH2 0x4C1 DUP8 PUSH2 0xCED JUMP JUMPDEST SWAP7 PUSH2 0x4CE DUP5 MLOAD SWAP9 DUP10 PUSH2 0xCAC JUMP JUMPDEST DUP1 DUP9 MSTORE PUSH1 0x24 DUP7 DUP10 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0x665 JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x639 JUMPI POP POP POP PUSH2 0x4FC PUSH2 0xFE9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 PUSH1 0x1 SWAP5 DUP1 PUSH1 0x1 SLOAD AND CALLER SUB PUSH2 0x612 JUMPI DUP7 SWAP8 DUP7 JUMPDEST PUSH2 0x550 JUMPI JUMPDEST DUP9 DUP1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 TSTORE DUP1 RETURN JUMPDEST DUP1 MLOAD DUP9 LT ISZERO PUSH2 0x60D JUMPI DUP2 PUSH2 0x564 DUP10 DUP4 PUSH2 0xD05 JUMP JUMPDEST MLOAD AND SWAP8 DUP6 MLOAD SWAP9 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP11 MSTORE ADDRESS DUP9 DUP12 ADD MSTORE DUP5 DUP11 DUP8 DUP2 DUP5 GAS STATICCALL DUP1 ISZERO PUSH2 0x603 JUMPI DUP10 SWAP11 DUP13 SWAP2 PUSH2 0x5CE JUMPI JUMPDEST POP SWAP1 DUP2 DUP11 SWAP4 SWAP3 PUSH2 0x5BC JUMPI JUMPDEST POP POP ADD SWAP8 PUSH2 0x524 JUMP JUMPDEST PUSH2 0x5C7 SWAP2 CALLER SWAP1 PUSH2 0x11F8 JUMP JUMPDEST DUP12 DUP1 PUSH2 0x5B3 JUMP JUMPDEST DUP1 SWAP4 SWAP3 SWAP11 POP DUP7 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x5FC JUMPI JUMPDEST PUSH2 0x5E9 DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x40C JUMPI SWAP1 MLOAD DUP10 SWAP9 SWAP1 DUP10 PUSH2 0x5A8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x5DF JUMP JUMPDEST DUP8 MLOAD RETURNDATASIZE DUP14 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x529 JUMP JUMPDEST DUP5 DUP8 PUSH32 0x23DADA5300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x40C JUMPI DUP2 MSTORE SWAP1 DUP7 ADD SWAP1 DUP7 ADD PUSH2 0x4EA JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F1 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F1 JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x69F PUSH2 0xE78 JUMP JUMPDEST SWAP2 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F1 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F1 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F1 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F1 JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x69F PUSH2 0xDBC JUMP JUMPDEST POP SWAP2 CALLVALUE PUSH2 0x447 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x447 JUMPI CALLDATALOAD SWAP2 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND DUP4 SUB PUSH2 0x77B JUMPI POP PUSH2 0x774 PUSH1 0x20 SWAP3 PUSH2 0xD46 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F1 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F1 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 SWAP3 SLOAD AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x40C JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x40C JUMPI PUSH2 0x7CE PUSH2 0xC48 JUMP JUMPDEST SWAP2 PUSH2 0x7D7 PUSH2 0xFE9 JUMP JUMPDEST PUSH2 0x7DF PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x7E7 PUSH2 0x103E JUMP JUMPDEST SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP1 MLOAD SWAP2 PUSH32 0xCA4F280300000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP4 DUP7 AND SWAP2 DUP3 DUP7 DUP6 ADD MSTORE PUSH1 0x24 PUSH0 DUP6 PUSH1 0x24 DUP2 DUP10 PUSH32 0x0 AND GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0xB51 JUMPI PUSH0 SWAP6 PUSH2 0xABA JUMPI JUMPDEST POP DUP5 MLOAD SWAP3 PUSH2 0x874 DUP5 PUSH2 0x1094 JUMP JUMPDEST SWAP5 PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0xA1F JUMPI POP DUP8 PUSH2 0x888 PUSH2 0xDBC JUMP JUMPDEST AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x40C JUMPI PUSH0 SWAP1 PUSH1 0x44 DUP12 DUP4 DUP9 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0xCF7B287F00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE DUP5 ADD MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0xA15 JUMPI PUSH2 0xA02 JUMPI JUMPDEST POP PUSH2 0x8E1 DUP5 PUSH2 0x1094 JUMP JUMPDEST SWAP8 DUP11 JUMPDEST DUP6 DUP2 LT PUSH2 0x950 JUMPI POP POP POP POP POP POP POP DUP5 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x929 JUMPI DUP1 PUSH2 0x923 DUP9 DUP6 PUSH2 0x90F PUSH1 0x1 SWAP6 DUP8 PUSH2 0xD05 JUMP JUMPDEST MLOAD AND PUSH2 0x91B DUP5 DUP10 PUSH2 0xD05 JUMP JUMPDEST MLOAD SWAP1 DUP10 PUSH2 0x111D JUMP JUMPDEST ADD PUSH2 0x8F4 JUMP JUMPDEST DUP6 DUP1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 TSTORE DUP1 RETURN JUMPDEST DUP1 DUP4 DUP11 PUSH2 0x95E DUP8 SWAP5 DUP13 PUSH2 0xD05 JUMP JUMPDEST MLOAD AND DUP8 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE ADDRESS DUP9 DUP4 ADD MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x9F8 JUMPI DUP14 SWAP3 PUSH2 0x9C7 JUMPI JUMPDEST POP PUSH2 0x9B6 PUSH1 0x1 SWAP3 PUSH2 0x9AF DUP4 DUP12 PUSH2 0xD05 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH2 0x9C0 DUP3 DUP14 PUSH2 0xD05 JUMP JUMPDEST MSTORE ADD PUSH2 0x8E4 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x9F1 JUMPI JUMPDEST PUSH2 0x9DE DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x40C JUMPI SWAP1 MLOAD SWAP1 PUSH2 0x9B6 PUSH2 0x99E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x9D4 JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP16 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0xA0D SWAP2 SWAP11 POP PUSH2 0xC6B JUMP JUMPDEST PUSH0 SWAP9 PUSH0 PUSH2 0x8D7 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP9 PUSH2 0xA2A DUP3 DUP11 PUSH2 0xD05 JUMP JUMPDEST MLOAD AND SWAP1 DUP4 DUP12 DUP7 DUP9 MLOAD DUP1 SWAP6 DUP2 SWAP4 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE ADDRESS SWAP1 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0xAB0 JUMPI PUSH0 SWAP1 PUSH2 0xA82 JUMPI JUMPDEST PUSH1 0x1 SWAP3 POP PUSH2 0xA7B DUP3 DUP11 PUSH2 0xD05 JUMP JUMPDEST MSTORE ADD PUSH2 0x877 JUMP JUMPDEST POP DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xAA9 JUMPI JUMPDEST PUSH2 0xA98 DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x40C JUMPI PUSH1 0x1 SWAP2 MLOAD PUSH2 0xA6D JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA8E JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP5 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0xACC DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SWAP1 DUP4 DUP2 DUP4 SUB SLT PUSH2 0x40C JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x40C JUMPI ADD SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x40C JUMPI DUP2 MLOAD PUSH2 0xB02 DUP2 PUSH2 0xCED JUMP JUMPDEST SWAP3 PUSH2 0xB0F DUP6 MLOAD SWAP5 DUP6 PUSH2 0xCAC JUMP JUMPDEST DUP2 DUP5 MSTORE DUP6 DUP1 DUP6 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x40C JUMPI DUP6 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xB39 JUMPI POP POP POP SWAP4 PUSH0 PUSH2 0x867 JUMP JUMPDEST DUP2 MLOAD DUP10 DUP2 AND DUP2 SUB PUSH2 0x40C JUMPI DUP2 MSTORE SWAP1 DUP6 ADD SWAP1 DUP6 ADD PUSH2 0xB28 JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x40C JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x40C JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x2 SLOAD AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x40C JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x40C JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x40C JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x40C JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xBF1 PUSH2 0xC48 JUMP JUMPDEST PUSH2 0xBF9 PUSH2 0xEF0 JUMP JUMPDEST AND DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 PUSH0 SLOAD AND OR PUSH0 SSTORE PUSH32 0x873950C2AC59C570001B99D815FFB260542DF229D07132922E2E6F9941FD3DA6 PUSH0 DUP1 LOG2 STOP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x40C JUMPI JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xC7F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xC7F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xC7F JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xD19 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x0 DUP5 MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xC7F JUMPI PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x85F2DBD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0xE6D JUMPI PUSH0 SWAP3 PUSH2 0xE34 JUMPI POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xE65 JUMPI JUMPDEST DUP2 PUSH2 0xE50 PUSH1 0x20 SWAP4 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x40C JUMPI MLOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x40C JUMPI SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xE43 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0xE6D JUMPI PUSH0 SWAP3 PUSH2 0xE34 JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH2 0xF1C PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH0 CALLDATALOAD AND PUSH2 0xD46 JUMP JUMPDEST PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xF3B PUSH2 0xE78 JUMP JUMPDEST AND SWAP2 PUSH1 0x64 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH32 0x9BE2A88400000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE6D JUMPI PUSH0 SWAP2 PUSH2 0xFBA JUMPI JUMPDEST POP ISZERO PUSH2 0xF92 JUMPI JUMP JUMPDEST PUSH32 0x23DADA5300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH2 0xFDC SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xFE2 JUMPI JUMPDEST PUSH2 0xFD4 DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1335 JUMP JUMPDEST PUSH0 PUSH2 0xF8A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xFCA JUMP JUMPDEST PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 DUP1 TLOAD PUSH2 0x1016 JUMPI PUSH1 0x1 SWAP1 TSTORE JUMP JUMPDEST PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 PUSH1 0x2 SLOAD AND SWAP2 DUP3 PUSH2 0x1062 JUMPI POP JUMP JUMPDEST PUSH0 SLOAD AND ISZERO PUSH2 0x106C JUMPI JUMP JUMPDEST PUSH32 0x8562EB4500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 PUSH2 0x109E DUP3 PUSH2 0xCED JUMP JUMPDEST PUSH2 0x10AB PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0xCAC JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0x10D9 DUP3 SWAP5 PUSH2 0xCED JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x10F0 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 ISZERO PUSH2 0x11F2 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP1 PUSH2 0x114D JUMPI POP PUSH2 0x114B SWAP4 POP PUSH2 0x134D JUMP JUMPDEST JUMP JUMPDEST PUSH0 SLOAD DUP4 DUP7 AND SWAP6 SWAP1 DUP2 AND DUP7 DUP2 SUB PUSH2 0x116A JUMPI POP POP POP PUSH2 0x114B SWAP4 POP PUSH2 0x134D JUMP JUMPDEST SWAP3 SWAP2 SWAP5 SWAP1 SWAP4 DUP2 DUP7 PUSH2 0x117A SWAP3 PUSH2 0x11F8 JUMP JUMPDEST DUP4 PUSH1 0x1 SLOAD AND SWAP5 DUP1 EXTCODESIZE ISZERO PUSH2 0x40C JUMPI PUSH0 SWAP6 PUSH1 0xA4 SWAP5 DUP8 SWAP4 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP9 DUP10 SWAP8 PUSH32 0x54CAAD0000000000000000000000000000000000000000000000000000000000 DUP10 MSTORE AND PUSH1 0x4 DUP9 ADD MSTORE PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0x84 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0xE6D JUMPI PUSH2 0x11E3 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0x11EC SWAP1 PUSH2 0xC6B JUMP JUMPDEST PUSH0 PUSH2 0x11E0 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP5 AND PUSH1 0x24 DUP7 ADD MSTORE PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x44 DUP5 MSTORE PUSH1 0x80 DUP5 ADD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP6 DUP4 LT DUP6 DUP5 GT OR PUSH2 0xC7F JUMPI PUSH0 SWAP4 DUP5 SWAP4 PUSH1 0x40 MSTORE AND SWAP5 MLOAD SWAP1 DUP3 DUP7 GAS CALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x1328 JUMPI RETURNDATASIZE SWAP1 DUP2 GT PUSH2 0xC7F JUMPI PUSH2 0x12CC SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x12BC PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD DUP5 PUSH2 0xCAC JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP4 PUSH2 0x13AB JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 ISZERO ISZERO SWAP2 DUP3 PUSH2 0x130D JUMPI JUMPDEST POP POP PUSH2 0x12E2 JUMPI POP JUMP JUMPDEST PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x1320 SWAP3 POP PUSH1 0x20 DUP1 SWAP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0x1335 JUMP JUMPDEST ISZERO PUSH0 DUP1 PUSH2 0x12D9 JUMP JUMPDEST POP PUSH2 0x12CC SWAP1 PUSH1 0x60 SWAP1 PUSH2 0x12C6 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x40C JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x40C JUMPI SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 PUSH32 0xD6B9382EC1786C32610E376E8EE8F2F16ABEDA4ACE3B6276AC958193C75BBBC8 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 DUP2 PUSH1 0x1 SLOAD AND PUSH2 0x139A DUP8 DUP3 DUP5 PUSH2 0x11F8 JUMP JUMPDEST DUP5 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD MSTORE AND SWAP5 AND SWAP3 LOG3 JUMP JUMPDEST SWAP1 PUSH2 0x13E8 JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x13C0 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x143B JUMPI JUMPDEST PUSH2 0x13F9 JUMPI POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x13F1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD 0xC9 0xF7 CHAINID 0xFC MUL MOD STATICCALL 0xC0 KECCAK256 LOG4 0xAE 0xBF INVALID CALLDATASIZE SWAP8 SWAP1 SIGNEXTEND PUSH8 0xD7E803702D23E31C 0xD ISZERO SWAP11 DUP1 PUSH7 0x64736F6C634300 ADDMOD SHL STOP CALLER ","sourceMap":"1731:8933:37:-:0;;;;;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;-1:-1:-1;;;;;1731:8933:37;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1731:8933:37;;;;;;;;;;;;;;;;;;;978:4:23;1347:46:16;;998:14:23;;8794:26:37;;8790:85;;1731:8933;;;-1:-1:-1;;;;;;1731:8933:37;;;;;;;;8929:29;-1:-1:-1;;8929:29:37;1731:8933;;;;;;1347:46:16;1731:8933:37;;;;;998:14:23;1731:8933:37;;;;;;;;;;;;;;;;;;;;;8790:85;8843:21;;;-1:-1:-1;8843:21:37;;-1:-1:-1;8843:21:37;1731:8933;-1:-1:-1;1731:8933:37;;;;;;-1:-1:-1;1731:8933:37;;;;;-1:-1:-1;1731:8933:37"},"deployedBytecode":{"functionDebugData":{"abi_decode_bool_fromMemory":{"entryPoint":4917,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_contract_IERC20":{"entryPoint":3144,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_and_zero_memory_array_array_uint256_dyn":{"entryPoint":4244,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_contract_IERC20_dyn":{"entryPoint":3309,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint256":{"entryPoint":4323,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":3244,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_11005":{"entryPoint":3179,"id":null,"parameterSlots":1,"returnSlots":0},"fun_authenticateCaller":{"entryPoint":3824,"id":3203,"parameterSlots":0,"returnSlots":0},"fun_getActionId":{"entryPoint":3398,"id":3221,"parameterSlots":1,"returnSlots":1},"fun_getAuthorizer":{"entryPoint":3704,"id":5440,"parameterSlots":0,"returnSlots":1},"fun_getProtocolFeeController":{"entryPoint":3516,"id":10569,"parameterSlots":0,"returnSlots":1},"fun_getValidBurner":{"entryPoint":4158,"id":10556,"parameterSlots":0,"returnSlots":1},"fun_nonReentrantBefore":{"entryPoint":4073,"id":5020,"parameterSlots":0,"returnSlots":0},"fun_safeTransfer":{"entryPoint":4600,"id":6495,"parameterSlots":3,"returnSlots":0},"fun_sweepFeeToken":{"entryPoint":4381,"id":10491,"parameterSlots":4,"returnSlots":0},"fun_transferFeeToken":{"entryPoint":4941,"id":10520,"parameterSlots":3,"returnSlots":0},"fun_verifyCallResultFromTarget":{"entryPoint":5035,"id":6947,"parameterSlots":3,"returnSlots":1},"memory_array_index_access_contract_IERC20_dyn":{"entryPoint":3333,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[],"immutableReferences":{"3161":[{"length":32,"start":3441}],"5391":[{"length":32,"start":1748},{"length":32,"start":2103},{"length":32,"start":3583},{"length":32,"start":3771}]},"linkReferences":{},"object":"604060808152600490813610156100a0575b361561007957346100795790602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600f60248201527f4e6f7420696d706c656d656e74656400000000000000000000000000000000006044820152fd5b507ff2238896000000000000000000000000000000000000000000000000000000005f525ffd5b5f5f3560e01c80631b66cb0014610bc35780634ccb20c014610b8f57806355f9051014610b5b5780635884e804146107b157806380db0d511461077e578063851c1bb31461072a57806385f2dbd4146106f85780638d928af8146106a7578063aaabadc51461066d578063b0edcc531461047e578063c414dbd414610280578063e651a319146101f55763e74b981b1461013a5750610011565b82346101f15760206003193601126101f15773ffffffffffffffffffffffffffffffffffffffff610169610c48565b610171610ef0565b169081156101cb5750807fffffffffffffffffffffffff000000000000000000000000000000000000000060015416176001557fbf9a9534339a9d6b81696e05dcfb614b7dc518a31d48be3cfb757988381fb3238280a280f35b827f768dc598000000000000000000000000000000000000000000000000000000008152fd5b5080fd5b5082346101f15760206003193601126101f1573573ffffffffffffffffffffffffffffffffffffffff81168091036101f15761022f610ef0565b807fffffffffffffffffffffffff000000000000000000000000000000000000000060025416176002557f6dd63e026b620e01b87e78897f638f7a04877f832707e6a0ee9818ac02d51b518280a280f35b5091903461044757806003193601126104475761029b610c48565b60243573ffffffffffffffffffffffffffffffffffffffff9283821680830361040c576102c6610fe9565b6102ce610ef0565b6102d661103e565b948251967f70a082310000000000000000000000000000000000000000000000000000000080895230828a015289602093848b602481895afa9a8b1561043d57829b61044b575b5080610327610dbc565b1690813b1561044757829060648b838b5195869485937fb53a70b2000000000000000000000000000000000000000000000000000000008552168a8401523060248401528b60448401525af1801561043d57908594939291610420575b505060249086519586938492835230908301525afa928315610417575087926103e3575b50506103bd946103b7916110e3565b9161111d565b807f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d80f35b90809250813d8311610410575b6103fa8183610cac565b8101031261040c5751846103b76103a8565b5f80fd5b503d6103f0565b513d89823e3d90fd5b61042c91929450610c6b565b6104395782918a5f610384565b8980fd5b87513d84823e3d90fd5b8280fd5b8580929c508193503d8311610477575b6104658183610cac565b8101031261040c578a9051995f61031d565b503d61045b565b5082346101f157602090816003193601126104475780359367ffffffffffffffff851161066957366023860112156106695784820135946024906104c187610ced565b966104ce84519889610cac565b80885260248689019160051b8301019136831161066557602401905b828210610639575050506104fc610fe9565b73ffffffffffffffffffffffffffffffffffffffff9360019480600154163303610612578697865b610550575b88807f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d80f35b805188101561060d57816105648983610d05565b5116978551987f70a08231000000000000000000000000000000000000000000000000000000008a5230888b0152848a8781845afa801561060357899a8c916105ce575b5090818a93926105bc575b50500197610524565b6105c79133906111f8565b8b806105b3565b8093929a50868092503d83116105fc575b6105e98183610cac565b8101031261040c579051899890896105a8565b503d6105df565b87513d8d823e3d90fd5b610529565b84877f23dada53000000000000000000000000000000000000000000000000000000008152fd5b813573ffffffffffffffffffffffffffffffffffffffff8116810361040c5781529086019086016104ea565b8780fd5b8380fd5b5090346101f157816003193601126101f15760209073ffffffffffffffffffffffffffffffffffffffff61069f610e78565b915191168152f35b5090346101f157816003193601126101f1576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5090346101f157816003193601126101f15760209073ffffffffffffffffffffffffffffffffffffffff61069f610dbc565b5091346104475760206003193601126104475735917fffffffff000000000000000000000000000000000000000000000000000000008316830361077b5750610774602092610d46565b9051908152f35b80fd5b5090346101f157816003193601126101f15773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b50903461040c576020928360031936011261040c576107ce610c48565b916107d7610fe9565b6107df610ef0565b6107e761103e565b9473ffffffffffffffffffffffffffffffffffffffff918051917fca4f280300000000000000000000000000000000000000000000000000000000835283861691828685015260245f85602481897f0000000000000000000000000000000000000000000000000000000000000000165afa948515610b51575f95610aba575b5084519261087484611094565b945f5b858110610a1f575087610888610dbc565b1690813b1561040c575f9060448b83885195869485937fcf7b287f0000000000000000000000000000000000000000000000000000000085528401523060248401525af18015610a1557610a02575b506108e184611094565b978a5b8581106109505750505050505050845b81518110156109295780610923888561090f60019587610d05565b511661091b8489610d05565b51908961111d565b016108f4565b85807f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d80f35b80838a61095e87948c610d05565b51168751938480927f70a0823100000000000000000000000000000000000000000000000000000000825230888301525afa9182156109f8578d926109c7575b506109b66001926109af838b610d05565b51906110e3565b6109c0828d610d05565b52016108e4565b91508382813d83116109f1575b6109de8183610cac565b8101031261040c579051906109b661099e565b503d6109d4565b86513d8f823e3d90fd5b610a0d919a50610c6b565b5f985f6108d7565b84513d5f823e3d90fd5b88610a2a828a610d05565b511690838b868851809581937f70a0823100000000000000000000000000000000000000000000000000000000835230908301525afa8015610ab0575f90610a82575b60019250610a7b828a610d05565b5201610877565b508382813d8311610aa9575b610a988183610cac565b8101031261040c5760019151610a6d565b503d610a8e565b86513d5f823e3d90fd5b9094503d805f833e610acc8183610cac565b810190838183031261040c5780519067ffffffffffffffff821161040c57019080601f8301121561040c578151610b0281610ced565b92610b0f85519485610cac565b818452858085019260051b82010192831161040c578501905b828210610b3957505050935f610867565b8151898116810361040c578152908501908501610b28565b82513d5f823e3d90fd5b823461040c575f60031936011261040c5760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b823461040c575f60031936011261040c5760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b3461040c57602060031936011261040c5773ffffffffffffffffffffffffffffffffffffffff610bf1610c48565b610bf9610ef0565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000005f5416175f557f873950c2ac59c570001b99d815ffb260542df229d07132922e2e6f9941fd3da65f80a2005b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361040c57565b67ffffffffffffffff8111610c7f57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610c7f57604052565b67ffffffffffffffff8111610c7f5760051b60200190565b8051821015610d195760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b6040517fffffffff0000000000000000000000000000000000000000000000000000000060208201927f00000000000000000000000000000000000000000000000000000000000000008452166040820152602481526060810181811067ffffffffffffffff821117610c7f5760405251902090565b6040517f85f2dbd400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa918215610e6d575f92610e3457505090565b9091506020813d602011610e65575b81610e5060209383610cac565b8101031261040c5751908116810361040c5790565b3d9150610e43565b6040513d5f823e3d90fd5b6040517faaabadc500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa918215610e6d575f92610e3457505090565b610f1c7fffffffff000000000000000000000000000000000000000000000000000000005f3516610d46565b602073ffffffffffffffffffffffffffffffffffffffff610f3b610e78565b16916064604051809481937f9be2a88400000000000000000000000000000000000000000000000000000000835260048301523360248301523060448301525afa908115610e6d575f91610fba575b5015610f9257565b7f23dada53000000000000000000000000000000000000000000000000000000005f5260045ffd5b610fdc915060203d602011610fe2575b610fd48183610cac565b810190611335565b5f610f8a565b503d610fca565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805c611016576001905d565b7f3ee5aeb5000000000000000000000000000000000000000000000000000000005f5260045ffd5b73ffffffffffffffffffffffffffffffffffffffff90816002541691826110625750565b5f54161561106c57565b7f8562eb45000000000000000000000000000000000000000000000000000000005f5260045ffd5b9061109e82610ced565b6110ab6040519182610cac565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06110d98294610ced565b0190602036910137565b919082039182116110f057565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b82156111f25773ffffffffffffffffffffffffffffffffffffffff9384168061114d575061114b935061134d565b565b5f548386169590811686810361116a5750505061114b935061134d565b9291949093818661117a926111f8565b836001541694803b1561040c575f9560a4948793604051998a9889977f54caad0000000000000000000000000000000000000000000000000000000000895216600488015260248701526044860152606485015260848401525af18015610e6d576111e3575b50565b6111ec90610c6b565b5f6111e0565b50505050565b6040519260208401907fa9059cbb00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8094166024860152604485015260448452608084019067ffffffffffffffff9385831085841117610c7f575f9384936040521694519082865af1903d15611328573d908111610c7f576112cc91604051916112bc60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610cac565b82523d5f602084013e5b836113ab565b805190811515918261130d575b50506112e25750565b7f5274afe7000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b6113209250602080918301019101611335565b155f806112d9565b506112cc906060906112c6565b9081602091031261040c5751801515810361040c5790565b919060407fd6b9382ec1786c32610e376e8ee8f2f16abeda4ace3b6276ac958193c75bbbc89173ffffffffffffffffffffffffffffffffffffffff8091816001541661139a8782846111f8565b8451968752602087015216941692a3565b906113e857508051156113c057805190602001fd5b7f1425ea42000000000000000000000000000000000000000000000000000000005f5260045ffd5b8151158061143b575b6113f9575090565b73ffffffffffffffffffffffffffffffffffffffff907f9996b315000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b50803b156113f156fea264697066735822122035c9f746fc0206fac020a4aebffe3697900b67d7e803702d23e31c0d159a806664736f6c634300081b0033","opcodes":"PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0xA0 JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x79 JUMPI CALLVALUE PUSH2 0x79 JUMPI SWAP1 PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420696D706C656D656E7465640000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH32 0xF223889600000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST PUSH0 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1B66CB00 EQ PUSH2 0xBC3 JUMPI DUP1 PUSH4 0x4CCB20C0 EQ PUSH2 0xB8F JUMPI DUP1 PUSH4 0x55F90510 EQ PUSH2 0xB5B JUMPI DUP1 PUSH4 0x5884E804 EQ PUSH2 0x7B1 JUMPI DUP1 PUSH4 0x80DB0D51 EQ PUSH2 0x77E JUMPI DUP1 PUSH4 0x851C1BB3 EQ PUSH2 0x72A JUMPI DUP1 PUSH4 0x85F2DBD4 EQ PUSH2 0x6F8 JUMPI DUP1 PUSH4 0x8D928AF8 EQ PUSH2 0x6A7 JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0x66D JUMPI DUP1 PUSH4 0xB0EDCC53 EQ PUSH2 0x47E JUMPI DUP1 PUSH4 0xC414DBD4 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0xE651A319 EQ PUSH2 0x1F5 JUMPI PUSH4 0xE74B981B EQ PUSH2 0x13A JUMPI POP PUSH2 0x11 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x1F1 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F1 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x169 PUSH2 0xC48 JUMP JUMPDEST PUSH2 0x171 PUSH2 0xEF0 JUMP JUMPDEST AND SWAP1 DUP2 ISZERO PUSH2 0x1CB JUMPI POP DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 PUSH1 0x1 SLOAD AND OR PUSH1 0x1 SSTORE PUSH32 0xBF9A9534339A9D6B81696E05DCFB614B7DC518A31D48BE3CFB757988381FB323 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST DUP3 PUSH32 0x768DC59800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP DUP3 CALLVALUE PUSH2 0x1F1 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F1 JUMPI CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 SWAP2 SUB PUSH2 0x1F1 JUMPI PUSH2 0x22F PUSH2 0xEF0 JUMP JUMPDEST DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH32 0x6DD63E026B620E01B87E78897F638F7A04877F832707E6A0EE9818AC02D51B51 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x447 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x447 JUMPI PUSH2 0x29B PUSH2 0xC48 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 AND DUP1 DUP4 SUB PUSH2 0x40C JUMPI PUSH2 0x2C6 PUSH2 0xFE9 JUMP JUMPDEST PUSH2 0x2CE PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x2D6 PUSH2 0x103E JUMP JUMPDEST SWAP5 DUP3 MLOAD SWAP7 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP1 DUP10 MSTORE ADDRESS DUP3 DUP11 ADD MSTORE DUP10 PUSH1 0x20 SWAP4 DUP5 DUP12 PUSH1 0x24 DUP2 DUP10 GAS STATICCALL SWAP11 DUP12 ISZERO PUSH2 0x43D JUMPI DUP3 SWAP12 PUSH2 0x44B JUMPI JUMPDEST POP DUP1 PUSH2 0x327 PUSH2 0xDBC JUMP JUMPDEST AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x447 JUMPI DUP3 SWAP1 PUSH1 0x64 DUP12 DUP4 DUP12 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0xB53A70B200000000000000000000000000000000000000000000000000000000 DUP6 MSTORE AND DUP11 DUP5 ADD MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE DUP12 PUSH1 0x44 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x43D JUMPI SWAP1 DUP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x420 JUMPI JUMPDEST POP POP PUSH1 0x24 SWAP1 DUP7 MLOAD SWAP6 DUP7 SWAP4 DUP5 SWAP3 DUP4 MSTORE ADDRESS SWAP1 DUP4 ADD MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x417 JUMPI POP DUP8 SWAP3 PUSH2 0x3E3 JUMPI JUMPDEST POP POP PUSH2 0x3BD SWAP5 PUSH2 0x3B7 SWAP2 PUSH2 0x10E3 JUMP JUMPDEST SWAP2 PUSH2 0x111D JUMP JUMPDEST DUP1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 TSTORE DUP1 RETURN JUMPDEST SWAP1 DUP1 SWAP3 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x410 JUMPI JUMPDEST PUSH2 0x3FA DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x40C JUMPI MLOAD DUP5 PUSH2 0x3B7 PUSH2 0x3A8 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x3F0 JUMP JUMPDEST MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x42C SWAP2 SWAP3 SWAP5 POP PUSH2 0xC6B JUMP JUMPDEST PUSH2 0x439 JUMPI DUP3 SWAP2 DUP11 PUSH0 PUSH2 0x384 JUMP JUMPDEST DUP10 DUP1 REVERT JUMPDEST DUP8 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP6 DUP1 SWAP3 SWAP13 POP DUP2 SWAP4 POP RETURNDATASIZE DUP4 GT PUSH2 0x477 JUMPI JUMPDEST PUSH2 0x465 DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x40C JUMPI DUP11 SWAP1 MLOAD SWAP10 PUSH0 PUSH2 0x31D JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x45B JUMP JUMPDEST POP DUP3 CALLVALUE PUSH2 0x1F1 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x447 JUMPI DUP1 CALLDATALOAD SWAP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP6 GT PUSH2 0x669 JUMPI CALLDATASIZE PUSH1 0x23 DUP7 ADD SLT ISZERO PUSH2 0x669 JUMPI DUP5 DUP3 ADD CALLDATALOAD SWAP5 PUSH1 0x24 SWAP1 PUSH2 0x4C1 DUP8 PUSH2 0xCED JUMP JUMPDEST SWAP7 PUSH2 0x4CE DUP5 MLOAD SWAP9 DUP10 PUSH2 0xCAC JUMP JUMPDEST DUP1 DUP9 MSTORE PUSH1 0x24 DUP7 DUP10 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0x665 JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x639 JUMPI POP POP POP PUSH2 0x4FC PUSH2 0xFE9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 PUSH1 0x1 SWAP5 DUP1 PUSH1 0x1 SLOAD AND CALLER SUB PUSH2 0x612 JUMPI DUP7 SWAP8 DUP7 JUMPDEST PUSH2 0x550 JUMPI JUMPDEST DUP9 DUP1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 TSTORE DUP1 RETURN JUMPDEST DUP1 MLOAD DUP9 LT ISZERO PUSH2 0x60D JUMPI DUP2 PUSH2 0x564 DUP10 DUP4 PUSH2 0xD05 JUMP JUMPDEST MLOAD AND SWAP8 DUP6 MLOAD SWAP9 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP11 MSTORE ADDRESS DUP9 DUP12 ADD MSTORE DUP5 DUP11 DUP8 DUP2 DUP5 GAS STATICCALL DUP1 ISZERO PUSH2 0x603 JUMPI DUP10 SWAP11 DUP13 SWAP2 PUSH2 0x5CE JUMPI JUMPDEST POP SWAP1 DUP2 DUP11 SWAP4 SWAP3 PUSH2 0x5BC JUMPI JUMPDEST POP POP ADD SWAP8 PUSH2 0x524 JUMP JUMPDEST PUSH2 0x5C7 SWAP2 CALLER SWAP1 PUSH2 0x11F8 JUMP JUMPDEST DUP12 DUP1 PUSH2 0x5B3 JUMP JUMPDEST DUP1 SWAP4 SWAP3 SWAP11 POP DUP7 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x5FC JUMPI JUMPDEST PUSH2 0x5E9 DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x40C JUMPI SWAP1 MLOAD DUP10 SWAP9 SWAP1 DUP10 PUSH2 0x5A8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x5DF JUMP JUMPDEST DUP8 MLOAD RETURNDATASIZE DUP14 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x529 JUMP JUMPDEST DUP5 DUP8 PUSH32 0x23DADA5300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x40C JUMPI DUP2 MSTORE SWAP1 DUP7 ADD SWAP1 DUP7 ADD PUSH2 0x4EA JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F1 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F1 JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x69F PUSH2 0xE78 JUMP JUMPDEST SWAP2 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F1 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F1 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F1 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F1 JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x69F PUSH2 0xDBC JUMP JUMPDEST POP SWAP2 CALLVALUE PUSH2 0x447 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x447 JUMPI CALLDATALOAD SWAP2 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND DUP4 SUB PUSH2 0x77B JUMPI POP PUSH2 0x774 PUSH1 0x20 SWAP3 PUSH2 0xD46 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1F1 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1F1 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 SWAP3 SLOAD AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x40C JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x40C JUMPI PUSH2 0x7CE PUSH2 0xC48 JUMP JUMPDEST SWAP2 PUSH2 0x7D7 PUSH2 0xFE9 JUMP JUMPDEST PUSH2 0x7DF PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x7E7 PUSH2 0x103E JUMP JUMPDEST SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP1 MLOAD SWAP2 PUSH32 0xCA4F280300000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP4 DUP7 AND SWAP2 DUP3 DUP7 DUP6 ADD MSTORE PUSH1 0x24 PUSH0 DUP6 PUSH1 0x24 DUP2 DUP10 PUSH32 0x0 AND GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0xB51 JUMPI PUSH0 SWAP6 PUSH2 0xABA JUMPI JUMPDEST POP DUP5 MLOAD SWAP3 PUSH2 0x874 DUP5 PUSH2 0x1094 JUMP JUMPDEST SWAP5 PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0xA1F JUMPI POP DUP8 PUSH2 0x888 PUSH2 0xDBC JUMP JUMPDEST AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x40C JUMPI PUSH0 SWAP1 PUSH1 0x44 DUP12 DUP4 DUP9 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0xCF7B287F00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE DUP5 ADD MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0xA15 JUMPI PUSH2 0xA02 JUMPI JUMPDEST POP PUSH2 0x8E1 DUP5 PUSH2 0x1094 JUMP JUMPDEST SWAP8 DUP11 JUMPDEST DUP6 DUP2 LT PUSH2 0x950 JUMPI POP POP POP POP POP POP POP DUP5 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x929 JUMPI DUP1 PUSH2 0x923 DUP9 DUP6 PUSH2 0x90F PUSH1 0x1 SWAP6 DUP8 PUSH2 0xD05 JUMP JUMPDEST MLOAD AND PUSH2 0x91B DUP5 DUP10 PUSH2 0xD05 JUMP JUMPDEST MLOAD SWAP1 DUP10 PUSH2 0x111D JUMP JUMPDEST ADD PUSH2 0x8F4 JUMP JUMPDEST DUP6 DUP1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 TSTORE DUP1 RETURN JUMPDEST DUP1 DUP4 DUP11 PUSH2 0x95E DUP8 SWAP5 DUP13 PUSH2 0xD05 JUMP JUMPDEST MLOAD AND DUP8 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE ADDRESS DUP9 DUP4 ADD MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x9F8 JUMPI DUP14 SWAP3 PUSH2 0x9C7 JUMPI JUMPDEST POP PUSH2 0x9B6 PUSH1 0x1 SWAP3 PUSH2 0x9AF DUP4 DUP12 PUSH2 0xD05 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH2 0x9C0 DUP3 DUP14 PUSH2 0xD05 JUMP JUMPDEST MSTORE ADD PUSH2 0x8E4 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x9F1 JUMPI JUMPDEST PUSH2 0x9DE DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x40C JUMPI SWAP1 MLOAD SWAP1 PUSH2 0x9B6 PUSH2 0x99E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x9D4 JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP16 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0xA0D SWAP2 SWAP11 POP PUSH2 0xC6B JUMP JUMPDEST PUSH0 SWAP9 PUSH0 PUSH2 0x8D7 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP9 PUSH2 0xA2A DUP3 DUP11 PUSH2 0xD05 JUMP JUMPDEST MLOAD AND SWAP1 DUP4 DUP12 DUP7 DUP9 MLOAD DUP1 SWAP6 DUP2 SWAP4 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE ADDRESS SWAP1 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0xAB0 JUMPI PUSH0 SWAP1 PUSH2 0xA82 JUMPI JUMPDEST PUSH1 0x1 SWAP3 POP PUSH2 0xA7B DUP3 DUP11 PUSH2 0xD05 JUMP JUMPDEST MSTORE ADD PUSH2 0x877 JUMP JUMPDEST POP DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xAA9 JUMPI JUMPDEST PUSH2 0xA98 DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x40C JUMPI PUSH1 0x1 SWAP2 MLOAD PUSH2 0xA6D JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA8E JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP5 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0xACC DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SWAP1 DUP4 DUP2 DUP4 SUB SLT PUSH2 0x40C JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x40C JUMPI ADD SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x40C JUMPI DUP2 MLOAD PUSH2 0xB02 DUP2 PUSH2 0xCED JUMP JUMPDEST SWAP3 PUSH2 0xB0F DUP6 MLOAD SWAP5 DUP6 PUSH2 0xCAC JUMP JUMPDEST DUP2 DUP5 MSTORE DUP6 DUP1 DUP6 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x40C JUMPI DUP6 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xB39 JUMPI POP POP POP SWAP4 PUSH0 PUSH2 0x867 JUMP JUMPDEST DUP2 MLOAD DUP10 DUP2 AND DUP2 SUB PUSH2 0x40C JUMPI DUP2 MSTORE SWAP1 DUP6 ADD SWAP1 DUP6 ADD PUSH2 0xB28 JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x40C JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x40C JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x2 SLOAD AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x40C JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x40C JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x40C JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x40C JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xBF1 PUSH2 0xC48 JUMP JUMPDEST PUSH2 0xBF9 PUSH2 0xEF0 JUMP JUMPDEST AND DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 PUSH0 SLOAD AND OR PUSH0 SSTORE PUSH32 0x873950C2AC59C570001B99D815FFB260542DF229D07132922E2E6F9941FD3DA6 PUSH0 DUP1 LOG2 STOP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x40C JUMPI JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xC7F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xC7F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xC7F JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xD19 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x0 DUP5 MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xC7F JUMPI PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x85F2DBD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0xE6D JUMPI PUSH0 SWAP3 PUSH2 0xE34 JUMPI POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xE65 JUMPI JUMPDEST DUP2 PUSH2 0xE50 PUSH1 0x20 SWAP4 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x40C JUMPI MLOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x40C JUMPI SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xE43 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0xE6D JUMPI PUSH0 SWAP3 PUSH2 0xE34 JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH2 0xF1C PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH0 CALLDATALOAD AND PUSH2 0xD46 JUMP JUMPDEST PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xF3B PUSH2 0xE78 JUMP JUMPDEST AND SWAP2 PUSH1 0x64 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH32 0x9BE2A88400000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE6D JUMPI PUSH0 SWAP2 PUSH2 0xFBA JUMPI JUMPDEST POP ISZERO PUSH2 0xF92 JUMPI JUMP JUMPDEST PUSH32 0x23DADA5300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH2 0xFDC SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xFE2 JUMPI JUMPDEST PUSH2 0xFD4 DUP2 DUP4 PUSH2 0xCAC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1335 JUMP JUMPDEST PUSH0 PUSH2 0xF8A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xFCA JUMP JUMPDEST PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 DUP1 TLOAD PUSH2 0x1016 JUMPI PUSH1 0x1 SWAP1 TSTORE JUMP JUMPDEST PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 PUSH1 0x2 SLOAD AND SWAP2 DUP3 PUSH2 0x1062 JUMPI POP JUMP JUMPDEST PUSH0 SLOAD AND ISZERO PUSH2 0x106C JUMPI JUMP JUMPDEST PUSH32 0x8562EB4500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 PUSH2 0x109E DUP3 PUSH2 0xCED JUMP JUMPDEST PUSH2 0x10AB PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0xCAC JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0x10D9 DUP3 SWAP5 PUSH2 0xCED JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x10F0 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 ISZERO PUSH2 0x11F2 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP1 PUSH2 0x114D JUMPI POP PUSH2 0x114B SWAP4 POP PUSH2 0x134D JUMP JUMPDEST JUMP JUMPDEST PUSH0 SLOAD DUP4 DUP7 AND SWAP6 SWAP1 DUP2 AND DUP7 DUP2 SUB PUSH2 0x116A JUMPI POP POP POP PUSH2 0x114B SWAP4 POP PUSH2 0x134D JUMP JUMPDEST SWAP3 SWAP2 SWAP5 SWAP1 SWAP4 DUP2 DUP7 PUSH2 0x117A SWAP3 PUSH2 0x11F8 JUMP JUMPDEST DUP4 PUSH1 0x1 SLOAD AND SWAP5 DUP1 EXTCODESIZE ISZERO PUSH2 0x40C JUMPI PUSH0 SWAP6 PUSH1 0xA4 SWAP5 DUP8 SWAP4 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP9 DUP10 SWAP8 PUSH32 0x54CAAD0000000000000000000000000000000000000000000000000000000000 DUP10 MSTORE AND PUSH1 0x4 DUP9 ADD MSTORE PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0x84 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0xE6D JUMPI PUSH2 0x11E3 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0x11EC SWAP1 PUSH2 0xC6B JUMP JUMPDEST PUSH0 PUSH2 0x11E0 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP5 AND PUSH1 0x24 DUP7 ADD MSTORE PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x44 DUP5 MSTORE PUSH1 0x80 DUP5 ADD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP6 DUP4 LT DUP6 DUP5 GT OR PUSH2 0xC7F JUMPI PUSH0 SWAP4 DUP5 SWAP4 PUSH1 0x40 MSTORE AND SWAP5 MLOAD SWAP1 DUP3 DUP7 GAS CALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x1328 JUMPI RETURNDATASIZE SWAP1 DUP2 GT PUSH2 0xC7F JUMPI PUSH2 0x12CC SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x12BC PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD DUP5 PUSH2 0xCAC JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP4 PUSH2 0x13AB JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 ISZERO ISZERO SWAP2 DUP3 PUSH2 0x130D JUMPI JUMPDEST POP POP PUSH2 0x12E2 JUMPI POP JUMP JUMPDEST PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x1320 SWAP3 POP PUSH1 0x20 DUP1 SWAP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0x1335 JUMP JUMPDEST ISZERO PUSH0 DUP1 PUSH2 0x12D9 JUMP JUMPDEST POP PUSH2 0x12CC SWAP1 PUSH1 0x60 SWAP1 PUSH2 0x12C6 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x40C JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x40C JUMPI SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 PUSH32 0xD6B9382EC1786C32610E376E8EE8F2F16ABEDA4ACE3B6276AC958193C75BBBC8 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 DUP2 PUSH1 0x1 SLOAD AND PUSH2 0x139A DUP8 DUP3 DUP5 PUSH2 0x11F8 JUMP JUMPDEST DUP5 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD MSTORE AND SWAP5 AND SWAP3 LOG3 JUMP JUMPDEST SWAP1 PUSH2 0x13E8 JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x13C0 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x143B JUMPI JUMPDEST PUSH2 0x13F9 JUMPI POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x13F1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD 0xC9 0xF7 CHAINID 0xFC MUL MOD STATICCALL 0xC0 KECCAK256 LOG4 0xAE 0xBF INVALID CALLDATASIZE SWAP8 SWAP1 SIGNEXTEND PUSH8 0xD7E803702D23E31C 0xD ISZERO SWAP11 DUP1 PUSH7 0x64736F6C634300 ADDMOD SHL STOP CALLER ","sourceMap":"1731:8933:37:-:0;;;;;;;;;;;;-1:-1:-1;1731:8933:37;;;;10555:9;10551:69;;1731:8933;;;;;10630:25;;;;;;1731:8933;;;;;;;;;;;10630:25;10551:69;10591:18;;10567:1;10591:18;10567:1;10591:18;1731:8933;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;;:::i;:::-;1525:73:16;;:::i;:::-;1731:8933:37;8794:26;;;8790:85;;1731:8933;;;8885:28;1731:8933;;;8885:28;1731:8933;8929:29;;;;1731:8933;;8790:85;8843:21;;;;;1731:8933;;;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;;;;;;;;1525:73:16;;:::i;:::-;1731:8933:37;;9111:38;1731:8933;;;9111:38;1731:8933;9165:48;;;;1731:8933;;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;:::i;:::-;;;;;;;;;;;;;1083:103:20;;:::i;:::-;1525:73:16;;:::i;:::-;2782:17:37;;:::i;:::-;1731:8933;;;;;3283:33;;;3310:4;3283:33;;;1731:8933;;;3283:33;;;1731:8933;3283:33;;;;;;;;;;;;;1731:8933;3525:26;;;;:::i;:::-;1731:8933;3525:86;;;;;;1731:8933;;;;;;;3525:86;;;;;1731:8933;3525:86;;1731:8933;3525:86;;;1731:8933;3310:4;1731:8933;;;;;;;;;3525:86;;;;;;;;;;;;;;1731:8933;;;;;;;3641:33;;;;;;;3310:4;3641:33;;;1731:8933;3641:33;;;;;;;;;;;;1731:8933;3641:51;;2942:9;3641:51;;;;:::i;:::-;2942:9;;:::i;:::-;3051:52:21;551:66:20;3051:52:21;1731:8933:37;;3641:33;;;;;;;;;;;;;;;;:::i;:::-;;;1731:8933;;;;;;3641:51;:33;;1731:8933;;;;3641:33;;;;;;1731:8933;;;;;;;;3525:86;;;;;;;:::i;:::-;1731:8933;;3525:86;;;;;;1731:8933;;;;3525:86;1731:8933;;;;;;;;;3525:86;1731:8933;;;3283:33;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1731:8933;;;;;;;3283:33;;;;;;;;;1731:8933;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1083:103:20;;;;;:::i;:::-;1731:8933:37;9570:13;;1731:8933;;9570:13;1731:8933;;9556:10;:27;9552:83;;9650:13;;;9570;;;9645:288;3051:52:21;;551:66:20;3051:52:21;1731:8933:37;;9687:3;1731:8933;;9665:20;;;;;9724:12;;;;;:::i;:::-;1731:8933;;;;;9773:33;1731:8933;9773:33;;9800:4;9773:33;;;1731:8933;9773:33;;;;;;;;;;;;;;;;;9687:3;9825:16;;;;;;9821:102;;9687:3;;;1731:8933;9650:13;;;9821:102;9895:12;9556:10;;9895:12;;:::i;:::-;9821:102;;;;9773:33;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1731:8933;;;;;;;;;;9773:33;;;;;;;;1731:8933;;;;;;;;;9665:20;;;9552:83;9606:18;;;;;;1731:8933;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;;;1216:6:23;1731:8933:37;;;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;:::i;:::-;1083:103:20;;;:::i;:::-;1525:73:16;;:::i;:::-;3862:17:37;;:::i;:::-;1731:8933;;;;;4312:30;1731:8933;4312:30;;1731:8933;;;4312:30;;;;;1731:8933;;;1216:6:23;1731:8933:37;1216:6:23;;;1731:8933:37;4312:30;;;;;;;1731:8933;4312:30;;;1731:8933;;;;4604:24;;;;:::i;:::-;4643:13;1731:8933;4658:13;;;;;;4963:26;;;;:::i;:::-;1731:8933;4963:68;;;;;;1731:8933;;;;;;;4963:68;;;;;1731:8933;4963:68;;;;1731:8933;4746:4;1731:8933;;;;4963:68;;;;;;;;4638:125;5062:24;;;;:::i;:::-;5101:13;;5116;;;;;;4000;;;;;;;;4038:3;1731:8933;;4015:21;;;;;4078:13;4115:9;4078:13;;;1731:8933;4078:13;;;:::i;:::-;1731:8933;;4093:20;;;;:::i;:::-;1731:8933;4115:9;;;:::i;:::-;1731:8933;4000:13;;4015:21;;3051:52:21;551:66:20;3051:52:21;1731:8933:37;;5131:3;5173:13;;;;;;;;:::i;:::-;1731:8933;;;;5173:38;;;;1731:8933;5173:38;;4746:4;5173:38;;;1731:8933;5173:38;;;;;;;;;;;5131:3;5214:19;5173:60;1731:8933;5214:19;;;;;:::i;:::-;1731:8933;5173:60;;:::i;:::-;5150:83;;;;:::i;:::-;1731:8933;;5101:13;;5173:38;;;;;;;;;;;;;;;;:::i;:::-;;;1731:8933;;;;;;;5173:60;:38;;;;;;;;1731:8933;;;;;;;;;4963:68;;;;;;:::i;:::-;1731:8933;4963:68;;;;;1731:8933;;;;;;;;;4673:3;4714:13;;;;;:::i;:::-;1731:8933;;;;;;;;4714:38;;;;1731:8933;4714:38;;4746:4;4714:38;;;1731:8933;4714:38;;;;;;1731:8933;4714:38;;;4673:3;1731:8933;4692:60;;;;;;:::i;:::-;1731:8933;;4643:13;;4714:38;;;;;;;;;;;;;;;:::i;:::-;;;1731:8933;;;;;;;4714:38;;;;;;;;1731:8933;;;;;;;;;4312:30;;;;;;1731:8933;4312:30;;;;;;:::i;:::-;;;1731:8933;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;4312:30;;;;;;;1731:8933;;;;;;;;;;;;;;;;;;;;4312:30;1731:8933;;;;;;;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;;7790:18;1731:8933;;;;;;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;;7632:13;1731:8933;;;;;;;;;;;;;-1:-1:-1;;1731:8933:37;;;;;;;;:::i;:::-;1525:73:16;;:::i;:::-;1731:8933:37;;;;;;;;;9384:27;1731:8933;9384:27;;1731:8933;;;;;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;1931:430:16;1731:8933:37;;;2303:50:16;;;2320:22;;1731:8933:37;;;;;;;2303:50:16;;;1731:8933:37;;;;;;;;;;;;;;;2293:61:16;;1931:430;:::o;7229:142:37:-;1731:8933;;;7327:37;;1731:8933;7327:37;1731:8933;7327:37;1731:8933;1216:6:23;1731:8933:37;;7327:37;;;;;;;;;;;7320:44;;7229:142;:::o;7327:37::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;1731:8933;;;;;;;;;;;;7229:142;:::o;7327:37::-;;;-1:-1:-1;7327:37:37;;;1731:8933;;;7327:37;1731:8933;;;;;1366:109:23;1731:8933:37;;;1442:26:23;;1731:8933:37;1442:26:23;1731:8933:37;1442:26:23;1731:8933:37;1216:6:23;1731:8933:37;;1442:26:23;;;;;;;;;;;1435:33;;1366:109;:::o;1688:201:16:-;1762:20;1774:7;;;;1762:20;:::i;:::-;1592:60:23;1731:8933:37;1592:15:23;;:::i;:::-;1731:8933:37;;;;;1592:60:23;;;;1731:8933:37;1592:60:23;;;;;1731:8933:37;1820:10:16;1731:8933:37;;;;1646:4:23;1731:8933:37;;;;1592:60:23;;;;;;;1774:7:16;1592:60:23;;;1688:201:16;1797:34;;1793:90;;1688:201::o;1793:90::-;1854:18;1774:7;1854:18;1592:60:23;1774:7:16;1854:18;1592:60:23;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;1192:349:20;551:66;2806:53:21;;1316:93:20;;1529:4;3051:52:21;;1192:349:20:o;1316:93::-;1368:30;-1:-1:-1;1368:30:20;;-1:-1:-1;1368:30:20;6884:299:37;1731:8933;;;6985:18;1731:8933;;7018:32;;7014:163;;6884:299;:::o;7014:163::-;-1:-1:-1;1731:8933:37;;7070:35;7066:101;;6884:299::o;7066:101::-;7132:20;-1:-1:-1;7132:20:37;;-1:-1:-1;7132:20:37;1731:8933;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;5373:1205;5593:26;;5589:63;;1731:8933;;;;5751:32;1731:8933;;5833:21;;;;;:::i;:::-;5373:1205::o;5747:825::-;5618:1;1731:8933;;;;;;;;6038:23;;;1731:8933;;6115:21;;;;;;;:::i;6034:528::-;6330:21;;;;;;;;;;:::i;:::-;1731:8933;6533:13;1731:8933;;6466:81;;;;;;5618:1;1731:8933;;;;;;;6466:81;;;;;1731:8933;6466:81;;1731:8933;6466:81;;;1731:8933;;;;;;;;;;;;;;;;;6466:81;;;;;;;;6034:528;;5373:1205::o;6466:81::-;;;;:::i;:::-;;;;5589:63;5635:7;;;;:::o;1303:160:30:-;1731:8933:37;;1412:43:30;;;;;1731:8933:37;1412:43:30;;1731:8933:37;;;;1412:43:30;;;1731:8933:37;;;;;;1412:43:30;;1731:8933:37;;;;;;;;;;;;;;;-1:-1:-1;1731:8933:37;;;;;;3462:31:31;;;;;;;;1731:8933:37;;;;;;;;;;3510:55:31;1731:8933:37;;;;;1412:43:30;;1731:8933:37;;;;;;;:::i;:::-;;;;-1:-1:-1;1412:43:30;1731:8933:37;;;;3510:55:31;;:::i;:::-;1731:8933:37;;4551:22:30;;;;:57;;;;1731:8933:37;4547:135:30;;;;1303:160;:::o;4547:135::-;4631:40;-1:-1:-1;4631:40:30;;1731:8933:37;1412:43:30;-1:-1:-1;4631:40:30;4551:57;4578:30;;;1412:43;4578:30;;;;;;;;:::i;:::-;4577:31;4551:57;;;;1731:8933:37;;3510:55:31;1731:8933:37;;;;;;;;;;;;;;;;;;;;;;;:::o;6584:294::-;;;1731:8933;6805:66;6584:294;1731:8933;;;;6711:13;1731:8933;;6767:21;;;;;:::i;:::-;1731:8933;;;;;;;;;;;;6805:66;;6584:294::o;4625:582:31:-;;4797:8;;-1:-1:-1;1731:8933:37;;5874:21:31;:17;;6046:142;;;;;;5870:383;6225:17;5894:1;6225:17;;5894:1;6225:17;4793:408;1731:8933:37;;5045:22:31;:49;;;4793:408;5041:119;;5173:17;;:::o;5041:119::-;1731:8933:37;5121:24:31;;5066:1;5121:24;1731:8933:37;5121:24:31;1731:8933:37;;5066:1:31;5121:24;5045:49;5071:18;;;:23;5045:49;"},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3","getAuthorizer()":"aaabadc5","getFeeRecipient()":"4ccb20c0","getProtocolFeeBurner()":"55f90510","getProtocolFeeController()":"85f2dbd4","getTargetToken()":"80db0d51","getVault()":"8d928af8","recoverProtocolFees(address[])":"b0edcc53","setFeeRecipient(address)":"e74b981b","setProtocolFeeBurner(address)":"e651a319","setTargetToken(address)":"1b66cb00","sweepProtocolFees(address)":"5884e804","sweepProtocolFeesForToken(address,address)":"c414dbd4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReceiveEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTargetToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocolFeeBurner\",\"type\":\"address\"}],\"name\":\"ProtocolFeeBurnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ProtocolFeeSwept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TargetTokenSet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeBurner\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeBurner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeController\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"feeTokens\",\"type\":\"address[]\"}],\"name\":\"recoverProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolFeeBurner\",\"name\":\"protocolFeeBurner\",\"type\":\"address\"}],\"name\":\"setProtocolFeeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"targetToken\",\"type\":\"address\"}],\"name\":\"setTargetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"sweepProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"sweepProtocolFeesForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This withdraws all protocol fees previously collected and allocated to the protocol by the `ProtocolFeeController`, processes them with a configurable \\\"burner\\\" (e.g., from CowSwap) and forwards them to a recipient address. An off-chain process can call `collectAggregateFees(pool)` on the fee controller for a given pool, which will collect and allocate the fees to the protocol and pool creator. `getProtocolFeeAmounts(pool)` returns the fee amounts available for withdrawal. If these are great enough, `sweepProtocolFees(pool)` here will withdraw, convert, and forward them to the final recipient. There is also a `sweepProtocolFeesForToken` function to target a single token within a pool.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"FeeRecipientSet(address)\":{\"params\":{\"feeRecipient\":\"The final destination of collected protocol fees\"}},\"ProtocolFeeBurnerSet(address)\":{\"params\":{\"protocolFeeBurner\":\"The contract used to \\\"burn\\\" protocol fees (i.e., convert them to the target token)\"}},\"ProtocolFeeSwept(address,address,uint256,address)\":{\"details\":\"This can happen if no target token or burner contract was specified, or the fee token is the target token.\",\"params\":{\"feeToken\":\"The token the fee was collected in (also the target token in this case; no swap necessary)\",\"feeTokenAmount\":\"The number of feeTokens\",\"pool\":\"The pool on which the fee was collected\",\"recipient\":\"The recipient of the fee tokens\"}},\"TargetTokenSet(address)\":{\"params\":{\"token\":\"The preferred token for receiving protocol fees\"}}},\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"_0\":\"The computed actionId\"}},\"getAuthorizer()\":{\"returns\":{\"_0\":\"authorizer An interface pointer to the Authorizer\"}},\"getFeeRecipient()\":{\"details\":\"Can be changed by `setFeeRecipient`.\",\"returns\":{\"_0\":\"feeRecipient The current fee recipient\"}},\"getProtocolFeeBurner()\":{\"details\":\"Can be changed by `setProtocolFeeBurner`.\",\"returns\":{\"_0\":\"protocolFeeBurner The currently active protocol fee burner\"}},\"getProtocolFeeController()\":{\"details\":\"It is not immutable in the Vault, so we need to fetch it every time.\",\"returns\":{\"_0\":\"protocolFeeController The address of the current `ProtocolFeeController`\"}},\"getTargetToken()\":{\"details\":\"This is the token the burner will swap all fee tokens for. Can be changed by `setTargetToken`.\",\"returns\":{\"_0\":\"targetToken The current target token\"}},\"getVault()\":{\"returns\":{\"_0\":\"vault An interface pointer to the Vault\"}},\"recoverProtocolFees(address[])\":{\"details\":\"It will recover the full balance of all the tokens. This can only be called by the `feeRecipient`.\",\"params\":{\"feeTokens\":\"The tokens to recover\"}},\"setFeeRecipient(address)\":{\"details\":\"This is a permissioned function.\",\"params\":{\"feeRecipient\":\"The address of the new fee recipient\"}},\"setProtocolFeeBurner(address)\":{\"details\":\"This is a permissioned function. If it is not set, the contract will fall back to forwarding all fee tokens directly to the fee recipient. Note that if this function is called, `setTargetToken` must be called as well, or any sweep operations using the burner will revert with `InvalidTargetToken`.\",\"params\":{\"protocolFeeBurner\":\"The address of the current protocol fee burner\"}},\"setTargetToken(address)\":{\"details\":\"This is the token for which the burner will attempt to swap all collected fee tokens.\",\"params\":{\"targetToken\":\"The address of the target token\"}},\"sweepProtocolFees(address)\":{\"details\":\"This will withdraw all fee tokens from the controller to this contract, and attempt to convert and forward the proceeds to the fee recipient. Note that this requires governance to grant this contract permission to call `withdrawProtocolFees` on the `ProtocolFeeController`. This is a permissioned call, since it involves a swap and a permissionless sweep could be triggered at times disadvantageous to the protocol (e.g., flash crashes).\",\"params\":{\"pool\":\"The pool that incurred the fees we're withdrawing\"}},\"sweepProtocolFeesForToken(address,address)\":{\"details\":\"This will withdraw the fee token from the controller to this contract, and attempt to convert and forward the proceeds to the fee recipient. Note that this requires governance to grant this contract permission to call `withdrawProtocolFeesForToken` on the `ProtocolFeeController`. Since the general idea is to sweep when the token value crosses a certain threshold, we expect that this might be the most commonly used sweeping function. This is a permissioned call, since it involves a swap and a permissionless sweep could be triggered at times disadvantageous to the protocol (e.g., flash crashes).\",\"params\":{\"feeToken\":\"The fee token in the pool\",\"pool\":\"The pool that incurred the fees we're withdrawing\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"CannotReceiveEth()\":[{\"notice\":\"All pool tokens are ERC20, so this contract should not handle ETH.\"}],\"InvalidFeeRecipient()\":[{\"notice\":\"The fee recipient is invalid.\"}],\"InvalidTargetToken()\":[{\"notice\":\"The target token is invalid.\"}],\"ReentrancyGuardReentrantCall()\":[{\"notice\":\"Unauthorized reentrant call.\"}],\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}]},\"events\":{\"FeeRecipientSet(address)\":{\"notice\":\"Emitted when the fee recipient address is set or updated.\"},\"ProtocolFeeBurnerSet(address)\":{\"notice\":\"Emitted when the protocol fee burner contract is set or updated.\"},\"ProtocolFeeSwept(address,address,uint256,address)\":{\"notice\":\"Emitted when a fee token is transferred directly, vs. calling the burner.\"},\"TargetTokenSet(address)\":{\"notice\":\"Emitted when the target token is set or updated.\"}},\"kind\":\"user\",\"methods\":{\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getAuthorizer()\":{\"notice\":\"Get the address of the Authorizer.\"},\"getFeeRecipient()\":{\"notice\":\"Getter for the current fee recipient.\"},\"getProtocolFeeBurner()\":{\"notice\":\"Getter for the current protocol fee burner.\"},\"getProtocolFeeController()\":{\"notice\":\"Return the address of the current `ProtocolFeeController` from the Vault.\"},\"getTargetToken()\":{\"notice\":\"Getter for the target token.\"},\"getVault()\":{\"notice\":\"Get the address of the Balancer Vault.\"},\"recoverProtocolFees(address[])\":{\"notice\":\"Retrieve any tokens \\\"stuck\\\" in this contract (e.g., dust, or failed conversions).\"},\"setFeeRecipient(address)\":{\"notice\":\"Update the fee recipient address.\"},\"setProtocolFeeBurner(address)\":{\"notice\":\"Update the address of the protocol fee burner, used to convert protocol fees to a target token.\"},\"setTargetToken(address)\":{\"notice\":\"Update the address of the target token.\"},\"sweepProtocolFees(address)\":{\"notice\":\"Withdraw, convert, and forward protocol fees for a given pool.\"},\"sweepProtocolFeesForToken(address,address)\":{\"notice\":\"Withdraw, convert, and forward protocol fees for a given pool and token.\"}},\"notice\":\"Withdraw protocol fees, convert them to a target token, and forward to a recipient.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeeSweeper.sol\":\"ProtocolFeeSweeper\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol\":{\"keccak256\":\"0xf86625ec7c352729de98584baef50c1561eddfb074e7c0ebf95819749dc21030\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://cda5545fbfbb61fdbaca25b25a9c1e773842096de65692fb2d8f62660d3ac7c6\",\"dweb:/ipfs/QmU36BdVf3CS7JYnXdew3kPjcoEysLKwiGofXvHcDkdLcr\"]},\"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeSweeper.sol\":{\"keccak256\":\"0xfadd8901deab25520ba20ae97493551114d472d703e14bb7ca225c2534248697\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b04c5c6cd99ece833f04f1d1f42a88ef6f376f0a205ef241a535e0be514fea78\",\"dweb:/ipfs/QmZwfAML57y83dUhKasZ4QAPymS4Jdi8Xxf2hsy3owJ6H1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0x743734d3d3503d705f0a778c4b0dd61fdb067e89a07481ddbead0654e6808318\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6198f27b2d01f346fdd3d1302e9a6ddd543d2f06afd675d84919c2242bd26d8d\",\"dweb:/ipfs/QmYntQih5MwxxdGnVu2BPVLeqFuJEH761cByAesjwE6JKT\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\":{\"keccak256\":\"0x807237870f3aaa26cd815c5f600c1d0c60861a2f962fcc341d4b80942288ab52\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://90f108409488d0c38147d2ac7b9facd694dbf1001c501136a249091788c22232\",\"dweb:/ipfs/QmRCaCCGcuL4kxBEbrpq6FfENBJk4Zo8CNe8TRusatuYJ6\"]},\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol\":{\"keccak256\":\"0x0986ee17e49747c89956b4d46947b65b7c2942d5854fd39d764a7cb2735ff8af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://38fedef8f551d12a155f54ab1c863db60fed1226a397a321ac729e9db65f4593\",\"dweb:/ipfs/QmaxBFc45J79aehsbSoLzNWVfBhqxkkWnKpunmKrbzV1pL\"]},\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol\":{\"keccak256\":\"0xba524eab3f4f1b735008624cf11264842bec509e05ac025f93b8c843547fbfd3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c539df1afd342c47fdbd96fb28a183b7b30e055c4e435cdf77140ec92e68a42\",\"dweb:/ipfs/QmZ4akawS7TKrJkBeoi4bfyGWRmQgXshtkAMupuxkgH5Ur\"]},\"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol\":{\"keccak256\":\"0x67518bf3b6bd96f5897c56867fc57f3c31bb9b97abf93cf960de145a5eb82414\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://563857d8606cbd4f727c75f09901d09ec9faa73778fe85e2af851982cdb9b6e8\",\"dweb:/ipfs/QmU7x1gWCPGPAcxA8Qq3z8hscrGRFwsc28qad4RMihZ8qB\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"contracts/ProtocolFeeSweeper.sol\":{\"keccak256\":\"0xb70ed0faab1d78cd45a58dee2f0e370f9160cee9493d856a78412fb494f909ac\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://53b3cdeb1be968d26fa83246c128e7779b9bf37624b123b394ce8971bb669378\",\"dweb:/ipfs/QmQXnzQjAGq4xLfabbCDGdnbMSongXoh1itj21DF7rjLn2\"]}},\"version\":1}"}},"contracts/test/PriceImpactHelperMock.sol":{"PriceImpactHelperMock":{"abi":[{"inputs":[{"internalType":"contract IVault","name":"vault","type":"address"},{"internalType":"contract IRouter","name":"router","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[],"name":"ErrorSelectorNotFound","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"QuoteResultSpoofed","type":"error"},{"inputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"name":"Result","type":"error"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntToUint","type":"error"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintToInt","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"address","name":"sender","type":"address"}],"name":"calculateAddLiquidityUnbalancedPriceImpact","outputs":[{"internalType":"uint256","name":"priceImpact","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"callAndRevertHook","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"int256[]","name":"array","type":"int256[]"}],"name":"maxNegativeIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"int256[]","name":"array","type":"int256[]"}],"name":"minPositiveIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"tokenIndex","type":"uint256"},{"internalType":"int256[]","name":"deltas","type":"int256[]"},{"internalType":"address","name":"sender","type":"address"}],"name":"queryAddLiquidityUnbalancedForTokenDeltas","outputs":[{"internalType":"int256","name":"deltaBPT","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"int256[]","name":"deltas","type":"int256[]"},{"internalType":"int256[]","name":"deltaBPTs","type":"int256[]"},{"internalType":"address","name":"sender","type":"address"}],"name":"zeroOutDeltas","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0xC0 CALLVALUE PUSH2 0x9A JUMPI PUSH1 0x1F PUSH2 0x13FD CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x9E JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x9A JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND DUP3 SUB PUSH2 0x9A JUMPI PUSH1 0x20 ADD MLOAD SWAP2 DUP3 AND DUP3 SUB PUSH2 0x9A JUMPI PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH1 0x40 MLOAD PUSH2 0x134A SWAP1 DUP2 PUSH2 0xB3 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0xA00 ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x325 ADD MSTORE DUP2 DUP2 PUSH2 0xB9C ADD MSTORE DUP2 DUP2 PUSH2 0xD50 ADD MSTORE PUSH2 0xEF7 ADD MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x14 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1EF39EE EQ PUSH2 0x622 JUMPI DUP1 PUSH4 0xD4277D1 EQ PUSH2 0x5E7 JUMPI DUP1 PUSH4 0x3B064CA3 EQ PUSH2 0x580 JUMPI DUP1 PUSH4 0x48406A54 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0xA7699638 EQ PUSH2 0xBA JUMPI PUSH4 0xE3A50D82 EQ PUSH2 0x5E JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xB6 JUMPI PUSH1 0x80 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB6 JUMPI PUSH2 0x77 PUSH2 0x725 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT PUSH2 0xB6 JUMPI PUSH2 0x9D PUSH2 0xAF SWAP3 PUSH1 0x20 SWAP6 CALLDATASIZE SWAP2 ADD PUSH2 0x6C5 JUMP JUMPDEST PUSH2 0xA5 PUSH2 0x748 JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xF96 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0xB6 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB6 JUMPI PUSH2 0xD4 PUSH2 0x725 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xB6 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0xB6 JUMPI DUP2 DUP4 ADD CALLDATALOAD SWAP1 PUSH2 0x100 DUP3 PUSH2 0x76B JUMP JUMPDEST SWAP3 PUSH2 0x10D DUP7 MLOAD SWAP5 DUP6 PUSH2 0x65D JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP1 CALLDATASIZE PUSH1 0x24 DUP6 DUP4 ADD ADD GT PUSH2 0xB6 JUMPI PUSH0 SWAP5 DUP6 PUSH1 0x20 DUP7 DUP3 SWAP8 PUSH1 0x24 DUP5 SWAP7 ADD DUP8 CALLDATACOPY DUP4 ADD ADD MSTORE MLOAD SWAP3 GAS CALL SWAP2 PUSH2 0x141 PUSH2 0x852 JUMP JUMPDEST SWAP3 DUP1 ISZERO PUSH2 0x193 JUMPI SWAP3 PUSH2 0x18F SWAP2 PUSH2 0x15A DUP3 PUSH1 0x20 SWAP7 CALLER PUSH2 0x10A2 JUMP JUMPDEST POP MLOAD SWAP4 DUP5 SWAP4 PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 DUP6 MSTORE DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x881 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP POP PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH2 0x1E0 DUP5 PUSH2 0x105B JUMP JUMPDEST AND EQ PUSH2 0x1EC JUMPI POP PUSH2 0x1093 JUMP JUMPDEST PUSH32 0x28F9554100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0xB6 JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB6 JUMPI PUSH2 0x22D PUSH2 0x725 JUMP JUMPDEST SWAP1 PUSH1 0x24 DUP1 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT PUSH2 0xB6 JUMPI CALLDATASIZE PUSH1 0x23 DUP6 ADD SLT ISZERO PUSH2 0xB6 JUMPI DUP4 DUP3 ADD CALLDATALOAD SWAP5 PUSH2 0x25C DUP7 PUSH2 0x6AD JUMP JUMPDEST SWAP5 PUSH2 0x269 DUP9 MLOAD SWAP7 DUP8 PUSH2 0x65D JUMP JUMPDEST DUP7 DUP7 MSTORE PUSH1 0x20 SWAP7 DUP6 DUP9 DUP9 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0xB6 JUMPI DUP7 DUP10 SWAP2 ADD SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x570 JUMPI POP POP POP POP PUSH1 0x44 CALLDATALOAD SWAP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND SWAP1 DUP2 DUP11 SUB PUSH2 0xB6 JUMPI PUSH2 0x2C2 DUP11 DUP10 DUP7 PUSH2 0xE3B JUMP JUMPDEST SWAP2 DUP4 MLOAD SWAP3 PUSH32 0xF71088800000000000000000000000000000000000000000000000000000000 DUP12 DUP6 ADD MSTORE DUP3 DUP7 AND DUP10 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x84 DUP4 ADD MSTORE PUSH0 PUSH1 0xA4 DUP4 ADD MSTORE PUSH1 0xA4 DUP3 MSTORE PUSH1 0xE0 DUP3 ADD DUP3 DUP2 LT DUP7 DUP3 GT OR PUSH2 0x545 JUMPI DUP4 MSTORE PUSH2 0x34A SWAP2 SWAP1 PUSH32 0x0 AND PUSH2 0x113B JUMP JUMPDEST SWAP3 DUP4 MLOAD DUP5 ADD SWAP4 DUP9 DUP2 DUP2 DUP8 ADD SWAP7 SUB SLT PUSH2 0xB6 JUMPI DUP9 DUP2 ADD MLOAD SWAP2 DUP3 GT PUSH2 0xB6 JUMPI ADD SWAP3 DUP1 PUSH1 0x3F DUP6 ADD SLT ISZERO PUSH2 0xB6 JUMPI DUP8 DUP5 ADD MLOAD PUSH2 0x381 DUP2 PUSH2 0x6AD JUMP JUMPDEST SWAP5 PUSH2 0x38E DUP5 MLOAD SWAP7 DUP8 PUSH2 0x65D JUMP JUMPDEST DUP2 DUP7 MSTORE DUP4 DUP11 DUP8 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0xB6 JUMPI DUP4 DUP11 SWAP2 ADD SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x535 JUMPI POP POP POP POP PUSH2 0x3BE DUP7 MLOAD PUSH2 0x787 JUMP JUMPDEST SWAP8 PUSH0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x441 JUMPI PUSH2 0x3DD PUSH2 0x3D7 DUP3 DUP8 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH2 0xF41 JUMP JUMPDEST PUSH2 0x3EA PUSH2 0x3D7 DUP4 DUP12 PUSH2 0x7B8 JUMP JUMPDEST SWAP1 PUSH0 DUP3 DUP3 SUB SWAP3 SLT DUP2 DUP4 SLT DUP2 AND SWAP2 DUP4 SGT SWAP1 ISZERO AND OR PUSH2 0x416 JUMPI SWAP1 PUSH1 0x1 SWAP2 PUSH2 0x40F DUP3 DUP14 PUSH2 0x7B8 JUMP JUMPDEST MSTORE ADD PUSH2 0x3C1 JUMP JUMPDEST DUP8 PUSH1 0x11 DUP9 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH0 REVERT JUMPDEST POP SWAP1 DUP6 SWAP2 DUP10 DUP10 DUP10 DUP9 PUSH2 0x453 DUP3 MLOAD PUSH2 0x787 JUMP JUMPDEST SWAP6 PUSH0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x47F JUMPI DUP1 PUSH2 0x46E DUP9 DUP9 PUSH1 0x1 SWAP5 DUP15 PUSH2 0xF96 JUMP JUMPDEST PUSH2 0x478 DUP3 DUP12 PUSH2 0x7B8 JUMP JUMPDEST MSTORE ADD PUSH2 0x456 JUMP JUMPDEST POP DUP8 PUSH2 0x4B3 DUP7 PUSH2 0x4AD PUSH2 0x4A8 PUSH2 0x4A2 PUSH2 0x49B DUP16 DUP15 DUP7 DUP16 SWAP3 PUSH2 0x99C JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH2 0x7F9 JUMP JUMPDEST PUSH2 0x1026 JUMP JUMPDEST SWAP6 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SWAP3 PUSH8 0xDE0B6B3A7640000 SWAP5 DUP6 DUP2 MUL SWAP6 DUP2 DUP8 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x50B JUMPI DUP4 ISZERO PUSH2 0x4E1 JUMPI POP POP MLOAD SWAP2 DIV PUSH1 0x1 SHR DUP2 MSTORE RETURN JUMPDEST PUSH1 0x12 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH0 REVERT JUMPDEST PUSH1 0x11 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH0 REVERT JUMPDEST DUP3 MLOAD DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 DUP11 SWAP2 ADD PUSH2 0x3A9 JUMP JUMPDEST DUP8 PUSH1 0x41 DUP9 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH0 REVERT JUMPDEST DUP3 CALLDATALOAD DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 DUP10 SWAP2 ADD PUSH2 0x288 JUMP JUMPDEST POP CALLVALUE PUSH2 0xB6 JUMPI PUSH1 0x80 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB6 JUMPI PUSH2 0x59A PUSH2 0x725 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 SWAP1 PUSH1 0x24 CALLDATALOAD DUP5 DUP2 GT PUSH2 0xB6 JUMPI PUSH2 0x5BC SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x6C5 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP5 DUP6 GT PUSH2 0xB6 JUMPI PUSH2 0x5D8 PUSH2 0xAF SWAP4 PUSH1 0x20 SWAP7 CALLDATASIZE SWAP2 ADD PUSH2 0x6C5 JUMP JUMPDEST SWAP1 PUSH2 0x5E1 PUSH2 0x748 JUMP JUMPDEST SWAP3 PUSH2 0x99C JUMP JUMPDEST POP CALLVALUE PUSH2 0xB6 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB6 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xB6 JUMPI PUSH2 0x61D PUSH2 0xAF SWAP2 PUSH1 0x20 SWAP5 CALLDATASIZE SWAP2 ADD PUSH2 0x6C5 JUMP JUMPDEST PUSH2 0x924 JUMP JUMPDEST POP CALLVALUE PUSH2 0xB6 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB6 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xB6 JUMPI PUSH2 0x658 PUSH2 0xAF SWAP2 PUSH1 0x20 SWAP5 CALLDATASIZE SWAP2 ADD PUSH2 0x6C5 JUMP JUMPDEST PUSH2 0x8A6 JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH1 0x1F NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x680 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x680 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xB6 JUMPI PUSH1 0x20 SWAP1 DUP3 CALLDATALOAD PUSH2 0x6DF DUP2 PUSH2 0x6AD JUMP JUMPDEST SWAP4 PUSH2 0x6ED PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x65D JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0xB6 JUMPI PUSH1 0x20 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x716 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x708 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0xB6 JUMPI JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0xB6 JUMPI JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x680 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x791 DUP3 PUSH2 0x6AD JUMP JUMPDEST PUSH2 0x79E PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x65D JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x1F NOT PUSH2 0x7AE DUP3 SWAP5 PUSH2 0x6AD JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x7CC JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 EQ PUSH2 0x825 JUMPI PUSH0 SUB SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x87C JUMPI RETURNDATASIZE SWAP1 PUSH2 0x863 DUP3 PUSH2 0x76B JUMP JUMPDEST SWAP2 PUSH2 0x871 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x65D JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT PUSH1 0x1F PUSH1 0x20 DUP1 SWAP5 DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP8 MSTORE ADD DUP7 DUP7 ADD MCOPY PUSH0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 PUSH0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x91E JUMPI PUSH0 PUSH2 0x8E0 DUP3 DUP6 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SLT DUP1 PUSH2 0x90B JUMPI JUMPDEST PUSH2 0x8F5 JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x8CC JUMP JUMPDEST DUP1 SWAP5 POP PUSH2 0x903 SWAP2 POP DUP3 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SWAP3 DUP1 PUSH2 0x8ED JUMP JUMPDEST POP DUP5 PUSH2 0x917 DUP3 DUP6 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SGT PUSH2 0x8E8 JUMP JUMPDEST POP SWAP3 POP POP JUMP JUMPDEST PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 PUSH0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x91E JUMPI PUSH0 PUSH2 0x95E DUP3 DUP6 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SGT DUP1 PUSH2 0x989 JUMPI JUMPDEST PUSH2 0x973 JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x94A JUMP JUMPDEST DUP1 SWAP5 POP PUSH2 0x981 SWAP2 POP DUP3 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SWAP3 DUP1 PUSH2 0x96B JUMP JUMPDEST POP DUP5 PUSH2 0x995 DUP3 DUP6 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SLT PUSH2 0x966 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH0 SWAP4 PUSH1 0x40 MLOAD SWAP2 PUSH32 0xCA4F280300000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH0 DUP4 PUSH1 0x24 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0xE30 JUMPI PUSH0 SWAP4 PUSH2 0xD80 JUMPI JUMPDEST POP SWAP1 SWAP2 SWAP3 SWAP5 PUSH0 SWAP1 JUMPDEST DUP8 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 GT PUSH2 0x825 JUMPI DUP3 LT ISZERO PUSH2 0xD75 JUMPI POP SWAP1 DUP6 SWAP4 SWAP3 SWAP2 PUSH2 0xA7A DUP7 PUSH2 0x924 JUMP JUMPDEST SWAP1 DUP4 DUP10 DUP7 PUSH2 0xA87 DUP11 PUSH2 0x8A6 JUMP JUMPDEST SWAP11 DUP12 SWAP6 DUP12 PUSH2 0xAA3 PUSH2 0x4A2 DUP10 PUSH2 0xA9C DUP6 DUP6 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SWAP4 PUSH2 0x7B8 JUMP JUMPDEST SGT ISZERO PUSH2 0xC44 JUMPI PUSH2 0xBC1 SWAP3 PUSH2 0xB77 DUP9 SWAP6 SWAP4 PUSH2 0xAF9 PUSH2 0xAF3 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xAEB PUSH2 0xB85 SWAP9 SWAP12 SWAP15 DUP3 PUSH2 0xAE3 DUP6 DUP12 PUSH2 0x7B8 JUMP JUMPDEST MLOAD AND SWAP9 PUSH2 0x7B8 JUMP JUMPDEST MLOAD AND SWAP8 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH2 0x1026 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 PUSH1 0x20 SWAP11 PUSH32 0x3EBC54E500000000000000000000000000000000000000000000000000000000 DUP13 DUP9 ADD MSTORE PUSH1 0x24 DUP8 ADD SWAP4 SWAP1 PUSH1 0xE0 SWAP6 SWAP3 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP6 DUP2 DUP1 SWAP5 AND DUP9 MSTORE AND PUSH1 0x20 DUP8 ADD MSTORE AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 PUSH1 0xC0 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x65D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH2 0x113B JUMP JUMPDEST DUP3 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0xB6 JUMPI PUSH2 0xBEC DUP3 PUSH0 PUSH2 0xBE5 DUP16 SWAP6 PUSH2 0xBF2 SWAP8 DUP4 SWAP7 ADD MLOAD SWAP7 PUSH2 0x7B8 JUMP JUMPDEST MSTORE DUP12 PUSH2 0x7B8 JUMP JUMPDEST MSTORE PUSH2 0xF41 JUMP JUMPDEST SWAP2 PUSH2 0xBFD DUP2 DUP12 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH0 DUP5 DUP3 ADD SWAP5 DUP6 SLT SWAP2 SLT SWAP1 DUP1 ISZERO DUP3 AND SWAP2 ISZERO AND OR PUSH2 0x825 JUMPI PUSH1 0x1 SWAP3 PUSH2 0xC21 DUP3 DUP13 PUSH2 0x7B8 JUMP JUMPDEST MSTORE PUSH2 0xC38 PUSH2 0xC31 DUP9 DUP13 DUP5 DUP10 PUSH2 0xF96 JUMP JUMPDEST SWAP2 DUP10 PUSH2 0x7B8 JUMP JUMPDEST MSTORE ADD SWAP1 SWAP2 SWAP3 SWAP4 SWAP6 PUSH2 0xA38 JUMP JUMPDEST SWAP6 SWAP4 POP POP POP POP DUP3 PUSH2 0xC55 SWAP1 DUP8 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0xC77 DUP11 DUP9 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC98 DUP12 DUP14 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH2 0xCA2 SWAP1 PUSH2 0x7F9 JUMP JUMPDEST PUSH2 0xCAB SWAP1 PUSH2 0x1026 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x175D440800000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP6 DUP7 AND PUSH1 0x44 DUP4 ADD MSTORE SWAP3 DUP6 AND PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 DUP10 AND PUSH1 0xA4 DUP5 ADD MSTORE PUSH1 0xC0 PUSH1 0xC4 DUP5 ADD MSTORE PUSH0 PUSH1 0xE4 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MSTORE SWAP2 PUSH2 0xD35 PUSH2 0x104 DUP3 PUSH2 0x65D JUMP JUMPDEST PUSH2 0xBC1 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH2 0x113B JUMP JUMPDEST SWAP6 POP POP SWAP5 POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP3 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0xD92 DUP2 DUP4 PUSH2 0x65D JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP2 DUP5 SUB SLT PUSH2 0xB6 JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xB6 JUMPI ADD SWAP2 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xB6 JUMPI DUP3 MLOAD PUSH2 0xDCB DUP2 PUSH2 0x6AD JUMP JUMPDEST SWAP4 PUSH2 0xDD9 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x65D JUMP JUMPDEST DUP2 DUP6 MSTORE DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0xB6 JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xE04 JUMPI POP POP POP POP SWAP2 PUSH0 PUSH2 0xA30 JUMP JUMPDEST DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0xB6 JUMPI DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0xDF2 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 SWAP4 PUSH32 0xDA001F7D00000000000000000000000000000000000000000000000000000000 DUP6 DUP6 ADD MSTORE DUP3 PUSH1 0xA4 DUP6 ADD SWAP2 AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x44 DUP6 ADD MSTORE DUP7 MLOAD DUP1 SWAP2 MSTORE DUP5 PUSH1 0xC4 DUP6 ADD SWAP8 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0xF2D JUMPI POP POP POP DUP4 PUSH2 0xF1C SWAP5 SWAP6 SWAP7 DUP4 PUSH2 0xEF5 SWAP4 AND PUSH1 0x64 DUP7 ADD MSTORE PUSH0 DUP6 DUP3 SUB SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC DUP4 ADD PUSH1 0x84 DUP9 ADD MSTORE MSTORE DUP1 DUP6 MSTORE ADD DUP4 PUSH2 0x65D JUMP JUMPDEST PUSH32 0x0 AND PUSH2 0x113B JUMP JUMPDEST DUP2 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0xB6 JUMPI ADD MLOAD SWAP1 JUMP JUMPDEST DUP3 MLOAD DUP10 MSTORE SWAP8 DUP7 ADD SWAP8 SWAP2 DUP7 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xEA1 JUMP JUMPDEST PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xF6B JUMPI SWAP1 JUMP JUMPDEST PUSH32 0x24775E0600000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0xFD1 DUP4 DUP3 MLOAD SWAP3 PUSH1 0x1F NOT PUSH2 0xFC5 PUSH2 0xFAF DUP7 PUSH2 0x6AD JUMP JUMPDEST SWAP6 PUSH2 0xFBD PUSH1 0x40 MLOAD SWAP8 DUP9 PUSH2 0x65D JUMP JUMPDEST DUP1 DUP8 MSTORE PUSH2 0x6AD JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP7 ADD CALLDATACOPY PUSH2 0x7B8 JUMP JUMPDEST MLOAD SWAP4 DUP5 ISZERO PUSH2 0x101D JUMPI PUSH2 0xFF9 SWAP4 PUSH2 0xFF3 PUSH0 DUP8 SGT SWAP7 DUP8 PUSH0 EQ PUSH2 0x100E JUMPI SWAP2 JUMPDEST DUP5 PUSH2 0x7B8 JUMP JUMPDEST MSTORE PUSH2 0xE3B JUMP JUMPDEST SWAP1 ISZERO PUSH2 0x1002 JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x100B SWAP1 PUSH2 0x7F9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1017 SWAP1 PUSH2 0x7F9 JUMP JUMPDEST SWAP2 PUSH2 0xFED JUMP JUMPDEST POP POP POP POP POP PUSH0 SWAP1 JUMP JUMPDEST PUSH0 DUP2 SLT PUSH2 0x1030 JUMPI SWAP1 JUMP JUMPDEST PUSH32 0xA8CE443200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x4 DUP2 MLOAD LT PUSH2 0x106B JUMPI PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH32 0xA728568900000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x106B JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST SWAP1 PUSH2 0x10DF JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x10B7 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x1132 JUMPI JUMPDEST PUSH2 0x10F0 JUMPI POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x10E8 JUMP JUMPDEST SWAP1 ADDRESS EXTCODESIZE ISZERO PUSH2 0xB6 JUMPI PUSH0 PUSH2 0x11A0 SWAP2 PUSH1 0x40 MLOAD DUP1 SWAP4 DUP2 SWAP3 PUSH32 0xA769963800000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 SWAP8 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0x881 JUMP JUMPDEST SUB DUP2 DUP4 ADDRESS GAS CALL SWAP1 DUP2 PUSH2 0x12F7 JUMPI JUMPDEST POP PUSH2 0x1299 JUMPI PUSH2 0x11BA PUSH2 0x852 JUMP JUMPDEST SWAP1 PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH2 0x1206 DUP5 PUSH2 0x105B JUMP JUMPDEST AND SUB PUSH2 0x1293 JUMPI DUP2 MLOAD SWAP2 PUSH1 0x20 PUSH1 0x3 NOT SWAP4 DUP5 DUP2 ADD PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD SWAP4 DUP3 DUP3 DUP7 ADD SWAP6 SUB ADD SLT PUSH2 0x128F JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x128B JUMPI ADD DUP3 PUSH1 0x43 DUP3 ADD SLT ISZERO PUSH2 0x128F JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH2 0x125C DUP3 PUSH2 0x76B JUMP JUMPDEST SWAP4 PUSH2 0x126A PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x65D JUMP JUMPDEST DUP3 DUP6 MSTORE PUSH1 0x44 DUP4 DUP4 ADD ADD GT PUSH2 0x128B JUMPI SWAP1 DUP1 PUSH1 0x44 PUSH1 0x20 SWAP4 ADD DUP4 DUP7 ADD MCOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP PUSH2 0x1093 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E657870656374656420737563636573730000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x680 JUMPI PUSH1 0x40 MSTORE PUSH0 SWAP1 PUSH0 PUSH2 0x11AD JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC0 PUSH17 0xEE5C5CFC54C1AEC9BBCB80FD08493778EB 0xB2 OR 0xD1 0xC4 LOG3 GASPRICE LOG2 PUSH23 0x197B359E2264736F6C634300081B003300000000000000 ","sourceMap":"302:957:38:-:0;;;;;;;;;;;;;-1:-1:-1;;302:957:38;;;;-1:-1:-1;;;;;302:957:38;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;302:957:38;;;;;;;;;;;;;;;;;;779:14:36;;803:16;;302:957:38;;;;;;;;779:14:36;302:957:38;;;;;803:16:36;302:957:38;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;302:957:38;;;;;;-1:-1:-1;302:957:38;;;;;-1:-1:-1;302:957:38"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":1829,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_7052":{"entryPoint":1864,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_array_int256_dyn":{"entryPoint":1733,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_address_contract_IERC20_contract_IERC20_uint256_address_stringliteral_c5d2":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_bytes":{"entryPoint":2177,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_and_zero_memory_array_array_int256_dyn":{"entryPoint":1927,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_int256_dyn":{"entryPoint":1709,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":1899,"id":null,"parameterSlots":1,"returnSlots":1},"extract_returndata":{"entryPoint":2130,"id":null,"parameterSlots":0,"returnSlots":1},"finalize_allocation":{"entryPoint":1629,"id":null,"parameterSlots":2,"returnSlots":0},"fun_bubbleUpRevert":{"entryPoint":4243,"id":3321,"parameterSlots":1,"returnSlots":0},"fun_callAndRevert":{"entryPoint":4411,"id":9371,"parameterSlots":2,"returnSlots":1},"fun_maxNegativeIndex":{"entryPoint":2214,"id":10117,"parameterSlots":1,"returnSlots":1},"fun_minPositiveIndex":{"entryPoint":2340,"id":10064,"parameterSlots":1,"returnSlots":1},"fun_parseSelector":{"entryPoint":4187,"id":3303,"parameterSlots":1,"returnSlots":1},"fun_queryAddLiquidityUnbalanced":{"entryPoint":3643,"id":9650,"parameterSlots":3,"returnSlots":1},"fun_queryAddLiquidityUnbalancedForTokenDeltas":{"entryPoint":3990,"id":9847,"parameterSlots":4,"returnSlots":1},"fun_toInt256":{"entryPoint":3905,"id":8764,"parameterSlots":1,"returnSlots":1},"fun_toUint256":{"entryPoint":4134,"id":7928,"parameterSlots":1,"returnSlots":1},"fun_verifyCallResultFromTarget":{"entryPoint":4258,"id":6947,"parameterSlots":3,"returnSlots":1},"fun_zeroOutDeltas":{"entryPoint":2460,"id":10011,"parameterSlots":4,"returnSlots":1},"memory_array_index_access_uint256_dyn":{"entryPoint":1976,"id":null,"parameterSlots":2,"returnSlots":1},"negate_int256":{"entryPoint":2041,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"immutableReferences":{"9456":[{"length":32,"start":2560}],"9459":[{"length":32,"start":805},{"length":32,"start":2972},{"length":32,"start":3408},{"length":32,"start":3831}]},"linkReferences":{},"object":"60406080815260049081361015610014575f80fd5b5f3560e01c806301ef39ee146106225780630d4277d1146105e75780633b064ca31461058057806348406a5414610212578063a7699638146100ba5763e3a50d821461005e575f80fd5b346100b65760806003193601126100b657610077610725565b916044359267ffffffffffffffff84116100b65761009d6100af926020953691016106c5565b6100a5610748565b9160243590610f96565b9051908152f35b5f80fd5b5090346100b657816003193601126100b6576100d4610725565b6024359067ffffffffffffffff82116100b657366023830112156100b65781830135906101008261076b565b9261010d8651948561065d565b828452602084019036602485830101116100b6575f94856020868297602484960187378301015251925af191610141610852565b928015610193579261018f9161015a82602096336110a2565b50519384937f5ab64fb80000000000000000000000000000000000000000000000000000000085528401526024830190610881565b0390fd5b50507f5ab64fb8000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000006101e08461105b565b16146101ec5750611093565b7f28f95541000000000000000000000000000000000000000000000000000000005f525ffd5b5090346100b65760606003193601126100b65761022d610725565b90602480359167ffffffffffffffff8084116100b657366023850112156100b657838201359461025c866106ad565b946102698851968761065d565b868652602096858888019160051b830101913683116100b65786899101915b83831061057057505050506044359673ffffffffffffffffffffffffffffffffffffffff80891690818a036100b6576102c28a8986610e3b565b918351927f0f710888000000000000000000000000000000000000000000000000000000008b8501528286168985015260448401526064830152608060848301525f60a483015260a4825260e082018281108682111761054557835261034a91907f00000000000000000000000000000000000000000000000000000000000000001661113b565b92835184019388818187019603126100b657888101519182116100b657019280603f850112156100b65787840151610381816106ad565b9461038e8451968761065d565b818652838a87019260051b8201019283116100b657838a9101915b83831061053557505050506103be8651610787565b975f5b8751811015610441576103dd6103d782876107b8565b51610f41565b6103ea6103d7838b6107b8565b905f8282039212818312811691831390151617610416579060019161040f828d6107b8565b52016103c1565b876011887f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b50908591898989886104538251610787565b955f5b835181101561047f578061046e88886001948e610f96565b610478828b6107b8565b5201610456565b50876104b3866104ad6104a86104a261049b8f8e868f9261099c565b80946107b8565b516107f9565b611026565b956107b8565b5192670de0b6b3a76400009485810295818704149015171561050b5783156104e157505051910460011c8152f35b6012907f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b6011907f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b82518152918101918a91016103a9565b876041887f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b8235815291810191899101610288565b50346100b65760806003193601126100b65761059a610725565b67ffffffffffffffff92906024358481116100b6576105bc90369084016106c5565b6044359485116100b6576105d86100af936020963691016106c5565b906105e1610748565b9261099c565b50346100b65760206003193601126100b65781359167ffffffffffffffff83116100b65761061d6100af916020943691016106c5565b610924565b50346100b65760206003193601126100b65781359167ffffffffffffffff83116100b6576106586100af916020943691016106c5565b6108a6565b90601f601f19910116810190811067ffffffffffffffff82111761068057604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b67ffffffffffffffff81116106805760051b60200190565b9080601f830112156100b65760209082356106df816106ad565b936106ed604051958661065d565b81855260208086019260051b8201019283116100b657602001905b828210610716575050505090565b81358152908301908301610708565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100b657565b6064359073ffffffffffffffffffffffffffffffffffffffff821682036100b657565b67ffffffffffffffff811161068057601f01601f191660200190565b90610791826106ad565b61079e604051918261065d565b828152601f196107ae82946106ad565b0190602036910137565b80518210156107cc5760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f80000000000000000000000000000000000000000000000000000000000000008114610825575f0390565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b3d1561087c573d906108638261076b565b91610871604051938461065d565b82523d5f602084013e565b606090565b90601f19601f602080948051918291828752018686015e5f8582860101520116010190565b7f800000000000000000000000000000000000000000000000000000000000000091905f805b825181101561091e575f6108e082856107b8565b51128061090b575b6108f5575b6001016108cc565b8094506109039150826107b8565b5192806108ed565b508461091782856107b8565b51136108e8565b50925050565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91905f805b825181101561091e575f61095e82856107b8565b511380610989575b610973575b60010161094a565b8094506109819150826107b8565b51928061096b565b508461099582856107b8565b5112610966565b9290935f93604051917fca4f280300000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff821660048401525f8360248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa928315610e30575f93610d80575b50909192945f905b87517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811161082557821015610d7557509085939291610a7a86610924565b90838986610a878a6108a6565b9a8b958b610aa36104a289610a9c85856107b8565b51936107b8565b1315610c4457610bc192610b77889593610af9610af38573ffffffffffffffffffffffffffffffffffffffff610aeb610b85989b9e82610ae3858b6107b8565b5116986107b8565b5116976107b8565b51611026565b60405195869460209a7f3ebc54e5000000000000000000000000000000000000000000000000000000008c88015260248701939060e095929373ffffffffffffffffffffffffffffffffffffffff8095818094168852166020870152166040850152606084015216608082015260c060a08201525f60c08201520190565b03601f19810183528261065d565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001661113b565b82818051810103126100b657610bec825f610be58f95610bf29783960151966107b8565b528b6107b8565b52610f41565b91610bfd818b6107b8565b515f848201948512911290801582169115161761082557600192610c21828c6107b8565b52610c38610c31888c8489610f96565b91896107b8565b52019091929395610a38565b95935050505082610c5590876107b8565b5173ffffffffffffffffffffffffffffffffffffffff1690610c778a886107b8565b5173ffffffffffffffffffffffffffffffffffffffff16610c988b8d6107b8565b51610ca2906107f9565b610cab90611026565b6040517f175d44080000000000000000000000000000000000000000000000000000000060208083019190915273ffffffffffffffffffffffffffffffffffffffff8a8116602484015295861660448301529285166064820152608481019190915292891660a484015260c060c48401525f60e480850191909152835291610d356101048261065d565b610bc19073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001661113b565b955050945050505090565b9092503d805f833e610d92818361065d565b81019060209081818403126100b65780519067ffffffffffffffff82116100b657019180601f840112156100b6578251610dcb816106ad565b93610dd9604051958661065d565b818552838086019260051b8201019283116100b6578301905b828210610e045750505050915f610a30565b815173ffffffffffffffffffffffffffffffffffffffff811681036100b6578152908301908301610df2565b6040513d5f823e3d90fd5b90929173ffffffffffffffffffffffffffffffffffffffff604051916020937fda001f7d00000000000000000000000000000000000000000000000000000000858501528260a48501911660248501526080604485015286518091528460c485019701905f5b818110610f2d5750505083610f1c94959683610ef5931660648601525f858203917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc8301608488015252808552018361065d565b7f00000000000000000000000000000000000000000000000000000000000000001661113b565b81818051810103126100b657015190565b825189529786019791860191600101610ea1565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111610f6b5790565b7f24775e06000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b929091610fd183825192601f19610fc5610faf866106ad565b95610fbd604051978861065d565b8087526106ad565b013660208601376107b8565b5193841561101d57610ff993610ff35f871396875f1461100e57915b846107b8565b52610e3b565b90156110025790565b61100b906107f9565b90565b611017906107f9565b91610fed565b50505050505f90565b5f81126110305790565b7fa8ce4432000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b600481511061106b576020015190565b7fa7285689000000000000000000000000000000000000000000000000000000005f5260045ffd5b80511561106b57805190602001fd5b906110df57508051156110b757805190602001fd5b7f1425ea42000000000000000000000000000000000000000000000000000000005f5260045ffd5b81511580611132575b6110f0575090565b73ffffffffffffffffffffffffffffffffffffffff907f9996b315000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b50803b156110e8565b90303b156100b6575f6111a091604051809381927fa769963800000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8597166004840152604060248401526044830190610881565b038183305af190816112f7575b50611299576111ba610852565b907f5ab64fb8000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000006112068461105b565b1603611293578151916020600319938481016004840152820193828286019503011261128f5760248101519067ffffffffffffffff821161128b57018260438201121561128f5760248101519061125c8261076b565b9361126a604051958661065d565b8285526044838301011161128b5790806044602093018386015e8301015290565b8280fd5b5080fd5b50611093565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e6578706563746564207375636365737300000000000000000000000000006044820152fd5b90915067ffffffffffffffff8111610680576040525f905f6111ad56fea2646970667358221220c070ee5c5cfc54c1aec9bbcb80fd08493778ebb217d1c4a33aa276197b359e2264736f6c634300081b0033","opcodes":"PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x14 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1EF39EE EQ PUSH2 0x622 JUMPI DUP1 PUSH4 0xD4277D1 EQ PUSH2 0x5E7 JUMPI DUP1 PUSH4 0x3B064CA3 EQ PUSH2 0x580 JUMPI DUP1 PUSH4 0x48406A54 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0xA7699638 EQ PUSH2 0xBA JUMPI PUSH4 0xE3A50D82 EQ PUSH2 0x5E JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xB6 JUMPI PUSH1 0x80 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB6 JUMPI PUSH2 0x77 PUSH2 0x725 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT PUSH2 0xB6 JUMPI PUSH2 0x9D PUSH2 0xAF SWAP3 PUSH1 0x20 SWAP6 CALLDATASIZE SWAP2 ADD PUSH2 0x6C5 JUMP JUMPDEST PUSH2 0xA5 PUSH2 0x748 JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xF96 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0xB6 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB6 JUMPI PUSH2 0xD4 PUSH2 0x725 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xB6 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0xB6 JUMPI DUP2 DUP4 ADD CALLDATALOAD SWAP1 PUSH2 0x100 DUP3 PUSH2 0x76B JUMP JUMPDEST SWAP3 PUSH2 0x10D DUP7 MLOAD SWAP5 DUP6 PUSH2 0x65D JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP1 CALLDATASIZE PUSH1 0x24 DUP6 DUP4 ADD ADD GT PUSH2 0xB6 JUMPI PUSH0 SWAP5 DUP6 PUSH1 0x20 DUP7 DUP3 SWAP8 PUSH1 0x24 DUP5 SWAP7 ADD DUP8 CALLDATACOPY DUP4 ADD ADD MSTORE MLOAD SWAP3 GAS CALL SWAP2 PUSH2 0x141 PUSH2 0x852 JUMP JUMPDEST SWAP3 DUP1 ISZERO PUSH2 0x193 JUMPI SWAP3 PUSH2 0x18F SWAP2 PUSH2 0x15A DUP3 PUSH1 0x20 SWAP7 CALLER PUSH2 0x10A2 JUMP JUMPDEST POP MLOAD SWAP4 DUP5 SWAP4 PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 DUP6 MSTORE DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x881 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP POP PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH2 0x1E0 DUP5 PUSH2 0x105B JUMP JUMPDEST AND EQ PUSH2 0x1EC JUMPI POP PUSH2 0x1093 JUMP JUMPDEST PUSH32 0x28F9554100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0xB6 JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB6 JUMPI PUSH2 0x22D PUSH2 0x725 JUMP JUMPDEST SWAP1 PUSH1 0x24 DUP1 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT PUSH2 0xB6 JUMPI CALLDATASIZE PUSH1 0x23 DUP6 ADD SLT ISZERO PUSH2 0xB6 JUMPI DUP4 DUP3 ADD CALLDATALOAD SWAP5 PUSH2 0x25C DUP7 PUSH2 0x6AD JUMP JUMPDEST SWAP5 PUSH2 0x269 DUP9 MLOAD SWAP7 DUP8 PUSH2 0x65D JUMP JUMPDEST DUP7 DUP7 MSTORE PUSH1 0x20 SWAP7 DUP6 DUP9 DUP9 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0xB6 JUMPI DUP7 DUP10 SWAP2 ADD SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x570 JUMPI POP POP POP POP PUSH1 0x44 CALLDATALOAD SWAP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND SWAP1 DUP2 DUP11 SUB PUSH2 0xB6 JUMPI PUSH2 0x2C2 DUP11 DUP10 DUP7 PUSH2 0xE3B JUMP JUMPDEST SWAP2 DUP4 MLOAD SWAP3 PUSH32 0xF71088800000000000000000000000000000000000000000000000000000000 DUP12 DUP6 ADD MSTORE DUP3 DUP7 AND DUP10 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x84 DUP4 ADD MSTORE PUSH0 PUSH1 0xA4 DUP4 ADD MSTORE PUSH1 0xA4 DUP3 MSTORE PUSH1 0xE0 DUP3 ADD DUP3 DUP2 LT DUP7 DUP3 GT OR PUSH2 0x545 JUMPI DUP4 MSTORE PUSH2 0x34A SWAP2 SWAP1 PUSH32 0x0 AND PUSH2 0x113B JUMP JUMPDEST SWAP3 DUP4 MLOAD DUP5 ADD SWAP4 DUP9 DUP2 DUP2 DUP8 ADD SWAP7 SUB SLT PUSH2 0xB6 JUMPI DUP9 DUP2 ADD MLOAD SWAP2 DUP3 GT PUSH2 0xB6 JUMPI ADD SWAP3 DUP1 PUSH1 0x3F DUP6 ADD SLT ISZERO PUSH2 0xB6 JUMPI DUP8 DUP5 ADD MLOAD PUSH2 0x381 DUP2 PUSH2 0x6AD JUMP JUMPDEST SWAP5 PUSH2 0x38E DUP5 MLOAD SWAP7 DUP8 PUSH2 0x65D JUMP JUMPDEST DUP2 DUP7 MSTORE DUP4 DUP11 DUP8 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0xB6 JUMPI DUP4 DUP11 SWAP2 ADD SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x535 JUMPI POP POP POP POP PUSH2 0x3BE DUP7 MLOAD PUSH2 0x787 JUMP JUMPDEST SWAP8 PUSH0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x441 JUMPI PUSH2 0x3DD PUSH2 0x3D7 DUP3 DUP8 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH2 0xF41 JUMP JUMPDEST PUSH2 0x3EA PUSH2 0x3D7 DUP4 DUP12 PUSH2 0x7B8 JUMP JUMPDEST SWAP1 PUSH0 DUP3 DUP3 SUB SWAP3 SLT DUP2 DUP4 SLT DUP2 AND SWAP2 DUP4 SGT SWAP1 ISZERO AND OR PUSH2 0x416 JUMPI SWAP1 PUSH1 0x1 SWAP2 PUSH2 0x40F DUP3 DUP14 PUSH2 0x7B8 JUMP JUMPDEST MSTORE ADD PUSH2 0x3C1 JUMP JUMPDEST DUP8 PUSH1 0x11 DUP9 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH0 REVERT JUMPDEST POP SWAP1 DUP6 SWAP2 DUP10 DUP10 DUP10 DUP9 PUSH2 0x453 DUP3 MLOAD PUSH2 0x787 JUMP JUMPDEST SWAP6 PUSH0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x47F JUMPI DUP1 PUSH2 0x46E DUP9 DUP9 PUSH1 0x1 SWAP5 DUP15 PUSH2 0xF96 JUMP JUMPDEST PUSH2 0x478 DUP3 DUP12 PUSH2 0x7B8 JUMP JUMPDEST MSTORE ADD PUSH2 0x456 JUMP JUMPDEST POP DUP8 PUSH2 0x4B3 DUP7 PUSH2 0x4AD PUSH2 0x4A8 PUSH2 0x4A2 PUSH2 0x49B DUP16 DUP15 DUP7 DUP16 SWAP3 PUSH2 0x99C JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH2 0x7F9 JUMP JUMPDEST PUSH2 0x1026 JUMP JUMPDEST SWAP6 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SWAP3 PUSH8 0xDE0B6B3A7640000 SWAP5 DUP6 DUP2 MUL SWAP6 DUP2 DUP8 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x50B JUMPI DUP4 ISZERO PUSH2 0x4E1 JUMPI POP POP MLOAD SWAP2 DIV PUSH1 0x1 SHR DUP2 MSTORE RETURN JUMPDEST PUSH1 0x12 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH0 REVERT JUMPDEST PUSH1 0x11 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH0 REVERT JUMPDEST DUP3 MLOAD DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 DUP11 SWAP2 ADD PUSH2 0x3A9 JUMP JUMPDEST DUP8 PUSH1 0x41 DUP9 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE MSTORE PUSH0 REVERT JUMPDEST DUP3 CALLDATALOAD DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 DUP10 SWAP2 ADD PUSH2 0x288 JUMP JUMPDEST POP CALLVALUE PUSH2 0xB6 JUMPI PUSH1 0x80 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB6 JUMPI PUSH2 0x59A PUSH2 0x725 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 SWAP1 PUSH1 0x24 CALLDATALOAD DUP5 DUP2 GT PUSH2 0xB6 JUMPI PUSH2 0x5BC SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x6C5 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP5 DUP6 GT PUSH2 0xB6 JUMPI PUSH2 0x5D8 PUSH2 0xAF SWAP4 PUSH1 0x20 SWAP7 CALLDATASIZE SWAP2 ADD PUSH2 0x6C5 JUMP JUMPDEST SWAP1 PUSH2 0x5E1 PUSH2 0x748 JUMP JUMPDEST SWAP3 PUSH2 0x99C JUMP JUMPDEST POP CALLVALUE PUSH2 0xB6 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB6 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xB6 JUMPI PUSH2 0x61D PUSH2 0xAF SWAP2 PUSH1 0x20 SWAP5 CALLDATASIZE SWAP2 ADD PUSH2 0x6C5 JUMP JUMPDEST PUSH2 0x924 JUMP JUMPDEST POP CALLVALUE PUSH2 0xB6 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xB6 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xB6 JUMPI PUSH2 0x658 PUSH2 0xAF SWAP2 PUSH1 0x20 SWAP5 CALLDATASIZE SWAP2 ADD PUSH2 0x6C5 JUMP JUMPDEST PUSH2 0x8A6 JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH1 0x1F NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x680 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x680 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xB6 JUMPI PUSH1 0x20 SWAP1 DUP3 CALLDATALOAD PUSH2 0x6DF DUP2 PUSH2 0x6AD JUMP JUMPDEST SWAP4 PUSH2 0x6ED PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x65D JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0xB6 JUMPI PUSH1 0x20 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x716 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x708 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0xB6 JUMPI JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0xB6 JUMPI JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x680 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x791 DUP3 PUSH2 0x6AD JUMP JUMPDEST PUSH2 0x79E PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x65D JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x1F NOT PUSH2 0x7AE DUP3 SWAP5 PUSH2 0x6AD JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x7CC JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 EQ PUSH2 0x825 JUMPI PUSH0 SUB SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x87C JUMPI RETURNDATASIZE SWAP1 PUSH2 0x863 DUP3 PUSH2 0x76B JUMP JUMPDEST SWAP2 PUSH2 0x871 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x65D JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT PUSH1 0x1F PUSH1 0x20 DUP1 SWAP5 DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP8 MSTORE ADD DUP7 DUP7 ADD MCOPY PUSH0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 PUSH0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x91E JUMPI PUSH0 PUSH2 0x8E0 DUP3 DUP6 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SLT DUP1 PUSH2 0x90B JUMPI JUMPDEST PUSH2 0x8F5 JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x8CC JUMP JUMPDEST DUP1 SWAP5 POP PUSH2 0x903 SWAP2 POP DUP3 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SWAP3 DUP1 PUSH2 0x8ED JUMP JUMPDEST POP DUP5 PUSH2 0x917 DUP3 DUP6 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SGT PUSH2 0x8E8 JUMP JUMPDEST POP SWAP3 POP POP JUMP JUMPDEST PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 PUSH0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x91E JUMPI PUSH0 PUSH2 0x95E DUP3 DUP6 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SGT DUP1 PUSH2 0x989 JUMPI JUMPDEST PUSH2 0x973 JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x94A JUMP JUMPDEST DUP1 SWAP5 POP PUSH2 0x981 SWAP2 POP DUP3 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SWAP3 DUP1 PUSH2 0x96B JUMP JUMPDEST POP DUP5 PUSH2 0x995 DUP3 DUP6 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SLT PUSH2 0x966 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH0 SWAP4 PUSH1 0x40 MLOAD SWAP2 PUSH32 0xCA4F280300000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH0 DUP4 PUSH1 0x24 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0xE30 JUMPI PUSH0 SWAP4 PUSH2 0xD80 JUMPI JUMPDEST POP SWAP1 SWAP2 SWAP3 SWAP5 PUSH0 SWAP1 JUMPDEST DUP8 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 GT PUSH2 0x825 JUMPI DUP3 LT ISZERO PUSH2 0xD75 JUMPI POP SWAP1 DUP6 SWAP4 SWAP3 SWAP2 PUSH2 0xA7A DUP7 PUSH2 0x924 JUMP JUMPDEST SWAP1 DUP4 DUP10 DUP7 PUSH2 0xA87 DUP11 PUSH2 0x8A6 JUMP JUMPDEST SWAP11 DUP12 SWAP6 DUP12 PUSH2 0xAA3 PUSH2 0x4A2 DUP10 PUSH2 0xA9C DUP6 DUP6 PUSH2 0x7B8 JUMP JUMPDEST MLOAD SWAP4 PUSH2 0x7B8 JUMP JUMPDEST SGT ISZERO PUSH2 0xC44 JUMPI PUSH2 0xBC1 SWAP3 PUSH2 0xB77 DUP9 SWAP6 SWAP4 PUSH2 0xAF9 PUSH2 0xAF3 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xAEB PUSH2 0xB85 SWAP9 SWAP12 SWAP15 DUP3 PUSH2 0xAE3 DUP6 DUP12 PUSH2 0x7B8 JUMP JUMPDEST MLOAD AND SWAP9 PUSH2 0x7B8 JUMP JUMPDEST MLOAD AND SWAP8 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH2 0x1026 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 PUSH1 0x20 SWAP11 PUSH32 0x3EBC54E500000000000000000000000000000000000000000000000000000000 DUP13 DUP9 ADD MSTORE PUSH1 0x24 DUP8 ADD SWAP4 SWAP1 PUSH1 0xE0 SWAP6 SWAP3 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP6 DUP2 DUP1 SWAP5 AND DUP9 MSTORE AND PUSH1 0x20 DUP8 ADD MSTORE AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 PUSH1 0xC0 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x65D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH2 0x113B JUMP JUMPDEST DUP3 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0xB6 JUMPI PUSH2 0xBEC DUP3 PUSH0 PUSH2 0xBE5 DUP16 SWAP6 PUSH2 0xBF2 SWAP8 DUP4 SWAP7 ADD MLOAD SWAP7 PUSH2 0x7B8 JUMP JUMPDEST MSTORE DUP12 PUSH2 0x7B8 JUMP JUMPDEST MSTORE PUSH2 0xF41 JUMP JUMPDEST SWAP2 PUSH2 0xBFD DUP2 DUP12 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH0 DUP5 DUP3 ADD SWAP5 DUP6 SLT SWAP2 SLT SWAP1 DUP1 ISZERO DUP3 AND SWAP2 ISZERO AND OR PUSH2 0x825 JUMPI PUSH1 0x1 SWAP3 PUSH2 0xC21 DUP3 DUP13 PUSH2 0x7B8 JUMP JUMPDEST MSTORE PUSH2 0xC38 PUSH2 0xC31 DUP9 DUP13 DUP5 DUP10 PUSH2 0xF96 JUMP JUMPDEST SWAP2 DUP10 PUSH2 0x7B8 JUMP JUMPDEST MSTORE ADD SWAP1 SWAP2 SWAP3 SWAP4 SWAP6 PUSH2 0xA38 JUMP JUMPDEST SWAP6 SWAP4 POP POP POP POP DUP3 PUSH2 0xC55 SWAP1 DUP8 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0xC77 DUP11 DUP9 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC98 DUP12 DUP14 PUSH2 0x7B8 JUMP JUMPDEST MLOAD PUSH2 0xCA2 SWAP1 PUSH2 0x7F9 JUMP JUMPDEST PUSH2 0xCAB SWAP1 PUSH2 0x1026 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x175D440800000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP6 DUP7 AND PUSH1 0x44 DUP4 ADD MSTORE SWAP3 DUP6 AND PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 DUP10 AND PUSH1 0xA4 DUP5 ADD MSTORE PUSH1 0xC0 PUSH1 0xC4 DUP5 ADD MSTORE PUSH0 PUSH1 0xE4 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MSTORE SWAP2 PUSH2 0xD35 PUSH2 0x104 DUP3 PUSH2 0x65D JUMP JUMPDEST PUSH2 0xBC1 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH2 0x113B JUMP JUMPDEST SWAP6 POP POP SWAP5 POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP3 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0xD92 DUP2 DUP4 PUSH2 0x65D JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP2 DUP5 SUB SLT PUSH2 0xB6 JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xB6 JUMPI ADD SWAP2 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xB6 JUMPI DUP3 MLOAD PUSH2 0xDCB DUP2 PUSH2 0x6AD JUMP JUMPDEST SWAP4 PUSH2 0xDD9 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x65D JUMP JUMPDEST DUP2 DUP6 MSTORE DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0xB6 JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xE04 JUMPI POP POP POP POP SWAP2 PUSH0 PUSH2 0xA30 JUMP JUMPDEST DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0xB6 JUMPI DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0xDF2 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 SWAP4 PUSH32 0xDA001F7D00000000000000000000000000000000000000000000000000000000 DUP6 DUP6 ADD MSTORE DUP3 PUSH1 0xA4 DUP6 ADD SWAP2 AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x44 DUP6 ADD MSTORE DUP7 MLOAD DUP1 SWAP2 MSTORE DUP5 PUSH1 0xC4 DUP6 ADD SWAP8 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0xF2D JUMPI POP POP POP DUP4 PUSH2 0xF1C SWAP5 SWAP6 SWAP7 DUP4 PUSH2 0xEF5 SWAP4 AND PUSH1 0x64 DUP7 ADD MSTORE PUSH0 DUP6 DUP3 SUB SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC DUP4 ADD PUSH1 0x84 DUP9 ADD MSTORE MSTORE DUP1 DUP6 MSTORE ADD DUP4 PUSH2 0x65D JUMP JUMPDEST PUSH32 0x0 AND PUSH2 0x113B JUMP JUMPDEST DUP2 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0xB6 JUMPI ADD MLOAD SWAP1 JUMP JUMPDEST DUP3 MLOAD DUP10 MSTORE SWAP8 DUP7 ADD SWAP8 SWAP2 DUP7 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xEA1 JUMP JUMPDEST PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xF6B JUMPI SWAP1 JUMP JUMPDEST PUSH32 0x24775E0600000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0xFD1 DUP4 DUP3 MLOAD SWAP3 PUSH1 0x1F NOT PUSH2 0xFC5 PUSH2 0xFAF DUP7 PUSH2 0x6AD JUMP JUMPDEST SWAP6 PUSH2 0xFBD PUSH1 0x40 MLOAD SWAP8 DUP9 PUSH2 0x65D JUMP JUMPDEST DUP1 DUP8 MSTORE PUSH2 0x6AD JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP7 ADD CALLDATACOPY PUSH2 0x7B8 JUMP JUMPDEST MLOAD SWAP4 DUP5 ISZERO PUSH2 0x101D JUMPI PUSH2 0xFF9 SWAP4 PUSH2 0xFF3 PUSH0 DUP8 SGT SWAP7 DUP8 PUSH0 EQ PUSH2 0x100E JUMPI SWAP2 JUMPDEST DUP5 PUSH2 0x7B8 JUMP JUMPDEST MSTORE PUSH2 0xE3B JUMP JUMPDEST SWAP1 ISZERO PUSH2 0x1002 JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x100B SWAP1 PUSH2 0x7F9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1017 SWAP1 PUSH2 0x7F9 JUMP JUMPDEST SWAP2 PUSH2 0xFED JUMP JUMPDEST POP POP POP POP POP PUSH0 SWAP1 JUMP JUMPDEST PUSH0 DUP2 SLT PUSH2 0x1030 JUMPI SWAP1 JUMP JUMPDEST PUSH32 0xA8CE443200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x4 DUP2 MLOAD LT PUSH2 0x106B JUMPI PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH32 0xA728568900000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x106B JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST SWAP1 PUSH2 0x10DF JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x10B7 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x1132 JUMPI JUMPDEST PUSH2 0x10F0 JUMPI POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x10E8 JUMP JUMPDEST SWAP1 ADDRESS EXTCODESIZE ISZERO PUSH2 0xB6 JUMPI PUSH0 PUSH2 0x11A0 SWAP2 PUSH1 0x40 MLOAD DUP1 SWAP4 DUP2 SWAP3 PUSH32 0xA769963800000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 SWAP8 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0x881 JUMP JUMPDEST SUB DUP2 DUP4 ADDRESS GAS CALL SWAP1 DUP2 PUSH2 0x12F7 JUMPI JUMPDEST POP PUSH2 0x1299 JUMPI PUSH2 0x11BA PUSH2 0x852 JUMP JUMPDEST SWAP1 PUSH32 0x5AB64FB800000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH2 0x1206 DUP5 PUSH2 0x105B JUMP JUMPDEST AND SUB PUSH2 0x1293 JUMPI DUP2 MLOAD SWAP2 PUSH1 0x20 PUSH1 0x3 NOT SWAP4 DUP5 DUP2 ADD PUSH1 0x4 DUP5 ADD MSTORE DUP3 ADD SWAP4 DUP3 DUP3 DUP7 ADD SWAP6 SUB ADD SLT PUSH2 0x128F JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x128B JUMPI ADD DUP3 PUSH1 0x43 DUP3 ADD SLT ISZERO PUSH2 0x128F JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH2 0x125C DUP3 PUSH2 0x76B JUMP JUMPDEST SWAP4 PUSH2 0x126A PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x65D JUMP JUMPDEST DUP3 DUP6 MSTORE PUSH1 0x44 DUP4 DUP4 ADD ADD GT PUSH2 0x128B JUMPI SWAP1 DUP1 PUSH1 0x44 PUSH1 0x20 SWAP4 ADD DUP4 DUP7 ADD MCOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP PUSH2 0x1093 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E657870656374656420737563636573730000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x680 JUMPI PUSH1 0x40 MSTORE PUSH0 SWAP1 PUSH0 PUSH2 0x11AD JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC0 PUSH17 0xEE5C5CFC54C1AEC9BBCB80FD08493778EB 0xB2 OR 0xD1 0xC4 LOG3 GASPRICE LOG2 PUSH23 0x197B359E2264736F6C634300081B003300000000000000 ","sourceMap":"302:957:38:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1084:26:35;;;302:957:38;;;;;;;;-1:-1:-1;;302:957:38;;;;;;;:::i;:::-;;;;;;;;;;;658:76;302:957;;;;;;;:::i;:::-;;;:::i;:::-;;;;658:76;;:::i;:::-;302:957;;;;;;;;;;;;;;;;;-1:-1:-1;;302:957:38;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;811:19:35;;;;;;;:::i;:::-;840:718;;;;;990:10;302:957:38;990:10:35;955:63;990:10;302:957:38;990:10:35;;955:63;:::i;:::-;;302:957:38;1084:26:35;;;;;;;;302:957:38;;;;;;:::i;:::-;1084:26:35;;;840:718;1276:33;;1344:27;302:957:38;1276:33:35;;;:::i;:::-;302:957:38;1327:44:35;1323:110;;1540:6;;:::i;1323:110::-;1398:20;302:957:38;1398:20:35;302:957:38;1398:20:35;302:957:38;;;;;;;-1:-1:-1;;302:957:38;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1265:58:36;;;;;:::i;:::-;302:957:38;;;3717:247:36;302:957:38;3717:247:36;;;;302:957:38;;;3717:247:36;;;302:957:38;;;;;;;;;;;;;;;;;;;;3717:247:36;;302:957:38;;;;;;;;;;;;;;3643:339:36;;302:957:38;3687:7:36;302:957:38;3643:339:36;:::i;:::-;302:957:38;;;3615:410:36;;;;;;;;302:957:38;;;;;3615:410:36;;;302:957:38;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1544:35:36;302:957:38;;1544:35:36;:::i;:::-;1594:13;302:957:38;1636:3:36;302:957:38;;1609:25:36;;;;;1667:36;:25;;;;:::i;:::-;302:957:38;1667:36:36;:::i;:::-;1706:28;:17;;;;:::i;:28::-;302:957:38;;;;;;;;;;;;;;;;;;;;;1655:79:36;302:957:38;1655:79:36;;;;;:::i;:::-;302:957:38;;1594:13:36;;302:957:38;;;;;;;;;;1609:25:36;;;;;;;;;1890:35;302:957:38;;1890:35:36;:::i;:::-;1940:13;302:957:38;1982:3:36;302:957:38;;1955:25:36;;;;;2016:67;;;;302:957:38;2016:67:36;;;:::i;:::-;2001:82;;;;:::i;:::-;302:957:38;;1940:13:36;;1955:25;;;2549:35;1955:25;2476:42;2477:28;2478:27;2214:47;1955:25;;;;;2214:47;:::i;:::-;2478:27;;;:::i;:::-;302:957:38;2477:28:36;:::i;:::-;2476:42;:::i;:::-;2549:35;;:::i;:::-;302:957:38;465:4:18;;;;;;;;;;;;;;;;;302:957:38;;;;;;;;;;;;;;;;;;;;;;;465:4:18;302:957:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;302:957:38;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;933:47;302:957;;;;;;;:::i;:::-;;;;:::i;:::-;933:47;;:::i;302:957::-;;;;;;-1:-1:-1;;302:957:38;;;;;;;;;;;;;;1091:24;302:957;;;;;;;:::i;:::-;1091:24;:::i;302:957::-;;;;;;-1:-1:-1;;302:957:38;;;;;;;;;;;;;;1226:24;302:957;;;;;;;:::i;:::-;1226:24;:::i;302:957::-;;;-1:-1:-1;;302:957:38;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;302:957:38;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;302:957:38;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;302:957:38;;;;:::o;:::-;;;:::o;:::-;;-1:-1:-1;;302:957:38;;;;;;;;;;;;;;;;;-1:-1:-1;302:957:38;;;;;;;;;;;:::o;8915:320:36:-;9026:16;;8915:320;302:957:38;;9090:3:36;302:957:38;;9072:16:36;;;;;302:957:38;9113:8:36;;;;:::i;:::-;302:957:38;9113:12:36;:30;;;9090:3;9109:110;;9090:3;302:957:38;;9057:13:36;;9109:110;9169:8;;;;;;;;:::i;:::-;302:957:38;;9195:9:36;9109:110;;9113:30;9129:8;;;;;;:::i;:::-;302:957:38;9129:14:36;9113:30;;9072:16;;;;;8915:320::o;8488:::-;8599:16;;8488:320;302:957:38;;8663:3:36;302:957:38;;8645:16:36;;;;;302:957:38;8686:8:36;;;;:::i;:::-;302:957:38;8686:12:36;:30;;;8663:3;8682:110;;8663:3;302:957:38;;8630:13:36;;8682:110;8742:8;;;;;;;;:::i;:::-;302:957:38;;8768:9:36;8682:110;;8686:30;8702:8;;;;;;:::i;:::-;302:957:38;8702:14:36;8686:30;;6265:2115;;;;302:957:38;;;;6588:26:36;302:957:38;6588:26:36;;302:957:38;;;6588:26:36;;;302:957:38;;6588:6:36;302:957:38;6588:6:36;302:957:38;6588:6:36;302:957:38;6588:26:36;;;;;;;302:957:38;6588:26:36;;;6265:2115;6630:13;;;;;302:957:38;6625:1710:36;6668:3;302:957:38;;;;;;;;;;6645:21:36;;;;;6786:28;;;;;;;;;:::i;:::-;6852;;;;;;;:::i;:::-;6895:23;;;7009:32;7044:33;7045:32;7009;;;;;:::i;:::-;302:957:38;7045:32:36;;:::i;7044:33::-;-1:-1:-1;7045:32:36;;;4287:397;7097:39;4361:305;7097:39;;;7402:35;:23;7097:39;302:957:38;7352:28:36;4361:305;7097:39;7154:40;7303:27;;;;;;:::i;:::-;302:957:38;;7352:28:36;;:::i;:::-;302:957:38;;7402:23:36;;:::i;:::-;302:957:38;7402:35:36;:::i;:::-;302:957:38;;;;;;4361:305:36;302:957:38;4361:305:36;;;;302:957:38;4361:305:36;;302:957:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4361:305:36;;-1:-1:-1;;4361:305:36;;;;;;:::i;:::-;302:957:38;4331:7:36;302:957:38;4287:397:36;:::i;:::-;302:957:38;;;;4259:466:36;;302:957:38;;;;8025:30:36;4259:466;302:957:38;7984:27:36;4259:466;;8097:23;4259:466;;;;302:957:38;7005:922:36;7984:27;:::i;:::-;302:957:38;8025:30:36;;:::i;:::-;302:957:38;8097:23:36;:::i;:::-;8069:51;;;;;:::i;:::-;302:957:38;;;;;;;;;;;;;;;;;;;;;6665:1:36;8069:51;;;;;:::i;:::-;302:957:38;8134:190:36;8164:160;;;;;;:::i;:::-;8134:190;;;:::i;:::-;302:957:38;;6630:13:36;;;;;;;7005:922;7522:39;;;;;;7579:40;7729:28;;;;:::i;:::-;302:957:38;;;7779:27:36;;;;;:::i;:::-;302:957:38;;;7830:23:36;;;;:::i;:::-;302:957:38;7829:24:36;;;:::i;:::-;7828:38;;;:::i;:::-;302:957:38;;;;5063:307:36;;;;;;;302:957:38;;;;;5063:307:36;;302:957:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;302:957:38;;;;;;;;5063:307:36;;302:957:38;5063:307:36;302:957:38;;5063:307:36;:::i;:::-;4989:399;;302:957:38;5033:7:36;302:957:38;4989:399:36;:::i;6645:21::-;;;;;;;;;6265:2115;:::o;6588:26::-;;;;;;302:957:38;6588:26:36;;;;;;:::i;:::-;;;302:957:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;6588:26:36;;;;;;;;302:957:38;;;;;;;;;;;;;;;;;;;;6588:26:36;302:957:38;;;;;;;;;2820:599:36;;;;302:957:38;;;3109:244:36;;;302:957:38;3109:244:36;;;;302:957:38;;;;;;3109:244:36;;;302:957:38;;;;;;;;;;;;;;;;;;-1:-1:-1;302:957:38;;;;;;;;;;3035:336:36;302:957:38;;;;3109:244:36;302:957:38;;;;;;-1:-1:-1;302:957:38;;;;;;;;;;;;3109:244:36;;;;;;:::i;:::-;3079:7;302:957:38;3035:336:36;:::i;:::-;302:957:38;;;;3007:405:36;;302:957:38;;;;3007:405:36;302:957:38;2820:599:36;:::o;302:957:38:-;;;;;;;;;;;;;;;;;34375:314:33;34568:16;34552:33;;34548:105;;34375:314;:::o;34548:105::-;34608:34;;;;302:957:38;;34608:34:33;;5657:602:36;;;;5950:18;302:957:38;;;;-1:-1:-1;;302:957:38;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;5950:18:36;:::i;:::-;302:957:38;5983:10:36;;;5979:49;;6141:64;6081:9;6038:70;302:957:38;6081:9:36;;:26;;;;;;;;6038:70;;:::i;:::-;302:957:38;6141:64:36;:::i;:::-;6224:28;;;;5657:602;:::o;6224:28::-;6245:7;;;:::i;:::-;5657:602;:::o;6081:26::-;6101:6;;;:::i;:::-;6081:26;;;5979:49;6009:8;;;;;302:957:38;6009:8:36;:::o;17166:193:33:-;17253:1;17245:9;;17241:81;;17166:193;:::o;17241:81::-;17277:34;17253:1;17277:34;;302:957:38;;17253:1:33;17277:34;1336:351:17;1463:1;302:957:38;;1443:21:17;1439:82;;1530:151;;;1336:351;:::o;1439:82::-;1487:23;;;1463:1;1487:23;;1741:504;302:957:38;;1881:21:17;:17;;2008:160;;;;;;4625:582:31;;4797:8;;-1:-1:-1;302:957:38;;5874:21:31;:17;;6046:142;;;;;;5870:383;6225:17;5894:1;6225:17;;5894:1;6225:17;4793:408;302:957:38;;5045:22:31;:49;;;4793:408;5041:119;;5173:17;;:::o;5041:119::-;302:957:38;5121:24:31;;5066:1;5121:24;302:957:38;5121:24:31;302:957:38;;5066:1:31;5121:24;5045:49;5071:18;;;:23;5045:49;;303:324:35;;430:4;408:60;;;;;302:957:38;;;;408:60:35;;;;302:957:38;408:60:35;;302:957:38;408:60:35;302:957:38;;408:60:35;;;302:957:38;;;;;;;;;;;:::i;:::-;408:60:35;430:4;;;408:60;;;;;;303:324;-1:-1:-1;404:217:35;;523:98;;:::i;:::-;720:36:17;787:15;302:957:38;720:36:17;;;:::i;:::-;302:957:38;770:32:17;766:185;;302:957:38;;1013:179:17;1209:30;-1:-1:-1;;1013:179:17;;;;408:60:35;1013:179:17;;;1209:30;;;;;;;302:957:38;;;;;;;1209:30:17;;302:957:38;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;1209:30:17;302:957:38;;;;;;;;;;565:45:35;:::o;302:957:38:-;;;;;;;;766:185:17;930:9;;:::i;404:217:35:-;302:957:38;;;483:28:35;;;302:957:38;408:60:35;483:28;;302:957:38;;;;;;;;;;;483:28:35;408:60;302:957:38;;;;;;;;;;408:60:35;;;;"},"methodIdentifiers":{"calculateAddLiquidityUnbalancedPriceImpact(address,uint256[],address)":"48406a54","callAndRevertHook(address,bytes)":"a7699638","maxNegativeIndex(int256[])":"01ef39ee","minPositiveIndex(int256[])":"0d4277d1","queryAddLiquidityUnbalancedForTokenDeltas(address,uint256,int256[],address)":"e3a50d82","zeroOutDeltas(address,int256[],int256[],address)":"3b064ca3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract IRouter\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorSelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteResultSpoofed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"Result\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"calculateAddLiquidityUnbalancedPriceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpact\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callAndRevertHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"array\",\"type\":\"int256[]\"}],\"name\":\"maxNegativeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"array\",\"type\":\"int256[]\"}],\"name\":\"minPositiveIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"queryAddLiquidityUnbalancedForTokenDeltas\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"deltaBPT\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"deltaBPTs\",\"type\":\"int256[]\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"zeroOutDeltas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"Result(bytes)\":[{\"params\":{\"result\":\"The result of the query operation\"}}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"ErrorSelectorNotFound()\":[{\"notice\":\"Handle the \\\"reverted without a reason\\\" case (i.e., no return data).\"}],\"Result(bytes)\":[{\"notice\":\"On success of the primary operation in a `quoteAndRevert`, this error is thrown with the return data.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/PriceImpactHelperMock.sol\":\"PriceImpactHelperMock\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0x743734d3d3503d705f0a778c4b0dd61fdb067e89a07481ddbead0654e6808318\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6198f27b2d01f346fdd3d1302e9a6ddd543d2f06afd675d84919c2242bd26d8d\",\"dweb:/ipfs/QmYntQih5MwxxdGnVu2BPVLeqFuJEH761cByAesjwE6JKT\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IRouter.sol\":{\"keccak256\":\"0x39a5cd3ee5c0bab644f068ad8ba617a0cf71a91610693b1c93c9536464151ee3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6a5f61af5cda44d8ef95e610c0b418f2cfb984e9c47a58fb1fa8c8bc949def75\",\"dweb:/ipfs/Qmby1D2D5Ym44jgBTTM8eTGnmNGCCKrb8ujpkhVPE6C6Cr\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@balancer-labs/v3-solidity-utils/contracts/helpers/RevertCodec.sol\":{\"keccak256\":\"0xb4ee9e1543d36bdf9eeb4a9d5ab41170723239a1e27a2272f2e31de4765c019b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3b70dd5e4fa496c2c1efb6bd20368587ba3c9c0d0afac9dc3631a29ff2628f99\",\"dweb:/ipfs/QmQigXUkpDuVK5VSX67RABrAC9bashPcHMasgPRNJb4k8Z\"]},\"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol\":{\"keccak256\":\"0x84bcae7004be7e91a88e76a3ac317490bc6845754a12cee88fcab76b1c5de37b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://15f903480fec5ae8042baf458e2246693b0b4a22687e65c2ed3afdf6993bff82\",\"dweb:/ipfs/QmcxsVeSbQ4qYnEZFoeFmiqaoV3rAx1oNhACCZCMZ1E6uf\"]},\"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol\":{\"keccak256\":\"0x70449e2b423b9850e39adddd7301205aa8b6e9e4ae788fd44d0968cac018eb2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce2174a3629b45dca032f9cf53df35dea240626913b8882a9e2da21610b02796\",\"dweb:/ipfs/Qmf8E4DePnZXjqb3V4A38gSobjgRK6VqavqPByuXvJxtBG\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c\",\"dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj\"]},\"contracts/CallAndRevert.sol\":{\"keccak256\":\"0xe0f09e833265592b398c7607db658e3541b800f66c9536ee129ae6863e4185f2\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://bc7dd31dd95f738debb5ca8c8b80e90384c1d8b72dc70e02dd7ae22e7c77f337\",\"dweb:/ipfs/QmNaJXyazNRD1fbqs6QJSwB3VWKu3ZjHqecMqKg57UeMuS\"]},\"contracts/PriceImpactHelper.sol\":{\"keccak256\":\"0xc7a235e866cb76517b3e21a399fffcaab048f41c370e38123e52f9369d071b38\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b71a034acf450b2b356a80e5f7cbe62137ba4702891a8e174b558d91180ade8a\",\"dweb:/ipfs/QmU5hLqocw2S1vXgmwd756CVwbG3yySQJe1ipbAJjRbPCU\"]},\"contracts/test/PriceImpactHelperMock.sol\":{\"keccak256\":\"0xe26253f71789842fffe3d5e48f5fb13a7aed480f8027c1084a0601b02d9fb3f9\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://70f67c49efb5abf6e726635b6e797a7b4e335d4cd9650affce44c19305511566\",\"dweb:/ipfs/QmU2XCzDpMjBrhdaQJ6aAvqPJ2xQbomTpJGEmG6BpDAKrE\"]}},\"version\":1}"}},"contracts/test/ProtocolFeeBurnerMock.sol":{"ProtocolFeeBurnerMock":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"feeToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"feeTokenAmount","type":"uint256"},{"indexed":true,"internalType":"contract IERC20","name":"targetToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"targetTokenAmount","type":"uint256"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"}],"name":"ProtocolFeeBurned","type":"event"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"feeToken","type":"address"},{"internalType":"uint256","name":"feeTokenAmount","type":"uint256"},{"internalType":"contract IERC20","name":"targetToken","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608080604052346015576101da908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c6354caad0014610027575f80fd5b346101a05760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a05760043573ffffffffffffffffffffffffffffffffffffffff908181168091036101a057602435918083168093036101a05760443590606435948186168096036101a0576084359182168092036101a057853b156101a0577f40c10f190000000000000000000000000000000000000000000000000000000081528160048201528260248201525f81604481838a5af180156101955761012b575b507f77a7b034dbb42c9087518e95b49c02a17704a521555779f3f9d7f1b26df5ce8d916060916040519180835260208301526040820152a480f35b90955067ffffffffffffffff8111610168576040525f947f77a7b034dbb42c9087518e95b49c02a17704a521555779f3f9d7f1b26df5ce8d6100f0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040513d5f823e3d90fd5b5f80fdfea26469706673582212208009a9e620087fee785931b17e5a3ac8b1fbf62013d77593b39767dec8fd9c2a64736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x15 JUMPI PUSH2 0x1DA SWAP1 DUP2 PUSH2 0x1A DUP3 CODECOPY RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP1 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x54CAAD00 EQ PUSH2 0x27 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1A0 JUMPI PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x1A0 JUMPI PUSH1 0x4 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x1A0 JUMPI PUSH1 0x24 CALLDATALOAD SWAP2 DUP1 DUP4 AND DUP1 SWAP4 SUB PUSH2 0x1A0 JUMPI PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD SWAP5 DUP2 DUP7 AND DUP1 SWAP7 SUB PUSH2 0x1A0 JUMPI PUSH1 0x84 CALLDATALOAD SWAP2 DUP3 AND DUP1 SWAP3 SUB PUSH2 0x1A0 JUMPI DUP6 EXTCODESIZE ISZERO PUSH2 0x1A0 JUMPI PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 PUSH1 0x4 DUP3 ADD MSTORE DUP3 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0x44 DUP2 DUP4 DUP11 GAS CALL DUP1 ISZERO PUSH2 0x195 JUMPI PUSH2 0x12B JUMPI JUMPDEST POP PUSH32 0x77A7B034DBB42C9087518E95B49C02A17704A521555779F3F9D7F1B26DF5CE8D SWAP2 PUSH1 0x60 SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE LOG4 DUP1 RETURN JUMPDEST SWAP1 SWAP6 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x168 JUMPI PUSH1 0x40 MSTORE PUSH0 SWAP5 PUSH32 0x77A7B034DBB42C9087518E95B49C02A17704A521555779F3F9D7F1B26DF5CE8D PUSH2 0xF0 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 MULMOD 0xA9 0xE6 KECCAK256 ADDMOD PUSH32 0xEE785931B17E5A3AC8B1FBF62013D77593B39767DEC8FD9C2A64736F6C634300 ADDMOD SHL STOP CALLER ","sourceMap":"366:618:39:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080806040526004361015610012575f80fd5b5f905f3560e01c6354caad0014610027575f80fd5b346101a05760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a05760043573ffffffffffffffffffffffffffffffffffffffff908181168091036101a057602435918083168093036101a05760443590606435948186168096036101a0576084359182168092036101a057853b156101a0577f40c10f190000000000000000000000000000000000000000000000000000000081528160048201528260248201525f81604481838a5af180156101955761012b575b507f77a7b034dbb42c9087518e95b49c02a17704a521555779f3f9d7f1b26df5ce8d916060916040519180835260208301526040820152a480f35b90955067ffffffffffffffff8111610168576040525f947f77a7b034dbb42c9087518e95b49c02a17704a521555779f3f9d7f1b26df5ce8d6100f0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040513d5f823e3d90fd5b5f80fdfea26469706673582212208009a9e620087fee785931b17e5a3ac8b1fbf62013d77593b39767dec8fd9c2a64736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP1 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x54CAAD00 EQ PUSH2 0x27 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1A0 JUMPI PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x1A0 JUMPI PUSH1 0x4 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x1A0 JUMPI PUSH1 0x24 CALLDATALOAD SWAP2 DUP1 DUP4 AND DUP1 SWAP4 SUB PUSH2 0x1A0 JUMPI PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD SWAP5 DUP2 DUP7 AND DUP1 SWAP7 SUB PUSH2 0x1A0 JUMPI PUSH1 0x84 CALLDATALOAD SWAP2 DUP3 AND DUP1 SWAP3 SUB PUSH2 0x1A0 JUMPI DUP6 EXTCODESIZE ISZERO PUSH2 0x1A0 JUMPI PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 PUSH1 0x4 DUP3 ADD MSTORE DUP3 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0x44 DUP2 DUP4 DUP11 GAS CALL DUP1 ISZERO PUSH2 0x195 JUMPI PUSH2 0x12B JUMPI JUMPDEST POP PUSH32 0x77A7B034DBB42C9087518E95B49C02A17704A521555779F3F9D7F1B26DF5CE8D SWAP2 PUSH1 0x60 SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE LOG4 DUP1 RETURN JUMPDEST SWAP1 SWAP6 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x168 JUMPI PUSH1 0x40 MSTORE PUSH0 SWAP5 PUSH32 0x77A7B034DBB42C9087518E95B49C02A17704A521555779F3F9D7F1B26DF5CE8D PUSH2 0xF0 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 MULMOD 0xA9 0xE6 KECCAK256 ADDMOD PUSH32 0xEE785931B17E5A3AC8B1FBF62013D77593B39767DEC8FD9C2A64736F6C634300 ADDMOD SHL STOP CALLER ","sourceMap":"366:618:39:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;721:68;;;;;366:618;721:68;;;366:618;721:68;;366:618;;;;;;;721:68;366:618;721:68;;;;;;;;;;;366:618;;886:89;366:618;;;;;;;;;;;;;;;;;886:89;366:618;;721:68;366:618;;;;;;;;;;;;886:89;721:68;;366:618;;;;;;;;;;721:68;366:618;;;;;;;;;721:68;366:618;;"},"methodIdentifiers":{"burn(address,address,uint256,address,address)":"54caad00"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ProtocolFeeBurned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,address,uint256,address,address)\":{\"details\":\"Assumes the sweeper has transferred the tokens to the burner prior to the call.\",\"params\":{\"feeToken\":\"The feeToken collected from the pool\",\"feeTokenAmount\":\"The number of fee tokens collected\",\"pool\":\"The pool the fees came from (only used for documentation in the event)\",\"recipient\":\"The recipient of the swap proceeds\",\"targetToken\":\"The desired target token (token out of the swap)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,address,uint256,address,address)\":{\"notice\":\"Swap an exact amount of `feeToken` for the `targetToken`, and send proceeds to the `recipient`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/ProtocolFeeBurnerMock.sol\":\"ProtocolFeeBurnerMock\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/standalone-utils/IProtocolFeeBurner.sol\":{\"keccak256\":\"0xf86625ec7c352729de98584baef50c1561eddfb074e7c0ebf95819749dc21030\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://cda5545fbfbb61fdbaca25b25a9c1e773842096de65692fb2d8f62660d3ac7c6\",\"dweb:/ipfs/QmU36BdVf3CS7JYnXdew3kPjcoEysLKwiGofXvHcDkdLcr\"]},\"@balancer-labs/v3-solidity-utils/contracts/test/ERC20TestToken.sol\":{\"keccak256\":\"0x6c1d91dd0f44221f140ab22e9e981ef1f9028018428f0c9cb41577e757e1b4b8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c42dce6530450a6476970b6bd0aa8feec8b12c5b3837702f94395ab3157cede7\",\"dweb:/ipfs/QmYb3V9wcMTjdN1XwNdQM4ZHG9EcFvKLZNKDFRyraBW5DQ\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]},\"contracts/test/ProtocolFeeBurnerMock.sol\":{\"keccak256\":\"0x5a0f5bb96c661f31f99dcdc917545451627b4a67f5a5b896123a3dcf4a50f348\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f2218c5cd8de654ee21376cf922fc8eccba0a3232609c55a56491518ec2ecf05\",\"dweb:/ipfs/QmNrhvDuKmeMNMyCGhXNLvUUxfPhvitHhNygda17TJCbNe\"]}},\"version\":1}"}}}}}