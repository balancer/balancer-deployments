{"id":"08739dd7b292ebd02f7cd039f4e6b5a6","_format":"hh-sol-build-info-1","solcVersion":"0.8.27","solcLongVersion":"0.8.27+commit.40a35a09","input":{"language":"Solidity","sources":{"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n/// @notice Simple interface for permissioned calling of external functions.\ninterface IAuthentication {\n    /// @notice The sender does not have permission to call a function.\n    error SenderNotAllowed();\n\n    /**\n     * @notice Returns the action identifier associated with the external function described by `selector`.\n     * @param selector The 4-byte selector of the permissioned function\n     * @return actionId The computed actionId\n     */\n    function getActionId(bytes4 selector) external view returns (bytes32 actionId);\n}\n"},"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n/// @notice General interface for token exchange rates.\ninterface IRateProvider {\n    /**\n     * @notice An 18 decimal fixed point number representing the exchange rate of one token to another related token.\n     * @dev The meaning of this rate depends on the context. Note that there may be an error associated with a token\n     * rate, and the caller might require a certain rounding direction to ensure correctness. This (legacy) interface\n     * does not take a rounding direction or return an error, so great care must be taken when interpreting and using\n     * rates in downstream computations.\n     *\n     * @return rate The current token rate\n     */\n    function getRate() external view returns (uint256 rate);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n/// @notice Interface to the Vault's permission system.\ninterface IAuthorizer {\n    /**\n     * @notice Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n     * @param actionId Identifier for the action to be performed\n     * @param account Account trying to perform the action\n     * @param where Target contract for the action\n     * @return success True if the action is permitted\n     */\n    function canPerform(bytes32 actionId, address account, address where) external view returns (bool success);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n// Explicitly import VaultTypes structs because we expect this interface to be heavily used by external developers.\n// Internally, when this list gets too long, we usually just do a simple import to keep things tidy.\nimport {\n    TokenConfig,\n    LiquidityManagement,\n    PoolSwapParams,\n    AfterSwapParams,\n    HookFlags,\n    AddLiquidityKind,\n    RemoveLiquidityKind,\n    SwapKind\n} from \"./VaultTypes.sol\";\n\n/**\n * @notice Interface for pool hooks.\n * @dev Hooks are functions invoked by the Vault at specific points in the flow of each operation. This guarantees that\n * they are called in the correct order, and with the correct arguments. To maintain this security, these functions\n * should only be called by the Vault. The recommended way to do this is to derive the hook contract from `BaseHooks`,\n * then use the `onlyVault` modifier from `VaultGuard`. (See the examples in /pool-hooks.)\n */\ninterface IHooks {\n    /***************************************************************************\n                                   Register\n    ***************************************************************************/\n\n    /**\n     * @notice Hook executed when a pool is registered with a non-zero hooks contract.\n     * @dev Returns true if registration was successful, and false to revert the pool registration.\n     * Make sure this function is properly implemented (e.g. check the factory, and check that the\n     * given pool is from the factory). The Vault address will be msg.sender.\n     *\n     * @param factory Address of the pool factory (contract deploying the pool)\n     * @param pool Address of the pool\n     * @param tokenConfig An array of descriptors for the tokens the pool will manage\n     * @param liquidityManagement Liquidity management flags indicating which functions are enabled\n     * @return success True if the hook allowed the registration, false otherwise\n     */\n    function onRegister(\n        address factory,\n        address pool,\n        TokenConfig[] memory tokenConfig,\n        LiquidityManagement calldata liquidityManagement\n    ) external returns (bool success);\n\n    /**\n     * @notice Return the set of hooks implemented by the contract.\n     * @dev The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined\n     * (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero).\n     * `onRegister` is the only \"mandatory\" hook.\n     *\n     * @return hookFlags Flags indicating which hooks the contract supports\n     */\n    function getHookFlags() external view returns (HookFlags memory hookFlags);\n\n    /***************************************************************************\n                                   Initialize\n    ***************************************************************************/\n\n    /**\n     * @notice Hook executed before pool initialization.\n     * @dev Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param exactAmountsIn Exact amounts of input tokens\n     * @param userData Optional, arbitrary data sent with the encoded request\n     * @return success True if the pool wishes to proceed with initialization\n     */\n    function onBeforeInitialize(uint256[] memory exactAmountsIn, bytes memory userData) external returns (bool success);\n\n    /**\n     * @notice Hook to be executed after pool initialization.\n     * @dev Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param exactAmountsIn Exact amounts of input tokens\n     * @param bptAmountOut Amount of pool tokens minted during initialization\n     * @param userData Optional, arbitrary data sent with the encoded request\n     * @return success True if the pool accepts the initialization results\n     */\n    function onAfterInitialize(\n        uint256[] memory exactAmountsIn,\n        uint256 bptAmountOut,\n        bytes memory userData\n    ) external returns (bool success);\n\n    /***************************************************************************\n                                   Add Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Hook to be executed before adding liquidity.\n     * @dev Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n     * @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n     * @param kind The add liquidity operation type (e.g., proportional, custom)\n     * @param maxAmountsInScaled18 Maximum amounts of input tokens\n     * @param minBptAmountOut Minimum amount of output pool tokens\n     * @param balancesScaled18 Current pool balances, sorted in token registration order\n     * @param userData Optional, arbitrary data sent with the encoded request\n     * @return success True if the pool wishes to proceed with settlement\n     */\n    function onBeforeAddLiquidity(\n        address router,\n        address pool,\n        AddLiquidityKind kind,\n        uint256[] memory maxAmountsInScaled18,\n        uint256 minBptAmountOut,\n        uint256[] memory balancesScaled18,\n        bytes memory userData\n    ) external returns (bool success);\n\n    /**\n     * @notice Hook to be executed after adding liquidity.\n     * @dev Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore\n     * `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n     * `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n     * @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n     * @param kind The add liquidity operation type (e.g., proportional, custom)\n     * @param amountsInScaled18 Actual amounts of tokens added, sorted in token registration order\n     * @param amountsInRaw Actual amounts of tokens added, sorted in token registration order\n     * @param bptAmountOut Amount of pool tokens minted\n     * @param balancesScaled18 Current pool balances, sorted in token registration order\n     * @param userData Additional (optional) data provided by the user\n     * @return success True if the pool wishes to proceed with settlement\n     * @return hookAdjustedAmountsInRaw New amountsInRaw, potentially modified by the hook\n     */\n    function onAfterAddLiquidity(\n        address router,\n        address pool,\n        AddLiquidityKind kind,\n        uint256[] memory amountsInScaled18,\n        uint256[] memory amountsInRaw,\n        uint256 bptAmountOut,\n        uint256[] memory balancesScaled18,\n        bytes memory userData\n    ) external returns (bool success, uint256[] memory hookAdjustedAmountsInRaw);\n\n    /***************************************************************************\n                                 Remove Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Hook to be executed before removing liquidity.\n     * @dev Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n     * @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n     * @param kind The type of remove liquidity operation (e.g., proportional, custom)\n     * @param maxBptAmountIn Maximum amount of input pool tokens\n     * @param minAmountsOutScaled18 Minimum output amounts, sorted in token registration order\n     * @param balancesScaled18 Current pool balances, sorted in token registration order\n     * @param userData Optional, arbitrary data sent with the encoded request\n     * @return success True if the pool wishes to proceed with settlement\n     */\n    function onBeforeRemoveLiquidity(\n        address router,\n        address pool,\n        RemoveLiquidityKind kind,\n        uint256 maxBptAmountIn,\n        uint256[] memory minAmountsOutScaled18,\n        uint256[] memory balancesScaled18,\n        bytes memory userData\n    ) external returns (bool success);\n\n    /**\n     * @notice Hook to be executed after removing liquidity.\n     * @dev Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore\n     * `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n     * `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n     * @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n     * @param kind The type of remove liquidity operation (e.g., proportional, custom)\n     * @param bptAmountIn Amount of pool tokens to burn\n     * @param amountsOutScaled18 Scaled amount of tokens to receive, sorted in token registration order\n     * @param amountsOutRaw Actual amount of tokens to receive, sorted in token registration order\n     * @param balancesScaled18 Current pool balances, sorted in token registration order\n     * @param userData Additional (optional) data provided by the user\n     * @return success True if the pool wishes to proceed with settlement\n     * @return hookAdjustedAmountsOutRaw New amountsOutRaw, potentially modified by the hook\n     */\n    function onAfterRemoveLiquidity(\n        address router,\n        address pool,\n        RemoveLiquidityKind kind,\n        uint256 bptAmountIn,\n        uint256[] memory amountsOutScaled18,\n        uint256[] memory amountsOutRaw,\n        uint256[] memory balancesScaled18,\n        bytes memory userData\n    ) external returns (bool success, uint256[] memory hookAdjustedAmountsOutRaw);\n\n    /***************************************************************************\n                                    Swap\n    ***************************************************************************/\n\n    /**\n     * @notice Called before a swap to give the Pool an opportunity to perform actions.\n     * @dev Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the\n     * `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param params Swap parameters (see PoolSwapParams for struct definition)\n     * @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n     * @return success True if the pool wishes to proceed with settlement\n     */\n    function onBeforeSwap(PoolSwapParams calldata params, address pool) external returns (bool success);\n\n    /**\n     * @notice Called after a swap to perform further actions once the balances have been updated by the swap.\n     * @dev Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore\n     * `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should\n     * use the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param params Swap parameters (see above for struct definition)\n     * @return success True if the pool wishes to proceed with settlement\n     * @return hookAdjustedAmountCalculatedRaw New amount calculated, potentially modified by the hook\n     */\n    function onAfterSwap(\n        AfterSwapParams calldata params\n    ) external returns (bool success, uint256 hookAdjustedAmountCalculatedRaw);\n\n    /**\n     * @notice Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees.\n     * @dev Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param params Swap parameters (see PoolSwapParams for struct definition)\n     * @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n     * @param staticSwapFeePercentage 18-decimal FP value of the static swap fee percentage, for reference\n     * @return success True if the pool wishes to proceed with settlement\n     * @return dynamicSwapFeePercentage Value of the swap fee percentage, as an 18-decimal FP value\n     */\n    function onComputeDynamicSwapFeePercentage(\n        PoolSwapParams calldata params,\n        address pool,\n        uint256 staticSwapFeePercentage\n    ) external view returns (bool success, uint256 dynamicSwapFeePercentage);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IVault } from \"./IVault.sol\";\n\n/// @notice Contract that handles protocol and pool creator fees for the Vault.\ninterface IProtocolFeeController {\n    /**\n     * @notice Emitted when the protocol swap fee percentage is updated.\n     * @param swapFeePercentage The updated protocol swap fee percentage\n     */\n    event GlobalProtocolSwapFeePercentageChanged(uint256 swapFeePercentage);\n\n    /**\n     * @notice Emitted when the protocol yield fee percentage is updated.\n     * @param yieldFeePercentage The updated protocol yield fee percentage\n     */\n    event GlobalProtocolYieldFeePercentageChanged(uint256 yieldFeePercentage);\n\n    /**\n     * @notice Emitted when the protocol swap fee percentage is updated for a specific pool.\n     * @param pool The pool whose protocol swap fee will be changed\n     * @param swapFeePercentage The updated protocol swap fee percentage\n     */\n    event ProtocolSwapFeePercentageChanged(address indexed pool, uint256 swapFeePercentage);\n\n    /**\n     * @notice Emitted when the protocol yield fee percentage is updated for a specific pool.\n     * @param pool The pool whose protocol yield fee will be changed\n     * @param yieldFeePercentage The updated protocol yield fee percentage\n     */\n    event ProtocolYieldFeePercentageChanged(address indexed pool, uint256 yieldFeePercentage);\n\n    /**\n     * @notice Emitted when the pool creator swap fee percentage of a pool is updated.\n     * @param pool The pool whose pool creator swap fee will be changed\n     * @param poolCreatorSwapFeePercentage The new pool creator swap fee percentage for the pool\n     */\n    event PoolCreatorSwapFeePercentageChanged(address indexed pool, uint256 poolCreatorSwapFeePercentage);\n\n    /**\n     * @notice Emitted when the pool creator yield fee percentage of a pool is updated.\n     * @param pool The pool whose pool creator yield fee will be changed\n     * @param poolCreatorYieldFeePercentage The new pool creator yield fee percentage for the pool\n     */\n    event PoolCreatorYieldFeePercentageChanged(address indexed pool, uint256 poolCreatorYieldFeePercentage);\n\n    /**\n     * @notice Logs the collection of protocol swap fees in a specific token and amount.\n     * @dev Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs\n     * in the Vault, but fee collection happens in the ProtocolFeeController, the swap fees reported here may encompass\n     * multiple operations.\n     *\n     * @param pool The pool on which the swap fee was charged\n     * @param token The token in which the swap fee was charged\n     * @param amount The amount of the token collected in fees\n     */\n    event ProtocolSwapFeeCollected(address indexed pool, IERC20 indexed token, uint256 amount);\n\n    /**\n     * @notice Logs the collection of protocol yield fees in a specific token and amount.\n     * @dev Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs\n     * in the Vault, but fee collection happens in the ProtocolFeeController, the yield fees reported here may encompass\n     * multiple operations.\n     *\n     * @param pool The pool on which the yield fee was charged\n     * @param token The token in which the yield fee was charged\n     * @param amount The amount of the token collected in fees\n     */\n    event ProtocolYieldFeeCollected(address indexed pool, IERC20 indexed token, uint256 amount);\n\n    /**\n     * @notice Logs the withdrawal of protocol fees in a specific token and amount.\n     * @param pool The pool from which protocol fees are being withdrawn\n     * @param token The token being withdrawn\n     * @param recipient The recipient of the funds\n     * @param amount The amount of the fee token that was withdrawn\n     */\n    event ProtocolFeesWithdrawn(address indexed pool, IERC20 indexed token, address indexed recipient, uint256 amount);\n\n    /**\n     * @notice Logs the withdrawal of pool creator fees in a specific token and amount.\n     * @param pool The pool from which pool creator fees are being withdrawn\n     * @param token The token being withdrawn\n     * @param recipient The recipient of the funds (the pool creator if permissionless, or another account)\n     * @param amount The amount of the fee token that was withdrawn\n     */\n    event PoolCreatorFeesWithdrawn(\n        address indexed pool,\n        IERC20 indexed token,\n        address indexed recipient,\n        uint256 amount\n    );\n\n    /**\n     * @notice Emitted on pool registration with the initial aggregate swap fee percentage, for off-chain processes.\n     * @dev If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will\n     * equal the current global swap fee percentage.\n     *\n     * @param pool The pool being registered\n     * @param aggregateSwapFeePercentage The initial aggregate swap fee percentage\n     * @param isProtocolFeeExempt True if the pool is exempt from taking protocol fees initially\n     */\n    event InitialPoolAggregateSwapFeePercentage(\n        address indexed pool,\n        uint256 aggregateSwapFeePercentage,\n        bool isProtocolFeeExempt\n    );\n\n    /**\n     * @notice Emitted on pool registration with the initial aggregate yield fee percentage, for off-chain processes.\n     * @dev If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will\n     * equal the current global yield fee percentage.\n     *\n     * @param pool The pool being registered\n     * @param aggregateYieldFeePercentage The initial aggregate yield fee percentage\n     * @param isProtocolFeeExempt True if the pool is exempt from taking protocol fees initially\n     */\n    event InitialPoolAggregateYieldFeePercentage(\n        address indexed pool,\n        uint256 aggregateYieldFeePercentage,\n        bool isProtocolFeeExempt\n    );\n\n    /**\n     * @notice Emitted as a convenience during pool registration, more focused than the Vault's `PoolRegistered` event.\n     * @dev The `PoolRegistered` event includes the `roleAccounts` field, which also records the pool creator, but this\n     * simpler event is also provided for convenience. Though `InitialPoolAggregateSwapFeePercentage` and its yield fee\n     * counterpart also include the protocol fee exemption flag, we might as well include it here as well.\n     *\n     * @param pool The address of the pool being registered\n     * @param poolCreator The address of the pool creator (non-zero, or the event would not be emitted)\n     * @param  protocolFeeExempt True if the pool is initially exempt from protocol fees\n     */\n    event PoolRegisteredWithFeeController(address indexed pool, address indexed poolCreator, bool protocolFeeExempt);\n\n    /**\n     * @notice Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\n     * @dev Note that this is checked for both the global and pool-specific protocol swap fee percentages.\n     */\n    error ProtocolSwapFeePercentageTooHigh();\n\n    /**\n     * @notice Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\n     * @dev Note that this is checked for both the global and pool-specific protocol yield fee percentages.\n     */\n    error ProtocolYieldFeePercentageTooHigh();\n\n    /**\n     * @notice Error raised if there is no pool creator on a withdrawal attempt from the given pool.\n     * @param pool The pool with no creator\n     */\n    error PoolCreatorNotRegistered(address pool);\n\n    /**\n     * @notice Error raised if the wrong account attempts to withdraw pool creator fees.\n     * @param caller The account attempting to withdraw pool creator fees\n     * @param pool The pool the caller tried to withdraw from\n     */\n    error CallerIsNotPoolCreator(address caller, address pool);\n\n    /// @notice Error raised when the pool creator swap or yield fee percentage exceeds the maximum allowed value.\n    error PoolCreatorFeePercentageTooHigh();\n\n    /**\n     * @notice Get the address of the main Vault contract.\n     * @return vault The Vault address\n     */\n    function vault() external view returns (IVault);\n\n    /**\n     * @notice Collects aggregate fees from the Vault for a given pool.\n     * @param pool The pool with aggregate fees\n     */\n    function collectAggregateFees(address pool) external;\n\n    /**\n     * @notice Getter for the current global protocol swap fee.\n     * @return protocolSwapFeePercentage The global protocol swap fee percentage\n     */\n    function getGlobalProtocolSwapFeePercentage() external view returns (uint256 protocolSwapFeePercentage);\n\n    /**\n     * @notice Getter for the current global protocol yield fee.\n     * @return protocolYieldFeePercentage The global protocol yield fee percentage\n     */\n    function getGlobalProtocolYieldFeePercentage() external view returns (uint256 protocolYieldFeePercentage);\n\n    /**\n     * @notice Getter for pool registration flag.\n     * @param pool The address of the pool\n     * @return isRegistered True if the pool configuration has been set (e.g., through `registerPool`)\n     */\n    function isPoolRegistered(address pool) external view returns (bool);\n\n    /**\n     * @notice Getter for the current protocol swap fee for a given pool.\n     * @param pool The address of the pool\n     * @return protocolSwapFeePercentage The protocol swap fee percentage for the given pool\n     * @return isOverride True if the protocol fee has been overridden\n     */\n    function getPoolProtocolSwapFeeInfo(\n        address pool\n    ) external view returns (uint256 protocolSwapFeePercentage, bool isOverride);\n\n    /**\n     * @notice Getter for the current protocol yield fee for a given pool.\n     * @param pool The address of the pool\n     * @return protocolYieldFeePercentage The protocol yield fee percentage for the given pool\n     * @return isOverride True if the protocol fee has been overridden\n     */\n    function getPoolProtocolYieldFeeInfo(\n        address pool\n    ) external view returns (uint256 protocolYieldFeePercentage, bool isOverride);\n\n    /**\n     * @notice Getter for the current pool creator swap fee percentage for a given pool.\n     * @param pool The address of the pool\n     * @return poolCreatorSwapFeePercentage The pool creator swap fee component of the aggregate swap fee\n     */\n    function getPoolCreatorSwapFeePercentage(address pool) external view returns (uint256);\n\n    /**\n     * @notice Getter for the current pool creator yield fee percentage for a given pool.\n     * @param pool The address of the pool\n     * @return poolCreatorSwapFeePercentage The pool creator yield fee component of the aggregate yield fee\n     */\n    function getPoolCreatorYieldFeePercentage(address pool) external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of each pool token allocated to the protocol for withdrawal.\n     * @dev Includes both swap and yield fees.\n     * @param pool The address of the pool on which fees were collected\n     * @return feeAmounts The total amounts of each token available for withdrawal, sorted in token registration order\n     */\n    function getProtocolFeeAmounts(address pool) external view returns (uint256[] memory feeAmounts);\n\n    /**\n     * @notice Returns the amount of each pool token allocated to the pool creator for withdrawal.\n     * @dev Includes both swap and yield fees.\n     * @param pool The address of the pool on which fees were collected\n     * @return feeAmounts The total amounts of each token available for withdrawal, sorted in token registration order\n     */\n    function getPoolCreatorFeeAmounts(address pool) external view returns (uint256[] memory feeAmounts);\n\n    /**\n     * @notice Returns a calculated aggregate percentage from protocol and pool creator fee percentages.\n     * @dev Not tied to any particular pool; this just performs the low-level \"additive fee\" calculation. Note that\n     * pool creator fees are calculated based on creatorAndLpFees, and not in totalFees. Since aggregate fees are\n     * stored in the Vault with 24-bit precision, this will truncate any values that require greater precision.\n     * It is expected that pool creators will negotiate with the DAO and agree on reasonable values for these fee\n     * components, but the truncation ensures it will not revert for any valid set of fee percentages.\n     *\n     * See example below:\n     *\n     * tokenOutAmount = 10000; poolSwapFeePct = 10%; protocolFeePct = 40%; creatorFeePct = 60%\n     * totalFees = tokenOutAmount * poolSwapFeePct = 10000 * 10% = 1000\n     * protocolFees = totalFees * protocolFeePct = 1000 * 40% = 400\n     * creatorAndLpFees = totalFees - protocolFees = 1000 - 400 = 600\n     * creatorFees = creatorAndLpFees * creatorFeePct = 600 * 60% = 360\n     * lpFees (will stay in the pool) = creatorAndLpFees - creatorFees = 600 - 360 = 240\n     *\n     * @param protocolFeePercentage The protocol portion of the aggregate fee percentage\n     * @param poolCreatorFeePercentage The pool creator portion of the aggregate fee percentage\n     * @return aggregateFeePercentage The computed aggregate percentage\n     */\n    function computeAggregateFeePercentage(\n        uint256 protocolFeePercentage,\n        uint256 poolCreatorFeePercentage\n    ) external pure returns (uint256 aggregateFeePercentage);\n\n    /**\n     * @notice Override the protocol swap fee percentage for a specific pool.\n     * @dev This is a permissionless call, and will set the pool's fee to the current global fee, if it is different\n     * from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\n     *\n     * @param pool The pool for which we are setting the protocol swap fee\n     */\n    function updateProtocolSwapFeePercentage(address pool) external;\n\n    /**\n     * @notice Override the protocol yield fee percentage for a specific pool.\n     * @dev This is a permissionless call, and will set the pool's fee to the current global fee, if it is different\n     * from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\n     *\n     * @param pool The pool for which we are setting the protocol yield fee\n     */\n    function updateProtocolYieldFeePercentage(address pool) external;\n\n    /***************************************************************************\n                                Permissioned Functions\n    ***************************************************************************/\n\n    /**\n     * @notice Add pool-specific entries to the protocol swap and yield percentages.\n     * @dev This must be called from the Vault during pool registration. It will initialize the pool to the global\n     * protocol fee percentage values (or 0, if the `protocolFeeExempt` flags is set), and return the initial aggregate\n     * fee percentages, based on an initial pool creator fee of 0.\n     *\n     * @param pool The address of the pool being registered\n     * @param poolCreator The address of the pool creator (or 0 if there won't be a pool creator fee)\n     * @param protocolFeeExempt If true, the pool is initially exempt from protocol fees\n     * @return aggregateSwapFeePercentage The initial aggregate swap fee percentage\n     * @return aggregateYieldFeePercentage The initial aggregate yield fee percentage\n     */\n    function registerPool(\n        address pool,\n        address poolCreator,\n        bool protocolFeeExempt\n    ) external returns (uint256 aggregateSwapFeePercentage, uint256 aggregateYieldFeePercentage);\n\n    /**\n     * @notice Set the global protocol swap fee percentage, used by standard pools.\n     * @param newProtocolSwapFeePercentage The new protocol swap fee percentage\n     */\n    function setGlobalProtocolSwapFeePercentage(uint256 newProtocolSwapFeePercentage) external;\n\n    /**\n     * @notice Set the global protocol yield fee percentage, used by standard pools.\n     * @param newProtocolYieldFeePercentage The new protocol yield fee percentage\n     */\n    function setGlobalProtocolYieldFeePercentage(uint256 newProtocolYieldFeePercentage) external;\n\n    /**\n     * @notice Override the protocol swap fee percentage for a specific pool.\n     * @param pool The address of the pool for which we are setting the protocol swap fee\n     * @param newProtocolSwapFeePercentage The new protocol swap fee percentage for the pool\n     */\n    function setProtocolSwapFeePercentage(address pool, uint256 newProtocolSwapFeePercentage) external;\n\n    /**\n     * @notice Override the protocol yield fee percentage for a specific pool.\n     * @param pool The address of the pool for which we are setting the protocol yield fee\n     * @param newProtocolYieldFeePercentage The new protocol yield fee percentage for the pool\n     */\n    function setProtocolYieldFeePercentage(address pool, uint256 newProtocolYieldFeePercentage) external;\n\n    /**\n     * @notice Assigns a new pool creator swap fee percentage to the specified pool.\n     * @dev Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to\n     * the \"net\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the\n     * pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\n     *\n     * @param pool The address of the pool for which the pool creator fee will be changed\n     * @param poolCreatorSwapFeePercentage The new pool creator swap fee percentage to apply to the pool\n     */\n    function setPoolCreatorSwapFeePercentage(address pool, uint256 poolCreatorSwapFeePercentage) external;\n\n    /**\n     * @notice Assigns a new pool creator yield fee percentage to the specified pool.\n     * @dev Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to\n     * the \"net\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the\n     * pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\n     *\n     * @param pool The address of the pool for which the pool creator fee will be changed\n     * @param poolCreatorYieldFeePercentage The new pool creator yield fee percentage to apply to the pool\n     */\n    function setPoolCreatorYieldFeePercentage(address pool, uint256 poolCreatorYieldFeePercentage) external;\n\n    /**\n     * @notice Withdraw collected protocol fees for a given pool (all tokens). This is a permissioned function.\n     * @dev Sends swap and yield protocol fees to the recipient.\n     * @param pool The pool on which fees were collected\n     * @param recipient Address to send the tokens\n     */\n    function withdrawProtocolFees(address pool, address recipient) external;\n\n    /**\n     * @notice Withdraw collected protocol fees for a given pool and a given token. This is a permissioned function.\n     * @dev Sends swap and yield protocol fees to the recipient.\n     * @param pool The pool on which fees were collected\n     * @param recipient Address to send the tokens\n     * @param token Token to withdraw\n     */\n    function withdrawProtocolFeesForToken(address pool, address recipient, IERC20 token) external;\n\n    /**\n     * @notice Withdraw collected pool creator fees for a given pool. This is a permissioned function.\n     * @dev Sends swap and yield pool creator fees to the recipient.\n     * @param pool The pool on which fees were collected\n     * @param recipient Address to send the tokens\n     */\n    function withdrawPoolCreatorFees(address pool, address recipient) external;\n\n    /**\n     * @notice Withdraw collected pool creator fees for a given pool.\n     * @dev Sends swap and yield pool creator fees to the registered poolCreator. Since this is a known and immutable\n     * value, this function is permissionless.\n     *\n     * @param pool The pool on which fees were collected\n     */\n    function withdrawPoolCreatorFees(address pool) external;\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IAuthentication } from \"../solidity-utils/helpers/IAuthentication.sol\";\nimport { IVaultExtension } from \"./IVaultExtension.sol\";\nimport { IVaultErrors } from \"./IVaultErrors.sol\";\nimport { IVaultEvents } from \"./IVaultEvents.sol\";\nimport { IVaultAdmin } from \"./IVaultAdmin.sol\";\nimport { IVaultMain } from \"./IVaultMain.sol\";\n\n/// @notice Composite interface for all Vault operations: swap, add/remove liquidity, and associated queries.\ninterface IVault is IVaultMain, IVaultExtension, IVaultAdmin, IVaultErrors, IVaultEvents, IAuthentication {\n    /// @return vault The main Vault address.\n    function vault() external view override(IVaultAdmin, IVaultExtension) returns (IVault);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\n\nimport { IProtocolFeeController } from \"./IProtocolFeeController.sol\";\nimport { IAuthorizer } from \"./IAuthorizer.sol\";\nimport { IVault } from \"./IVault.sol\";\n\n/**\n * @notice Interface for functions defined on the `VaultAdmin` contract.\n * @dev `VaultAdmin` is the Proxy extension of `VaultExtension`, and handles the least critical operations,\n * as two delegate calls add gas to each call. Most of the permissioned calls are here.\n */\ninterface IVaultAdmin {\n    /*******************************************************************************\n                               Constants and immutables\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the main Vault address.\n     * @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n     * @return vault The address of the main Vault\n     */\n    function vault() external view returns (IVault);\n\n    /**\n     * @notice Returns the Vault's pause window end time.\n     * @dev This value is immutable, and represents the timestamp after which the Vault can no longer be paused\n     * by governance. Balancer timestamps are 32 bits.\n     *\n     * @return pauseWindowEndTime The timestamp when the Vault's pause window ends\n     */\n    function getPauseWindowEndTime() external view returns (uint32 pauseWindowEndTime);\n\n    /**\n     * @notice Returns the Vault's buffer period duration.\n     * @dev This value is immutable. It represents the period during which, if paused, the Vault will remain paused.\n     * This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer\n     * timestamps are 32 bits.\n     *\n     * @return bufferPeriodDuration The length of the buffer period in seconds\n     */\n    function getBufferPeriodDuration() external view returns (uint32 bufferPeriodDuration);\n\n    /**\n     * @notice Returns the Vault's buffer period end time.\n     * @dev This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer\n     * timestamps are 32 bits.\n     *\n     * @return bufferPeriodEndTime The timestamp after which the Vault remains permanently unpaused\n     */\n    function getBufferPeriodEndTime() external view returns (uint32 bufferPeriodEndTime);\n\n    /**\n     * @notice Get the minimum number of tokens in a pool.\n     * @dev We expect the vast majority of pools to be 2-token.\n     * @return minTokens The minimum token count of a pool\n     */\n    function getMinimumPoolTokens() external pure returns (uint256 minTokens);\n\n    /**\n     * @notice Get the maximum number of tokens in a pool.\n     * @return maxTokens The maximum token count of a pool\n     */\n    function getMaximumPoolTokens() external pure returns (uint256 maxTokens);\n\n    /**\n     * @notice Get the minimum total supply of pool tokens (BPT) for an initialized pool.\n     * @dev This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT\n     * is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\n     *\n     * @return poolMinimumTotalSupply The minimum total supply a pool can have after initialization\n     */\n    function getPoolMinimumTotalSupply() external pure returns (uint256 poolMinimumTotalSupply);\n\n    /**\n     * @notice Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\n     * @dev This prevents buffers from being completely drained. When the buffer is initialized, this minimum number\n     * of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal\n     * to the Vault, as buffers are not tokenized.\n     *\n     * @return bufferMinimumTotalSupply The minimum total supply a buffer can have after initialization\n     */\n    function getBufferMinimumTotalSupply() external pure returns (uint256 bufferMinimumTotalSupply);\n\n    /**\n     * @notice Get the minimum trade amount in a pool operation.\n     * @dev This limit is applied to the 18-decimal \"upscaled\" amount in any operation (swap, add/remove liquidity).\n     * @return minimumTradeAmount The minimum trade amount as an 18-decimal floating point number\n     */\n    function getMinimumTradeAmount() external view returns (uint256 minimumTradeAmount);\n\n    /**\n     * @notice Get the minimum wrap amount in a buffer operation.\n     * @dev This limit is applied to the wrap operation amount, in native underlying token decimals.\n     * @return minimumWrapAmount The minimum wrap amount in native underlying token decimals\n     */\n    function getMinimumWrapAmount() external view returns (uint256 minimumWrapAmount);\n\n    /*******************************************************************************\n                                    Vault Pausing\n    *******************************************************************************/\n\n    /**\n     * @notice Indicates whether the Vault is paused.\n     * @dev If the Vault is paused, all non-Recovery Mode state-changing operations on pools will revert. Note that\n     * ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not\n     * also pause buffers (though we anticipate they would likely be paused and unpaused together). Call\n     * `areBuffersPaused` to check the pause state of the buffers.\n     *\n     * @return vaultPaused True if the Vault is paused\n     */\n    function isVaultPaused() external view returns (bool vaultPaused);\n\n    /**\n     * @notice Returns the paused status, and end times of the Vault's pause window and buffer period.\n     * @dev Balancer timestamps are 32 bits.\n     * @return vaultPaused True if the Vault is paused\n     * @return vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\n     * @return vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period\n     */\n    function getVaultPausedState()\n        external\n        view\n        returns (bool vaultPaused, uint32 vaultPauseWindowEndTime, uint32 vaultBufferPeriodEndTime);\n\n    /**\n     * @notice Pause the Vault: an emergency action which disables all operational state-changing functions on pools.\n     * @dev This is a permissioned function that will only work during the Pause Window set during deployment.\n     * Note that ERC4626 buffer operations have an independent pause mechanism, which is not affected by pausing\n     * the Vault. Custom routers could still wrap/unwrap using buffers while the Vault is paused, unless buffers\n     * are also paused (with `pauseVaultBuffers`).\n     */\n    function pauseVault() external;\n\n    /**\n     * @notice Reverse a `pause` operation, and restore Vault pool operations to normal functionality.\n     * @dev This is a permissioned function that will only work on a paused Vault within the Buffer Period set during\n     * deployment. Note that the Vault will automatically unpause after the Buffer Period expires. As noted above,\n     * ERC4626 buffers and Vault operations on pools are independent. Unpausing the Vault does not reverse\n     * `pauseVaultBuffers`. If buffers were also paused, they will remain in that state until explicitly unpaused.\n     */\n    function unpauseVault() external;\n\n    /*******************************************************************************\n                                    Pool Pausing\n    *******************************************************************************/\n\n    /**\n     * @notice Pause the Pool: an emergency action which disables all pool functions.\n     * @dev This is a permissioned function that will only work during the Pause Window set during pool factory\n     * deployment.\n     *\n     * @param pool The pool being paused\n     */\n    function pausePool(address pool) external;\n\n    /**\n     * @notice Reverse a `pause` operation, and restore the Pool to normal functionality.\n     * @dev This is a permissioned function that will only work on a paused Pool within the Buffer Period set during\n     * deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\n     *\n     * @param pool The pool being unpaused\n     */\n    function unpausePool(address pool) external;\n\n    /*******************************************************************************\n                                         Fees\n    *******************************************************************************/\n\n    /**\n     * @notice Assigns a new static swap fee percentage to the specified pool.\n     * @dev This is a permissioned function, disabled if the pool is paused. The swap fee percentage must be within\n     * the bounds specified by the pool's implementation of `ISwapFeePercentageBounds`.\n     * Emits the SwapFeePercentageChanged event.\n     *\n     * @param pool The address of the pool for which the static swap fee will be changed\n     * @param swapFeePercentage The new swap fee percentage to apply to the pool\n     */\n    function setStaticSwapFeePercentage(address pool, uint256 swapFeePercentage) external;\n\n    /**\n     * @notice Collects accumulated aggregate swap and yield fees for the specified pool.\n     * @dev Fees are sent to the ProtocolFeeController address.\n     * @param pool The pool on which all aggregate fees should be collected\n     * @return swapFeeAmounts An array with the total swap fees collected, sorted in token registration order\n     * @return yieldFeeAmounts An array with the total yield fees collected, sorted in token registration order\n     */\n    function collectAggregateFees(\n        address pool\n    ) external returns (uint256[] memory swapFeeAmounts, uint256[] memory yieldFeeAmounts);\n\n    /**\n     * @notice Update an aggregate swap fee percentage.\n     * @dev Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee\n     * for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's\n     * fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also\n     * that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol).\n     * Emits an `AggregateSwapFeePercentageChanged` event.\n     *\n     * @param pool The pool whose swap fee percentage will be updated\n     * @param newAggregateSwapFeePercentage The new aggregate swap fee percentage\n     */\n    function updateAggregateSwapFeePercentage(address pool, uint256 newAggregateSwapFeePercentage) external;\n\n    /**\n     * @notice Update an aggregate yield fee percentage.\n     * @dev Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee\n     * for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's\n     * fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also\n     * that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol).\n     * Emits an `AggregateYieldFeePercentageChanged` event.\n     *\n     * @param pool The pool whose yield fee percentage will be updated\n     * @param newAggregateYieldFeePercentage The new aggregate yield fee percentage\n     */\n    function updateAggregateYieldFeePercentage(address pool, uint256 newAggregateYieldFeePercentage) external;\n\n    /**\n     * @notice Sets a new Protocol Fee Controller for the Vault.\n     * @dev This is a permissioned call. Emits a `ProtocolFeeControllerChanged` event.\n     * @param newProtocolFeeController The address of the new Protocol Fee Controller\n     */\n    function setProtocolFeeController(IProtocolFeeController newProtocolFeeController) external;\n\n    /*******************************************************************************\n                                    Recovery Mode\n    *******************************************************************************/\n\n    /**\n     * @notice Enable recovery mode for a pool.\n     * @dev This is a permissioned function. It enables a safe proportional withdrawal, with no external calls.\n     * Since there are no external calls, ensuring that entering Recovery Mode cannot fail, we cannot compute and so\n     * must forfeit any yield fees between the last operation and enabling Recovery Mode. For the same reason, live\n     * balances cannot be updated while in Recovery Mode, as doing so might cause withdrawals to fail.\n     *\n     * @param pool The address of the pool\n     */\n    function enableRecoveryMode(address pool) external;\n\n    /**\n     * @notice Disable recovery mode for a pool.\n     * @dev This is a permissioned function. It re-syncs live balances (which could not be updated during\n     * Recovery Mode), forfeiting any yield fees that accrued while enabled. It makes external calls, and could\n     * potentially fail if there is an issue with any associated Rate Providers.\n     *\n     * @param pool The address of the pool\n     */\n    function disableRecoveryMode(address pool) external;\n\n    /*******************************************************************************\n                                  Query Functionality\n    *******************************************************************************/\n\n    /**\n     * @notice Disables query functionality on the Vault. Can only be called by governance.\n     * @dev The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from\n     * settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable\n     * queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2).\n     * This function can be acted upon as an emergency measure in ambiguous contexts where it's not 100% clear whether\n     * disabling queries is completely necessary; queries can still be re-enabled after this call.\n     */\n    function disableQuery() external;\n\n    /**\n     * @notice Disables query functionality permanently on the Vault. Can only be called by governance.\n     * @dev Shall only be used when there is no doubt that queries pose a fundamental threat to the system.\n     */\n    function disableQueryPermanently() external;\n\n    /**\n     * @notice Enables query functionality on the Vault. Can only be called by governance.\n     * @dev Only works if queries are not permanently disabled.\n     */\n    function enableQuery() external;\n\n    /*******************************************************************************\n                                  ERC4626 Buffers\n    *******************************************************************************/\n\n    /**\n     * @notice Indicates whether the Vault buffers are paused.\n     * @dev When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true)\n     * will revert. Pausing buffers is reversible. Note that ERC4626 buffers and the Vault have separate and\n     * independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they\n     * would likely be paused and unpaused together). Call `isVaultPaused` to check the pause state of the Vault.\n     *\n     * @return buffersPaused True if the Vault buffers are paused\n     */\n    function areBuffersPaused() external view returns (bool buffersPaused);\n\n    /**\n     * @notice Pauses native vault buffers globally.\n     * @dev When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's\n     * `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. Currently it's not\n     * possible to pause vault buffers individually.\n     *\n     * This is a permissioned call, and is reversible (see `unpauseVaultBuffers`). Note that the Vault has a separate\n     * and independent pausing mechanism. It is possible to pause the Vault (i.e. pool operations), without affecting\n     * buffers, and vice versa.\n     */\n    function pauseVaultBuffers() external;\n\n    /**\n     * @notice Unpauses native vault buffers globally.\n     * @dev When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's\n     * `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. As noted above,\n     * ERC4626 buffers and Vault operations on pools are independent. Unpausing buffers does not reverse `pauseVault`.\n     * If the Vault was also paused, it will remain in that state until explicitly unpaused.\n     *\n     * This is a permissioned call.\n     */\n    function unpauseVaultBuffers() external;\n\n    /**\n     * @notice Initializes buffer for the given wrapped token.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param amountUnderlyingRaw Amount of underlying tokens that will be deposited into the buffer\n     * @param amountWrappedRaw Amount of wrapped tokens that will be deposited into the buffer\n     * @param minIssuedShares Minimum amount of shares to receive from the buffer, expressed in underlying token\n     * native decimals\n     * @param sharesOwner Address that will own the deposited liquidity. Only this address will be able to remove\n     * liquidity from the buffer\n     * @return issuedShares the amount of tokens sharesOwner has in the buffer, expressed in underlying token amounts.\n     * (it is the BPT of an internal ERC4626 buffer). It is expressed in underlying token native decimals.\n     */\n    function initializeBuffer(\n        IERC4626 wrappedToken,\n        uint256 amountUnderlyingRaw,\n        uint256 amountWrappedRaw,\n        uint256 minIssuedShares,\n        address sharesOwner\n    ) external returns (uint256 issuedShares);\n\n    /**\n     * @notice Adds liquidity to an internal ERC4626 buffer in the Vault, proportionally.\n     * @dev The buffer needs to be initialized beforehand.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param maxAmountUnderlyingInRaw Maximum amount of underlying tokens to add to the buffer. It is expressed in\n     * underlying token native decimals\n     * @param maxAmountWrappedInRaw Maximum amount of wrapped tokens to add to the buffer. It is expressed in wrapped\n     * token native decimals\n     * @param exactSharesToIssue The value in underlying tokens that `sharesOwner` wants to add to the buffer,\n     * in underlying token decimals\n     * @param sharesOwner Address that will own the deposited liquidity. Only this address will be able to remove\n     * liquidity from the buffer\n     * @return amountUnderlyingRaw Amount of underlying tokens deposited into the buffer\n     * @return amountWrappedRaw Amount of wrapped tokens deposited into the buffer\n     */\n    function addLiquidityToBuffer(\n        IERC4626 wrappedToken,\n        uint256 maxAmountUnderlyingInRaw,\n        uint256 maxAmountWrappedInRaw,\n        uint256 exactSharesToIssue,\n        address sharesOwner\n    ) external returns (uint256 amountUnderlyingRaw, uint256 amountWrappedRaw);\n\n    /**\n     * @notice Removes liquidity from an internal ERC4626 buffer in the Vault.\n     * @dev Only proportional exits are supported, and the sender has to be the owner of the shares.\n     * This function unlocks the Vault just for this operation; it does not work with a Router as an entrypoint.\n     *\n     * Pre-conditions:\n     * - The buffer needs to be initialized.\n     * - sharesOwner is the original msg.sender, it needs to be checked in the Router. That's why\n     *   this call is authenticated; only routers approved by the DAO can remove the liquidity of a buffer.\n     * - The buffer needs to have some liquidity and have its asset registered in `_bufferAssets` storage.\n     *\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param sharesToRemove Amount of shares to remove from the buffer. Cannot be greater than sharesOwner's\n     * total shares. It is expressed in underlying token native decimals\n     * @param minAmountUnderlyingOutRaw Minimum amount of underlying tokens to receive from the buffer. It is expressed\n     * in underlying token native decimals\n     * @param minAmountWrappedOutRaw Minimum amount of wrapped tokens to receive from the buffer. It is expressed in\n     * wrapped token native decimals\n     * @return removedUnderlyingBalanceRaw Amount of underlying tokens returned to the user\n     * @return removedWrappedBalanceRaw Amount of wrapped tokens returned to the user\n     */\n    function removeLiquidityFromBuffer(\n        IERC4626 wrappedToken,\n        uint256 sharesToRemove,\n        uint256 minAmountUnderlyingOutRaw,\n        uint256 minAmountWrappedOutRaw\n    ) external returns (uint256 removedUnderlyingBalanceRaw, uint256 removedWrappedBalanceRaw);\n\n    /**\n     * @notice Returns the asset registered for a given wrapped token.\n     * @dev The asset can never change after buffer initialization.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return underlyingToken Address of the underlying token registered for the wrapper; `address(0)` if the buffer\n     * has not been initialized.\n     */\n    function getBufferAsset(IERC4626 wrappedToken) external view returns (address underlyingToken);\n\n    /**\n     * @notice Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets\n     * in the buffer.\n     *\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param liquidityOwner Address of the user that owns liquidity in the wrapped token's buffer\n     * @return ownerShares Amount of shares allocated to the liquidity owner, in native underlying token decimals\n     */\n    function getBufferOwnerShares(\n        IERC4626 wrappedToken,\n        address liquidityOwner\n    ) external view returns (uint256 ownerShares);\n\n    /**\n     * @notice Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return bufferShares Amount of supply shares of the buffer, in native underlying token decimals\n     */\n    function getBufferTotalShares(IERC4626 wrappedToken) external view returns (uint256 bufferShares);\n\n    /**\n     * @notice Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\n     * @dev All values are in native token decimals of the wrapped or underlying tokens.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return underlyingBalanceRaw Amount of underlying tokens deposited into the buffer, in native token decimals\n     * @return wrappedBalanceRaw Amount of wrapped tokens deposited into the buffer, in native token decimals\n     */\n    function getBufferBalance(\n        IERC4626 wrappedToken\n    ) external view returns (uint256 underlyingBalanceRaw, uint256 wrappedBalanceRaw);\n\n    /*******************************************************************************\n                                Authentication\n    *******************************************************************************/\n\n    /**\n     * @notice Sets a new Authorizer for the Vault.\n     * @dev This is a permissioned call. Emits an `AuthorizerChanged` event.\n     * @param newAuthorizer The address of the new authorizer\n     */\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @notice Errors are declared inside an interface (namespace) to improve DX with Typechain.\ninterface IVaultErrors {\n    /*******************************************************************************\n                            Registration and Initialization\n    *******************************************************************************/\n\n    /**\n     * @notice A pool has already been registered. `registerPool` may only be called once.\n     * @param pool The already registered pool\n     */\n    error PoolAlreadyRegistered(address pool);\n\n    /**\n     * @notice A pool has already been initialized. `initialize` may only be called once.\n     * @param pool The already initialized pool\n     */\n    error PoolAlreadyInitialized(address pool);\n\n    /**\n     * @notice A pool has not been registered.\n     * @param pool The unregistered pool\n     */\n    error PoolNotRegistered(address pool);\n\n    /**\n     * @notice A referenced pool has not been initialized.\n     * @param pool The uninitialized pool\n     */\n    error PoolNotInitialized(address pool);\n\n    /**\n     * @notice A hook contract rejected a pool on registration.\n     * @param poolHooksContract Address of the hook contract that rejected the pool registration\n     * @param pool Address of the rejected pool\n     * @param poolFactory Address of the pool factory\n     */\n    error HookRegistrationFailed(address poolHooksContract, address pool, address poolFactory);\n\n    /**\n     * @notice A token was already registered (i.e., it is a duplicate in the pool).\n     * @param token The duplicate token\n     */\n    error TokenAlreadyRegistered(IERC20 token);\n\n    /// @notice The token count is below the minimum allowed.\n    error MinTokens();\n\n    /// @notice The token count is above the maximum allowed.\n    error MaxTokens();\n\n    /// @notice Invalid tokens (e.g., zero) cannot be registered.\n    error InvalidToken();\n\n    /// @notice The token type given in a TokenConfig during pool registration is invalid.\n    error InvalidTokenType();\n\n    /// @notice The data in a TokenConfig struct is inconsistent or unsupported.\n    error InvalidTokenConfiguration();\n\n    /// @notice Tokens with more than 18 decimals are not supported.\n    error InvalidTokenDecimals();\n\n    /**\n     * @notice The token list passed into an operation does not match the pool tokens in the pool.\n     * @param pool Address of the pool\n     * @param expectedToken The correct token at a given index in the pool\n     * @param actualToken The actual token found at that index\n     */\n    error TokensMismatch(address pool, address expectedToken, address actualToken);\n\n    /*******************************************************************************\n                                 Transient Accounting\n    *******************************************************************************/\n\n    /// @notice A transient accounting operation completed with outstanding token deltas.\n    error BalanceNotSettled();\n\n    /// @notice A user called a Vault function (swap, add/remove liquidity) outside the lock context.\n    error VaultIsNotUnlocked();\n\n    /// @notice The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\n    error DynamicSwapFeeHookFailed();\n\n    /// @notice The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\n    error BeforeSwapHookFailed();\n\n    /// @notice The pool has returned false to the afterSwap hook, indicating the transaction should revert.\n    error AfterSwapHookFailed();\n\n    /// @notice The pool has returned false to the beforeInitialize hook, indicating the transaction should revert.\n    error BeforeInitializeHookFailed();\n\n    /// @notice The pool has returned false to the afterInitialize hook, indicating the transaction should revert.\n    error AfterInitializeHookFailed();\n\n    /// @notice The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert.\n    error BeforeAddLiquidityHookFailed();\n\n    /// @notice The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert.\n    error AfterAddLiquidityHookFailed();\n\n    /// @notice The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert.\n    error BeforeRemoveLiquidityHookFailed();\n\n    /// @notice The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert.\n    error AfterRemoveLiquidityHookFailed();\n\n    /// @notice An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance).\n    error RouterNotTrusted();\n\n    /*******************************************************************************\n                                        Swaps\n    *******************************************************************************/\n\n    /// @notice The user tried to swap zero tokens.\n    error AmountGivenZero();\n\n    /// @notice The user attempted to swap a token for itself.\n    error CannotSwapSameToken();\n\n    /**\n     * @notice The user attempted to operate with a token that is not in the pool.\n     * @param token The unregistered token\n     */\n    error TokenNotRegistered(IERC20 token);\n\n    /**\n     * @notice An amount in or out has exceeded the limit specified in the swap request.\n     * @param amount The total amount in or out\n     * @param limit The amount of the limit that has been exceeded\n     */\n    error SwapLimit(uint256 amount, uint256 limit);\n\n    /**\n     * @notice A hook adjusted amount in or out has exceeded the limit specified in the swap request.\n     * @param amount The total amount in or out\n     * @param limit The amount of the limit that has been exceeded\n     */\n    error HookAdjustedSwapLimit(uint256 amount, uint256 limit);\n\n    /// @notice The amount given or calculated for an operation is below the minimum limit.\n    error TradeAmountTooSmall();\n\n    /*******************************************************************************\n                                    Add Liquidity\n    *******************************************************************************/\n\n    /// @notice Add liquidity kind not supported.\n    error InvalidAddLiquidityKind();\n\n    /**\n     * @notice A required amountIn exceeds the maximum limit specified for the operation.\n     * @param tokenIn The incoming token\n     * @param amountIn The total token amount in\n     * @param maxAmountIn The amount of the limit that has been exceeded\n     */\n    error AmountInAboveMax(IERC20 tokenIn, uint256 amountIn, uint256 maxAmountIn);\n\n    /**\n     * @notice A hook adjusted amountIn exceeds the maximum limit specified for the operation.\n     * @param tokenIn The incoming token\n     * @param amountIn The total token amount in\n     * @param maxAmountIn The amount of the limit that has been exceeded\n     */\n    error HookAdjustedAmountInAboveMax(IERC20 tokenIn, uint256 amountIn, uint256 maxAmountIn);\n\n    /**\n     * @notice The BPT amount received from adding liquidity is below the minimum specified for the operation.\n     * @param amountOut The total BPT amount out\n     * @param minAmountOut The amount of the limit that has been exceeded\n     */\n    error BptAmountOutBelowMin(uint256 amountOut, uint256 minAmountOut);\n\n    /// @notice Pool does not support adding liquidity with a customized input.\n    error DoesNotSupportAddLiquidityCustom();\n\n    /// @notice Pool does not support adding liquidity through donation.\n    error DoesNotSupportDonation();\n\n    /*******************************************************************************\n                                    Remove Liquidity\n    *******************************************************************************/\n\n    /// @notice Remove liquidity kind not supported.\n    error InvalidRemoveLiquidityKind();\n\n    /**\n     * @notice The actual amount out is below the minimum limit specified for the operation.\n     * @param tokenOut The outgoing token\n     * @param amountOut The total BPT amount out\n     * @param minAmountOut The amount of the limit that has been exceeded\n     */\n    error AmountOutBelowMin(IERC20 tokenOut, uint256 amountOut, uint256 minAmountOut);\n\n    /**\n     * @notice The hook adjusted amount out is below the minimum limit specified for the operation.\n     * @param tokenOut The outgoing token\n     * @param amountOut The total BPT amount out\n     * @param minAmountOut The amount of the limit that has been exceeded\n     */\n    error HookAdjustedAmountOutBelowMin(IERC20 tokenOut, uint256 amountOut, uint256 minAmountOut);\n\n    /**\n     * @notice The required BPT amount in exceeds the maximum limit specified for the operation.\n     * @param amountIn The total BPT amount in\n     * @param maxAmountIn The amount of the limit that has been exceeded\n     */\n    error BptAmountInAboveMax(uint256 amountIn, uint256 maxAmountIn);\n\n    /// @notice Pool does not support removing liquidity with a customized input.\n    error DoesNotSupportRemoveLiquidityCustom();\n\n    /*******************************************************************************\n                                     Fees\n    *******************************************************************************/\n\n    /**\n     * @notice Error raised when there is an overflow in the fee calculation.\n     * @dev This occurs when the sum of the parts (aggregate swap or yield fee) is greater than the whole\n     * (total swap or yield fee). Also validated when the protocol fee controller updates aggregate fee\n     * percentages in the Vault.\n     */\n    error ProtocolFeesExceedTotalCollected();\n\n    /**\n     * @notice Error raised when the swap fee percentage is less than the minimum allowed value.\n     * @dev The Vault itself does not impose a universal minimum. Rather, it validates against the\n     * range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error\n     * if it is below the minimum value returned by the pool.\n     *\n     * Pools with dynamic fees do not check these limits.\n     */\n    error SwapFeePercentageTooLow();\n\n    /**\n     * @notice Error raised when the swap fee percentage is greater than the maximum allowed value.\n     * @dev The Vault itself does not impose a universal minimum. Rather, it validates against the\n     * range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error\n     * if it is above the maximum value returned by the pool.\n     *\n     * Pools with dynamic fees do not check these limits.\n     */\n    error SwapFeePercentageTooHigh();\n\n    /**\n     * @notice Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\n     * @dev Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit\n     * precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which\n     * corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%).\n     * Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between\n     * the aggregate fee calculated here and that stored in the Vault.\n     */\n    error FeePrecisionTooHigh();\n\n    /// @notice A given percentage is above the maximum (usually a value close to FixedPoint.ONE, or 1e18 wei).\n    error PercentageAboveMax();\n\n    /*******************************************************************************\n                                    Queries\n    *******************************************************************************/\n\n    /// @notice A user tried to execute a query operation when they were disabled.\n    error QueriesDisabled();\n\n    /// @notice An admin tried to re-enable queries, but they were disabled permanently.\n    error QueriesDisabledPermanently();\n\n    /*******************************************************************************\n                                Recovery Mode\n    *******************************************************************************/\n\n    /**\n     * @notice Cannot enable recovery mode when already enabled.\n     * @param pool The pool\n     */\n    error PoolInRecoveryMode(address pool);\n\n    /**\n     * @notice Cannot disable recovery mode when not enabled.\n     * @param pool The pool\n     */\n    error PoolNotInRecoveryMode(address pool);\n\n    /*******************************************************************************\n                                Authentication\n    *******************************************************************************/\n\n    /**\n     * @notice Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\n     * @param sender The account attempting to call a permissioned function\n     */\n    error SenderIsNotVault(address sender);\n\n    /*******************************************************************************\n                                        Pausing\n    *******************************************************************************/\n\n    /// @notice The caller specified a pause window period longer than the maximum.\n    error VaultPauseWindowDurationTooLarge();\n\n    /// @notice The caller specified a buffer period longer than the maximum.\n    error PauseBufferPeriodDurationTooLarge();\n\n    /// @notice A user tried to perform an operation while the Vault was paused.\n    error VaultPaused();\n\n    /// @notice Governance tried to unpause the Vault when it was not paused.\n    error VaultNotPaused();\n\n    /// @notice Governance tried to pause the Vault after the pause period expired.\n    error VaultPauseWindowExpired();\n\n    /**\n     * @notice A user tried to perform an operation involving a paused Pool.\n     * @param pool The paused pool\n     */\n    error PoolPaused(address pool);\n\n    /**\n     * @notice Governance tried to unpause the Pool when it was not paused.\n     * @param pool The unpaused pool\n     */\n    error PoolNotPaused(address pool);\n\n    /**\n     * @notice Governance tried to pause a Pool after the pause period expired.\n     * @param pool The pool\n     */\n    error PoolPauseWindowExpired(address pool);\n\n    /*******************************************************************************\n                                ERC4626 token buffers\n    *******************************************************************************/\n\n    /**\n     * @notice The buffer for the given wrapped token was already initialized.\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     */\n    error BufferAlreadyInitialized(IERC4626 wrappedToken);\n\n    /**\n     * @notice The buffer for the given wrapped token was not initialized.\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     */\n    error BufferNotInitialized(IERC4626 wrappedToken);\n\n    /// @notice The user is trying to remove more than their allocated shares from the buffer.\n    error NotEnoughBufferShares();\n\n    /**\n     * @notice The wrapped token asset does not match the underlying token.\n     * @dev This should never happen, but a malicious wrapper contract might not return the correct address.\n     * Legitimate wrapper contracts should make the asset a constant or immutable value.\n     *\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     * @param underlyingToken The underlying token returned by `asset`\n     */\n    error WrongUnderlyingToken(IERC4626 wrappedToken, address underlyingToken);\n\n    /**\n     * @notice A wrapped token reported the zero address as its underlying token asset.\n     * @dev This should never happen, but a malicious wrapper contract might do this (e.g., in an attempt to\n     * re-initialize the buffer).\n     *\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     */\n    error InvalidUnderlyingToken(IERC4626 wrappedToken);\n\n    /**\n     * @notice The amount given to wrap/unwrap was too small, which can introduce rounding issues.\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     */\n    error WrapAmountTooSmall(IERC4626 wrappedToken);\n\n    /// @notice Buffer operation attempted while vault buffers are paused.\n    error VaultBuffersArePaused();\n\n    /// @notice Buffer shares were minted to the zero address.\n    error BufferSharesInvalidReceiver();\n\n    /// @notice Buffer shares were burned from the zero address.\n    error BufferSharesInvalidOwner();\n\n    /**\n     * @notice The total supply of a buffer can't be lower than the absolute minimum.\n     * @param totalSupply The total supply value that was below the minimum\n     */\n    error BufferTotalSupplyTooLow(uint256 totalSupply);\n\n    /// @dev A wrap/unwrap operation consumed more or returned less underlying tokens than it should.\n    error NotEnoughUnderlying(IERC4626 wrappedToken, uint256 expectedUnderlyingAmount, uint256 actualUnderlyingAmount);\n\n    /// @dev A wrap/unwrap operation consumed more or returned less wrapped tokens than it should.\n    error NotEnoughWrapped(IERC4626 wrappedToken, uint256 expectedWrappedAmount, uint256 actualWrappedAmount);\n\n    /// @dev Shares issued during initialization are below the requested amount.\n    error IssuedSharesBelowMin(uint256 issuedShares, uint256 minIssuedShares);\n\n    /*******************************************************************************\n                                    Miscellaneous\n    *******************************************************************************/\n\n    /// @notice Pool does not support adding / removing liquidity with an unbalanced input.\n    error DoesNotSupportUnbalancedLiquidity();\n\n    /// @notice The contract should not receive ETH.\n    error CannotReceiveEth();\n\n    /**\n     * @notice The `VaultExtension` contract was called by an account directly.\n     * @dev It can only be called by the Vault via delegatecall.\n     */\n    error NotVaultDelegateCall();\n\n    /// @notice The `VaultExtension` contract was configured with an incorrect Vault address.\n    error WrongVaultExtensionDeployment();\n\n    /// @notice The `ProtocolFeeController` contract was configured with an incorrect Vault address.\n    error WrongProtocolFeeControllerDeployment();\n\n    /// @notice The `VaultAdmin` contract was configured with an incorrect Vault address.\n    error WrongVaultAdminDeployment();\n\n    /// @notice Quote reverted with a reserved error code.\n    error QuoteResultSpoofed();\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IProtocolFeeController } from \"./IProtocolFeeController.sol\";\nimport { IAuthorizer } from \"./IAuthorizer.sol\";\nimport { IHooks } from \"./IHooks.sol\";\nimport \"./VaultTypes.sol\";\n\n/// @dev Events are declared inside an interface (namespace) to improve DX with Typechain.\ninterface IVaultEvents {\n    /**\n     * @notice A Pool was registered by calling `registerPool`.\n     * @param pool The pool being registered\n     * @param factory The factory creating the pool\n     * @param tokenConfig An array of descriptors for the tokens the pool will manage\n     * @param swapFeePercentage The static swap fee of the pool\n     * @param pauseWindowEndTime The pool's pause window end time\n     * @param roleAccounts Addresses the Vault will allow to change certain pool settings\n     * @param hooksConfig Flags indicating which hooks the pool supports and address of hooks contract\n     * @param liquidityManagement Supported liquidity management hook flags\n     */\n    event PoolRegistered(\n        address indexed pool,\n        address indexed factory,\n        TokenConfig[] tokenConfig,\n        uint256 swapFeePercentage,\n        uint32 pauseWindowEndTime,\n        PoolRoleAccounts roleAccounts,\n        HooksConfig hooksConfig,\n        LiquidityManagement liquidityManagement\n    );\n\n    /**\n     * @notice A Pool was initialized by calling `initialize`.\n     * @param pool The pool being initialized\n     */\n    event PoolInitialized(address indexed pool);\n\n    /**\n     * @notice A swap has occurred.\n     * @param pool The pool with the tokens being swapped\n     * @param tokenIn The token entering the Vault (balance increases)\n     * @param tokenOut The token leaving the Vault (balance decreases)\n     * @param amountIn Number of tokenIn tokens\n     * @param amountOut Number of tokenOut tokens\n     * @param swapFeePercentage Swap fee percentage applied (can differ if dynamic)\n     * @param swapFeeAmount Swap fee amount paid\n     */\n    event Swap(\n        address indexed pool,\n        IERC20 indexed tokenIn,\n        IERC20 indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut,\n        uint256 swapFeePercentage,\n        uint256 swapFeeAmount\n    );\n\n    /**\n     * @notice A wrap operation has occurred.\n     * @param wrappedToken The wrapped token address\n     * @param depositedUnderlying Number of underlying tokens deposited\n     * @param mintedShares Number of shares (wrapped tokens) minted\n     * @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)\n     */\n    event Wrap(\n        IERC4626 indexed wrappedToken,\n        uint256 depositedUnderlying,\n        uint256 mintedShares,\n        bytes32 bufferBalances\n    );\n\n    /**\n     * @notice An unwrap operation has occurred.\n     * @param wrappedToken The wrapped token address\n     * @param burnedShares Number of shares (wrapped tokens) burned\n     * @param withdrawnUnderlying Number of underlying tokens withdrawn\n     * @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)\n     */\n    event Unwrap(\n        IERC4626 indexed wrappedToken,\n        uint256 burnedShares,\n        uint256 withdrawnUnderlying,\n        bytes32 bufferBalances\n    );\n\n    /**\n     * @notice Liquidity has been added to a pool (including initialization).\n     * @param pool The pool with liquidity added\n     * @param liquidityProvider The user performing the operation\n     * @param kind The add liquidity operation type (e.g., proportional, custom)\n     * @param totalSupply The total supply of the pool after the operation\n     * @param amountsAddedRaw The amount of each token that was added, sorted in token registration order\n     * @param swapFeeAmountsRaw The total swap fees charged, sorted in token registration order\n     */\n    event LiquidityAdded(\n        address indexed pool,\n        address indexed liquidityProvider,\n        AddLiquidityKind indexed kind,\n        uint256 totalSupply,\n        uint256[] amountsAddedRaw,\n        uint256[] swapFeeAmountsRaw\n    );\n\n    /**\n     * @notice Liquidity has been removed from a pool.\n     * @param pool The pool with liquidity removed\n     * @param liquidityProvider The user performing the operation\n     * @param kind The remove liquidity operation type (e.g., proportional, custom)\n     * @param totalSupply The total supply of the pool after the operation\n     * @param amountsRemovedRaw The amount of each token that was removed, sorted in token registration order\n     * @param swapFeeAmountsRaw The total swap fees charged, sorted in token registration order\n     */\n    event LiquidityRemoved(\n        address indexed pool,\n        address indexed liquidityProvider,\n        RemoveLiquidityKind indexed kind,\n        uint256 totalSupply,\n        uint256[] amountsRemovedRaw,\n        uint256[] swapFeeAmountsRaw\n    );\n\n    /**\n     * @notice The Vault's pause status has changed.\n     * @param paused True if the Vault was paused\n     */\n    event VaultPausedStateChanged(bool paused);\n\n    /// @notice `disableQuery` has been called on the Vault, disabling query functionality.\n    event VaultQueriesDisabled();\n\n    /// @notice `enableQuery` has been called on the Vault, enabling query functionality.\n    event VaultQueriesEnabled();\n\n    /**\n     * @notice A Pool's pause status has changed.\n     * @param pool The pool that was just paused or unpaused\n     * @param paused True if the pool was paused\n     */\n    event PoolPausedStateChanged(address indexed pool, bool paused);\n\n    /**\n     * @notice Emitted when the swap fee percentage of a pool is updated.\n     * @param swapFeePercentage The new swap fee percentage for the pool\n     */\n    event SwapFeePercentageChanged(address indexed pool, uint256 swapFeePercentage);\n\n    /**\n     * @notice Recovery mode has been enabled or disabled for a pool.\n     * @param pool The pool\n     * @param recoveryMode True if recovery mode was enabled\n     */\n    event PoolRecoveryModeStateChanged(address indexed pool, bool recoveryMode);\n\n    /**\n     * @notice A protocol or pool creator fee has changed, causing an update to the aggregate swap fee.\n     * @dev The `ProtocolFeeController` will emit an event with the underlying change.\n     * @param pool The pool whose aggregate swap fee percentage changed\n     * @param aggregateSwapFeePercentage The new aggregate swap fee percentage\n     */\n    event AggregateSwapFeePercentageChanged(address indexed pool, uint256 aggregateSwapFeePercentage);\n\n    /**\n     * @notice A protocol or pool creator fee has changed, causing an update to the aggregate yield fee.\n     * @dev The `ProtocolFeeController` will emit an event with the underlying change.\n     * @param pool The pool whose aggregate yield fee percentage changed\n     * @param aggregateYieldFeePercentage The new aggregate yield fee percentage\n     */\n    event AggregateYieldFeePercentageChanged(address indexed pool, uint256 aggregateYieldFeePercentage);\n\n    /**\n     * @notice A new authorizer is set by `setAuthorizer`.\n     * @param newAuthorizer The address of the new authorizer\n     */\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\n\n    /**\n     * @notice A new protocol fee controller is set by `setProtocolFeeController`.\n     * @param newProtocolFeeController The address of the new protocol fee controller\n     */\n    event ProtocolFeeControllerChanged(IProtocolFeeController indexed newProtocolFeeController);\n\n    /**\n     * @notice Liquidity was added to an ERC4626 buffer corresponding to the given wrapped token.\n     * @dev The underlying token can be derived from the wrapped token, so it's not included here.\n     *\n     * @param wrappedToken The wrapped token that identifies the buffer\n     * @param amountUnderlying The amount of the underlying token that was deposited\n     * @param amountWrapped The amount of the wrapped token that was deposited\n     * @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)\n     */\n    event LiquidityAddedToBuffer(\n        IERC4626 indexed wrappedToken,\n        uint256 amountUnderlying,\n        uint256 amountWrapped,\n        bytes32 bufferBalances\n    );\n\n    /**\n     * @notice Buffer shares were minted for an ERC4626 buffer corresponding to a given wrapped token.\n     * @dev The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares`\n     * retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the\n     * \"totalSupply\" of a buffer.\n     *\n     * @param wrappedToken The wrapped token that identifies the buffer\n     * @param to The owner of the minted shares\n     * @param issuedShares The amount of \"internal BPT\" shares created\n     */\n    event BufferSharesMinted(IERC4626 indexed wrappedToken, address indexed to, uint256 issuedShares);\n\n    /**\n     * @notice Buffer shares were burned for an ERC4626 buffer corresponding to a given wrapped token.\n     * @dev The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares`\n     * retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the\n     * \"totalSupply\" of a buffer.\n     *\n     * @param wrappedToken The wrapped token that identifies the buffer\n     * @param from The owner of the burned shares\n     * @param burnedShares The amount of \"internal BPT\" shares burned\n     */\n    event BufferSharesBurned(IERC4626 indexed wrappedToken, address indexed from, uint256 burnedShares);\n\n    /**\n     * @notice Liquidity was removed from an ERC4626 buffer.\n     * @dev The underlying token can be derived from the wrapped token, so it's not included here.\n     * @param wrappedToken The wrapped token that identifies the buffer\n     * @param amountUnderlying The amount of the underlying token that was withdrawn\n     * @param amountWrapped The amount of the wrapped token that was withdrawn\n     * @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)\n     */\n    event LiquidityRemovedFromBuffer(\n        IERC4626 indexed wrappedToken,\n        uint256 amountUnderlying,\n        uint256 amountWrapped,\n        bytes32 bufferBalances\n    );\n\n    /**\n     * @notice The Vault buffers pause status has changed.\n     * @dev If buffers all paused, all buffer operations (i.e., all calls through the Router with `isBuffer`\n     * set to true) will revert.\n     *\n     * @param paused True if the Vault buffers were paused\n     */\n    event VaultBuffersPausedStateChanged(bool paused);\n\n    /**\n     * @notice Pools can use this event to emit event data from the Vault.\n     * @param pool Pool address\n     * @param eventKey Event key\n     * @param eventData Encoded event data\n     */\n    event VaultAuxiliary(address indexed pool, bytes32 indexed eventKey, bytes eventData);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultExplorer.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { TokenInfo, PoolRoleAccounts, PoolData, PoolConfig, PoolSwapParams, HooksConfig } from \"./VaultTypes.sol\";\n\n/**\n * @notice Helper contract that exposes the full permissionless Vault interface.\n * @dev Since the Vault is split across three contracts using the Proxy pattern, there is not much on the Vault\n * contract itself that can be called directly, especially since it is designed to primarily use a single entrypoint\n * for liquidity operations, invoked through a Router. This is unhelpful for off-chain processes (e.g., Etherscan).\n * The proxy contracts (`VaultExtension` and `VaultAdmin`) can only be delegate-called through the main Vault, so\n * although the functions are visible off-chain, they cannot be called from Etherscan.\n *\n * The `VaultExplorer` performs the delegate calls, in order to expose the entire Vault interface in a user-friendly\n * manner. It exposes all the \"getters,\" plus permissionless write operations (e.g., fee collection).\n */\ninterface IVaultExplorer {\n    /***************************************************************************\n                                  Vault Contracts\n    ***************************************************************************/\n\n    /**\n     * @notice Returns the main Vault address.\n     * @dev The main Vault contains the entrypoint and main liquidity operation implementations. There are redundant\n     * `vault()` functions defined in `VaultExtension` and `VaultAdmin`. Rather than call those, it is cheaper to\n     * simply return the address stored in this contract.\n     *\n     * @return vault The address of the main Vault contract\n     */\n    function getVault() external view returns (address vault);\n\n    /**\n     * @notice Returns the VaultExtension contract address.\n     * @dev The VaultExtension handles less critical or frequently used functions, since delegate calls through the\n     * Vault are more expensive than direct calls. The main Vault contains the core code for swaps and liquidity\n     * operations. The implementation is in `Vault`.\n     *\n     * @return vaultExtension Address of the VaultExtension\n     */\n    function getVaultExtension() external view returns (address vaultExtension);\n\n    /**\n     * @notice Returns the VaultAdmin contract address.\n     * @dev The VaultAdmin contract is mostly used for permissioned calls.\n     * The getter function implementation is in `VaultExtension`.\n     *\n     * @return vaultAdmin The address of the Vault admin\n     */\n    function getVaultAdmin() external view returns (address vaultAdmin);\n\n    /**\n     * @notice Returns the Authorizer address.\n     * @dev The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can\n     * be changed through a permissioned call. The implementation is in `VaultExtension`.\n     *\n     * @return authorizer Address of the authorizer contract\n     */\n    function getAuthorizer() external view returns (address authorizer);\n\n    /**\n     * @notice Returns the current Protocol Fee Controller address.\n     * @dev The implementation is in `VaultExtension`. Note that the ProtocolFeeController is upgradeable in the Vault,\n     * so this address could change over time.\n     *\n     * @return protocolFeeController Address of the ProtocolFeeController\n     */\n    function getProtocolFeeController() external view returns (address protocolFeeController);\n\n    /*******************************************************************************\n                              Transient Accounting\n    *******************************************************************************/\n\n    /**\n     * @notice Returns whether the Vault is unlocked (i.e., executing an operation).\n     * @dev The Vault must be unlocked to perform state-changing liquidity operations.\n     * The implementation is in `VaultExtension`.\n     *\n     * @return unlocked True if the Vault is unlocked, false otherwise\n     */\n    function isUnlocked() external view returns (bool unlocked);\n\n    /**\n     * @notice Returns the count of non-zero deltas.\n     * @dev For an operation to settle, this count must be zero. The implementation is in `VaultExtension`.\n     * @return nonzeroDeltaCount The current value of `_nonzeroDeltaCount`\n     */\n    function getNonzeroDeltaCount() external view returns (uint256 nonzeroDeltaCount);\n\n    /**\n     * @notice Retrieves the token delta for a specific token.\n     * @dev This function allows reading values from `_tokenDeltas`. A non-zero delta typically occurs only during an\n     * operation, and indicates a debt or credit amount in that token. The implementation is in `VaultExtension`.\n     *\n     * @param token The token for which the delta is being fetched\n     * @return tokenDelta The delta of the specified token\n     */\n    function getTokenDelta(IERC20 token) external view returns (int256 tokenDelta);\n\n    /**\n     * @notice Retrieves the reserve (i.e., sum of all pool balances) of a given token.\n     * @dev The `reserveAmount` should always be equal to or less than the Vault's balance of the token.\n     * The implementation is in `VaultExtension`.\n     *\n     * @param token The token for which to retrieve the reserve\n     * @return reserveAmount The amount of reserves for the given token\n     */\n    function getReservesOf(IERC20 token) external view returns (uint256 reserveAmount);\n\n    /**\n     * @notice This flag is used to detect \"round trip\" transactions (adding and removing liquidity in the same pool).\n     * @dev Taxing removing liquidity proportionally whenever liquidity was added in the same transaction adds an extra\n     * layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional\n     * is the only standard way to exit a position without fees, and this flag is used to enable fees when the\n     * operation might be an attempted exploit. It also discourages indirect swaps via unbalanced add and remove\n     * proportional, as they are expected to be worse than a simple swap for every pool type.\n     * The implementation is in `VaultExtension`.\n     *\n     * @param pool Address of the pool to check\n     * @return liquidityAdded True if liquidity has been added to this pool in the current transaction\n     */\n    function getAddLiquidityCalledFlag(address pool) external view returns (bool liquidityAdded);\n\n    /*******************************************************************************\n                                    Pool Registration\n    *******************************************************************************/\n\n    /**\n     * @notice Checks whether a pool is registered.\n     * @dev The implementation is in `VaultExtension`.\n     * @param pool Address of the pool to check\n     * @return registered True if the pool is registered, false otherwise\n     */\n    function isPoolRegistered(address pool) external view returns (bool registered);\n\n    /*******************************************************************************\n                                    Pool Information\n    *******************************************************************************/\n\n    /**\n     * @notice Checks whether a pool is initialized.\n     * @dev An initialized pool can be considered registered as well. The implementation is in `VaultExtension`.\n     * @param pool Address of the pool to check\n     * @return initialized True if the pool is initialized, false otherwise\n     */\n    function isPoolInitialized(address pool) external view returns (bool initialized);\n\n    /**\n     * @notice Gets the tokens registered to a pool.\n     * @dev The implementation is in `VaultExtension`.\n     * @param pool Address of the pool\n     * @return tokens List of tokens in the pool\n     */\n    function getPoolTokens(address pool) external view returns (IERC20[] memory tokens);\n\n    /**\n     * @notice Gets the index of a token in a given pool.\n     * @dev Reverts if the pool is not registered, or if the token does not belong to the pool.\n     * The implementation is in `Vault`.\n     *\n     * @param pool Address of the pool\n     * @param token Address of the token\n     * @return tokenCount Number of tokens in the pool\n     * @return index Index corresponding to the given token in the pool's token list\n     */\n    function getPoolTokenCountAndIndexOfToken(\n        address pool,\n        IERC20 token\n    ) external view returns (uint256 tokenCount, uint256 index);\n\n    /**\n     * @notice Gets pool token rates.\n     * @dev This function performs external calls if tokens are yield-bearing. All returned arrays are in token\n     * registration order. The implementation is in `VaultExtension`.\n     *\n     * @param pool Address of the pool\n     * @return decimalScalingFactors Token decimal scaling factors\n     * @return tokenRates Token rates for yield-bearing tokens, or FP(1) for standard tokens\n     */\n    function getPoolTokenRates(\n        address pool\n    ) external view returns (uint256[] memory decimalScalingFactors, uint256[] memory tokenRates);\n\n    /**\n     * @notice Returns comprehensive pool data for the given pool.\n     * @dev This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\n     * The implementation is in `VaultExtension`.\n     *\n     * @param pool The address of the pool\n     * @return poolData The `PoolData` result\n     */\n    function getPoolData(address pool) external view returns (PoolData memory poolData);\n\n    /**\n     * @notice Gets the raw data for a pool: tokens, raw balances, and scaling factors.\n     * @dev The implementation is in `VaultExtension`.\n     * @param pool Address of the pool\n     * @return tokens The pool tokens, sorted in registration order\n     * @return tokenInfo Token info, sorted in token registration order\n     * @return balancesRaw Raw balances, sorted in token registration order\n     * @return lastBalancesLiveScaled18 Last saved live balances, sorted in token registration order\n     */\n    function getPoolTokenInfo(\n        address pool\n    )\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            TokenInfo[] memory tokenInfo,\n            uint256[] memory balancesRaw,\n            uint256[] memory lastBalancesLiveScaled18\n        );\n\n    /**\n     * @notice Gets current live balances of a given pool, in token registration order.\n     * @dev These are 18-decimal fixed point values. The implementation is in `VaultExtension`.\n     * @param pool Address of the pool\n     * @return balancesLiveScaled18  Token balances after paying yield fees, applying decimal scaling and rates\n     */\n    function getCurrentLiveBalances(address pool) external view returns (uint256[] memory balancesLiveScaled18);\n\n    /**\n     * @notice Gets the configuration parameters of a pool.\n     * @dev The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\n     * The implementation is in `VaultExtension`.\n     *\n     * @param pool Address of the pool\n     * @return poolConfig The pool configuration as a `PoolConfig` struct\n     */\n    function getPoolConfig(address pool) external view returns (PoolConfig memory poolConfig);\n\n    /**\n     * @notice Gets the hooks configuration parameters of a pool.\n     * @dev The `HooksConfig` contains flags indicating which pool hooks are implemented.\n     * The implementation is in `VaultExtension`.\n     *\n     * @param pool Address of the pool\n     * @return hooksConfig The hooks configuration as a `HooksConfig` struct\n     */\n    function getHooksConfig(address pool) external view returns (HooksConfig memory hooksConfig);\n\n    /**\n     * @notice Gets the current bpt rate of a pool, by dividing the current invariant by the total supply of BPT.\n     * @dev The implementation is in `VaultExtension`.\n     * @param pool Address of the pool\n     * @return rate BPT rate\n     */\n    function getBptRate(address pool) external view returns (uint256 rate);\n\n    /*******************************************************************************\n                                 Balancer Pool Tokens\n    *******************************************************************************/\n\n    /**\n     * @notice Gets the total supply of a given ERC20 token.\n     * @dev The implementation is in `VaultExtension`.\n     * @param token The token address\n     * @return tokenTotalSupply Total supply of the token\n     */\n    function totalSupply(address token) external view returns (uint256 tokenTotalSupply);\n\n    /**\n     * @notice Gets the balance of an account for a given ERC20 token.\n     * @dev The implementation is in `VaultExtension`.\n     * @param token Address of the token\n     * @param account Address of the account\n     * @return tokenBalance Token balance of the account\n     */\n    function balanceOf(address token, address account) external view returns (uint256 tokenBalance);\n\n    /**\n     * @notice Gets the allowance of a spender for a given ERC20 token and owner.\n     * @dev The implementation is in `VaultExtension`.\n     * @param token Address of the token\n     * @param owner Address of the owner\n     * @param spender Address of the spender\n     * @return tokenAllowance Amount of tokens the spender is allowed to spend\n     */\n    function allowance(address token, address owner, address spender) external view returns (uint256 tokenAllowance);\n\n    /*******************************************************************************\n                                    Pool Pausing\n    *******************************************************************************/\n\n    /**\n     * @notice Indicates whether a pool is paused.\n     * @dev If a pool is paused, all non-Recovery Mode state-changing operations will revert.\n     * The implementation is in `VaultExtension`.\n     *\n     * @param pool The pool to be checked\n     * @return poolPaused True if the pool is paused\n     */\n    function isPoolPaused(address pool) external view returns (bool poolPaused);\n\n    /**\n     * @notice Returns the paused status, and end times of the Pool's pause window and buffer period.\n     * @dev Note that even when set to a paused state, the pool will automatically unpause at the end of\n     * the buffer period. Balancer timestamps are 32 bits. The implementation is in `VaultExtension`.\n     *\n     * @param pool The pool whose data is requested\n     * @return poolPaused True if the Pool is paused\n     * @return poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\n     * @return poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\n     * @return pauseManager The pause manager, or the zero address\n     */\n    function getPoolPausedState(\n        address pool\n    )\n        external\n        view\n        returns (bool poolPaused, uint32 poolPauseWindowEndTime, uint32 poolBufferPeriodEndTime, address pauseManager);\n\n    /*******************************************************************************\n                                   Fees\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the total aggregate swap fees in `token` collected by the pool.\n     * @dev The implementation is in `VaultExtension`.\n     * @param pool The address of the pool for which aggregate fees have been collected\n     * @param token The address of the token in which fees have been accumulated\n     * @return swapFeeAmount The total amount of fees accumulated in the specified token\n     */\n    function getAggregateSwapFeeAmount(address pool, IERC20 token) external view returns (uint256 swapFeeAmount);\n\n    /**\n     * @notice Returns the total aggregate yield fees in `token` collected by the pool.\n     * @dev The implementation is in `VaultExtension`.\n     * @param pool The address of the pool for which aggregate fees have been collected\n     * @param token The address of the token in which fees have been accumulated\n     * @return yieldFeeAmount The total amount of fees accumulated in the specified token\n     */\n    function getAggregateYieldFeeAmount(address pool, IERC20 token) external view returns (uint256 yieldFeeAmount);\n\n    /**\n     * @notice Fetches the static swap fee percentage for a given pool.\n     * @dev The implementation is in `VaultExtension`.\n     * @param pool The address of the pool whose static swap fee percentage is being queried\n     * @return swapFeePercentage The current static swap fee percentage for the specified pool\n     */\n    function getStaticSwapFeePercentage(address pool) external view returns (uint256 swapFeePercentage);\n\n    /**\n     * @notice Fetches the role accounts for a given pool (pause manager, swap manager, pool creator).\n     * @dev The implementation is in `VaultExtension`.\n     * @param pool The address of the pool whose roles are being queried\n     * @return roleAccounts A struct containing the role accounts for the pool (or 0 if unassigned)\n     */\n    function getPoolRoleAccounts(address pool) external view returns (PoolRoleAccounts memory roleAccounts);\n\n    /**\n     * @notice Query the current dynamic swap fee of a pool, given a set of swap parameters.\n     * @dev Reverts if the hook doesn't return the success flag set to `true`.\n     * The implementation is in `VaultExtension`.\n     *\n     * @param pool The pool\n     * @param swapParams The swap parameters used to compute the fee\n     * @return dynamicSwapFeePercentage The dynamic swap fee percentage\n     */\n    function computeDynamicSwapFeePercentage(\n        address pool,\n        PoolSwapParams memory swapParams\n    ) external view returns (uint256 dynamicSwapFeePercentage);\n\n    /*******************************************************************************\n                                    Recovery Mode\n    *******************************************************************************/\n\n    /**\n     * @notice Checks whether a pool is in Recovery Mode.\n     * @dev Recovery Mode enables a safe proportional withdrawal path, with no external calls.\n     * The implementation is in `VaultExtension`.\n     *\n     * @param pool Address of the pool to check\n     * @return inRecoveryMode True if the pool is in Recovery Mode, false otherwise\n     */\n    function isPoolInRecoveryMode(address pool) external view returns (bool inRecoveryMode);\n\n    /**\n     * @notice Enable Recovery Mode for the given pool, when either the pool or the Vault is paused.\n     * @dev Recovery Mode enables a safe proportional withdrawal path, with no external calls. Note that attempts\n     * to call this during normal operations will revert. It is only permissionless when paused.\n     * The implementation is in `VaultAdmin`.\n     *\n     * @param pool Address of the pool to check\n     */\n    function enableRecoveryMode(address pool) external;\n\n    /*******************************************************************************\n                                    Queries\n    *******************************************************************************/\n\n    /**\n     * @notice Checks whether queries are reversibly disabled on the Vault.\n     * @dev Governance can call `enableQuery` to restore query functionality, unless `disableQueryPermanently` was\n     * called. The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt\n     * from settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable\n     * queries in the unlikely event that EVM changes violate its assumptions (e.g., in a new L2 network).\n     * The implementation is in `VaultExtension`.\n     *\n     * @return queryDisabled If true, then queries are reversibly disabled\n     */\n    function isQueryDisabled() external view returns (bool queryDisabled);\n\n    /**\n     * @notice Returns true if queries are disabled permanently; false if they are enabled.\n     * @dev This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\n     * The implementation is in `VaultExtension`.\n     *\n     * @return queryDisabledPermanently If true, then queries are permanently disabled\n     */\n    function isQueryDisabledPermanently() external view returns (bool queryDisabledPermanently);\n\n    /***************************************************************************\n                              Vault Admin Functions\n    ***************************************************************************/\n\n    /**\n     * @notice Returns the Vault's pause window end time.\n     * @dev This value is immutable, and represents the timestamp after which the Vault can no longer be paused\n     * by governance. Balancer timestamps are 32 bits. The implementation is in `VaultAdmin`.\n     *\n     * @return pauseWindowEndTime The timestamp when the Vault's pause window ends\n     */\n    function getPauseWindowEndTime() external view returns (uint32 pauseWindowEndTime);\n\n    /**\n     * @notice Returns the Vault's buffer period duration.\n     * @dev This value is immutable. It represents the period during which, if paused, the Vault will remain paused.\n     * This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer\n     * timestamps are 32 bits. The implementation is in `VaultAdmin`.\n     *\n     * @return bufferPeriodDuration The length of the buffer period in seconds\n     */\n    function getBufferPeriodDuration() external view returns (uint32 bufferPeriodDuration);\n\n    /**\n     * @notice Returns the Vault's buffer period end time.\n     * @dev This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer\n     * timestamps are 32 bits. The implementation is in `VaultAdmin`.\n     *\n     * @return bufferPeriodEndTime The timestamp after which the Vault remains permanently unpaused\n     */\n    function getBufferPeriodEndTime() external view returns (uint32 bufferPeriodEndTime);\n\n    /**\n     * @notice Get the minimum number of tokens in a pool.\n     * @dev We expect the vast majority of pools to be 2-token. The implementation is in `VaultAdmin`.\n     * @return minTokens The minimum token count of a pool\n     */\n    function getMinimumPoolTokens() external view returns (uint256 minTokens);\n\n    /**\n     * @notice Get the maximum number of tokens in a pool.\n     * @dev The implementation is in `VaultAdmin`.\n     * @return maxTokens The maximum token count of a pool\n     */\n    function getMaximumPoolTokens() external view returns (uint256 maxTokens);\n\n    /**\n     * @notice Get the minimum total supply of pool tokens (BPT) for an initialized pool.\n     * @dev This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT\n     * is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\n     * The implementation is in `VaultAdmin`.\n     *\n     * @return poolMinimumTotalSupply The minimum total supply a pool can have after initialization\n     */\n    function getPoolMinimumTotalSupply() external view returns (uint256 poolMinimumTotalSupply);\n\n    /**\n     * @notice Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\n     * @dev This prevents buffers from being completely drained. When the buffer is initialized, this minimum number\n     * of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal\n     * to the Vault, as buffers are not tokenized. The implementation is in `VaultAdmin`.\n     *\n     * @return bufferMinimumTotalSupply The minimum total supply a buffer can have after initialization\n     */\n    function getBufferMinimumTotalSupply() external view returns (uint256 bufferMinimumTotalSupply);\n\n    /**\n     * @notice Get the minimum trade amount in a pool operation.\n     * @dev This limit is applied to the 18-decimal \"upscaled\" amount in any operation (swap, add/remove liquidity).\n     * The implementation is in `VaultAdmin`.\n     *\n     * @return minimumTradeAmount The minimum trade amount as an 18-decimal floating point number\n     */\n    function getMinimumTradeAmount() external view returns (uint256 minimumTradeAmount);\n\n    /**\n     * @notice Get the minimum amount that can be wrapped by an ERC4626 token buffer by the Vault.\n     * @dev This limit is applied to native decimal values, and guards against rounding errors.\n     * The implementation is in `VaultAdmin`.\n     *\n     * @return minimumWrapAmount The minimum wrap amount\n     */\n    function getMinimumWrapAmount() external view returns (uint256 minimumWrapAmount);\n\n    /*******************************************************************************\n                                    Vault Pausing\n    *******************************************************************************/\n\n    /**\n     * @notice Indicates whether the Vault is paused.\n     * @dev If the Vault is paused, all non-Recovery Mode state-changing operations will revert.\n     * The implementation is in `VaultAdmin`.\n     *\n     * @return vaultPaused True if the Vault is paused\n     */\n    function isVaultPaused() external view returns (bool vaultPaused);\n\n    /**\n     * @notice Returns the paused status, and end times of the Vault's pause window and buffer period.\n     * @dev Balancer timestamps are 32 bits. The implementation is in `VaultAdmin`.\n     * @return vaultPaused True if the Vault is paused\n     * @return vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\n     * @return vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period\n     */\n    function getVaultPausedState()\n        external\n        view\n        returns (bool vaultPaused, uint32 vaultPauseWindowEndTime, uint32 vaultBufferPeriodEndTime);\n\n    /*******************************************************************************\n                                   Fees\n    *******************************************************************************/\n\n    /**\n     * @notice Gets the aggregate swap and yield fee percentages for a pool.\n     * @dev These are determined by the current protocol and pool creator fees, set in the `ProtocolFeeController`.\n     * These data are accessible as part of the `PoolConfig` (accessible through `getPoolConfig`), and also through\n     * the `IPoolInfo` on the pool itself. Standard Balancer pools implement this interface, but custom pools are not\n     * required to. We add this as a convenience function with the same interface, but it will fetch from the data\n     * from the Vault (via `VaultExtension`) to ensure it is always supported.\n     *\n     * @param pool Address of the pool\n     * @return aggregateSwapFeePercentage The aggregate percentage fee applied to swaps\n     * @return aggregateYieldFeePercentage The aggregate percentage fee applied to yield\n     */\n    function getAggregateFeePercentages(\n        address pool\n    ) external view returns (uint256 aggregateSwapFeePercentage, uint256 aggregateYieldFeePercentage);\n\n    /**\n     * @notice Collects accumulated aggregate swap and yield fees for the specified pool.\n     * @dev This function is called on the Vault's ProtocolFeeController, and fees are sent to that contract.\n     * The implementation is in `VaultAdmin`.\n     *\n     * @param pool The pool on which all aggregate fees should be collected\n     */\n    function collectAggregateFees(address pool) external;\n\n    /*******************************************************************************\n                                  ERC4626 Buffers\n    *******************************************************************************/\n\n    /**\n     * @notice Checks whether the wrapped token has an initialized buffer in the Vault.\n     * @dev An initialized buffer will have an asset registered in the Vault.\n     * The implementation is in `VaultExtension`.\n     *\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return isBufferInitialized True if the ERC4626 buffer is initialized\n     */\n    function isERC4626BufferInitialized(IERC4626 wrappedToken) external view returns (bool isBufferInitialized);\n\n    /**\n     * @notice Indicates whether the Vault buffers are paused.\n     * @dev When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true)\n     * will revert. This operation is reversible. The implementation is in `VaultAdmin`.\n     *\n     * @return buffersPaused True if the Vault buffers are paused\n     */\n    function areBuffersPaused() external view returns (bool buffersPaused);\n\n    /**\n     * @notice Returns the asset registered for a given wrapped token.\n     * @dev The asset can never change after buffer initialization. The implementation is in `VaultExtension`.\n     * Note that there is a `getBufferAsset` function in `VaultAdmin` that does the exact same thing. Even though it's\n     * technically redundant, we've included it here in case some users are already using that interface. In the Vault\n     * Explorer, both functions call `getERC4626BufferAsset`, as the implementation in `VaultExtension` needs one\n     * fewer hop than that in `VaultAdmin`, so it will use slightly less gas.\n     *\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return underlyingToken Address of the underlying token registered for the wrapper; `address(0)` if the buffer\n     * has not been initialized.\n     */\n    function getERC4626BufferAsset(IERC4626 wrappedToken) external view returns (address underlyingToken);\n\n    /**\n     * @notice Returns the asset registered for a given wrapped token.\n     * @dev The asset can never change after buffer initialization. The implementation would be in `VaultAdmin` when\n     * called directly from the Vault address, but this implementation calls the equivalent (but slightly cheaper)\n     * `getERC4626BufferAsset` function in `VaultExtension`.\n     *\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return underlyingToken Address of the underlying token registered for the wrapper; `address(0)` if the buffer\n     * has not been initialized.\n     */\n    function getBufferAsset(IERC4626 wrappedToken) external view returns (address underlyingToken);\n\n    /**\n     * @notice Returns the shares (internal buffer BPT) of a liquidity owner.\n     * @dev The \"liquidity owner\" is the user who deposited assets in the buffer.\n     * The implementation is in `VaultAdmin`.\n     *\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param liquidityOwner Address of the user that owns liquidity in the wrapped token's buffer\n     * @return ownerShares Amount of shares allocated to the liquidity owner, in native underlying token decimals\n     */\n    function getBufferOwnerShares(\n        IERC4626 wrappedToken,\n        address liquidityOwner\n    ) external view returns (uint256 ownerShares);\n\n    /**\n     * @notice Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\n     * @dev The implementation is in `VaultAdmin`.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return bufferShares Amount of supply shares of the buffer, in native underlying token decimals\n     */\n    function getBufferTotalShares(IERC4626 wrappedToken) external view returns (uint256 bufferShares);\n\n    /**\n     * @notice Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\n     * @dev The implementation is in `VaultAdmin`.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return underlyingBalanceRaw Amount of underlying tokens deposited into the buffer, in native token decimals\n     * @return wrappedBalanceRaw Amount of wrapped tokens deposited into the buffer, in native token decimals\n     */\n    function getBufferBalance(\n        IERC4626 wrappedToken\n    ) external view returns (uint256 underlyingBalanceRaw, uint256 wrappedBalanceRaw);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IAuthorizer } from \"./IAuthorizer.sol\";\nimport { IProtocolFeeController } from \"./IProtocolFeeController.sol\";\nimport { IVault } from \"./IVault.sol\";\nimport { IHooks } from \"./IHooks.sol\";\nimport \"./VaultTypes.sol\";\n\n/**\n * @notice Interface for functions defined on the `VaultExtension` contract.\n * @dev `VaultExtension` handles less critical or frequently used functions, since delegate calls through\n * the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and\n * liquidity operations.\n */\ninterface IVaultExtension {\n    /*******************************************************************************\n                              Constants and immutables\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the main Vault address.\n     * @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n     * @return vault The address of the main Vault\n     */\n    function vault() external view returns (IVault);\n\n    /**\n     * @notice Returns the VaultAdmin contract address.\n     * @dev The VaultAdmin contract mostly implements permissioned functions.\n     * @return vaultAdmin The address of the Vault admin\n     */\n    function getVaultAdmin() external view returns (address vaultAdmin);\n\n    /*******************************************************************************\n                              Transient Accounting\n    *******************************************************************************/\n\n    /**\n     * @notice Returns whether the Vault is unlocked (i.e., executing an operation).\n     * @dev The Vault must be unlocked to perform state-changing liquidity operations.\n     * @return unlocked True if the Vault is unlocked, false otherwise\n     */\n    function isUnlocked() external view returns (bool unlocked);\n\n    /**\n     *  @notice Returns the count of non-zero deltas.\n     *  @return nonzeroDeltaCount The current value of `_nonzeroDeltaCount`\n     */\n    function getNonzeroDeltaCount() external view returns (uint256 nonzeroDeltaCount);\n\n    /**\n     * @notice Retrieves the token delta for a specific token.\n     * @dev This function allows reading the value from the `_tokenDeltas` mapping.\n     * @param token The token for which the delta is being fetched\n     * @return tokenDelta The delta of the specified token\n     */\n    function getTokenDelta(IERC20 token) external view returns (int256 tokenDelta);\n\n    /**\n     * @notice Retrieves the reserve (i.e., total Vault balance) of a given token.\n     * @param token The token for which to retrieve the reserve\n     * @return reserveAmount The amount of reserves for the given token\n     */\n    function getReservesOf(IERC20 token) external view returns (uint256 reserveAmount);\n\n    /**\n     * @notice This flag is used to detect and tax \"round-trip\" interactions (adding and removing liquidity in the\n     * same pool).\n     * @dev Taxing remove liquidity proportional whenever liquidity was added in the same `unlock` call adds an extra\n     * layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional\n     * is the only standard way to exit a position without fees, and this flag is used to enable fees in that case.\n     * It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse\n     * than a simple swap for every pool type.\n     *\n     * @param pool Address of the pool to check\n     * @return liquidityAdded True if liquidity has been added to this pool in the current transaction\n     \n     * Note that there is no `sessionId` argument; it always returns the value for the current (i.e., latest) session.\n     */\n    function getAddLiquidityCalledFlag(address pool) external view returns (bool liquidityAdded);\n\n    /*******************************************************************************\n                                    Pool Registration\n    *******************************************************************************/\n\n    /**\n     * @notice Registers a pool, associating it with its factory and the tokens it manages.\n     * @dev A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely\n     * by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an\n     * additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused\n     * pool will automatically unpause. Balancer timestamps are 32 bits.\n     *\n     * A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a\n     * multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to\n     * the Vault.\n     *\n     * If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the\n     * authorizer.\n     *\n     * @param pool The address of the pool being registered\n     * @param tokenConfig An array of descriptors for the tokens the pool will manage\n     * @param swapFeePercentage The initial static swap fee percentage of the pool\n     * @param pauseWindowEndTime The timestamp after which it is no longer possible to pause the pool\n     * @param protocolFeeExempt If true, the pool's initial aggregate fees will be set to 0\n     * @param roleAccounts Addresses the Vault will allow to change certain pool settings\n     * @param poolHooksContract Contract that implements the hooks for the pool\n     * @param liquidityManagement Liquidity management flags with implemented methods\n     */\n    function registerPool(\n        address pool,\n        TokenConfig[] memory tokenConfig,\n        uint256 swapFeePercentage,\n        uint32 pauseWindowEndTime,\n        bool protocolFeeExempt,\n        PoolRoleAccounts calldata roleAccounts,\n        address poolHooksContract,\n        LiquidityManagement calldata liquidityManagement\n    ) external;\n\n    /**\n     * @notice Checks whether a pool is registered.\n     * @param pool Address of the pool to check\n     * @return registered True if the pool is registered, false otherwise\n     */\n    function isPoolRegistered(address pool) external view returns (bool registered);\n\n    /**\n     * @notice Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\n     * @param pool Address of the pool to initialize\n     * @param to Address that will receive the output BPT\n     * @param tokens Tokens used to seed the pool (must match the registered tokens)\n     * @param exactAmountsIn Exact amounts of input tokens\n     * @param minBptAmountOut Minimum amount of output pool tokens\n     * @param userData Additional (optional) data required for adding initial liquidity\n     * @return bptAmountOut Output pool token amount\n     */\n    function initialize(\n        address pool,\n        address to,\n        IERC20[] memory tokens,\n        uint256[] memory exactAmountsIn,\n        uint256 minBptAmountOut,\n        bytes memory userData\n    ) external returns (uint256 bptAmountOut);\n\n    /*******************************************************************************\n                                    Pool Information\n    *******************************************************************************/\n\n    /**\n     * @notice Checks whether a pool is initialized.\n     * @dev An initialized pool can be considered registered as well.\n     * @param pool Address of the pool to check\n     * @return initialized True if the pool is initialized, false otherwise\n     */\n    function isPoolInitialized(address pool) external view returns (bool initialized);\n\n    /**\n     * @notice Gets the tokens registered to a pool.\n     * @param pool Address of the pool\n     * @return tokens List of tokens in the pool\n     */\n    function getPoolTokens(address pool) external view returns (IERC20[] memory tokens);\n\n    /**\n     * @notice Gets pool token rates.\n     * @dev This function performs external calls if tokens are yield-bearing. All returned arrays are in token\n     * registration order.\n     *\n     * @param pool Address of the pool\n     * @return decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n     * calculations. FP(1) for 18-decimal tokens\n     * @return tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\n     */\n    function getPoolTokenRates(\n        address pool\n    ) external view returns (uint256[] memory decimalScalingFactors, uint256[] memory tokenRates);\n\n    /**\n     * @notice Returns comprehensive pool data for the given pool.\n     * @dev This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\n     * @param pool The address of the pool\n     * @return poolData The `PoolData` result\n     */\n    function getPoolData(address pool) external view returns (PoolData memory poolData);\n\n    /**\n     * @notice Gets the raw data for a pool: tokens, raw balances, scaling factors.\n     * @param pool Address of the pool\n     * @return tokens The pool tokens, sorted in registration order\n     * @return tokenInfo Token info structs (type, rate provider, yield flag), sorted in token registration order\n     * @return balancesRaw Current native decimal balances of the pool tokens, sorted in token registration order\n     * @return lastBalancesLiveScaled18 Last saved live balances, sorted in token registration order\n     */\n    function getPoolTokenInfo(\n        address pool\n    )\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            TokenInfo[] memory tokenInfo,\n            uint256[] memory balancesRaw,\n            uint256[] memory lastBalancesLiveScaled18\n        );\n\n    /**\n     * @notice Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in\n     * registration order.\n     *\n     * @param pool Address of the pool\n     * @return balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates\n     */\n    function getCurrentLiveBalances(address pool) external view returns (uint256[] memory balancesLiveScaled18);\n\n    /**\n     * @notice Gets the configuration parameters of a pool.\n     * @dev The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\n     * @param pool Address of the pool\n     * @return poolConfig The pool configuration as a `PoolConfig` struct\n     */\n    function getPoolConfig(address pool) external view returns (PoolConfig memory poolConfig);\n\n    /**\n     * @notice Gets the hooks configuration parameters of a pool.\n     * @dev The `HooksConfig` contains flags indicating which pool hooks are implemented.\n     * @param pool Address of the pool\n     * @return hooksConfig The hooks configuration as a `HooksConfig` struct\n     */\n    function getHooksConfig(address pool) external view returns (HooksConfig memory hooksConfig);\n\n    /**\n     * @notice The current rate of a pool token (BPT) = invariant / totalSupply.\n     * @param pool Address of the pool\n     * @return rate BPT rate\n     */\n    function getBptRate(address pool) external view returns (uint256 rate);\n\n    /*******************************************************************************\n                                 Balancer Pool Tokens\n    *******************************************************************************/\n\n    /**\n     * @notice Gets the total supply of a given ERC20 token.\n     * @param token The token address\n     * @return tokenTotalSupply Total supply of the token\n     */\n    function totalSupply(address token) external view returns (uint256 tokenTotalSupply);\n\n    /**\n     * @notice Gets the balance of an account for a given ERC20 token.\n     * @param token Address of the token\n     * @param account Address of the account\n     * @return tokenBalance Token balance of the account\n     */\n    function balanceOf(address token, address account) external view returns (uint256 tokenBalance);\n\n    /**\n     * @notice Gets the allowance of a spender for a given ERC20 token and owner.\n     * @param token Address of the token\n     * @param owner Address of the owner\n     * @param spender Address of the spender\n     * @return tokenAllowance Amount of tokens the spender is allowed to spend\n     */\n    function allowance(address token, address owner, address spender) external view returns (uint256 tokenAllowance);\n\n    /**\n     * @notice Approves a spender to spend pool tokens on behalf of sender.\n     * @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n     * the pool contract, so msg.sender is used as the token address.\n     *\n     * @param owner Address of the owner\n     * @param spender Address of the spender\n     * @param amount Amount of tokens to approve\n     * @return success True if successful, false otherwise\n     */\n    function approve(address owner, address spender, uint256 amount) external returns (bool success);\n\n    /*******************************************************************************\n                                     Pool Pausing\n    *******************************************************************************/\n\n    /**\n     * @notice Indicates whether a pool is paused.\n     * @dev If a pool is paused, all non-Recovery Mode state-changing operations will revert.\n     * @param pool The pool to be checked\n     * @return poolPaused True if the pool is paused\n     */\n    function isPoolPaused(address pool) external view returns (bool poolPaused);\n\n    /**\n     * @notice Returns the paused status, and end times of the Pool's pause window and buffer period.\n     * @dev Note that even when set to a paused state, the pool will automatically unpause at the end of\n     * the buffer period. Balancer timestamps are 32 bits.\n     *\n     * @param pool The pool whose data is requested\n     * @return poolPaused True if the Pool is paused\n     * @return poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\n     * @return poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\n     * @return pauseManager The pause manager, or the zero address\n     */\n    function getPoolPausedState(\n        address pool\n    )\n        external\n        view\n        returns (bool poolPaused, uint32 poolPauseWindowEndTime, uint32 poolBufferPeriodEndTime, address pauseManager);\n\n    /*******************************************************************************\n                                   ERC4626 Buffers\n    *******************************************************************************/\n\n    /**\n     * @notice Checks if the wrapped token has an initialized buffer in the Vault.\n     * @dev An initialized buffer should have an asset registered in the Vault.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return isBufferInitialized True if the ERC4626 buffer is initialized\n     */\n    function isERC4626BufferInitialized(IERC4626 wrappedToken) external view returns (bool isBufferInitialized);\n\n    /**\n     * @notice Gets the registered asset for a given buffer.\n     * @dev To avoid malicious wrappers (e.g., that might potentially change their asset after deployment), routers\n     * should never call `wrapper.asset()` directly, at least without checking it against the asset registered with\n     * the Vault on initialization.\n     *\n     * @param wrappedToken The wrapped token specifying the buffer\n     * @return asset The underlying asset of the wrapped token\n     */\n    function getERC4626BufferAsset(IERC4626 wrappedToken) external view returns (address asset);\n\n    /*******************************************************************************\n                                          Fees\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\n     * @param pool The address of the pool for which aggregate fees have been collected\n     * @param token The address of the token in which fees have been accumulated\n     * @return swapFeeAmount The total amount of fees accumulated in the specified token\n     */\n    function getAggregateSwapFeeAmount(address pool, IERC20 token) external view returns (uint256 swapFeeAmount);\n\n    /**\n     * @notice Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\n     * @param pool The address of the pool for which aggregate fees have been collected\n     * @param token The address of the token in which fees have been accumulated\n     * @return yieldFeeAmount The total amount of fees accumulated in the specified token\n     */\n    function getAggregateYieldFeeAmount(address pool, IERC20 token) external view returns (uint256 yieldFeeAmount);\n\n    /**\n     * @notice Fetches the static swap fee percentage for a given pool.\n     * @param pool The address of the pool whose static swap fee percentage is being queried\n     * @return swapFeePercentage The current static swap fee percentage for the specified pool\n     */\n    function getStaticSwapFeePercentage(address pool) external view returns (uint256 swapFeePercentage);\n\n    /**\n     * @notice Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\n     * @param pool The address of the pool whose roles are being queried\n     * @return roleAccounts A struct containing the role accounts for the pool (or 0 if unassigned)\n     */\n    function getPoolRoleAccounts(address pool) external view returns (PoolRoleAccounts memory roleAccounts);\n\n    /**\n     * @notice Query the current dynamic swap fee percentage of a pool, given a set of swap parameters.\n     * @dev Reverts if the hook doesn't return the success flag set to `true`.\n     * @param pool The pool\n     * @param swapParams The swap parameters used to compute the fee\n     * @return dynamicSwapFeePercentage The dynamic swap fee percentage\n     */\n    function computeDynamicSwapFeePercentage(\n        address pool,\n        PoolSwapParams memory swapParams\n    ) external view returns (uint256 dynamicSwapFeePercentage);\n\n    /**\n     * @notice Returns the Protocol Fee Controller address.\n     * @return protocolFeeController Address of the ProtocolFeeController\n     */\n    function getProtocolFeeController() external view returns (IProtocolFeeController protocolFeeController);\n\n    /*******************************************************************************\n                                     Recovery Mode\n    *******************************************************************************/\n\n    /**\n     * @notice Checks whether a pool is in Recovery Mode.\n     * @dev Recovery Mode enables a safe proportional withdrawal path, with no external calls.\n     * @param pool Address of the pool to check\n     * @return inRecoveryMode True if the pool is in Recovery Mode, false otherwise\n     */\n    function isPoolInRecoveryMode(address pool) external view returns (bool inRecoveryMode);\n\n    /**\n     * @notice Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out.\n     * The request is implemented by the Vault without any interaction with the pool, ensuring that\n     * it works the same for all pools, and cannot be disabled by a new pool type.\n     *\n     * @param pool Address of the pool\n     * @param from Address of user to burn pool tokens from\n     * @param exactBptAmountIn Input pool token amount\n     * @param minAmountsOut Minimum amounts of tokens to be received, sorted in token registration order\n     * @return amountsOut Actual calculated amounts of output tokens, sorted in token registration order\n     */\n    function removeLiquidityRecovery(\n        address pool,\n        address from,\n        uint256 exactBptAmountIn,\n        uint256[] memory minAmountsOut\n    ) external returns (uint256[] memory amountsOut);\n\n    /*******************************************************************************\n                                    Queries\n    *******************************************************************************/\n\n    /**\n     * @notice Performs a callback on msg.sender with arguments provided in `data`.\n     * @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\n     * anything else will revert.\n     *\n     * Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier.\n     *\n     * Allows the external calling of a function via the Vault contract to\n     * access Vault's functions guarded by `onlyWhenUnlocked`.\n     * `transient` modifier ensuring balances changes within the Vault are settled.\n     *\n     * @param data Contains function signature and args to be passed to the msg.sender\n     * @return result Resulting data from the call\n     */\n    function quote(bytes calldata data) external returns (bytes memory result);\n\n    /**\n     * @notice Performs a callback on msg.sender with arguments provided in `data`.\n     * @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\n     * anything else will revert.\n     *\n     * Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier.\n     *\n     * Allows the external calling of a function via the Vault contract to\n     * access Vault's functions guarded by `onlyWhenUnlocked`.\n     * `transient` modifier ensuring balances changes within the Vault are settled.\n     *\n     * This call always reverts, returning the result in the revert reason.\n     *\n     * @param data Contains function signature and args to be passed to the msg.sender\n     */\n    function quoteAndRevert(bytes calldata data) external;\n\n    /**\n     * @notice Returns true if queries are disabled on the Vault.\n     * @dev If true, queries might either be disabled temporarily or permanently.\n     * @return queryDisabled True if query functionality is reversibly disabled\n     */\n    function isQueryDisabled() external view returns (bool queryDisabled);\n\n    /**\n     * @notice Returns true if queries are disabled permanently; false if they are enabled.\n     * @dev This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\n     * @return queryDisabledPermanently True if query functionality is permanently disabled\n     */\n    function isQueryDisabledPermanently() external view returns (bool queryDisabledPermanently);\n\n    /**\n     * @notice Pools can use this event to emit event data from the Vault.\n     * @param eventKey Event key\n     * @param eventData Encoded event data\n     */\n    function emitAuxiliaryEvent(bytes32 eventKey, bytes calldata eventData) external;\n\n    /*******************************************************************************\n                                Authentication\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the Authorizer address.\n     * @dev The authorizer holds the permissions granted by governance. It is set on Vault deployment,\n     * and can be changed through a permissioned call.\n     *\n     * @return authorizer Address of the authorizer contract\n     */\n    function getAuthorizer() external view returns (IAuthorizer authorizer);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./VaultTypes.sol\";\n\n/**\n * @notice Interface for functions defined on the main Vault contract.\n * @dev These are generally \"critical path\" functions (swap, add/remove liquidity) that are in the main contract\n * for technical or performance reasons.\n */\ninterface IVaultMain {\n    /*******************************************************************************\n                              Transient Accounting\n    *******************************************************************************/\n\n    /**\n     * @notice Creates a context for a sequence of operations (i.e., \"unlocks\" the Vault).\n     * @dev Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`,\n     * meaning all balances for the caller have to be settled at the end.\n     *\n     * @param data Contains function signature and args to be passed to the msg.sender\n     * @return result Resulting data from the call\n     */\n    function unlock(bytes calldata data) external returns (bytes memory result);\n\n    /**\n     * @notice Settles deltas for a token; must be successful for the current lock to be released.\n     * @dev Protects the caller against leftover dust in the Vault for the token being settled. The caller\n     * should know in advance how many tokens were paid to the Vault, so it can provide it as a hint to discard any\n     * excess in the Vault balance.\n     *\n     * If the given hint is equal to or higher than the difference in reserves, the difference in reserves is given as\n     * credit to the caller. If it's higher, the caller sent fewer tokens than expected, so settlement would fail.\n     *\n     * If the given hint is lower than the difference in reserves, the hint is given as credit to the caller.\n     * In this case, the excess would be absorbed by the Vault (and reflected correctly in the reserves), but would\n     * not affect settlement.\n     *\n     * The credit supplied by the Vault can be calculated as `min(reserveDifference, amountHint)`, where the reserve\n     * difference equals current balance of the token minus existing reserves of the token when the function is called.\n     *\n     * @param token Address of the token\n     * @param amountHint Amount paid as reported by the caller\n     * @return credit Credit received in return of the payment\n     */\n    function settle(IERC20 token, uint256 amountHint) external returns (uint256 credit);\n\n    /**\n     * @notice Sends tokens to a recipient.\n     * @dev There is no inverse operation for this function. Transfer funds to the Vault and call `settle` to cancel\n     * debts.\n     *\n     * @param token Address of the token\n     * @param to Recipient address\n     * @param amount Amount of tokens to send\n     */\n    function sendTo(IERC20 token, address to, uint256 amount) external;\n\n    /***************************************************************************\n                                       Swaps\n    ***************************************************************************/\n\n    /**\n     * @notice Swaps tokens based on provided parameters.\n     * @dev All parameters are given in raw token decimal encoding.\n     * @param vaultSwapParams Parameters for the swap (see above for struct definition)\n     * @return amountCalculatedRaw Calculated swap amount\n     * @return amountInRaw Amount of input tokens for the swap\n     * @return amountOutRaw Amount of output tokens from the swap\n     */\n    function swap(\n        VaultSwapParams memory vaultSwapParams\n    ) external returns (uint256 amountCalculatedRaw, uint256 amountInRaw, uint256 amountOutRaw);\n\n    /***************************************************************************\n                                   Add Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Adds liquidity to a pool.\n     * @dev Caution should be exercised when adding liquidity because the Vault has the capability\n     * to transfer tokens from any user, given that it holds all allowances.\n     *\n     * @param params Parameters for the add liquidity (see above for struct definition)\n     * @return amountsIn Actual amounts of input tokens\n     * @return bptAmountOut Output pool token amount\n     * @return returnData Arbitrary (optional) data with an encoded response from the pool\n     */\n    function addLiquidity(\n        AddLiquidityParams memory params\n    ) external returns (uint256[] memory amountsIn, uint256 bptAmountOut, bytes memory returnData);\n\n    /***************************************************************************\n                                 Remove Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Removes liquidity from a pool.\n     * @dev Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user.\n     * Untrusted routers require prior approval from the user. This is the only function allowed to call\n     * _queryModeBalanceIncrease (and only in a query context).\n     *\n     * @param params Parameters for the remove liquidity (see above for struct definition)\n     * @return bptAmountIn Actual amount of BPT burned\n     * @return amountsOut Actual amounts of output tokens\n     * @return returnData Arbitrary (optional) data with an encoded response from the pool\n     */\n    function removeLiquidity(\n        RemoveLiquidityParams memory params\n    ) external returns (uint256 bptAmountIn, uint256[] memory amountsOut, bytes memory returnData);\n\n    /*******************************************************************************\n                                    Pool Information\n    *******************************************************************************/\n\n    /**\n     * @notice Gets the index of a token in a given pool.\n     * @dev Reverts if the pool is not registered, or if the token does not belong to the pool.\n     * @param pool Address of the pool\n     * @param token Address of the token\n     * @return tokenCount Number of tokens in the pool\n     * @return index Index corresponding to the given token in the pool's token list\n     */\n    function getPoolTokenCountAndIndexOfToken(\n        address pool,\n        IERC20 token\n    ) external view returns (uint256 tokenCount, uint256 index);\n\n    /*******************************************************************************\n                                 Balancer Pool Tokens\n    *******************************************************************************/\n\n    /**\n     * @notice Transfers pool token from owner to a recipient.\n     * @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n     * the pool contract, so msg.sender is used as the token address.\n     *\n     * @param owner Address of the owner\n     * @param to Address of the recipient\n     * @param amount Amount of tokens to transfer\n     * @return success True if successful, false otherwise\n     */\n    function transfer(address owner, address to, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Transfers pool token from a sender to a recipient using an allowance.\n     * @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n     * the pool contract, so msg.sender is used as the token address.\n     *\n     * @param spender Address allowed to perform the transfer\n     * @param from Address of the sender\n     * @param to Address of the recipient\n     * @param amount Amount of tokens to transfer\n     * @return success True if successful, false otherwise\n     */\n    function transferFrom(address spender, address from, address to, uint256 amount) external returns (bool success);\n\n    /*******************************************************************************\n                                  ERC4626 Buffers\n    *******************************************************************************/\n\n    /**\n     * @notice Wraps/unwraps tokens based on the parameters provided.\n     * @dev All parameters are given in raw token decimal encoding. It requires the buffer to be initialized,\n     * and uses the internal wrapped token buffer when it has enough liquidity to avoid external calls.\n     *\n     * @param params Parameters for the wrap/unwrap operation (see struct definition)\n     * @return amountCalculatedRaw Calculated swap amount\n     * @return amountInRaw Amount of input tokens for the swap\n     * @return amountOutRaw Amount of output tokens from the swap\n     */\n    function erc4626BufferWrapOrUnwrap(\n        BufferWrapOrUnwrapParams memory params\n    ) external returns (uint256 amountCalculatedRaw, uint256 amountInRaw, uint256 amountOutRaw);\n\n    /*******************************************************************************\n                                     Miscellaneous\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the VaultExtension contract address.\n     * @dev Function is in the main Vault contract. The VaultExtension handles less critical or frequently used\n     * functions, since delegate calls through the Vault are more expensive than direct calls.\n     *\n     * @return vaultExtension Address of the VaultExtension\n     */\n    function getVaultExtension() external view returns (address vaultExtension);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\n\nimport { IRateProvider } from \"../solidity-utils/helpers/IRateProvider.sol\";\n\n/**\n * @notice Represents a pool's liquidity management configuration.\n * @param disableUnbalancedLiquidity If set, liquidity can only be added or removed proportionally\n * @param enableAddLiquidityCustom If set, the pool has implemented `onAddLiquidityCustom`\n * @param enableRemoveLiquidityCustom If set, the pool has implemented `onRemoveLiquidityCustom`\n * @param enableDonation If set, the pool will not revert if liquidity is added with AddLiquidityKind.DONATION\n */\nstruct LiquidityManagement {\n    bool disableUnbalancedLiquidity;\n    bool enableAddLiquidityCustom;\n    bool enableRemoveLiquidityCustom;\n    bool enableDonation;\n}\n\n// @notice Custom type to store the entire configuration of the pool.\ntype PoolConfigBits is bytes32;\n\n/**\n * @notice Represents a pool's configuration (hooks configuration are separated in another struct).\n * @param liquidityManagement Flags related to adding/removing liquidity\n * @param staticSwapFeePercentage The pool's native swap fee\n * @param aggregateSwapFeePercentage The total swap fee charged, including protocol and pool creator components\n * @param aggregateYieldFeePercentage The total swap fee charged, including protocol and pool creator components\n * @param tokenDecimalDiffs Compressed storage of the token decimals of each pool token\n * @param pauseWindowEndTime Timestamp after which the pool cannot be paused\n * @param isPoolRegistered If true, the pool has been registered with the Vault\n * @param isPoolInitialized If true, the pool has been initialized with liquidity, and is available for trading\n * @param isPoolPaused If true, the pool has been paused (by governance or the pauseManager)\n * @param isPoolInRecoveryMode If true, the pool has been placed in recovery mode, enabling recovery mode withdrawals\n */\nstruct PoolConfig {\n    LiquidityManagement liquidityManagement;\n    uint256 staticSwapFeePercentage;\n    uint256 aggregateSwapFeePercentage;\n    uint256 aggregateYieldFeePercentage;\n    uint40 tokenDecimalDiffs;\n    uint32 pauseWindowEndTime;\n    bool isPoolRegistered;\n    bool isPoolInitialized;\n    bool isPoolPaused;\n    bool isPoolInRecoveryMode;\n}\n\n/**\n * @notice The flag portion of the `HooksConfig`.\n * @dev `enableHookAdjustedAmounts` must be true for all contracts that modify the `amountCalculated`\n * in after hooks. Otherwise, the Vault will ignore any \"hookAdjusted\" amounts. Setting any \"shouldCall\"\n * flags to true will cause the Vault to call the corresponding hook during operations.\n */\nstruct HookFlags {\n    bool enableHookAdjustedAmounts;\n    bool shouldCallBeforeInitialize;\n    bool shouldCallAfterInitialize;\n    bool shouldCallComputeDynamicSwapFee;\n    bool shouldCallBeforeSwap;\n    bool shouldCallAfterSwap;\n    bool shouldCallBeforeAddLiquidity;\n    bool shouldCallAfterAddLiquidity;\n    bool shouldCallBeforeRemoveLiquidity;\n    bool shouldCallAfterRemoveLiquidity;\n}\n\n/// @notice Represents a hook contract configuration for a pool (HookFlags + hooksContract address).\nstruct HooksConfig {\n    bool enableHookAdjustedAmounts;\n    bool shouldCallBeforeInitialize;\n    bool shouldCallAfterInitialize;\n    bool shouldCallComputeDynamicSwapFee;\n    bool shouldCallBeforeSwap;\n    bool shouldCallAfterSwap;\n    bool shouldCallBeforeAddLiquidity;\n    bool shouldCallAfterAddLiquidity;\n    bool shouldCallBeforeRemoveLiquidity;\n    bool shouldCallAfterRemoveLiquidity;\n    address hooksContract;\n}\n\n/**\n * @notice Represents temporary state used during a swap operation.\n * @param indexIn The zero-based index of tokenIn\n * @param indexOut The zero-based index of tokenOut\n * @param amountGivenScaled18 The amountGiven (i.e., tokenIn for ExactIn), adjusted for token decimals\n * @param swapFeePercentage The swap fee to be applied (might be static or dynamic)\n */\nstruct SwapState {\n    uint256 indexIn;\n    uint256 indexOut;\n    uint256 amountGivenScaled18;\n    uint256 swapFeePercentage;\n}\n\n/**\n * @notice Represents the Vault's configuration.\n * @param isQueryDisabled If set to true, disables query functionality of the Vault. Can be modified by governance\n * @param isVaultPaused If set to true, swaps and add/remove liquidity operations are halted\n * @param areBuffersPaused If set to true, the Vault wrap/unwrap primitives associated with buffers will be disabled\n */\nstruct VaultState {\n    bool isQueryDisabled;\n    bool isVaultPaused;\n    bool areBuffersPaused;\n}\n\n/**\n * @notice Represents the accounts holding certain roles for a given pool. This is passed in on pool registration.\n * @param pauseManager Account empowered to pause/unpause the pool (note that governance can always pause a pool)\n * @param swapFeeManager Account empowered to set static swap fees for a pool (or 0 to delegate to governance)\n * @param poolCreator Account empowered to set the pool creator fee (or 0 if all fees go to the protocol and LPs)\n */\nstruct PoolRoleAccounts {\n    address pauseManager;\n    address swapFeeManager;\n    address poolCreator;\n}\n\n/*******************************************************************************\n                                   Tokens\n*******************************************************************************/\n\n// Note that the following tokens are unsupported by the Vault. This list is not meant to be exhaustive, but covers\n// many common types of tokens that will not work with the Vault architecture. (See https://github.com/d-xo/weird-erc20\n// for examples of token features that are problematic for many protocols.)\n//\n// * Rebasing tokens (e.g., aDAI). The Vault keeps track of token balances in its internal accounting; any token whose\n//   balance changes asynchronously (i.e., outside a swap or liquidity operation), would get out-of-sync with this\n//   internal accounting. This category would also include \"airdrop\" tokens, whose balances can change unexpectedly.\n//\n// * Double entrypoint (e.g., old Synthetix tokens, now fixed). These could likewise bypass internal accounting by\n//   registering the token under one address, then accessing it through another. This is especially troublesome\n//   in v3, with the introduction of ERC4626 buffers.\n//\n// * Fee on transfer (e.g., PAXG). The Vault issues credits and debits according to given and calculated token amounts,\n//   and settlement assumes that the send/receive transfer functions transfer exactly the given number of tokens.\n//   If this is not the case, transactions will not settle. Unlike with the other types, which are fundamentally\n//   incompatible, it would be possible to design a Router to handle this - but we didn't try it. In any case, it's\n//   not supported in the current Routers.\n//\n// * Tokens with more than 18 decimals (e.g., YAM-V2). The Vault handles token scaling: i.e., handling I/O for\n//   amounts in native token decimals, but doing calculations with full 18-decimal precision. This requires reading\n//   and storing the decimals for each token. Since virtually all tokens are 18 or fewer decimals, and we have limited\n//   storage space, 18 was a reasonable maximum. Unlike the other types, this is enforceable by the Vault. Attempting\n//   to register such tokens will revert with `InvalidTokenDecimals`. Of course, we must also be able to read the token\n//   decimals, so the Vault only supports tokens that implement `IERC20Metadata.decimals`, and return a value less than\n//   or equal to 18.\n//\n//  * Token decimals are checked and stored only once, on registration. Valid tokens store their decimals as immutable\n//    variables or constants. Malicious tokens that don't respect this basic property would not work anywhere in DeFi.\n//\n// These types of tokens are supported but discouraged, as they don't tend to play well with AMMs generally.\n//\n// * Very low-decimal tokens (e.g., GUSD). The Vault has been extensively tested with 6-decimal tokens (e.g., USDC),\n//   but going much below that may lead to unanticipated effects due to precision loss, especially with smaller trade\n//   values.\n//\n// * Revert on zero value approval/transfer. The Vault has been tested against these, but peripheral contracts, such\n//   as hooks, might not have been designed with this in mind.\n//\n// * Other types from \"weird-erc20,\" such as upgradeable, pausable, or tokens with blocklists. We have seen cases\n//   where a token upgrade fails, \"bricking\" the token - and many operations on pools containing that token. Any\n//   sort of \"permissioned\" token that can make transfers fail can cause operations on pools containing them to\n//   revert. Even Recovery Mode cannot help then, as it does a proportional withdrawal of all tokens. If one of\n//   them is bricked, the whole operation will revert. Since v3 does not have \"internal balances\" like v2, there\n//   is no recourse.\n//\n//   Of course, many tokens in common use have some of these \"features\" (especially centralized stable coins), so\n//   we have to support them anyway. Working with common centralized tokens is a risk common to all of DeFi.\n\n/**\n * @notice Token types supported by the Vault.\n * @dev In general, pools may contain any combination of these tokens.\n *\n * STANDARD tokens (e.g., BAL, WETH) have no rate provider.\n * WITH_RATE tokens (e.g., wstETH) require a rate provider. These may be tokens like wstETH, which need to be wrapped\n * because the underlying stETH token is rebasing, and such tokens are unsupported by the Vault. They may also be\n * tokens like sEUR, which track an underlying asset, but are not yield-bearing. Finally, this encompasses\n * yield-bearing ERC4626 tokens, which can be used to facilitate swaps without requiring wrapping or unwrapping\n * in most cases. The `paysYieldFees` flag can be used to indicate whether a token is yield-bearing (e.g., waDAI),\n * not yield-bearing (e.g., sEUR), or yield-bearing but exempt from fees (e.g., in certain nested pools, where\n * yield fees are charged elsewhere).\n *\n * NB: STANDARD must always be the first enum element, so that newly initialized data structures default to Standard.\n */\nenum TokenType {\n    STANDARD,\n    WITH_RATE\n}\n\n/**\n * @notice Encapsulate the data required for the Vault to support a token of the given type.\n * @dev For STANDARD tokens, the rate provider address must be 0, and paysYieldFees must be false. All WITH_RATE tokens\n * need a rate provider, and may or may not be yield-bearing.\n *\n * At registration time, it is useful to include the token address along with the token parameters in the structure\n * passed to `registerPool`, as the alternative would be parallel arrays, which would be error prone and require\n * validation checks. `TokenConfig` is only used for registration, and is never put into storage (see `TokenInfo`).\n *\n * @param token The token address\n * @param tokenType The token type (see the enum for supported types)\n * @param rateProvider The rate provider for a token (see further documentation above)\n * @param paysYieldFees Flag indicating whether yield fees should be charged on this token\n */\nstruct TokenConfig {\n    IERC20 token;\n    TokenType tokenType;\n    IRateProvider rateProvider;\n    bool paysYieldFees;\n}\n\n/**\n * @notice This data structure is stored in `_poolTokenInfo`, a nested mapping from pool -> (token -> TokenInfo).\n * @dev Since the token is already the key of the nested mapping, it would be redundant (and an extra SLOAD) to store\n * it again in the struct. When we construct PoolData, the tokens are separated into their own array.\n *\n * @param tokenType The token type (see the enum for supported types)\n * @param rateProvider The rate provider for a token (see further documentation above)\n * @param paysYieldFees Flag indicating whether yield fees should be charged on this token\n */\nstruct TokenInfo {\n    TokenType tokenType;\n    IRateProvider rateProvider;\n    bool paysYieldFees;\n}\n\n/**\n * @notice Data structure used to represent the current pool state in memory\n * @param poolConfigBits Custom type to store the entire configuration of the pool.\n * @param tokens Pool tokens, sorted in token registration order\n * @param tokenInfo Configuration data for each token, sorted in token registration order\n * @param balancesRaw Token balances in native decimals\n * @param balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates\n * @param tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\n * @param decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n * calculations. It is 1e18 (FP 1) for 18-decimal tokens\n */\nstruct PoolData {\n    PoolConfigBits poolConfigBits;\n    IERC20[] tokens;\n    TokenInfo[] tokenInfo;\n    uint256[] balancesRaw;\n    uint256[] balancesLiveScaled18;\n    uint256[] tokenRates;\n    uint256[] decimalScalingFactors;\n}\n\nenum Rounding {\n    ROUND_UP,\n    ROUND_DOWN\n}\n\n/*******************************************************************************\n                                    Swaps\n*******************************************************************************/\n\nenum SwapKind {\n    EXACT_IN,\n    EXACT_OUT\n}\n\n// There are two \"SwapParams\" structs defined below. `VaultSwapParams` corresponds to the external swap API defined\n// in the Router contracts, which uses explicit token addresses, the amount given and limit on the calculated amount\n// expressed in native token decimals, and optional user data passed in from the caller.\n//\n// `PoolSwapParams` passes some of this information through (kind, userData), but \"translates\" the parameters to fit\n// the internal swap API used by `IBasePool`. It scales amounts to full 18-decimal precision, adds the token balances,\n// converts the raw token addresses to indices, and adds the address of the Router originating the request. It does\n// not need the limit, since this is checked at the Router level.\n\n/**\n * @notice Data passed into primary Vault `swap` operations.\n * @param kind Type of swap (Exact In or Exact Out)\n * @param pool The pool with the tokens being swapped\n * @param tokenIn The token entering the Vault (balance increases)\n * @param tokenOut The token leaving the Vault (balance decreases)\n * @param amountGivenRaw Amount specified for tokenIn or tokenOut (depending on the type of swap)\n * @param limitRaw Minimum or maximum value of the calculated amount (depending on the type of swap)\n * @param userData Additional (optional) user data\n */\nstruct VaultSwapParams {\n    SwapKind kind;\n    address pool;\n    IERC20 tokenIn;\n    IERC20 tokenOut;\n    uint256 amountGivenRaw;\n    uint256 limitRaw;\n    bytes userData;\n}\n\n/**\n * @notice Data for a swap operation, used by contracts implementing `IBasePool`.\n * @param kind Type of swap (exact in or exact out)\n * @param amountGivenScaled18 Amount given based on kind of the swap (e.g., tokenIn for EXACT_IN)\n * @param balancesScaled18 Current pool balances\n * @param indexIn Index of tokenIn\n * @param indexOut Index of tokenOut\n * @param router The address (usually a router contract) that initiated a swap operation on the Vault\n * @param userData Additional (optional) data required for the swap\n */\nstruct PoolSwapParams {\n    SwapKind kind;\n    uint256 amountGivenScaled18;\n    uint256[] balancesScaled18;\n    uint256 indexIn;\n    uint256 indexOut;\n    address router;\n    bytes userData;\n}\n\n/**\n * @notice Data for the hook after a swap operation.\n * @param kind Type of swap (exact in or exact out)\n * @param tokenIn Token to be swapped from\n * @param tokenOut Token to be swapped to\n * @param amountInScaled18 Amount of tokenIn (entering the Vault)\n * @param amountOutScaled18 Amount of tokenOut (leaving the Vault)\n * @param tokenInBalanceScaled18 Updated (after swap) balance of tokenIn\n * @param tokenOutBalanceScaled18 Updated (after swap) balance of tokenOut\n * @param amountCalculatedScaled18 Token amount calculated by the swap\n * @param amountCalculatedRaw Token amount calculated by the swap\n * @param router The address (usually a router contract) that initiated a swap operation on the Vault\n * @param pool Pool address\n * @param userData Additional (optional) data required for the swap\n */\nstruct AfterSwapParams {\n    SwapKind kind;\n    IERC20 tokenIn;\n    IERC20 tokenOut;\n    uint256 amountInScaled18;\n    uint256 amountOutScaled18;\n    uint256 tokenInBalanceScaled18;\n    uint256 tokenOutBalanceScaled18;\n    uint256 amountCalculatedScaled18;\n    uint256 amountCalculatedRaw;\n    address router;\n    address pool;\n    bytes userData;\n}\n\n/*******************************************************************************\n                                Add liquidity\n*******************************************************************************/\n\nenum AddLiquidityKind {\n    PROPORTIONAL,\n    UNBALANCED,\n    SINGLE_TOKEN_EXACT_OUT,\n    DONATION,\n    CUSTOM\n}\n\n/**\n * @notice Data for an add liquidity operation.\n * @param pool Address of the pool\n * @param to Address of user to mint to\n * @param maxAmountsIn Maximum amounts of input tokens\n * @param minBptAmountOut Minimum amount of output pool tokens\n * @param kind Add liquidity kind\n * @param userData Optional user data\n */\nstruct AddLiquidityParams {\n    address pool;\n    address to;\n    uint256[] maxAmountsIn;\n    uint256 minBptAmountOut;\n    AddLiquidityKind kind;\n    bytes userData;\n}\n\n/*******************************************************************************\n                                Remove liquidity\n*******************************************************************************/\n\nenum RemoveLiquidityKind {\n    PROPORTIONAL,\n    SINGLE_TOKEN_EXACT_IN,\n    SINGLE_TOKEN_EXACT_OUT,\n    CUSTOM\n}\n\n/**\n * @notice Data for an remove liquidity operation.\n * @param pool Address of the pool\n * @param from Address of user to burn from\n * @param maxBptAmountIn Maximum amount of input pool tokens\n * @param minAmountsOut Minimum amounts of output tokens\n * @param kind Remove liquidity kind\n * @param userData Optional user data\n */\nstruct RemoveLiquidityParams {\n    address pool;\n    address from;\n    uint256 maxBptAmountIn;\n    uint256[] minAmountsOut;\n    RemoveLiquidityKind kind;\n    bytes userData;\n}\n\n/*******************************************************************************\n                                Remove liquidity\n*******************************************************************************/\n\nenum WrappingDirection {\n    WRAP,\n    UNWRAP\n}\n\n/**\n * @notice Data for a wrap/unwrap operation.\n * @param kind Type of swap (Exact In or Exact Out)\n * @param direction Direction of the wrapping operation (Wrap or Unwrap)\n * @param wrappedToken Wrapped token, compatible with interface ERC4626\n * @param amountGivenRaw Amount specified for tokenIn or tokenOut (depends on the type of swap and wrapping direction)\n * @param limitRaw Minimum or maximum amount specified for the other token (depends on the type of swap and wrapping\n * direction)\n */\nstruct BufferWrapOrUnwrapParams {\n    SwapKind kind;\n    WrappingDirection direction;\n    IERC4626 wrappedToken;\n    uint256 amountGivenRaw;\n    uint256 limitRaw;\n}\n\n// Protocol Fees are 24-bit values. We transform them by multiplying by 1e11, so that they can be set to any value\n// between 0% and 100% (step 0.00001%). Protocol and pool creator fees are set in the `ProtocolFeeController`, and\n// ensure both constituent and aggregate fees do not exceed this precision.\nuint256 constant FEE_BITLENGTH = 24;\nuint256 constant FEE_SCALING_FACTOR = 1e11;\n// Used to ensure the safety of fee-related math (e.g., pools or hooks don't set it greater than 100%).\n// This value should work for practical purposes and is well within the max precision requirements.\nuint256 constant MAX_FEE_PERCENTAGE = 99.9999e16; // 99.9999%\n"},"@openzeppelin/contracts/interfaces/IERC4626.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"contracts/VaultExplorer.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IVaultExtension } from \"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\";\nimport { IVaultExplorer } from \"@balancer-labs/v3-interfaces/contracts/vault/IVaultExplorer.sol\";\nimport { IVault } from \"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\";\nimport {\n    TokenInfo,\n    PoolRoleAccounts,\n    PoolConfig,\n    HooksConfig,\n    PoolData,\n    PoolSwapParams\n} from \"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\";\n\ncontract VaultExplorer is IVaultExplorer {\n    IVault internal immutable _vault;\n\n    constructor(IVault vault) {\n        _vault = vault;\n    }\n\n    /***************************************************************************\n                                  Vault Contracts\n    ***************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function getVault() external view returns (address vault) {\n        return address(_vault);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getVaultExtension() external view returns (address vaultExtension) {\n        return _vault.getVaultExtension();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getVaultAdmin() external view returns (address vaultAdmin) {\n        return IVaultExtension(_vault.getVaultExtension()).getVaultAdmin();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getAuthorizer() external view returns (address authorizer) {\n        return address(_vault.getAuthorizer());\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getProtocolFeeController() external view returns (address protocolFeeController) {\n        return address(_vault.getProtocolFeeController());\n    }\n\n    /*******************************************************************************\n                              Transient Accounting\n    *******************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function isUnlocked() external view returns (bool unlocked) {\n        return _vault.isUnlocked();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getNonzeroDeltaCount() external view returns (uint256 nonzeroDeltaCount) {\n        return _vault.getNonzeroDeltaCount();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getTokenDelta(IERC20 token) external view returns (int256 tokenDelta) {\n        return _vault.getTokenDelta(token);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getReservesOf(IERC20 token) external view returns (uint256 reserveAmount) {\n        return _vault.getReservesOf(token);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getAddLiquidityCalledFlag(address pool) external view returns (bool liquidityAdded) {\n        return _vault.getAddLiquidityCalledFlag(pool);\n    }\n\n    /*******************************************************************************\n                                    Pool Registration\n    *******************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function isPoolRegistered(address pool) external view returns (bool registered) {\n        return _vault.isPoolRegistered(pool);\n    }\n\n    /*******************************************************************************\n                                    Pool Information\n    *******************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function isPoolInitialized(address pool) external view returns (bool initialized) {\n        return _vault.isPoolInitialized(pool);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getPoolTokens(address pool) external view returns (IERC20[] memory tokens) {\n        return _vault.getPoolTokens(pool);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getPoolTokenCountAndIndexOfToken(\n        address pool,\n        IERC20 token\n    ) external view returns (uint256 tokenCount, uint256 index) {\n        return _vault.getPoolTokenCountAndIndexOfToken(pool, token);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getPoolTokenRates(\n        address pool\n    ) external view returns (uint256[] memory decimalScalingFactors, uint256[] memory tokenRates) {\n        return _vault.getPoolTokenRates(pool);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getPoolData(address pool) external view returns (PoolData memory poolData) {\n        return _vault.getPoolData(pool);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getPoolTokenInfo(\n        address pool\n    )\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            TokenInfo[] memory tokenInfo,\n            uint256[] memory balancesRaw,\n            uint256[] memory lastBalancesLiveScaled18\n        )\n    {\n        return _vault.getPoolTokenInfo(pool);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getCurrentLiveBalances(address pool) external view returns (uint256[] memory balancesLiveScaled18) {\n        return _vault.getCurrentLiveBalances(pool);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getPoolConfig(address pool) external view returns (PoolConfig memory poolConfig) {\n        return _vault.getPoolConfig(pool);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getHooksConfig(address pool) external view returns (HooksConfig memory hooksConfig) {\n        return _vault.getHooksConfig(pool);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getBptRate(address pool) external view returns (uint256 rate) {\n        return _vault.getBptRate(pool);\n    }\n\n    /*******************************************************************************\n                                 Balancer Pool Tokens\n    *******************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function totalSupply(address token) external view returns (uint256 tokenTotalSupply) {\n        return _vault.totalSupply(token);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function balanceOf(address token, address account) external view returns (uint256 tokenBalance) {\n        return _vault.balanceOf(token, account);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function allowance(address token, address owner, address spender) external view returns (uint256 tokenAllowance) {\n        return _vault.allowance(token, owner, spender);\n    }\n\n    /*******************************************************************************\n                                     Pool Pausing\n    *******************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function isPoolPaused(address pool) external view returns (bool poolPaused) {\n        return _vault.isPoolPaused(pool);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getPoolPausedState(\n        address pool\n    )\n        external\n        view\n        returns (bool poolPaused, uint32 poolPauseWindowEndTime, uint32 poolBufferPeriodEndTime, address pauseManager)\n    {\n        return _vault.getPoolPausedState(pool);\n    }\n\n    /*******************************************************************************\n                                        Fees\n    *******************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function getAggregateSwapFeeAmount(address pool, IERC20 token) external view returns (uint256 swapFeeAmount) {\n        return _vault.getAggregateSwapFeeAmount(pool, token);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getAggregateYieldFeeAmount(address pool, IERC20 token) external view returns (uint256 yieldFeeAmount) {\n        return _vault.getAggregateYieldFeeAmount(pool, token);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getStaticSwapFeePercentage(address pool) external view returns (uint256 swapFeePercentage) {\n        return _vault.getStaticSwapFeePercentage(pool);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getPoolRoleAccounts(address pool) external view returns (PoolRoleAccounts memory roleAccounts) {\n        return _vault.getPoolRoleAccounts(pool);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function computeDynamicSwapFeePercentage(\n        address pool,\n        PoolSwapParams memory swapParams\n    ) external view returns (uint256 dynamicSwapFeePercentage) {\n        return _vault.computeDynamicSwapFeePercentage(pool, swapParams);\n    }\n\n    /*******************************************************************************\n                                    Recovery Mode\n    *******************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function isPoolInRecoveryMode(address pool) external view returns (bool inRecoveryMode) {\n        return _vault.isPoolInRecoveryMode(pool);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function enableRecoveryMode(address pool) external {\n        _vault.enableRecoveryMode(pool);\n    }\n\n    /*******************************************************************************\n                                    Queries\n    *******************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function isQueryDisabled() external view returns (bool queryDisabled) {\n        return _vault.isQueryDisabled();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function isQueryDisabledPermanently() external view returns (bool queryDisabledPermanently) {\n        return _vault.isQueryDisabledPermanently();\n    }\n\n    /***************************************************************************\n                              Vault Admin Functions\n    ***************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function getPauseWindowEndTime() external view returns (uint32 pauseWindowEndTime) {\n        return _vault.getPauseWindowEndTime();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getBufferPeriodDuration() external view returns (uint32 bufferPeriodDuration) {\n        return _vault.getBufferPeriodDuration();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getBufferPeriodEndTime() external view returns (uint32 bufferPeriodEndTime) {\n        return _vault.getBufferPeriodEndTime();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getMinimumPoolTokens() external view returns (uint256 minTokens) {\n        return _vault.getMinimumPoolTokens();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getMaximumPoolTokens() external view returns (uint256 maxTokens) {\n        return _vault.getMaximumPoolTokens();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getMinimumTradeAmount() external view returns (uint256 minimumTradeAmount) {\n        return _vault.getMinimumTradeAmount();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getMinimumWrapAmount() external view returns (uint256 minimumWrapAmount) {\n        return _vault.getMinimumWrapAmount();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getPoolMinimumTotalSupply() external view returns (uint256 poolMinimumTotalSupply) {\n        return _vault.getPoolMinimumTotalSupply();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getBufferMinimumTotalSupply() external view returns (uint256 bufferMinimumTotalSupply) {\n        return _vault.getBufferMinimumTotalSupply();\n    }\n\n    /*******************************************************************************\n                                    Vault Pausing\n    *******************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function isVaultPaused() external view returns (bool vaultPaused) {\n        return _vault.isVaultPaused();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getVaultPausedState()\n        external\n        view\n        returns (bool vaultPaused, uint32 vaultPauseWindowEndTime, uint32 vaultBufferPeriodEndTime)\n    {\n        return _vault.getVaultPausedState();\n    }\n\n    /*******************************************************************************\n                                        Fees\n    *******************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function getAggregateFeePercentages(\n        address pool\n    ) external view returns (uint256 aggregateSwapFeePercentage, uint256 aggregateYieldFeePercentage) {\n        PoolConfig memory poolConfig = _vault.getPoolConfig(pool);\n\n        return (poolConfig.aggregateSwapFeePercentage, poolConfig.aggregateYieldFeePercentage);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function collectAggregateFees(address pool) external {\n        _vault.getProtocolFeeController().collectAggregateFees(pool);\n    }\n\n    /*******************************************************************************\n                                  ERC4626 Buffers\n    *******************************************************************************/\n\n    /// @inheritdoc IVaultExplorer\n    function areBuffersPaused() external view returns (bool buffersPaused) {\n        return _vault.areBuffersPaused();\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getBufferAsset(IERC4626 wrappedToken) external view returns (address underlyingToken) {\n        return _vault.getERC4626BufferAsset(wrappedToken);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getERC4626BufferAsset(IERC4626 wrappedToken) external view returns (address underlyingToken) {\n        return _vault.getERC4626BufferAsset(wrappedToken);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getBufferOwnerShares(\n        IERC4626 wrappedToken,\n        address liquidityOwner\n    ) external view returns (uint256 ownerShares) {\n        return _vault.getBufferOwnerShares(wrappedToken, liquidityOwner);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getBufferTotalShares(IERC4626 wrappedToken) external view returns (uint256 bufferShares) {\n        return _vault.getBufferTotalShares(wrappedToken);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function getBufferBalance(\n        IERC4626 wrappedToken\n    ) external view returns (uint256 underlyingBalanceRaw, uint256 wrappedBalanceRaw) {\n        return _vault.getBufferBalance(wrappedToken);\n    }\n\n    /// @inheritdoc IVaultExplorer\n    function isERC4626BufferInitialized(IERC4626 wrappedToken) external view returns (bool isBufferInitialized) {\n        return _vault.isERC4626BufferInitialized(wrappedToken);\n    }\n}\n"}},"settings":{"viaIR":true,"evmVersion":"cancun","optimizer":{"enabled":true,"runs":9999,"details":{"yulDetails":{"optimizerSteps":"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu"}}},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"sources":{"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","exportedSymbols":{"IAuthentication":[14]},"id":15,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IAuthentication","contractDependencies":[],"contractKind":"interface","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"72:77:0","text":"@notice Simple interface for permissioned calling of external functions."},"fullyImplemented":false,"id":14,"linearizedBaseContracts":[14],"name":"IAuthentication","nameLocation":"159:15:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"181:67:0","text":"@notice The sender does not have permission to call a function."},"errorSelector":"23dada53","id":5,"name":"SenderNotAllowed","nameLocation":"259:16:0","nodeType":"ErrorDefinition","parameters":{"id":4,"nodeType":"ParameterList","parameters":[],"src":"275:2:0"},"src":"253:25:0"},{"documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"284:237:0","text":" @notice Returns the action identifier associated with the external function described by `selector`.\n @param selector The 4-byte selector of the permissioned function\n @return actionId The computed actionId"},"functionSelector":"851c1bb3","id":13,"implemented":false,"kind":"function","modifiers":[],"name":"getActionId","nameLocation":"535:11:0","nodeType":"FunctionDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8,"mutability":"mutable","name":"selector","nameLocation":"554:8:0","nodeType":"VariableDeclaration","scope":13,"src":"547:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":7,"name":"bytes4","nodeType":"ElementaryTypeName","src":"547:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"546:17:0"},"returnParameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"actionId","nameLocation":"595:8:0","nodeType":"VariableDeclaration","scope":13,"src":"587:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":10,"name":"bytes32","nodeType":"ElementaryTypeName","src":"587:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"586:18:0"},"scope":14,"src":"526:79:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":15,"src":"149:458:0","usedErrors":[5],"usedEvents":[]}],"src":"46:562:0"},"id":0},"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol","exportedSymbols":{"IRateProvider":[24]},"id":25,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":16,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IRateProvider","contractDependencies":[],"contractKind":"interface","documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"72:56:1","text":"@notice General interface for token exchange rates."},"fullyImplemented":false,"id":24,"linearizedBaseContracts":[24],"name":"IRateProvider","nameLocation":"138:13:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":18,"nodeType":"StructuredDocumentation","src":"158:573:1","text":" @notice An 18 decimal fixed point number representing the exchange rate of one token to another related token.\n @dev The meaning of this rate depends on the context. Note that there may be an error associated with a token\n rate, and the caller might require a certain rounding direction to ensure correctness. This (legacy) interface\n does not take a rounding direction or return an error, so great care must be taken when interpreting and using\n rates in downstream computations.\n @return rate The current token rate"},"functionSelector":"679aefce","id":23,"implemented":false,"kind":"function","modifiers":[],"name":"getRate","nameLocation":"745:7:1","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"752:2:1"},"returnParameters":{"id":22,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"rate","nameLocation":"786:4:1","nodeType":"VariableDeclaration","scope":23,"src":"778:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":20,"name":"uint256","nodeType":"ElementaryTypeName","src":"778:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"777:14:1"},"scope":24,"src":"736:56:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":25,"src":"128:666:1","usedErrors":[],"usedEvents":[]}],"src":"46:749:1"},"id":1},"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","exportedSymbols":{"IAuthorizer":[40]},"id":41,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":26,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IAuthorizer","contractDependencies":[],"contractKind":"interface","documentation":{"id":27,"nodeType":"StructuredDocumentation","src":"72:56:2","text":"@notice Interface to the Vault's permission system."},"fullyImplemented":false,"id":40,"linearizedBaseContracts":[40],"name":"IAuthorizer","nameLocation":"138:11:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":28,"nodeType":"StructuredDocumentation","src":"156:354:2","text":" @notice Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n @param actionId Identifier for the action to be performed\n @param account Account trying to perform the action\n @param where Target contract for the action\n @return success True if the action is permitted"},"functionSelector":"9be2a884","id":39,"implemented":false,"kind":"function","modifiers":[],"name":"canPerform","nameLocation":"524:10:2","nodeType":"FunctionDefinition","parameters":{"id":35,"nodeType":"ParameterList","parameters":[{"constant":false,"id":30,"mutability":"mutable","name":"actionId","nameLocation":"543:8:2","nodeType":"VariableDeclaration","scope":39,"src":"535:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":29,"name":"bytes32","nodeType":"ElementaryTypeName","src":"535:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":32,"mutability":"mutable","name":"account","nameLocation":"561:7:2","nodeType":"VariableDeclaration","scope":39,"src":"553:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"553:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":34,"mutability":"mutable","name":"where","nameLocation":"578:5:2","nodeType":"VariableDeclaration","scope":39,"src":"570:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33,"name":"address","nodeType":"ElementaryTypeName","src":"570:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"534:50:2"},"returnParameters":{"id":38,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"mutability":"mutable","name":"success","nameLocation":"613:7:2","nodeType":"VariableDeclaration","scope":39,"src":"608:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":36,"name":"bool","nodeType":"ElementaryTypeName","src":"608:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"607:14:2"},"scope":40,"src":"515:107:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":41,"src":"128:496:2","usedErrors":[],"usedEvents":[]}],"src":"46:579:2"},"id":2},"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol","exportedSymbols":{"AddLiquidityKind":[2790],"AfterSwapParams":[2784],"HookFlags":[2610],"IHooks":[242],"LiquidityManagement":[2563],"PoolSwapParams":[2755],"RemoveLiquidityKind":[2811],"SwapKind":[2718],"TokenConfig":[2677]},"id":243,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":42,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:3"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":51,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":243,"sourceUnit":2855,"src":"289:193:3","symbolAliases":[{"foreign":{"id":43,"name":"TokenConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"302:11:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":44,"name":"LiquidityManagement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"319:19:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":45,"name":"PoolSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"344:14:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":46,"name":"AfterSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2784,"src":"364:15:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":47,"name":"HookFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"385:9:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":48,"name":"AddLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2790,"src":"400:16:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":49,"name":"RemoveLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"422:19:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":50,"name":"SwapKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"447:8:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IHooks","contractDependencies":[],"contractKind":"interface","documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"484:490:3","text":" @notice Interface for pool hooks.\n @dev Hooks are functions invoked by the Vault at specific points in the flow of each operation. This guarantees that\n they are called in the correct order, and with the correct arguments. To maintain this security, these functions\n should only be called by the Vault. The recommended way to do this is to derive the hook contract from `BaseHooks`,\n then use the `onlyVault` modifier from `VaultGuard`. (See the examples in /pool-hooks.)"},"fullyImplemented":false,"id":242,"linearizedBaseContracts":[242],"name":"IHooks","nameLocation":"985:6:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":53,"nodeType":"StructuredDocumentation","src":"1205:769:3","text":" @notice Hook executed when a pool is registered with a non-zero hooks contract.\n @dev Returns true if registration was successful, and false to revert the pool registration.\n Make sure this function is properly implemented (e.g. check the factory, and check that the\n given pool is from the factory). The Vault address will be msg.sender.\n @param factory Address of the pool factory (contract deploying the pool)\n @param pool Address of the pool\n @param tokenConfig An array of descriptors for the tokens the pool will manage\n @param liquidityManagement Liquidity management flags indicating which functions are enabled\n @return success True if the hook allowed the registration, false otherwise"},"functionSelector":"0b89f182","id":69,"implemented":false,"kind":"function","modifiers":[],"name":"onRegister","nameLocation":"1988:10:3","nodeType":"FunctionDefinition","parameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55,"mutability":"mutable","name":"factory","nameLocation":"2016:7:3","nodeType":"VariableDeclaration","scope":69,"src":"2008:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":54,"name":"address","nodeType":"ElementaryTypeName","src":"2008:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":57,"mutability":"mutable","name":"pool","nameLocation":"2041:4:3","nodeType":"VariableDeclaration","scope":69,"src":"2033:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":56,"name":"address","nodeType":"ElementaryTypeName","src":"2033:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":61,"mutability":"mutable","name":"tokenConfig","nameLocation":"2076:11:3","nodeType":"VariableDeclaration","scope":69,"src":"2055:32:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2677_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenConfig[]"},"typeName":{"baseType":{"id":59,"nodeType":"UserDefinedTypeName","pathNode":{"id":58,"name":"TokenConfig","nameLocations":["2055:11:3"],"nodeType":"IdentifierPath","referencedDeclaration":2677,"src":"2055:11:3"},"referencedDeclaration":2677,"src":"2055:11:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenConfig_$2677_storage_ptr","typeString":"struct TokenConfig"}},"id":60,"nodeType":"ArrayTypeName","src":"2055:13:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2677_storage_$dyn_storage_ptr","typeString":"struct TokenConfig[]"}},"visibility":"internal"},{"constant":false,"id":64,"mutability":"mutable","name":"liquidityManagement","nameLocation":"2126:19:3","nodeType":"VariableDeclaration","scope":69,"src":"2097:48:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2563_calldata_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":63,"nodeType":"UserDefinedTypeName","pathNode":{"id":62,"name":"LiquidityManagement","nameLocations":["2097:19:3"],"nodeType":"IdentifierPath","referencedDeclaration":2563,"src":"2097:19:3"},"referencedDeclaration":2563,"src":"2097:19:3","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2563_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"}],"src":"1998:153:3"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67,"mutability":"mutable","name":"success","nameLocation":"2175:7:3","nodeType":"VariableDeclaration","scope":69,"src":"2170:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":66,"name":"bool","nodeType":"ElementaryTypeName","src":"2170:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2169:14:3"},"scope":242,"src":"1979:205:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"2190:412:3","text":" @notice Return the set of hooks implemented by the contract.\n @dev The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined\n (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero).\n `onRegister` is the only \"mandatory\" hook.\n @return hookFlags Flags indicating which hooks the contract supports"},"functionSelector":"d77153a7","id":76,"implemented":false,"kind":"function","modifiers":[],"name":"getHookFlags","nameLocation":"2616:12:3","nodeType":"FunctionDefinition","parameters":{"id":71,"nodeType":"ParameterList","parameters":[],"src":"2628:2:3"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"hookFlags","nameLocation":"2671:9:3","nodeType":"VariableDeclaration","scope":76,"src":"2654:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_HookFlags_$2610_memory_ptr","typeString":"struct HookFlags"},"typeName":{"id":73,"nodeType":"UserDefinedTypeName","pathNode":{"id":72,"name":"HookFlags","nameLocations":["2654:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":2610,"src":"2654:9:3"},"referencedDeclaration":2610,"src":"2654:9:3","typeDescriptions":{"typeIdentifier":"t_struct$_HookFlags_$2610_storage_ptr","typeString":"struct HookFlags"}},"visibility":"internal"}],"src":"2653:28:3"},"scope":242,"src":"2607:75:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":77,"nodeType":"StructuredDocumentation","src":"2897:484:3","text":" @notice Hook executed before pool initialization.\n @dev Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param exactAmountsIn Exact amounts of input tokens\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool wishes to proceed with initialization"},"functionSelector":"1c149e28","id":87,"implemented":false,"kind":"function","modifiers":[],"name":"onBeforeInitialize","nameLocation":"3395:18:3","nodeType":"FunctionDefinition","parameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"3431:14:3","nodeType":"VariableDeclaration","scope":87,"src":"3414:31:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":78,"name":"uint256","nodeType":"ElementaryTypeName","src":"3414:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":79,"nodeType":"ArrayTypeName","src":"3414:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":82,"mutability":"mutable","name":"userData","nameLocation":"3460:8:3","nodeType":"VariableDeclaration","scope":87,"src":"3447:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":81,"name":"bytes","nodeType":"ElementaryTypeName","src":"3447:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3413:56:3"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"success","nameLocation":"3493:7:3","nodeType":"VariableDeclaration","scope":87,"src":"3488:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":84,"name":"bool","nodeType":"ElementaryTypeName","src":"3488:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3487:14:3"},"scope":242,"src":"3386:116:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":88,"nodeType":"StructuredDocumentation","src":"3508:563:3","text":" @notice Hook to be executed after pool initialization.\n @dev Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param exactAmountsIn Exact amounts of input tokens\n @param bptAmountOut Amount of pool tokens minted during initialization\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool accepts the initialization results"},"functionSelector":"38be241d","id":100,"implemented":false,"kind":"function","modifiers":[],"name":"onAfterInitialize","nameLocation":"4085:17:3","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":91,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"4129:14:3","nodeType":"VariableDeclaration","scope":100,"src":"4112:31:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":89,"name":"uint256","nodeType":"ElementaryTypeName","src":"4112:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":90,"nodeType":"ArrayTypeName","src":"4112:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":93,"mutability":"mutable","name":"bptAmountOut","nameLocation":"4161:12:3","nodeType":"VariableDeclaration","scope":100,"src":"4153:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":92,"name":"uint256","nodeType":"ElementaryTypeName","src":"4153:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":95,"mutability":"mutable","name":"userData","nameLocation":"4196:8:3","nodeType":"VariableDeclaration","scope":100,"src":"4183:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":94,"name":"bytes","nodeType":"ElementaryTypeName","src":"4183:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4102:108:3"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"success","nameLocation":"4234:7:3","nodeType":"VariableDeclaration","scope":100,"src":"4229:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":97,"name":"bool","nodeType":"ElementaryTypeName","src":"4229:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4228:14:3"},"scope":242,"src":"4076:167:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"4461:953:3","text":" @notice Hook to be executed before adding liquidity.\n @dev Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The add liquidity operation type (e.g., proportional, custom)\n @param maxAmountsInScaled18 Maximum amounts of input tokens\n @param minBptAmountOut Minimum amount of output pool tokens\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool wishes to proceed with settlement"},"functionSelector":"45421ec7","id":123,"implemented":false,"kind":"function","modifiers":[],"name":"onBeforeAddLiquidity","nameLocation":"5428:20:3","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"router","nameLocation":"5466:6:3","nodeType":"VariableDeclaration","scope":123,"src":"5458:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":102,"name":"address","nodeType":"ElementaryTypeName","src":"5458:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":105,"mutability":"mutable","name":"pool","nameLocation":"5490:4:3","nodeType":"VariableDeclaration","scope":123,"src":"5482:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":104,"name":"address","nodeType":"ElementaryTypeName","src":"5482:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":108,"mutability":"mutable","name":"kind","nameLocation":"5521:4:3","nodeType":"VariableDeclaration","scope":123,"src":"5504:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2790","typeString":"enum AddLiquidityKind"},"typeName":{"id":107,"nodeType":"UserDefinedTypeName","pathNode":{"id":106,"name":"AddLiquidityKind","nameLocations":["5504:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":2790,"src":"5504:16:3"},"referencedDeclaration":2790,"src":"5504:16:3","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2790","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":111,"mutability":"mutable","name":"maxAmountsInScaled18","nameLocation":"5552:20:3","nodeType":"VariableDeclaration","scope":123,"src":"5535:37:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":109,"name":"uint256","nodeType":"ElementaryTypeName","src":"5535:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":110,"nodeType":"ArrayTypeName","src":"5535:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":113,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"5590:15:3","nodeType":"VariableDeclaration","scope":123,"src":"5582:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":112,"name":"uint256","nodeType":"ElementaryTypeName","src":"5582:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":116,"mutability":"mutable","name":"balancesScaled18","nameLocation":"5632:16:3","nodeType":"VariableDeclaration","scope":123,"src":"5615:33:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":114,"name":"uint256","nodeType":"ElementaryTypeName","src":"5615:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":115,"nodeType":"ArrayTypeName","src":"5615:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":118,"mutability":"mutable","name":"userData","nameLocation":"5671:8:3","nodeType":"VariableDeclaration","scope":123,"src":"5658:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":117,"name":"bytes","nodeType":"ElementaryTypeName","src":"5658:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5448:237:3"},"returnParameters":{"id":122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"mutability":"mutable","name":"success","nameLocation":"5709:7:3","nodeType":"VariableDeclaration","scope":123,"src":"5704:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":120,"name":"bool","nodeType":"ElementaryTypeName","src":"5704:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5703:14:3"},"scope":242,"src":"5419:299:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":124,"nodeType":"StructuredDocumentation","src":"5724:1250:3","text":" @notice Hook to be executed after adding liquidity.\n @dev Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore\n `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The add liquidity operation type (e.g., proportional, custom)\n @param amountsInScaled18 Actual amounts of tokens added, sorted in token registration order\n @param amountsInRaw Actual amounts of tokens added, sorted in token registration order\n @param bptAmountOut Amount of pool tokens minted\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Additional (optional) data provided by the user\n @return success True if the pool wishes to proceed with settlement\n @return hookAdjustedAmountsInRaw New amountsInRaw, potentially modified by the hook"},"functionSelector":"976907cc","id":152,"implemented":false,"kind":"function","modifiers":[],"name":"onAfterAddLiquidity","nameLocation":"6988:19:3","nodeType":"FunctionDefinition","parameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":126,"mutability":"mutable","name":"router","nameLocation":"7025:6:3","nodeType":"VariableDeclaration","scope":152,"src":"7017:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"7017:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":128,"mutability":"mutable","name":"pool","nameLocation":"7049:4:3","nodeType":"VariableDeclaration","scope":152,"src":"7041:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":127,"name":"address","nodeType":"ElementaryTypeName","src":"7041:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"kind","nameLocation":"7080:4:3","nodeType":"VariableDeclaration","scope":152,"src":"7063:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2790","typeString":"enum AddLiquidityKind"},"typeName":{"id":130,"nodeType":"UserDefinedTypeName","pathNode":{"id":129,"name":"AddLiquidityKind","nameLocations":["7063:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":2790,"src":"7063:16:3"},"referencedDeclaration":2790,"src":"7063:16:3","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2790","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"amountsInScaled18","nameLocation":"7111:17:3","nodeType":"VariableDeclaration","scope":152,"src":"7094:34:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":132,"name":"uint256","nodeType":"ElementaryTypeName","src":"7094:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":133,"nodeType":"ArrayTypeName","src":"7094:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":137,"mutability":"mutable","name":"amountsInRaw","nameLocation":"7155:12:3","nodeType":"VariableDeclaration","scope":152,"src":"7138:29:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":135,"name":"uint256","nodeType":"ElementaryTypeName","src":"7138:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":136,"nodeType":"ArrayTypeName","src":"7138:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":139,"mutability":"mutable","name":"bptAmountOut","nameLocation":"7185:12:3","nodeType":"VariableDeclaration","scope":152,"src":"7177:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":138,"name":"uint256","nodeType":"ElementaryTypeName","src":"7177:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":142,"mutability":"mutable","name":"balancesScaled18","nameLocation":"7224:16:3","nodeType":"VariableDeclaration","scope":152,"src":"7207:33:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":140,"name":"uint256","nodeType":"ElementaryTypeName","src":"7207:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":141,"nodeType":"ArrayTypeName","src":"7207:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":144,"mutability":"mutable","name":"userData","nameLocation":"7263:8:3","nodeType":"VariableDeclaration","scope":152,"src":"7250:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":143,"name":"bytes","nodeType":"ElementaryTypeName","src":"7250:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7007:270:3"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"success","nameLocation":"7301:7:3","nodeType":"VariableDeclaration","scope":152,"src":"7296:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":146,"name":"bool","nodeType":"ElementaryTypeName","src":"7296:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":150,"mutability":"mutable","name":"hookAdjustedAmountsInRaw","nameLocation":"7327:24:3","nodeType":"VariableDeclaration","scope":152,"src":"7310:41:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":148,"name":"uint256","nodeType":"ElementaryTypeName","src":"7310:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":149,"nodeType":"ArrayTypeName","src":"7310:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"7295:57:3"},"scope":242,"src":"6979:374:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":153,"nodeType":"StructuredDocumentation","src":"7572:992:3","text":" @notice Hook to be executed before removing liquidity.\n @dev Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The type of remove liquidity operation (e.g., proportional, custom)\n @param maxBptAmountIn Maximum amount of input pool tokens\n @param minAmountsOutScaled18 Minimum output amounts, sorted in token registration order\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool wishes to proceed with settlement"},"functionSelector":"ba5f9f40","id":175,"implemented":false,"kind":"function","modifiers":[],"name":"onBeforeRemoveLiquidity","nameLocation":"8578:23:3","nodeType":"FunctionDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"router","nameLocation":"8619:6:3","nodeType":"VariableDeclaration","scope":175,"src":"8611:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":154,"name":"address","nodeType":"ElementaryTypeName","src":"8611:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":157,"mutability":"mutable","name":"pool","nameLocation":"8643:4:3","nodeType":"VariableDeclaration","scope":175,"src":"8635:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":156,"name":"address","nodeType":"ElementaryTypeName","src":"8635:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":160,"mutability":"mutable","name":"kind","nameLocation":"8677:4:3","nodeType":"VariableDeclaration","scope":175,"src":"8657:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2811","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":159,"nodeType":"UserDefinedTypeName","pathNode":{"id":158,"name":"RemoveLiquidityKind","nameLocations":["8657:19:3"],"nodeType":"IdentifierPath","referencedDeclaration":2811,"src":"8657:19:3"},"referencedDeclaration":2811,"src":"8657:19:3","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2811","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":162,"mutability":"mutable","name":"maxBptAmountIn","nameLocation":"8699:14:3","nodeType":"VariableDeclaration","scope":175,"src":"8691:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":161,"name":"uint256","nodeType":"ElementaryTypeName","src":"8691:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":165,"mutability":"mutable","name":"minAmountsOutScaled18","nameLocation":"8740:21:3","nodeType":"VariableDeclaration","scope":175,"src":"8723:38:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":163,"name":"uint256","nodeType":"ElementaryTypeName","src":"8723:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":164,"nodeType":"ArrayTypeName","src":"8723:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":168,"mutability":"mutable","name":"balancesScaled18","nameLocation":"8788:16:3","nodeType":"VariableDeclaration","scope":175,"src":"8771:33:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":166,"name":"uint256","nodeType":"ElementaryTypeName","src":"8771:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":167,"nodeType":"ArrayTypeName","src":"8771:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"userData","nameLocation":"8827:8:3","nodeType":"VariableDeclaration","scope":175,"src":"8814:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":169,"name":"bytes","nodeType":"ElementaryTypeName","src":"8814:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8601:240:3"},"returnParameters":{"id":174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"mutability":"mutable","name":"success","nameLocation":"8865:7:3","nodeType":"VariableDeclaration","scope":175,"src":"8860:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":172,"name":"bool","nodeType":"ElementaryTypeName","src":"8860:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8859:14:3"},"scope":242,"src":"8569:305:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"8880:1276:3","text":" @notice Hook to be executed after removing liquidity.\n @dev Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore\n `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The type of remove liquidity operation (e.g., proportional, custom)\n @param bptAmountIn Amount of pool tokens to burn\n @param amountsOutScaled18 Scaled amount of tokens to receive, sorted in token registration order\n @param amountsOutRaw Actual amount of tokens to receive, sorted in token registration order\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Additional (optional) data provided by the user\n @return success True if the pool wishes to proceed with settlement\n @return hookAdjustedAmountsOutRaw New amountsOutRaw, potentially modified by the hook"},"functionSelector":"2754888d","id":204,"implemented":false,"kind":"function","modifiers":[],"name":"onAfterRemoveLiquidity","nameLocation":"10170:22:3","nodeType":"FunctionDefinition","parameters":{"id":197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"router","nameLocation":"10210:6:3","nodeType":"VariableDeclaration","scope":204,"src":"10202:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":177,"name":"address","nodeType":"ElementaryTypeName","src":"10202:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":180,"mutability":"mutable","name":"pool","nameLocation":"10234:4:3","nodeType":"VariableDeclaration","scope":204,"src":"10226:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":179,"name":"address","nodeType":"ElementaryTypeName","src":"10226:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":183,"mutability":"mutable","name":"kind","nameLocation":"10268:4:3","nodeType":"VariableDeclaration","scope":204,"src":"10248:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2811","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":182,"nodeType":"UserDefinedTypeName","pathNode":{"id":181,"name":"RemoveLiquidityKind","nameLocations":["10248:19:3"],"nodeType":"IdentifierPath","referencedDeclaration":2811,"src":"10248:19:3"},"referencedDeclaration":2811,"src":"10248:19:3","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2811","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":185,"mutability":"mutable","name":"bptAmountIn","nameLocation":"10290:11:3","nodeType":"VariableDeclaration","scope":204,"src":"10282:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":184,"name":"uint256","nodeType":"ElementaryTypeName","src":"10282:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":188,"mutability":"mutable","name":"amountsOutScaled18","nameLocation":"10328:18:3","nodeType":"VariableDeclaration","scope":204,"src":"10311:35:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"10311:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":187,"nodeType":"ArrayTypeName","src":"10311:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":191,"mutability":"mutable","name":"amountsOutRaw","nameLocation":"10373:13:3","nodeType":"VariableDeclaration","scope":204,"src":"10356:30:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":189,"name":"uint256","nodeType":"ElementaryTypeName","src":"10356:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":190,"nodeType":"ArrayTypeName","src":"10356:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":194,"mutability":"mutable","name":"balancesScaled18","nameLocation":"10413:16:3","nodeType":"VariableDeclaration","scope":204,"src":"10396:33:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":192,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":193,"nodeType":"ArrayTypeName","src":"10396:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":196,"mutability":"mutable","name":"userData","nameLocation":"10452:8:3","nodeType":"VariableDeclaration","scope":204,"src":"10439:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":195,"name":"bytes","nodeType":"ElementaryTypeName","src":"10439:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10192:274:3"},"returnParameters":{"id":203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":199,"mutability":"mutable","name":"success","nameLocation":"10490:7:3","nodeType":"VariableDeclaration","scope":204,"src":"10485:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":198,"name":"bool","nodeType":"ElementaryTypeName","src":"10485:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":202,"mutability":"mutable","name":"hookAdjustedAmountsOutRaw","nameLocation":"10516:25:3","nodeType":"VariableDeclaration","scope":204,"src":"10499:42:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":200,"name":"uint256","nodeType":"ElementaryTypeName","src":"10499:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":201,"nodeType":"ArrayTypeName","src":"10499:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10484:58:3"},"scope":242,"src":"10161:382:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":205,"nodeType":"StructuredDocumentation","src":"10753:556:3","text":" @notice Called before a swap to give the Pool an opportunity to perform actions.\n @dev Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the\n `onlyVault` modifier to guarantee this is only called by the Vault.\n @param params Swap parameters (see PoolSwapParams for struct definition)\n @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n @return success True if the pool wishes to proceed with settlement"},"functionSelector":"5211fa77","id":215,"implemented":false,"kind":"function","modifiers":[],"name":"onBeforeSwap","nameLocation":"11323:12:3","nodeType":"FunctionDefinition","parameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":208,"mutability":"mutable","name":"params","nameLocation":"11360:6:3","nodeType":"VariableDeclaration","scope":215,"src":"11336:30:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2755_calldata_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":207,"nodeType":"UserDefinedTypeName","pathNode":{"id":206,"name":"PoolSwapParams","nameLocations":["11336:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":2755,"src":"11336:14:3"},"referencedDeclaration":2755,"src":"11336:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2755_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"},{"constant":false,"id":210,"mutability":"mutable","name":"pool","nameLocation":"11376:4:3","nodeType":"VariableDeclaration","scope":215,"src":"11368:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":209,"name":"address","nodeType":"ElementaryTypeName","src":"11368:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11335:46:3"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"success","nameLocation":"11405:7:3","nodeType":"VariableDeclaration","scope":215,"src":"11400:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":212,"name":"bool","nodeType":"ElementaryTypeName","src":"11400:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11399:14:3"},"scope":242,"src":"11314:100:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":216,"nodeType":"StructuredDocumentation","src":"11420:671:3","text":" @notice Called after a swap to perform further actions once the balances have been updated by the swap.\n @dev Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore\n `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should\n use the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param params Swap parameters (see above for struct definition)\n @return success True if the pool wishes to proceed with settlement\n @return hookAdjustedAmountCalculatedRaw New amount calculated, potentially modified by the hook"},"functionSelector":"18b6eb55","id":226,"implemented":false,"kind":"function","modifiers":[],"name":"onAfterSwap","nameLocation":"12105:11:3","nodeType":"FunctionDefinition","parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"params","nameLocation":"12151:6:3","nodeType":"VariableDeclaration","scope":226,"src":"12126:31:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AfterSwapParams_$2784_calldata_ptr","typeString":"struct AfterSwapParams"},"typeName":{"id":218,"nodeType":"UserDefinedTypeName","pathNode":{"id":217,"name":"AfterSwapParams","nameLocations":["12126:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":2784,"src":"12126:15:3"},"referencedDeclaration":2784,"src":"12126:15:3","typeDescriptions":{"typeIdentifier":"t_struct$_AfterSwapParams_$2784_storage_ptr","typeString":"struct AfterSwapParams"}},"visibility":"internal"}],"src":"12116:47:3"},"returnParameters":{"id":225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"success","nameLocation":"12187:7:3","nodeType":"VariableDeclaration","scope":226,"src":"12182:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":221,"name":"bool","nodeType":"ElementaryTypeName","src":"12182:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":224,"mutability":"mutable","name":"hookAdjustedAmountCalculatedRaw","nameLocation":"12204:31:3","nodeType":"VariableDeclaration","scope":226,"src":"12196:39:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":223,"name":"uint256","nodeType":"ElementaryTypeName","src":"12196:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12181:55:3"},"scope":242,"src":"12096:141:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":227,"nodeType":"StructuredDocumentation","src":"12243:795:3","text":" @notice Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees.\n @dev Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param params Swap parameters (see PoolSwapParams for struct definition)\n @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n @param staticSwapFeePercentage 18-decimal FP value of the static swap fee percentage, for reference\n @return success True if the pool wishes to proceed with settlement\n @return dynamicSwapFeePercentage Value of the swap fee percentage, as an 18-decimal FP value"},"functionSelector":"a0e8f5ac","id":241,"implemented":false,"kind":"function","modifiers":[],"name":"onComputeDynamicSwapFeePercentage","nameLocation":"13052:33:3","nodeType":"FunctionDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"params","nameLocation":"13119:6:3","nodeType":"VariableDeclaration","scope":241,"src":"13095:30:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2755_calldata_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":229,"nodeType":"UserDefinedTypeName","pathNode":{"id":228,"name":"PoolSwapParams","nameLocations":["13095:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":2755,"src":"13095:14:3"},"referencedDeclaration":2755,"src":"13095:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2755_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"},{"constant":false,"id":232,"mutability":"mutable","name":"pool","nameLocation":"13143:4:3","nodeType":"VariableDeclaration","scope":241,"src":"13135:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":231,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":234,"mutability":"mutable","name":"staticSwapFeePercentage","nameLocation":"13165:23:3","nodeType":"VariableDeclaration","scope":241,"src":"13157:31:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":233,"name":"uint256","nodeType":"ElementaryTypeName","src":"13157:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13085:109:3"},"returnParameters":{"id":240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"success","nameLocation":"13223:7:3","nodeType":"VariableDeclaration","scope":241,"src":"13218:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":236,"name":"bool","nodeType":"ElementaryTypeName","src":"13218:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":239,"mutability":"mutable","name":"dynamicSwapFeePercentage","nameLocation":"13240:24:3","nodeType":"VariableDeclaration","scope":241,"src":"13232:32:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":238,"name":"uint256","nodeType":"ElementaryTypeName","src":"13232:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13217:48:3"},"scope":242,"src":"13043:223:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":243,"src":"975:12293:3","usedErrors":[],"usedEvents":[]}],"src":"46:13223:3"},"id":3},"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","exportedSymbols":{"IERC20":[3102],"IProtocolFeeController":[580],"IVault":[618]},"id":581,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":244,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":246,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":581,"sourceUnit":3103,"src":"72:72:4","symbolAliases":[{"foreign":{"id":245,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"81:6:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"./IVault.sol","id":248,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":581,"sourceUnit":619,"src":"146:38:4","symbolAliases":[{"foreign":{"id":247,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"155:6:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IProtocolFeeController","contractDependencies":[],"contractKind":"interface","documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"186:80:4","text":"@notice Contract that handles protocol and pool creator fees for the Vault."},"fullyImplemented":false,"id":580,"linearizedBaseContracts":[580],"name":"IProtocolFeeController","nameLocation":"276:22:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":250,"nodeType":"StructuredDocumentation","src":"305:157:4","text":" @notice Emitted when the protocol swap fee percentage is updated.\n @param swapFeePercentage The updated protocol swap fee percentage"},"eventSelector":"bf5ac0fc89bbf8819be79f280146b65ea2af2a9705cd9cfe0c9d93f6e87f307d","id":254,"name":"GlobalProtocolSwapFeePercentageChanged","nameLocation":"473:38:4","nodeType":"EventDefinition","parameters":{"id":253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"520:17:4","nodeType":"VariableDeclaration","scope":254,"src":"512:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":251,"name":"uint256","nodeType":"ElementaryTypeName","src":"512:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"511:27:4"},"src":"467:72:4"},{"anonymous":false,"documentation":{"id":255,"nodeType":"StructuredDocumentation","src":"545:160:4","text":" @notice Emitted when the protocol yield fee percentage is updated.\n @param yieldFeePercentage The updated protocol yield fee percentage"},"eventSelector":"48c5c3ccec54c4e0ea08d83d838fa9bb725eb0b52c591cb00bd6e63bca8c44f6","id":259,"name":"GlobalProtocolYieldFeePercentageChanged","nameLocation":"716:39:4","nodeType":"EventDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"indexed":false,"mutability":"mutable","name":"yieldFeePercentage","nameLocation":"764:18:4","nodeType":"VariableDeclaration","scope":259,"src":"756:26:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":256,"name":"uint256","nodeType":"ElementaryTypeName","src":"756:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"755:28:4"},"src":"710:74:4"},{"anonymous":false,"documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"790:245:4","text":" @notice Emitted when the protocol swap fee percentage is updated for a specific pool.\n @param pool The pool whose protocol swap fee will be changed\n @param swapFeePercentage The updated protocol swap fee percentage"},"eventSelector":"97cff4b6e6d80e307faab8b730d9f69264e860f2e0e10cfb8cdaf8a2f44e839e","id":266,"name":"ProtocolSwapFeePercentageChanged","nameLocation":"1046:32:4","nodeType":"EventDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1095:4:4","nodeType":"VariableDeclaration","scope":266,"src":"1079:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"1079:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":264,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"1109:17:4","nodeType":"VariableDeclaration","scope":266,"src":"1101:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":263,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1078:49:4"},"src":"1040:88:4"},{"anonymous":false,"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"1134:249:4","text":" @notice Emitted when the protocol yield fee percentage is updated for a specific pool.\n @param pool The pool whose protocol yield fee will be changed\n @param yieldFeePercentage The updated protocol yield fee percentage"},"eventSelector":"af47449d1c3597ccc9f5ec3acad03cef57aa90a719000441b320687087948efd","id":273,"name":"ProtocolYieldFeePercentageChanged","nameLocation":"1394:33:4","nodeType":"EventDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1444:4:4","nodeType":"VariableDeclaration","scope":273,"src":"1428:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":268,"name":"address","nodeType":"ElementaryTypeName","src":"1428:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":271,"indexed":false,"mutability":"mutable","name":"yieldFeePercentage","nameLocation":"1458:18:4","nodeType":"VariableDeclaration","scope":273,"src":"1450:26:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":270,"name":"uint256","nodeType":"ElementaryTypeName","src":"1450:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1427:50:4"},"src":"1388:90:4"},{"anonymous":false,"documentation":{"id":274,"nodeType":"StructuredDocumentation","src":"1484:267:4","text":" @notice Emitted when the pool creator swap fee percentage of a pool is updated.\n @param pool The pool whose pool creator swap fee will be changed\n @param poolCreatorSwapFeePercentage The new pool creator swap fee percentage for the pool"},"eventSelector":"b7cf36369623c01ed7b2eafc4025224e924a2836d5fb49428a0f65417586bf5c","id":280,"name":"PoolCreatorSwapFeePercentageChanged","nameLocation":"1762:35:4","nodeType":"EventDefinition","parameters":{"id":279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":276,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1814:4:4","nodeType":"VariableDeclaration","scope":280,"src":"1798:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":275,"name":"address","nodeType":"ElementaryTypeName","src":"1798:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":278,"indexed":false,"mutability":"mutable","name":"poolCreatorSwapFeePercentage","nameLocation":"1828:28:4","nodeType":"VariableDeclaration","scope":280,"src":"1820:36:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":277,"name":"uint256","nodeType":"ElementaryTypeName","src":"1820:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1797:60:4"},"src":"1756:102:4"},{"anonymous":false,"documentation":{"id":281,"nodeType":"StructuredDocumentation","src":"1864:271:4","text":" @notice Emitted when the pool creator yield fee percentage of a pool is updated.\n @param pool The pool whose pool creator yield fee will be changed\n @param poolCreatorYieldFeePercentage The new pool creator yield fee percentage for the pool"},"eventSelector":"47f70ddbc624c299cef7841aaea0a86b677c800203e953104e958c9ec9bdab34","id":287,"name":"PoolCreatorYieldFeePercentageChanged","nameLocation":"2146:36:4","nodeType":"EventDefinition","parameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":283,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"2199:4:4","nodeType":"VariableDeclaration","scope":287,"src":"2183:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":282,"name":"address","nodeType":"ElementaryTypeName","src":"2183:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":285,"indexed":false,"mutability":"mutable","name":"poolCreatorYieldFeePercentage","nameLocation":"2213:29:4","nodeType":"VariableDeclaration","scope":287,"src":"2205:37:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":284,"name":"uint256","nodeType":"ElementaryTypeName","src":"2205:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:61:4"},"src":"2140:104:4"},{"anonymous":false,"documentation":{"id":288,"nodeType":"StructuredDocumentation","src":"2250:560:4","text":" @notice Logs the collection of protocol swap fees in a specific token and amount.\n @dev Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs\n in the Vault, but fee collection happens in the ProtocolFeeController, the swap fees reported here may encompass\n multiple operations.\n @param pool The pool on which the swap fee was charged\n @param token The token in which the swap fee was charged\n @param amount The amount of the token collected in fees"},"eventSelector":"ae7ebad9fc3d1d17965f063fa520d393595e2ef6c8e22ae8413b60900444e19f","id":297,"name":"ProtocolSwapFeeCollected","nameLocation":"2821:24:4","nodeType":"EventDefinition","parameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":290,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"2862:4:4","nodeType":"VariableDeclaration","scope":297,"src":"2846:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":289,"name":"address","nodeType":"ElementaryTypeName","src":"2846:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":293,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"2883:5:4","nodeType":"VariableDeclaration","scope":297,"src":"2868:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":292,"nodeType":"UserDefinedTypeName","pathNode":{"id":291,"name":"IERC20","nameLocations":["2868:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"2868:6:4"},"referencedDeclaration":3102,"src":"2868:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":295,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2898:6:4","nodeType":"VariableDeclaration","scope":297,"src":"2890:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":294,"name":"uint256","nodeType":"ElementaryTypeName","src":"2890:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2845:60:4"},"src":"2815:91:4"},{"anonymous":false,"documentation":{"id":298,"nodeType":"StructuredDocumentation","src":"2912:564:4","text":" @notice Logs the collection of protocol yield fees in a specific token and amount.\n @dev Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs\n in the Vault, but fee collection happens in the ProtocolFeeController, the yield fees reported here may encompass\n multiple operations.\n @param pool The pool on which the yield fee was charged\n @param token The token in which the yield fee was charged\n @param amount The amount of the token collected in fees"},"eventSelector":"e505e41b0d437b47350a9990142ccf38acb11ffa0e5af8f973b9e172f3d5d5e2","id":307,"name":"ProtocolYieldFeeCollected","nameLocation":"3487:25:4","nodeType":"EventDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":300,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"3529:4:4","nodeType":"VariableDeclaration","scope":307,"src":"3513:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":299,"name":"address","nodeType":"ElementaryTypeName","src":"3513:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":303,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3550:5:4","nodeType":"VariableDeclaration","scope":307,"src":"3535:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":302,"nodeType":"UserDefinedTypeName","pathNode":{"id":301,"name":"IERC20","nameLocations":["3535:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"3535:6:4"},"referencedDeclaration":3102,"src":"3535:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":305,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3565:6:4","nodeType":"VariableDeclaration","scope":307,"src":"3557:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":304,"name":"uint256","nodeType":"ElementaryTypeName","src":"3557:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3512:60:4"},"src":"3481:92:4"},{"anonymous":false,"documentation":{"id":308,"nodeType":"StructuredDocumentation","src":"3579:333:4","text":" @notice Logs the withdrawal of protocol fees in a specific token and amount.\n @param pool The pool from which protocol fees are being withdrawn\n @param token The token being withdrawn\n @param recipient The recipient of the funds\n @param amount The amount of the fee token that was withdrawn"},"eventSelector":"1c2887fcb98f75e66bb9a36311f2d3d22fb204e6362106f30e9df7eaf63131b5","id":319,"name":"ProtocolFeesWithdrawn","nameLocation":"3923:21:4","nodeType":"EventDefinition","parameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"3961:4:4","nodeType":"VariableDeclaration","scope":319,"src":"3945:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":309,"name":"address","nodeType":"ElementaryTypeName","src":"3945:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":313,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3982:5:4","nodeType":"VariableDeclaration","scope":319,"src":"3967:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":312,"nodeType":"UserDefinedTypeName","pathNode":{"id":311,"name":"IERC20","nameLocations":["3967:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"3967:6:4"},"referencedDeclaration":3102,"src":"3967:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":315,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4005:9:4","nodeType":"VariableDeclaration","scope":319,"src":"3989:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":314,"name":"address","nodeType":"ElementaryTypeName","src":"3989:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":317,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"4024:6:4","nodeType":"VariableDeclaration","scope":319,"src":"4016:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":316,"name":"uint256","nodeType":"ElementaryTypeName","src":"4016:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3944:87:4"},"src":"3917:115:4"},{"anonymous":false,"documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"4038:398:4","text":" @notice Logs the withdrawal of pool creator fees in a specific token and amount.\n @param pool The pool from which pool creator fees are being withdrawn\n @param token The token being withdrawn\n @param recipient The recipient of the funds (the pool creator if permissionless, or another account)\n @param amount The amount of the fee token that was withdrawn"},"eventSelector":"938f3a3a03ee425ccc0f8010b0468938cbafd3750fa43bbdf09c6f75e97e51f9","id":331,"name":"PoolCreatorFeesWithdrawn","nameLocation":"4447:24:4","nodeType":"EventDefinition","parameters":{"id":330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"4497:4:4","nodeType":"VariableDeclaration","scope":331,"src":"4481:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":321,"name":"address","nodeType":"ElementaryTypeName","src":"4481:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":325,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"4526:5:4","nodeType":"VariableDeclaration","scope":331,"src":"4511:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":324,"nodeType":"UserDefinedTypeName","pathNode":{"id":323,"name":"IERC20","nameLocations":["4511:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"4511:6:4"},"referencedDeclaration":3102,"src":"4511:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":327,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4557:9:4","nodeType":"VariableDeclaration","scope":331,"src":"4541:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":326,"name":"address","nodeType":"ElementaryTypeName","src":"4541:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":329,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"4584:6:4","nodeType":"VariableDeclaration","scope":331,"src":"4576:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":328,"name":"uint256","nodeType":"ElementaryTypeName","src":"4576:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4471:125:4"},"src":"4441:156:4"},{"anonymous":false,"documentation":{"id":332,"nodeType":"StructuredDocumentation","src":"4603:529:4","text":" @notice Emitted on pool registration with the initial aggregate swap fee percentage, for off-chain processes.\n @dev If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will\n equal the current global swap fee percentage.\n @param pool The pool being registered\n @param aggregateSwapFeePercentage The initial aggregate swap fee percentage\n @param isProtocolFeeExempt True if the pool is exempt from taking protocol fees initially"},"eventSelector":"a34ad86562f9716c2f1e723934cc63f44a9b4695cb8535c30dd8308d03a78564","id":340,"name":"InitialPoolAggregateSwapFeePercentage","nameLocation":"5143:37:4","nodeType":"EventDefinition","parameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":334,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"5206:4:4","nodeType":"VariableDeclaration","scope":340,"src":"5190:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":333,"name":"address","nodeType":"ElementaryTypeName","src":"5190:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":336,"indexed":false,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"5228:26:4","nodeType":"VariableDeclaration","scope":340,"src":"5220:34:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":335,"name":"uint256","nodeType":"ElementaryTypeName","src":"5220:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":338,"indexed":false,"mutability":"mutable","name":"isProtocolFeeExempt","nameLocation":"5269:19:4","nodeType":"VariableDeclaration","scope":340,"src":"5264:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":337,"name":"bool","nodeType":"ElementaryTypeName","src":"5264:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5180:114:4"},"src":"5137:158:4"},{"anonymous":false,"documentation":{"id":341,"nodeType":"StructuredDocumentation","src":"5301:533:4","text":" @notice Emitted on pool registration with the initial aggregate yield fee percentage, for off-chain processes.\n @dev If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will\n equal the current global yield fee percentage.\n @param pool The pool being registered\n @param aggregateYieldFeePercentage The initial aggregate yield fee percentage\n @param isProtocolFeeExempt True if the pool is exempt from taking protocol fees initially"},"eventSelector":"ce1d009285405b74cf77294916c17664de2c84eef81225c71f265f823b358bcb","id":349,"name":"InitialPoolAggregateYieldFeePercentage","nameLocation":"5845:38:4","nodeType":"EventDefinition","parameters":{"id":348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"5909:4:4","nodeType":"VariableDeclaration","scope":349,"src":"5893:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":342,"name":"address","nodeType":"ElementaryTypeName","src":"5893:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":345,"indexed":false,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"5931:27:4","nodeType":"VariableDeclaration","scope":349,"src":"5923:35:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":344,"name":"uint256","nodeType":"ElementaryTypeName","src":"5923:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":347,"indexed":false,"mutability":"mutable","name":"isProtocolFeeExempt","nameLocation":"5973:19:4","nodeType":"VariableDeclaration","scope":349,"src":"5968:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":346,"name":"bool","nodeType":"ElementaryTypeName","src":"5968:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5883:115:4"},"src":"5839:160:4"},{"anonymous":false,"documentation":{"id":350,"nodeType":"StructuredDocumentation","src":"6005:738:4","text":" @notice Emitted as a convenience during pool registration, more focused than the Vault's `PoolRegistered` event.\n @dev The `PoolRegistered` event includes the `roleAccounts` field, which also records the pool creator, but this\n simpler event is also provided for convenience. Though `InitialPoolAggregateSwapFeePercentage` and its yield fee\n counterpart also include the protocol fee exemption flag, we might as well include it here as well.\n @param pool The address of the pool being registered\n @param poolCreator The address of the pool creator (non-zero, or the event would not be emitted)\n @param  protocolFeeExempt True if the pool is initially exempt from protocol fees"},"eventSelector":"d9725c347996d9a5d6001b5f7c2a2515d365258012fceff4f49e84310ed07912","id":358,"name":"PoolRegisteredWithFeeController","nameLocation":"6754:31:4","nodeType":"EventDefinition","parameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":352,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"6802:4:4","nodeType":"VariableDeclaration","scope":358,"src":"6786:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"6786:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":354,"indexed":true,"mutability":"mutable","name":"poolCreator","nameLocation":"6824:11:4","nodeType":"VariableDeclaration","scope":358,"src":"6808:27:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"6808:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":356,"indexed":false,"mutability":"mutable","name":"protocolFeeExempt","nameLocation":"6842:17:4","nodeType":"VariableDeclaration","scope":358,"src":"6837:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":355,"name":"bool","nodeType":"ElementaryTypeName","src":"6837:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6785:75:4"},"src":"6748:113:4"},{"documentation":{"id":359,"nodeType":"StructuredDocumentation","src":"6867:219:4","text":" @notice Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\n @dev Note that this is checked for both the global and pool-specific protocol swap fee percentages."},"errorSelector":"7e6eb7fb","id":361,"name":"ProtocolSwapFeePercentageTooHigh","nameLocation":"7097:32:4","nodeType":"ErrorDefinition","parameters":{"id":360,"nodeType":"ParameterList","parameters":[],"src":"7129:2:4"},"src":"7091:41:4"},{"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"7138:221:4","text":" @notice Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\n @dev Note that this is checked for both the global and pool-specific protocol yield fee percentages."},"errorSelector":"a7849e8e","id":364,"name":"ProtocolYieldFeePercentageTooHigh","nameLocation":"7370:33:4","nodeType":"ErrorDefinition","parameters":{"id":363,"nodeType":"ParameterList","parameters":[],"src":"7403:2:4"},"src":"7364:42:4"},{"documentation":{"id":365,"nodeType":"StructuredDocumentation","src":"7412:156:4","text":" @notice Error raised if there is no pool creator on a withdrawal attempt from the given pool.\n @param pool The pool with no creator"},"errorSelector":"8bcbf353","id":369,"name":"PoolCreatorNotRegistered","nameLocation":"7579:24:4","nodeType":"ErrorDefinition","parameters":{"id":368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":367,"mutability":"mutable","name":"pool","nameLocation":"7612:4:4","nodeType":"VariableDeclaration","scope":369,"src":"7604:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":366,"name":"address","nodeType":"ElementaryTypeName","src":"7604:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7603:14:4"},"src":"7573:45:4"},{"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"7624:236:4","text":" @notice Error raised if the wrong account attempts to withdraw pool creator fees.\n @param caller The account attempting to withdraw pool creator fees\n @param pool The pool the caller tried to withdraw from"},"errorSelector":"fbecdbf4","id":376,"name":"CallerIsNotPoolCreator","nameLocation":"7871:22:4","nodeType":"ErrorDefinition","parameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"caller","nameLocation":"7902:6:4","nodeType":"VariableDeclaration","scope":376,"src":"7894:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":371,"name":"address","nodeType":"ElementaryTypeName","src":"7894:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"pool","nameLocation":"7918:4:4","nodeType":"VariableDeclaration","scope":376,"src":"7910:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"7910:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7893:30:4"},"src":"7865:59:4"},{"documentation":{"id":377,"nodeType":"StructuredDocumentation","src":"7930:110:4","text":"@notice Error raised when the pool creator swap or yield fee percentage exceeds the maximum allowed value."},"errorSelector":"0370da74","id":379,"name":"PoolCreatorFeePercentageTooHigh","nameLocation":"8051:31:4","nodeType":"ErrorDefinition","parameters":{"id":378,"nodeType":"ParameterList","parameters":[],"src":"8082:2:4"},"src":"8045:40:4"},{"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"8091:109:4","text":" @notice Get the address of the main Vault contract.\n @return vault The Vault address"},"functionSelector":"fbfa77cf","id":386,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"8214:5:4","nodeType":"FunctionDefinition","parameters":{"id":381,"nodeType":"ParameterList","parameters":[],"src":"8219:2:4"},"returnParameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":386,"src":"8245:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"},"typeName":{"id":383,"nodeType":"UserDefinedTypeName","pathNode":{"id":382,"name":"IVault","nameLocations":["8245:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":618,"src":"8245:6:4"},"referencedDeclaration":618,"src":"8245:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"visibility":"internal"}],"src":"8244:8:4"},"scope":580,"src":"8205:48:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":387,"nodeType":"StructuredDocumentation","src":"8259:131:4","text":" @notice Collects aggregate fees from the Vault for a given pool.\n @param pool The pool with aggregate fees"},"functionSelector":"8f4ab9ca","id":392,"implemented":false,"kind":"function","modifiers":[],"name":"collectAggregateFees","nameLocation":"8404:20:4","nodeType":"FunctionDefinition","parameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":389,"mutability":"mutable","name":"pool","nameLocation":"8433:4:4","nodeType":"VariableDeclaration","scope":392,"src":"8425:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":388,"name":"address","nodeType":"ElementaryTypeName","src":"8425:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8424:14:4"},"returnParameters":{"id":391,"nodeType":"ParameterList","parameters":[],"src":"8447:0:4"},"scope":580,"src":"8395:53:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":393,"nodeType":"StructuredDocumentation","src":"8454:156:4","text":" @notice Getter for the current global protocol swap fee.\n @return protocolSwapFeePercentage The global protocol swap fee percentage"},"functionSelector":"7869ee18","id":398,"implemented":false,"kind":"function","modifiers":[],"name":"getGlobalProtocolSwapFeePercentage","nameLocation":"8624:34:4","nodeType":"FunctionDefinition","parameters":{"id":394,"nodeType":"ParameterList","parameters":[],"src":"8658:2:4"},"returnParameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":396,"mutability":"mutable","name":"protocolSwapFeePercentage","nameLocation":"8692:25:4","nodeType":"VariableDeclaration","scope":398,"src":"8684:33:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":395,"name":"uint256","nodeType":"ElementaryTypeName","src":"8684:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8683:35:4"},"scope":580,"src":"8615:104:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":399,"nodeType":"StructuredDocumentation","src":"8725:159:4","text":" @notice Getter for the current global protocol yield fee.\n @return protocolYieldFeePercentage The global protocol yield fee percentage"},"functionSelector":"55fb76af","id":404,"implemented":false,"kind":"function","modifiers":[],"name":"getGlobalProtocolYieldFeePercentage","nameLocation":"8898:35:4","nodeType":"FunctionDefinition","parameters":{"id":400,"nodeType":"ParameterList","parameters":[],"src":"8933:2:4"},"returnParameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"protocolYieldFeePercentage","nameLocation":"8967:26:4","nodeType":"VariableDeclaration","scope":404,"src":"8959:34:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":401,"name":"uint256","nodeType":"ElementaryTypeName","src":"8959:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8958:36:4"},"scope":580,"src":"8889:106:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":405,"nodeType":"StructuredDocumentation","src":"9001:207:4","text":" @notice Getter for pool registration flag.\n @param pool The address of the pool\n @return isRegistered True if the pool configuration has been set (e.g., through `registerPool`)"},"functionSelector":"c673bdaf","id":412,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolRegistered","nameLocation":"9222:16:4","nodeType":"FunctionDefinition","parameters":{"id":408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"pool","nameLocation":"9247:4:4","nodeType":"VariableDeclaration","scope":412,"src":"9239:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"9239:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9238:14:4"},"returnParameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":412,"src":"9276:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":409,"name":"bool","nodeType":"ElementaryTypeName","src":"9276:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9275:6:4"},"scope":580,"src":"9213:69:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"9288:292:4","text":" @notice Getter for the current protocol swap fee for a given pool.\n @param pool The address of the pool\n @return protocolSwapFeePercentage The protocol swap fee percentage for the given pool\n @return isOverride True if the protocol fee has been overridden"},"functionSelector":"5c15a0b4","id":422,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolProtocolSwapFeeInfo","nameLocation":"9594:26:4","nodeType":"FunctionDefinition","parameters":{"id":416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"mutability":"mutable","name":"pool","nameLocation":"9638:4:4","nodeType":"VariableDeclaration","scope":422,"src":"9630:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":414,"name":"address","nodeType":"ElementaryTypeName","src":"9630:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9620:28:4"},"returnParameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":418,"mutability":"mutable","name":"protocolSwapFeePercentage","nameLocation":"9680:25:4","nodeType":"VariableDeclaration","scope":422,"src":"9672:33:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":417,"name":"uint256","nodeType":"ElementaryTypeName","src":"9672:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"isOverride","nameLocation":"9712:10:4","nodeType":"VariableDeclaration","scope":422,"src":"9707:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":419,"name":"bool","nodeType":"ElementaryTypeName","src":"9707:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9671:52:4"},"scope":580,"src":"9585:139:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"9730:295:4","text":" @notice Getter for the current protocol yield fee for a given pool.\n @param pool The address of the pool\n @return protocolYieldFeePercentage The protocol yield fee percentage for the given pool\n @return isOverride True if the protocol fee has been overridden"},"functionSelector":"7a2b97dc","id":432,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolProtocolYieldFeeInfo","nameLocation":"10039:27:4","nodeType":"FunctionDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"pool","nameLocation":"10084:4:4","nodeType":"VariableDeclaration","scope":432,"src":"10076:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":424,"name":"address","nodeType":"ElementaryTypeName","src":"10076:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10066:28:4"},"returnParameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":428,"mutability":"mutable","name":"protocolYieldFeePercentage","nameLocation":"10126:26:4","nodeType":"VariableDeclaration","scope":432,"src":"10118:34:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":427,"name":"uint256","nodeType":"ElementaryTypeName","src":"10118:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":430,"mutability":"mutable","name":"isOverride","nameLocation":"10159:10:4","nodeType":"VariableDeclaration","scope":432,"src":"10154:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":429,"name":"bool","nodeType":"ElementaryTypeName","src":"10154:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10117:53:4"},"scope":580,"src":"10030:141:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"10177:249:4","text":" @notice Getter for the current pool creator swap fee percentage for a given pool.\n @param pool The address of the pool\n @return poolCreatorSwapFeePercentage The pool creator swap fee component of the aggregate swap fee"},"functionSelector":"0b8e059b","id":440,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolCreatorSwapFeePercentage","nameLocation":"10440:31:4","nodeType":"FunctionDefinition","parameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"pool","nameLocation":"10480:4:4","nodeType":"VariableDeclaration","scope":440,"src":"10472:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":434,"name":"address","nodeType":"ElementaryTypeName","src":"10472:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10471:14:4"},"returnParameters":{"id":439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":438,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":440,"src":"10509:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":437,"name":"uint256","nodeType":"ElementaryTypeName","src":"10509:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10508:9:4"},"scope":580,"src":"10431:87:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":441,"nodeType":"StructuredDocumentation","src":"10524:252:4","text":" @notice Getter for the current pool creator yield fee percentage for a given pool.\n @param pool The address of the pool\n @return poolCreatorSwapFeePercentage The pool creator yield fee component of the aggregate yield fee"},"functionSelector":"0252aab5","id":448,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolCreatorYieldFeePercentage","nameLocation":"10790:32:4","nodeType":"FunctionDefinition","parameters":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":443,"mutability":"mutable","name":"pool","nameLocation":"10831:4:4","nodeType":"VariableDeclaration","scope":448,"src":"10823:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":442,"name":"address","nodeType":"ElementaryTypeName","src":"10823:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10822:14:4"},"returnParameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"10860:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"10860:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10859:9:4"},"scope":580,"src":"10781:88:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":449,"nodeType":"StructuredDocumentation","src":"10875:344:4","text":" @notice Returns the amount of each pool token allocated to the protocol for withdrawal.\n @dev Includes both swap and yield fees.\n @param pool The address of the pool on which fees were collected\n @return feeAmounts The total amounts of each token available for withdrawal, sorted in token registration order"},"functionSelector":"8df44c54","id":457,"implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeeAmounts","nameLocation":"11233:21:4","nodeType":"FunctionDefinition","parameters":{"id":452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"pool","nameLocation":"11263:4:4","nodeType":"VariableDeclaration","scope":457,"src":"11255:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":450,"name":"address","nodeType":"ElementaryTypeName","src":"11255:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11254:14:4"},"returnParameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":455,"mutability":"mutable","name":"feeAmounts","nameLocation":"11309:10:4","nodeType":"VariableDeclaration","scope":457,"src":"11292:27:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":453,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":454,"nodeType":"ArrayTypeName","src":"11292:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11291:29:4"},"scope":580,"src":"11224:97:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":458,"nodeType":"StructuredDocumentation","src":"11327:348:4","text":" @notice Returns the amount of each pool token allocated to the pool creator for withdrawal.\n @dev Includes both swap and yield fees.\n @param pool The address of the pool on which fees were collected\n @return feeAmounts The total amounts of each token available for withdrawal, sorted in token registration order"},"functionSelector":"9e95f3fd","id":466,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolCreatorFeeAmounts","nameLocation":"11689:24:4","nodeType":"FunctionDefinition","parameters":{"id":461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":460,"mutability":"mutable","name":"pool","nameLocation":"11722:4:4","nodeType":"VariableDeclaration","scope":466,"src":"11714:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":459,"name":"address","nodeType":"ElementaryTypeName","src":"11714:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11713:14:4"},"returnParameters":{"id":465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":464,"mutability":"mutable","name":"feeAmounts","nameLocation":"11768:10:4","nodeType":"VariableDeclaration","scope":466,"src":"11751:27:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":462,"name":"uint256","nodeType":"ElementaryTypeName","src":"11751:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":463,"nodeType":"ArrayTypeName","src":"11751:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11750:29:4"},"scope":580,"src":"11680:100:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":467,"nodeType":"StructuredDocumentation","src":"11786:1445:4","text":" @notice Returns a calculated aggregate percentage from protocol and pool creator fee percentages.\n @dev Not tied to any particular pool; this just performs the low-level \"additive fee\" calculation. Note that\n pool creator fees are calculated based on creatorAndLpFees, and not in totalFees. Since aggregate fees are\n stored in the Vault with 24-bit precision, this will truncate any values that require greater precision.\n It is expected that pool creators will negotiate with the DAO and agree on reasonable values for these fee\n components, but the truncation ensures it will not revert for any valid set of fee percentages.\n See example below:\n tokenOutAmount = 10000; poolSwapFeePct = 10%; protocolFeePct = 40%; creatorFeePct = 60%\n totalFees = tokenOutAmount * poolSwapFeePct = 10000 * 10% = 1000\n protocolFees = totalFees * protocolFeePct = 1000 * 40% = 400\n creatorAndLpFees = totalFees - protocolFees = 1000 - 400 = 600\n creatorFees = creatorAndLpFees * creatorFeePct = 600 * 60% = 360\n lpFees (will stay in the pool) = creatorAndLpFees - creatorFees = 600 - 360 = 240\n @param protocolFeePercentage The protocol portion of the aggregate fee percentage\n @param poolCreatorFeePercentage The pool creator portion of the aggregate fee percentage\n @return aggregateFeePercentage The computed aggregate percentage"},"functionSelector":"0ddd60c6","id":476,"implemented":false,"kind":"function","modifiers":[],"name":"computeAggregateFeePercentage","nameLocation":"13245:29:4","nodeType":"FunctionDefinition","parameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":469,"mutability":"mutable","name":"protocolFeePercentage","nameLocation":"13292:21:4","nodeType":"VariableDeclaration","scope":476,"src":"13284:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":468,"name":"uint256","nodeType":"ElementaryTypeName","src":"13284:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":471,"mutability":"mutable","name":"poolCreatorFeePercentage","nameLocation":"13331:24:4","nodeType":"VariableDeclaration","scope":476,"src":"13323:32:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":470,"name":"uint256","nodeType":"ElementaryTypeName","src":"13323:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13274:87:4"},"returnParameters":{"id":475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":474,"mutability":"mutable","name":"aggregateFeePercentage","nameLocation":"13393:22:4","nodeType":"VariableDeclaration","scope":476,"src":"13385:30:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":473,"name":"uint256","nodeType":"ElementaryTypeName","src":"13385:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13384:32:4"},"scope":580,"src":"13236:181:4","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":477,"nodeType":"StructuredDocumentation","src":"13423:398:4","text":" @notice Override the protocol swap fee percentage for a specific pool.\n @dev This is a permissionless call, and will set the pool's fee to the current global fee, if it is different\n from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\n @param pool The pool for which we are setting the protocol swap fee"},"functionSelector":"71ecc8fb","id":482,"implemented":false,"kind":"function","modifiers":[],"name":"updateProtocolSwapFeePercentage","nameLocation":"13835:31:4","nodeType":"FunctionDefinition","parameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"pool","nameLocation":"13875:4:4","nodeType":"VariableDeclaration","scope":482,"src":"13867:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"13867:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13866:14:4"},"returnParameters":{"id":481,"nodeType":"ParameterList","parameters":[],"src":"13889:0:4"},"scope":580,"src":"13826:64:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"13896:400:4","text":" @notice Override the protocol yield fee percentage for a specific pool.\n @dev This is a permissionless call, and will set the pool's fee to the current global fee, if it is different\n from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\n @param pool The pool for which we are setting the protocol yield fee"},"functionSelector":"71447ea8","id":488,"implemented":false,"kind":"function","modifiers":[],"name":"updateProtocolYieldFeePercentage","nameLocation":"14310:32:4","nodeType":"FunctionDefinition","parameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"pool","nameLocation":"14351:4:4","nodeType":"VariableDeclaration","scope":488,"src":"14343:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":484,"name":"address","nodeType":"ElementaryTypeName","src":"14343:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14342:14:4"},"returnParameters":{"id":487,"nodeType":"ParameterList","parameters":[],"src":"14365:0:4"},"scope":580,"src":"14301:65:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":489,"nodeType":"StructuredDocumentation","src":"14590:826:4","text":" @notice Add pool-specific entries to the protocol swap and yield percentages.\n @dev This must be called from the Vault during pool registration. It will initialize the pool to the global\n protocol fee percentage values (or 0, if the `protocolFeeExempt` flags is set), and return the initial aggregate\n fee percentages, based on an initial pool creator fee of 0.\n @param pool The address of the pool being registered\n @param poolCreator The address of the pool creator (or 0 if there won't be a pool creator fee)\n @param protocolFeeExempt If true, the pool is initially exempt from protocol fees\n @return aggregateSwapFeePercentage The initial aggregate swap fee percentage\n @return aggregateYieldFeePercentage The initial aggregate yield fee percentage"},"functionSelector":"77ff76e7","id":502,"implemented":false,"kind":"function","modifiers":[],"name":"registerPool","nameLocation":"15430:12:4","nodeType":"FunctionDefinition","parameters":{"id":496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":491,"mutability":"mutable","name":"pool","nameLocation":"15460:4:4","nodeType":"VariableDeclaration","scope":502,"src":"15452:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":490,"name":"address","nodeType":"ElementaryTypeName","src":"15452:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":493,"mutability":"mutable","name":"poolCreator","nameLocation":"15482:11:4","nodeType":"VariableDeclaration","scope":502,"src":"15474:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"15474:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":495,"mutability":"mutable","name":"protocolFeeExempt","nameLocation":"15508:17:4","nodeType":"VariableDeclaration","scope":502,"src":"15503:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":494,"name":"bool","nodeType":"ElementaryTypeName","src":"15503:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15442:89:4"},"returnParameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":498,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"15558:26:4","nodeType":"VariableDeclaration","scope":502,"src":"15550:34:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":497,"name":"uint256","nodeType":"ElementaryTypeName","src":"15550:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":500,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"15594:27:4","nodeType":"VariableDeclaration","scope":502,"src":"15586:35:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":499,"name":"uint256","nodeType":"ElementaryTypeName","src":"15586:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15549:73:4"},"scope":580,"src":"15421:202:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":503,"nodeType":"StructuredDocumentation","src":"15629:175:4","text":" @notice Set the global protocol swap fee percentage, used by standard pools.\n @param newProtocolSwapFeePercentage The new protocol swap fee percentage"},"functionSelector":"8a3c5c69","id":508,"implemented":false,"kind":"function","modifiers":[],"name":"setGlobalProtocolSwapFeePercentage","nameLocation":"15818:34:4","nodeType":"FunctionDefinition","parameters":{"id":506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":505,"mutability":"mutable","name":"newProtocolSwapFeePercentage","nameLocation":"15861:28:4","nodeType":"VariableDeclaration","scope":508,"src":"15853:36:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint256","nodeType":"ElementaryTypeName","src":"15853:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15852:38:4"},"returnParameters":{"id":507,"nodeType":"ParameterList","parameters":[],"src":"15899:0:4"},"scope":580,"src":"15809:91:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"15906:178:4","text":" @notice Set the global protocol yield fee percentage, used by standard pools.\n @param newProtocolYieldFeePercentage The new protocol yield fee percentage"},"functionSelector":"a93df2a4","id":514,"implemented":false,"kind":"function","modifiers":[],"name":"setGlobalProtocolYieldFeePercentage","nameLocation":"16098:35:4","nodeType":"FunctionDefinition","parameters":{"id":512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"newProtocolYieldFeePercentage","nameLocation":"16142:29:4","nodeType":"VariableDeclaration","scope":514,"src":"16134:37:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":510,"name":"uint256","nodeType":"ElementaryTypeName","src":"16134:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16133:39:4"},"returnParameters":{"id":513,"nodeType":"ParameterList","parameters":[],"src":"16181:0:4"},"scope":580,"src":"16089:93:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":515,"nodeType":"StructuredDocumentation","src":"16188:272:4","text":" @notice Override the protocol swap fee percentage for a specific pool.\n @param pool The address of the pool for which we are setting the protocol swap fee\n @param newProtocolSwapFeePercentage The new protocol swap fee percentage for the pool"},"functionSelector":"fd267f39","id":522,"implemented":false,"kind":"function","modifiers":[],"name":"setProtocolSwapFeePercentage","nameLocation":"16474:28:4","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"pool","nameLocation":"16511:4:4","nodeType":"VariableDeclaration","scope":522,"src":"16503:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":516,"name":"address","nodeType":"ElementaryTypeName","src":"16503:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":519,"mutability":"mutable","name":"newProtocolSwapFeePercentage","nameLocation":"16525:28:4","nodeType":"VariableDeclaration","scope":522,"src":"16517:36:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":518,"name":"uint256","nodeType":"ElementaryTypeName","src":"16517:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16502:52:4"},"returnParameters":{"id":521,"nodeType":"ParameterList","parameters":[],"src":"16563:0:4"},"scope":580,"src":"16465:99:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":523,"nodeType":"StructuredDocumentation","src":"16570:276:4","text":" @notice Override the protocol yield fee percentage for a specific pool.\n @param pool The address of the pool for which we are setting the protocol yield fee\n @param newProtocolYieldFeePercentage The new protocol yield fee percentage for the pool"},"functionSelector":"abaa3356","id":530,"implemented":false,"kind":"function","modifiers":[],"name":"setProtocolYieldFeePercentage","nameLocation":"16860:29:4","nodeType":"FunctionDefinition","parameters":{"id":528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":525,"mutability":"mutable","name":"pool","nameLocation":"16898:4:4","nodeType":"VariableDeclaration","scope":530,"src":"16890:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":524,"name":"address","nodeType":"ElementaryTypeName","src":"16890:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":527,"mutability":"mutable","name":"newProtocolYieldFeePercentage","nameLocation":"16912:29:4","nodeType":"VariableDeclaration","scope":530,"src":"16904:37:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":526,"name":"uint256","nodeType":"ElementaryTypeName","src":"16904:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16889:53:4"},"returnParameters":{"id":529,"nodeType":"ParameterList","parameters":[],"src":"16951:0:4"},"scope":580,"src":"16851:101:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":531,"nodeType":"StructuredDocumentation","src":"16958:623:4","text":" @notice Assigns a new pool creator swap fee percentage to the specified pool.\n @dev Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to\n the \"net\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the\n pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\n @param pool The address of the pool for which the pool creator fee will be changed\n @param poolCreatorSwapFeePercentage The new pool creator swap fee percentage to apply to the pool"},"functionSelector":"1377c16c","id":538,"implemented":false,"kind":"function","modifiers":[],"name":"setPoolCreatorSwapFeePercentage","nameLocation":"17595:31:4","nodeType":"FunctionDefinition","parameters":{"id":536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"pool","nameLocation":"17635:4:4","nodeType":"VariableDeclaration","scope":538,"src":"17627:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":532,"name":"address","nodeType":"ElementaryTypeName","src":"17627:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":535,"mutability":"mutable","name":"poolCreatorSwapFeePercentage","nameLocation":"17649:28:4","nodeType":"VariableDeclaration","scope":538,"src":"17641:36:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":534,"name":"uint256","nodeType":"ElementaryTypeName","src":"17641:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17626:52:4"},"returnParameters":{"id":537,"nodeType":"ParameterList","parameters":[],"src":"17687:0:4"},"scope":580,"src":"17586:102:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":539,"nodeType":"StructuredDocumentation","src":"17694:626:4","text":" @notice Assigns a new pool creator yield fee percentage to the specified pool.\n @dev Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to\n the \"net\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the\n pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\n @param pool The address of the pool for which the pool creator fee will be changed\n @param poolCreatorYieldFeePercentage The new pool creator yield fee percentage to apply to the pool"},"functionSelector":"3af52712","id":546,"implemented":false,"kind":"function","modifiers":[],"name":"setPoolCreatorYieldFeePercentage","nameLocation":"18334:32:4","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"mutability":"mutable","name":"pool","nameLocation":"18375:4:4","nodeType":"VariableDeclaration","scope":546,"src":"18367:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":540,"name":"address","nodeType":"ElementaryTypeName","src":"18367:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":543,"mutability":"mutable","name":"poolCreatorYieldFeePercentage","nameLocation":"18389:29:4","nodeType":"VariableDeclaration","scope":546,"src":"18381:37:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":542,"name":"uint256","nodeType":"ElementaryTypeName","src":"18381:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18366:53:4"},"returnParameters":{"id":545,"nodeType":"ParameterList","parameters":[],"src":"18428:0:4"},"scope":580,"src":"18325:104:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":547,"nodeType":"StructuredDocumentation","src":"18435:296:4","text":" @notice Withdraw collected protocol fees for a given pool (all tokens). This is a permissioned function.\n @dev Sends swap and yield protocol fees to the recipient.\n @param pool The pool on which fees were collected\n @param recipient Address to send the tokens"},"functionSelector":"cf7b287f","id":554,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawProtocolFees","nameLocation":"18745:20:4","nodeType":"FunctionDefinition","parameters":{"id":552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":549,"mutability":"mutable","name":"pool","nameLocation":"18774:4:4","nodeType":"VariableDeclaration","scope":554,"src":"18766:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":548,"name":"address","nodeType":"ElementaryTypeName","src":"18766:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":551,"mutability":"mutable","name":"recipient","nameLocation":"18788:9:4","nodeType":"VariableDeclaration","scope":554,"src":"18780:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":550,"name":"address","nodeType":"ElementaryTypeName","src":"18780:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18765:33:4"},"returnParameters":{"id":553,"nodeType":"ParameterList","parameters":[],"src":"18807:0:4"},"scope":580,"src":"18736:72:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":555,"nodeType":"StructuredDocumentation","src":"18814:339:4","text":" @notice Withdraw collected protocol fees for a given pool and a given token. This is a permissioned function.\n @dev Sends swap and yield protocol fees to the recipient.\n @param pool The pool on which fees were collected\n @param recipient Address to send the tokens\n @param token Token to withdraw"},"functionSelector":"b53a70b2","id":565,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawProtocolFeesForToken","nameLocation":"19167:28:4","nodeType":"FunctionDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":557,"mutability":"mutable","name":"pool","nameLocation":"19204:4:4","nodeType":"VariableDeclaration","scope":565,"src":"19196:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":556,"name":"address","nodeType":"ElementaryTypeName","src":"19196:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":559,"mutability":"mutable","name":"recipient","nameLocation":"19218:9:4","nodeType":"VariableDeclaration","scope":565,"src":"19210:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":558,"name":"address","nodeType":"ElementaryTypeName","src":"19210:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":562,"mutability":"mutable","name":"token","nameLocation":"19236:5:4","nodeType":"VariableDeclaration","scope":565,"src":"19229:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":561,"nodeType":"UserDefinedTypeName","pathNode":{"id":560,"name":"IERC20","nameLocations":["19229:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"19229:6:4"},"referencedDeclaration":3102,"src":"19229:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"19195:47:4"},"returnParameters":{"id":564,"nodeType":"ParameterList","parameters":[],"src":"19251:0:4"},"scope":580,"src":"19158:94:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":566,"nodeType":"StructuredDocumentation","src":"19258:291:4","text":" @notice Withdraw collected pool creator fees for a given pool. This is a permissioned function.\n @dev Sends swap and yield pool creator fees to the recipient.\n @param pool The pool on which fees were collected\n @param recipient Address to send the tokens"},"functionSelector":"f7061445","id":573,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawPoolCreatorFees","nameLocation":"19563:23:4","nodeType":"FunctionDefinition","parameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"pool","nameLocation":"19595:4:4","nodeType":"VariableDeclaration","scope":573,"src":"19587:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":567,"name":"address","nodeType":"ElementaryTypeName","src":"19587:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":570,"mutability":"mutable","name":"recipient","nameLocation":"19609:9:4","nodeType":"VariableDeclaration","scope":573,"src":"19601:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":569,"name":"address","nodeType":"ElementaryTypeName","src":"19601:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19586:33:4"},"returnParameters":{"id":572,"nodeType":"ParameterList","parameters":[],"src":"19628:0:4"},"scope":580,"src":"19554:75:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":574,"nodeType":"StructuredDocumentation","src":"19635:310:4","text":" @notice Withdraw collected pool creator fees for a given pool.\n @dev Sends swap and yield pool creator fees to the registered poolCreator. Since this is a known and immutable\n value, this function is permissionless.\n @param pool The pool on which fees were collected"},"functionSelector":"52f125f0","id":579,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawPoolCreatorFees","nameLocation":"19959:23:4","nodeType":"FunctionDefinition","parameters":{"id":577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":576,"mutability":"mutable","name":"pool","nameLocation":"19991:4:4","nodeType":"VariableDeclaration","scope":579,"src":"19983:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":575,"name":"address","nodeType":"ElementaryTypeName","src":"19983:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19982:14:4"},"returnParameters":{"id":578,"nodeType":"ParameterList","parameters":[],"src":"20005:0:4"},"scope":580,"src":"19950:56:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":581,"src":"266:19742:4","usedErrors":[361,364,369,376,379],"usedEvents":[254,259,266,273,280,287,297,307,319,331,340,349,358]}],"src":"46:19963:4"},"id":4},"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","exportedSymbols":{"IAuthentication":[14],"IVault":[618],"IVaultAdmin":[908],"IVaultErrors":[1275],"IVaultEvents":[1514],"IVaultExtension":[2409],"IVaultMain":[2545]},"id":619,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":582,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:5"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","file":"../solidity-utils/helpers/IAuthentication.sol","id":584,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":619,"sourceUnit":15,"src":"72:80:5","symbolAliases":[{"foreign":{"id":583,"name":"IAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"81:15:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol","file":"./IVaultExtension.sol","id":586,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":619,"sourceUnit":2410,"src":"153:56:5","symbolAliases":[{"foreign":{"id":585,"name":"IVaultExtension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2409,"src":"162:15:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol","file":"./IVaultErrors.sol","id":588,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":619,"sourceUnit":1276,"src":"210:50:5","symbolAliases":[{"foreign":{"id":587,"name":"IVaultErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"219:12:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol","file":"./IVaultEvents.sol","id":590,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":619,"sourceUnit":1515,"src":"261:50:5","symbolAliases":[{"foreign":{"id":589,"name":"IVaultEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"270:12:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol","file":"./IVaultAdmin.sol","id":592,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":619,"sourceUnit":909,"src":"312:48:5","symbolAliases":[{"foreign":{"id":591,"name":"IVaultAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"321:11:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol","file":"./IVaultMain.sol","id":594,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":619,"sourceUnit":2546,"src":"361:46:5","symbolAliases":[{"foreign":{"id":593,"name":"IVaultMain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"370:10:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":596,"name":"IVaultMain","nameLocations":["539:10:5"],"nodeType":"IdentifierPath","referencedDeclaration":2545,"src":"539:10:5"},"id":597,"nodeType":"InheritanceSpecifier","src":"539:10:5"},{"baseName":{"id":598,"name":"IVaultExtension","nameLocations":["551:15:5"],"nodeType":"IdentifierPath","referencedDeclaration":2409,"src":"551:15:5"},"id":599,"nodeType":"InheritanceSpecifier","src":"551:15:5"},{"baseName":{"id":600,"name":"IVaultAdmin","nameLocations":["568:11:5"],"nodeType":"IdentifierPath","referencedDeclaration":908,"src":"568:11:5"},"id":601,"nodeType":"InheritanceSpecifier","src":"568:11:5"},{"baseName":{"id":602,"name":"IVaultErrors","nameLocations":["581:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":1275,"src":"581:12:5"},"id":603,"nodeType":"InheritanceSpecifier","src":"581:12:5"},{"baseName":{"id":604,"name":"IVaultEvents","nameLocations":["595:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":1514,"src":"595:12:5"},"id":605,"nodeType":"InheritanceSpecifier","src":"595:12:5"},{"baseName":{"id":606,"name":"IAuthentication","nameLocations":["609:15:5"],"nodeType":"IdentifierPath","referencedDeclaration":14,"src":"609:15:5"},"id":607,"nodeType":"InheritanceSpecifier","src":"609:15:5"}],"canonicalName":"IVault","contractDependencies":[],"contractKind":"interface","documentation":{"id":595,"nodeType":"StructuredDocumentation","src":"409:110:5","text":"@notice Composite interface for all Vault operations: swap, add/remove liquidity, and associated queries."},"fullyImplemented":false,"id":618,"linearizedBaseContracts":[618,14,1514,1275,908,2409,2545],"name":"IVault","nameLocation":"529:6:5","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[636,2013],"documentation":{"id":608,"nodeType":"StructuredDocumentation","src":"631:41:5","text":"@return vault The main Vault address."},"functionSelector":"fbfa77cf","id":617,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"686:5:5","nodeType":"FunctionDefinition","overrides":{"id":612,"nodeType":"OverrideSpecifier","overrides":[{"id":610,"name":"IVaultAdmin","nameLocations":["717:11:5"],"nodeType":"IdentifierPath","referencedDeclaration":908,"src":"717:11:5"},{"id":611,"name":"IVaultExtension","nameLocations":["730:15:5"],"nodeType":"IdentifierPath","referencedDeclaration":2409,"src":"730:15:5"}],"src":"708:38:5"},"parameters":{"id":609,"nodeType":"ParameterList","parameters":[],"src":"691:2:5"},"returnParameters":{"id":616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":615,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":617,"src":"756:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"},"typeName":{"id":614,"nodeType":"UserDefinedTypeName","pathNode":{"id":613,"name":"IVault","nameLocations":["756:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":618,"src":"756:6:5"},"referencedDeclaration":618,"src":"756:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"visibility":"internal"}],"src":"755:8:5"},"scope":618,"src":"677:87:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":619,"src":"519:247:5","usedErrors":[5,920,925,930,935,944,950,953,956,959,962,965,968,977,980,983,986,989,992,995,998,1001,1004,1007,1010,1013,1016,1019,1025,1032,1039,1042,1045,1055,1065,1072,1075,1078,1081,1091,1101,1108,1111,1114,1117,1120,1123,1126,1129,1132,1137,1142,1147,1150,1153,1156,1159,1162,1167,1172,1177,1183,1189,1192,1200,1206,1212,1215,1218,1221,1226,1236,1246,1253,1256,1259,1262,1265,1268,1271,1274],"usedEvents":[1313,1318,1337,1349,1361,1379,1397,1402,1405,1408,1415,1422,1429,1436,1443,1449,1455,1467,1477,1487,1499,1504,1513]}],"src":"46:721:5"},"id":5},"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol","exportedSymbols":{"IAuthorizer":[40],"IERC4626":[3024],"IProtocolFeeController":[580],"IVault":[618],"IVaultAdmin":[908]},"id":909,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":620,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:6"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":622,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":909,"sourceUnit":3025,"src":"72:75:6","symbolAliases":[{"foreign":{"id":621,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"81:8:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"./IProtocolFeeController.sol","id":624,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":909,"sourceUnit":581,"src":"149:70:6","symbolAliases":[{"foreign":{"id":623,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"158:22:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","file":"./IAuthorizer.sol","id":626,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":909,"sourceUnit":41,"src":"220:48:6","symbolAliases":[{"foreign":{"id":625,"name":"IAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"229:11:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"./IVault.sol","id":628,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":909,"sourceUnit":619,"src":"269:38:6","symbolAliases":[{"foreign":{"id":627,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"278:6:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultAdmin","contractDependencies":[],"contractKind":"interface","documentation":{"id":629,"nodeType":"StructuredDocumentation","src":"309:276:6","text":" @notice Interface for functions defined on the `VaultAdmin` contract.\n @dev `VaultAdmin` is the Proxy extension of `VaultExtension`, and handles the least critical operations,\n as two delegate calls add gas to each call. Most of the permissioned calls are here."},"fullyImplemented":false,"id":908,"linearizedBaseContracts":[908],"name":"IVaultAdmin","nameLocation":"596:11:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":630,"nodeType":"StructuredDocumentation","src":"841:206:6","text":" @notice Returns the main Vault address.\n @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n @return vault The address of the main Vault"},"functionSelector":"fbfa77cf","id":636,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"1061:5:6","nodeType":"FunctionDefinition","parameters":{"id":631,"nodeType":"ParameterList","parameters":[],"src":"1066:2:6"},"returnParameters":{"id":635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":636,"src":"1092:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"},"typeName":{"id":633,"nodeType":"UserDefinedTypeName","pathNode":{"id":632,"name":"IVault","nameLocations":["1092:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":618,"src":"1092:6:6"},"referencedDeclaration":618,"src":"1092:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"visibility":"internal"}],"src":"1091:8:6"},"scope":908,"src":"1052:48:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":637,"nodeType":"StructuredDocumentation","src":"1106:326:6","text":" @notice Returns the Vault's pause window end time.\n @dev This value is immutable, and represents the timestamp after which the Vault can no longer be paused\n by governance. Balancer timestamps are 32 bits.\n @return pauseWindowEndTime The timestamp when the Vault's pause window ends"},"functionSelector":"8a8d123a","id":642,"implemented":false,"kind":"function","modifiers":[],"name":"getPauseWindowEndTime","nameLocation":"1446:21:6","nodeType":"FunctionDefinition","parameters":{"id":638,"nodeType":"ParameterList","parameters":[],"src":"1467:2:6"},"returnParameters":{"id":641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":640,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"1500:18:6","nodeType":"VariableDeclaration","scope":642,"src":"1493:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":639,"name":"uint32","nodeType":"ElementaryTypeName","src":"1493:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1492:27:6"},"scope":908,"src":"1437:83:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":643,"nodeType":"StructuredDocumentation","src":"1526:414:6","text":" @notice Returns the Vault's buffer period duration.\n @dev This value is immutable. It represents the period during which, if paused, the Vault will remain paused.\n This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer\n timestamps are 32 bits.\n @return bufferPeriodDuration The length of the buffer period in seconds"},"functionSelector":"20c1fb7a","id":648,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferPeriodDuration","nameLocation":"1954:23:6","nodeType":"FunctionDefinition","parameters":{"id":644,"nodeType":"ParameterList","parameters":[],"src":"1977:2:6"},"returnParameters":{"id":647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":646,"mutability":"mutable","name":"bufferPeriodDuration","nameLocation":"2010:20:6","nodeType":"VariableDeclaration","scope":648,"src":"2003:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":645,"name":"uint32","nodeType":"ElementaryTypeName","src":"2003:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2002:29:6"},"scope":908,"src":"1945:87:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":649,"nodeType":"StructuredDocumentation","src":"2038:321:6","text":" @notice Returns the Vault's buffer period end time.\n @dev This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer\n timestamps are 32 bits.\n @return bufferPeriodEndTime The timestamp after which the Vault remains permanently unpaused"},"functionSelector":"cd51c12f","id":654,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferPeriodEndTime","nameLocation":"2373:22:6","nodeType":"FunctionDefinition","parameters":{"id":650,"nodeType":"ParameterList","parameters":[],"src":"2395:2:6"},"returnParameters":{"id":653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"bufferPeriodEndTime","nameLocation":"2428:19:6","nodeType":"VariableDeclaration","scope":654,"src":"2421:26:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":651,"name":"uint32","nodeType":"ElementaryTypeName","src":"2421:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2420:28:6"},"scope":908,"src":"2364:85:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":655,"nodeType":"StructuredDocumentation","src":"2455:193:6","text":" @notice Get the minimum number of tokens in a pool.\n @dev We expect the vast majority of pools to be 2-token.\n @return minTokens The minimum token count of a pool"},"functionSelector":"a8175b27","id":660,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumPoolTokens","nameLocation":"2662:20:6","nodeType":"FunctionDefinition","parameters":{"id":656,"nodeType":"ParameterList","parameters":[],"src":"2682:2:6"},"returnParameters":{"id":659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"mutability":"mutable","name":"minTokens","nameLocation":"2716:9:6","nodeType":"VariableDeclaration","scope":660,"src":"2708:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":657,"name":"uint256","nodeType":"ElementaryTypeName","src":"2708:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2707:19:6"},"scope":908,"src":"2653:74:6","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":661,"nodeType":"StructuredDocumentation","src":"2733:129:6","text":" @notice Get the maximum number of tokens in a pool.\n @return maxTokens The maximum token count of a pool"},"functionSelector":"2e42f4d5","id":666,"implemented":false,"kind":"function","modifiers":[],"name":"getMaximumPoolTokens","nameLocation":"2876:20:6","nodeType":"FunctionDefinition","parameters":{"id":662,"nodeType":"ParameterList","parameters":[],"src":"2896:2:6"},"returnParameters":{"id":665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"maxTokens","nameLocation":"2930:9:6","nodeType":"VariableDeclaration","scope":666,"src":"2922:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":663,"name":"uint256","nodeType":"ElementaryTypeName","src":"2922:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2921:19:6"},"scope":908,"src":"2867:74:6","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":667,"nodeType":"StructuredDocumentation","src":"2947:439:6","text":" @notice Get the minimum total supply of pool tokens (BPT) for an initialized pool.\n @dev This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT\n is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\n @return poolMinimumTotalSupply The minimum total supply a pool can have after initialization"},"functionSelector":"d0965a6b","id":672,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolMinimumTotalSupply","nameLocation":"3400:25:6","nodeType":"FunctionDefinition","parameters":{"id":668,"nodeType":"ParameterList","parameters":[],"src":"3425:2:6"},"returnParameters":{"id":671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":670,"mutability":"mutable","name":"poolMinimumTotalSupply","nameLocation":"3459:22:6","nodeType":"VariableDeclaration","scope":672,"src":"3451:30:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":669,"name":"uint256","nodeType":"ElementaryTypeName","src":"3451:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3450:32:6"},"scope":908,"src":"3391:92:6","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":673,"nodeType":"StructuredDocumentation","src":"3489:502:6","text":" @notice Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\n @dev This prevents buffers from being completely drained. When the buffer is initialized, this minimum number\n of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal\n to the Vault, as buffers are not tokenized.\n @return bufferMinimumTotalSupply The minimum total supply a buffer can have after initialization"},"functionSelector":"26a8a991","id":678,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferMinimumTotalSupply","nameLocation":"4005:27:6","nodeType":"FunctionDefinition","parameters":{"id":674,"nodeType":"ParameterList","parameters":[],"src":"4032:2:6"},"returnParameters":{"id":677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":676,"mutability":"mutable","name":"bufferMinimumTotalSupply","nameLocation":"4066:24:6","nodeType":"VariableDeclaration","scope":678,"src":"4058:32:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":675,"name":"uint256","nodeType":"ElementaryTypeName","src":"4058:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4057:34:6"},"scope":908,"src":"3996:96:6","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":679,"nodeType":"StructuredDocumentation","src":"4098:291:6","text":" @notice Get the minimum trade amount in a pool operation.\n @dev This limit is applied to the 18-decimal \"upscaled\" amount in any operation (swap, add/remove liquidity).\n @return minimumTradeAmount The minimum trade amount as an 18-decimal floating point number"},"functionSelector":"e2cb0ba0","id":684,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumTradeAmount","nameLocation":"4403:21:6","nodeType":"FunctionDefinition","parameters":{"id":680,"nodeType":"ParameterList","parameters":[],"src":"4424:2:6"},"returnParameters":{"id":683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"minimumTradeAmount","nameLocation":"4458:18:6","nodeType":"VariableDeclaration","scope":684,"src":"4450:26:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint256","nodeType":"ElementaryTypeName","src":"4450:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4449:28:6"},"scope":908,"src":"4394:84:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":685,"nodeType":"StructuredDocumentation","src":"4484:271:6","text":" @notice Get the minimum wrap amount in a buffer operation.\n @dev This limit is applied to the wrap operation amount, in native underlying token decimals.\n @return minimumWrapAmount The minimum wrap amount in native underlying token decimals"},"functionSelector":"53956aa2","id":690,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumWrapAmount","nameLocation":"4769:20:6","nodeType":"FunctionDefinition","parameters":{"id":686,"nodeType":"ParameterList","parameters":[],"src":"4789:2:6"},"returnParameters":{"id":689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"minimumWrapAmount","nameLocation":"4823:17:6","nodeType":"VariableDeclaration","scope":690,"src":"4815:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":687,"name":"uint256","nodeType":"ElementaryTypeName","src":"4815:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4814:27:6"},"scope":908,"src":"4760:82:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":691,"nodeType":"StructuredDocumentation","src":"5069:529:6","text":" @notice Indicates whether the Vault is paused.\n @dev If the Vault is paused, all non-Recovery Mode state-changing operations on pools will revert. Note that\n ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not\n also pause buffers (though we anticipate they would likely be paused and unpaused together). Call\n `areBuffersPaused` to check the pause state of the buffers.\n @return vaultPaused True if the Vault is paused"},"functionSelector":"098401f5","id":696,"implemented":false,"kind":"function","modifiers":[],"name":"isVaultPaused","nameLocation":"5612:13:6","nodeType":"FunctionDefinition","parameters":{"id":692,"nodeType":"ParameterList","parameters":[],"src":"5625:2:6"},"returnParameters":{"id":695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":694,"mutability":"mutable","name":"vaultPaused","nameLocation":"5656:11:6","nodeType":"VariableDeclaration","scope":696,"src":"5651:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":693,"name":"bool","nodeType":"ElementaryTypeName","src":"5651:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5650:18:6"},"scope":908,"src":"5603:66:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":697,"nodeType":"StructuredDocumentation","src":"5675:400:6","text":" @notice Returns the paused status, and end times of the Vault's pause window and buffer period.\n @dev Balancer timestamps are 32 bits.\n @return vaultPaused True if the Vault is paused\n @return vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\n @return vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period"},"functionSelector":"85c8c015","id":706,"implemented":false,"kind":"function","modifiers":[],"name":"getVaultPausedState","nameLocation":"6089:19:6","nodeType":"FunctionDefinition","parameters":{"id":698,"nodeType":"ParameterList","parameters":[],"src":"6108:2:6"},"returnParameters":{"id":705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":700,"mutability":"mutable","name":"vaultPaused","nameLocation":"6163:11:6","nodeType":"VariableDeclaration","scope":706,"src":"6158:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":699,"name":"bool","nodeType":"ElementaryTypeName","src":"6158:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":702,"mutability":"mutable","name":"vaultPauseWindowEndTime","nameLocation":"6183:23:6","nodeType":"VariableDeclaration","scope":706,"src":"6176:30:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":701,"name":"uint32","nodeType":"ElementaryTypeName","src":"6176:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":704,"mutability":"mutable","name":"vaultBufferPeriodEndTime","nameLocation":"6215:24:6","nodeType":"VariableDeclaration","scope":706,"src":"6208:31:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":703,"name":"uint32","nodeType":"ElementaryTypeName","src":"6208:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"6157:83:6"},"scope":908,"src":"6080:161:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":707,"nodeType":"StructuredDocumentation","src":"6247:517:6","text":" @notice Pause the Vault: an emergency action which disables all operational state-changing functions on pools.\n @dev This is a permissioned function that will only work during the Pause Window set during deployment.\n Note that ERC4626 buffer operations have an independent pause mechanism, which is not affected by pausing\n the Vault. Custom routers could still wrap/unwrap using buffers while the Vault is paused, unless buffers\n are also paused (with `pauseVaultBuffers`)."},"functionSelector":"9e0879c2","id":710,"implemented":false,"kind":"function","modifiers":[],"name":"pauseVault","nameLocation":"6778:10:6","nodeType":"FunctionDefinition","parameters":{"id":708,"nodeType":"ParameterList","parameters":[],"src":"6788:2:6"},"returnParameters":{"id":709,"nodeType":"ParameterList","parameters":[],"src":"6799:0:6"},"scope":908,"src":"6769:31:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":711,"nodeType":"StructuredDocumentation","src":"6806:569:6","text":" @notice Reverse a `pause` operation, and restore Vault pool operations to normal functionality.\n @dev This is a permissioned function that will only work on a paused Vault within the Buffer Period set during\n deployment. Note that the Vault will automatically unpause after the Buffer Period expires. As noted above,\n ERC4626 buffers and Vault operations on pools are independent. Unpausing the Vault does not reverse\n `pauseVaultBuffers`. If buffers were also paused, they will remain in that state until explicitly unpaused."},"functionSelector":"0b7562be","id":714,"implemented":false,"kind":"function","modifiers":[],"name":"unpauseVault","nameLocation":"7389:12:6","nodeType":"FunctionDefinition","parameters":{"id":712,"nodeType":"ParameterList","parameters":[],"src":"7401:2:6"},"returnParameters":{"id":713,"nodeType":"ParameterList","parameters":[],"src":"7412:0:6"},"scope":908,"src":"7380:33:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":715,"nodeType":"StructuredDocumentation","src":"7639:276:6","text":" @notice Pause the Pool: an emergency action which disables all pool functions.\n @dev This is a permissioned function that will only work during the Pause Window set during pool factory\n deployment.\n @param pool The pool being paused"},"functionSelector":"55aca1ec","id":720,"implemented":false,"kind":"function","modifiers":[],"name":"pausePool","nameLocation":"7929:9:6","nodeType":"FunctionDefinition","parameters":{"id":718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":717,"mutability":"mutable","name":"pool","nameLocation":"7947:4:6","nodeType":"VariableDeclaration","scope":720,"src":"7939:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":716,"name":"address","nodeType":"ElementaryTypeName","src":"7939:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7938:14:6"},"returnParameters":{"id":719,"nodeType":"ParameterList","parameters":[],"src":"7961:0:6"},"scope":908,"src":"7920:42:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":721,"nodeType":"StructuredDocumentation","src":"7968:366:6","text":" @notice Reverse a `pause` operation, and restore the Pool to normal functionality.\n @dev This is a permissioned function that will only work on a paused Pool within the Buffer Period set during\n deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\n @param pool The pool being unpaused"},"functionSelector":"f21c38cd","id":726,"implemented":false,"kind":"function","modifiers":[],"name":"unpausePool","nameLocation":"8348:11:6","nodeType":"FunctionDefinition","parameters":{"id":724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":723,"mutability":"mutable","name":"pool","nameLocation":"8368:4:6","nodeType":"VariableDeclaration","scope":726,"src":"8360:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":722,"name":"address","nodeType":"ElementaryTypeName","src":"8360:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8359:14:6"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[],"src":"8382:0:6"},"scope":908,"src":"8339:44:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":727,"nodeType":"StructuredDocumentation","src":"8606:520:6","text":" @notice Assigns a new static swap fee percentage to the specified pool.\n @dev This is a permissioned function, disabled if the pool is paused. The swap fee percentage must be within\n the bounds specified by the pool's implementation of `ISwapFeePercentageBounds`.\n Emits the SwapFeePercentageChanged event.\n @param pool The address of the pool for which the static swap fee will be changed\n @param swapFeePercentage The new swap fee percentage to apply to the pool"},"functionSelector":"d15126ba","id":734,"implemented":false,"kind":"function","modifiers":[],"name":"setStaticSwapFeePercentage","nameLocation":"9140:26:6","nodeType":"FunctionDefinition","parameters":{"id":732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":729,"mutability":"mutable","name":"pool","nameLocation":"9175:4:6","nodeType":"VariableDeclaration","scope":734,"src":"9167:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"9167:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":731,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"9189:17:6","nodeType":"VariableDeclaration","scope":734,"src":"9181:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":730,"name":"uint256","nodeType":"ElementaryTypeName","src":"9181:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9166:41:6"},"returnParameters":{"id":733,"nodeType":"ParameterList","parameters":[],"src":"9216:0:6"},"scope":908,"src":"9131:86:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":735,"nodeType":"StructuredDocumentation","src":"9223:463:6","text":" @notice Collects accumulated aggregate swap and yield fees for the specified pool.\n @dev Fees are sent to the ProtocolFeeController address.\n @param pool The pool on which all aggregate fees should be collected\n @return swapFeeAmounts An array with the total swap fees collected, sorted in token registration order\n @return yieldFeeAmounts An array with the total yield fees collected, sorted in token registration order"},"functionSelector":"8f4ab9ca","id":746,"implemented":false,"kind":"function","modifiers":[],"name":"collectAggregateFees","nameLocation":"9700:20:6","nodeType":"FunctionDefinition","parameters":{"id":738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":737,"mutability":"mutable","name":"pool","nameLocation":"9738:4:6","nodeType":"VariableDeclaration","scope":746,"src":"9730:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":736,"name":"address","nodeType":"ElementaryTypeName","src":"9730:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9720:28:6"},"returnParameters":{"id":745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":741,"mutability":"mutable","name":"swapFeeAmounts","nameLocation":"9784:14:6","nodeType":"VariableDeclaration","scope":746,"src":"9767:31:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":739,"name":"uint256","nodeType":"ElementaryTypeName","src":"9767:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":740,"nodeType":"ArrayTypeName","src":"9767:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":744,"mutability":"mutable","name":"yieldFeeAmounts","nameLocation":"9817:15:6","nodeType":"VariableDeclaration","scope":746,"src":"9800:32:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":742,"name":"uint256","nodeType":"ElementaryTypeName","src":"9800:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":743,"nodeType":"ArrayTypeName","src":"9800:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"9766:67:6"},"scope":908,"src":"9691:143:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":747,"nodeType":"StructuredDocumentation","src":"9840:755:6","text":" @notice Update an aggregate swap fee percentage.\n @dev Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee\n for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's\n fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also\n that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol).\n Emits an `AggregateSwapFeePercentageChanged` event.\n @param pool The pool whose swap fee percentage will be updated\n @param newAggregateSwapFeePercentage The new aggregate swap fee percentage"},"functionSelector":"5e0b06f4","id":754,"implemented":false,"kind":"function","modifiers":[],"name":"updateAggregateSwapFeePercentage","nameLocation":"10609:32:6","nodeType":"FunctionDefinition","parameters":{"id":752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":749,"mutability":"mutable","name":"pool","nameLocation":"10650:4:6","nodeType":"VariableDeclaration","scope":754,"src":"10642:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":748,"name":"address","nodeType":"ElementaryTypeName","src":"10642:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":751,"mutability":"mutable","name":"newAggregateSwapFeePercentage","nameLocation":"10664:29:6","nodeType":"VariableDeclaration","scope":754,"src":"10656:37:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":750,"name":"uint256","nodeType":"ElementaryTypeName","src":"10656:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10641:53:6"},"returnParameters":{"id":753,"nodeType":"ParameterList","parameters":[],"src":"10703:0:6"},"scope":908,"src":"10600:104:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":755,"nodeType":"StructuredDocumentation","src":"10710:760:6","text":" @notice Update an aggregate yield fee percentage.\n @dev Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee\n for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's\n fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also\n that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol).\n Emits an `AggregateYieldFeePercentageChanged` event.\n @param pool The pool whose yield fee percentage will be updated\n @param newAggregateYieldFeePercentage The new aggregate yield fee percentage"},"functionSelector":"e253670a","id":762,"implemented":false,"kind":"function","modifiers":[],"name":"updateAggregateYieldFeePercentage","nameLocation":"11484:33:6","nodeType":"FunctionDefinition","parameters":{"id":760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"pool","nameLocation":"11526:4:6","nodeType":"VariableDeclaration","scope":762,"src":"11518:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":756,"name":"address","nodeType":"ElementaryTypeName","src":"11518:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":759,"mutability":"mutable","name":"newAggregateYieldFeePercentage","nameLocation":"11540:30:6","nodeType":"VariableDeclaration","scope":762,"src":"11532:38:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":758,"name":"uint256","nodeType":"ElementaryTypeName","src":"11532:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11517:54:6"},"returnParameters":{"id":761,"nodeType":"ParameterList","parameters":[],"src":"11580:0:6"},"scope":908,"src":"11475:106:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":763,"nodeType":"StructuredDocumentation","src":"11587:249:6","text":" @notice Sets a new Protocol Fee Controller for the Vault.\n @dev This is a permissioned call. Emits a `ProtocolFeeControllerChanged` event.\n @param newProtocolFeeController The address of the new Protocol Fee Controller"},"functionSelector":"2d771389","id":769,"implemented":false,"kind":"function","modifiers":[],"name":"setProtocolFeeController","nameLocation":"11850:24:6","nodeType":"FunctionDefinition","parameters":{"id":767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":766,"mutability":"mutable","name":"newProtocolFeeController","nameLocation":"11898:24:6","nodeType":"VariableDeclaration","scope":769,"src":"11875:47:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$580","typeString":"contract IProtocolFeeController"},"typeName":{"id":765,"nodeType":"UserDefinedTypeName","pathNode":{"id":764,"name":"IProtocolFeeController","nameLocations":["11875:22:6"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"11875:22:6"},"referencedDeclaration":580,"src":"11875:22:6","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$580","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"src":"11874:49:6"},"returnParameters":{"id":768,"nodeType":"ParameterList","parameters":[],"src":"11932:0:6"},"scope":908,"src":"11841:92:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":770,"nodeType":"StructuredDocumentation","src":"12160:557:6","text":" @notice Enable recovery mode for a pool.\n @dev This is a permissioned function. It enables a safe proportional withdrawal, with no external calls.\n Since there are no external calls, ensuring that entering Recovery Mode cannot fail, we cannot compute and so\n must forfeit any yield fees between the last operation and enabling Recovery Mode. For the same reason, live\n balances cannot be updated while in Recovery Mode, as doing so might cause withdrawals to fail.\n @param pool The address of the pool"},"functionSelector":"dc3f574e","id":775,"implemented":false,"kind":"function","modifiers":[],"name":"enableRecoveryMode","nameLocation":"12731:18:6","nodeType":"FunctionDefinition","parameters":{"id":773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":772,"mutability":"mutable","name":"pool","nameLocation":"12758:4:6","nodeType":"VariableDeclaration","scope":775,"src":"12750:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":771,"name":"address","nodeType":"ElementaryTypeName","src":"12750:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12749:14:6"},"returnParameters":{"id":774,"nodeType":"ParameterList","parameters":[],"src":"12772:0:6"},"scope":908,"src":"12722:51:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":776,"nodeType":"StructuredDocumentation","src":"12779:409:6","text":" @notice Disable recovery mode for a pool.\n @dev This is a permissioned function. It re-syncs live balances (which could not be updated during\n Recovery Mode), forfeiting any yield fees that accrued while enabled. It makes external calls, and could\n potentially fail if there is an issue with any associated Rate Providers.\n @param pool The address of the pool"},"functionSelector":"bffb78b2","id":781,"implemented":false,"kind":"function","modifiers":[],"name":"disableRecoveryMode","nameLocation":"13202:19:6","nodeType":"FunctionDefinition","parameters":{"id":779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"pool","nameLocation":"13230:4:6","nodeType":"VariableDeclaration","scope":781,"src":"13222:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":777,"name":"address","nodeType":"ElementaryTypeName","src":"13222:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13221:14:6"},"returnParameters":{"id":780,"nodeType":"ParameterList","parameters":[],"src":"13244:0:6"},"scope":908,"src":"13193:52:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":782,"nodeType":"StructuredDocumentation","src":"13476:653:6","text":" @notice Disables query functionality on the Vault. Can only be called by governance.\n @dev The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from\n settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable\n queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2).\n This function can be acted upon as an emergency measure in ambiguous contexts where it's not 100% clear whether\n disabling queries is completely necessary; queries can still be re-enabled after this call."},"functionSelector":"de1a36a6","id":785,"implemented":false,"kind":"function","modifiers":[],"name":"disableQuery","nameLocation":"14143:12:6","nodeType":"FunctionDefinition","parameters":{"id":783,"nodeType":"ParameterList","parameters":[],"src":"14155:2:6"},"returnParameters":{"id":784,"nodeType":"ParameterList","parameters":[],"src":"14166:0:6"},"scope":908,"src":"14134:33:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":786,"nodeType":"StructuredDocumentation","src":"14173:223:6","text":" @notice Disables query functionality permanently on the Vault. Can only be called by governance.\n @dev Shall only be used when there is no doubt that queries pose a fundamental threat to the system."},"functionSelector":"821440f2","id":789,"implemented":false,"kind":"function","modifiers":[],"name":"disableQueryPermanently","nameLocation":"14410:23:6","nodeType":"FunctionDefinition","parameters":{"id":787,"nodeType":"ParameterList","parameters":[],"src":"14433:2:6"},"returnParameters":{"id":788,"nodeType":"ParameterList","parameters":[],"src":"14444:0:6"},"scope":908,"src":"14401:44:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":790,"nodeType":"StructuredDocumentation","src":"14451:166:6","text":" @notice Enables query functionality on the Vault. Can only be called by governance.\n @dev Only works if queries are not permanently disabled."},"functionSelector":"e0d55605","id":793,"implemented":false,"kind":"function","modifiers":[],"name":"enableQuery","nameLocation":"14631:11:6","nodeType":"FunctionDefinition","parameters":{"id":791,"nodeType":"ParameterList","parameters":[],"src":"14642:2:6"},"returnParameters":{"id":792,"nodeType":"ParameterList","parameters":[],"src":"14653:0:6"},"scope":908,"src":"14622:32:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":794,"nodeType":"StructuredDocumentation","src":"14881:590:6","text":" @notice Indicates whether the Vault buffers are paused.\n @dev When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true)\n will revert. Pausing buffers is reversible. Note that ERC4626 buffers and the Vault have separate and\n independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they\n would likely be paused and unpaused together). Call `isVaultPaused` to check the pause state of the Vault.\n @return buffersPaused True if the Vault buffers are paused"},"functionSelector":"55cba7fe","id":799,"implemented":false,"kind":"function","modifiers":[],"name":"areBuffersPaused","nameLocation":"15485:16:6","nodeType":"FunctionDefinition","parameters":{"id":795,"nodeType":"ParameterList","parameters":[],"src":"15501:2:6"},"returnParameters":{"id":798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":797,"mutability":"mutable","name":"buffersPaused","nameLocation":"15532:13:6","nodeType":"VariableDeclaration","scope":799,"src":"15527:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":796,"name":"bool","nodeType":"ElementaryTypeName","src":"15527:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15526:20:6"},"scope":908,"src":"15476:71:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":800,"nodeType":"StructuredDocumentation","src":"15553:619:6","text":" @notice Pauses native vault buffers globally.\n @dev When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's\n `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. Currently it's not\n possible to pause vault buffers individually.\n This is a permissioned call, and is reversible (see `unpauseVaultBuffers`). Note that the Vault has a separate\n and independent pausing mechanism. It is possible to pause the Vault (i.e. pool operations), without affecting\n buffers, and vice versa."},"functionSelector":"e085c5a8","id":803,"implemented":false,"kind":"function","modifiers":[],"name":"pauseVaultBuffers","nameLocation":"16186:17:6","nodeType":"FunctionDefinition","parameters":{"id":801,"nodeType":"ParameterList","parameters":[],"src":"16203:2:6"},"returnParameters":{"id":802,"nodeType":"ParameterList","parameters":[],"src":"16214:0:6"},"scope":908,"src":"16177:38:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":804,"nodeType":"StructuredDocumentation","src":"16221:545:6","text":" @notice Unpauses native vault buffers globally.\n @dev When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's\n `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. As noted above,\n ERC4626 buffers and Vault operations on pools are independent. Unpausing buffers does not reverse `pauseVault`.\n If the Vault was also paused, it will remain in that state until explicitly unpaused.\n This is a permissioned call."},"functionSelector":"b9212b49","id":807,"implemented":false,"kind":"function","modifiers":[],"name":"unpauseVaultBuffers","nameLocation":"16780:19:6","nodeType":"FunctionDefinition","parameters":{"id":805,"nodeType":"ParameterList","parameters":[],"src":"16799:2:6"},"returnParameters":{"id":806,"nodeType":"ParameterList","parameters":[],"src":"16810:0:6"},"scope":908,"src":"16771:40:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":808,"nodeType":"StructuredDocumentation","src":"16817:860:6","text":" @notice Initializes buffer for the given wrapped token.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param amountUnderlyingRaw Amount of underlying tokens that will be deposited into the buffer\n @param amountWrappedRaw Amount of wrapped tokens that will be deposited into the buffer\n @param minIssuedShares Minimum amount of shares to receive from the buffer, expressed in underlying token\n native decimals\n @param sharesOwner Address that will own the deposited liquidity. Only this address will be able to remove\n liquidity from the buffer\n @return issuedShares the amount of tokens sharesOwner has in the buffer, expressed in underlying token amounts.\n (it is the BPT of an internal ERC4626 buffer). It is expressed in underlying token native decimals."},"functionSelector":"653eb3b0","id":824,"implemented":false,"kind":"function","modifiers":[],"name":"initializeBuffer","nameLocation":"17691:16:6","nodeType":"FunctionDefinition","parameters":{"id":820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"wrappedToken","nameLocation":"17726:12:6","nodeType":"VariableDeclaration","scope":824,"src":"17717:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":810,"nodeType":"UserDefinedTypeName","pathNode":{"id":809,"name":"IERC4626","nameLocations":["17717:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"17717:8:6"},"referencedDeclaration":3024,"src":"17717:8:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":813,"mutability":"mutable","name":"amountUnderlyingRaw","nameLocation":"17756:19:6","nodeType":"VariableDeclaration","scope":824,"src":"17748:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":812,"name":"uint256","nodeType":"ElementaryTypeName","src":"17748:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":815,"mutability":"mutable","name":"amountWrappedRaw","nameLocation":"17793:16:6","nodeType":"VariableDeclaration","scope":824,"src":"17785:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":814,"name":"uint256","nodeType":"ElementaryTypeName","src":"17785:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":817,"mutability":"mutable","name":"minIssuedShares","nameLocation":"17827:15:6","nodeType":"VariableDeclaration","scope":824,"src":"17819:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":816,"name":"uint256","nodeType":"ElementaryTypeName","src":"17819:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":819,"mutability":"mutable","name":"sharesOwner","nameLocation":"17860:11:6","nodeType":"VariableDeclaration","scope":824,"src":"17852:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":818,"name":"address","nodeType":"ElementaryTypeName","src":"17852:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17707:170:6"},"returnParameters":{"id":823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":822,"mutability":"mutable","name":"issuedShares","nameLocation":"17904:12:6","nodeType":"VariableDeclaration","scope":824,"src":"17896:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":821,"name":"uint256","nodeType":"ElementaryTypeName","src":"17896:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17895:22:6"},"scope":908,"src":"17682:236:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":825,"nodeType":"StructuredDocumentation","src":"17924:1010:6","text":" @notice Adds liquidity to an internal ERC4626 buffer in the Vault, proportionally.\n @dev The buffer needs to be initialized beforehand.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param maxAmountUnderlyingInRaw Maximum amount of underlying tokens to add to the buffer. It is expressed in\n underlying token native decimals\n @param maxAmountWrappedInRaw Maximum amount of wrapped tokens to add to the buffer. It is expressed in wrapped\n token native decimals\n @param exactSharesToIssue The value in underlying tokens that `sharesOwner` wants to add to the buffer,\n in underlying token decimals\n @param sharesOwner Address that will own the deposited liquidity. Only this address will be able to remove\n liquidity from the buffer\n @return amountUnderlyingRaw Amount of underlying tokens deposited into the buffer\n @return amountWrappedRaw Amount of wrapped tokens deposited into the buffer"},"functionSelector":"e2a92b1a","id":843,"implemented":false,"kind":"function","modifiers":[],"name":"addLiquidityToBuffer","nameLocation":"18948:20:6","nodeType":"FunctionDefinition","parameters":{"id":837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"wrappedToken","nameLocation":"18987:12:6","nodeType":"VariableDeclaration","scope":843,"src":"18978:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":827,"nodeType":"UserDefinedTypeName","pathNode":{"id":826,"name":"IERC4626","nameLocations":["18978:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"18978:8:6"},"referencedDeclaration":3024,"src":"18978:8:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":830,"mutability":"mutable","name":"maxAmountUnderlyingInRaw","nameLocation":"19017:24:6","nodeType":"VariableDeclaration","scope":843,"src":"19009:32:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":829,"name":"uint256","nodeType":"ElementaryTypeName","src":"19009:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":832,"mutability":"mutable","name":"maxAmountWrappedInRaw","nameLocation":"19059:21:6","nodeType":"VariableDeclaration","scope":843,"src":"19051:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":831,"name":"uint256","nodeType":"ElementaryTypeName","src":"19051:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":834,"mutability":"mutable","name":"exactSharesToIssue","nameLocation":"19098:18:6","nodeType":"VariableDeclaration","scope":843,"src":"19090:26:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":833,"name":"uint256","nodeType":"ElementaryTypeName","src":"19090:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":836,"mutability":"mutable","name":"sharesOwner","nameLocation":"19134:11:6","nodeType":"VariableDeclaration","scope":843,"src":"19126:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":835,"name":"address","nodeType":"ElementaryTypeName","src":"19126:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18968:183:6"},"returnParameters":{"id":842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":839,"mutability":"mutable","name":"amountUnderlyingRaw","nameLocation":"19178:19:6","nodeType":"VariableDeclaration","scope":843,"src":"19170:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":838,"name":"uint256","nodeType":"ElementaryTypeName","src":"19170:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":841,"mutability":"mutable","name":"amountWrappedRaw","nameLocation":"19207:16:6","nodeType":"VariableDeclaration","scope":843,"src":"19199:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":840,"name":"uint256","nodeType":"ElementaryTypeName","src":"19199:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19169:55:6"},"scope":908,"src":"18939:286:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":844,"nodeType":"StructuredDocumentation","src":"19231:1458:6","text":" @notice Removes liquidity from an internal ERC4626 buffer in the Vault.\n @dev Only proportional exits are supported, and the sender has to be the owner of the shares.\n This function unlocks the Vault just for this operation; it does not work with a Router as an entrypoint.\n Pre-conditions:\n - The buffer needs to be initialized.\n - sharesOwner is the original msg.sender, it needs to be checked in the Router. That's why\n   this call is authenticated; only routers approved by the DAO can remove the liquidity of a buffer.\n - The buffer needs to have some liquidity and have its asset registered in `_bufferAssets` storage.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param sharesToRemove Amount of shares to remove from the buffer. Cannot be greater than sharesOwner's\n total shares. It is expressed in underlying token native decimals\n @param minAmountUnderlyingOutRaw Minimum amount of underlying tokens to receive from the buffer. It is expressed\n in underlying token native decimals\n @param minAmountWrappedOutRaw Minimum amount of wrapped tokens to receive from the buffer. It is expressed in\n wrapped token native decimals\n @return removedUnderlyingBalanceRaw Amount of underlying tokens returned to the user\n @return removedWrappedBalanceRaw Amount of wrapped tokens returned to the user"},"functionSelector":"ebc7955c","id":860,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityFromBuffer","nameLocation":"20703:25:6","nodeType":"FunctionDefinition","parameters":{"id":854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"mutability":"mutable","name":"wrappedToken","nameLocation":"20747:12:6","nodeType":"VariableDeclaration","scope":860,"src":"20738:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":846,"nodeType":"UserDefinedTypeName","pathNode":{"id":845,"name":"IERC4626","nameLocations":["20738:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"20738:8:6"},"referencedDeclaration":3024,"src":"20738:8:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":849,"mutability":"mutable","name":"sharesToRemove","nameLocation":"20777:14:6","nodeType":"VariableDeclaration","scope":860,"src":"20769:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":848,"name":"uint256","nodeType":"ElementaryTypeName","src":"20769:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":851,"mutability":"mutable","name":"minAmountUnderlyingOutRaw","nameLocation":"20809:25:6","nodeType":"VariableDeclaration","scope":860,"src":"20801:33:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":850,"name":"uint256","nodeType":"ElementaryTypeName","src":"20801:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":853,"mutability":"mutable","name":"minAmountWrappedOutRaw","nameLocation":"20852:22:6","nodeType":"VariableDeclaration","scope":860,"src":"20844:30:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":852,"name":"uint256","nodeType":"ElementaryTypeName","src":"20844:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20728:152:6"},"returnParameters":{"id":859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":856,"mutability":"mutable","name":"removedUnderlyingBalanceRaw","nameLocation":"20907:27:6","nodeType":"VariableDeclaration","scope":860,"src":"20899:35:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":855,"name":"uint256","nodeType":"ElementaryTypeName","src":"20899:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":858,"mutability":"mutable","name":"removedWrappedBalanceRaw","nameLocation":"20944:24:6","nodeType":"VariableDeclaration","scope":860,"src":"20936:32:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":857,"name":"uint256","nodeType":"ElementaryTypeName","src":"20936:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20898:71:6"},"scope":908,"src":"20694:276:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":861,"nodeType":"StructuredDocumentation","src":"20976:382:6","text":" @notice Returns the asset registered for a given wrapped token.\n @dev The asset can never change after buffer initialization.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return underlyingToken Address of the underlying token registered for the wrapper; `address(0)` if the buffer\n has not been initialized."},"functionSelector":"0387587d","id":869,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferAsset","nameLocation":"21372:14:6","nodeType":"FunctionDefinition","parameters":{"id":865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":864,"mutability":"mutable","name":"wrappedToken","nameLocation":"21396:12:6","nodeType":"VariableDeclaration","scope":869,"src":"21387:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":863,"nodeType":"UserDefinedTypeName","pathNode":{"id":862,"name":"IERC4626","nameLocations":["21387:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"21387:8:6"},"referencedDeclaration":3024,"src":"21387:8:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"21386:23:6"},"returnParameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"underlyingToken","nameLocation":"21441:15:6","nodeType":"VariableDeclaration","scope":869,"src":"21433:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":866,"name":"address","nodeType":"ElementaryTypeName","src":"21433:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21432:25:6"},"scope":908,"src":"21363:95:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":870,"nodeType":"StructuredDocumentation","src":"21464:441:6","text":" @notice Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets\n in the buffer.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param liquidityOwner Address of the user that owns liquidity in the wrapped token's buffer\n @return ownerShares Amount of shares allocated to the liquidity owner, in native underlying token decimals"},"functionSelector":"9385e39a","id":880,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferOwnerShares","nameLocation":"21919:20:6","nodeType":"FunctionDefinition","parameters":{"id":876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":873,"mutability":"mutable","name":"wrappedToken","nameLocation":"21958:12:6","nodeType":"VariableDeclaration","scope":880,"src":"21949:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":872,"nodeType":"UserDefinedTypeName","pathNode":{"id":871,"name":"IERC4626","nameLocations":["21949:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"21949:8:6"},"referencedDeclaration":3024,"src":"21949:8:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":875,"mutability":"mutable","name":"liquidityOwner","nameLocation":"21988:14:6","nodeType":"VariableDeclaration","scope":880,"src":"21980:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":874,"name":"address","nodeType":"ElementaryTypeName","src":"21980:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21939:69:6"},"returnParameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"ownerShares","nameLocation":"22040:11:6","nodeType":"VariableDeclaration","scope":880,"src":"22032:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":877,"name":"uint256","nodeType":"ElementaryTypeName","src":"22032:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22031:21:6"},"scope":908,"src":"21910:143:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"22059:281:6","text":" @notice Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return bufferShares Amount of supply shares of the buffer, in native underlying token decimals"},"functionSelector":"f2784e07","id":889,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferTotalShares","nameLocation":"22354:20:6","nodeType":"FunctionDefinition","parameters":{"id":885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":884,"mutability":"mutable","name":"wrappedToken","nameLocation":"22384:12:6","nodeType":"VariableDeclaration","scope":889,"src":"22375:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":883,"nodeType":"UserDefinedTypeName","pathNode":{"id":882,"name":"IERC4626","nameLocations":["22375:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"22375:8:6"},"referencedDeclaration":3024,"src":"22375:8:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"22374:23:6"},"returnParameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":887,"mutability":"mutable","name":"bufferShares","nameLocation":"22429:12:6","nodeType":"VariableDeclaration","scope":889,"src":"22421:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":886,"name":"uint256","nodeType":"ElementaryTypeName","src":"22421:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22420:22:6"},"scope":908,"src":"22345:98:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"22449:521:6","text":" @notice Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\n @dev All values are in native token decimals of the wrapped or underlying tokens.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return underlyingBalanceRaw Amount of underlying tokens deposited into the buffer, in native token decimals\n @return wrappedBalanceRaw Amount of wrapped tokens deposited into the buffer, in native token decimals"},"functionSelector":"4021fe0f","id":900,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferBalance","nameLocation":"22984:16:6","nodeType":"FunctionDefinition","parameters":{"id":894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":893,"mutability":"mutable","name":"wrappedToken","nameLocation":"23019:12:6","nodeType":"VariableDeclaration","scope":900,"src":"23010:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":892,"nodeType":"UserDefinedTypeName","pathNode":{"id":891,"name":"IERC4626","nameLocations":["23010:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"23010:8:6"},"referencedDeclaration":3024,"src":"23010:8:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"23000:37:6"},"returnParameters":{"id":899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":896,"mutability":"mutable","name":"underlyingBalanceRaw","nameLocation":"23069:20:6","nodeType":"VariableDeclaration","scope":900,"src":"23061:28:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":895,"name":"uint256","nodeType":"ElementaryTypeName","src":"23061:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":898,"mutability":"mutable","name":"wrappedBalanceRaw","nameLocation":"23099:17:6","nodeType":"VariableDeclaration","scope":900,"src":"23091:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":897,"name":"uint256","nodeType":"ElementaryTypeName","src":"23091:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23060:57:6"},"scope":908,"src":"22975:143:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"23342:202:6","text":" @notice Sets a new Authorizer for the Vault.\n @dev This is a permissioned call. Emits an `AuthorizerChanged` event.\n @param newAuthorizer The address of the new authorizer"},"functionSelector":"058a628f","id":907,"implemented":false,"kind":"function","modifiers":[],"name":"setAuthorizer","nameLocation":"23558:13:6","nodeType":"FunctionDefinition","parameters":{"id":905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":904,"mutability":"mutable","name":"newAuthorizer","nameLocation":"23584:13:6","nodeType":"VariableDeclaration","scope":907,"src":"23572:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$40","typeString":"contract IAuthorizer"},"typeName":{"id":903,"nodeType":"UserDefinedTypeName","pathNode":{"id":902,"name":"IAuthorizer","nameLocations":["23572:11:6"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"23572:11:6"},"referencedDeclaration":40,"src":"23572:11:6","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$40","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"23571:27:6"},"returnParameters":{"id":906,"nodeType":"ParameterList","parameters":[],"src":"23607:0:6"},"scope":908,"src":"23549:59:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":909,"src":"586:23024:6","usedErrors":[],"usedEvents":[]}],"src":"46:23565:6"},"id":6},"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol","exportedSymbols":{"IERC20":[3102],"IERC4626":[3024],"IVaultErrors":[1275]},"id":1276,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":910,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:7"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":912,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1276,"sourceUnit":3025,"src":"72:75:7","symbolAliases":[{"foreign":{"id":911,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"81:8:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":914,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1276,"sourceUnit":3103,"src":"148:72:7","symbolAliases":[{"foreign":{"id":913,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"157:6:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultErrors","contractDependencies":[],"contractKind":"interface","documentation":{"id":915,"nodeType":"StructuredDocumentation","src":"222:94:7","text":"@notice Errors are declared inside an interface (namespace) to improve DX with Typechain."},"fullyImplemented":true,"id":1275,"linearizedBaseContracts":[1275],"name":"IVaultErrors","nameLocation":"326:12:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":916,"nodeType":"StructuredDocumentation","src":"576:149:7","text":" @notice A pool has already been registered. `registerPool` may only be called once.\n @param pool The already registered pool"},"errorSelector":"db771c80","id":920,"name":"PoolAlreadyRegistered","nameLocation":"736:21:7","nodeType":"ErrorDefinition","parameters":{"id":919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":918,"mutability":"mutable","name":"pool","nameLocation":"766:4:7","nodeType":"VariableDeclaration","scope":920,"src":"758:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":917,"name":"address","nodeType":"ElementaryTypeName","src":"758:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"757:14:7"},"src":"730:42:7"},{"documentation":{"id":921,"nodeType":"StructuredDocumentation","src":"778:149:7","text":" @notice A pool has already been initialized. `initialize` may only be called once.\n @param pool The already initialized pool"},"errorSelector":"218e3747","id":925,"name":"PoolAlreadyInitialized","nameLocation":"938:22:7","nodeType":"ErrorDefinition","parameters":{"id":924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":923,"mutability":"mutable","name":"pool","nameLocation":"969:4:7","nodeType":"VariableDeclaration","scope":925,"src":"961:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":922,"name":"address","nodeType":"ElementaryTypeName","src":"961:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"960:14:7"},"src":"932:43:7"},{"documentation":{"id":926,"nodeType":"StructuredDocumentation","src":"981:99:7","text":" @notice A pool has not been registered.\n @param pool The unregistered pool"},"errorSelector":"9e51bd5c","id":930,"name":"PoolNotRegistered","nameLocation":"1091:17:7","nodeType":"ErrorDefinition","parameters":{"id":929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":928,"mutability":"mutable","name":"pool","nameLocation":"1117:4:7","nodeType":"VariableDeclaration","scope":930,"src":"1109:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":927,"name":"address","nodeType":"ElementaryTypeName","src":"1109:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1108:14:7"},"src":"1085:38:7"},{"documentation":{"id":931,"nodeType":"StructuredDocumentation","src":"1129:112:7","text":" @notice A referenced pool has not been initialized.\n @param pool The uninitialized pool"},"errorSelector":"4bdace13","id":935,"name":"PoolNotInitialized","nameLocation":"1252:18:7","nodeType":"ErrorDefinition","parameters":{"id":934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":933,"mutability":"mutable","name":"pool","nameLocation":"1279:4:7","nodeType":"VariableDeclaration","scope":935,"src":"1271:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":932,"name":"address","nodeType":"ElementaryTypeName","src":"1271:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1270:14:7"},"src":"1246:39:7"},{"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"1291:274:7","text":" @notice A hook contract rejected a pool on registration.\n @param poolHooksContract Address of the hook contract that rejected the pool registration\n @param pool Address of the rejected pool\n @param poolFactory Address of the pool factory"},"errorSelector":"fa93d814","id":944,"name":"HookRegistrationFailed","nameLocation":"1576:22:7","nodeType":"ErrorDefinition","parameters":{"id":943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"poolHooksContract","nameLocation":"1607:17:7","nodeType":"VariableDeclaration","scope":944,"src":"1599:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"1599:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":940,"mutability":"mutable","name":"pool","nameLocation":"1634:4:7","nodeType":"VariableDeclaration","scope":944,"src":"1626:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"1626:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"poolFactory","nameLocation":"1648:11:7","nodeType":"VariableDeclaration","scope":944,"src":"1640:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":941,"name":"address","nodeType":"ElementaryTypeName","src":"1640:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1598:62:7"},"src":"1570:91:7"},{"documentation":{"id":945,"nodeType":"StructuredDocumentation","src":"1667:136:7","text":" @notice A token was already registered (i.e., it is a duplicate in the pool).\n @param token The duplicate token"},"errorSelector":"4f4b634e","id":950,"name":"TokenAlreadyRegistered","nameLocation":"1814:22:7","nodeType":"ErrorDefinition","parameters":{"id":949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":948,"mutability":"mutable","name":"token","nameLocation":"1844:5:7","nodeType":"VariableDeclaration","scope":950,"src":"1837:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":947,"nodeType":"UserDefinedTypeName","pathNode":{"id":946,"name":"IERC20","nameLocations":["1837:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"1837:6:7"},"referencedDeclaration":3102,"src":"1837:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"1836:14:7"},"src":"1808:43:7"},{"documentation":{"id":951,"nodeType":"StructuredDocumentation","src":"1857:57:7","text":"@notice The token count is below the minimum allowed."},"errorSelector":"5ed4ba8f","id":953,"name":"MinTokens","nameLocation":"1925:9:7","nodeType":"ErrorDefinition","parameters":{"id":952,"nodeType":"ParameterList","parameters":[],"src":"1934:2:7"},"src":"1919:18:7"},{"documentation":{"id":954,"nodeType":"StructuredDocumentation","src":"1943:57:7","text":"@notice The token count is above the maximum allowed."},"errorSelector":"707bdf58","id":956,"name":"MaxTokens","nameLocation":"2011:9:7","nodeType":"ErrorDefinition","parameters":{"id":955,"nodeType":"ParameterList","parameters":[],"src":"2020:2:7"},"src":"2005:18:7"},{"documentation":{"id":957,"nodeType":"StructuredDocumentation","src":"2029:61:7","text":"@notice Invalid tokens (e.g., zero) cannot be registered."},"errorSelector":"c1ab6dc1","id":959,"name":"InvalidToken","nameLocation":"2101:12:7","nodeType":"ErrorDefinition","parameters":{"id":958,"nodeType":"ParameterList","parameters":[],"src":"2113:2:7"},"src":"2095:21:7"},{"documentation":{"id":960,"nodeType":"StructuredDocumentation","src":"2122:86:7","text":"@notice The token type given in a TokenConfig during pool registration is invalid."},"errorSelector":"a1e9dd9d","id":962,"name":"InvalidTokenType","nameLocation":"2219:16:7","nodeType":"ErrorDefinition","parameters":{"id":961,"nodeType":"ParameterList","parameters":[],"src":"2235:2:7"},"src":"2213:25:7"},{"documentation":{"id":963,"nodeType":"StructuredDocumentation","src":"2244:76:7","text":"@notice The data in a TokenConfig struct is inconsistent or unsupported."},"errorSelector":"df450632","id":965,"name":"InvalidTokenConfiguration","nameLocation":"2331:25:7","nodeType":"ErrorDefinition","parameters":{"id":964,"nodeType":"ParameterList","parameters":[],"src":"2356:2:7"},"src":"2325:34:7"},{"documentation":{"id":966,"nodeType":"StructuredDocumentation","src":"2365:64:7","text":"@notice Tokens with more than 18 decimals are not supported."},"errorSelector":"686d3607","id":968,"name":"InvalidTokenDecimals","nameLocation":"2440:20:7","nodeType":"ErrorDefinition","parameters":{"id":967,"nodeType":"ParameterList","parameters":[],"src":"2460:2:7"},"src":"2434:29:7"},{"documentation":{"id":969,"nodeType":"StructuredDocumentation","src":"2469:287:7","text":" @notice The token list passed into an operation does not match the pool tokens in the pool.\n @param pool Address of the pool\n @param expectedToken The correct token at a given index in the pool\n @param actualToken The actual token found at that index"},"errorSelector":"ffe261a1","id":977,"name":"TokensMismatch","nameLocation":"2767:14:7","nodeType":"ErrorDefinition","parameters":{"id":976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":971,"mutability":"mutable","name":"pool","nameLocation":"2790:4:7","nodeType":"VariableDeclaration","scope":977,"src":"2782:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":970,"name":"address","nodeType":"ElementaryTypeName","src":"2782:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":973,"mutability":"mutable","name":"expectedToken","nameLocation":"2804:13:7","nodeType":"VariableDeclaration","scope":977,"src":"2796:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":972,"name":"address","nodeType":"ElementaryTypeName","src":"2796:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":975,"mutability":"mutable","name":"actualToken","nameLocation":"2827:11:7","nodeType":"VariableDeclaration","scope":977,"src":"2819:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":974,"name":"address","nodeType":"ElementaryTypeName","src":"2819:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2781:58:7"},"src":"2761:79:7"},{"documentation":{"id":978,"nodeType":"StructuredDocumentation","src":"3071:85:7","text":"@notice A transient accounting operation completed with outstanding token deltas."},"errorSelector":"20f1d86d","id":980,"name":"BalanceNotSettled","nameLocation":"3167:17:7","nodeType":"ErrorDefinition","parameters":{"id":979,"nodeType":"ParameterList","parameters":[],"src":"3184:2:7"},"src":"3161:26:7"},{"documentation":{"id":981,"nodeType":"StructuredDocumentation","src":"3193:97:7","text":"@notice A user called a Vault function (swap, add/remove liquidity) outside the lock context."},"errorSelector":"c09ba736","id":983,"name":"VaultIsNotUnlocked","nameLocation":"3301:18:7","nodeType":"ErrorDefinition","parameters":{"id":982,"nodeType":"ParameterList","parameters":[],"src":"3319:2:7"},"src":"3295:27:7"},{"documentation":{"id":984,"nodeType":"StructuredDocumentation","src":"3328:105:7","text":"@notice The pool has returned false to the beforeSwap hook, indicating the transaction should revert."},"errorSelector":"53f976d4","id":986,"name":"DynamicSwapFeeHookFailed","nameLocation":"3444:24:7","nodeType":"ErrorDefinition","parameters":{"id":985,"nodeType":"ParameterList","parameters":[],"src":"3468:2:7"},"src":"3438:33:7"},{"documentation":{"id":987,"nodeType":"StructuredDocumentation","src":"3477:105:7","text":"@notice The pool has returned false to the beforeSwap hook, indicating the transaction should revert."},"errorSelector":"e91e17e7","id":989,"name":"BeforeSwapHookFailed","nameLocation":"3593:20:7","nodeType":"ErrorDefinition","parameters":{"id":988,"nodeType":"ParameterList","parameters":[],"src":"3613:2:7"},"src":"3587:29:7"},{"documentation":{"id":990,"nodeType":"StructuredDocumentation","src":"3622:104:7","text":"@notice The pool has returned false to the afterSwap hook, indicating the transaction should revert."},"errorSelector":"15a29dec","id":992,"name":"AfterSwapHookFailed","nameLocation":"3737:19:7","nodeType":"ErrorDefinition","parameters":{"id":991,"nodeType":"ParameterList","parameters":[],"src":"3756:2:7"},"src":"3731:28:7"},{"documentation":{"id":993,"nodeType":"StructuredDocumentation","src":"3765:111:7","text":"@notice The pool has returned false to the beforeInitialize hook, indicating the transaction should revert."},"errorSelector":"60612925","id":995,"name":"BeforeInitializeHookFailed","nameLocation":"3887:26:7","nodeType":"ErrorDefinition","parameters":{"id":994,"nodeType":"ParameterList","parameters":[],"src":"3913:2:7"},"src":"3881:35:7"},{"documentation":{"id":996,"nodeType":"StructuredDocumentation","src":"3922:110:7","text":"@notice The pool has returned false to the afterInitialize hook, indicating the transaction should revert."},"errorSelector":"0f23dbc6","id":998,"name":"AfterInitializeHookFailed","nameLocation":"4043:25:7","nodeType":"ErrorDefinition","parameters":{"id":997,"nodeType":"ParameterList","parameters":[],"src":"4068:2:7"},"src":"4037:34:7"},{"documentation":{"id":999,"nodeType":"StructuredDocumentation","src":"4077:113:7","text":"@notice The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert."},"errorSelector":"0b2eb652","id":1001,"name":"BeforeAddLiquidityHookFailed","nameLocation":"4201:28:7","nodeType":"ErrorDefinition","parameters":{"id":1000,"nodeType":"ParameterList","parameters":[],"src":"4229:2:7"},"src":"4195:37:7"},{"documentation":{"id":1002,"nodeType":"StructuredDocumentation","src":"4238:112:7","text":"@notice The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert."},"errorSelector":"e1249165","id":1004,"name":"AfterAddLiquidityHookFailed","nameLocation":"4361:27:7","nodeType":"ErrorDefinition","parameters":{"id":1003,"nodeType":"ParameterList","parameters":[],"src":"4388:2:7"},"src":"4355:36:7"},{"documentation":{"id":1005,"nodeType":"StructuredDocumentation","src":"4397:116:7","text":"@notice The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert."},"errorSelector":"2aaf8866","id":1007,"name":"BeforeRemoveLiquidityHookFailed","nameLocation":"4524:31:7","nodeType":"ErrorDefinition","parameters":{"id":1006,"nodeType":"ParameterList","parameters":[],"src":"4555:2:7"},"src":"4518:40:7"},{"documentation":{"id":1008,"nodeType":"StructuredDocumentation","src":"4564:115:7","text":"@notice The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert."},"errorSelector":"1d3391d8","id":1010,"name":"AfterRemoveLiquidityHookFailed","nameLocation":"4690:30:7","nodeType":"ErrorDefinition","parameters":{"id":1009,"nodeType":"ParameterList","parameters":[],"src":"4720:2:7"},"src":"4684:39:7"},{"documentation":{"id":1011,"nodeType":"StructuredDocumentation","src":"4729:115:7","text":"@notice An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance)."},"errorSelector":"e5d185cf","id":1013,"name":"RouterNotTrusted","nameLocation":"4855:16:7","nodeType":"ErrorDefinition","parameters":{"id":1012,"nodeType":"ParameterList","parameters":[],"src":"4871:2:7"},"src":"4849:25:7"},{"documentation":{"id":1014,"nodeType":"StructuredDocumentation","src":"5097:47:7","text":"@notice The user tried to swap zero tokens."},"errorSelector":"57a456b7","id":1016,"name":"AmountGivenZero","nameLocation":"5155:15:7","nodeType":"ErrorDefinition","parameters":{"id":1015,"nodeType":"ParameterList","parameters":[],"src":"5170:2:7"},"src":"5149:24:7"},{"documentation":{"id":1017,"nodeType":"StructuredDocumentation","src":"5179:58:7","text":"@notice The user attempted to swap a token for itself."},"errorSelector":"a54b181d","id":1019,"name":"CannotSwapSameToken","nameLocation":"5248:19:7","nodeType":"ErrorDefinition","parameters":{"id":1018,"nodeType":"ParameterList","parameters":[],"src":"5267:2:7"},"src":"5242:28:7"},{"documentation":{"id":1020,"nodeType":"StructuredDocumentation","src":"5276:137:7","text":" @notice The user attempted to operate with a token that is not in the pool.\n @param token The unregistered token"},"errorSelector":"ddef98d7","id":1025,"name":"TokenNotRegistered","nameLocation":"5424:18:7","nodeType":"ErrorDefinition","parameters":{"id":1024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1023,"mutability":"mutable","name":"token","nameLocation":"5450:5:7","nodeType":"VariableDeclaration","scope":1025,"src":"5443:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":1022,"nodeType":"UserDefinedTypeName","pathNode":{"id":1021,"name":"IERC20","nameLocations":["5443:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"5443:6:7"},"referencedDeclaration":3102,"src":"5443:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"5442:14:7"},"src":"5418:39:7"},{"documentation":{"id":1026,"nodeType":"StructuredDocumentation","src":"5463:215:7","text":" @notice An amount in or out has exceeded the limit specified in the swap request.\n @param amount The total amount in or out\n @param limit The amount of the limit that has been exceeded"},"errorSelector":"e2ea151b","id":1032,"name":"SwapLimit","nameLocation":"5689:9:7","nodeType":"ErrorDefinition","parameters":{"id":1031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"mutability":"mutable","name":"amount","nameLocation":"5707:6:7","nodeType":"VariableDeclaration","scope":1032,"src":"5699:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1027,"name":"uint256","nodeType":"ElementaryTypeName","src":"5699:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1030,"mutability":"mutable","name":"limit","nameLocation":"5723:5:7","nodeType":"VariableDeclaration","scope":1032,"src":"5715:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1029,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5698:31:7"},"src":"5683:47:7"},{"documentation":{"id":1033,"nodeType":"StructuredDocumentation","src":"5736:228:7","text":" @notice A hook adjusted amount in or out has exceeded the limit specified in the swap request.\n @param amount The total amount in or out\n @param limit The amount of the limit that has been exceeded"},"errorSelector":"cc0e4a99","id":1039,"name":"HookAdjustedSwapLimit","nameLocation":"5975:21:7","nodeType":"ErrorDefinition","parameters":{"id":1038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"amount","nameLocation":"6005:6:7","nodeType":"VariableDeclaration","scope":1039,"src":"5997:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1034,"name":"uint256","nodeType":"ElementaryTypeName","src":"5997:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1037,"mutability":"mutable","name":"limit","nameLocation":"6021:5:7","nodeType":"VariableDeclaration","scope":1039,"src":"6013:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1036,"name":"uint256","nodeType":"ElementaryTypeName","src":"6013:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5996:31:7"},"src":"5969:59:7"},{"documentation":{"id":1040,"nodeType":"StructuredDocumentation","src":"6034:87:7","text":"@notice The amount given or calculated for an operation is below the minimum limit."},"errorSelector":"1ed4d118","id":1042,"name":"TradeAmountTooSmall","nameLocation":"6132:19:7","nodeType":"ErrorDefinition","parameters":{"id":1041,"nodeType":"ParameterList","parameters":[],"src":"6151:2:7"},"src":"6126:28:7"},{"documentation":{"id":1043,"nodeType":"StructuredDocumentation","src":"6381:45:7","text":"@notice Add liquidity kind not supported."},"errorSelector":"6c02b395","id":1045,"name":"InvalidAddLiquidityKind","nameLocation":"6437:23:7","nodeType":"ErrorDefinition","parameters":{"id":1044,"nodeType":"ParameterList","parameters":[],"src":"6460:2:7"},"src":"6431:32:7"},{"documentation":{"id":1046,"nodeType":"StructuredDocumentation","src":"6469:264:7","text":" @notice A required amountIn exceeds the maximum limit specified for the operation.\n @param tokenIn The incoming token\n @param amountIn The total token amount in\n @param maxAmountIn The amount of the limit that has been exceeded"},"errorSelector":"8eda85e4","id":1055,"name":"AmountInAboveMax","nameLocation":"6744:16:7","nodeType":"ErrorDefinition","parameters":{"id":1054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1049,"mutability":"mutable","name":"tokenIn","nameLocation":"6768:7:7","nodeType":"VariableDeclaration","scope":1055,"src":"6761:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":1048,"nodeType":"UserDefinedTypeName","pathNode":{"id":1047,"name":"IERC20","nameLocations":["6761:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"6761:6:7"},"referencedDeclaration":3102,"src":"6761:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1051,"mutability":"mutable","name":"amountIn","nameLocation":"6785:8:7","nodeType":"VariableDeclaration","scope":1055,"src":"6777:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1050,"name":"uint256","nodeType":"ElementaryTypeName","src":"6777:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1053,"mutability":"mutable","name":"maxAmountIn","nameLocation":"6803:11:7","nodeType":"VariableDeclaration","scope":1055,"src":"6795:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1052,"name":"uint256","nodeType":"ElementaryTypeName","src":"6795:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6760:55:7"},"src":"6738:78:7"},{"documentation":{"id":1056,"nodeType":"StructuredDocumentation","src":"6822:269:7","text":" @notice A hook adjusted amountIn exceeds the maximum limit specified for the operation.\n @param tokenIn The incoming token\n @param amountIn The total token amount in\n @param maxAmountIn The amount of the limit that has been exceeded"},"errorSelector":"cefa3afa","id":1065,"name":"HookAdjustedAmountInAboveMax","nameLocation":"7102:28:7","nodeType":"ErrorDefinition","parameters":{"id":1064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1059,"mutability":"mutable","name":"tokenIn","nameLocation":"7138:7:7","nodeType":"VariableDeclaration","scope":1065,"src":"7131:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":1058,"nodeType":"UserDefinedTypeName","pathNode":{"id":1057,"name":"IERC20","nameLocations":["7131:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"7131:6:7"},"referencedDeclaration":3102,"src":"7131:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1061,"mutability":"mutable","name":"amountIn","nameLocation":"7155:8:7","nodeType":"VariableDeclaration","scope":1065,"src":"7147:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1060,"name":"uint256","nodeType":"ElementaryTypeName","src":"7147:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1063,"mutability":"mutable","name":"maxAmountIn","nameLocation":"7173:11:7","nodeType":"VariableDeclaration","scope":1065,"src":"7165:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1062,"name":"uint256","nodeType":"ElementaryTypeName","src":"7165:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7130:55:7"},"src":"7096:90:7"},{"documentation":{"id":1066,"nodeType":"StructuredDocumentation","src":"7192:245:7","text":" @notice The BPT amount received from adding liquidity is below the minimum specified for the operation.\n @param amountOut The total BPT amount out\n @param minAmountOut The amount of the limit that has been exceeded"},"errorSelector":"8d261d5d","id":1072,"name":"BptAmountOutBelowMin","nameLocation":"7448:20:7","nodeType":"ErrorDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1068,"mutability":"mutable","name":"amountOut","nameLocation":"7477:9:7","nodeType":"VariableDeclaration","scope":1072,"src":"7469:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1067,"name":"uint256","nodeType":"ElementaryTypeName","src":"7469:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1070,"mutability":"mutable","name":"minAmountOut","nameLocation":"7496:12:7","nodeType":"VariableDeclaration","scope":1072,"src":"7488:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"7488:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7468:41:7"},"src":"7442:68:7"},{"documentation":{"id":1073,"nodeType":"StructuredDocumentation","src":"7516:75:7","text":"@notice Pool does not support adding liquidity with a customized input."},"errorSelector":"4876c0bc","id":1075,"name":"DoesNotSupportAddLiquidityCustom","nameLocation":"7602:32:7","nodeType":"ErrorDefinition","parameters":{"id":1074,"nodeType":"ParameterList","parameters":[],"src":"7634:2:7"},"src":"7596:41:7"},{"documentation":{"id":1076,"nodeType":"StructuredDocumentation","src":"7643:68:7","text":"@notice Pool does not support adding liquidity through donation."},"errorSelector":"efe0265d","id":1078,"name":"DoesNotSupportDonation","nameLocation":"7722:22:7","nodeType":"ErrorDefinition","parameters":{"id":1077,"nodeType":"ParameterList","parameters":[],"src":"7744:2:7"},"src":"7716:31:7"},{"documentation":{"id":1079,"nodeType":"StructuredDocumentation","src":"7977:48:7","text":"@notice Remove liquidity kind not supported."},"errorSelector":"137a9a39","id":1081,"name":"InvalidRemoveLiquidityKind","nameLocation":"8036:26:7","nodeType":"ErrorDefinition","parameters":{"id":1080,"nodeType":"ParameterList","parameters":[],"src":"8062:2:7"},"src":"8030:35:7"},{"documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"8071:269:7","text":" @notice The actual amount out is below the minimum limit specified for the operation.\n @param tokenOut The outgoing token\n @param amountOut The total BPT amount out\n @param minAmountOut The amount of the limit that has been exceeded"},"errorSelector":"2f785e46","id":1091,"name":"AmountOutBelowMin","nameLocation":"8351:17:7","nodeType":"ErrorDefinition","parameters":{"id":1090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1085,"mutability":"mutable","name":"tokenOut","nameLocation":"8376:8:7","nodeType":"VariableDeclaration","scope":1091,"src":"8369:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":1084,"nodeType":"UserDefinedTypeName","pathNode":{"id":1083,"name":"IERC20","nameLocations":["8369:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"8369:6:7"},"referencedDeclaration":3102,"src":"8369:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1087,"mutability":"mutable","name":"amountOut","nameLocation":"8394:9:7","nodeType":"VariableDeclaration","scope":1091,"src":"8386:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1086,"name":"uint256","nodeType":"ElementaryTypeName","src":"8386:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1089,"mutability":"mutable","name":"minAmountOut","nameLocation":"8413:12:7","nodeType":"VariableDeclaration","scope":1091,"src":"8405:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1088,"name":"uint256","nodeType":"ElementaryTypeName","src":"8405:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8368:58:7"},"src":"8345:82:7"},{"documentation":{"id":1092,"nodeType":"StructuredDocumentation","src":"8433:276:7","text":" @notice The hook adjusted amount out is below the minimum limit specified for the operation.\n @param tokenOut The outgoing token\n @param amountOut The total BPT amount out\n @param minAmountOut The amount of the limit that has been exceeded"},"errorSelector":"fbd8a724","id":1101,"name":"HookAdjustedAmountOutBelowMin","nameLocation":"8720:29:7","nodeType":"ErrorDefinition","parameters":{"id":1100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1095,"mutability":"mutable","name":"tokenOut","nameLocation":"8757:8:7","nodeType":"VariableDeclaration","scope":1101,"src":"8750:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":1094,"nodeType":"UserDefinedTypeName","pathNode":{"id":1093,"name":"IERC20","nameLocations":["8750:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"8750:6:7"},"referencedDeclaration":3102,"src":"8750:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1097,"mutability":"mutable","name":"amountOut","nameLocation":"8775:9:7","nodeType":"VariableDeclaration","scope":1101,"src":"8767:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1096,"name":"uint256","nodeType":"ElementaryTypeName","src":"8767:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1099,"mutability":"mutable","name":"minAmountOut","nameLocation":"8794:12:7","nodeType":"VariableDeclaration","scope":1101,"src":"8786:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1098,"name":"uint256","nodeType":"ElementaryTypeName","src":"8786:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8749:58:7"},"src":"8714:94:7"},{"documentation":{"id":1102,"nodeType":"StructuredDocumentation","src":"8814:228:7","text":" @notice The required BPT amount in exceeds the maximum limit specified for the operation.\n @param amountIn The total BPT amount in\n @param maxAmountIn The amount of the limit that has been exceeded"},"errorSelector":"31d38e0b","id":1108,"name":"BptAmountInAboveMax","nameLocation":"9053:19:7","nodeType":"ErrorDefinition","parameters":{"id":1107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"amountIn","nameLocation":"9081:8:7","nodeType":"VariableDeclaration","scope":1108,"src":"9073:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1103,"name":"uint256","nodeType":"ElementaryTypeName","src":"9073:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1106,"mutability":"mutable","name":"maxAmountIn","nameLocation":"9099:11:7","nodeType":"VariableDeclaration","scope":1108,"src":"9091:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1105,"name":"uint256","nodeType":"ElementaryTypeName","src":"9091:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9072:39:7"},"src":"9047:65:7"},{"documentation":{"id":1109,"nodeType":"StructuredDocumentation","src":"9118:77:7","text":"@notice Pool does not support removing liquidity with a customized input."},"errorSelector":"cf0a95c0","id":1111,"name":"DoesNotSupportRemoveLiquidityCustom","nameLocation":"9206:35:7","nodeType":"ErrorDefinition","parameters":{"id":1110,"nodeType":"ParameterList","parameters":[],"src":"9241:2:7"},"src":"9200:44:7"},{"documentation":{"id":1112,"nodeType":"StructuredDocumentation","src":"9463:332:7","text":" @notice Error raised when there is an overflow in the fee calculation.\n @dev This occurs when the sum of the parts (aggregate swap or yield fee) is greater than the whole\n (total swap or yield fee). Also validated when the protocol fee controller updates aggregate fee\n percentages in the Vault."},"errorSelector":"4c69ac5d","id":1114,"name":"ProtocolFeesExceedTotalCollected","nameLocation":"9806:32:7","nodeType":"ErrorDefinition","parameters":{"id":1113,"nodeType":"ParameterList","parameters":[],"src":"9838:2:7"},"src":"9800:41:7"},{"documentation":{"id":1115,"nodeType":"StructuredDocumentation","src":"9847:430:7","text":" @notice Error raised when the swap fee percentage is less than the minimum allowed value.\n @dev The Vault itself does not impose a universal minimum. Rather, it validates against the\n range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error\n if it is below the minimum value returned by the pool.\n Pools with dynamic fees do not check these limits."},"errorSelector":"bfb20688","id":1117,"name":"SwapFeePercentageTooLow","nameLocation":"10288:23:7","nodeType":"ErrorDefinition","parameters":{"id":1116,"nodeType":"ParameterList","parameters":[],"src":"10311:2:7"},"src":"10282:32:7"},{"documentation":{"id":1118,"nodeType":"StructuredDocumentation","src":"10320:433:7","text":" @notice Error raised when the swap fee percentage is greater than the maximum allowed value.\n @dev The Vault itself does not impose a universal minimum. Rather, it validates against the\n range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error\n if it is above the maximum value returned by the pool.\n Pools with dynamic fees do not check these limits."},"errorSelector":"7f47834b","id":1120,"name":"SwapFeePercentageTooHigh","nameLocation":"10764:24:7","nodeType":"ErrorDefinition","parameters":{"id":1119,"nodeType":"ParameterList","parameters":[],"src":"10788:2:7"},"src":"10758:33:7"},{"documentation":{"id":1121,"nodeType":"StructuredDocumentation","src":"10797:646:7","text":" @notice Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\n @dev Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit\n precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which\n corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%).\n Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between\n the aggregate fee calculated here and that stored in the Vault."},"errorSelector":"833fb3ce","id":1123,"name":"FeePrecisionTooHigh","nameLocation":"11454:19:7","nodeType":"ErrorDefinition","parameters":{"id":1122,"nodeType":"ParameterList","parameters":[],"src":"11473:2:7"},"src":"11448:28:7"},{"documentation":{"id":1124,"nodeType":"StructuredDocumentation","src":"11482:107:7","text":"@notice A given percentage is above the maximum (usually a value close to FixedPoint.ONE, or 1e18 wei)."},"errorSelector":"746e5940","id":1126,"name":"PercentageAboveMax","nameLocation":"11600:18:7","nodeType":"ErrorDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[],"src":"11618:2:7"},"src":"11594:27:7"},{"documentation":{"id":1127,"nodeType":"StructuredDocumentation","src":"11842:78:7","text":"@notice A user tried to execute a query operation when they were disabled."},"errorSelector":"7a198886","id":1129,"name":"QueriesDisabled","nameLocation":"11931:15:7","nodeType":"ErrorDefinition","parameters":{"id":1128,"nodeType":"ParameterList","parameters":[],"src":"11946:2:7"},"src":"11925:24:7"},{"documentation":{"id":1130,"nodeType":"StructuredDocumentation","src":"11955:84:7","text":"@notice An admin tried to re-enable queries, but they were disabled permanently."},"errorSelector":"069f8cbc","id":1132,"name":"QueriesDisabledPermanently","nameLocation":"12050:26:7","nodeType":"ErrorDefinition","parameters":{"id":1131,"nodeType":"ParameterList","parameters":[],"src":"12076:2:7"},"src":"12044:35:7"},{"documentation":{"id":1133,"nodeType":"StructuredDocumentation","src":"12302:104:7","text":" @notice Cannot enable recovery mode when already enabled.\n @param pool The pool"},"errorSelector":"346d7607","id":1137,"name":"PoolInRecoveryMode","nameLocation":"12417:18:7","nodeType":"ErrorDefinition","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1135,"mutability":"mutable","name":"pool","nameLocation":"12444:4:7","nodeType":"VariableDeclaration","scope":1137,"src":"12436:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1134,"name":"address","nodeType":"ElementaryTypeName","src":"12436:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12435:14:7"},"src":"12411:39:7"},{"documentation":{"id":1138,"nodeType":"StructuredDocumentation","src":"12456:101:7","text":" @notice Cannot disable recovery mode when not enabled.\n @param pool The pool"},"errorSelector":"ef029adf","id":1142,"name":"PoolNotInRecoveryMode","nameLocation":"12568:21:7","nodeType":"ErrorDefinition","parameters":{"id":1141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1140,"mutability":"mutable","name":"pool","nameLocation":"12598:4:7","nodeType":"VariableDeclaration","scope":1142,"src":"12590:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1139,"name":"address","nodeType":"ElementaryTypeName","src":"12590:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12589:14:7"},"src":"12562:42:7"},{"documentation":{"id":1143,"nodeType":"StructuredDocumentation","src":"12828:206:7","text":" @notice Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\n @param sender The account attempting to call a permissioned function"},"errorSelector":"089676d5","id":1147,"name":"SenderIsNotVault","nameLocation":"13045:16:7","nodeType":"ErrorDefinition","parameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1145,"mutability":"mutable","name":"sender","nameLocation":"13070:6:7","nodeType":"VariableDeclaration","scope":1147,"src":"13062:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1144,"name":"address","nodeType":"ElementaryTypeName","src":"13062:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13061:16:7"},"src":"13039:39:7"},{"documentation":{"id":1148,"nodeType":"StructuredDocumentation","src":"13303:79:7","text":"@notice The caller specified a pause window period longer than the maximum."},"errorSelector":"cc0e8fe5","id":1150,"name":"VaultPauseWindowDurationTooLarge","nameLocation":"13393:32:7","nodeType":"ErrorDefinition","parameters":{"id":1149,"nodeType":"ParameterList","parameters":[],"src":"13425:2:7"},"src":"13387:41:7"},{"documentation":{"id":1151,"nodeType":"StructuredDocumentation","src":"13434:73:7","text":"@notice The caller specified a buffer period longer than the maximum."},"errorSelector":"9ea4efee","id":1153,"name":"PauseBufferPeriodDurationTooLarge","nameLocation":"13518:33:7","nodeType":"ErrorDefinition","parameters":{"id":1152,"nodeType":"ParameterList","parameters":[],"src":"13551:2:7"},"src":"13512:42:7"},{"documentation":{"id":1154,"nodeType":"StructuredDocumentation","src":"13560:76:7","text":"@notice A user tried to perform an operation while the Vault was paused."},"errorSelector":"da9f8b34","id":1156,"name":"VaultPaused","nameLocation":"13647:11:7","nodeType":"ErrorDefinition","parameters":{"id":1155,"nodeType":"ParameterList","parameters":[],"src":"13658:2:7"},"src":"13641:20:7"},{"documentation":{"id":1157,"nodeType":"StructuredDocumentation","src":"13667:73:7","text":"@notice Governance tried to unpause the Vault when it was not paused."},"errorSelector":"f7ff4dca","id":1159,"name":"VaultNotPaused","nameLocation":"13751:14:7","nodeType":"ErrorDefinition","parameters":{"id":1158,"nodeType":"ParameterList","parameters":[],"src":"13765:2:7"},"src":"13745:23:7"},{"documentation":{"id":1160,"nodeType":"StructuredDocumentation","src":"13774:79:7","text":"@notice Governance tried to pause the Vault after the pause period expired."},"errorSelector":"0e4460b7","id":1162,"name":"VaultPauseWindowExpired","nameLocation":"13864:23:7","nodeType":"ErrorDefinition","parameters":{"id":1161,"nodeType":"ParameterList","parameters":[],"src":"13887:2:7"},"src":"13858:32:7"},{"documentation":{"id":1163,"nodeType":"StructuredDocumentation","src":"13896:123:7","text":" @notice A user tried to perform an operation involving a paused Pool.\n @param pool The paused pool"},"errorSelector":"d971f597","id":1167,"name":"PoolPaused","nameLocation":"14030:10:7","nodeType":"ErrorDefinition","parameters":{"id":1166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"pool","nameLocation":"14049:4:7","nodeType":"VariableDeclaration","scope":1167,"src":"14041:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1164,"name":"address","nodeType":"ElementaryTypeName","src":"14041:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14040:14:7"},"src":"14024:31:7"},{"documentation":{"id":1168,"nodeType":"StructuredDocumentation","src":"14061:124:7","text":" @notice Governance tried to unpause the Pool when it was not paused.\n @param pool The unpaused pool"},"errorSelector":"fdcd6894","id":1172,"name":"PoolNotPaused","nameLocation":"14196:13:7","nodeType":"ErrorDefinition","parameters":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1170,"mutability":"mutable","name":"pool","nameLocation":"14218:4:7","nodeType":"VariableDeclaration","scope":1172,"src":"14210:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1169,"name":"address","nodeType":"ElementaryTypeName","src":"14210:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14209:14:7"},"src":"14190:34:7"},{"documentation":{"id":1173,"nodeType":"StructuredDocumentation","src":"14230:119:7","text":" @notice Governance tried to pause a Pool after the pause period expired.\n @param pool The pool"},"errorSelector":"eb5a1217","id":1177,"name":"PoolPauseWindowExpired","nameLocation":"14360:22:7","nodeType":"ErrorDefinition","parameters":{"id":1176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1175,"mutability":"mutable","name":"pool","nameLocation":"14391:4:7","nodeType":"VariableDeclaration","scope":1177,"src":"14383:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1174,"name":"address","nodeType":"ElementaryTypeName","src":"14383:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14382:14:7"},"src":"14354:43:7"},{"documentation":{"id":1178,"nodeType":"StructuredDocumentation","src":"14628:163:7","text":" @notice The buffer for the given wrapped token was already initialized.\n @param wrappedToken The wrapped token corresponding to the buffer"},"errorSelector":"1690fa40","id":1183,"name":"BufferAlreadyInitialized","nameLocation":"14802:24:7","nodeType":"ErrorDefinition","parameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1181,"mutability":"mutable","name":"wrappedToken","nameLocation":"14836:12:7","nodeType":"VariableDeclaration","scope":1183,"src":"14827:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1180,"nodeType":"UserDefinedTypeName","pathNode":{"id":1179,"name":"IERC4626","nameLocations":["14827:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"14827:8:7"},"referencedDeclaration":3024,"src":"14827:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"14826:23:7"},"src":"14796:54:7"},{"documentation":{"id":1184,"nodeType":"StructuredDocumentation","src":"14856:159:7","text":" @notice The buffer for the given wrapped token was not initialized.\n @param wrappedToken The wrapped token corresponding to the buffer"},"errorSelector":"85f41299","id":1189,"name":"BufferNotInitialized","nameLocation":"15026:20:7","nodeType":"ErrorDefinition","parameters":{"id":1188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1187,"mutability":"mutable","name":"wrappedToken","nameLocation":"15056:12:7","nodeType":"VariableDeclaration","scope":1189,"src":"15047:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1186,"nodeType":"UserDefinedTypeName","pathNode":{"id":1185,"name":"IERC4626","nameLocations":["15047:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"15047:8:7"},"referencedDeclaration":3024,"src":"15047:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"15046:23:7"},"src":"15020:50:7"},{"documentation":{"id":1190,"nodeType":"StructuredDocumentation","src":"15076:90:7","text":"@notice The user is trying to remove more than their allocated shares from the buffer."},"errorSelector":"98c5dbd6","id":1192,"name":"NotEnoughBufferShares","nameLocation":"15177:21:7","nodeType":"ErrorDefinition","parameters":{"id":1191,"nodeType":"ParameterList","parameters":[],"src":"15198:2:7"},"src":"15171:30:7"},{"documentation":{"id":1193,"nodeType":"StructuredDocumentation","src":"15207:436:7","text":" @notice The wrapped token asset does not match the underlying token.\n @dev This should never happen, but a malicious wrapper contract might not return the correct address.\n Legitimate wrapper contracts should make the asset a constant or immutable value.\n @param wrappedToken The wrapped token corresponding to the buffer\n @param underlyingToken The underlying token returned by `asset`"},"errorSelector":"36b18d09","id":1200,"name":"WrongUnderlyingToken","nameLocation":"15654:20:7","nodeType":"ErrorDefinition","parameters":{"id":1199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1196,"mutability":"mutable","name":"wrappedToken","nameLocation":"15684:12:7","nodeType":"VariableDeclaration","scope":1200,"src":"15675:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1195,"nodeType":"UserDefinedTypeName","pathNode":{"id":1194,"name":"IERC4626","nameLocations":["15675:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"15675:8:7"},"referencedDeclaration":3024,"src":"15675:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1198,"mutability":"mutable","name":"underlyingToken","nameLocation":"15706:15:7","nodeType":"VariableDeclaration","scope":1200,"src":"15698:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1197,"name":"address","nodeType":"ElementaryTypeName","src":"15698:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15674:48:7"},"src":"15648:75:7"},{"documentation":{"id":1201,"nodeType":"StructuredDocumentation","src":"15729:322:7","text":" @notice A wrapped token reported the zero address as its underlying token asset.\n @dev This should never happen, but a malicious wrapper contract might do this (e.g., in an attempt to\n re-initialize the buffer).\n @param wrappedToken The wrapped token corresponding to the buffer"},"errorSelector":"d407f9c5","id":1206,"name":"InvalidUnderlyingToken","nameLocation":"16062:22:7","nodeType":"ErrorDefinition","parameters":{"id":1205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1204,"mutability":"mutable","name":"wrappedToken","nameLocation":"16094:12:7","nodeType":"VariableDeclaration","scope":1206,"src":"16085:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1203,"nodeType":"UserDefinedTypeName","pathNode":{"id":1202,"name":"IERC4626","nameLocations":["16085:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"16085:8:7"},"referencedDeclaration":3024,"src":"16085:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"16084:23:7"},"src":"16056:52:7"},{"documentation":{"id":1207,"nodeType":"StructuredDocumentation","src":"16114:183:7","text":" @notice The amount given to wrap/unwrap was too small, which can introduce rounding issues.\n @param wrappedToken The wrapped token corresponding to the buffer"},"errorSelector":"18fe7385","id":1212,"name":"WrapAmountTooSmall","nameLocation":"16308:18:7","nodeType":"ErrorDefinition","parameters":{"id":1211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1210,"mutability":"mutable","name":"wrappedToken","nameLocation":"16336:12:7","nodeType":"VariableDeclaration","scope":1212,"src":"16327:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1209,"nodeType":"UserDefinedTypeName","pathNode":{"id":1208,"name":"IERC4626","nameLocations":["16327:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"16327:8:7"},"referencedDeclaration":3024,"src":"16327:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"16326:23:7"},"src":"16302:48:7"},{"documentation":{"id":1213,"nodeType":"StructuredDocumentation","src":"16356:70:7","text":"@notice Buffer operation attempted while vault buffers are paused."},"errorSelector":"0f27df09","id":1215,"name":"VaultBuffersArePaused","nameLocation":"16437:21:7","nodeType":"ErrorDefinition","parameters":{"id":1214,"nodeType":"ParameterList","parameters":[],"src":"16458:2:7"},"src":"16431:30:7"},{"documentation":{"id":1216,"nodeType":"StructuredDocumentation","src":"16467:58:7","text":"@notice Buffer shares were minted to the zero address."},"errorSelector":"dbe6b10e","id":1218,"name":"BufferSharesInvalidReceiver","nameLocation":"16536:27:7","nodeType":"ErrorDefinition","parameters":{"id":1217,"nodeType":"ParameterList","parameters":[],"src":"16563:2:7"},"src":"16530:36:7"},{"documentation":{"id":1219,"nodeType":"StructuredDocumentation","src":"16572:60:7","text":"@notice Buffer shares were burned from the zero address."},"errorSelector":"586d06df","id":1221,"name":"BufferSharesInvalidOwner","nameLocation":"16643:24:7","nodeType":"ErrorDefinition","parameters":{"id":1220,"nodeType":"ParameterList","parameters":[],"src":"16667:2:7"},"src":"16637:33:7"},{"documentation":{"id":1222,"nodeType":"StructuredDocumentation","src":"16676:173:7","text":" @notice The total supply of a buffer can't be lower than the absolute minimum.\n @param totalSupply The total supply value that was below the minimum"},"errorSelector":"34bdbfaa","id":1226,"name":"BufferTotalSupplyTooLow","nameLocation":"16860:23:7","nodeType":"ErrorDefinition","parameters":{"id":1225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1224,"mutability":"mutable","name":"totalSupply","nameLocation":"16892:11:7","nodeType":"VariableDeclaration","scope":1226,"src":"16884:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1223,"name":"uint256","nodeType":"ElementaryTypeName","src":"16884:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16883:21:7"},"src":"16854:51:7"},{"documentation":{"id":1227,"nodeType":"StructuredDocumentation","src":"16911:97:7","text":"@dev A wrap/unwrap operation consumed more or returned less underlying tokens than it should."},"errorSelector":"1c6a5375","id":1236,"name":"NotEnoughUnderlying","nameLocation":"17019:19:7","nodeType":"ErrorDefinition","parameters":{"id":1235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1230,"mutability":"mutable","name":"wrappedToken","nameLocation":"17048:12:7","nodeType":"VariableDeclaration","scope":1236,"src":"17039:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1229,"nodeType":"UserDefinedTypeName","pathNode":{"id":1228,"name":"IERC4626","nameLocations":["17039:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"17039:8:7"},"referencedDeclaration":3024,"src":"17039:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1232,"mutability":"mutable","name":"expectedUnderlyingAmount","nameLocation":"17070:24:7","nodeType":"VariableDeclaration","scope":1236,"src":"17062:32:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1231,"name":"uint256","nodeType":"ElementaryTypeName","src":"17062:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1234,"mutability":"mutable","name":"actualUnderlyingAmount","nameLocation":"17104:22:7","nodeType":"VariableDeclaration","scope":1236,"src":"17096:30:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1233,"name":"uint256","nodeType":"ElementaryTypeName","src":"17096:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17038:89:7"},"src":"17013:115:7"},{"documentation":{"id":1237,"nodeType":"StructuredDocumentation","src":"17134:94:7","text":"@dev A wrap/unwrap operation consumed more or returned less wrapped tokens than it should."},"errorSelector":"1149424d","id":1246,"name":"NotEnoughWrapped","nameLocation":"17239:16:7","nodeType":"ErrorDefinition","parameters":{"id":1245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1240,"mutability":"mutable","name":"wrappedToken","nameLocation":"17265:12:7","nodeType":"VariableDeclaration","scope":1246,"src":"17256:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1239,"nodeType":"UserDefinedTypeName","pathNode":{"id":1238,"name":"IERC4626","nameLocations":["17256:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"17256:8:7"},"referencedDeclaration":3024,"src":"17256:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1242,"mutability":"mutable","name":"expectedWrappedAmount","nameLocation":"17287:21:7","nodeType":"VariableDeclaration","scope":1246,"src":"17279:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1241,"name":"uint256","nodeType":"ElementaryTypeName","src":"17279:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1244,"mutability":"mutable","name":"actualWrappedAmount","nameLocation":"17318:19:7","nodeType":"VariableDeclaration","scope":1246,"src":"17310:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1243,"name":"uint256","nodeType":"ElementaryTypeName","src":"17310:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17255:83:7"},"src":"17233:106:7"},{"documentation":{"id":1247,"nodeType":"StructuredDocumentation","src":"17345:76:7","text":"@dev Shares issued during initialization are below the requested amount."},"errorSelector":"da0cb07e","id":1253,"name":"IssuedSharesBelowMin","nameLocation":"17432:20:7","nodeType":"ErrorDefinition","parameters":{"id":1252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1249,"mutability":"mutable","name":"issuedShares","nameLocation":"17461:12:7","nodeType":"VariableDeclaration","scope":1253,"src":"17453:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1248,"name":"uint256","nodeType":"ElementaryTypeName","src":"17453:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1251,"mutability":"mutable","name":"minIssuedShares","nameLocation":"17483:15:7","nodeType":"VariableDeclaration","scope":1253,"src":"17475:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1250,"name":"uint256","nodeType":"ElementaryTypeName","src":"17475:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17452:47:7"},"src":"17426:74:7"},{"documentation":{"id":1254,"nodeType":"StructuredDocumentation","src":"17727:87:7","text":"@notice Pool does not support adding / removing liquidity with an unbalanced input."},"errorSelector":"d4f5779c","id":1256,"name":"DoesNotSupportUnbalancedLiquidity","nameLocation":"17825:33:7","nodeType":"ErrorDefinition","parameters":{"id":1255,"nodeType":"ParameterList","parameters":[],"src":"17858:2:7"},"src":"17819:42:7"},{"documentation":{"id":1257,"nodeType":"StructuredDocumentation","src":"17867:48:7","text":"@notice The contract should not receive ETH."},"errorSelector":"f2238896","id":1259,"name":"CannotReceiveEth","nameLocation":"17926:16:7","nodeType":"ErrorDefinition","parameters":{"id":1258,"nodeType":"ParameterList","parameters":[],"src":"17942:2:7"},"src":"17920:25:7"},{"documentation":{"id":1260,"nodeType":"StructuredDocumentation","src":"17951:156:7","text":" @notice The `VaultExtension` contract was called by an account directly.\n @dev It can only be called by the Vault via delegatecall."},"errorSelector":"9fd25b36","id":1262,"name":"NotVaultDelegateCall","nameLocation":"18118:20:7","nodeType":"ErrorDefinition","parameters":{"id":1261,"nodeType":"ParameterList","parameters":[],"src":"18138:2:7"},"src":"18112:29:7"},{"documentation":{"id":1263,"nodeType":"StructuredDocumentation","src":"18147:89:7","text":"@notice The `VaultExtension` contract was configured with an incorrect Vault address."},"errorSelector":"1ab9d9d0","id":1265,"name":"WrongVaultExtensionDeployment","nameLocation":"18247:29:7","nodeType":"ErrorDefinition","parameters":{"id":1264,"nodeType":"ParameterList","parameters":[],"src":"18276:2:7"},"src":"18241:38:7"},{"documentation":{"id":1266,"nodeType":"StructuredDocumentation","src":"18285:96:7","text":"@notice The `ProtocolFeeController` contract was configured with an incorrect Vault address."},"errorSelector":"1bbe95c7","id":1268,"name":"WrongProtocolFeeControllerDeployment","nameLocation":"18392:36:7","nodeType":"ErrorDefinition","parameters":{"id":1267,"nodeType":"ParameterList","parameters":[],"src":"18428:2:7"},"src":"18386:45:7"},{"documentation":{"id":1269,"nodeType":"StructuredDocumentation","src":"18437:85:7","text":"@notice The `VaultAdmin` contract was configured with an incorrect Vault address."},"errorSelector":"82cc28b6","id":1271,"name":"WrongVaultAdminDeployment","nameLocation":"18533:25:7","nodeType":"ErrorDefinition","parameters":{"id":1270,"nodeType":"ParameterList","parameters":[],"src":"18558:2:7"},"src":"18527:34:7"},{"documentation":{"id":1272,"nodeType":"StructuredDocumentation","src":"18567:54:7","text":"@notice Quote reverted with a reserved error code."},"errorSelector":"28f95541","id":1274,"name":"QuoteResultSpoofed","nameLocation":"18632:18:7","nodeType":"ErrorDefinition","parameters":{"id":1273,"nodeType":"ParameterList","parameters":[],"src":"18650:2:7"},"src":"18626:27:7"}],"scope":1276,"src":"316:18339:7","usedErrors":[920,925,930,935,944,950,953,956,959,962,965,968,977,980,983,986,989,992,995,998,1001,1004,1007,1010,1013,1016,1019,1025,1032,1039,1042,1045,1055,1065,1072,1075,1078,1081,1091,1101,1108,1111,1114,1117,1120,1123,1126,1129,1132,1137,1142,1147,1150,1153,1156,1159,1162,1167,1172,1177,1183,1189,1192,1200,1206,1212,1215,1218,1221,1226,1236,1246,1253,1256,1259,1262,1265,1268,1271,1274],"usedEvents":[]}],"src":"46:18610:7"},"id":7},"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol","exportedSymbols":{"AddLiquidityKind":[2790],"AddLiquidityParams":[2806],"AfterSwapParams":[2784],"BufferWrapOrUnwrapParams":[2845],"FEE_BITLENGTH":[2848],"FEE_SCALING_FACTOR":[2851],"HookFlags":[2610],"HooksConfig":[2634],"IAuthorizer":[40],"IERC20":[3102],"IERC4626":[3024],"IHooks":[242],"IProtocolFeeController":[580],"IRateProvider":[24],"IVaultEvents":[1514],"LiquidityManagement":[2563],"MAX_FEE_PERCENTAGE":[2854],"PoolConfig":[2588],"PoolConfigBits":[2565],"PoolData":[2712],"PoolRoleAccounts":[2660],"PoolSwapParams":[2755],"RemoveLiquidityKind":[2811],"RemoveLiquidityParams":[2827],"Rounding":[2715],"SwapKind":[2718],"SwapState":[2644],"TokenConfig":[2677],"TokenInfo":[2687],"TokenType":[2664],"VaultState":[2652],"VaultSwapParams":[2737],"WrappingDirection":[2830]},"id":1515,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1277,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:8"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":1279,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1515,"sourceUnit":3025,"src":"72:75:8","symbolAliases":[{"foreign":{"id":1278,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"81:8:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":1281,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1515,"sourceUnit":3103,"src":"148:72:8","symbolAliases":[{"foreign":{"id":1280,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"157:6:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"./IProtocolFeeController.sol","id":1283,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1515,"sourceUnit":581,"src":"222:70:8","symbolAliases":[{"foreign":{"id":1282,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"231:22:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","file":"./IAuthorizer.sol","id":1285,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1515,"sourceUnit":41,"src":"293:48:8","symbolAliases":[{"foreign":{"id":1284,"name":"IAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"302:11:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol","file":"./IHooks.sol","id":1287,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1515,"sourceUnit":243,"src":"342:38:8","symbolAliases":[{"foreign":{"id":1286,"name":"IHooks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"351:6:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":1288,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1515,"sourceUnit":2855,"src":"381:26:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultEvents","contractDependencies":[],"contractKind":"interface","documentation":{"id":1289,"nodeType":"StructuredDocumentation","src":"409:91:8","text":"@dev Events are declared inside an interface (namespace) to improve DX with Typechain."},"fullyImplemented":true,"id":1514,"linearizedBaseContracts":[1514],"name":"IVaultEvents","nameLocation":"510:12:8","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1290,"nodeType":"StructuredDocumentation","src":"529:657:8","text":" @notice A Pool was registered by calling `registerPool`.\n @param pool The pool being registered\n @param factory The factory creating the pool\n @param tokenConfig An array of descriptors for the tokens the pool will manage\n @param swapFeePercentage The static swap fee of the pool\n @param pauseWindowEndTime The pool's pause window end time\n @param roleAccounts Addresses the Vault will allow to change certain pool settings\n @param hooksConfig Flags indicating which hooks the pool supports and address of hooks contract\n @param liquidityManagement Supported liquidity management hook flags"},"eventSelector":"bc1561eeab9f40962e2fb827a7ff9c7cdb47a9d7c84caeefa4ed90e043842dad","id":1313,"name":"PoolRegistered","nameLocation":"1197:14:8","nodeType":"EventDefinition","parameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1292,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1237:4:8","nodeType":"VariableDeclaration","scope":1313,"src":"1221:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1291,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1294,"indexed":true,"mutability":"mutable","name":"factory","nameLocation":"1267:7:8","nodeType":"VariableDeclaration","scope":1313,"src":"1251:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1293,"name":"address","nodeType":"ElementaryTypeName","src":"1251:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1298,"indexed":false,"mutability":"mutable","name":"tokenConfig","nameLocation":"1298:11:8","nodeType":"VariableDeclaration","scope":1313,"src":"1284:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2677_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenConfig[]"},"typeName":{"baseType":{"id":1296,"nodeType":"UserDefinedTypeName","pathNode":{"id":1295,"name":"TokenConfig","nameLocations":["1284:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":2677,"src":"1284:11:8"},"referencedDeclaration":2677,"src":"1284:11:8","typeDescriptions":{"typeIdentifier":"t_struct$_TokenConfig_$2677_storage_ptr","typeString":"struct TokenConfig"}},"id":1297,"nodeType":"ArrayTypeName","src":"1284:13:8","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2677_storage_$dyn_storage_ptr","typeString":"struct TokenConfig[]"}},"visibility":"internal"},{"constant":false,"id":1300,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"1327:17:8","nodeType":"VariableDeclaration","scope":1313,"src":"1319:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1299,"name":"uint256","nodeType":"ElementaryTypeName","src":"1319:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1302,"indexed":false,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"1361:18:8","nodeType":"VariableDeclaration","scope":1313,"src":"1354:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1301,"name":"uint32","nodeType":"ElementaryTypeName","src":"1354:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1305,"indexed":false,"mutability":"mutable","name":"roleAccounts","nameLocation":"1406:12:8","nodeType":"VariableDeclaration","scope":1313,"src":"1389:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2660_memory_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":1304,"nodeType":"UserDefinedTypeName","pathNode":{"id":1303,"name":"PoolRoleAccounts","nameLocations":["1389:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":2660,"src":"1389:16:8"},"referencedDeclaration":2660,"src":"1389:16:8","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2660_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"},{"constant":false,"id":1308,"indexed":false,"mutability":"mutable","name":"hooksConfig","nameLocation":"1440:11:8","nodeType":"VariableDeclaration","scope":1313,"src":"1428:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2634_memory_ptr","typeString":"struct HooksConfig"},"typeName":{"id":1307,"nodeType":"UserDefinedTypeName","pathNode":{"id":1306,"name":"HooksConfig","nameLocations":["1428:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":2634,"src":"1428:11:8"},"referencedDeclaration":2634,"src":"1428:11:8","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2634_storage_ptr","typeString":"struct HooksConfig"}},"visibility":"internal"},{"constant":false,"id":1311,"indexed":false,"mutability":"mutable","name":"liquidityManagement","nameLocation":"1481:19:8","nodeType":"VariableDeclaration","scope":1313,"src":"1461:39:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2563_memory_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":1310,"nodeType":"UserDefinedTypeName","pathNode":{"id":1309,"name":"LiquidityManagement","nameLocations":["1461:19:8"],"nodeType":"IdentifierPath","referencedDeclaration":2563,"src":"1461:19:8"},"referencedDeclaration":2563,"src":"1461:19:8","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2563_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"}],"src":"1211:295:8"},"src":"1191:316:8"},{"anonymous":false,"documentation":{"id":1314,"nodeType":"StructuredDocumentation","src":"1513:120:8","text":" @notice A Pool was initialized by calling `initialize`.\n @param pool The pool being initialized"},"eventSelector":"cad8c9d32507393b6508ca4a888b81979919b477510585bde8488f153072d6f3","id":1318,"name":"PoolInitialized","nameLocation":"1644:15:8","nodeType":"EventDefinition","parameters":{"id":1317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1316,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1676:4:8","nodeType":"VariableDeclaration","scope":1318,"src":"1660:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1315,"name":"address","nodeType":"ElementaryTypeName","src":"1660:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1659:22:8"},"src":"1638:44:8"},{"anonymous":false,"documentation":{"id":1319,"nodeType":"StructuredDocumentation","src":"1688:478:8","text":" @notice A swap has occurred.\n @param pool The pool with the tokens being swapped\n @param tokenIn The token entering the Vault (balance increases)\n @param tokenOut The token leaving the Vault (balance decreases)\n @param amountIn Number of tokenIn tokens\n @param amountOut Number of tokenOut tokens\n @param swapFeePercentage Swap fee percentage applied (can differ if dynamic)\n @param swapFeeAmount Swap fee amount paid"},"eventSelector":"0874b2d545cb271cdbda4e093020c452328b24af12382ed62c4d00f5c26709db","id":1337,"name":"Swap","nameLocation":"2177:4:8","nodeType":"EventDefinition","parameters":{"id":1336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1321,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"2207:4:8","nodeType":"VariableDeclaration","scope":1337,"src":"2191:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1320,"name":"address","nodeType":"ElementaryTypeName","src":"2191:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1324,"indexed":true,"mutability":"mutable","name":"tokenIn","nameLocation":"2236:7:8","nodeType":"VariableDeclaration","scope":1337,"src":"2221:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":1323,"nodeType":"UserDefinedTypeName","pathNode":{"id":1322,"name":"IERC20","nameLocations":["2221:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"2221:6:8"},"referencedDeclaration":3102,"src":"2221:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1327,"indexed":true,"mutability":"mutable","name":"tokenOut","nameLocation":"2268:8:8","nodeType":"VariableDeclaration","scope":1337,"src":"2253:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":1326,"nodeType":"UserDefinedTypeName","pathNode":{"id":1325,"name":"IERC20","nameLocations":["2253:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"2253:6:8"},"referencedDeclaration":3102,"src":"2253:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1329,"indexed":false,"mutability":"mutable","name":"amountIn","nameLocation":"2294:8:8","nodeType":"VariableDeclaration","scope":1337,"src":"2286:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1328,"name":"uint256","nodeType":"ElementaryTypeName","src":"2286:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1331,"indexed":false,"mutability":"mutable","name":"amountOut","nameLocation":"2320:9:8","nodeType":"VariableDeclaration","scope":1337,"src":"2312:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1330,"name":"uint256","nodeType":"ElementaryTypeName","src":"2312:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1333,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"2347:17:8","nodeType":"VariableDeclaration","scope":1337,"src":"2339:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1332,"name":"uint256","nodeType":"ElementaryTypeName","src":"2339:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1335,"indexed":false,"mutability":"mutable","name":"swapFeeAmount","nameLocation":"2382:13:8","nodeType":"VariableDeclaration","scope":1337,"src":"2374:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1334,"name":"uint256","nodeType":"ElementaryTypeName","src":"2374:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2181:220:8"},"src":"2171:231:8"},{"anonymous":false,"documentation":{"id":1338,"nodeType":"StructuredDocumentation","src":"2408:352:8","text":" @notice A wrap operation has occurred.\n @param wrappedToken The wrapped token address\n @param depositedUnderlying Number of underlying tokens deposited\n @param mintedShares Number of shares (wrapped tokens) minted\n @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)"},"eventSelector":"3771d13c67011e31e12031c54bb59b0bf544a80b81d280a3711e172aa8b7f47b","id":1349,"name":"Wrap","nameLocation":"2771:4:8","nodeType":"EventDefinition","parameters":{"id":1348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"2802:12:8","nodeType":"VariableDeclaration","scope":1349,"src":"2785:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1340,"nodeType":"UserDefinedTypeName","pathNode":{"id":1339,"name":"IERC4626","nameLocations":["2785:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"2785:8:8"},"referencedDeclaration":3024,"src":"2785:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1343,"indexed":false,"mutability":"mutable","name":"depositedUnderlying","nameLocation":"2832:19:8","nodeType":"VariableDeclaration","scope":1349,"src":"2824:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1342,"name":"uint256","nodeType":"ElementaryTypeName","src":"2824:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1345,"indexed":false,"mutability":"mutable","name":"mintedShares","nameLocation":"2869:12:8","nodeType":"VariableDeclaration","scope":1349,"src":"2861:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1344,"name":"uint256","nodeType":"ElementaryTypeName","src":"2861:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1347,"indexed":false,"mutability":"mutable","name":"bufferBalances","nameLocation":"2899:14:8","nodeType":"VariableDeclaration","scope":1349,"src":"2891:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1346,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2891:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2775:144:8"},"src":"2765:155:8"},{"anonymous":false,"documentation":{"id":1350,"nodeType":"StructuredDocumentation","src":"2926:355:8","text":" @notice An unwrap operation has occurred.\n @param wrappedToken The wrapped token address\n @param burnedShares Number of shares (wrapped tokens) burned\n @param withdrawnUnderlying Number of underlying tokens withdrawn\n @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)"},"eventSelector":"eeb740c90bf2b18c9532eb7d473137767036d893dff3e009f32718f821b2a4c0","id":1361,"name":"Unwrap","nameLocation":"3292:6:8","nodeType":"EventDefinition","parameters":{"id":1360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1353,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"3325:12:8","nodeType":"VariableDeclaration","scope":1361,"src":"3308:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1352,"nodeType":"UserDefinedTypeName","pathNode":{"id":1351,"name":"IERC4626","nameLocations":["3308:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"3308:8:8"},"referencedDeclaration":3024,"src":"3308:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1355,"indexed":false,"mutability":"mutable","name":"burnedShares","nameLocation":"3355:12:8","nodeType":"VariableDeclaration","scope":1361,"src":"3347:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1354,"name":"uint256","nodeType":"ElementaryTypeName","src":"3347:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1357,"indexed":false,"mutability":"mutable","name":"withdrawnUnderlying","nameLocation":"3385:19:8","nodeType":"VariableDeclaration","scope":1361,"src":"3377:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1356,"name":"uint256","nodeType":"ElementaryTypeName","src":"3377:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1359,"indexed":false,"mutability":"mutable","name":"bufferBalances","nameLocation":"3422:14:8","nodeType":"VariableDeclaration","scope":1361,"src":"3414:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3414:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3298:144:8"},"src":"3286:157:8"},{"anonymous":false,"documentation":{"id":1362,"nodeType":"StructuredDocumentation","src":"3449:562:8","text":" @notice Liquidity has been added to a pool (including initialization).\n @param pool The pool with liquidity added\n @param liquidityProvider The user performing the operation\n @param kind The add liquidity operation type (e.g., proportional, custom)\n @param totalSupply The total supply of the pool after the operation\n @param amountsAddedRaw The amount of each token that was added, sorted in token registration order\n @param swapFeeAmountsRaw The total swap fees charged, sorted in token registration order"},"eventSelector":"a26a52d8d53702bba7f137907b8e1f99ff87f6d450144270ca25e72481cca871","id":1379,"name":"LiquidityAdded","nameLocation":"4022:14:8","nodeType":"EventDefinition","parameters":{"id":1378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1364,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"4062:4:8","nodeType":"VariableDeclaration","scope":1379,"src":"4046:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1363,"name":"address","nodeType":"ElementaryTypeName","src":"4046:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1366,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"4092:17:8","nodeType":"VariableDeclaration","scope":1379,"src":"4076:33:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1365,"name":"address","nodeType":"ElementaryTypeName","src":"4076:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1369,"indexed":true,"mutability":"mutable","name":"kind","nameLocation":"4144:4:8","nodeType":"VariableDeclaration","scope":1379,"src":"4119:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2790","typeString":"enum AddLiquidityKind"},"typeName":{"id":1368,"nodeType":"UserDefinedTypeName","pathNode":{"id":1367,"name":"AddLiquidityKind","nameLocations":["4119:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":2790,"src":"4119:16:8"},"referencedDeclaration":2790,"src":"4119:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2790","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":1371,"indexed":false,"mutability":"mutable","name":"totalSupply","nameLocation":"4166:11:8","nodeType":"VariableDeclaration","scope":1379,"src":"4158:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1370,"name":"uint256","nodeType":"ElementaryTypeName","src":"4158:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1374,"indexed":false,"mutability":"mutable","name":"amountsAddedRaw","nameLocation":"4197:15:8","nodeType":"VariableDeclaration","scope":1379,"src":"4187:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1372,"name":"uint256","nodeType":"ElementaryTypeName","src":"4187:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1373,"nodeType":"ArrayTypeName","src":"4187:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1377,"indexed":false,"mutability":"mutable","name":"swapFeeAmountsRaw","nameLocation":"4232:17:8","nodeType":"VariableDeclaration","scope":1379,"src":"4222:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1375,"name":"uint256","nodeType":"ElementaryTypeName","src":"4222:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1376,"nodeType":"ArrayTypeName","src":"4222:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4036:219:8"},"src":"4016:240:8"},{"anonymous":false,"documentation":{"id":1380,"nodeType":"StructuredDocumentation","src":"4262:548:8","text":" @notice Liquidity has been removed from a pool.\n @param pool The pool with liquidity removed\n @param liquidityProvider The user performing the operation\n @param kind The remove liquidity operation type (e.g., proportional, custom)\n @param totalSupply The total supply of the pool after the operation\n @param amountsRemovedRaw The amount of each token that was removed, sorted in token registration order\n @param swapFeeAmountsRaw The total swap fees charged, sorted in token registration order"},"eventSelector":"fbe5b0d79fb94f1e81c0a92bf86ae9d3a19e9d1bf6202c0d3e75120f65d5d8a5","id":1397,"name":"LiquidityRemoved","nameLocation":"4821:16:8","nodeType":"EventDefinition","parameters":{"id":1396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1382,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"4863:4:8","nodeType":"VariableDeclaration","scope":1397,"src":"4847:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1381,"name":"address","nodeType":"ElementaryTypeName","src":"4847:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1384,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"4893:17:8","nodeType":"VariableDeclaration","scope":1397,"src":"4877:33:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1383,"name":"address","nodeType":"ElementaryTypeName","src":"4877:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1387,"indexed":true,"mutability":"mutable","name":"kind","nameLocation":"4948:4:8","nodeType":"VariableDeclaration","scope":1397,"src":"4920:32:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2811","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":1386,"nodeType":"UserDefinedTypeName","pathNode":{"id":1385,"name":"RemoveLiquidityKind","nameLocations":["4920:19:8"],"nodeType":"IdentifierPath","referencedDeclaration":2811,"src":"4920:19:8"},"referencedDeclaration":2811,"src":"4920:19:8","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2811","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":1389,"indexed":false,"mutability":"mutable","name":"totalSupply","nameLocation":"4970:11:8","nodeType":"VariableDeclaration","scope":1397,"src":"4962:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1388,"name":"uint256","nodeType":"ElementaryTypeName","src":"4962:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1392,"indexed":false,"mutability":"mutable","name":"amountsRemovedRaw","nameLocation":"5001:17:8","nodeType":"VariableDeclaration","scope":1397,"src":"4991:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1390,"name":"uint256","nodeType":"ElementaryTypeName","src":"4991:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1391,"nodeType":"ArrayTypeName","src":"4991:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1395,"indexed":false,"mutability":"mutable","name":"swapFeeAmountsRaw","nameLocation":"5038:17:8","nodeType":"VariableDeclaration","scope":1397,"src":"5028:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1393,"name":"uint256","nodeType":"ElementaryTypeName","src":"5028:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1394,"nodeType":"ArrayTypeName","src":"5028:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4837:224:8"},"src":"4815:247:8"},{"anonymous":false,"documentation":{"id":1398,"nodeType":"StructuredDocumentation","src":"5068:114:8","text":" @notice The Vault's pause status has changed.\n @param paused True if the Vault was paused"},"eventSelector":"e0629fe656e45ad7fd63a24b899da368690024c07043b88e57aee5095b1d3d02","id":1402,"name":"VaultPausedStateChanged","nameLocation":"5193:23:8","nodeType":"EventDefinition","parameters":{"id":1401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1400,"indexed":false,"mutability":"mutable","name":"paused","nameLocation":"5222:6:8","nodeType":"VariableDeclaration","scope":1402,"src":"5217:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1399,"name":"bool","nodeType":"ElementaryTypeName","src":"5217:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5216:13:8"},"src":"5187:43:8"},{"anonymous":false,"documentation":{"id":1403,"nodeType":"StructuredDocumentation","src":"5236:87:8","text":"@notice `disableQuery` has been called on the Vault, disabling query functionality."},"eventSelector":"bd204090fd387f08e3076528bf09b4fc99d8100d749eace96c06002d3fedc625","id":1405,"name":"VaultQueriesDisabled","nameLocation":"5334:20:8","nodeType":"EventDefinition","parameters":{"id":1404,"nodeType":"ParameterList","parameters":[],"src":"5354:2:8"},"src":"5328:29:8"},{"anonymous":false,"documentation":{"id":1406,"nodeType":"StructuredDocumentation","src":"5363:85:8","text":"@notice `enableQuery` has been called on the Vault, enabling query functionality."},"eventSelector":"91d7478835f2b5adc315f5aad920f4a7f0a02f7fddf3042d17b2c80168ea17f5","id":1408,"name":"VaultQueriesEnabled","nameLocation":"5459:19:8","nodeType":"EventDefinition","parameters":{"id":1407,"nodeType":"ParameterList","parameters":[],"src":"5478:2:8"},"src":"5453:28:8"},{"anonymous":false,"documentation":{"id":1409,"nodeType":"StructuredDocumentation","src":"5487:171:8","text":" @notice A Pool's pause status has changed.\n @param pool The pool that was just paused or unpaused\n @param paused True if the pool was paused"},"eventSelector":"57e20448028297190122571be7cb6c1b1ef85730c673f7c72f533c8662419aa7","id":1415,"name":"PoolPausedStateChanged","nameLocation":"5669:22:8","nodeType":"EventDefinition","parameters":{"id":1414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"5708:4:8","nodeType":"VariableDeclaration","scope":1415,"src":"5692:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1410,"name":"address","nodeType":"ElementaryTypeName","src":"5692:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1413,"indexed":false,"mutability":"mutable","name":"paused","nameLocation":"5719:6:8","nodeType":"VariableDeclaration","scope":1415,"src":"5714:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1412,"name":"bool","nodeType":"ElementaryTypeName","src":"5714:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5691:35:8"},"src":"5663:64:8"},{"anonymous":false,"documentation":{"id":1416,"nodeType":"StructuredDocumentation","src":"5733:158:8","text":" @notice Emitted when the swap fee percentage of a pool is updated.\n @param swapFeePercentage The new swap fee percentage for the pool"},"eventSelector":"89d41522342fabac1471ca6073a5623e5caf367b03ca6e9a001478d0cf8be4a1","id":1422,"name":"SwapFeePercentageChanged","nameLocation":"5902:24:8","nodeType":"EventDefinition","parameters":{"id":1421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1418,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"5943:4:8","nodeType":"VariableDeclaration","scope":1422,"src":"5927:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1417,"name":"address","nodeType":"ElementaryTypeName","src":"5927:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1420,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"5957:17:8","nodeType":"VariableDeclaration","scope":1422,"src":"5949:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1419,"name":"uint256","nodeType":"ElementaryTypeName","src":"5949:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5926:49:8"},"src":"5896:80:8"},{"anonymous":false,"documentation":{"id":1423,"nodeType":"StructuredDocumentation","src":"5982:170:8","text":" @notice Recovery mode has been enabled or disabled for a pool.\n @param pool The pool\n @param recoveryMode True if recovery mode was enabled"},"eventSelector":"c2354cc2f78ea57777e55ddd43a7f22b112ce98868596880edaeb22b4f9c73a9","id":1429,"name":"PoolRecoveryModeStateChanged","nameLocation":"6163:28:8","nodeType":"EventDefinition","parameters":{"id":1428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1425,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"6208:4:8","nodeType":"VariableDeclaration","scope":1429,"src":"6192:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1424,"name":"address","nodeType":"ElementaryTypeName","src":"6192:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1427,"indexed":false,"mutability":"mutable","name":"recoveryMode","nameLocation":"6219:12:8","nodeType":"VariableDeclaration","scope":1429,"src":"6214:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1426,"name":"bool","nodeType":"ElementaryTypeName","src":"6214:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6191:41:8"},"src":"6157:76:8"},{"anonymous":false,"documentation":{"id":1430,"nodeType":"StructuredDocumentation","src":"6239:353:8","text":" @notice A protocol or pool creator fee has changed, causing an update to the aggregate swap fee.\n @dev The `ProtocolFeeController` will emit an event with the underlying change.\n @param pool The pool whose aggregate swap fee percentage changed\n @param aggregateSwapFeePercentage The new aggregate swap fee percentage"},"eventSelector":"e4d371097beea42453a37406e2aef4c04f3c548f84ac50e72578662c0dcd7354","id":1436,"name":"AggregateSwapFeePercentageChanged","nameLocation":"6603:33:8","nodeType":"EventDefinition","parameters":{"id":1435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1432,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"6653:4:8","nodeType":"VariableDeclaration","scope":1436,"src":"6637:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1431,"name":"address","nodeType":"ElementaryTypeName","src":"6637:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1434,"indexed":false,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"6667:26:8","nodeType":"VariableDeclaration","scope":1436,"src":"6659:34:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1433,"name":"uint256","nodeType":"ElementaryTypeName","src":"6659:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6636:58:8"},"src":"6597:98:8"},{"anonymous":false,"documentation":{"id":1437,"nodeType":"StructuredDocumentation","src":"6701:357:8","text":" @notice A protocol or pool creator fee has changed, causing an update to the aggregate yield fee.\n @dev The `ProtocolFeeController` will emit an event with the underlying change.\n @param pool The pool whose aggregate yield fee percentage changed\n @param aggregateYieldFeePercentage The new aggregate yield fee percentage"},"eventSelector":"606eb97d83164bd6b200d638cd49c14c65d94d4f2c674cfd85e24e0e202c3ca5","id":1443,"name":"AggregateYieldFeePercentageChanged","nameLocation":"7069:34:8","nodeType":"EventDefinition","parameters":{"id":1442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1439,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"7120:4:8","nodeType":"VariableDeclaration","scope":1443,"src":"7104:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1438,"name":"address","nodeType":"ElementaryTypeName","src":"7104:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1441,"indexed":false,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"7134:27:8","nodeType":"VariableDeclaration","scope":1443,"src":"7126:35:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1440,"name":"uint256","nodeType":"ElementaryTypeName","src":"7126:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7103:59:8"},"src":"7063:100:8"},{"anonymous":false,"documentation":{"id":1444,"nodeType":"StructuredDocumentation","src":"7169:132:8","text":" @notice A new authorizer is set by `setAuthorizer`.\n @param newAuthorizer The address of the new authorizer"},"eventSelector":"94b979b6831a51293e2641426f97747feed46f17779fed9cd18d1ecefcfe92ef","id":1449,"name":"AuthorizerChanged","nameLocation":"7312:17:8","nodeType":"EventDefinition","parameters":{"id":1448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1447,"indexed":true,"mutability":"mutable","name":"newAuthorizer","nameLocation":"7350:13:8","nodeType":"VariableDeclaration","scope":1449,"src":"7330:33:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$40","typeString":"contract IAuthorizer"},"typeName":{"id":1446,"nodeType":"UserDefinedTypeName","pathNode":{"id":1445,"name":"IAuthorizer","nameLocations":["7330:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"7330:11:8"},"referencedDeclaration":40,"src":"7330:11:8","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$40","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"7329:35:8"},"src":"7306:59:8"},{"anonymous":false,"documentation":{"id":1450,"nodeType":"StructuredDocumentation","src":"7371:180:8","text":" @notice A new protocol fee controller is set by `setProtocolFeeController`.\n @param newProtocolFeeController The address of the new protocol fee controller"},"eventSelector":"280a60b1e63c1774d397d35cce80eb80e51408ead755fb446e6f744ce98e5df0","id":1455,"name":"ProtocolFeeControllerChanged","nameLocation":"7562:28:8","nodeType":"EventDefinition","parameters":{"id":1454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1453,"indexed":true,"mutability":"mutable","name":"newProtocolFeeController","nameLocation":"7622:24:8","nodeType":"VariableDeclaration","scope":1455,"src":"7591:55:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$580","typeString":"contract IProtocolFeeController"},"typeName":{"id":1452,"nodeType":"UserDefinedTypeName","pathNode":{"id":1451,"name":"IProtocolFeeController","nameLocations":["7591:22:8"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"7591:22:8"},"referencedDeclaration":580,"src":"7591:22:8","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$580","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"src":"7590:57:8"},"src":"7556:92:8"},{"anonymous":false,"documentation":{"id":1456,"nodeType":"StructuredDocumentation","src":"7654:553:8","text":" @notice Liquidity was added to an ERC4626 buffer corresponding to the given wrapped token.\n @dev The underlying token can be derived from the wrapped token, so it's not included here.\n @param wrappedToken The wrapped token that identifies the buffer\n @param amountUnderlying The amount of the underlying token that was deposited\n @param amountWrapped The amount of the wrapped token that was deposited\n @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)"},"eventSelector":"75c4dc5f23640eeba7d404d9165f515fc3d9e23a5c8b6e2d09b4b9da56ff00a9","id":1467,"name":"LiquidityAddedToBuffer","nameLocation":"8218:22:8","nodeType":"EventDefinition","parameters":{"id":1466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1459,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"8267:12:8","nodeType":"VariableDeclaration","scope":1467,"src":"8250:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1458,"nodeType":"UserDefinedTypeName","pathNode":{"id":1457,"name":"IERC4626","nameLocations":["8250:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"8250:8:8"},"referencedDeclaration":3024,"src":"8250:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1461,"indexed":false,"mutability":"mutable","name":"amountUnderlying","nameLocation":"8297:16:8","nodeType":"VariableDeclaration","scope":1467,"src":"8289:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1460,"name":"uint256","nodeType":"ElementaryTypeName","src":"8289:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1463,"indexed":false,"mutability":"mutable","name":"amountWrapped","nameLocation":"8331:13:8","nodeType":"VariableDeclaration","scope":1467,"src":"8323:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1462,"name":"uint256","nodeType":"ElementaryTypeName","src":"8323:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1465,"indexed":false,"mutability":"mutable","name":"bufferBalances","nameLocation":"8362:14:8","nodeType":"VariableDeclaration","scope":1467,"src":"8354:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1464,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8354:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8240:142:8"},"src":"8212:171:8"},{"anonymous":false,"documentation":{"id":1468,"nodeType":"StructuredDocumentation","src":"8389:570:8","text":" @notice Buffer shares were minted for an ERC4626 buffer corresponding to a given wrapped token.\n @dev The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares`\n retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the\n \"totalSupply\" of a buffer.\n @param wrappedToken The wrapped token that identifies the buffer\n @param to The owner of the minted shares\n @param issuedShares The amount of \"internal BPT\" shares created"},"eventSelector":"d66f031d33381c6408f0b32c884461e5de3df8808399b6f3a3d86b1368f8ec34","id":1477,"name":"BufferSharesMinted","nameLocation":"8970:18:8","nodeType":"EventDefinition","parameters":{"id":1476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1471,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"9006:12:8","nodeType":"VariableDeclaration","scope":1477,"src":"8989:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1470,"nodeType":"UserDefinedTypeName","pathNode":{"id":1469,"name":"IERC4626","nameLocations":["8989:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"8989:8:8"},"referencedDeclaration":3024,"src":"8989:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1473,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"9036:2:8","nodeType":"VariableDeclaration","scope":1477,"src":"9020:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1472,"name":"address","nodeType":"ElementaryTypeName","src":"9020:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1475,"indexed":false,"mutability":"mutable","name":"issuedShares","nameLocation":"9048:12:8","nodeType":"VariableDeclaration","scope":1477,"src":"9040:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1474,"name":"uint256","nodeType":"ElementaryTypeName","src":"9040:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8988:73:8"},"src":"8964:98:8"},{"anonymous":false,"documentation":{"id":1478,"nodeType":"StructuredDocumentation","src":"9068:571:8","text":" @notice Buffer shares were burned for an ERC4626 buffer corresponding to a given wrapped token.\n @dev The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares`\n retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the\n \"totalSupply\" of a buffer.\n @param wrappedToken The wrapped token that identifies the buffer\n @param from The owner of the burned shares\n @param burnedShares The amount of \"internal BPT\" shares burned"},"eventSelector":"4e09f7f7fc37ce2897800e2c2a9099565edb0a133d19d84a6871b3530af8846b","id":1487,"name":"BufferSharesBurned","nameLocation":"9650:18:8","nodeType":"EventDefinition","parameters":{"id":1486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1481,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"9686:12:8","nodeType":"VariableDeclaration","scope":1487,"src":"9669:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1480,"nodeType":"UserDefinedTypeName","pathNode":{"id":1479,"name":"IERC4626","nameLocations":["9669:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"9669:8:8"},"referencedDeclaration":3024,"src":"9669:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1483,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"9716:4:8","nodeType":"VariableDeclaration","scope":1487,"src":"9700:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1482,"name":"address","nodeType":"ElementaryTypeName","src":"9700:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1485,"indexed":false,"mutability":"mutable","name":"burnedShares","nameLocation":"9730:12:8","nodeType":"VariableDeclaration","scope":1487,"src":"9722:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1484,"name":"uint256","nodeType":"ElementaryTypeName","src":"9722:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9668:75:8"},"src":"9644:100:8"},{"anonymous":false,"documentation":{"id":1488,"nodeType":"StructuredDocumentation","src":"9750:509:8","text":" @notice Liquidity was removed from an ERC4626 buffer.\n @dev The underlying token can be derived from the wrapped token, so it's not included here.\n @param wrappedToken The wrapped token that identifies the buffer\n @param amountUnderlying The amount of the underlying token that was withdrawn\n @param amountWrapped The amount of the wrapped token that was withdrawn\n @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)"},"eventSelector":"44d97b36e99b590b3d2875aad3b167b1d7fb1e063f3f1325a1eeac76caee5113","id":1499,"name":"LiquidityRemovedFromBuffer","nameLocation":"10270:26:8","nodeType":"EventDefinition","parameters":{"id":1498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1491,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"10323:12:8","nodeType":"VariableDeclaration","scope":1499,"src":"10306:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1490,"nodeType":"UserDefinedTypeName","pathNode":{"id":1489,"name":"IERC4626","nameLocations":["10306:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"10306:8:8"},"referencedDeclaration":3024,"src":"10306:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1493,"indexed":false,"mutability":"mutable","name":"amountUnderlying","nameLocation":"10353:16:8","nodeType":"VariableDeclaration","scope":1499,"src":"10345:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1492,"name":"uint256","nodeType":"ElementaryTypeName","src":"10345:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1495,"indexed":false,"mutability":"mutable","name":"amountWrapped","nameLocation":"10387:13:8","nodeType":"VariableDeclaration","scope":1499,"src":"10379:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1494,"name":"uint256","nodeType":"ElementaryTypeName","src":"10379:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1497,"indexed":false,"mutability":"mutable","name":"bufferBalances","nameLocation":"10418:14:8","nodeType":"VariableDeclaration","scope":1499,"src":"10410:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1496,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10410:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10296:142:8"},"src":"10264:175:8"},{"anonymous":false,"documentation":{"id":1500,"nodeType":"StructuredDocumentation","src":"10445:278:8","text":" @notice The Vault buffers pause status has changed.\n @dev If buffers all paused, all buffer operations (i.e., all calls through the Router with `isBuffer`\n set to true) will revert.\n @param paused True if the Vault buffers were paused"},"eventSelector":"300c7ca619eb846386aa0a6e5916ac2a41406448b0a2e99ba9ccafeb899015a5","id":1504,"name":"VaultBuffersPausedStateChanged","nameLocation":"10734:30:8","nodeType":"EventDefinition","parameters":{"id":1503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1502,"indexed":false,"mutability":"mutable","name":"paused","nameLocation":"10770:6:8","nodeType":"VariableDeclaration","scope":1504,"src":"10765:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1501,"name":"bool","nodeType":"ElementaryTypeName","src":"10765:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10764:13:8"},"src":"10728:50:8"},{"anonymous":false,"documentation":{"id":1505,"nodeType":"StructuredDocumentation","src":"10784:194:8","text":" @notice Pools can use this event to emit event data from the Vault.\n @param pool Pool address\n @param eventKey Event key\n @param eventData Encoded event data"},"eventSelector":"4bc4412e210115456903c65b5277d299a505e79f2eb852b92b1ca52d85856428","id":1513,"name":"VaultAuxiliary","nameLocation":"10989:14:8","nodeType":"EventDefinition","parameters":{"id":1512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1507,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"11020:4:8","nodeType":"VariableDeclaration","scope":1513,"src":"11004:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1506,"name":"address","nodeType":"ElementaryTypeName","src":"11004:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1509,"indexed":true,"mutability":"mutable","name":"eventKey","nameLocation":"11042:8:8","nodeType":"VariableDeclaration","scope":1513,"src":"11026:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1508,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11026:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1511,"indexed":false,"mutability":"mutable","name":"eventData","nameLocation":"11058:9:8","nodeType":"VariableDeclaration","scope":1513,"src":"11052:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1510,"name":"bytes","nodeType":"ElementaryTypeName","src":"11052:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11003:65:8"},"src":"10983:86:8"}],"scope":1515,"src":"500:10571:8","usedErrors":[],"usedEvents":[1313,1318,1337,1349,1361,1379,1397,1402,1405,1408,1415,1422,1429,1436,1443,1449,1455,1467,1477,1487,1499,1504,1513]}],"src":"46:11026:8"},"id":8},"@balancer-labs/v3-interfaces/contracts/vault/IVaultExplorer.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultExplorer.sol","exportedSymbols":{"HooksConfig":[2634],"IERC20":[3102],"IERC4626":[3024],"IVaultExplorer":[1990],"PoolConfig":[2588],"PoolData":[2712],"PoolRoleAccounts":[2660],"PoolSwapParams":[2755],"TokenInfo":[2687]},"id":1991,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1516,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:9"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":1518,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1991,"sourceUnit":3025,"src":"72:75:9","symbolAliases":[{"foreign":{"id":1517,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"81:8:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":1520,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1991,"sourceUnit":3103,"src":"148:72:9","symbolAliases":[{"foreign":{"id":1519,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"157:6:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":1527,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1991,"sourceUnit":2855,"src":"222:114:9","symbolAliases":[{"foreign":{"id":1521,"name":"TokenInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"231:9:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1522,"name":"PoolRoleAccounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"242:16:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1523,"name":"PoolData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"260:8:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1524,"name":"PoolConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"270:10:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1525,"name":"PoolSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"282:14:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1526,"name":"HooksConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"298:11:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultExplorer","contractDependencies":[],"contractKind":"interface","documentation":{"id":1528,"nodeType":"StructuredDocumentation","src":"338:856:9","text":" @notice Helper contract that exposes the full permissionless Vault interface.\n @dev Since the Vault is split across three contracts using the Proxy pattern, there is not much on the Vault\n contract itself that can be called directly, especially since it is designed to primarily use a single entrypoint\n for liquidity operations, invoked through a Router. This is unhelpful for off-chain processes (e.g., Etherscan).\n The proxy contracts (`VaultExtension` and `VaultAdmin`) can only be delegate-called through the main Vault, so\n although the functions are visible off-chain, they cannot be called from Etherscan.\n The `VaultExplorer` performs the delegate calls, in order to expose the entire Vault interface in a user-friendly\n manner. It exposes all the \"getters,\" plus permissionless write operations (e.g., fee collection)."},"fullyImplemented":false,"id":1990,"linearizedBaseContracts":[1990],"name":"IVaultExplorer","nameLocation":"1205:14:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1529,"nodeType":"StructuredDocumentation","src":"1439:414:9","text":" @notice Returns the main Vault address.\n @dev The main Vault contains the entrypoint and main liquidity operation implementations. There are redundant\n `vault()` functions defined in `VaultExtension` and `VaultAdmin`. Rather than call those, it is cheaper to\n simply return the address stored in this contract.\n @return vault The address of the main Vault contract"},"functionSelector":"8d928af8","id":1534,"implemented":false,"kind":"function","modifiers":[],"name":"getVault","nameLocation":"1867:8:9","nodeType":"FunctionDefinition","parameters":{"id":1530,"nodeType":"ParameterList","parameters":[],"src":"1875:2:9"},"returnParameters":{"id":1533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1532,"mutability":"mutable","name":"vault","nameLocation":"1909:5:9","nodeType":"VariableDeclaration","scope":1534,"src":"1901:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1531,"name":"address","nodeType":"ElementaryTypeName","src":"1901:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1900:15:9"},"scope":1990,"src":"1858:58:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1535,"nodeType":"StructuredDocumentation","src":"1922:420:9","text":" @notice Returns the VaultExtension contract address.\n @dev The VaultExtension handles less critical or frequently used functions, since delegate calls through the\n Vault are more expensive than direct calls. The main Vault contains the core code for swaps and liquidity\n operations. The implementation is in `Vault`.\n @return vaultExtension Address of the VaultExtension"},"functionSelector":"b9a8effa","id":1540,"implemented":false,"kind":"function","modifiers":[],"name":"getVaultExtension","nameLocation":"2356:17:9","nodeType":"FunctionDefinition","parameters":{"id":1536,"nodeType":"ParameterList","parameters":[],"src":"2373:2:9"},"returnParameters":{"id":1539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1538,"mutability":"mutable","name":"vaultExtension","nameLocation":"2407:14:9","nodeType":"VariableDeclaration","scope":1540,"src":"2399:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1537,"name":"address","nodeType":"ElementaryTypeName","src":"2399:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2398:24:9"},"scope":1990,"src":"2347:76:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1541,"nodeType":"StructuredDocumentation","src":"2429:272:9","text":" @notice Returns the VaultAdmin contract address.\n @dev The VaultAdmin contract is mostly used for permissioned calls.\n The getter function implementation is in `VaultExtension`.\n @return vaultAdmin The address of the Vault admin"},"functionSelector":"1ba0ae45","id":1546,"implemented":false,"kind":"function","modifiers":[],"name":"getVaultAdmin","nameLocation":"2715:13:9","nodeType":"FunctionDefinition","parameters":{"id":1542,"nodeType":"ParameterList","parameters":[],"src":"2728:2:9"},"returnParameters":{"id":1545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1544,"mutability":"mutable","name":"vaultAdmin","nameLocation":"2762:10:9","nodeType":"VariableDeclaration","scope":1546,"src":"2754:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1543,"name":"address","nodeType":"ElementaryTypeName","src":"2754:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2753:20:9"},"scope":1990,"src":"2706:68:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1547,"nodeType":"StructuredDocumentation","src":"2780:327:9","text":" @notice Returns the Authorizer address.\n @dev The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can\n be changed through a permissioned call. The implementation is in `VaultExtension`.\n @return authorizer Address of the authorizer contract"},"functionSelector":"aaabadc5","id":1552,"implemented":false,"kind":"function","modifiers":[],"name":"getAuthorizer","nameLocation":"3121:13:9","nodeType":"FunctionDefinition","parameters":{"id":1548,"nodeType":"ParameterList","parameters":[],"src":"3134:2:9"},"returnParameters":{"id":1551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1550,"mutability":"mutable","name":"authorizer","nameLocation":"3168:10:9","nodeType":"VariableDeclaration","scope":1552,"src":"3160:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1549,"name":"address","nodeType":"ElementaryTypeName","src":"3160:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3159:20:9"},"scope":1990,"src":"3112:68:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1553,"nodeType":"StructuredDocumentation","src":"3186:327:9","text":" @notice Returns the current Protocol Fee Controller address.\n @dev The implementation is in `VaultExtension`. Note that the ProtocolFeeController is upgradeable in the Vault,\n so this address could change over time.\n @return protocolFeeController Address of the ProtocolFeeController"},"functionSelector":"85f2dbd4","id":1558,"implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeeController","nameLocation":"3527:24:9","nodeType":"FunctionDefinition","parameters":{"id":1554,"nodeType":"ParameterList","parameters":[],"src":"3551:2:9"},"returnParameters":{"id":1557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1556,"mutability":"mutable","name":"protocolFeeController","nameLocation":"3585:21:9","nodeType":"VariableDeclaration","scope":1558,"src":"3577:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1555,"name":"address","nodeType":"ElementaryTypeName","src":"3577:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3576:31:9"},"scope":1990,"src":"3518:90:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1559,"nodeType":"StructuredDocumentation","src":"3836:311:9","text":" @notice Returns whether the Vault is unlocked (i.e., executing an operation).\n @dev The Vault must be unlocked to perform state-changing liquidity operations.\n The implementation is in `VaultExtension`.\n @return unlocked True if the Vault is unlocked, false otherwise"},"functionSelector":"8380edb7","id":1564,"implemented":false,"kind":"function","modifiers":[],"name":"isUnlocked","nameLocation":"4161:10:9","nodeType":"FunctionDefinition","parameters":{"id":1560,"nodeType":"ParameterList","parameters":[],"src":"4171:2:9"},"returnParameters":{"id":1563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1562,"mutability":"mutable","name":"unlocked","nameLocation":"4202:8:9","nodeType":"VariableDeclaration","scope":1564,"src":"4197:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1561,"name":"bool","nodeType":"ElementaryTypeName","src":"4197:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4196:15:9"},"scope":1990,"src":"4152:60:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1565,"nodeType":"StructuredDocumentation","src":"4218:247:9","text":" @notice Returns the count of non-zero deltas.\n @dev For an operation to settle, this count must be zero. The implementation is in `VaultExtension`.\n @return nonzeroDeltaCount The current value of `_nonzeroDeltaCount`"},"functionSelector":"db817187","id":1570,"implemented":false,"kind":"function","modifiers":[],"name":"getNonzeroDeltaCount","nameLocation":"4479:20:9","nodeType":"FunctionDefinition","parameters":{"id":1566,"nodeType":"ParameterList","parameters":[],"src":"4499:2:9"},"returnParameters":{"id":1569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1568,"mutability":"mutable","name":"nonzeroDeltaCount","nameLocation":"4533:17:9","nodeType":"VariableDeclaration","scope":1570,"src":"4525:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1567,"name":"uint256","nodeType":"ElementaryTypeName","src":"4525:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4524:27:9"},"scope":1990,"src":"4470:82:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1571,"nodeType":"StructuredDocumentation","src":"4558:439:9","text":" @notice Retrieves the token delta for a specific token.\n @dev This function allows reading values from `_tokenDeltas`. A non-zero delta typically occurs only during an\n operation, and indicates a debt or credit amount in that token. The implementation is in `VaultExtension`.\n @param token The token for which the delta is being fetched\n @return tokenDelta The delta of the specified token"},"functionSelector":"9e825ff5","id":1579,"implemented":false,"kind":"function","modifiers":[],"name":"getTokenDelta","nameLocation":"5011:13:9","nodeType":"FunctionDefinition","parameters":{"id":1575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1574,"mutability":"mutable","name":"token","nameLocation":"5032:5:9","nodeType":"VariableDeclaration","scope":1579,"src":"5025:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":1573,"nodeType":"UserDefinedTypeName","pathNode":{"id":1572,"name":"IERC20","nameLocations":["5025:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"5025:6:9"},"referencedDeclaration":3102,"src":"5025:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"5024:14:9"},"returnParameters":{"id":1578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1577,"mutability":"mutable","name":"tokenDelta","nameLocation":"5069:10:9","nodeType":"VariableDeclaration","scope":1579,"src":"5062:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1576,"name":"int256","nodeType":"ElementaryTypeName","src":"5062:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"5061:19:9"},"scope":1990,"src":"5002:79:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1580,"nodeType":"StructuredDocumentation","src":"5087:397:9","text":" @notice Retrieves the reserve (i.e., sum of all pool balances) of a given token.\n @dev The `reserveAmount` should always be equal to or less than the Vault's balance of the token.\n The implementation is in `VaultExtension`.\n @param token The token for which to retrieve the reserve\n @return reserveAmount The amount of reserves for the given token"},"functionSelector":"96787092","id":1588,"implemented":false,"kind":"function","modifiers":[],"name":"getReservesOf","nameLocation":"5498:13:9","nodeType":"FunctionDefinition","parameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1583,"mutability":"mutable","name":"token","nameLocation":"5519:5:9","nodeType":"VariableDeclaration","scope":1588,"src":"5512:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":1582,"nodeType":"UserDefinedTypeName","pathNode":{"id":1581,"name":"IERC20","nameLocations":["5512:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"5512:6:9"},"referencedDeclaration":3102,"src":"5512:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"5511:14:9"},"returnParameters":{"id":1587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1586,"mutability":"mutable","name":"reserveAmount","nameLocation":"5557:13:9","nodeType":"VariableDeclaration","scope":1588,"src":"5549:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1585,"name":"uint256","nodeType":"ElementaryTypeName","src":"5549:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5548:23:9"},"scope":1990,"src":"5489:83:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1589,"nodeType":"StructuredDocumentation","src":"5578:892:9","text":" @notice This flag is used to detect \"round trip\" transactions (adding and removing liquidity in the same pool).\n @dev Taxing removing liquidity proportionally whenever liquidity was added in the same transaction adds an extra\n layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional\n is the only standard way to exit a position without fees, and this flag is used to enable fees when the\n operation might be an attempted exploit. It also discourages indirect swaps via unbalanced add and remove\n proportional, as they are expected to be worse than a simple swap for every pool type.\n The implementation is in `VaultExtension`.\n @param pool Address of the pool to check\n @return liquidityAdded True if liquidity has been added to this pool in the current transaction"},"functionSelector":"ace9b89b","id":1596,"implemented":false,"kind":"function","modifiers":[],"name":"getAddLiquidityCalledFlag","nameLocation":"6484:25:9","nodeType":"FunctionDefinition","parameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1591,"mutability":"mutable","name":"pool","nameLocation":"6518:4:9","nodeType":"VariableDeclaration","scope":1596,"src":"6510:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1590,"name":"address","nodeType":"ElementaryTypeName","src":"6510:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6509:14:9"},"returnParameters":{"id":1595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1594,"mutability":"mutable","name":"liquidityAdded","nameLocation":"6552:14:9","nodeType":"VariableDeclaration","scope":1596,"src":"6547:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1593,"name":"bool","nodeType":"ElementaryTypeName","src":"6547:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6546:21:9"},"scope":1990,"src":"6475:93:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1597,"nodeType":"StructuredDocumentation","src":"6799:240:9","text":" @notice Checks whether a pool is registered.\n @dev The implementation is in `VaultExtension`.\n @param pool Address of the pool to check\n @return registered True if the pool is registered, false otherwise"},"functionSelector":"c673bdaf","id":1604,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolRegistered","nameLocation":"7053:16:9","nodeType":"FunctionDefinition","parameters":{"id":1600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1599,"mutability":"mutable","name":"pool","nameLocation":"7078:4:9","nodeType":"VariableDeclaration","scope":1604,"src":"7070:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1598,"name":"address","nodeType":"ElementaryTypeName","src":"7070:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7069:14:9"},"returnParameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"registered","nameLocation":"7112:10:9","nodeType":"VariableDeclaration","scope":1604,"src":"7107:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1601,"name":"bool","nodeType":"ElementaryTypeName","src":"7107:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7106:17:9"},"scope":1990,"src":"7044:80:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1605,"nodeType":"StructuredDocumentation","src":"7354:301:9","text":" @notice Checks whether a pool is initialized.\n @dev An initialized pool can be considered registered as well. The implementation is in `VaultExtension`.\n @param pool Address of the pool to check\n @return initialized True if the pool is initialized, false otherwise"},"functionSelector":"532cec7c","id":1612,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolInitialized","nameLocation":"7669:17:9","nodeType":"FunctionDefinition","parameters":{"id":1608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1607,"mutability":"mutable","name":"pool","nameLocation":"7695:4:9","nodeType":"VariableDeclaration","scope":1612,"src":"7687:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1606,"name":"address","nodeType":"ElementaryTypeName","src":"7687:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7686:14:9"},"returnParameters":{"id":1611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1610,"mutability":"mutable","name":"initialized","nameLocation":"7729:11:9","nodeType":"VariableDeclaration","scope":1612,"src":"7724:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1609,"name":"bool","nodeType":"ElementaryTypeName","src":"7724:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7723:18:9"},"scope":1990,"src":"7660:82:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1613,"nodeType":"StructuredDocumentation","src":"7748:207:9","text":" @notice Gets the tokens registered to a pool.\n @dev The implementation is in `VaultExtension`.\n @param pool Address of the pool\n @return tokens List of tokens in the pool"},"functionSelector":"ca4f2803","id":1622,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokens","nameLocation":"7969:13:9","nodeType":"FunctionDefinition","parameters":{"id":1616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1615,"mutability":"mutable","name":"pool","nameLocation":"7991:4:9","nodeType":"VariableDeclaration","scope":1622,"src":"7983:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1614,"name":"address","nodeType":"ElementaryTypeName","src":"7983:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7982:14:9"},"returnParameters":{"id":1621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1620,"mutability":"mutable","name":"tokens","nameLocation":"8036:6:9","nodeType":"VariableDeclaration","scope":1622,"src":"8020:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1618,"nodeType":"UserDefinedTypeName","pathNode":{"id":1617,"name":"IERC20","nameLocations":["8020:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"8020:6:9"},"referencedDeclaration":3102,"src":"8020:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"id":1619,"nodeType":"ArrayTypeName","src":"8020:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"8019:24:9"},"scope":1990,"src":"7960:84:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1623,"nodeType":"StructuredDocumentation","src":"8050:433:9","text":" @notice Gets the index of a token in a given pool.\n @dev Reverts if the pool is not registered, or if the token does not belong to the pool.\n The implementation is in `Vault`.\n @param pool Address of the pool\n @param token Address of the token\n @return tokenCount Number of tokens in the pool\n @return index Index corresponding to the given token in the pool's token list"},"functionSelector":"c9c1661b","id":1635,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenCountAndIndexOfToken","nameLocation":"8497:32:9","nodeType":"FunctionDefinition","parameters":{"id":1629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1625,"mutability":"mutable","name":"pool","nameLocation":"8547:4:9","nodeType":"VariableDeclaration","scope":1635,"src":"8539:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1624,"name":"address","nodeType":"ElementaryTypeName","src":"8539:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1628,"mutability":"mutable","name":"token","nameLocation":"8568:5:9","nodeType":"VariableDeclaration","scope":1635,"src":"8561:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":1627,"nodeType":"UserDefinedTypeName","pathNode":{"id":1626,"name":"IERC20","nameLocations":["8561:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"8561:6:9"},"referencedDeclaration":3102,"src":"8561:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"8529:50:9"},"returnParameters":{"id":1634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"mutability":"mutable","name":"tokenCount","nameLocation":"8611:10:9","nodeType":"VariableDeclaration","scope":1635,"src":"8603:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1630,"name":"uint256","nodeType":"ElementaryTypeName","src":"8603:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1633,"mutability":"mutable","name":"index","nameLocation":"8631:5:9","nodeType":"VariableDeclaration","scope":1635,"src":"8623:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1632,"name":"uint256","nodeType":"ElementaryTypeName","src":"8623:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8602:35:9"},"scope":1990,"src":"8488:150:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1636,"nodeType":"StructuredDocumentation","src":"8644:437:9","text":" @notice Gets pool token rates.\n @dev This function performs external calls if tokens are yield-bearing. All returned arrays are in token\n registration order. The implementation is in `VaultExtension`.\n @param pool Address of the pool\n @return decimalScalingFactors Token decimal scaling factors\n @return tokenRates Token rates for yield-bearing tokens, or FP(1) for standard tokens"},"functionSelector":"7e361bde","id":1647,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenRates","nameLocation":"9095:17:9","nodeType":"FunctionDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1638,"mutability":"mutable","name":"pool","nameLocation":"9130:4:9","nodeType":"VariableDeclaration","scope":1647,"src":"9122:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1637,"name":"address","nodeType":"ElementaryTypeName","src":"9122:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9112:28:9"},"returnParameters":{"id":1646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1642,"mutability":"mutable","name":"decimalScalingFactors","nameLocation":"9181:21:9","nodeType":"VariableDeclaration","scope":1647,"src":"9164:38:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1640,"name":"uint256","nodeType":"ElementaryTypeName","src":"9164:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1641,"nodeType":"ArrayTypeName","src":"9164:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1645,"mutability":"mutable","name":"tokenRates","nameLocation":"9221:10:9","nodeType":"VariableDeclaration","scope":1647,"src":"9204:27:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1643,"name":"uint256","nodeType":"ElementaryTypeName","src":"9204:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1644,"nodeType":"ArrayTypeName","src":"9204:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"9163:69:9"},"scope":1990,"src":"9086:147:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"9239:344:9","text":" @notice Returns comprehensive pool data for the given pool.\n @dev This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\n The implementation is in `VaultExtension`.\n @param pool The address of the pool\n @return poolData The `PoolData` result"},"functionSelector":"13d21cdf","id":1656,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolData","nameLocation":"9597:11:9","nodeType":"FunctionDefinition","parameters":{"id":1651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1650,"mutability":"mutable","name":"pool","nameLocation":"9617:4:9","nodeType":"VariableDeclaration","scope":1656,"src":"9609:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1649,"name":"address","nodeType":"ElementaryTypeName","src":"9609:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9608:14:9"},"returnParameters":{"id":1655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1654,"mutability":"mutable","name":"poolData","nameLocation":"9662:8:9","nodeType":"VariableDeclaration","scope":1656,"src":"9646:24:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$2712_memory_ptr","typeString":"struct PoolData"},"typeName":{"id":1653,"nodeType":"UserDefinedTypeName","pathNode":{"id":1652,"name":"PoolData","nameLocations":["9646:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":2712,"src":"9646:8:9"},"referencedDeclaration":2712,"src":"9646:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$2712_storage_ptr","typeString":"struct PoolData"}},"visibility":"internal"}],"src":"9645:26:9"},"scope":1990,"src":"9588:84:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1657,"nodeType":"StructuredDocumentation","src":"9678:510:9","text":" @notice Gets the raw data for a pool: tokens, raw balances, and scaling factors.\n @dev The implementation is in `VaultExtension`.\n @param pool Address of the pool\n @return tokens The pool tokens, sorted in registration order\n @return tokenInfo Token info, sorted in token registration order\n @return balancesRaw Raw balances, sorted in token registration order\n @return lastBalancesLiveScaled18 Last saved live balances, sorted in token registration order"},"functionSelector":"67e0e076","id":1676,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenInfo","nameLocation":"10202:16:9","nodeType":"FunctionDefinition","parameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"mutability":"mutable","name":"pool","nameLocation":"10236:4:9","nodeType":"VariableDeclaration","scope":1676,"src":"10228:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1658,"name":"address","nodeType":"ElementaryTypeName","src":"10228:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10218:28:9"},"returnParameters":{"id":1675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1664,"mutability":"mutable","name":"tokens","nameLocation":"10323:6:9","nodeType":"VariableDeclaration","scope":1676,"src":"10307:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1662,"nodeType":"UserDefinedTypeName","pathNode":{"id":1661,"name":"IERC20","nameLocations":["10307:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"10307:6:9"},"referencedDeclaration":3102,"src":"10307:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"id":1663,"nodeType":"ArrayTypeName","src":"10307:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1668,"mutability":"mutable","name":"tokenInfo","nameLocation":"10362:9:9","nodeType":"VariableDeclaration","scope":1676,"src":"10343:28:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2687_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenInfo[]"},"typeName":{"baseType":{"id":1666,"nodeType":"UserDefinedTypeName","pathNode":{"id":1665,"name":"TokenInfo","nameLocations":["10343:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":2687,"src":"10343:9:9"},"referencedDeclaration":2687,"src":"10343:9:9","typeDescriptions":{"typeIdentifier":"t_struct$_TokenInfo_$2687_storage_ptr","typeString":"struct TokenInfo"}},"id":1667,"nodeType":"ArrayTypeName","src":"10343:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2687_storage_$dyn_storage_ptr","typeString":"struct TokenInfo[]"}},"visibility":"internal"},{"constant":false,"id":1671,"mutability":"mutable","name":"balancesRaw","nameLocation":"10402:11:9","nodeType":"VariableDeclaration","scope":1676,"src":"10385:28:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1669,"name":"uint256","nodeType":"ElementaryTypeName","src":"10385:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1670,"nodeType":"ArrayTypeName","src":"10385:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1674,"mutability":"mutable","name":"lastBalancesLiveScaled18","nameLocation":"10444:24:9","nodeType":"VariableDeclaration","scope":1676,"src":"10427:41:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1672,"name":"uint256","nodeType":"ElementaryTypeName","src":"10427:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1673,"nodeType":"ArrayTypeName","src":"10427:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10293:185:9"},"scope":1990,"src":"10193:286:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1677,"nodeType":"StructuredDocumentation","src":"10485:346:9","text":" @notice Gets current live balances of a given pool, in token registration order.\n @dev These are 18-decimal fixed point values. The implementation is in `VaultExtension`.\n @param pool Address of the pool\n @return balancesLiveScaled18  Token balances after paying yield fees, applying decimal scaling and rates"},"functionSelector":"535cfd8a","id":1685,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentLiveBalances","nameLocation":"10845:22:9","nodeType":"FunctionDefinition","parameters":{"id":1680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1679,"mutability":"mutable","name":"pool","nameLocation":"10876:4:9","nodeType":"VariableDeclaration","scope":1685,"src":"10868:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1678,"name":"address","nodeType":"ElementaryTypeName","src":"10868:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10867:14:9"},"returnParameters":{"id":1684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1683,"mutability":"mutable","name":"balancesLiveScaled18","nameLocation":"10922:20:9","nodeType":"VariableDeclaration","scope":1685,"src":"10905:37:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1681,"name":"uint256","nodeType":"ElementaryTypeName","src":"10905:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1682,"nodeType":"ArrayTypeName","src":"10905:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10904:39:9"},"scope":1990,"src":"10836:108:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1686,"nodeType":"StructuredDocumentation","src":"10950:358:9","text":" @notice Gets the configuration parameters of a pool.\n @dev The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\n The implementation is in `VaultExtension`.\n @param pool Address of the pool\n @return poolConfig The pool configuration as a `PoolConfig` struct"},"functionSelector":"f29486a1","id":1694,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolConfig","nameLocation":"11322:13:9","nodeType":"FunctionDefinition","parameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1688,"mutability":"mutable","name":"pool","nameLocation":"11344:4:9","nodeType":"VariableDeclaration","scope":1694,"src":"11336:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1687,"name":"address","nodeType":"ElementaryTypeName","src":"11336:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11335:14:9"},"returnParameters":{"id":1693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1692,"mutability":"mutable","name":"poolConfig","nameLocation":"11391:10:9","nodeType":"VariableDeclaration","scope":1694,"src":"11373:28:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2588_memory_ptr","typeString":"struct PoolConfig"},"typeName":{"id":1691,"nodeType":"UserDefinedTypeName","pathNode":{"id":1690,"name":"PoolConfig","nameLocations":["11373:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":2588,"src":"11373:10:9"},"referencedDeclaration":2588,"src":"11373:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2588_storage_ptr","typeString":"struct PoolConfig"}},"visibility":"internal"}],"src":"11372:30:9"},"scope":1990,"src":"11313:90:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1695,"nodeType":"StructuredDocumentation","src":"11409:340:9","text":" @notice Gets the hooks configuration parameters of a pool.\n @dev The `HooksConfig` contains flags indicating which pool hooks are implemented.\n The implementation is in `VaultExtension`.\n @param pool Address of the pool\n @return hooksConfig The hooks configuration as a `HooksConfig` struct"},"functionSelector":"ce8630d4","id":1703,"implemented":false,"kind":"function","modifiers":[],"name":"getHooksConfig","nameLocation":"11763:14:9","nodeType":"FunctionDefinition","parameters":{"id":1698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1697,"mutability":"mutable","name":"pool","nameLocation":"11786:4:9","nodeType":"VariableDeclaration","scope":1703,"src":"11778:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1696,"name":"address","nodeType":"ElementaryTypeName","src":"11778:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11777:14:9"},"returnParameters":{"id":1702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1701,"mutability":"mutable","name":"hooksConfig","nameLocation":"11834:11:9","nodeType":"VariableDeclaration","scope":1703,"src":"11815:30:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2634_memory_ptr","typeString":"struct HooksConfig"},"typeName":{"id":1700,"nodeType":"UserDefinedTypeName","pathNode":{"id":1699,"name":"HooksConfig","nameLocations":["11815:11:9"],"nodeType":"IdentifierPath","referencedDeclaration":2634,"src":"11815:11:9"},"referencedDeclaration":2634,"src":"11815:11:9","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2634_storage_ptr","typeString":"struct HooksConfig"}},"visibility":"internal"}],"src":"11814:32:9"},"scope":1990,"src":"11754:93:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1704,"nodeType":"StructuredDocumentation","src":"11853:248:9","text":" @notice Gets the current bpt rate of a pool, by dividing the current invariant by the total supply of BPT.\n @dev The implementation is in `VaultExtension`.\n @param pool Address of the pool\n @return rate BPT rate"},"functionSelector":"4f037ee7","id":1711,"implemented":false,"kind":"function","modifiers":[],"name":"getBptRate","nameLocation":"12115:10:9","nodeType":"FunctionDefinition","parameters":{"id":1707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1706,"mutability":"mutable","name":"pool","nameLocation":"12134:4:9","nodeType":"VariableDeclaration","scope":1711,"src":"12126:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1705,"name":"address","nodeType":"ElementaryTypeName","src":"12126:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12125:14:9"},"returnParameters":{"id":1710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1709,"mutability":"mutable","name":"rate","nameLocation":"12171:4:9","nodeType":"VariableDeclaration","scope":1711,"src":"12163:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1708,"name":"uint256","nodeType":"ElementaryTypeName","src":"12163:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12162:14:9"},"scope":1990,"src":"12106:71:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1712,"nodeType":"StructuredDocumentation","src":"12408:223:9","text":" @notice Gets the total supply of a given ERC20 token.\n @dev The implementation is in `VaultExtension`.\n @param token The token address\n @return tokenTotalSupply Total supply of the token"},"functionSelector":"e4dc2aa4","id":1719,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"12645:11:9","nodeType":"FunctionDefinition","parameters":{"id":1715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1714,"mutability":"mutable","name":"token","nameLocation":"12665:5:9","nodeType":"VariableDeclaration","scope":1719,"src":"12657:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1713,"name":"address","nodeType":"ElementaryTypeName","src":"12657:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12656:15:9"},"returnParameters":{"id":1718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1717,"mutability":"mutable","name":"tokenTotalSupply","nameLocation":"12703:16:9","nodeType":"VariableDeclaration","scope":1719,"src":"12695:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1716,"name":"uint256","nodeType":"ElementaryTypeName","src":"12695:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12694:26:9"},"scope":1990,"src":"12636:85:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1720,"nodeType":"StructuredDocumentation","src":"12727:280:9","text":" @notice Gets the balance of an account for a given ERC20 token.\n @dev The implementation is in `VaultExtension`.\n @param token Address of the token\n @param account Address of the account\n @return tokenBalance Token balance of the account"},"functionSelector":"f7888aec","id":1729,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"13021:9:9","nodeType":"FunctionDefinition","parameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1722,"mutability":"mutable","name":"token","nameLocation":"13039:5:9","nodeType":"VariableDeclaration","scope":1729,"src":"13031:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1721,"name":"address","nodeType":"ElementaryTypeName","src":"13031:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1724,"mutability":"mutable","name":"account","nameLocation":"13054:7:9","nodeType":"VariableDeclaration","scope":1729,"src":"13046:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1723,"name":"address","nodeType":"ElementaryTypeName","src":"13046:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13030:32:9"},"returnParameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1727,"mutability":"mutable","name":"tokenBalance","nameLocation":"13094:12:9","nodeType":"VariableDeclaration","scope":1729,"src":"13086:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1726,"name":"uint256","nodeType":"ElementaryTypeName","src":"13086:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13085:22:9"},"scope":1990,"src":"13012:96:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1730,"nodeType":"StructuredDocumentation","src":"13114:354:9","text":" @notice Gets the allowance of a spender for a given ERC20 token and owner.\n @dev The implementation is in `VaultExtension`.\n @param token Address of the token\n @param owner Address of the owner\n @param spender Address of the spender\n @return tokenAllowance Amount of tokens the spender is allowed to spend"},"functionSelector":"927da105","id":1741,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"13482:9:9","nodeType":"FunctionDefinition","parameters":{"id":1737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1732,"mutability":"mutable","name":"token","nameLocation":"13500:5:9","nodeType":"VariableDeclaration","scope":1741,"src":"13492:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1731,"name":"address","nodeType":"ElementaryTypeName","src":"13492:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1734,"mutability":"mutable","name":"owner","nameLocation":"13515:5:9","nodeType":"VariableDeclaration","scope":1741,"src":"13507:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1733,"name":"address","nodeType":"ElementaryTypeName","src":"13507:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1736,"mutability":"mutable","name":"spender","nameLocation":"13530:7:9","nodeType":"VariableDeclaration","scope":1741,"src":"13522:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1735,"name":"address","nodeType":"ElementaryTypeName","src":"13522:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13491:47:9"},"returnParameters":{"id":1740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1739,"mutability":"mutable","name":"tokenAllowance","nameLocation":"13570:14:9","nodeType":"VariableDeclaration","scope":1741,"src":"13562:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1738,"name":"uint256","nodeType":"ElementaryTypeName","src":"13562:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13561:24:9"},"scope":1990,"src":"13473:113:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1742,"nodeType":"StructuredDocumentation","src":"13812:308:9","text":" @notice Indicates whether a pool is paused.\n @dev If a pool is paused, all non-Recovery Mode state-changing operations will revert.\n The implementation is in `VaultExtension`.\n @param pool The pool to be checked\n @return poolPaused True if the pool is paused"},"functionSelector":"6c9bc732","id":1749,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolPaused","nameLocation":"14134:12:9","nodeType":"FunctionDefinition","parameters":{"id":1745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1744,"mutability":"mutable","name":"pool","nameLocation":"14155:4:9","nodeType":"VariableDeclaration","scope":1749,"src":"14147:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1743,"name":"address","nodeType":"ElementaryTypeName","src":"14147:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14146:14:9"},"returnParameters":{"id":1748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"poolPaused","nameLocation":"14189:10:9","nodeType":"VariableDeclaration","scope":1749,"src":"14184:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1746,"name":"bool","nodeType":"ElementaryTypeName","src":"14184:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14183:17:9"},"scope":1990,"src":"14125:76:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1750,"nodeType":"StructuredDocumentation","src":"14207:691:9","text":" @notice Returns the paused status, and end times of the Pool's pause window and buffer period.\n @dev Note that even when set to a paused state, the pool will automatically unpause at the end of\n the buffer period. Balancer timestamps are 32 bits. The implementation is in `VaultExtension`.\n @param pool The pool whose data is requested\n @return poolPaused True if the Pool is paused\n @return poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\n @return poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\n @return pauseManager The pause manager, or the zero address"},"functionSelector":"15e32046","id":1763,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolPausedState","nameLocation":"14912:18:9","nodeType":"FunctionDefinition","parameters":{"id":1753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1752,"mutability":"mutable","name":"pool","nameLocation":"14948:4:9","nodeType":"VariableDeclaration","scope":1763,"src":"14940:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1751,"name":"address","nodeType":"ElementaryTypeName","src":"14940:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14930:28:9"},"returnParameters":{"id":1762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1755,"mutability":"mutable","name":"poolPaused","nameLocation":"15011:10:9","nodeType":"VariableDeclaration","scope":1763,"src":"15006:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1754,"name":"bool","nodeType":"ElementaryTypeName","src":"15006:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1757,"mutability":"mutable","name":"poolPauseWindowEndTime","nameLocation":"15030:22:9","nodeType":"VariableDeclaration","scope":1763,"src":"15023:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1756,"name":"uint32","nodeType":"ElementaryTypeName","src":"15023:6:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1759,"mutability":"mutable","name":"poolBufferPeriodEndTime","nameLocation":"15061:23:9","nodeType":"VariableDeclaration","scope":1763,"src":"15054:30:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1758,"name":"uint32","nodeType":"ElementaryTypeName","src":"15054:6:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1761,"mutability":"mutable","name":"pauseManager","nameLocation":"15094:12:9","nodeType":"VariableDeclaration","scope":1763,"src":"15086:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1760,"name":"address","nodeType":"ElementaryTypeName","src":"15086:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15005:102:9"},"scope":1990,"src":"14903:205:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1764,"nodeType":"StructuredDocumentation","src":"15325:411:9","text":" @notice Returns the total aggregate swap fees in `token` collected by the pool.\n @dev The implementation is in `VaultExtension`.\n @param pool The address of the pool for which aggregate fees have been collected\n @param token The address of the token in which fees have been accumulated\n @return swapFeeAmount The total amount of fees accumulated in the specified token"},"functionSelector":"85e0b999","id":1774,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregateSwapFeeAmount","nameLocation":"15750:25:9","nodeType":"FunctionDefinition","parameters":{"id":1770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"pool","nameLocation":"15784:4:9","nodeType":"VariableDeclaration","scope":1774,"src":"15776:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1765,"name":"address","nodeType":"ElementaryTypeName","src":"15776:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1769,"mutability":"mutable","name":"token","nameLocation":"15797:5:9","nodeType":"VariableDeclaration","scope":1774,"src":"15790:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":1768,"nodeType":"UserDefinedTypeName","pathNode":{"id":1767,"name":"IERC20","nameLocations":["15790:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"15790:6:9"},"referencedDeclaration":3102,"src":"15790:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"15775:28:9"},"returnParameters":{"id":1773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1772,"mutability":"mutable","name":"swapFeeAmount","nameLocation":"15835:13:9","nodeType":"VariableDeclaration","scope":1774,"src":"15827:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1771,"name":"uint256","nodeType":"ElementaryTypeName","src":"15827:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15826:23:9"},"scope":1990,"src":"15741:109:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1775,"nodeType":"StructuredDocumentation","src":"15856:413:9","text":" @notice Returns the total aggregate yield fees in `token` collected by the pool.\n @dev The implementation is in `VaultExtension`.\n @param pool The address of the pool for which aggregate fees have been collected\n @param token The address of the token in which fees have been accumulated\n @return yieldFeeAmount The total amount of fees accumulated in the specified token"},"functionSelector":"00fdfa13","id":1785,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregateYieldFeeAmount","nameLocation":"16283:26:9","nodeType":"FunctionDefinition","parameters":{"id":1781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1777,"mutability":"mutable","name":"pool","nameLocation":"16318:4:9","nodeType":"VariableDeclaration","scope":1785,"src":"16310:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1776,"name":"address","nodeType":"ElementaryTypeName","src":"16310:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1780,"mutability":"mutable","name":"token","nameLocation":"16331:5:9","nodeType":"VariableDeclaration","scope":1785,"src":"16324:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":1779,"nodeType":"UserDefinedTypeName","pathNode":{"id":1778,"name":"IERC20","nameLocations":["16324:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"16324:6:9"},"referencedDeclaration":3102,"src":"16324:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"16309:28:9"},"returnParameters":{"id":1784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1783,"mutability":"mutable","name":"yieldFeeAmount","nameLocation":"16369:14:9","nodeType":"VariableDeclaration","scope":1785,"src":"16361:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1782,"name":"uint256","nodeType":"ElementaryTypeName","src":"16361:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16360:24:9"},"scope":1990,"src":"16274:111:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1786,"nodeType":"StructuredDocumentation","src":"16391:326:9","text":" @notice Fetches the static swap fee percentage for a given pool.\n @dev The implementation is in `VaultExtension`.\n @param pool The address of the pool whose static swap fee percentage is being queried\n @return swapFeePercentage The current static swap fee percentage for the specified pool"},"functionSelector":"b45090f9","id":1793,"implemented":false,"kind":"function","modifiers":[],"name":"getStaticSwapFeePercentage","nameLocation":"16731:26:9","nodeType":"FunctionDefinition","parameters":{"id":1789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"pool","nameLocation":"16766:4:9","nodeType":"VariableDeclaration","scope":1793,"src":"16758:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1787,"name":"address","nodeType":"ElementaryTypeName","src":"16758:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16757:14:9"},"returnParameters":{"id":1792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1791,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"16803:17:9","nodeType":"VariableDeclaration","scope":1793,"src":"16795:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1790,"name":"uint256","nodeType":"ElementaryTypeName","src":"16795:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16794:27:9"},"scope":1990,"src":"16722:100:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1794,"nodeType":"StructuredDocumentation","src":"16828:342:9","text":" @notice Fetches the role accounts for a given pool (pause manager, swap manager, pool creator).\n @dev The implementation is in `VaultExtension`.\n @param pool The address of the pool whose roles are being queried\n @return roleAccounts A struct containing the role accounts for the pool (or 0 if unassigned)"},"functionSelector":"e9ddeb26","id":1802,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolRoleAccounts","nameLocation":"17184:19:9","nodeType":"FunctionDefinition","parameters":{"id":1797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1796,"mutability":"mutable","name":"pool","nameLocation":"17212:4:9","nodeType":"VariableDeclaration","scope":1802,"src":"17204:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1795,"name":"address","nodeType":"ElementaryTypeName","src":"17204:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17203:14:9"},"returnParameters":{"id":1801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1800,"mutability":"mutable","name":"roleAccounts","nameLocation":"17265:12:9","nodeType":"VariableDeclaration","scope":1802,"src":"17241:36:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2660_memory_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":1799,"nodeType":"UserDefinedTypeName","pathNode":{"id":1798,"name":"PoolRoleAccounts","nameLocations":["17241:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":2660,"src":"17241:16:9"},"referencedDeclaration":2660,"src":"17241:16:9","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2660_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"}],"src":"17240:38:9"},"scope":1990,"src":"17175:104:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1803,"nodeType":"StructuredDocumentation","src":"17285:409:9","text":" @notice Query the current dynamic swap fee of a pool, given a set of swap parameters.\n @dev Reverts if the hook doesn't return the success flag set to `true`.\n The implementation is in `VaultExtension`.\n @param pool The pool\n @param swapParams The swap parameters used to compute the fee\n @return dynamicSwapFeePercentage The dynamic swap fee percentage"},"functionSelector":"4d472bdd","id":1813,"implemented":false,"kind":"function","modifiers":[],"name":"computeDynamicSwapFeePercentage","nameLocation":"17708:31:9","nodeType":"FunctionDefinition","parameters":{"id":1809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1805,"mutability":"mutable","name":"pool","nameLocation":"17757:4:9","nodeType":"VariableDeclaration","scope":1813,"src":"17749:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1804,"name":"address","nodeType":"ElementaryTypeName","src":"17749:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1808,"mutability":"mutable","name":"swapParams","nameLocation":"17793:10:9","nodeType":"VariableDeclaration","scope":1813,"src":"17771:32:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2755_memory_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":1807,"nodeType":"UserDefinedTypeName","pathNode":{"id":1806,"name":"PoolSwapParams","nameLocations":["17771:14:9"],"nodeType":"IdentifierPath","referencedDeclaration":2755,"src":"17771:14:9"},"referencedDeclaration":2755,"src":"17771:14:9","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2755_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"}],"src":"17739:70:9"},"returnParameters":{"id":1812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1811,"mutability":"mutable","name":"dynamicSwapFeePercentage","nameLocation":"17841:24:9","nodeType":"VariableDeclaration","scope":1813,"src":"17833:32:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1810,"name":"uint256","nodeType":"ElementaryTypeName","src":"17833:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17832:34:9"},"scope":1990,"src":"17699:168:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1814,"nodeType":"StructuredDocumentation","src":"18094:353:9","text":" @notice Checks whether a pool is in Recovery Mode.\n @dev Recovery Mode enables a safe proportional withdrawal path, with no external calls.\n The implementation is in `VaultExtension`.\n @param pool Address of the pool to check\n @return inRecoveryMode True if the pool is in Recovery Mode, false otherwise"},"functionSelector":"be7d628a","id":1821,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolInRecoveryMode","nameLocation":"18461:20:9","nodeType":"FunctionDefinition","parameters":{"id":1817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1816,"mutability":"mutable","name":"pool","nameLocation":"18490:4:9","nodeType":"VariableDeclaration","scope":1821,"src":"18482:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1815,"name":"address","nodeType":"ElementaryTypeName","src":"18482:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18481:14:9"},"returnParameters":{"id":1820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1819,"mutability":"mutable","name":"inRecoveryMode","nameLocation":"18524:14:9","nodeType":"VariableDeclaration","scope":1821,"src":"18519:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1818,"name":"bool","nodeType":"ElementaryTypeName","src":"18519:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"18518:21:9"},"scope":1990,"src":"18452:88:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1822,"nodeType":"StructuredDocumentation","src":"18546:424:9","text":" @notice Enable Recovery Mode for the given pool, when either the pool or the Vault is paused.\n @dev Recovery Mode enables a safe proportional withdrawal path, with no external calls. Note that attempts\n to call this during normal operations will revert. It is only permissionless when paused.\n The implementation is in `VaultAdmin`.\n @param pool Address of the pool to check"},"functionSelector":"dc3f574e","id":1827,"implemented":false,"kind":"function","modifiers":[],"name":"enableRecoveryMode","nameLocation":"18984:18:9","nodeType":"FunctionDefinition","parameters":{"id":1825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1824,"mutability":"mutable","name":"pool","nameLocation":"19011:4:9","nodeType":"VariableDeclaration","scope":1827,"src":"19003:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1823,"name":"address","nodeType":"ElementaryTypeName","src":"19003:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19002:14:9"},"returnParameters":{"id":1826,"nodeType":"ParameterList","parameters":[],"src":"19025:0:9"},"scope":1990,"src":"18975:51:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1828,"nodeType":"StructuredDocumentation","src":"19247:678:9","text":" @notice Checks whether queries are reversibly disabled on the Vault.\n @dev Governance can call `enableQuery` to restore query functionality, unless `disableQueryPermanently` was\n called. The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt\n from settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable\n queries in the unlikely event that EVM changes violate its assumptions (e.g., in a new L2 network).\n The implementation is in `VaultExtension`.\n @return queryDisabled If true, then queries are reversibly disabled"},"functionSelector":"b4aef0ab","id":1833,"implemented":false,"kind":"function","modifiers":[],"name":"isQueryDisabled","nameLocation":"19939:15:9","nodeType":"FunctionDefinition","parameters":{"id":1829,"nodeType":"ParameterList","parameters":[],"src":"19954:2:9"},"returnParameters":{"id":1832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1831,"mutability":"mutable","name":"queryDisabled","nameLocation":"19985:13:9","nodeType":"VariableDeclaration","scope":1833,"src":"19980:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1830,"name":"bool","nodeType":"ElementaryTypeName","src":"19980:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"19979:20:9"},"scope":1990,"src":"19930:70:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1834,"nodeType":"StructuredDocumentation","src":"20006:354:9","text":" @notice Returns true if queries are disabled permanently; false if they are enabled.\n @dev This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\n The implementation is in `VaultExtension`.\n @return queryDisabledPermanently If true, then queries are permanently disabled"},"functionSelector":"13ef8a5d","id":1839,"implemented":false,"kind":"function","modifiers":[],"name":"isQueryDisabledPermanently","nameLocation":"20374:26:9","nodeType":"FunctionDefinition","parameters":{"id":1835,"nodeType":"ParameterList","parameters":[],"src":"20400:2:9"},"returnParameters":{"id":1838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1837,"mutability":"mutable","name":"queryDisabledPermanently","nameLocation":"20431:24:9","nodeType":"VariableDeclaration","scope":1839,"src":"20426:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1836,"name":"bool","nodeType":"ElementaryTypeName","src":"20426:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20425:31:9"},"scope":1990,"src":"20365:92:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1840,"nodeType":"StructuredDocumentation","src":"20678:365:9","text":" @notice Returns the Vault's pause window end time.\n @dev This value is immutable, and represents the timestamp after which the Vault can no longer be paused\n by governance. Balancer timestamps are 32 bits. The implementation is in `VaultAdmin`.\n @return pauseWindowEndTime The timestamp when the Vault's pause window ends"},"functionSelector":"8a8d123a","id":1845,"implemented":false,"kind":"function","modifiers":[],"name":"getPauseWindowEndTime","nameLocation":"21057:21:9","nodeType":"FunctionDefinition","parameters":{"id":1841,"nodeType":"ParameterList","parameters":[],"src":"21078:2:9"},"returnParameters":{"id":1844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1843,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"21111:18:9","nodeType":"VariableDeclaration","scope":1845,"src":"21104:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1842,"name":"uint32","nodeType":"ElementaryTypeName","src":"21104:6:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"21103:27:9"},"scope":1990,"src":"21048:83:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1846,"nodeType":"StructuredDocumentation","src":"21137:453:9","text":" @notice Returns the Vault's buffer period duration.\n @dev This value is immutable. It represents the period during which, if paused, the Vault will remain paused.\n This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer\n timestamps are 32 bits. The implementation is in `VaultAdmin`.\n @return bufferPeriodDuration The length of the buffer period in seconds"},"functionSelector":"20c1fb7a","id":1851,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferPeriodDuration","nameLocation":"21604:23:9","nodeType":"FunctionDefinition","parameters":{"id":1847,"nodeType":"ParameterList","parameters":[],"src":"21627:2:9"},"returnParameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1849,"mutability":"mutable","name":"bufferPeriodDuration","nameLocation":"21660:20:9","nodeType":"VariableDeclaration","scope":1851,"src":"21653:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1848,"name":"uint32","nodeType":"ElementaryTypeName","src":"21653:6:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"21652:29:9"},"scope":1990,"src":"21595:87:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1852,"nodeType":"StructuredDocumentation","src":"21688:360:9","text":" @notice Returns the Vault's buffer period end time.\n @dev This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer\n timestamps are 32 bits. The implementation is in `VaultAdmin`.\n @return bufferPeriodEndTime The timestamp after which the Vault remains permanently unpaused"},"functionSelector":"cd51c12f","id":1857,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferPeriodEndTime","nameLocation":"22062:22:9","nodeType":"FunctionDefinition","parameters":{"id":1853,"nodeType":"ParameterList","parameters":[],"src":"22084:2:9"},"returnParameters":{"id":1856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1855,"mutability":"mutable","name":"bufferPeriodEndTime","nameLocation":"22117:19:9","nodeType":"VariableDeclaration","scope":1857,"src":"22110:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1854,"name":"uint32","nodeType":"ElementaryTypeName","src":"22110:6:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"22109:28:9"},"scope":1990,"src":"22053:85:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1858,"nodeType":"StructuredDocumentation","src":"22144:232:9","text":" @notice Get the minimum number of tokens in a pool.\n @dev We expect the vast majority of pools to be 2-token. The implementation is in `VaultAdmin`.\n @return minTokens The minimum token count of a pool"},"functionSelector":"a8175b27","id":1863,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumPoolTokens","nameLocation":"22390:20:9","nodeType":"FunctionDefinition","parameters":{"id":1859,"nodeType":"ParameterList","parameters":[],"src":"22410:2:9"},"returnParameters":{"id":1862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1861,"mutability":"mutable","name":"minTokens","nameLocation":"22444:9:9","nodeType":"VariableDeclaration","scope":1863,"src":"22436:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1860,"name":"uint256","nodeType":"ElementaryTypeName","src":"22436:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22435:19:9"},"scope":1990,"src":"22381:74:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1864,"nodeType":"StructuredDocumentation","src":"22461:180:9","text":" @notice Get the maximum number of tokens in a pool.\n @dev The implementation is in `VaultAdmin`.\n @return maxTokens The maximum token count of a pool"},"functionSelector":"2e42f4d5","id":1869,"implemented":false,"kind":"function","modifiers":[],"name":"getMaximumPoolTokens","nameLocation":"22655:20:9","nodeType":"FunctionDefinition","parameters":{"id":1865,"nodeType":"ParameterList","parameters":[],"src":"22675:2:9"},"returnParameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1867,"mutability":"mutable","name":"maxTokens","nameLocation":"22709:9:9","nodeType":"VariableDeclaration","scope":1869,"src":"22701:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1866,"name":"uint256","nodeType":"ElementaryTypeName","src":"22701:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22700:19:9"},"scope":1990,"src":"22646:74:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1870,"nodeType":"StructuredDocumentation","src":"22726:485:9","text":" @notice Get the minimum total supply of pool tokens (BPT) for an initialized pool.\n @dev This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT\n is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\n The implementation is in `VaultAdmin`.\n @return poolMinimumTotalSupply The minimum total supply a pool can have after initialization"},"functionSelector":"d0965a6b","id":1875,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolMinimumTotalSupply","nameLocation":"23225:25:9","nodeType":"FunctionDefinition","parameters":{"id":1871,"nodeType":"ParameterList","parameters":[],"src":"23250:2:9"},"returnParameters":{"id":1874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1873,"mutability":"mutable","name":"poolMinimumTotalSupply","nameLocation":"23284:22:9","nodeType":"VariableDeclaration","scope":1875,"src":"23276:30:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1872,"name":"uint256","nodeType":"ElementaryTypeName","src":"23276:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23275:32:9"},"scope":1990,"src":"23216:92:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1876,"nodeType":"StructuredDocumentation","src":"23314:541:9","text":" @notice Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\n @dev This prevents buffers from being completely drained. When the buffer is initialized, this minimum number\n of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal\n to the Vault, as buffers are not tokenized. The implementation is in `VaultAdmin`.\n @return bufferMinimumTotalSupply The minimum total supply a buffer can have after initialization"},"functionSelector":"26a8a991","id":1881,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferMinimumTotalSupply","nameLocation":"23869:27:9","nodeType":"FunctionDefinition","parameters":{"id":1877,"nodeType":"ParameterList","parameters":[],"src":"23896:2:9"},"returnParameters":{"id":1880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1879,"mutability":"mutable","name":"bufferMinimumTotalSupply","nameLocation":"23930:24:9","nodeType":"VariableDeclaration","scope":1881,"src":"23922:32:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1878,"name":"uint256","nodeType":"ElementaryTypeName","src":"23922:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23921:34:9"},"scope":1990,"src":"23860:96:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1882,"nodeType":"StructuredDocumentation","src":"23962:344:9","text":" @notice Get the minimum trade amount in a pool operation.\n @dev This limit is applied to the 18-decimal \"upscaled\" amount in any operation (swap, add/remove liquidity).\n The implementation is in `VaultAdmin`.\n @return minimumTradeAmount The minimum trade amount as an 18-decimal floating point number"},"functionSelector":"e2cb0ba0","id":1887,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumTradeAmount","nameLocation":"24320:21:9","nodeType":"FunctionDefinition","parameters":{"id":1883,"nodeType":"ParameterList","parameters":[],"src":"24341:2:9"},"returnParameters":{"id":1886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1885,"mutability":"mutable","name":"minimumTradeAmount","nameLocation":"24375:18:9","nodeType":"VariableDeclaration","scope":1887,"src":"24367:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1884,"name":"uint256","nodeType":"ElementaryTypeName","src":"24367:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24366:28:9"},"scope":1990,"src":"24311:84:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1888,"nodeType":"StructuredDocumentation","src":"24401:316:9","text":" @notice Get the minimum amount that can be wrapped by an ERC4626 token buffer by the Vault.\n @dev This limit is applied to native decimal values, and guards against rounding errors.\n The implementation is in `VaultAdmin`.\n @return minimumWrapAmount The minimum wrap amount"},"functionSelector":"53956aa2","id":1893,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumWrapAmount","nameLocation":"24731:20:9","nodeType":"FunctionDefinition","parameters":{"id":1889,"nodeType":"ParameterList","parameters":[],"src":"24751:2:9"},"returnParameters":{"id":1892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1891,"mutability":"mutable","name":"minimumWrapAmount","nameLocation":"24785:17:9","nodeType":"VariableDeclaration","scope":1893,"src":"24777:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1890,"name":"uint256","nodeType":"ElementaryTypeName","src":"24777:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24776:27:9"},"scope":1990,"src":"24722:82:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1894,"nodeType":"StructuredDocumentation","src":"25031:270:9","text":" @notice Indicates whether the Vault is paused.\n @dev If the Vault is paused, all non-Recovery Mode state-changing operations will revert.\n The implementation is in `VaultAdmin`.\n @return vaultPaused True if the Vault is paused"},"functionSelector":"098401f5","id":1899,"implemented":false,"kind":"function","modifiers":[],"name":"isVaultPaused","nameLocation":"25315:13:9","nodeType":"FunctionDefinition","parameters":{"id":1895,"nodeType":"ParameterList","parameters":[],"src":"25328:2:9"},"returnParameters":{"id":1898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1897,"mutability":"mutable","name":"vaultPaused","nameLocation":"25359:11:9","nodeType":"VariableDeclaration","scope":1899,"src":"25354:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1896,"name":"bool","nodeType":"ElementaryTypeName","src":"25354:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"25353:18:9"},"scope":1990,"src":"25306:66:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1900,"nodeType":"StructuredDocumentation","src":"25378:439:9","text":" @notice Returns the paused status, and end times of the Vault's pause window and buffer period.\n @dev Balancer timestamps are 32 bits. The implementation is in `VaultAdmin`.\n @return vaultPaused True if the Vault is paused\n @return vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\n @return vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period"},"functionSelector":"85c8c015","id":1909,"implemented":false,"kind":"function","modifiers":[],"name":"getVaultPausedState","nameLocation":"25831:19:9","nodeType":"FunctionDefinition","parameters":{"id":1901,"nodeType":"ParameterList","parameters":[],"src":"25850:2:9"},"returnParameters":{"id":1908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"mutability":"mutable","name":"vaultPaused","nameLocation":"25905:11:9","nodeType":"VariableDeclaration","scope":1909,"src":"25900:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1902,"name":"bool","nodeType":"ElementaryTypeName","src":"25900:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1905,"mutability":"mutable","name":"vaultPauseWindowEndTime","nameLocation":"25925:23:9","nodeType":"VariableDeclaration","scope":1909,"src":"25918:30:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1904,"name":"uint32","nodeType":"ElementaryTypeName","src":"25918:6:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1907,"mutability":"mutable","name":"vaultBufferPeriodEndTime","nameLocation":"25957:24:9","nodeType":"VariableDeclaration","scope":1909,"src":"25950:31:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1906,"name":"uint32","nodeType":"ElementaryTypeName","src":"25950:6:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"25899:83:9"},"scope":1990,"src":"25822:161:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1910,"nodeType":"StructuredDocumentation","src":"26200:855:9","text":" @notice Gets the aggregate swap and yield fee percentages for a pool.\n @dev These are determined by the current protocol and pool creator fees, set in the `ProtocolFeeController`.\n These data are accessible as part of the `PoolConfig` (accessible through `getPoolConfig`), and also through\n the `IPoolInfo` on the pool itself. Standard Balancer pools implement this interface, but custom pools are not\n required to. We add this as a convenience function with the same interface, but it will fetch from the data\n from the Vault (via `VaultExtension`) to ensure it is always supported.\n @param pool Address of the pool\n @return aggregateSwapFeePercentage The aggregate percentage fee applied to swaps\n @return aggregateYieldFeePercentage The aggregate percentage fee applied to yield"},"functionSelector":"295f0540","id":1919,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregateFeePercentages","nameLocation":"27069:26:9","nodeType":"FunctionDefinition","parameters":{"id":1913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1912,"mutability":"mutable","name":"pool","nameLocation":"27113:4:9","nodeType":"VariableDeclaration","scope":1919,"src":"27105:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1911,"name":"address","nodeType":"ElementaryTypeName","src":"27105:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"27095:28:9"},"returnParameters":{"id":1918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1915,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"27155:26:9","nodeType":"VariableDeclaration","scope":1919,"src":"27147:34:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1914,"name":"uint256","nodeType":"ElementaryTypeName","src":"27147:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1917,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"27191:27:9","nodeType":"VariableDeclaration","scope":1919,"src":"27183:35:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1916,"name":"uint256","nodeType":"ElementaryTypeName","src":"27183:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27146:73:9"},"scope":1990,"src":"27060:160:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1920,"nodeType":"StructuredDocumentation","src":"27226:340:9","text":" @notice Collects accumulated aggregate swap and yield fees for the specified pool.\n @dev This function is called on the Vault's ProtocolFeeController, and fees are sent to that contract.\n The implementation is in `VaultAdmin`.\n @param pool The pool on which all aggregate fees should be collected"},"functionSelector":"8f4ab9ca","id":1925,"implemented":false,"kind":"function","modifiers":[],"name":"collectAggregateFees","nameLocation":"27580:20:9","nodeType":"FunctionDefinition","parameters":{"id":1923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1922,"mutability":"mutable","name":"pool","nameLocation":"27609:4:9","nodeType":"VariableDeclaration","scope":1925,"src":"27601:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1921,"name":"address","nodeType":"ElementaryTypeName","src":"27601:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"27600:14:9"},"returnParameters":{"id":1924,"nodeType":"ParameterList","parameters":[],"src":"27623:0:9"},"scope":1990,"src":"27571:53:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1926,"nodeType":"StructuredDocumentation","src":"27851:392:9","text":" @notice Checks whether the wrapped token has an initialized buffer in the Vault.\n @dev An initialized buffer will have an asset registered in the Vault.\n The implementation is in `VaultExtension`.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return isBufferInitialized True if the ERC4626 buffer is initialized"},"functionSelector":"6844846b","id":1934,"implemented":false,"kind":"function","modifiers":[],"name":"isERC4626BufferInitialized","nameLocation":"28257:26:9","nodeType":"FunctionDefinition","parameters":{"id":1930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1929,"mutability":"mutable","name":"wrappedToken","nameLocation":"28293:12:9","nodeType":"VariableDeclaration","scope":1934,"src":"28284:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1928,"nodeType":"UserDefinedTypeName","pathNode":{"id":1927,"name":"IERC4626","nameLocations":["28284:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"28284:8:9"},"referencedDeclaration":3024,"src":"28284:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"28283:23:9"},"returnParameters":{"id":1933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1932,"mutability":"mutable","name":"isBufferInitialized","nameLocation":"28335:19:9","nodeType":"VariableDeclaration","scope":1934,"src":"28330:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1931,"name":"bool","nodeType":"ElementaryTypeName","src":"28330:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28329:26:9"},"scope":1990,"src":"28248:108:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1935,"nodeType":"StructuredDocumentation","src":"28362:344:9","text":" @notice Indicates whether the Vault buffers are paused.\n @dev When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true)\n will revert. This operation is reversible. The implementation is in `VaultAdmin`.\n @return buffersPaused True if the Vault buffers are paused"},"functionSelector":"55cba7fe","id":1940,"implemented":false,"kind":"function","modifiers":[],"name":"areBuffersPaused","nameLocation":"28720:16:9","nodeType":"FunctionDefinition","parameters":{"id":1936,"nodeType":"ParameterList","parameters":[],"src":"28736:2:9"},"returnParameters":{"id":1939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1938,"mutability":"mutable","name":"buffersPaused","nameLocation":"28767:13:9","nodeType":"VariableDeclaration","scope":1940,"src":"28762:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1937,"name":"bool","nodeType":"ElementaryTypeName","src":"28762:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28761:20:9"},"scope":1990,"src":"28711:71:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1941,"nodeType":"StructuredDocumentation","src":"28788:862:9","text":" @notice Returns the asset registered for a given wrapped token.\n @dev The asset can never change after buffer initialization. The implementation is in `VaultExtension`.\n Note that there is a `getBufferAsset` function in `VaultAdmin` that does the exact same thing. Even though it's\n technically redundant, we've included it here in case some users are already using that interface. In the Vault\n Explorer, both functions call `getERC4626BufferAsset`, as the implementation in `VaultExtension` needs one\n fewer hop than that in `VaultAdmin`, so it will use slightly less gas.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return underlyingToken Address of the underlying token registered for the wrapper; `address(0)` if the buffer\n has not been initialized."},"functionSelector":"4afbaf5a","id":1949,"implemented":false,"kind":"function","modifiers":[],"name":"getERC4626BufferAsset","nameLocation":"29664:21:9","nodeType":"FunctionDefinition","parameters":{"id":1945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1944,"mutability":"mutable","name":"wrappedToken","nameLocation":"29695:12:9","nodeType":"VariableDeclaration","scope":1949,"src":"29686:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1943,"nodeType":"UserDefinedTypeName","pathNode":{"id":1942,"name":"IERC4626","nameLocations":["29686:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"29686:8:9"},"referencedDeclaration":3024,"src":"29686:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"29685:23:9"},"returnParameters":{"id":1948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1947,"mutability":"mutable","name":"underlyingToken","nameLocation":"29740:15:9","nodeType":"VariableDeclaration","scope":1949,"src":"29732:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1946,"name":"address","nodeType":"ElementaryTypeName","src":"29732:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"29731:25:9"},"scope":1990,"src":"29655:102:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1950,"nodeType":"StructuredDocumentation","src":"29763:614:9","text":" @notice Returns the asset registered for a given wrapped token.\n @dev The asset can never change after buffer initialization. The implementation would be in `VaultAdmin` when\n called directly from the Vault address, but this implementation calls the equivalent (but slightly cheaper)\n `getERC4626BufferAsset` function in `VaultExtension`.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return underlyingToken Address of the underlying token registered for the wrapper; `address(0)` if the buffer\n has not been initialized."},"functionSelector":"0387587d","id":1958,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferAsset","nameLocation":"30391:14:9","nodeType":"FunctionDefinition","parameters":{"id":1954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1953,"mutability":"mutable","name":"wrappedToken","nameLocation":"30415:12:9","nodeType":"VariableDeclaration","scope":1958,"src":"30406:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1952,"nodeType":"UserDefinedTypeName","pathNode":{"id":1951,"name":"IERC4626","nameLocations":["30406:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"30406:8:9"},"referencedDeclaration":3024,"src":"30406:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"30405:23:9"},"returnParameters":{"id":1957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1956,"mutability":"mutable","name":"underlyingToken","nameLocation":"30460:15:9","nodeType":"VariableDeclaration","scope":1958,"src":"30452:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1955,"name":"address","nodeType":"ElementaryTypeName","src":"30452:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"30451:25:9"},"scope":1990,"src":"30382:95:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1959,"nodeType":"StructuredDocumentation","src":"30483:518:9","text":" @notice Returns the shares (internal buffer BPT) of a liquidity owner.\n @dev The \"liquidity owner\" is the user who deposited assets in the buffer.\n The implementation is in `VaultAdmin`.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param liquidityOwner Address of the user that owns liquidity in the wrapped token's buffer\n @return ownerShares Amount of shares allocated to the liquidity owner, in native underlying token decimals"},"functionSelector":"9385e39a","id":1969,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferOwnerShares","nameLocation":"31015:20:9","nodeType":"FunctionDefinition","parameters":{"id":1965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1962,"mutability":"mutable","name":"wrappedToken","nameLocation":"31054:12:9","nodeType":"VariableDeclaration","scope":1969,"src":"31045:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1961,"nodeType":"UserDefinedTypeName","pathNode":{"id":1960,"name":"IERC4626","nameLocations":["31045:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"31045:8:9"},"referencedDeclaration":3024,"src":"31045:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1964,"mutability":"mutable","name":"liquidityOwner","nameLocation":"31084:14:9","nodeType":"VariableDeclaration","scope":1969,"src":"31076:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1963,"name":"address","nodeType":"ElementaryTypeName","src":"31076:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"31035:69:9"},"returnParameters":{"id":1968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1967,"mutability":"mutable","name":"ownerShares","nameLocation":"31136:11:9","nodeType":"VariableDeclaration","scope":1969,"src":"31128:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1966,"name":"uint256","nodeType":"ElementaryTypeName","src":"31128:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31127:21:9"},"scope":1990,"src":"31006:143:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1970,"nodeType":"StructuredDocumentation","src":"31155:332:9","text":" @notice Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\n @dev The implementation is in `VaultAdmin`.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return bufferShares Amount of supply shares of the buffer, in native underlying token decimals"},"functionSelector":"f2784e07","id":1978,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferTotalShares","nameLocation":"31501:20:9","nodeType":"FunctionDefinition","parameters":{"id":1974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1973,"mutability":"mutable","name":"wrappedToken","nameLocation":"31531:12:9","nodeType":"VariableDeclaration","scope":1978,"src":"31522:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1972,"nodeType":"UserDefinedTypeName","pathNode":{"id":1971,"name":"IERC4626","nameLocations":["31522:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"31522:8:9"},"referencedDeclaration":3024,"src":"31522:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"31521:23:9"},"returnParameters":{"id":1977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1976,"mutability":"mutable","name":"bufferShares","nameLocation":"31576:12:9","nodeType":"VariableDeclaration","scope":1978,"src":"31568:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1975,"name":"uint256","nodeType":"ElementaryTypeName","src":"31568:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31567:22:9"},"scope":1990,"src":"31492:98:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1979,"nodeType":"StructuredDocumentation","src":"31596:483:9","text":" @notice Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\n @dev The implementation is in `VaultAdmin`.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return underlyingBalanceRaw Amount of underlying tokens deposited into the buffer, in native token decimals\n @return wrappedBalanceRaw Amount of wrapped tokens deposited into the buffer, in native token decimals"},"functionSelector":"4021fe0f","id":1989,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferBalance","nameLocation":"32093:16:9","nodeType":"FunctionDefinition","parameters":{"id":1983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1982,"mutability":"mutable","name":"wrappedToken","nameLocation":"32128:12:9","nodeType":"VariableDeclaration","scope":1989,"src":"32119:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":1981,"nodeType":"UserDefinedTypeName","pathNode":{"id":1980,"name":"IERC4626","nameLocations":["32119:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"32119:8:9"},"referencedDeclaration":3024,"src":"32119:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"32109:37:9"},"returnParameters":{"id":1988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1985,"mutability":"mutable","name":"underlyingBalanceRaw","nameLocation":"32178:20:9","nodeType":"VariableDeclaration","scope":1989,"src":"32170:28:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1984,"name":"uint256","nodeType":"ElementaryTypeName","src":"32170:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1987,"mutability":"mutable","name":"wrappedBalanceRaw","nameLocation":"32208:17:9","nodeType":"VariableDeclaration","scope":1989,"src":"32200:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1986,"name":"uint256","nodeType":"ElementaryTypeName","src":"32200:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"32169:57:9"},"scope":1990,"src":"32084:143:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1991,"src":"1195:31034:9","usedErrors":[],"usedEvents":[]}],"src":"46:32184:9"},"id":9},"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol","exportedSymbols":{"AddLiquidityKind":[2790],"AddLiquidityParams":[2806],"AfterSwapParams":[2784],"BufferWrapOrUnwrapParams":[2845],"FEE_BITLENGTH":[2848],"FEE_SCALING_FACTOR":[2851],"HookFlags":[2610],"HooksConfig":[2634],"IAuthorizer":[40],"IERC20":[3102],"IERC4626":[3024],"IHooks":[242],"IProtocolFeeController":[580],"IRateProvider":[24],"IVault":[618],"IVaultExtension":[2409],"LiquidityManagement":[2563],"MAX_FEE_PERCENTAGE":[2854],"PoolConfig":[2588],"PoolConfigBits":[2565],"PoolData":[2712],"PoolRoleAccounts":[2660],"PoolSwapParams":[2755],"RemoveLiquidityKind":[2811],"RemoveLiquidityParams":[2827],"Rounding":[2715],"SwapKind":[2718],"SwapState":[2644],"TokenConfig":[2677],"TokenInfo":[2687],"TokenType":[2664],"VaultState":[2652],"VaultSwapParams":[2737],"WrappingDirection":[2830]},"id":2410,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1992,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:10"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":1994,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2410,"sourceUnit":3025,"src":"72:75:10","symbolAliases":[{"foreign":{"id":1993,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"81:8:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":1996,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2410,"sourceUnit":3103,"src":"148:72:10","symbolAliases":[{"foreign":{"id":1995,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"157:6:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","file":"./IAuthorizer.sol","id":1998,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2410,"sourceUnit":41,"src":"222:48:10","symbolAliases":[{"foreign":{"id":1997,"name":"IAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"231:11:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"./IProtocolFeeController.sol","id":2000,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2410,"sourceUnit":581,"src":"271:70:10","symbolAliases":[{"foreign":{"id":1999,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"280:22:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"./IVault.sol","id":2002,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2410,"sourceUnit":619,"src":"342:38:10","symbolAliases":[{"foreign":{"id":2001,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"351:6:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol","file":"./IHooks.sol","id":2004,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2410,"sourceUnit":243,"src":"381:38:10","symbolAliases":[{"foreign":{"id":2003,"name":"IHooks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"390:6:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":2005,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2410,"sourceUnit":2855,"src":"420:26:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultExtension","contractDependencies":[],"contractKind":"interface","documentation":{"id":2006,"nodeType":"StructuredDocumentation","src":"448:318:10","text":" @notice Interface for functions defined on the `VaultExtension` contract.\n @dev `VaultExtension` handles less critical or frequently used functions, since delegate calls through\n the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and\n liquidity operations."},"fullyImplemented":false,"id":2409,"linearizedBaseContracts":[2409],"name":"IVaultExtension","nameLocation":"777:15:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2007,"nodeType":"StructuredDocumentation","src":"1025:206:10","text":" @notice Returns the main Vault address.\n @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n @return vault The address of the main Vault"},"functionSelector":"fbfa77cf","id":2013,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"1245:5:10","nodeType":"FunctionDefinition","parameters":{"id":2008,"nodeType":"ParameterList","parameters":[],"src":"1250:2:10"},"returnParameters":{"id":2012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2013,"src":"1276:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"},"typeName":{"id":2010,"nodeType":"UserDefinedTypeName","pathNode":{"id":2009,"name":"IVault","nameLocations":["1276:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":618,"src":"1276:6:10"},"referencedDeclaration":618,"src":"1276:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"visibility":"internal"}],"src":"1275:8:10"},"scope":2409,"src":"1236:48:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2014,"nodeType":"StructuredDocumentation","src":"1290:202:10","text":" @notice Returns the VaultAdmin contract address.\n @dev The VaultAdmin contract mostly implements permissioned functions.\n @return vaultAdmin The address of the Vault admin"},"functionSelector":"1ba0ae45","id":2019,"implemented":false,"kind":"function","modifiers":[],"name":"getVaultAdmin","nameLocation":"1506:13:10","nodeType":"FunctionDefinition","parameters":{"id":2015,"nodeType":"ParameterList","parameters":[],"src":"1519:2:10"},"returnParameters":{"id":2018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2017,"mutability":"mutable","name":"vaultAdmin","nameLocation":"1553:10:10","nodeType":"VariableDeclaration","scope":2019,"src":"1545:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2016,"name":"address","nodeType":"ElementaryTypeName","src":"1545:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1544:20:10"},"scope":2409,"src":"1497:68:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2020,"nodeType":"StructuredDocumentation","src":"1793:254:10","text":" @notice Returns whether the Vault is unlocked (i.e., executing an operation).\n @dev The Vault must be unlocked to perform state-changing liquidity operations.\n @return unlocked True if the Vault is unlocked, false otherwise"},"functionSelector":"8380edb7","id":2025,"implemented":false,"kind":"function","modifiers":[],"name":"isUnlocked","nameLocation":"2061:10:10","nodeType":"FunctionDefinition","parameters":{"id":2021,"nodeType":"ParameterList","parameters":[],"src":"2071:2:10"},"returnParameters":{"id":2024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2023,"mutability":"mutable","name":"unlocked","nameLocation":"2102:8:10","nodeType":"VariableDeclaration","scope":2025,"src":"2097:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2022,"name":"bool","nodeType":"ElementaryTypeName","src":"2097:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2096:15:10"},"scope":2409,"src":"2052:60:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2026,"nodeType":"StructuredDocumentation","src":"2118:141:10","text":"  @notice Returns the count of non-zero deltas.\n  @return nonzeroDeltaCount The current value of `_nonzeroDeltaCount`"},"functionSelector":"db817187","id":2031,"implemented":false,"kind":"function","modifiers":[],"name":"getNonzeroDeltaCount","nameLocation":"2273:20:10","nodeType":"FunctionDefinition","parameters":{"id":2027,"nodeType":"ParameterList","parameters":[],"src":"2293:2:10"},"returnParameters":{"id":2030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2029,"mutability":"mutable","name":"nonzeroDeltaCount","nameLocation":"2327:17:10","nodeType":"VariableDeclaration","scope":2031,"src":"2319:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2028,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2318:27:10"},"scope":2409,"src":"2264:82:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2032,"nodeType":"StructuredDocumentation","src":"2352:284:10","text":" @notice Retrieves the token delta for a specific token.\n @dev This function allows reading the value from the `_tokenDeltas` mapping.\n @param token The token for which the delta is being fetched\n @return tokenDelta The delta of the specified token"},"functionSelector":"9e825ff5","id":2040,"implemented":false,"kind":"function","modifiers":[],"name":"getTokenDelta","nameLocation":"2650:13:10","nodeType":"FunctionDefinition","parameters":{"id":2036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"mutability":"mutable","name":"token","nameLocation":"2671:5:10","nodeType":"VariableDeclaration","scope":2040,"src":"2664:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":2034,"nodeType":"UserDefinedTypeName","pathNode":{"id":2033,"name":"IERC20","nameLocations":["2664:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"2664:6:10"},"referencedDeclaration":3102,"src":"2664:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"2663:14:10"},"returnParameters":{"id":2039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2038,"mutability":"mutable","name":"tokenDelta","nameLocation":"2708:10:10","nodeType":"VariableDeclaration","scope":2040,"src":"2701:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2037,"name":"int256","nodeType":"ElementaryTypeName","src":"2701:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2700:19:10"},"scope":2409,"src":"2641:79:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2041,"nodeType":"StructuredDocumentation","src":"2726:230:10","text":" @notice Retrieves the reserve (i.e., total Vault balance) of a given token.\n @param token The token for which to retrieve the reserve\n @return reserveAmount The amount of reserves for the given token"},"functionSelector":"96787092","id":2049,"implemented":false,"kind":"function","modifiers":[],"name":"getReservesOf","nameLocation":"2970:13:10","nodeType":"FunctionDefinition","parameters":{"id":2045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2044,"mutability":"mutable","name":"token","nameLocation":"2991:5:10","nodeType":"VariableDeclaration","scope":2049,"src":"2984:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":2043,"nodeType":"UserDefinedTypeName","pathNode":{"id":2042,"name":"IERC20","nameLocations":["2984:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"2984:6:10"},"referencedDeclaration":3102,"src":"2984:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"2983:14:10"},"returnParameters":{"id":2048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2047,"mutability":"mutable","name":"reserveAmount","nameLocation":"3029:13:10","nodeType":"VariableDeclaration","scope":2049,"src":"3021:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2046,"name":"uint256","nodeType":"ElementaryTypeName","src":"3021:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3020:23:10"},"scope":2409,"src":"2961:83:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2050,"nodeType":"StructuredDocumentation","src":"3050:944:10","text":" @notice This flag is used to detect and tax \"round-trip\" interactions (adding and removing liquidity in the\n same pool).\n @dev Taxing remove liquidity proportional whenever liquidity was added in the same `unlock` call adds an extra\n layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional\n is the only standard way to exit a position without fees, and this flag is used to enable fees in that case.\n It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse\n than a simple swap for every pool type.\n @param pool Address of the pool to check\n @return liquidityAdded True if liquidity has been added to this pool in the current transaction\n Note that there is no `sessionId` argument; it always returns the value for the current (i.e., latest) session."},"functionSelector":"ace9b89b","id":2057,"implemented":false,"kind":"function","modifiers":[],"name":"getAddLiquidityCalledFlag","nameLocation":"4008:25:10","nodeType":"FunctionDefinition","parameters":{"id":2053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2052,"mutability":"mutable","name":"pool","nameLocation":"4042:4:10","nodeType":"VariableDeclaration","scope":2057,"src":"4034:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2051,"name":"address","nodeType":"ElementaryTypeName","src":"4034:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4033:14:10"},"returnParameters":{"id":2056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"liquidityAdded","nameLocation":"4076:14:10","nodeType":"VariableDeclaration","scope":2057,"src":"4071:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2054,"name":"bool","nodeType":"ElementaryTypeName","src":"4071:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4070:21:10"},"scope":2409,"src":"3999:93:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2058,"nodeType":"StructuredDocumentation","src":"4323:1604:10","text":" @notice Registers a pool, associating it with its factory and the tokens it manages.\n @dev A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely\n by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an\n additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused\n pool will automatically unpause. Balancer timestamps are 32 bits.\n A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a\n multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to\n the Vault.\n If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the\n authorizer.\n @param pool The address of the pool being registered\n @param tokenConfig An array of descriptors for the tokens the pool will manage\n @param swapFeePercentage The initial static swap fee percentage of the pool\n @param pauseWindowEndTime The timestamp after which it is no longer possible to pause the pool\n @param protocolFeeExempt If true, the pool's initial aggregate fees will be set to 0\n @param roleAccounts Addresses the Vault will allow to change certain pool settings\n @param poolHooksContract Contract that implements the hooks for the pool\n @param liquidityManagement Liquidity management flags with implemented methods"},"functionSelector":"eeec802f","id":2081,"implemented":false,"kind":"function","modifiers":[],"name":"registerPool","nameLocation":"5941:12:10","nodeType":"FunctionDefinition","parameters":{"id":2079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2060,"mutability":"mutable","name":"pool","nameLocation":"5971:4:10","nodeType":"VariableDeclaration","scope":2081,"src":"5963:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2059,"name":"address","nodeType":"ElementaryTypeName","src":"5963:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2064,"mutability":"mutable","name":"tokenConfig","nameLocation":"6006:11:10","nodeType":"VariableDeclaration","scope":2081,"src":"5985:32:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2677_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenConfig[]"},"typeName":{"baseType":{"id":2062,"nodeType":"UserDefinedTypeName","pathNode":{"id":2061,"name":"TokenConfig","nameLocations":["5985:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":2677,"src":"5985:11:10"},"referencedDeclaration":2677,"src":"5985:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_TokenConfig_$2677_storage_ptr","typeString":"struct TokenConfig"}},"id":2063,"nodeType":"ArrayTypeName","src":"5985:13:10","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2677_storage_$dyn_storage_ptr","typeString":"struct TokenConfig[]"}},"visibility":"internal"},{"constant":false,"id":2066,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"6035:17:10","nodeType":"VariableDeclaration","scope":2081,"src":"6027:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2065,"name":"uint256","nodeType":"ElementaryTypeName","src":"6027:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2068,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"6069:18:10","nodeType":"VariableDeclaration","scope":2081,"src":"6062:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2067,"name":"uint32","nodeType":"ElementaryTypeName","src":"6062:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2070,"mutability":"mutable","name":"protocolFeeExempt","nameLocation":"6102:17:10","nodeType":"VariableDeclaration","scope":2081,"src":"6097:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2069,"name":"bool","nodeType":"ElementaryTypeName","src":"6097:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2073,"mutability":"mutable","name":"roleAccounts","nameLocation":"6155:12:10","nodeType":"VariableDeclaration","scope":2081,"src":"6129:38:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2660_calldata_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":2072,"nodeType":"UserDefinedTypeName","pathNode":{"id":2071,"name":"PoolRoleAccounts","nameLocations":["6129:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":2660,"src":"6129:16:10"},"referencedDeclaration":2660,"src":"6129:16:10","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2660_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"},{"constant":false,"id":2075,"mutability":"mutable","name":"poolHooksContract","nameLocation":"6185:17:10","nodeType":"VariableDeclaration","scope":2081,"src":"6177:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2074,"name":"address","nodeType":"ElementaryTypeName","src":"6177:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2078,"mutability":"mutable","name":"liquidityManagement","nameLocation":"6241:19:10","nodeType":"VariableDeclaration","scope":2081,"src":"6212:48:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2563_calldata_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":2077,"nodeType":"UserDefinedTypeName","pathNode":{"id":2076,"name":"LiquidityManagement","nameLocations":["6212:19:10"],"nodeType":"IdentifierPath","referencedDeclaration":2563,"src":"6212:19:10"},"referencedDeclaration":2563,"src":"6212:19:10","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2563_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"}],"src":"5953:313:10"},"returnParameters":{"id":2080,"nodeType":"ParameterList","parameters":[],"src":"6275:0:10"},"scope":2409,"src":"5932:344:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2082,"nodeType":"StructuredDocumentation","src":"6282:185:10","text":" @notice Checks whether a pool is registered.\n @param pool Address of the pool to check\n @return registered True if the pool is registered, false otherwise"},"functionSelector":"c673bdaf","id":2089,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolRegistered","nameLocation":"6481:16:10","nodeType":"FunctionDefinition","parameters":{"id":2085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2084,"mutability":"mutable","name":"pool","nameLocation":"6506:4:10","nodeType":"VariableDeclaration","scope":2089,"src":"6498:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2083,"name":"address","nodeType":"ElementaryTypeName","src":"6498:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6497:14:10"},"returnParameters":{"id":2088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2087,"mutability":"mutable","name":"registered","nameLocation":"6540:10:10","nodeType":"VariableDeclaration","scope":2089,"src":"6535:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2086,"name":"bool","nodeType":"ElementaryTypeName","src":"6535:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6534:17:10"},"scope":2409,"src":"6472:80:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2090,"nodeType":"StructuredDocumentation","src":"6558:589:10","text":" @notice Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\n @param pool Address of the pool to initialize\n @param to Address that will receive the output BPT\n @param tokens Tokens used to seed the pool (must match the registered tokens)\n @param exactAmountsIn Exact amounts of input tokens\n @param minBptAmountOut Minimum amount of output pool tokens\n @param userData Additional (optional) data required for adding initial liquidity\n @return bptAmountOut Output pool token amount"},"functionSelector":"ba8a2be0","id":2110,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"7161:10:10","nodeType":"FunctionDefinition","parameters":{"id":2106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2092,"mutability":"mutable","name":"pool","nameLocation":"7189:4:10","nodeType":"VariableDeclaration","scope":2110,"src":"7181:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2091,"name":"address","nodeType":"ElementaryTypeName","src":"7181:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2094,"mutability":"mutable","name":"to","nameLocation":"7211:2:10","nodeType":"VariableDeclaration","scope":2110,"src":"7203:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2093,"name":"address","nodeType":"ElementaryTypeName","src":"7203:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2098,"mutability":"mutable","name":"tokens","nameLocation":"7239:6:10","nodeType":"VariableDeclaration","scope":2110,"src":"7223:22:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":2096,"nodeType":"UserDefinedTypeName","pathNode":{"id":2095,"name":"IERC20","nameLocations":["7223:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"7223:6:10"},"referencedDeclaration":3102,"src":"7223:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"id":2097,"nodeType":"ArrayTypeName","src":"7223:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":2101,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"7272:14:10","nodeType":"VariableDeclaration","scope":2110,"src":"7255:31:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2099,"name":"uint256","nodeType":"ElementaryTypeName","src":"7255:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2100,"nodeType":"ArrayTypeName","src":"7255:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2103,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"7304:15:10","nodeType":"VariableDeclaration","scope":2110,"src":"7296:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2102,"name":"uint256","nodeType":"ElementaryTypeName","src":"7296:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2105,"mutability":"mutable","name":"userData","nameLocation":"7342:8:10","nodeType":"VariableDeclaration","scope":2110,"src":"7329:21:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2104,"name":"bytes","nodeType":"ElementaryTypeName","src":"7329:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7171:185:10"},"returnParameters":{"id":2109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2108,"mutability":"mutable","name":"bptAmountOut","nameLocation":"7383:12:10","nodeType":"VariableDeclaration","scope":2110,"src":"7375:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2107,"name":"uint256","nodeType":"ElementaryTypeName","src":"7375:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7374:22:10"},"scope":2409,"src":"7152:245:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2111,"nodeType":"StructuredDocumentation","src":"7627:258:10","text":" @notice Checks whether a pool is initialized.\n @dev An initialized pool can be considered registered as well.\n @param pool Address of the pool to check\n @return initialized True if the pool is initialized, false otherwise"},"functionSelector":"532cec7c","id":2118,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolInitialized","nameLocation":"7899:17:10","nodeType":"FunctionDefinition","parameters":{"id":2114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2113,"mutability":"mutable","name":"pool","nameLocation":"7925:4:10","nodeType":"VariableDeclaration","scope":2118,"src":"7917:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2112,"name":"address","nodeType":"ElementaryTypeName","src":"7917:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7916:14:10"},"returnParameters":{"id":2117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2116,"mutability":"mutable","name":"initialized","nameLocation":"7959:11:10","nodeType":"VariableDeclaration","scope":2118,"src":"7954:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2115,"name":"bool","nodeType":"ElementaryTypeName","src":"7954:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7953:18:10"},"scope":2409,"src":"7890:82:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2119,"nodeType":"StructuredDocumentation","src":"7978:152:10","text":" @notice Gets the tokens registered to a pool.\n @param pool Address of the pool\n @return tokens List of tokens in the pool"},"functionSelector":"ca4f2803","id":2128,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokens","nameLocation":"8144:13:10","nodeType":"FunctionDefinition","parameters":{"id":2122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2121,"mutability":"mutable","name":"pool","nameLocation":"8166:4:10","nodeType":"VariableDeclaration","scope":2128,"src":"8158:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2120,"name":"address","nodeType":"ElementaryTypeName","src":"8158:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8157:14:10"},"returnParameters":{"id":2127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2126,"mutability":"mutable","name":"tokens","nameLocation":"8211:6:10","nodeType":"VariableDeclaration","scope":2128,"src":"8195:22:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":2124,"nodeType":"UserDefinedTypeName","pathNode":{"id":2123,"name":"IERC20","nameLocations":["8195:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"8195:6:10"},"referencedDeclaration":3102,"src":"8195:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"id":2125,"nodeType":"ArrayTypeName","src":"8195:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"8194:24:10"},"scope":2409,"src":"8135:84:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2129,"nodeType":"StructuredDocumentation","src":"8225:512:10","text":" @notice Gets pool token rates.\n @dev This function performs external calls if tokens are yield-bearing. All returned arrays are in token\n registration order.\n @param pool Address of the pool\n @return decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n calculations. FP(1) for 18-decimal tokens\n @return tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens"},"functionSelector":"7e361bde","id":2140,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenRates","nameLocation":"8751:17:10","nodeType":"FunctionDefinition","parameters":{"id":2132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2131,"mutability":"mutable","name":"pool","nameLocation":"8786:4:10","nodeType":"VariableDeclaration","scope":2140,"src":"8778:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2130,"name":"address","nodeType":"ElementaryTypeName","src":"8778:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8768:28:10"},"returnParameters":{"id":2139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2135,"mutability":"mutable","name":"decimalScalingFactors","nameLocation":"8837:21:10","nodeType":"VariableDeclaration","scope":2140,"src":"8820:38:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2133,"name":"uint256","nodeType":"ElementaryTypeName","src":"8820:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2134,"nodeType":"ArrayTypeName","src":"8820:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2138,"mutability":"mutable","name":"tokenRates","nameLocation":"8877:10:10","nodeType":"VariableDeclaration","scope":2140,"src":"8860:27:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2136,"name":"uint256","nodeType":"ElementaryTypeName","src":"8860:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2137,"nodeType":"ArrayTypeName","src":"8860:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"8819:69:10"},"scope":2409,"src":"8742:147:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2141,"nodeType":"StructuredDocumentation","src":"8895:287:10","text":" @notice Returns comprehensive pool data for the given pool.\n @dev This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\n @param pool The address of the pool\n @return poolData The `PoolData` result"},"functionSelector":"13d21cdf","id":2149,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolData","nameLocation":"9196:11:10","nodeType":"FunctionDefinition","parameters":{"id":2144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"pool","nameLocation":"9216:4:10","nodeType":"VariableDeclaration","scope":2149,"src":"9208:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2142,"name":"address","nodeType":"ElementaryTypeName","src":"9208:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9207:14:10"},"returnParameters":{"id":2148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2147,"mutability":"mutable","name":"poolData","nameLocation":"9261:8:10","nodeType":"VariableDeclaration","scope":2149,"src":"9245:24:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$2712_memory_ptr","typeString":"struct PoolData"},"typeName":{"id":2146,"nodeType":"UserDefinedTypeName","pathNode":{"id":2145,"name":"PoolData","nameLocations":["9245:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":2712,"src":"9245:8:10"},"referencedDeclaration":2712,"src":"9245:8:10","typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$2712_storage_ptr","typeString":"struct PoolData"}},"visibility":"internal"}],"src":"9244:26:10"},"scope":2409,"src":"9187:84:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2150,"nodeType":"StructuredDocumentation","src":"9277:531:10","text":" @notice Gets the raw data for a pool: tokens, raw balances, scaling factors.\n @param pool Address of the pool\n @return tokens The pool tokens, sorted in registration order\n @return tokenInfo Token info structs (type, rate provider, yield flag), sorted in token registration order\n @return balancesRaw Current native decimal balances of the pool tokens, sorted in token registration order\n @return lastBalancesLiveScaled18 Last saved live balances, sorted in token registration order"},"functionSelector":"67e0e076","id":2169,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenInfo","nameLocation":"9822:16:10","nodeType":"FunctionDefinition","parameters":{"id":2153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2152,"mutability":"mutable","name":"pool","nameLocation":"9856:4:10","nodeType":"VariableDeclaration","scope":2169,"src":"9848:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2151,"name":"address","nodeType":"ElementaryTypeName","src":"9848:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9838:28:10"},"returnParameters":{"id":2168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2157,"mutability":"mutable","name":"tokens","nameLocation":"9943:6:10","nodeType":"VariableDeclaration","scope":2169,"src":"9927:22:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":2155,"nodeType":"UserDefinedTypeName","pathNode":{"id":2154,"name":"IERC20","nameLocations":["9927:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"9927:6:10"},"referencedDeclaration":3102,"src":"9927:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"id":2156,"nodeType":"ArrayTypeName","src":"9927:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":2161,"mutability":"mutable","name":"tokenInfo","nameLocation":"9982:9:10","nodeType":"VariableDeclaration","scope":2169,"src":"9963:28:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2687_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenInfo[]"},"typeName":{"baseType":{"id":2159,"nodeType":"UserDefinedTypeName","pathNode":{"id":2158,"name":"TokenInfo","nameLocations":["9963:9:10"],"nodeType":"IdentifierPath","referencedDeclaration":2687,"src":"9963:9:10"},"referencedDeclaration":2687,"src":"9963:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_TokenInfo_$2687_storage_ptr","typeString":"struct TokenInfo"}},"id":2160,"nodeType":"ArrayTypeName","src":"9963:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2687_storage_$dyn_storage_ptr","typeString":"struct TokenInfo[]"}},"visibility":"internal"},{"constant":false,"id":2164,"mutability":"mutable","name":"balancesRaw","nameLocation":"10022:11:10","nodeType":"VariableDeclaration","scope":2169,"src":"10005:28:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2162,"name":"uint256","nodeType":"ElementaryTypeName","src":"10005:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2163,"nodeType":"ArrayTypeName","src":"10005:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2167,"mutability":"mutable","name":"lastBalancesLiveScaled18","nameLocation":"10064:24:10","nodeType":"VariableDeclaration","scope":2169,"src":"10047:41:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2165,"name":"uint256","nodeType":"ElementaryTypeName","src":"10047:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2166,"nodeType":"ArrayTypeName","src":"10047:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"9913:185:10"},"scope":2409,"src":"9813:286:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2170,"nodeType":"StructuredDocumentation","src":"10105:312:10","text":" @notice Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in\n registration order.\n @param pool Address of the pool\n @return balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates"},"functionSelector":"535cfd8a","id":2178,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentLiveBalances","nameLocation":"10431:22:10","nodeType":"FunctionDefinition","parameters":{"id":2173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2172,"mutability":"mutable","name":"pool","nameLocation":"10462:4:10","nodeType":"VariableDeclaration","scope":2178,"src":"10454:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2171,"name":"address","nodeType":"ElementaryTypeName","src":"10454:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10453:14:10"},"returnParameters":{"id":2177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2176,"mutability":"mutable","name":"balancesLiveScaled18","nameLocation":"10508:20:10","nodeType":"VariableDeclaration","scope":2178,"src":"10491:37:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2174,"name":"uint256","nodeType":"ElementaryTypeName","src":"10491:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2175,"nodeType":"ArrayTypeName","src":"10491:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10490:39:10"},"scope":2409,"src":"10422:108:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2179,"nodeType":"StructuredDocumentation","src":"10536:301:10","text":" @notice Gets the configuration parameters of a pool.\n @dev The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\n @param pool Address of the pool\n @return poolConfig The pool configuration as a `PoolConfig` struct"},"functionSelector":"f29486a1","id":2187,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolConfig","nameLocation":"10851:13:10","nodeType":"FunctionDefinition","parameters":{"id":2182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2181,"mutability":"mutable","name":"pool","nameLocation":"10873:4:10","nodeType":"VariableDeclaration","scope":2187,"src":"10865:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2180,"name":"address","nodeType":"ElementaryTypeName","src":"10865:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10864:14:10"},"returnParameters":{"id":2186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2185,"mutability":"mutable","name":"poolConfig","nameLocation":"10920:10:10","nodeType":"VariableDeclaration","scope":2187,"src":"10902:28:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2588_memory_ptr","typeString":"struct PoolConfig"},"typeName":{"id":2184,"nodeType":"UserDefinedTypeName","pathNode":{"id":2183,"name":"PoolConfig","nameLocations":["10902:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":2588,"src":"10902:10:10"},"referencedDeclaration":2588,"src":"10902:10:10","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2588_storage_ptr","typeString":"struct PoolConfig"}},"visibility":"internal"}],"src":"10901:30:10"},"scope":2409,"src":"10842:90:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2188,"nodeType":"StructuredDocumentation","src":"10938:283:10","text":" @notice Gets the hooks configuration parameters of a pool.\n @dev The `HooksConfig` contains flags indicating which pool hooks are implemented.\n @param pool Address of the pool\n @return hooksConfig The hooks configuration as a `HooksConfig` struct"},"functionSelector":"ce8630d4","id":2196,"implemented":false,"kind":"function","modifiers":[],"name":"getHooksConfig","nameLocation":"11235:14:10","nodeType":"FunctionDefinition","parameters":{"id":2191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2190,"mutability":"mutable","name":"pool","nameLocation":"11258:4:10","nodeType":"VariableDeclaration","scope":2196,"src":"11250:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2189,"name":"address","nodeType":"ElementaryTypeName","src":"11250:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11249:14:10"},"returnParameters":{"id":2195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2194,"mutability":"mutable","name":"hooksConfig","nameLocation":"11306:11:10","nodeType":"VariableDeclaration","scope":2196,"src":"11287:30:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2634_memory_ptr","typeString":"struct HooksConfig"},"typeName":{"id":2193,"nodeType":"UserDefinedTypeName","pathNode":{"id":2192,"name":"HooksConfig","nameLocations":["11287:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":2634,"src":"11287:11:10"},"referencedDeclaration":2634,"src":"11287:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2634_storage_ptr","typeString":"struct HooksConfig"}},"visibility":"internal"}],"src":"11286:32:10"},"scope":2409,"src":"11226:93:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2197,"nodeType":"StructuredDocumentation","src":"11325:160:10","text":" @notice The current rate of a pool token (BPT) = invariant / totalSupply.\n @param pool Address of the pool\n @return rate BPT rate"},"functionSelector":"4f037ee7","id":2204,"implemented":false,"kind":"function","modifiers":[],"name":"getBptRate","nameLocation":"11499:10:10","nodeType":"FunctionDefinition","parameters":{"id":2200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2199,"mutability":"mutable","name":"pool","nameLocation":"11518:4:10","nodeType":"VariableDeclaration","scope":2204,"src":"11510:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2198,"name":"address","nodeType":"ElementaryTypeName","src":"11510:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11509:14:10"},"returnParameters":{"id":2203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2202,"mutability":"mutable","name":"rate","nameLocation":"11555:4:10","nodeType":"VariableDeclaration","scope":2204,"src":"11547:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2201,"name":"uint256","nodeType":"ElementaryTypeName","src":"11547:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11546:14:10"},"scope":2409,"src":"11490:71:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2205,"nodeType":"StructuredDocumentation","src":"11792:168:10","text":" @notice Gets the total supply of a given ERC20 token.\n @param token The token address\n @return tokenTotalSupply Total supply of the token"},"functionSelector":"e4dc2aa4","id":2212,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"11974:11:10","nodeType":"FunctionDefinition","parameters":{"id":2208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2207,"mutability":"mutable","name":"token","nameLocation":"11994:5:10","nodeType":"VariableDeclaration","scope":2212,"src":"11986:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2206,"name":"address","nodeType":"ElementaryTypeName","src":"11986:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11985:15:10"},"returnParameters":{"id":2211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2210,"mutability":"mutable","name":"tokenTotalSupply","nameLocation":"12032:16:10","nodeType":"VariableDeclaration","scope":2212,"src":"12024:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2209,"name":"uint256","nodeType":"ElementaryTypeName","src":"12024:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12023:26:10"},"scope":2409,"src":"11965:85:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2213,"nodeType":"StructuredDocumentation","src":"12056:225:10","text":" @notice Gets the balance of an account for a given ERC20 token.\n @param token Address of the token\n @param account Address of the account\n @return tokenBalance Token balance of the account"},"functionSelector":"f7888aec","id":2222,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"12295:9:10","nodeType":"FunctionDefinition","parameters":{"id":2218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2215,"mutability":"mutable","name":"token","nameLocation":"12313:5:10","nodeType":"VariableDeclaration","scope":2222,"src":"12305:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2214,"name":"address","nodeType":"ElementaryTypeName","src":"12305:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2217,"mutability":"mutable","name":"account","nameLocation":"12328:7:10","nodeType":"VariableDeclaration","scope":2222,"src":"12320:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2216,"name":"address","nodeType":"ElementaryTypeName","src":"12320:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12304:32:10"},"returnParameters":{"id":2221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2220,"mutability":"mutable","name":"tokenBalance","nameLocation":"12368:12:10","nodeType":"VariableDeclaration","scope":2222,"src":"12360:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2219,"name":"uint256","nodeType":"ElementaryTypeName","src":"12360:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12359:22:10"},"scope":2409,"src":"12286:96:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2223,"nodeType":"StructuredDocumentation","src":"12388:299:10","text":" @notice Gets the allowance of a spender for a given ERC20 token and owner.\n @param token Address of the token\n @param owner Address of the owner\n @param spender Address of the spender\n @return tokenAllowance Amount of tokens the spender is allowed to spend"},"functionSelector":"927da105","id":2234,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"12701:9:10","nodeType":"FunctionDefinition","parameters":{"id":2230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2225,"mutability":"mutable","name":"token","nameLocation":"12719:5:10","nodeType":"VariableDeclaration","scope":2234,"src":"12711:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2224,"name":"address","nodeType":"ElementaryTypeName","src":"12711:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2227,"mutability":"mutable","name":"owner","nameLocation":"12734:5:10","nodeType":"VariableDeclaration","scope":2234,"src":"12726:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2226,"name":"address","nodeType":"ElementaryTypeName","src":"12726:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2229,"mutability":"mutable","name":"spender","nameLocation":"12749:7:10","nodeType":"VariableDeclaration","scope":2234,"src":"12741:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2228,"name":"address","nodeType":"ElementaryTypeName","src":"12741:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12710:47:10"},"returnParameters":{"id":2233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2232,"mutability":"mutable","name":"tokenAllowance","nameLocation":"12789:14:10","nodeType":"VariableDeclaration","scope":2234,"src":"12781:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2231,"name":"uint256","nodeType":"ElementaryTypeName","src":"12781:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12780:24:10"},"scope":2409,"src":"12692:113:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2235,"nodeType":"StructuredDocumentation","src":"12811:475:10","text":" @notice Approves a spender to spend pool tokens on behalf of sender.\n @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n the pool contract, so msg.sender is used as the token address.\n @param owner Address of the owner\n @param spender Address of the spender\n @param amount Amount of tokens to approve\n @return success True if successful, false otherwise"},"functionSelector":"e1f21c67","id":2246,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"13300:7:10","nodeType":"FunctionDefinition","parameters":{"id":2242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2237,"mutability":"mutable","name":"owner","nameLocation":"13316:5:10","nodeType":"VariableDeclaration","scope":2246,"src":"13308:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2236,"name":"address","nodeType":"ElementaryTypeName","src":"13308:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2239,"mutability":"mutable","name":"spender","nameLocation":"13331:7:10","nodeType":"VariableDeclaration","scope":2246,"src":"13323:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2238,"name":"address","nodeType":"ElementaryTypeName","src":"13323:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2241,"mutability":"mutable","name":"amount","nameLocation":"13348:6:10","nodeType":"VariableDeclaration","scope":2246,"src":"13340:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2240,"name":"uint256","nodeType":"ElementaryTypeName","src":"13340:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13307:48:10"},"returnParameters":{"id":2245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2244,"mutability":"mutable","name":"success","nameLocation":"13379:7:10","nodeType":"VariableDeclaration","scope":2246,"src":"13374:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2243,"name":"bool","nodeType":"ElementaryTypeName","src":"13374:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13373:14:10"},"scope":2409,"src":"13291:97:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2247,"nodeType":"StructuredDocumentation","src":"13615:251:10","text":" @notice Indicates whether a pool is paused.\n @dev If a pool is paused, all non-Recovery Mode state-changing operations will revert.\n @param pool The pool to be checked\n @return poolPaused True if the pool is paused"},"functionSelector":"6c9bc732","id":2254,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolPaused","nameLocation":"13880:12:10","nodeType":"FunctionDefinition","parameters":{"id":2250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2249,"mutability":"mutable","name":"pool","nameLocation":"13901:4:10","nodeType":"VariableDeclaration","scope":2254,"src":"13893:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2248,"name":"address","nodeType":"ElementaryTypeName","src":"13893:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13892:14:10"},"returnParameters":{"id":2253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2252,"mutability":"mutable","name":"poolPaused","nameLocation":"13935:10:10","nodeType":"VariableDeclaration","scope":2254,"src":"13930:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2251,"name":"bool","nodeType":"ElementaryTypeName","src":"13930:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13929:17:10"},"scope":2409,"src":"13871:76:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2255,"nodeType":"StructuredDocumentation","src":"13953:648:10","text":" @notice Returns the paused status, and end times of the Pool's pause window and buffer period.\n @dev Note that even when set to a paused state, the pool will automatically unpause at the end of\n the buffer period. Balancer timestamps are 32 bits.\n @param pool The pool whose data is requested\n @return poolPaused True if the Pool is paused\n @return poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\n @return poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\n @return pauseManager The pause manager, or the zero address"},"functionSelector":"15e32046","id":2268,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolPausedState","nameLocation":"14615:18:10","nodeType":"FunctionDefinition","parameters":{"id":2258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2257,"mutability":"mutable","name":"pool","nameLocation":"14651:4:10","nodeType":"VariableDeclaration","scope":2268,"src":"14643:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2256,"name":"address","nodeType":"ElementaryTypeName","src":"14643:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14633:28:10"},"returnParameters":{"id":2267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2260,"mutability":"mutable","name":"poolPaused","nameLocation":"14714:10:10","nodeType":"VariableDeclaration","scope":2268,"src":"14709:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2259,"name":"bool","nodeType":"ElementaryTypeName","src":"14709:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2262,"mutability":"mutable","name":"poolPauseWindowEndTime","nameLocation":"14733:22:10","nodeType":"VariableDeclaration","scope":2268,"src":"14726:29:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2261,"name":"uint32","nodeType":"ElementaryTypeName","src":"14726:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2264,"mutability":"mutable","name":"poolBufferPeriodEndTime","nameLocation":"14764:23:10","nodeType":"VariableDeclaration","scope":2268,"src":"14757:30:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2263,"name":"uint32","nodeType":"ElementaryTypeName","src":"14757:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2266,"mutability":"mutable","name":"pauseManager","nameLocation":"14797:12:10","nodeType":"VariableDeclaration","scope":2268,"src":"14789:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2265,"name":"address","nodeType":"ElementaryTypeName","src":"14789:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14708:102:10"},"scope":2409,"src":"14606:205:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2269,"nodeType":"StructuredDocumentation","src":"15039:332:10","text":" @notice Checks if the wrapped token has an initialized buffer in the Vault.\n @dev An initialized buffer should have an asset registered in the Vault.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return isBufferInitialized True if the ERC4626 buffer is initialized"},"functionSelector":"6844846b","id":2277,"implemented":false,"kind":"function","modifiers":[],"name":"isERC4626BufferInitialized","nameLocation":"15385:26:10","nodeType":"FunctionDefinition","parameters":{"id":2273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2272,"mutability":"mutable","name":"wrappedToken","nameLocation":"15421:12:10","nodeType":"VariableDeclaration","scope":2277,"src":"15412:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":2271,"nodeType":"UserDefinedTypeName","pathNode":{"id":2270,"name":"IERC4626","nameLocations":["15412:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"15412:8:10"},"referencedDeclaration":3024,"src":"15412:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"15411:23:10"},"returnParameters":{"id":2276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2275,"mutability":"mutable","name":"isBufferInitialized","nameLocation":"15463:19:10","nodeType":"VariableDeclaration","scope":2277,"src":"15458:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2274,"name":"bool","nodeType":"ElementaryTypeName","src":"15458:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15457:26:10"},"scope":2409,"src":"15376:108:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2278,"nodeType":"StructuredDocumentation","src":"15490:477:10","text":" @notice Gets the registered asset for a given buffer.\n @dev To avoid malicious wrappers (e.g., that might potentially change their asset after deployment), routers\n should never call `wrapper.asset()` directly, at least without checking it against the asset registered with\n the Vault on initialization.\n @param wrappedToken The wrapped token specifying the buffer\n @return asset The underlying asset of the wrapped token"},"functionSelector":"4afbaf5a","id":2286,"implemented":false,"kind":"function","modifiers":[],"name":"getERC4626BufferAsset","nameLocation":"15981:21:10","nodeType":"FunctionDefinition","parameters":{"id":2282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"mutability":"mutable","name":"wrappedToken","nameLocation":"16012:12:10","nodeType":"VariableDeclaration","scope":2286,"src":"16003:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":2280,"nodeType":"UserDefinedTypeName","pathNode":{"id":2279,"name":"IERC4626","nameLocations":["16003:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"16003:8:10"},"referencedDeclaration":3024,"src":"16003:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"16002:23:10"},"returnParameters":{"id":2285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2284,"mutability":"mutable","name":"asset","nameLocation":"16057:5:10","nodeType":"VariableDeclaration","scope":2286,"src":"16049:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2283,"name":"address","nodeType":"ElementaryTypeName","src":"16049:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16048:15:10"},"scope":2409,"src":"15972:92:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2287,"nodeType":"StructuredDocumentation","src":"16288:379:10","text":" @notice Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\n @param pool The address of the pool for which aggregate fees have been collected\n @param token The address of the token in which fees have been accumulated\n @return swapFeeAmount The total amount of fees accumulated in the specified token"},"functionSelector":"85e0b999","id":2297,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregateSwapFeeAmount","nameLocation":"16681:25:10","nodeType":"FunctionDefinition","parameters":{"id":2293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2289,"mutability":"mutable","name":"pool","nameLocation":"16715:4:10","nodeType":"VariableDeclaration","scope":2297,"src":"16707:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2288,"name":"address","nodeType":"ElementaryTypeName","src":"16707:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2292,"mutability":"mutable","name":"token","nameLocation":"16728:5:10","nodeType":"VariableDeclaration","scope":2297,"src":"16721:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":2291,"nodeType":"UserDefinedTypeName","pathNode":{"id":2290,"name":"IERC20","nameLocations":["16721:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"16721:6:10"},"referencedDeclaration":3102,"src":"16721:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"16706:28:10"},"returnParameters":{"id":2296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2295,"mutability":"mutable","name":"swapFeeAmount","nameLocation":"16766:13:10","nodeType":"VariableDeclaration","scope":2297,"src":"16758:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2294,"name":"uint256","nodeType":"ElementaryTypeName","src":"16758:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16757:23:10"},"scope":2409,"src":"16672:109:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2298,"nodeType":"StructuredDocumentation","src":"16787:381:10","text":" @notice Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\n @param pool The address of the pool for which aggregate fees have been collected\n @param token The address of the token in which fees have been accumulated\n @return yieldFeeAmount The total amount of fees accumulated in the specified token"},"functionSelector":"00fdfa13","id":2308,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregateYieldFeeAmount","nameLocation":"17182:26:10","nodeType":"FunctionDefinition","parameters":{"id":2304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2300,"mutability":"mutable","name":"pool","nameLocation":"17217:4:10","nodeType":"VariableDeclaration","scope":2308,"src":"17209:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2299,"name":"address","nodeType":"ElementaryTypeName","src":"17209:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2303,"mutability":"mutable","name":"token","nameLocation":"17230:5:10","nodeType":"VariableDeclaration","scope":2308,"src":"17223:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":2302,"nodeType":"UserDefinedTypeName","pathNode":{"id":2301,"name":"IERC20","nameLocations":["17223:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"17223:6:10"},"referencedDeclaration":3102,"src":"17223:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"17208:28:10"},"returnParameters":{"id":2307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2306,"mutability":"mutable","name":"yieldFeeAmount","nameLocation":"17268:14:10","nodeType":"VariableDeclaration","scope":2308,"src":"17260:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2305,"name":"uint256","nodeType":"ElementaryTypeName","src":"17260:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17259:24:10"},"scope":2409,"src":"17173:111:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2309,"nodeType":"StructuredDocumentation","src":"17290:271:10","text":" @notice Fetches the static swap fee percentage for a given pool.\n @param pool The address of the pool whose static swap fee percentage is being queried\n @return swapFeePercentage The current static swap fee percentage for the specified pool"},"functionSelector":"b45090f9","id":2316,"implemented":false,"kind":"function","modifiers":[],"name":"getStaticSwapFeePercentage","nameLocation":"17575:26:10","nodeType":"FunctionDefinition","parameters":{"id":2312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2311,"mutability":"mutable","name":"pool","nameLocation":"17610:4:10","nodeType":"VariableDeclaration","scope":2316,"src":"17602:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2310,"name":"address","nodeType":"ElementaryTypeName","src":"17602:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17601:14:10"},"returnParameters":{"id":2315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2314,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"17647:17:10","nodeType":"VariableDeclaration","scope":2316,"src":"17639:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2313,"name":"uint256","nodeType":"ElementaryTypeName","src":"17639:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17638:27:10"},"scope":2409,"src":"17566:100:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2317,"nodeType":"StructuredDocumentation","src":"17672:286:10","text":" @notice Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\n @param pool The address of the pool whose roles are being queried\n @return roleAccounts A struct containing the role accounts for the pool (or 0 if unassigned)"},"functionSelector":"e9ddeb26","id":2325,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolRoleAccounts","nameLocation":"17972:19:10","nodeType":"FunctionDefinition","parameters":{"id":2320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2319,"mutability":"mutable","name":"pool","nameLocation":"18000:4:10","nodeType":"VariableDeclaration","scope":2325,"src":"17992:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2318,"name":"address","nodeType":"ElementaryTypeName","src":"17992:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17991:14:10"},"returnParameters":{"id":2324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"roleAccounts","nameLocation":"18053:12:10","nodeType":"VariableDeclaration","scope":2325,"src":"18029:36:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2660_memory_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":2322,"nodeType":"UserDefinedTypeName","pathNode":{"id":2321,"name":"PoolRoleAccounts","nameLocations":["18029:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":2660,"src":"18029:16:10"},"referencedDeclaration":2660,"src":"18029:16:10","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2660_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"}],"src":"18028:38:10"},"scope":2409,"src":"17963:104:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2326,"nodeType":"StructuredDocumentation","src":"18073:363:10","text":" @notice Query the current dynamic swap fee percentage of a pool, given a set of swap parameters.\n @dev Reverts if the hook doesn't return the success flag set to `true`.\n @param pool The pool\n @param swapParams The swap parameters used to compute the fee\n @return dynamicSwapFeePercentage The dynamic swap fee percentage"},"functionSelector":"4d472bdd","id":2336,"implemented":false,"kind":"function","modifiers":[],"name":"computeDynamicSwapFeePercentage","nameLocation":"18450:31:10","nodeType":"FunctionDefinition","parameters":{"id":2332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2328,"mutability":"mutable","name":"pool","nameLocation":"18499:4:10","nodeType":"VariableDeclaration","scope":2336,"src":"18491:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2327,"name":"address","nodeType":"ElementaryTypeName","src":"18491:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2331,"mutability":"mutable","name":"swapParams","nameLocation":"18535:10:10","nodeType":"VariableDeclaration","scope":2336,"src":"18513:32:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2755_memory_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":2330,"nodeType":"UserDefinedTypeName","pathNode":{"id":2329,"name":"PoolSwapParams","nameLocations":["18513:14:10"],"nodeType":"IdentifierPath","referencedDeclaration":2755,"src":"18513:14:10"},"referencedDeclaration":2755,"src":"18513:14:10","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2755_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"}],"src":"18481:70:10"},"returnParameters":{"id":2335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2334,"mutability":"mutable","name":"dynamicSwapFeePercentage","nameLocation":"18583:24:10","nodeType":"VariableDeclaration","scope":2336,"src":"18575:32:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2333,"name":"uint256","nodeType":"ElementaryTypeName","src":"18575:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18574:34:10"},"scope":2409,"src":"18441:168:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2337,"nodeType":"StructuredDocumentation","src":"18615:145:10","text":" @notice Returns the Protocol Fee Controller address.\n @return protocolFeeController Address of the ProtocolFeeController"},"functionSelector":"85f2dbd4","id":2343,"implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeeController","nameLocation":"18774:24:10","nodeType":"FunctionDefinition","parameters":{"id":2338,"nodeType":"ParameterList","parameters":[],"src":"18798:2:10"},"returnParameters":{"id":2342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2341,"mutability":"mutable","name":"protocolFeeController","nameLocation":"18847:21:10","nodeType":"VariableDeclaration","scope":2343,"src":"18824:44:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$580","typeString":"contract IProtocolFeeController"},"typeName":{"id":2340,"nodeType":"UserDefinedTypeName","pathNode":{"id":2339,"name":"IProtocolFeeController","nameLocations":["18824:22:10"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"18824:22:10"},"referencedDeclaration":580,"src":"18824:22:10","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$580","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"src":"18823:46:10"},"scope":2409,"src":"18765:105:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2344,"nodeType":"StructuredDocumentation","src":"19098:296:10","text":" @notice Checks whether a pool is in Recovery Mode.\n @dev Recovery Mode enables a safe proportional withdrawal path, with no external calls.\n @param pool Address of the pool to check\n @return inRecoveryMode True if the pool is in Recovery Mode, false otherwise"},"functionSelector":"be7d628a","id":2351,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolInRecoveryMode","nameLocation":"19408:20:10","nodeType":"FunctionDefinition","parameters":{"id":2347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2346,"mutability":"mutable","name":"pool","nameLocation":"19437:4:10","nodeType":"VariableDeclaration","scope":2351,"src":"19429:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2345,"name":"address","nodeType":"ElementaryTypeName","src":"19429:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19428:14:10"},"returnParameters":{"id":2350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2349,"mutability":"mutable","name":"inRecoveryMode","nameLocation":"19471:14:10","nodeType":"VariableDeclaration","scope":2351,"src":"19466:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2348,"name":"bool","nodeType":"ElementaryTypeName","src":"19466:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"19465:21:10"},"scope":2409,"src":"19399:88:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2352,"nodeType":"StructuredDocumentation","src":"19493:679:10","text":" @notice Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out.\n The request is implemented by the Vault without any interaction with the pool, ensuring that\n it works the same for all pools, and cannot be disabled by a new pool type.\n @param pool Address of the pool\n @param from Address of user to burn pool tokens from\n @param exactBptAmountIn Input pool token amount\n @param minAmountsOut Minimum amounts of tokens to be received, sorted in token registration order\n @return amountsOut Actual calculated amounts of output tokens, sorted in token registration order"},"functionSelector":"a07d6040","id":2367,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityRecovery","nameLocation":"20186:23:10","nodeType":"FunctionDefinition","parameters":{"id":2362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2354,"mutability":"mutable","name":"pool","nameLocation":"20227:4:10","nodeType":"VariableDeclaration","scope":2367,"src":"20219:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2353,"name":"address","nodeType":"ElementaryTypeName","src":"20219:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2356,"mutability":"mutable","name":"from","nameLocation":"20249:4:10","nodeType":"VariableDeclaration","scope":2367,"src":"20241:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2355,"name":"address","nodeType":"ElementaryTypeName","src":"20241:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2358,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"20271:16:10","nodeType":"VariableDeclaration","scope":2367,"src":"20263:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2357,"name":"uint256","nodeType":"ElementaryTypeName","src":"20263:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2361,"mutability":"mutable","name":"minAmountsOut","nameLocation":"20314:13:10","nodeType":"VariableDeclaration","scope":2367,"src":"20297:30:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2359,"name":"uint256","nodeType":"ElementaryTypeName","src":"20297:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2360,"nodeType":"ArrayTypeName","src":"20297:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"20209:124:10"},"returnParameters":{"id":2366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2365,"mutability":"mutable","name":"amountsOut","nameLocation":"20369:10:10","nodeType":"VariableDeclaration","scope":2367,"src":"20352:27:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2363,"name":"uint256","nodeType":"ElementaryTypeName","src":"20352:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2364,"nodeType":"ArrayTypeName","src":"20352:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"20351:29:10"},"scope":2409,"src":"20177:204:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2368,"nodeType":"StructuredDocumentation","src":"20602:699:10","text":" @notice Performs a callback on msg.sender with arguments provided in `data`.\n @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\n anything else will revert.\n Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier.\n Allows the external calling of a function via the Vault contract to\n access Vault's functions guarded by `onlyWhenUnlocked`.\n `transient` modifier ensuring balances changes within the Vault are settled.\n @param data Contains function signature and args to be passed to the msg.sender\n @return result Resulting data from the call"},"functionSelector":"edfa3568","id":2375,"implemented":false,"kind":"function","modifiers":[],"name":"quote","nameLocation":"21315:5:10","nodeType":"FunctionDefinition","parameters":{"id":2371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2370,"mutability":"mutable","name":"data","nameLocation":"21336:4:10","nodeType":"VariableDeclaration","scope":2375,"src":"21321:19:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2369,"name":"bytes","nodeType":"ElementaryTypeName","src":"21321:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21320:21:10"},"returnParameters":{"id":2374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2373,"mutability":"mutable","name":"result","nameLocation":"21373:6:10","nodeType":"VariableDeclaration","scope":2375,"src":"21360:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2372,"name":"bytes","nodeType":"ElementaryTypeName","src":"21360:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21359:21:10"},"scope":2409,"src":"21306:75:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2376,"nodeType":"StructuredDocumentation","src":"21387:731:10","text":" @notice Performs a callback on msg.sender with arguments provided in `data`.\n @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\n anything else will revert.\n Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier.\n Allows the external calling of a function via the Vault contract to\n access Vault's functions guarded by `onlyWhenUnlocked`.\n `transient` modifier ensuring balances changes within the Vault are settled.\n This call always reverts, returning the result in the revert reason.\n @param data Contains function signature and args to be passed to the msg.sender"},"functionSelector":"757d64b3","id":2381,"implemented":false,"kind":"function","modifiers":[],"name":"quoteAndRevert","nameLocation":"22132:14:10","nodeType":"FunctionDefinition","parameters":{"id":2379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2378,"mutability":"mutable","name":"data","nameLocation":"22162:4:10","nodeType":"VariableDeclaration","scope":2381,"src":"22147:19:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2377,"name":"bytes","nodeType":"ElementaryTypeName","src":"22147:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"22146:21:10"},"returnParameters":{"id":2380,"nodeType":"ParameterList","parameters":[],"src":"22176:0:10"},"scope":2409,"src":"22123:54:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2382,"nodeType":"StructuredDocumentation","src":"22183:239:10","text":" @notice Returns true if queries are disabled on the Vault.\n @dev If true, queries might either be disabled temporarily or permanently.\n @return queryDisabled True if query functionality is reversibly disabled"},"functionSelector":"b4aef0ab","id":2387,"implemented":false,"kind":"function","modifiers":[],"name":"isQueryDisabled","nameLocation":"22436:15:10","nodeType":"FunctionDefinition","parameters":{"id":2383,"nodeType":"ParameterList","parameters":[],"src":"22451:2:10"},"returnParameters":{"id":2386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2385,"mutability":"mutable","name":"queryDisabled","nameLocation":"22482:13:10","nodeType":"VariableDeclaration","scope":2387,"src":"22477:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2384,"name":"bool","nodeType":"ElementaryTypeName","src":"22477:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"22476:20:10"},"scope":2409,"src":"22427:70:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2388,"nodeType":"StructuredDocumentation","src":"22503:302:10","text":" @notice Returns true if queries are disabled permanently; false if they are enabled.\n @dev This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\n @return queryDisabledPermanently True if query functionality is permanently disabled"},"functionSelector":"13ef8a5d","id":2393,"implemented":false,"kind":"function","modifiers":[],"name":"isQueryDisabledPermanently","nameLocation":"22819:26:10","nodeType":"FunctionDefinition","parameters":{"id":2389,"nodeType":"ParameterList","parameters":[],"src":"22845:2:10"},"returnParameters":{"id":2392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2391,"mutability":"mutable","name":"queryDisabledPermanently","nameLocation":"22876:24:10","nodeType":"VariableDeclaration","scope":2393,"src":"22871:29:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2390,"name":"bool","nodeType":"ElementaryTypeName","src":"22871:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"22870:31:10"},"scope":2409,"src":"22810:92:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2394,"nodeType":"StructuredDocumentation","src":"22908:162:10","text":" @notice Pools can use this event to emit event data from the Vault.\n @param eventKey Event key\n @param eventData Encoded event data"},"functionSelector":"c8088247","id":2401,"implemented":false,"kind":"function","modifiers":[],"name":"emitAuxiliaryEvent","nameLocation":"23084:18:10","nodeType":"FunctionDefinition","parameters":{"id":2399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2396,"mutability":"mutable","name":"eventKey","nameLocation":"23111:8:10","nodeType":"VariableDeclaration","scope":2401,"src":"23103:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2395,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23103:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2398,"mutability":"mutable","name":"eventData","nameLocation":"23136:9:10","nodeType":"VariableDeclaration","scope":2401,"src":"23121:24:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2397,"name":"bytes","nodeType":"ElementaryTypeName","src":"23121:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"23102:44:10"},"returnParameters":{"id":2400,"nodeType":"ParameterList","parameters":[],"src":"23155:0:10"},"scope":2409,"src":"23075:81:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2402,"nodeType":"StructuredDocumentation","src":"23380:284:10","text":" @notice Returns the Authorizer address.\n @dev The authorizer holds the permissions granted by governance. It is set on Vault deployment,\n and can be changed through a permissioned call.\n @return authorizer Address of the authorizer contract"},"functionSelector":"aaabadc5","id":2408,"implemented":false,"kind":"function","modifiers":[],"name":"getAuthorizer","nameLocation":"23678:13:10","nodeType":"FunctionDefinition","parameters":{"id":2403,"nodeType":"ParameterList","parameters":[],"src":"23691:2:10"},"returnParameters":{"id":2407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2406,"mutability":"mutable","name":"authorizer","nameLocation":"23729:10:10","nodeType":"VariableDeclaration","scope":2408,"src":"23717:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$40","typeString":"contract IAuthorizer"},"typeName":{"id":2405,"nodeType":"UserDefinedTypeName","pathNode":{"id":2404,"name":"IAuthorizer","nameLocations":["23717:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"23717:11:10"},"referencedDeclaration":40,"src":"23717:11:10","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$40","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"23716:24:10"},"scope":2409,"src":"23669:72:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2410,"src":"767:22976:10","usedErrors":[],"usedEvents":[]}],"src":"46:23698:10"},"id":10},"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol","exportedSymbols":{"AddLiquidityKind":[2790],"AddLiquidityParams":[2806],"AfterSwapParams":[2784],"BufferWrapOrUnwrapParams":[2845],"FEE_BITLENGTH":[2848],"FEE_SCALING_FACTOR":[2851],"HookFlags":[2610],"HooksConfig":[2634],"IERC20":[3102],"IERC4626":[3024],"IRateProvider":[24],"IVaultMain":[2545],"LiquidityManagement":[2563],"MAX_FEE_PERCENTAGE":[2854],"PoolConfig":[2588],"PoolConfigBits":[2565],"PoolData":[2712],"PoolRoleAccounts":[2660],"PoolSwapParams":[2755],"RemoveLiquidityKind":[2811],"RemoveLiquidityParams":[2827],"Rounding":[2715],"SwapKind":[2718],"SwapState":[2644],"TokenConfig":[2677],"TokenInfo":[2687],"TokenType":[2664],"VaultState":[2652],"VaultSwapParams":[2737],"WrappingDirection":[2830]},"id":2546,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2411,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:11"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2413,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2546,"sourceUnit":3103,"src":"72:72:11","symbolAliases":[{"foreign":{"id":2412,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"81:6:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":2414,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2546,"sourceUnit":2855,"src":"146:26:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultMain","contractDependencies":[],"contractKind":"interface","documentation":{"id":2415,"nodeType":"StructuredDocumentation","src":"174:232:11","text":" @notice Interface for functions defined on the main Vault contract.\n @dev These are generally \"critical path\" functions (swap, add/remove liquidity) that are in the main contract\n for technical or performance reasons."},"fullyImplemented":false,"id":2545,"linearizedBaseContracts":[2545],"name":"IVaultMain","nameLocation":"417:10:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2416,"nodeType":"StructuredDocumentation","src":"656:431:11","text":" @notice Creates a context for a sequence of operations (i.e., \"unlocks\" the Vault).\n @dev Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`,\n meaning all balances for the caller have to be settled at the end.\n @param data Contains function signature and args to be passed to the msg.sender\n @return result Resulting data from the call"},"functionSelector":"48c89491","id":2423,"implemented":false,"kind":"function","modifiers":[],"name":"unlock","nameLocation":"1101:6:11","nodeType":"FunctionDefinition","parameters":{"id":2419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2418,"mutability":"mutable","name":"data","nameLocation":"1123:4:11","nodeType":"VariableDeclaration","scope":2423,"src":"1108:19:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2417,"name":"bytes","nodeType":"ElementaryTypeName","src":"1108:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1107:21:11"},"returnParameters":{"id":2422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2421,"mutability":"mutable","name":"result","nameLocation":"1160:6:11","nodeType":"VariableDeclaration","scope":2423,"src":"1147:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2420,"name":"bytes","nodeType":"ElementaryTypeName","src":"1147:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1146:21:11"},"scope":2545,"src":"1092:76:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2424,"nodeType":"StructuredDocumentation","src":"1174:1291:11","text":" @notice Settles deltas for a token; must be successful for the current lock to be released.\n @dev Protects the caller against leftover dust in the Vault for the token being settled. The caller\n should know in advance how many tokens were paid to the Vault, so it can provide it as a hint to discard any\n excess in the Vault balance.\n If the given hint is equal to or higher than the difference in reserves, the difference in reserves is given as\n credit to the caller. If it's higher, the caller sent fewer tokens than expected, so settlement would fail.\n If the given hint is lower than the difference in reserves, the hint is given as credit to the caller.\n In this case, the excess would be absorbed by the Vault (and reflected correctly in the reserves), but would\n not affect settlement.\n The credit supplied by the Vault can be calculated as `min(reserveDifference, amountHint)`, where the reserve\n difference equals current balance of the token minus existing reserves of the token when the function is called.\n @param token Address of the token\n @param amountHint Amount paid as reported by the caller\n @return credit Credit received in return of the payment"},"functionSelector":"15afd409","id":2434,"implemented":false,"kind":"function","modifiers":[],"name":"settle","nameLocation":"2479:6:11","nodeType":"FunctionDefinition","parameters":{"id":2430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2427,"mutability":"mutable","name":"token","nameLocation":"2493:5:11","nodeType":"VariableDeclaration","scope":2434,"src":"2486:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":2426,"nodeType":"UserDefinedTypeName","pathNode":{"id":2425,"name":"IERC20","nameLocations":["2486:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"2486:6:11"},"referencedDeclaration":3102,"src":"2486:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2429,"mutability":"mutable","name":"amountHint","nameLocation":"2508:10:11","nodeType":"VariableDeclaration","scope":2434,"src":"2500:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2428,"name":"uint256","nodeType":"ElementaryTypeName","src":"2500:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2485:34:11"},"returnParameters":{"id":2433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2432,"mutability":"mutable","name":"credit","nameLocation":"2546:6:11","nodeType":"VariableDeclaration","scope":2434,"src":"2538:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2431,"name":"uint256","nodeType":"ElementaryTypeName","src":"2538:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2537:16:11"},"scope":2545,"src":"2470:84:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2435,"nodeType":"StructuredDocumentation","src":"2560:315:11","text":" @notice Sends tokens to a recipient.\n @dev There is no inverse operation for this function. Transfer funds to the Vault and call `settle` to cancel\n debts.\n @param token Address of the token\n @param to Recipient address\n @param amount Amount of tokens to send"},"functionSelector":"ae639329","id":2445,"implemented":false,"kind":"function","modifiers":[],"name":"sendTo","nameLocation":"2889:6:11","nodeType":"FunctionDefinition","parameters":{"id":2443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2438,"mutability":"mutable","name":"token","nameLocation":"2903:5:11","nodeType":"VariableDeclaration","scope":2445,"src":"2896:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":2437,"nodeType":"UserDefinedTypeName","pathNode":{"id":2436,"name":"IERC20","nameLocations":["2896:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"2896:6:11"},"referencedDeclaration":3102,"src":"2896:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2440,"mutability":"mutable","name":"to","nameLocation":"2918:2:11","nodeType":"VariableDeclaration","scope":2445,"src":"2910:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2439,"name":"address","nodeType":"ElementaryTypeName","src":"2910:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2442,"mutability":"mutable","name":"amount","nameLocation":"2930:6:11","nodeType":"VariableDeclaration","scope":2445,"src":"2922:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2441,"name":"uint256","nodeType":"ElementaryTypeName","src":"2922:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2895:42:11"},"returnParameters":{"id":2444,"nodeType":"ParameterList","parameters":[],"src":"2946:0:11"},"scope":2545,"src":"2880:67:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2446,"nodeType":"StructuredDocumentation","src":"3161:412:11","text":" @notice Swaps tokens based on provided parameters.\n @dev All parameters are given in raw token decimal encoding.\n @param vaultSwapParams Parameters for the swap (see above for struct definition)\n @return amountCalculatedRaw Calculated swap amount\n @return amountInRaw Amount of input tokens for the swap\n @return amountOutRaw Amount of output tokens from the swap"},"functionSelector":"2bfb780c","id":2458,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"3587:4:11","nodeType":"FunctionDefinition","parameters":{"id":2450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2449,"mutability":"mutable","name":"vaultSwapParams","nameLocation":"3624:15:11","nodeType":"VariableDeclaration","scope":2458,"src":"3601:38:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_VaultSwapParams_$2737_memory_ptr","typeString":"struct VaultSwapParams"},"typeName":{"id":2448,"nodeType":"UserDefinedTypeName","pathNode":{"id":2447,"name":"VaultSwapParams","nameLocations":["3601:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":2737,"src":"3601:15:11"},"referencedDeclaration":2737,"src":"3601:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_VaultSwapParams_$2737_storage_ptr","typeString":"struct VaultSwapParams"}},"visibility":"internal"}],"src":"3591:54:11"},"returnParameters":{"id":2457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2452,"mutability":"mutable","name":"amountCalculatedRaw","nameLocation":"3672:19:11","nodeType":"VariableDeclaration","scope":2458,"src":"3664:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2451,"name":"uint256","nodeType":"ElementaryTypeName","src":"3664:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2454,"mutability":"mutable","name":"amountInRaw","nameLocation":"3701:11:11","nodeType":"VariableDeclaration","scope":2458,"src":"3693:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2453,"name":"uint256","nodeType":"ElementaryTypeName","src":"3693:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2456,"mutability":"mutable","name":"amountOutRaw","nameLocation":"3722:12:11","nodeType":"VariableDeclaration","scope":2458,"src":"3714:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2455,"name":"uint256","nodeType":"ElementaryTypeName","src":"3714:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3663:72:11"},"scope":2545,"src":"3578:158:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2459,"nodeType":"StructuredDocumentation","src":"3954:523:11","text":" @notice Adds liquidity to a pool.\n @dev Caution should be exercised when adding liquidity because the Vault has the capability\n to transfer tokens from any user, given that it holds all allowances.\n @param params Parameters for the add liquidity (see above for struct definition)\n @return amountsIn Actual amounts of input tokens\n @return bptAmountOut Output pool token amount\n @return returnData Arbitrary (optional) data with an encoded response from the pool"},"functionSelector":"4af29ec4","id":2472,"implemented":false,"kind":"function","modifiers":[],"name":"addLiquidity","nameLocation":"4491:12:11","nodeType":"FunctionDefinition","parameters":{"id":2463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2462,"mutability":"mutable","name":"params","nameLocation":"4539:6:11","nodeType":"VariableDeclaration","scope":2472,"src":"4513:32:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_AddLiquidityParams_$2806_memory_ptr","typeString":"struct AddLiquidityParams"},"typeName":{"id":2461,"nodeType":"UserDefinedTypeName","pathNode":{"id":2460,"name":"AddLiquidityParams","nameLocations":["4513:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":2806,"src":"4513:18:11"},"referencedDeclaration":2806,"src":"4513:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_AddLiquidityParams_$2806_storage_ptr","typeString":"struct AddLiquidityParams"}},"visibility":"internal"}],"src":"4503:48:11"},"returnParameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2466,"mutability":"mutable","name":"amountsIn","nameLocation":"4587:9:11","nodeType":"VariableDeclaration","scope":2472,"src":"4570:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2464,"name":"uint256","nodeType":"ElementaryTypeName","src":"4570:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2465,"nodeType":"ArrayTypeName","src":"4570:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2468,"mutability":"mutable","name":"bptAmountOut","nameLocation":"4606:12:11","nodeType":"VariableDeclaration","scope":2472,"src":"4598:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2467,"name":"uint256","nodeType":"ElementaryTypeName","src":"4598:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2470,"mutability":"mutable","name":"returnData","nameLocation":"4633:10:11","nodeType":"VariableDeclaration","scope":2472,"src":"4620:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2469,"name":"bytes","nodeType":"ElementaryTypeName","src":"4620:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4569:75:11"},"scope":2545,"src":"4482:163:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2473,"nodeType":"StructuredDocumentation","src":"4864:644:11","text":" @notice Removes liquidity from a pool.\n @dev Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user.\n Untrusted routers require prior approval from the user. This is the only function allowed to call\n _queryModeBalanceIncrease (and only in a query context).\n @param params Parameters for the remove liquidity (see above for struct definition)\n @return bptAmountIn Actual amount of BPT burned\n @return amountsOut Actual amounts of output tokens\n @return returnData Arbitrary (optional) data with an encoded response from the pool"},"functionSelector":"21457897","id":2486,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidity","nameLocation":"5522:15:11","nodeType":"FunctionDefinition","parameters":{"id":2477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2476,"mutability":"mutable","name":"params","nameLocation":"5576:6:11","nodeType":"VariableDeclaration","scope":2486,"src":"5547:35:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RemoveLiquidityParams_$2827_memory_ptr","typeString":"struct RemoveLiquidityParams"},"typeName":{"id":2475,"nodeType":"UserDefinedTypeName","pathNode":{"id":2474,"name":"RemoveLiquidityParams","nameLocations":["5547:21:11"],"nodeType":"IdentifierPath","referencedDeclaration":2827,"src":"5547:21:11"},"referencedDeclaration":2827,"src":"5547:21:11","typeDescriptions":{"typeIdentifier":"t_struct$_RemoveLiquidityParams_$2827_storage_ptr","typeString":"struct RemoveLiquidityParams"}},"visibility":"internal"}],"src":"5537:51:11"},"returnParameters":{"id":2485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2479,"mutability":"mutable","name":"bptAmountIn","nameLocation":"5615:11:11","nodeType":"VariableDeclaration","scope":2486,"src":"5607:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2478,"name":"uint256","nodeType":"ElementaryTypeName","src":"5607:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2482,"mutability":"mutable","name":"amountsOut","nameLocation":"5645:10:11","nodeType":"VariableDeclaration","scope":2486,"src":"5628:27:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2480,"name":"uint256","nodeType":"ElementaryTypeName","src":"5628:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2481,"nodeType":"ArrayTypeName","src":"5628:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2484,"mutability":"mutable","name":"returnData","nameLocation":"5670:10:11","nodeType":"VariableDeclaration","scope":2486,"src":"5657:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2483,"name":"bytes","nodeType":"ElementaryTypeName","src":"5657:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5606:75:11"},"scope":2545,"src":"5513:169:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2487,"nodeType":"StructuredDocumentation","src":"5912:385:11","text":" @notice Gets the index of a token in a given pool.\n @dev Reverts if the pool is not registered, or if the token does not belong to the pool.\n @param pool Address of the pool\n @param token Address of the token\n @return tokenCount Number of tokens in the pool\n @return index Index corresponding to the given token in the pool's token list"},"functionSelector":"c9c1661b","id":2499,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenCountAndIndexOfToken","nameLocation":"6311:32:11","nodeType":"FunctionDefinition","parameters":{"id":2493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2489,"mutability":"mutable","name":"pool","nameLocation":"6361:4:11","nodeType":"VariableDeclaration","scope":2499,"src":"6353:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2488,"name":"address","nodeType":"ElementaryTypeName","src":"6353:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2492,"mutability":"mutable","name":"token","nameLocation":"6382:5:11","nodeType":"VariableDeclaration","scope":2499,"src":"6375:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":2491,"nodeType":"UserDefinedTypeName","pathNode":{"id":2490,"name":"IERC20","nameLocations":["6375:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"6375:6:11"},"referencedDeclaration":3102,"src":"6375:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"6343:50:11"},"returnParameters":{"id":2498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2495,"mutability":"mutable","name":"tokenCount","nameLocation":"6425:10:11","nodeType":"VariableDeclaration","scope":2499,"src":"6417:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2494,"name":"uint256","nodeType":"ElementaryTypeName","src":"6417:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2497,"mutability":"mutable","name":"index","nameLocation":"6445:5:11","nodeType":"VariableDeclaration","scope":2499,"src":"6437:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2496,"name":"uint256","nodeType":"ElementaryTypeName","src":"6437:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6416:35:11"},"scope":2545,"src":"6302:150:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2500,"nodeType":"StructuredDocumentation","src":"6683:460:11","text":" @notice Transfers pool token from owner to a recipient.\n @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n the pool contract, so msg.sender is used as the token address.\n @param owner Address of the owner\n @param to Address of the recipient\n @param amount Amount of tokens to transfer\n @return success True if successful, false otherwise"},"functionSelector":"beabacc8","id":2511,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"7157:8:11","nodeType":"FunctionDefinition","parameters":{"id":2507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2502,"mutability":"mutable","name":"owner","nameLocation":"7174:5:11","nodeType":"VariableDeclaration","scope":2511,"src":"7166:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2501,"name":"address","nodeType":"ElementaryTypeName","src":"7166:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2504,"mutability":"mutable","name":"to","nameLocation":"7189:2:11","nodeType":"VariableDeclaration","scope":2511,"src":"7181:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2503,"name":"address","nodeType":"ElementaryTypeName","src":"7181:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2506,"mutability":"mutable","name":"amount","nameLocation":"7201:6:11","nodeType":"VariableDeclaration","scope":2511,"src":"7193:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2505,"name":"uint256","nodeType":"ElementaryTypeName","src":"7193:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7165:43:11"},"returnParameters":{"id":2510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2509,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2511,"src":"7227:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2508,"name":"bool","nodeType":"ElementaryTypeName","src":"7227:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7226:6:11"},"scope":2545,"src":"7148:85:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2512,"nodeType":"StructuredDocumentation","src":"7239:544:11","text":" @notice Transfers pool token from a sender to a recipient using an allowance.\n @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n the pool contract, so msg.sender is used as the token address.\n @param spender Address allowed to perform the transfer\n @param from Address of the sender\n @param to Address of the recipient\n @param amount Amount of tokens to transfer\n @return success True if successful, false otherwise"},"functionSelector":"15dacbea","id":2525,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"7797:12:11","nodeType":"FunctionDefinition","parameters":{"id":2521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2514,"mutability":"mutable","name":"spender","nameLocation":"7818:7:11","nodeType":"VariableDeclaration","scope":2525,"src":"7810:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2513,"name":"address","nodeType":"ElementaryTypeName","src":"7810:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2516,"mutability":"mutable","name":"from","nameLocation":"7835:4:11","nodeType":"VariableDeclaration","scope":2525,"src":"7827:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2515,"name":"address","nodeType":"ElementaryTypeName","src":"7827:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2518,"mutability":"mutable","name":"to","nameLocation":"7849:2:11","nodeType":"VariableDeclaration","scope":2525,"src":"7841:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2517,"name":"address","nodeType":"ElementaryTypeName","src":"7841:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2520,"mutability":"mutable","name":"amount","nameLocation":"7861:6:11","nodeType":"VariableDeclaration","scope":2525,"src":"7853:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2519,"name":"uint256","nodeType":"ElementaryTypeName","src":"7853:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7809:59:11"},"returnParameters":{"id":2524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2523,"mutability":"mutable","name":"success","nameLocation":"7892:7:11","nodeType":"VariableDeclaration","scope":2525,"src":"7887:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2522,"name":"bool","nodeType":"ElementaryTypeName","src":"7887:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7886:14:11"},"scope":2545,"src":"7788:113:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2526,"nodeType":"StructuredDocumentation","src":"8128:575:11","text":" @notice Wraps/unwraps tokens based on the parameters provided.\n @dev All parameters are given in raw token decimal encoding. It requires the buffer to be initialized,\n and uses the internal wrapped token buffer when it has enough liquidity to avoid external calls.\n @param params Parameters for the wrap/unwrap operation (see struct definition)\n @return amountCalculatedRaw Calculated swap amount\n @return amountInRaw Amount of input tokens for the swap\n @return amountOutRaw Amount of output tokens from the swap"},"functionSelector":"43583be5","id":2538,"implemented":false,"kind":"function","modifiers":[],"name":"erc4626BufferWrapOrUnwrap","nameLocation":"8717:25:11","nodeType":"FunctionDefinition","parameters":{"id":2530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2529,"mutability":"mutable","name":"params","nameLocation":"8784:6:11","nodeType":"VariableDeclaration","scope":2538,"src":"8752:38:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_BufferWrapOrUnwrapParams_$2845_memory_ptr","typeString":"struct BufferWrapOrUnwrapParams"},"typeName":{"id":2528,"nodeType":"UserDefinedTypeName","pathNode":{"id":2527,"name":"BufferWrapOrUnwrapParams","nameLocations":["8752:24:11"],"nodeType":"IdentifierPath","referencedDeclaration":2845,"src":"8752:24:11"},"referencedDeclaration":2845,"src":"8752:24:11","typeDescriptions":{"typeIdentifier":"t_struct$_BufferWrapOrUnwrapParams_$2845_storage_ptr","typeString":"struct BufferWrapOrUnwrapParams"}},"visibility":"internal"}],"src":"8742:54:11"},"returnParameters":{"id":2537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2532,"mutability":"mutable","name":"amountCalculatedRaw","nameLocation":"8823:19:11","nodeType":"VariableDeclaration","scope":2538,"src":"8815:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2531,"name":"uint256","nodeType":"ElementaryTypeName","src":"8815:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2534,"mutability":"mutable","name":"amountInRaw","nameLocation":"8852:11:11","nodeType":"VariableDeclaration","scope":2538,"src":"8844:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2533,"name":"uint256","nodeType":"ElementaryTypeName","src":"8844:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2536,"mutability":"mutable","name":"amountOutRaw","nameLocation":"8873:12:11","nodeType":"VariableDeclaration","scope":2538,"src":"8865:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2535,"name":"uint256","nodeType":"ElementaryTypeName","src":"8865:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8814:72:11"},"scope":2545,"src":"8708:179:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2539,"nodeType":"StructuredDocumentation","src":"9115:345:11","text":" @notice Returns the VaultExtension contract address.\n @dev Function is in the main Vault contract. The VaultExtension handles less critical or frequently used\n functions, since delegate calls through the Vault are more expensive than direct calls.\n @return vaultExtension Address of the VaultExtension"},"functionSelector":"b9a8effa","id":2544,"implemented":false,"kind":"function","modifiers":[],"name":"getVaultExtension","nameLocation":"9474:17:11","nodeType":"FunctionDefinition","parameters":{"id":2540,"nodeType":"ParameterList","parameters":[],"src":"9491:2:11"},"returnParameters":{"id":2543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"mutability":"mutable","name":"vaultExtension","nameLocation":"9525:14:11","nodeType":"VariableDeclaration","scope":2544,"src":"9517:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2541,"name":"address","nodeType":"ElementaryTypeName","src":"9517:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9516:24:11"},"scope":2545,"src":"9465:76:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2546,"src":"407:9136:11","usedErrors":[],"usedEvents":[]}],"src":"46:9498:11"},"id":11},"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","exportedSymbols":{"AddLiquidityKind":[2790],"AddLiquidityParams":[2806],"AfterSwapParams":[2784],"BufferWrapOrUnwrapParams":[2845],"FEE_BITLENGTH":[2848],"FEE_SCALING_FACTOR":[2851],"HookFlags":[2610],"HooksConfig":[2634],"IERC20":[3102],"IERC4626":[3024],"IRateProvider":[24],"LiquidityManagement":[2563],"MAX_FEE_PERCENTAGE":[2854],"PoolConfig":[2588],"PoolConfigBits":[2565],"PoolData":[2712],"PoolRoleAccounts":[2660],"PoolSwapParams":[2755],"RemoveLiquidityKind":[2811],"RemoveLiquidityParams":[2827],"Rounding":[2715],"SwapKind":[2718],"SwapState":[2644],"TokenConfig":[2677],"TokenInfo":[2687],"TokenType":[2664],"VaultState":[2652],"VaultSwapParams":[2737],"WrappingDirection":[2830]},"id":2855,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2547,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2549,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2855,"sourceUnit":3103,"src":"72:72:12","symbolAliases":[{"foreign":{"id":2548,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"81:6:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":2551,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2855,"sourceUnit":3025,"src":"145:75:12","symbolAliases":[{"foreign":{"id":2550,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"154:8:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol","file":"../solidity-utils/helpers/IRateProvider.sol","id":2553,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2855,"sourceUnit":25,"src":"222:76:12","symbolAliases":[{"foreign":{"id":2552,"name":"IRateProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"231:13:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"LiquidityManagement","documentation":{"id":2554,"nodeType":"StructuredDocumentation","src":"300:472:12","text":" @notice Represents a pool's liquidity management configuration.\n @param disableUnbalancedLiquidity If set, liquidity can only be added or removed proportionally\n @param enableAddLiquidityCustom If set, the pool has implemented `onAddLiquidityCustom`\n @param enableRemoveLiquidityCustom If set, the pool has implemented `onRemoveLiquidityCustom`\n @param enableDonation If set, the pool will not revert if liquidity is added with AddLiquidityKind.DONATION"},"id":2563,"members":[{"constant":false,"id":2556,"mutability":"mutable","name":"disableUnbalancedLiquidity","nameLocation":"811:26:12","nodeType":"VariableDeclaration","scope":2563,"src":"806:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2555,"name":"bool","nodeType":"ElementaryTypeName","src":"806:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2558,"mutability":"mutable","name":"enableAddLiquidityCustom","nameLocation":"848:24:12","nodeType":"VariableDeclaration","scope":2563,"src":"843:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2557,"name":"bool","nodeType":"ElementaryTypeName","src":"843:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2560,"mutability":"mutable","name":"enableRemoveLiquidityCustom","nameLocation":"883:27:12","nodeType":"VariableDeclaration","scope":2563,"src":"878:32:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2559,"name":"bool","nodeType":"ElementaryTypeName","src":"878:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2562,"mutability":"mutable","name":"enableDonation","nameLocation":"921:14:12","nodeType":"VariableDeclaration","scope":2563,"src":"916:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2561,"name":"bool","nodeType":"ElementaryTypeName","src":"916:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"LiquidityManagement","nameLocation":"780:19:12","nodeType":"StructDefinition","scope":2855,"src":"773:165:12","visibility":"public"},{"canonicalName":"PoolConfigBits","id":2565,"name":"PoolConfigBits","nameLocation":"1015:14:12","nodeType":"UserDefinedValueTypeDefinition","src":"1010:31:12","underlyingType":{"id":2564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1033:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"canonicalName":"PoolConfig","documentation":{"id":2566,"nodeType":"StructuredDocumentation","src":"1043:1034:12","text":" @notice Represents a pool's configuration (hooks configuration are separated in another struct).\n @param liquidityManagement Flags related to adding/removing liquidity\n @param staticSwapFeePercentage The pool's native swap fee\n @param aggregateSwapFeePercentage The total swap fee charged, including protocol and pool creator components\n @param aggregateYieldFeePercentage The total swap fee charged, including protocol and pool creator components\n @param tokenDecimalDiffs Compressed storage of the token decimals of each pool token\n @param pauseWindowEndTime Timestamp after which the pool cannot be paused\n @param isPoolRegistered If true, the pool has been registered with the Vault\n @param isPoolInitialized If true, the pool has been initialized with liquidity, and is available for trading\n @param isPoolPaused If true, the pool has been paused (by governance or the pauseManager)\n @param isPoolInRecoveryMode If true, the pool has been placed in recovery mode, enabling recovery mode withdrawals"},"id":2588,"members":[{"constant":false,"id":2569,"mutability":"mutable","name":"liquidityManagement","nameLocation":"2122:19:12","nodeType":"VariableDeclaration","scope":2588,"src":"2102:39:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2563_storage_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":2568,"nodeType":"UserDefinedTypeName","pathNode":{"id":2567,"name":"LiquidityManagement","nameLocations":["2102:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":2563,"src":"2102:19:12"},"referencedDeclaration":2563,"src":"2102:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2563_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"},{"constant":false,"id":2571,"mutability":"mutable","name":"staticSwapFeePercentage","nameLocation":"2155:23:12","nodeType":"VariableDeclaration","scope":2588,"src":"2147:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2570,"name":"uint256","nodeType":"ElementaryTypeName","src":"2147:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2573,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"2192:26:12","nodeType":"VariableDeclaration","scope":2588,"src":"2184:34:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2572,"name":"uint256","nodeType":"ElementaryTypeName","src":"2184:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2575,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"2232:27:12","nodeType":"VariableDeclaration","scope":2588,"src":"2224:35:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2574,"name":"uint256","nodeType":"ElementaryTypeName","src":"2224:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2577,"mutability":"mutable","name":"tokenDecimalDiffs","nameLocation":"2272:17:12","nodeType":"VariableDeclaration","scope":2588,"src":"2265:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":2576,"name":"uint40","nodeType":"ElementaryTypeName","src":"2265:6:12","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"},{"constant":false,"id":2579,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"2302:18:12","nodeType":"VariableDeclaration","scope":2588,"src":"2295:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2578,"name":"uint32","nodeType":"ElementaryTypeName","src":"2295:6:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2581,"mutability":"mutable","name":"isPoolRegistered","nameLocation":"2331:16:12","nodeType":"VariableDeclaration","scope":2588,"src":"2326:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2580,"name":"bool","nodeType":"ElementaryTypeName","src":"2326:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2583,"mutability":"mutable","name":"isPoolInitialized","nameLocation":"2358:17:12","nodeType":"VariableDeclaration","scope":2588,"src":"2353:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2582,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2585,"mutability":"mutable","name":"isPoolPaused","nameLocation":"2386:12:12","nodeType":"VariableDeclaration","scope":2588,"src":"2381:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2584,"name":"bool","nodeType":"ElementaryTypeName","src":"2381:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2587,"mutability":"mutable","name":"isPoolInRecoveryMode","nameLocation":"2409:20:12","nodeType":"VariableDeclaration","scope":2588,"src":"2404:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2586,"name":"bool","nodeType":"ElementaryTypeName","src":"2404:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"PoolConfig","nameLocation":"2085:10:12","nodeType":"StructDefinition","scope":2855,"src":"2078:354:12","visibility":"public"},{"canonicalName":"HookFlags","documentation":{"id":2589,"nodeType":"StructuredDocumentation","src":"2434:352:12","text":" @notice The flag portion of the `HooksConfig`.\n @dev `enableHookAdjustedAmounts` must be true for all contracts that modify the `amountCalculated`\n in after hooks. Otherwise, the Vault will ignore any \"hookAdjusted\" amounts. Setting any \"shouldCall\"\n flags to true will cause the Vault to call the corresponding hook during operations."},"id":2610,"members":[{"constant":false,"id":2591,"mutability":"mutable","name":"enableHookAdjustedAmounts","nameLocation":"2815:25:12","nodeType":"VariableDeclaration","scope":2610,"src":"2810:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2590,"name":"bool","nodeType":"ElementaryTypeName","src":"2810:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2593,"mutability":"mutable","name":"shouldCallBeforeInitialize","nameLocation":"2851:26:12","nodeType":"VariableDeclaration","scope":2610,"src":"2846:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2592,"name":"bool","nodeType":"ElementaryTypeName","src":"2846:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2595,"mutability":"mutable","name":"shouldCallAfterInitialize","nameLocation":"2888:25:12","nodeType":"VariableDeclaration","scope":2610,"src":"2883:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2594,"name":"bool","nodeType":"ElementaryTypeName","src":"2883:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2597,"mutability":"mutable","name":"shouldCallComputeDynamicSwapFee","nameLocation":"2924:31:12","nodeType":"VariableDeclaration","scope":2610,"src":"2919:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2596,"name":"bool","nodeType":"ElementaryTypeName","src":"2919:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2599,"mutability":"mutable","name":"shouldCallBeforeSwap","nameLocation":"2966:20:12","nodeType":"VariableDeclaration","scope":2610,"src":"2961:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2598,"name":"bool","nodeType":"ElementaryTypeName","src":"2961:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2601,"mutability":"mutable","name":"shouldCallAfterSwap","nameLocation":"2997:19:12","nodeType":"VariableDeclaration","scope":2610,"src":"2992:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2600,"name":"bool","nodeType":"ElementaryTypeName","src":"2992:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2603,"mutability":"mutable","name":"shouldCallBeforeAddLiquidity","nameLocation":"3027:28:12","nodeType":"VariableDeclaration","scope":2610,"src":"3022:33:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2602,"name":"bool","nodeType":"ElementaryTypeName","src":"3022:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2605,"mutability":"mutable","name":"shouldCallAfterAddLiquidity","nameLocation":"3066:27:12","nodeType":"VariableDeclaration","scope":2610,"src":"3061:32:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2604,"name":"bool","nodeType":"ElementaryTypeName","src":"3061:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2607,"mutability":"mutable","name":"shouldCallBeforeRemoveLiquidity","nameLocation":"3104:31:12","nodeType":"VariableDeclaration","scope":2610,"src":"3099:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2606,"name":"bool","nodeType":"ElementaryTypeName","src":"3099:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2609,"mutability":"mutable","name":"shouldCallAfterRemoveLiquidity","nameLocation":"3146:30:12","nodeType":"VariableDeclaration","scope":2610,"src":"3141:35:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2608,"name":"bool","nodeType":"ElementaryTypeName","src":"3141:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"HookFlags","nameLocation":"2794:9:12","nodeType":"StructDefinition","scope":2855,"src":"2787:392:12","visibility":"public"},{"canonicalName":"HooksConfig","documentation":{"id":2611,"nodeType":"StructuredDocumentation","src":"3181:101:12","text":"@notice Represents a hook contract configuration for a pool (HookFlags + hooksContract address)."},"id":2634,"members":[{"constant":false,"id":2613,"mutability":"mutable","name":"enableHookAdjustedAmounts","nameLocation":"3312:25:12","nodeType":"VariableDeclaration","scope":2634,"src":"3307:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2612,"name":"bool","nodeType":"ElementaryTypeName","src":"3307:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2615,"mutability":"mutable","name":"shouldCallBeforeInitialize","nameLocation":"3348:26:12","nodeType":"VariableDeclaration","scope":2634,"src":"3343:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2614,"name":"bool","nodeType":"ElementaryTypeName","src":"3343:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2617,"mutability":"mutable","name":"shouldCallAfterInitialize","nameLocation":"3385:25:12","nodeType":"VariableDeclaration","scope":2634,"src":"3380:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2616,"name":"bool","nodeType":"ElementaryTypeName","src":"3380:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2619,"mutability":"mutable","name":"shouldCallComputeDynamicSwapFee","nameLocation":"3421:31:12","nodeType":"VariableDeclaration","scope":2634,"src":"3416:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2618,"name":"bool","nodeType":"ElementaryTypeName","src":"3416:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2621,"mutability":"mutable","name":"shouldCallBeforeSwap","nameLocation":"3463:20:12","nodeType":"VariableDeclaration","scope":2634,"src":"3458:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2620,"name":"bool","nodeType":"ElementaryTypeName","src":"3458:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2623,"mutability":"mutable","name":"shouldCallAfterSwap","nameLocation":"3494:19:12","nodeType":"VariableDeclaration","scope":2634,"src":"3489:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2622,"name":"bool","nodeType":"ElementaryTypeName","src":"3489:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2625,"mutability":"mutable","name":"shouldCallBeforeAddLiquidity","nameLocation":"3524:28:12","nodeType":"VariableDeclaration","scope":2634,"src":"3519:33:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2624,"name":"bool","nodeType":"ElementaryTypeName","src":"3519:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2627,"mutability":"mutable","name":"shouldCallAfterAddLiquidity","nameLocation":"3563:27:12","nodeType":"VariableDeclaration","scope":2634,"src":"3558:32:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2626,"name":"bool","nodeType":"ElementaryTypeName","src":"3558:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2629,"mutability":"mutable","name":"shouldCallBeforeRemoveLiquidity","nameLocation":"3601:31:12","nodeType":"VariableDeclaration","scope":2634,"src":"3596:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2628,"name":"bool","nodeType":"ElementaryTypeName","src":"3596:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2631,"mutability":"mutable","name":"shouldCallAfterRemoveLiquidity","nameLocation":"3643:30:12","nodeType":"VariableDeclaration","scope":2634,"src":"3638:35:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2630,"name":"bool","nodeType":"ElementaryTypeName","src":"3638:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2633,"mutability":"mutable","name":"hooksContract","nameLocation":"3687:13:12","nodeType":"VariableDeclaration","scope":2634,"src":"3679:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2632,"name":"address","nodeType":"ElementaryTypeName","src":"3679:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"HooksConfig","nameLocation":"3289:11:12","nodeType":"StructDefinition","scope":2855,"src":"3282:421:12","visibility":"public"},{"canonicalName":"SwapState","documentation":{"id":2635,"nodeType":"StructuredDocumentation","src":"3705:364:12","text":" @notice Represents temporary state used during a swap operation.\n @param indexIn The zero-based index of tokenIn\n @param indexOut The zero-based index of tokenOut\n @param amountGivenScaled18 The amountGiven (i.e., tokenIn for ExactIn), adjusted for token decimals\n @param swapFeePercentage The swap fee to be applied (might be static or dynamic)"},"id":2644,"members":[{"constant":false,"id":2637,"mutability":"mutable","name":"indexIn","nameLocation":"4101:7:12","nodeType":"VariableDeclaration","scope":2644,"src":"4093:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2636,"name":"uint256","nodeType":"ElementaryTypeName","src":"4093:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2639,"mutability":"mutable","name":"indexOut","nameLocation":"4122:8:12","nodeType":"VariableDeclaration","scope":2644,"src":"4114:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2638,"name":"uint256","nodeType":"ElementaryTypeName","src":"4114:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2641,"mutability":"mutable","name":"amountGivenScaled18","nameLocation":"4144:19:12","nodeType":"VariableDeclaration","scope":2644,"src":"4136:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2640,"name":"uint256","nodeType":"ElementaryTypeName","src":"4136:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2643,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"4177:17:12","nodeType":"VariableDeclaration","scope":2644,"src":"4169:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2642,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"SwapState","nameLocation":"4077:9:12","nodeType":"StructDefinition","scope":2855,"src":"4070:127:12","visibility":"public"},{"canonicalName":"VaultState","documentation":{"id":2645,"nodeType":"StructuredDocumentation","src":"4199:381:12","text":" @notice Represents the Vault's configuration.\n @param isQueryDisabled If set to true, disables query functionality of the Vault. Can be modified by governance\n @param isVaultPaused If set to true, swaps and add/remove liquidity operations are halted\n @param areBuffersPaused If set to true, the Vault wrap/unwrap primitives associated with buffers will be disabled"},"id":2652,"members":[{"constant":false,"id":2647,"mutability":"mutable","name":"isQueryDisabled","nameLocation":"4610:15:12","nodeType":"VariableDeclaration","scope":2652,"src":"4605:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2646,"name":"bool","nodeType":"ElementaryTypeName","src":"4605:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2649,"mutability":"mutable","name":"isVaultPaused","nameLocation":"4636:13:12","nodeType":"VariableDeclaration","scope":2652,"src":"4631:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2648,"name":"bool","nodeType":"ElementaryTypeName","src":"4631:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2651,"mutability":"mutable","name":"areBuffersPaused","nameLocation":"4660:16:12","nodeType":"VariableDeclaration","scope":2652,"src":"4655:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2650,"name":"bool","nodeType":"ElementaryTypeName","src":"4655:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"VaultState","nameLocation":"4588:10:12","nodeType":"StructDefinition","scope":2855,"src":"4581:98:12","visibility":"public"},{"canonicalName":"PoolRoleAccounts","documentation":{"id":2653,"nodeType":"StructuredDocumentation","src":"4681:461:12","text":" @notice Represents the accounts holding certain roles for a given pool. This is passed in on pool registration.\n @param pauseManager Account empowered to pause/unpause the pool (note that governance can always pause a pool)\n @param swapFeeManager Account empowered to set static swap fees for a pool (or 0 to delegate to governance)\n @param poolCreator Account empowered to set the pool creator fee (or 0 if all fees go to the protocol and LPs)"},"id":2660,"members":[{"constant":false,"id":2655,"mutability":"mutable","name":"pauseManager","nameLocation":"5181:12:12","nodeType":"VariableDeclaration","scope":2660,"src":"5173:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2654,"name":"address","nodeType":"ElementaryTypeName","src":"5173:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2657,"mutability":"mutable","name":"swapFeeManager","nameLocation":"5207:14:12","nodeType":"VariableDeclaration","scope":2660,"src":"5199:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2656,"name":"address","nodeType":"ElementaryTypeName","src":"5199:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2659,"mutability":"mutable","name":"poolCreator","nameLocation":"5235:11:12","nodeType":"VariableDeclaration","scope":2660,"src":"5227:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2658,"name":"address","nodeType":"ElementaryTypeName","src":"5227:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"PoolRoleAccounts","nameLocation":"5150:16:12","nodeType":"StructDefinition","scope":2855,"src":"5143:106:12","visibility":"public"},{"canonicalName":"TokenType","documentation":{"id":2661,"nodeType":"StructuredDocumentation","src":"9245:1024:12","text":" @notice Token types supported by the Vault.\n @dev In general, pools may contain any combination of these tokens.\n STANDARD tokens (e.g., BAL, WETH) have no rate provider.\n WITH_RATE tokens (e.g., wstETH) require a rate provider. These may be tokens like wstETH, which need to be wrapped\n because the underlying stETH token is rebasing, and such tokens are unsupported by the Vault. They may also be\n tokens like sEUR, which track an underlying asset, but are not yield-bearing. Finally, this encompasses\n yield-bearing ERC4626 tokens, which can be used to facilitate swaps without requiring wrapping or unwrapping\n in most cases. The `paysYieldFees` flag can be used to indicate whether a token is yield-bearing (e.g., waDAI),\n not yield-bearing (e.g., sEUR), or yield-bearing but exempt from fees (e.g., in certain nested pools, where\n yield fees are charged elsewhere).\n NB: STANDARD must always be the first enum element, so that newly initialized data structures default to Standard."},"id":2664,"members":[{"id":2662,"name":"STANDARD","nameLocation":"10291:8:12","nodeType":"EnumValue","src":"10291:8:12"},{"id":2663,"name":"WITH_RATE","nameLocation":"10305:9:12","nodeType":"EnumValue","src":"10305:9:12"}],"name":"TokenType","nameLocation":"10275:9:12","nodeType":"EnumDefinition","src":"10270:46:12"},{"canonicalName":"TokenConfig","documentation":{"id":2665,"nodeType":"StructuredDocumentation","src":"10318:915:12","text":" @notice Encapsulate the data required for the Vault to support a token of the given type.\n @dev For STANDARD tokens, the rate provider address must be 0, and paysYieldFees must be false. All WITH_RATE tokens\n need a rate provider, and may or may not be yield-bearing.\n At registration time, it is useful to include the token address along with the token parameters in the structure\n passed to `registerPool`, as the alternative would be parallel arrays, which would be error prone and require\n validation checks. `TokenConfig` is only used for registration, and is never put into storage (see `TokenInfo`).\n @param token The token address\n @param tokenType The token type (see the enum for supported types)\n @param rateProvider The rate provider for a token (see further documentation above)\n @param paysYieldFees Flag indicating whether yield fees should be charged on this token"},"id":2677,"members":[{"constant":false,"id":2668,"mutability":"mutable","name":"token","nameLocation":"11266:5:12","nodeType":"VariableDeclaration","scope":2677,"src":"11259:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":2667,"nodeType":"UserDefinedTypeName","pathNode":{"id":2666,"name":"IERC20","nameLocations":["11259:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"11259:6:12"},"referencedDeclaration":3102,"src":"11259:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2671,"mutability":"mutable","name":"tokenType","nameLocation":"11287:9:12","nodeType":"VariableDeclaration","scope":2677,"src":"11277:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2664","typeString":"enum TokenType"},"typeName":{"id":2670,"nodeType":"UserDefinedTypeName","pathNode":{"id":2669,"name":"TokenType","nameLocations":["11277:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":2664,"src":"11277:9:12"},"referencedDeclaration":2664,"src":"11277:9:12","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2664","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":2674,"mutability":"mutable","name":"rateProvider","nameLocation":"11316:12:12","nodeType":"VariableDeclaration","scope":2677,"src":"11302:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRateProvider_$24","typeString":"contract IRateProvider"},"typeName":{"id":2673,"nodeType":"UserDefinedTypeName","pathNode":{"id":2672,"name":"IRateProvider","nameLocations":["11302:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":24,"src":"11302:13:12"},"referencedDeclaration":24,"src":"11302:13:12","typeDescriptions":{"typeIdentifier":"t_contract$_IRateProvider_$24","typeString":"contract IRateProvider"}},"visibility":"internal"},{"constant":false,"id":2676,"mutability":"mutable","name":"paysYieldFees","nameLocation":"11339:13:12","nodeType":"VariableDeclaration","scope":2677,"src":"11334:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2675,"name":"bool","nodeType":"ElementaryTypeName","src":"11334:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"TokenConfig","nameLocation":"11241:11:12","nodeType":"StructDefinition","scope":2855,"src":"11234:121:12","visibility":"public"},{"canonicalName":"TokenInfo","documentation":{"id":2678,"nodeType":"StructuredDocumentation","src":"11357:592:12","text":" @notice This data structure is stored in `_poolTokenInfo`, a nested mapping from pool -> (token -> TokenInfo).\n @dev Since the token is already the key of the nested mapping, it would be redundant (and an extra SLOAD) to store\n it again in the struct. When we construct PoolData, the tokens are separated into their own array.\n @param tokenType The token type (see the enum for supported types)\n @param rateProvider The rate provider for a token (see further documentation above)\n @param paysYieldFees Flag indicating whether yield fees should be charged on this token"},"id":2687,"members":[{"constant":false,"id":2681,"mutability":"mutable","name":"tokenType","nameLocation":"11983:9:12","nodeType":"VariableDeclaration","scope":2687,"src":"11973:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2664","typeString":"enum TokenType"},"typeName":{"id":2680,"nodeType":"UserDefinedTypeName","pathNode":{"id":2679,"name":"TokenType","nameLocations":["11973:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":2664,"src":"11973:9:12"},"referencedDeclaration":2664,"src":"11973:9:12","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2664","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":2684,"mutability":"mutable","name":"rateProvider","nameLocation":"12012:12:12","nodeType":"VariableDeclaration","scope":2687,"src":"11998:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRateProvider_$24","typeString":"contract IRateProvider"},"typeName":{"id":2683,"nodeType":"UserDefinedTypeName","pathNode":{"id":2682,"name":"IRateProvider","nameLocations":["11998:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":24,"src":"11998:13:12"},"referencedDeclaration":24,"src":"11998:13:12","typeDescriptions":{"typeIdentifier":"t_contract$_IRateProvider_$24","typeString":"contract IRateProvider"}},"visibility":"internal"},{"constant":false,"id":2686,"mutability":"mutable","name":"paysYieldFees","nameLocation":"12035:13:12","nodeType":"VariableDeclaration","scope":2687,"src":"12030:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2685,"name":"bool","nodeType":"ElementaryTypeName","src":"12030:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"TokenInfo","nameLocation":"11957:9:12","nodeType":"StructDefinition","scope":2855,"src":"11950:101:12","visibility":"public"},{"canonicalName":"PoolData","documentation":{"id":2688,"nodeType":"StructuredDocumentation","src":"12053:761:12","text":" @notice Data structure used to represent the current pool state in memory\n @param poolConfigBits Custom type to store the entire configuration of the pool.\n @param tokens Pool tokens, sorted in token registration order\n @param tokenInfo Configuration data for each token, sorted in token registration order\n @param balancesRaw Token balances in native decimals\n @param balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates\n @param tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\n @param decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n calculations. It is 1e18 (FP 1) for 18-decimal tokens"},"id":2712,"members":[{"constant":false,"id":2691,"mutability":"mutable","name":"poolConfigBits","nameLocation":"12852:14:12","nodeType":"VariableDeclaration","scope":2712,"src":"12837:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_PoolConfigBits_$2565","typeString":"PoolConfigBits"},"typeName":{"id":2690,"nodeType":"UserDefinedTypeName","pathNode":{"id":2689,"name":"PoolConfigBits","nameLocations":["12837:14:12"],"nodeType":"IdentifierPath","referencedDeclaration":2565,"src":"12837:14:12"},"referencedDeclaration":2565,"src":"12837:14:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_PoolConfigBits_$2565","typeString":"PoolConfigBits"}},"visibility":"internal"},{"constant":false,"id":2695,"mutability":"mutable","name":"tokens","nameLocation":"12881:6:12","nodeType":"VariableDeclaration","scope":2712,"src":"12872:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_storage_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":2693,"nodeType":"UserDefinedTypeName","pathNode":{"id":2692,"name":"IERC20","nameLocations":["12872:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"12872:6:12"},"referencedDeclaration":3102,"src":"12872:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"id":2694,"nodeType":"ArrayTypeName","src":"12872:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":2699,"mutability":"mutable","name":"tokenInfo","nameLocation":"12905:9:12","nodeType":"VariableDeclaration","scope":2712,"src":"12893:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2687_storage_$dyn_storage_ptr","typeString":"struct TokenInfo[]"},"typeName":{"baseType":{"id":2697,"nodeType":"UserDefinedTypeName","pathNode":{"id":2696,"name":"TokenInfo","nameLocations":["12893:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":2687,"src":"12893:9:12"},"referencedDeclaration":2687,"src":"12893:9:12","typeDescriptions":{"typeIdentifier":"t_struct$_TokenInfo_$2687_storage_ptr","typeString":"struct TokenInfo"}},"id":2698,"nodeType":"ArrayTypeName","src":"12893:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2687_storage_$dyn_storage_ptr","typeString":"struct TokenInfo[]"}},"visibility":"internal"},{"constant":false,"id":2702,"mutability":"mutable","name":"balancesRaw","nameLocation":"12930:11:12","nodeType":"VariableDeclaration","scope":2712,"src":"12920:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2700,"name":"uint256","nodeType":"ElementaryTypeName","src":"12920:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2701,"nodeType":"ArrayTypeName","src":"12920:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2705,"mutability":"mutable","name":"balancesLiveScaled18","nameLocation":"12957:20:12","nodeType":"VariableDeclaration","scope":2712,"src":"12947:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2703,"name":"uint256","nodeType":"ElementaryTypeName","src":"12947:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2704,"nodeType":"ArrayTypeName","src":"12947:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2708,"mutability":"mutable","name":"tokenRates","nameLocation":"12993:10:12","nodeType":"VariableDeclaration","scope":2712,"src":"12983:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2706,"name":"uint256","nodeType":"ElementaryTypeName","src":"12983:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2707,"nodeType":"ArrayTypeName","src":"12983:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2711,"mutability":"mutable","name":"decimalScalingFactors","nameLocation":"13019:21:12","nodeType":"VariableDeclaration","scope":2712,"src":"13009:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2709,"name":"uint256","nodeType":"ElementaryTypeName","src":"13009:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2710,"nodeType":"ArrayTypeName","src":"13009:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"name":"PoolData","nameLocation":"12822:8:12","nodeType":"StructDefinition","scope":2855,"src":"12815:228:12","visibility":"public"},{"canonicalName":"Rounding","id":2715,"members":[{"id":2713,"name":"ROUND_UP","nameLocation":"13065:8:12","nodeType":"EnumValue","src":"13065:8:12"},{"id":2714,"name":"ROUND_DOWN","nameLocation":"13079:10:12","nodeType":"EnumValue","src":"13079:10:12"}],"name":"Rounding","nameLocation":"13050:8:12","nodeType":"EnumDefinition","src":"13045:46:12"},{"canonicalName":"SwapKind","id":2718,"members":[{"id":2716,"name":"EXACT_IN","nameLocation":"13318:8:12","nodeType":"EnumValue","src":"13318:8:12"},{"id":2717,"name":"EXACT_OUT","nameLocation":"13332:9:12","nodeType":"EnumValue","src":"13332:9:12"}],"name":"SwapKind","nameLocation":"13303:8:12","nodeType":"EnumDefinition","src":"13298:45:12"},{"canonicalName":"VaultSwapParams","documentation":{"id":2719,"nodeType":"StructuredDocumentation","src":"14089:558:12","text":" @notice Data passed into primary Vault `swap` operations.\n @param kind Type of swap (Exact In or Exact Out)\n @param pool The pool with the tokens being swapped\n @param tokenIn The token entering the Vault (balance increases)\n @param tokenOut The token leaving the Vault (balance decreases)\n @param amountGivenRaw Amount specified for tokenIn or tokenOut (depending on the type of swap)\n @param limitRaw Minimum or maximum value of the calculated amount (depending on the type of swap)\n @param userData Additional (optional) user data"},"id":2737,"members":[{"constant":false,"id":2722,"mutability":"mutable","name":"kind","nameLocation":"14686:4:12","nodeType":"VariableDeclaration","scope":2737,"src":"14677:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2718","typeString":"enum SwapKind"},"typeName":{"id":2721,"nodeType":"UserDefinedTypeName","pathNode":{"id":2720,"name":"SwapKind","nameLocations":["14677:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2718,"src":"14677:8:12"},"referencedDeclaration":2718,"src":"14677:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2718","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":2724,"mutability":"mutable","name":"pool","nameLocation":"14704:4:12","nodeType":"VariableDeclaration","scope":2737,"src":"14696:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2723,"name":"address","nodeType":"ElementaryTypeName","src":"14696:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2727,"mutability":"mutable","name":"tokenIn","nameLocation":"14721:7:12","nodeType":"VariableDeclaration","scope":2737,"src":"14714:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":2726,"nodeType":"UserDefinedTypeName","pathNode":{"id":2725,"name":"IERC20","nameLocations":["14714:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"14714:6:12"},"referencedDeclaration":3102,"src":"14714:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2730,"mutability":"mutable","name":"tokenOut","nameLocation":"14741:8:12","nodeType":"VariableDeclaration","scope":2737,"src":"14734:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":2729,"nodeType":"UserDefinedTypeName","pathNode":{"id":2728,"name":"IERC20","nameLocations":["14734:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"14734:6:12"},"referencedDeclaration":3102,"src":"14734:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2732,"mutability":"mutable","name":"amountGivenRaw","nameLocation":"14763:14:12","nodeType":"VariableDeclaration","scope":2737,"src":"14755:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2731,"name":"uint256","nodeType":"ElementaryTypeName","src":"14755:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2734,"mutability":"mutable","name":"limitRaw","nameLocation":"14791:8:12","nodeType":"VariableDeclaration","scope":2737,"src":"14783:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2733,"name":"uint256","nodeType":"ElementaryTypeName","src":"14783:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2736,"mutability":"mutable","name":"userData","nameLocation":"14811:8:12","nodeType":"VariableDeclaration","scope":2737,"src":"14805:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2735,"name":"bytes","nodeType":"ElementaryTypeName","src":"14805:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"VaultSwapParams","nameLocation":"14655:15:12","nodeType":"StructDefinition","scope":2855,"src":"14648:174:12","visibility":"public"},{"canonicalName":"PoolSwapParams","documentation":{"id":2738,"nodeType":"StructuredDocumentation","src":"14824:530:12","text":" @notice Data for a swap operation, used by contracts implementing `IBasePool`.\n @param kind Type of swap (exact in or exact out)\n @param amountGivenScaled18 Amount given based on kind of the swap (e.g., tokenIn for EXACT_IN)\n @param balancesScaled18 Current pool balances\n @param indexIn Index of tokenIn\n @param indexOut Index of tokenOut\n @param router The address (usually a router contract) that initiated a swap operation on the Vault\n @param userData Additional (optional) data required for the swap"},"id":2755,"members":[{"constant":false,"id":2741,"mutability":"mutable","name":"kind","nameLocation":"15392:4:12","nodeType":"VariableDeclaration","scope":2755,"src":"15383:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2718","typeString":"enum SwapKind"},"typeName":{"id":2740,"nodeType":"UserDefinedTypeName","pathNode":{"id":2739,"name":"SwapKind","nameLocations":["15383:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2718,"src":"15383:8:12"},"referencedDeclaration":2718,"src":"15383:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2718","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":2743,"mutability":"mutable","name":"amountGivenScaled18","nameLocation":"15410:19:12","nodeType":"VariableDeclaration","scope":2755,"src":"15402:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2742,"name":"uint256","nodeType":"ElementaryTypeName","src":"15402:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2746,"mutability":"mutable","name":"balancesScaled18","nameLocation":"15445:16:12","nodeType":"VariableDeclaration","scope":2755,"src":"15435:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2744,"name":"uint256","nodeType":"ElementaryTypeName","src":"15435:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2745,"nodeType":"ArrayTypeName","src":"15435:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2748,"mutability":"mutable","name":"indexIn","nameLocation":"15475:7:12","nodeType":"VariableDeclaration","scope":2755,"src":"15467:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2747,"name":"uint256","nodeType":"ElementaryTypeName","src":"15467:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2750,"mutability":"mutable","name":"indexOut","nameLocation":"15496:8:12","nodeType":"VariableDeclaration","scope":2755,"src":"15488:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2749,"name":"uint256","nodeType":"ElementaryTypeName","src":"15488:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2752,"mutability":"mutable","name":"router","nameLocation":"15518:6:12","nodeType":"VariableDeclaration","scope":2755,"src":"15510:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2751,"name":"address","nodeType":"ElementaryTypeName","src":"15510:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2754,"mutability":"mutable","name":"userData","nameLocation":"15536:8:12","nodeType":"VariableDeclaration","scope":2755,"src":"15530:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2753,"name":"bytes","nodeType":"ElementaryTypeName","src":"15530:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"PoolSwapParams","nameLocation":"15362:14:12","nodeType":"StructDefinition","scope":2855,"src":"15355:192:12","visibility":"public"},{"canonicalName":"AfterSwapParams","documentation":{"id":2756,"nodeType":"StructuredDocumentation","src":"15549:813:12","text":" @notice Data for the hook after a swap operation.\n @param kind Type of swap (exact in or exact out)\n @param tokenIn Token to be swapped from\n @param tokenOut Token to be swapped to\n @param amountInScaled18 Amount of tokenIn (entering the Vault)\n @param amountOutScaled18 Amount of tokenOut (leaving the Vault)\n @param tokenInBalanceScaled18 Updated (after swap) balance of tokenIn\n @param tokenOutBalanceScaled18 Updated (after swap) balance of tokenOut\n @param amountCalculatedScaled18 Token amount calculated by the swap\n @param amountCalculatedRaw Token amount calculated by the swap\n @param router The address (usually a router contract) that initiated a swap operation on the Vault\n @param pool Pool address\n @param userData Additional (optional) data required for the swap"},"id":2784,"members":[{"constant":false,"id":2759,"mutability":"mutable","name":"kind","nameLocation":"16401:4:12","nodeType":"VariableDeclaration","scope":2784,"src":"16392:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2718","typeString":"enum SwapKind"},"typeName":{"id":2758,"nodeType":"UserDefinedTypeName","pathNode":{"id":2757,"name":"SwapKind","nameLocations":["16392:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2718,"src":"16392:8:12"},"referencedDeclaration":2718,"src":"16392:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2718","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":2762,"mutability":"mutable","name":"tokenIn","nameLocation":"16418:7:12","nodeType":"VariableDeclaration","scope":2784,"src":"16411:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":2761,"nodeType":"UserDefinedTypeName","pathNode":{"id":2760,"name":"IERC20","nameLocations":["16411:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"16411:6:12"},"referencedDeclaration":3102,"src":"16411:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2765,"mutability":"mutable","name":"tokenOut","nameLocation":"16438:8:12","nodeType":"VariableDeclaration","scope":2784,"src":"16431:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":2764,"nodeType":"UserDefinedTypeName","pathNode":{"id":2763,"name":"IERC20","nameLocations":["16431:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"16431:6:12"},"referencedDeclaration":3102,"src":"16431:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2767,"mutability":"mutable","name":"amountInScaled18","nameLocation":"16460:16:12","nodeType":"VariableDeclaration","scope":2784,"src":"16452:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2766,"name":"uint256","nodeType":"ElementaryTypeName","src":"16452:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2769,"mutability":"mutable","name":"amountOutScaled18","nameLocation":"16490:17:12","nodeType":"VariableDeclaration","scope":2784,"src":"16482:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2768,"name":"uint256","nodeType":"ElementaryTypeName","src":"16482:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2771,"mutability":"mutable","name":"tokenInBalanceScaled18","nameLocation":"16521:22:12","nodeType":"VariableDeclaration","scope":2784,"src":"16513:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2770,"name":"uint256","nodeType":"ElementaryTypeName","src":"16513:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2773,"mutability":"mutable","name":"tokenOutBalanceScaled18","nameLocation":"16557:23:12","nodeType":"VariableDeclaration","scope":2784,"src":"16549:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2772,"name":"uint256","nodeType":"ElementaryTypeName","src":"16549:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2775,"mutability":"mutable","name":"amountCalculatedScaled18","nameLocation":"16594:24:12","nodeType":"VariableDeclaration","scope":2784,"src":"16586:32:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2774,"name":"uint256","nodeType":"ElementaryTypeName","src":"16586:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2777,"mutability":"mutable","name":"amountCalculatedRaw","nameLocation":"16632:19:12","nodeType":"VariableDeclaration","scope":2784,"src":"16624:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2776,"name":"uint256","nodeType":"ElementaryTypeName","src":"16624:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2779,"mutability":"mutable","name":"router","nameLocation":"16665:6:12","nodeType":"VariableDeclaration","scope":2784,"src":"16657:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2778,"name":"address","nodeType":"ElementaryTypeName","src":"16657:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2781,"mutability":"mutable","name":"pool","nameLocation":"16685:4:12","nodeType":"VariableDeclaration","scope":2784,"src":"16677:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2780,"name":"address","nodeType":"ElementaryTypeName","src":"16677:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2783,"mutability":"mutable","name":"userData","nameLocation":"16701:8:12","nodeType":"VariableDeclaration","scope":2784,"src":"16695:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2782,"name":"bytes","nodeType":"ElementaryTypeName","src":"16695:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"AfterSwapParams","nameLocation":"16370:15:12","nodeType":"StructDefinition","scope":2855,"src":"16363:349:12","visibility":"public"},{"canonicalName":"AddLiquidityKind","id":2790,"members":[{"id":2785,"name":"PROPORTIONAL","nameLocation":"16951:12:12","nodeType":"EnumValue","src":"16951:12:12"},{"id":2786,"name":"UNBALANCED","nameLocation":"16969:10:12","nodeType":"EnumValue","src":"16969:10:12"},{"id":2787,"name":"SINGLE_TOKEN_EXACT_OUT","nameLocation":"16985:22:12","nodeType":"EnumValue","src":"16985:22:12"},{"id":2788,"name":"DONATION","nameLocation":"17013:8:12","nodeType":"EnumValue","src":"17013:8:12"},{"id":2789,"name":"CUSTOM","nameLocation":"17027:6:12","nodeType":"EnumValue","src":"17027:6:12"}],"name":"AddLiquidityKind","nameLocation":"16928:16:12","nodeType":"EnumDefinition","src":"16923:112:12"},{"canonicalName":"AddLiquidityParams","documentation":{"id":2791,"nodeType":"StructuredDocumentation","src":"17037:320:12","text":" @notice Data for an add liquidity operation.\n @param pool Address of the pool\n @param to Address of user to mint to\n @param maxAmountsIn Maximum amounts of input tokens\n @param minBptAmountOut Minimum amount of output pool tokens\n @param kind Add liquidity kind\n @param userData Optional user data"},"id":2806,"members":[{"constant":false,"id":2793,"mutability":"mutable","name":"pool","nameLocation":"17398:4:12","nodeType":"VariableDeclaration","scope":2806,"src":"17390:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2792,"name":"address","nodeType":"ElementaryTypeName","src":"17390:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2795,"mutability":"mutable","name":"to","nameLocation":"17416:2:12","nodeType":"VariableDeclaration","scope":2806,"src":"17408:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2794,"name":"address","nodeType":"ElementaryTypeName","src":"17408:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2798,"mutability":"mutable","name":"maxAmountsIn","nameLocation":"17434:12:12","nodeType":"VariableDeclaration","scope":2806,"src":"17424:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2796,"name":"uint256","nodeType":"ElementaryTypeName","src":"17424:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2797,"nodeType":"ArrayTypeName","src":"17424:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2800,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"17460:15:12","nodeType":"VariableDeclaration","scope":2806,"src":"17452:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2799,"name":"uint256","nodeType":"ElementaryTypeName","src":"17452:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2803,"mutability":"mutable","name":"kind","nameLocation":"17498:4:12","nodeType":"VariableDeclaration","scope":2806,"src":"17481:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2790","typeString":"enum AddLiquidityKind"},"typeName":{"id":2802,"nodeType":"UserDefinedTypeName","pathNode":{"id":2801,"name":"AddLiquidityKind","nameLocations":["17481:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":2790,"src":"17481:16:12"},"referencedDeclaration":2790,"src":"17481:16:12","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2790","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":2805,"mutability":"mutable","name":"userData","nameLocation":"17514:8:12","nodeType":"VariableDeclaration","scope":2806,"src":"17508:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2804,"name":"bytes","nodeType":"ElementaryTypeName","src":"17508:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"AddLiquidityParams","nameLocation":"17365:18:12","nodeType":"StructDefinition","scope":2855,"src":"17358:167:12","visibility":"public"},{"canonicalName":"RemoveLiquidityKind","id":2811,"members":[{"id":2807,"name":"PROPORTIONAL","nameLocation":"17770:12:12","nodeType":"EnumValue","src":"17770:12:12"},{"id":2808,"name":"SINGLE_TOKEN_EXACT_IN","nameLocation":"17788:21:12","nodeType":"EnumValue","src":"17788:21:12"},{"id":2809,"name":"SINGLE_TOKEN_EXACT_OUT","nameLocation":"17815:22:12","nodeType":"EnumValue","src":"17815:22:12"},{"id":2810,"name":"CUSTOM","nameLocation":"17843:6:12","nodeType":"EnumValue","src":"17843:6:12"}],"name":"RemoveLiquidityKind","nameLocation":"17744:19:12","nodeType":"EnumDefinition","src":"17739:112:12"},{"canonicalName":"RemoveLiquidityParams","documentation":{"id":2812,"nodeType":"StructuredDocumentation","src":"17853:330:12","text":" @notice Data for an remove liquidity operation.\n @param pool Address of the pool\n @param from Address of user to burn from\n @param maxBptAmountIn Maximum amount of input pool tokens\n @param minAmountsOut Minimum amounts of output tokens\n @param kind Remove liquidity kind\n @param userData Optional user data"},"id":2827,"members":[{"constant":false,"id":2814,"mutability":"mutable","name":"pool","nameLocation":"18227:4:12","nodeType":"VariableDeclaration","scope":2827,"src":"18219:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2813,"name":"address","nodeType":"ElementaryTypeName","src":"18219:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2816,"mutability":"mutable","name":"from","nameLocation":"18245:4:12","nodeType":"VariableDeclaration","scope":2827,"src":"18237:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2815,"name":"address","nodeType":"ElementaryTypeName","src":"18237:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2818,"mutability":"mutable","name":"maxBptAmountIn","nameLocation":"18263:14:12","nodeType":"VariableDeclaration","scope":2827,"src":"18255:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2817,"name":"uint256","nodeType":"ElementaryTypeName","src":"18255:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2821,"mutability":"mutable","name":"minAmountsOut","nameLocation":"18293:13:12","nodeType":"VariableDeclaration","scope":2827,"src":"18283:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2819,"name":"uint256","nodeType":"ElementaryTypeName","src":"18283:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2820,"nodeType":"ArrayTypeName","src":"18283:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2824,"mutability":"mutable","name":"kind","nameLocation":"18332:4:12","nodeType":"VariableDeclaration","scope":2827,"src":"18312:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2811","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":2823,"nodeType":"UserDefinedTypeName","pathNode":{"id":2822,"name":"RemoveLiquidityKind","nameLocations":["18312:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":2811,"src":"18312:19:12"},"referencedDeclaration":2811,"src":"18312:19:12","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2811","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":2826,"mutability":"mutable","name":"userData","nameLocation":"18348:8:12","nodeType":"VariableDeclaration","scope":2827,"src":"18342:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2825,"name":"bytes","nodeType":"ElementaryTypeName","src":"18342:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"RemoveLiquidityParams","nameLocation":"18191:21:12","nodeType":"StructDefinition","scope":2855,"src":"18184:175:12","visibility":"public"},{"canonicalName":"WrappingDirection","id":2830,"members":[{"id":2828,"name":"WRAP","nameLocation":"18602:4:12","nodeType":"EnumValue","src":"18602:4:12"},{"id":2829,"name":"UNWRAP","nameLocation":"18612:6:12","nodeType":"EnumValue","src":"18612:6:12"}],"name":"WrappingDirection","nameLocation":"18578:17:12","nodeType":"EnumDefinition","src":"18573:47:12"},{"canonicalName":"BufferWrapOrUnwrapParams","documentation":{"id":2831,"nodeType":"StructuredDocumentation","src":"18622:499:12","text":" @notice Data for a wrap/unwrap operation.\n @param kind Type of swap (Exact In or Exact Out)\n @param direction Direction of the wrapping operation (Wrap or Unwrap)\n @param wrappedToken Wrapped token, compatible with interface ERC4626\n @param amountGivenRaw Amount specified for tokenIn or tokenOut (depends on the type of swap and wrapping direction)\n @param limitRaw Minimum or maximum amount specified for the other token (depends on the type of swap and wrapping\n direction)"},"id":2845,"members":[{"constant":false,"id":2834,"mutability":"mutable","name":"kind","nameLocation":"19169:4:12","nodeType":"VariableDeclaration","scope":2845,"src":"19160:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2718","typeString":"enum SwapKind"},"typeName":{"id":2833,"nodeType":"UserDefinedTypeName","pathNode":{"id":2832,"name":"SwapKind","nameLocations":["19160:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2718,"src":"19160:8:12"},"referencedDeclaration":2718,"src":"19160:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2718","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":2837,"mutability":"mutable","name":"direction","nameLocation":"19197:9:12","nodeType":"VariableDeclaration","scope":2845,"src":"19179:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_WrappingDirection_$2830","typeString":"enum WrappingDirection"},"typeName":{"id":2836,"nodeType":"UserDefinedTypeName","pathNode":{"id":2835,"name":"WrappingDirection","nameLocations":["19179:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2830,"src":"19179:17:12"},"referencedDeclaration":2830,"src":"19179:17:12","typeDescriptions":{"typeIdentifier":"t_enum$_WrappingDirection_$2830","typeString":"enum WrappingDirection"}},"visibility":"internal"},{"constant":false,"id":2840,"mutability":"mutable","name":"wrappedToken","nameLocation":"19221:12:12","nodeType":"VariableDeclaration","scope":2845,"src":"19212:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":2839,"nodeType":"UserDefinedTypeName","pathNode":{"id":2838,"name":"IERC4626","nameLocations":["19212:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"19212:8:12"},"referencedDeclaration":3024,"src":"19212:8:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":2842,"mutability":"mutable","name":"amountGivenRaw","nameLocation":"19247:14:12","nodeType":"VariableDeclaration","scope":2845,"src":"19239:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2841,"name":"uint256","nodeType":"ElementaryTypeName","src":"19239:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2844,"mutability":"mutable","name":"limitRaw","nameLocation":"19275:8:12","nodeType":"VariableDeclaration","scope":2845,"src":"19267:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2843,"name":"uint256","nodeType":"ElementaryTypeName","src":"19267:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"BufferWrapOrUnwrapParams","nameLocation":"19129:24:12","nodeType":"StructDefinition","scope":2855,"src":"19122:164:12","visibility":"public"},{"constant":true,"id":2848,"mutability":"constant","name":"FEE_BITLENGTH","nameLocation":"19611:13:12","nodeType":"VariableDeclaration","scope":2855,"src":"19594:35:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2846,"name":"uint256","nodeType":"ElementaryTypeName","src":"19594:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3234","id":2847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19627:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"visibility":"internal"},{"constant":true,"id":2851,"mutability":"constant","name":"FEE_SCALING_FACTOR","nameLocation":"19648:18:12","nodeType":"VariableDeclaration","scope":2855,"src":"19631:42:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2849,"name":"uint256","nodeType":"ElementaryTypeName","src":"19631:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653131","id":2850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19669:4:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000000_by_1","typeString":"int_const 100000000000"},"value":"1e11"},"visibility":"internal"},{"constant":true,"id":2854,"mutability":"constant","name":"MAX_FEE_PERCENTAGE","nameLocation":"19896:18:12","nodeType":"VariableDeclaration","scope":2855,"src":"19879:48:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2852,"name":"uint256","nodeType":"ElementaryTypeName","src":"19879:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"39392e39393939653136","id":2853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19917:10:12","typeDescriptions":{"typeIdentifier":"t_rational_999999000000000000_by_1","typeString":"int_const 999999000000000000"},"value":"99.9999e16"},"visibility":"internal"}],"src":"46:19895:12"},"id":12},"@openzeppelin/contracts/interfaces/IERC4626.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","exportedSymbols":{"IERC20":[3102],"IERC20Metadata":[3128],"IERC4626":[3024]},"id":3025,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2856,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":2858,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3025,"sourceUnit":3103,"src":"133:49:13","symbolAliases":[{"foreign":{"id":2857,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"141:6:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"../token/ERC20/extensions/IERC20Metadata.sol","id":2860,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3025,"sourceUnit":3129,"src":"183:76:13","symbolAliases":[{"foreign":{"id":2859,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"191:14:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2862,"name":"IERC20","nameLocations":["420:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"420:6:13"},"id":2863,"nodeType":"InheritanceSpecifier","src":"420:6:13"},{"baseName":{"id":2864,"name":"IERC20Metadata","nameLocations":["428:14:13"],"nodeType":"IdentifierPath","referencedDeclaration":3128,"src":"428:14:13"},"id":2865,"nodeType":"InheritanceSpecifier","src":"428:14:13"}],"canonicalName":"IERC4626","contractDependencies":[],"contractKind":"interface","documentation":{"id":2861,"nodeType":"StructuredDocumentation","src":"261:136:13","text":" @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n https://eips.ethereum.org/EIPS/eip-4626[ERC-4626]."},"fullyImplemented":false,"id":3024,"linearizedBaseContracts":[3024,3128,3102],"name":"IERC4626","nameLocation":"408:8:13","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"dcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7","id":2875,"name":"Deposit","nameLocation":"455:7:13","nodeType":"EventDefinition","parameters":{"id":2874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2867,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"479:6:13","nodeType":"VariableDeclaration","scope":2875,"src":"463:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2866,"name":"address","nodeType":"ElementaryTypeName","src":"463:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2869,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"503:5:13","nodeType":"VariableDeclaration","scope":2875,"src":"487:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2868,"name":"address","nodeType":"ElementaryTypeName","src":"487:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2871,"indexed":false,"mutability":"mutable","name":"assets","nameLocation":"518:6:13","nodeType":"VariableDeclaration","scope":2875,"src":"510:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2870,"name":"uint256","nodeType":"ElementaryTypeName","src":"510:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2873,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"534:6:13","nodeType":"VariableDeclaration","scope":2875,"src":"526:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2872,"name":"uint256","nodeType":"ElementaryTypeName","src":"526:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"462:79:13"},"src":"449:93:13"},{"anonymous":false,"eventSelector":"fbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db","id":2887,"name":"Withdraw","nameLocation":"554:8:13","nodeType":"EventDefinition","parameters":{"id":2886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2877,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"588:6:13","nodeType":"VariableDeclaration","scope":2887,"src":"572:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2876,"name":"address","nodeType":"ElementaryTypeName","src":"572:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2879,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"620:8:13","nodeType":"VariableDeclaration","scope":2887,"src":"604:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2878,"name":"address","nodeType":"ElementaryTypeName","src":"604:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2881,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"654:5:13","nodeType":"VariableDeclaration","scope":2887,"src":"638:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2880,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2883,"indexed":false,"mutability":"mutable","name":"assets","nameLocation":"677:6:13","nodeType":"VariableDeclaration","scope":2887,"src":"669:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2882,"name":"uint256","nodeType":"ElementaryTypeName","src":"669:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2885,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"701:6:13","nodeType":"VariableDeclaration","scope":2887,"src":"693:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2884,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"562:151:13"},"src":"548:166:13"},{"documentation":{"id":2888,"nodeType":"StructuredDocumentation","src":"720:207:13","text":" @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n - MUST be an ERC-20 token contract.\n - MUST NOT revert."},"functionSelector":"38d52e0f","id":2893,"implemented":false,"kind":"function","modifiers":[],"name":"asset","nameLocation":"941:5:13","nodeType":"FunctionDefinition","parameters":{"id":2889,"nodeType":"ParameterList","parameters":[],"src":"946:2:13"},"returnParameters":{"id":2892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2891,"mutability":"mutable","name":"assetTokenAddress","nameLocation":"980:17:13","nodeType":"VariableDeclaration","scope":2893,"src":"972:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2890,"name":"address","nodeType":"ElementaryTypeName","src":"972:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"971:27:13"},"scope":3024,"src":"932:67:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2894,"nodeType":"StructuredDocumentation","src":"1005:286:13","text":" @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n - SHOULD include any compounding that occurs from yield.\n - MUST be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT revert."},"functionSelector":"01e1d114","id":2899,"implemented":false,"kind":"function","modifiers":[],"name":"totalAssets","nameLocation":"1305:11:13","nodeType":"FunctionDefinition","parameters":{"id":2895,"nodeType":"ParameterList","parameters":[],"src":"1316:2:13"},"returnParameters":{"id":2898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2897,"mutability":"mutable","name":"totalManagedAssets","nameLocation":"1350:18:13","nodeType":"VariableDeclaration","scope":2899,"src":"1342:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2896,"name":"uint256","nodeType":"ElementaryTypeName","src":"1342:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1341:28:13"},"scope":3024,"src":"1296:74:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2900,"nodeType":"StructuredDocumentation","src":"1376:720:13","text":" @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."},"functionSelector":"c6e6f592","id":2907,"implemented":false,"kind":"function","modifiers":[],"name":"convertToShares","nameLocation":"2110:15:13","nodeType":"FunctionDefinition","parameters":{"id":2903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2902,"mutability":"mutable","name":"assets","nameLocation":"2134:6:13","nodeType":"VariableDeclaration","scope":2907,"src":"2126:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2901,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2125:16:13"},"returnParameters":{"id":2906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2905,"mutability":"mutable","name":"shares","nameLocation":"2173:6:13","nodeType":"VariableDeclaration","scope":2907,"src":"2165:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2904,"name":"uint256","nodeType":"ElementaryTypeName","src":"2165:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2164:16:13"},"scope":3024,"src":"2101:80:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2908,"nodeType":"StructuredDocumentation","src":"2187:720:13","text":" @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."},"functionSelector":"07a2d13a","id":2915,"implemented":false,"kind":"function","modifiers":[],"name":"convertToAssets","nameLocation":"2921:15:13","nodeType":"FunctionDefinition","parameters":{"id":2911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2910,"mutability":"mutable","name":"shares","nameLocation":"2945:6:13","nodeType":"VariableDeclaration","scope":2915,"src":"2937:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2909,"name":"uint256","nodeType":"ElementaryTypeName","src":"2937:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2936:16:13"},"returnParameters":{"id":2914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2913,"mutability":"mutable","name":"assets","nameLocation":"2984:6:13","nodeType":"VariableDeclaration","scope":2915,"src":"2976:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2912,"name":"uint256","nodeType":"ElementaryTypeName","src":"2976:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2975:16:13"},"scope":3024,"src":"2912:80:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2916,"nodeType":"StructuredDocumentation","src":"2998:386:13","text":" @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n through a deposit call.\n - MUST return a limited value if receiver is subject to some deposit limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n - MUST NOT revert."},"functionSelector":"402d267d","id":2923,"implemented":false,"kind":"function","modifiers":[],"name":"maxDeposit","nameLocation":"3398:10:13","nodeType":"FunctionDefinition","parameters":{"id":2919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2918,"mutability":"mutable","name":"receiver","nameLocation":"3417:8:13","nodeType":"VariableDeclaration","scope":2923,"src":"3409:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2917,"name":"address","nodeType":"ElementaryTypeName","src":"3409:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3408:18:13"},"returnParameters":{"id":2922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2921,"mutability":"mutable","name":"maxAssets","nameLocation":"3458:9:13","nodeType":"VariableDeclaration","scope":2923,"src":"3450:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2920,"name":"uint256","nodeType":"ElementaryTypeName","src":"3450:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3449:19:13"},"scope":3024,"src":"3389:80:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2924,"nodeType":"StructuredDocumentation","src":"3475:1012:13","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n current on-chain conditions.\n - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n   in the same transaction.\n - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."},"functionSelector":"ef8b30f7","id":2931,"implemented":false,"kind":"function","modifiers":[],"name":"previewDeposit","nameLocation":"4501:14:13","nodeType":"FunctionDefinition","parameters":{"id":2927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2926,"mutability":"mutable","name":"assets","nameLocation":"4524:6:13","nodeType":"VariableDeclaration","scope":2931,"src":"4516:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2925,"name":"uint256","nodeType":"ElementaryTypeName","src":"4516:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4515:16:13"},"returnParameters":{"id":2930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2929,"mutability":"mutable","name":"shares","nameLocation":"4563:6:13","nodeType":"VariableDeclaration","scope":2931,"src":"4555:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2928,"name":"uint256","nodeType":"ElementaryTypeName","src":"4555:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4554:16:13"},"scope":3024,"src":"4492:79:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2932,"nodeType":"StructuredDocumentation","src":"4577:651:13","text":" @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   deposit execution, and are accounted for during deposit.\n - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."},"functionSelector":"6e553f65","id":2941,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"5242:7:13","nodeType":"FunctionDefinition","parameters":{"id":2937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2934,"mutability":"mutable","name":"assets","nameLocation":"5258:6:13","nodeType":"VariableDeclaration","scope":2941,"src":"5250:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2933,"name":"uint256","nodeType":"ElementaryTypeName","src":"5250:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2936,"mutability":"mutable","name":"receiver","nameLocation":"5274:8:13","nodeType":"VariableDeclaration","scope":2941,"src":"5266:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2935,"name":"address","nodeType":"ElementaryTypeName","src":"5266:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5249:34:13"},"returnParameters":{"id":2940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2939,"mutability":"mutable","name":"shares","nameLocation":"5310:6:13","nodeType":"VariableDeclaration","scope":2941,"src":"5302:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2938,"name":"uint256","nodeType":"ElementaryTypeName","src":"5302:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5301:16:13"},"scope":3024,"src":"5233:85:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2942,"nodeType":"StructuredDocumentation","src":"5324:341:13","text":" @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n - MUST return a limited value if receiver is subject to some mint limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n - MUST NOT revert."},"functionSelector":"c63d75b6","id":2949,"implemented":false,"kind":"function","modifiers":[],"name":"maxMint","nameLocation":"5679:7:13","nodeType":"FunctionDefinition","parameters":{"id":2945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2944,"mutability":"mutable","name":"receiver","nameLocation":"5695:8:13","nodeType":"VariableDeclaration","scope":2949,"src":"5687:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2943,"name":"address","nodeType":"ElementaryTypeName","src":"5687:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5686:18:13"},"returnParameters":{"id":2948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2947,"mutability":"mutable","name":"maxShares","nameLocation":"5736:9:13","nodeType":"VariableDeclaration","scope":2949,"src":"5728:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2946,"name":"uint256","nodeType":"ElementaryTypeName","src":"5728:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5727:19:13"},"scope":3024,"src":"5670:77:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2950,"nodeType":"StructuredDocumentation","src":"5753:984:13","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n   same transaction.\n - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n   would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by minting."},"functionSelector":"b3d7f6b9","id":2957,"implemented":false,"kind":"function","modifiers":[],"name":"previewMint","nameLocation":"6751:11:13","nodeType":"FunctionDefinition","parameters":{"id":2953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2952,"mutability":"mutable","name":"shares","nameLocation":"6771:6:13","nodeType":"VariableDeclaration","scope":2957,"src":"6763:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2951,"name":"uint256","nodeType":"ElementaryTypeName","src":"6763:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6762:16:13"},"returnParameters":{"id":2956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2955,"mutability":"mutable","name":"assets","nameLocation":"6810:6:13","nodeType":"VariableDeclaration","scope":2957,"src":"6802:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2954,"name":"uint256","nodeType":"ElementaryTypeName","src":"6802:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6801:16:13"},"scope":3024,"src":"6742:76:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2958,"nodeType":"StructuredDocumentation","src":"6824:642:13","text":" @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n   execution, and are accounted for during mint.\n - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."},"functionSelector":"94bf804d","id":2967,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"7480:4:13","nodeType":"FunctionDefinition","parameters":{"id":2963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2960,"mutability":"mutable","name":"shares","nameLocation":"7493:6:13","nodeType":"VariableDeclaration","scope":2967,"src":"7485:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2959,"name":"uint256","nodeType":"ElementaryTypeName","src":"7485:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2962,"mutability":"mutable","name":"receiver","nameLocation":"7509:8:13","nodeType":"VariableDeclaration","scope":2967,"src":"7501:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2961,"name":"address","nodeType":"ElementaryTypeName","src":"7501:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7484:34:13"},"returnParameters":{"id":2966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2965,"mutability":"mutable","name":"assets","nameLocation":"7545:6:13","nodeType":"VariableDeclaration","scope":2967,"src":"7537:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2964,"name":"uint256","nodeType":"ElementaryTypeName","src":"7537:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7536:16:13"},"scope":3024,"src":"7471:82:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2968,"nodeType":"StructuredDocumentation","src":"7559:293:13","text":" @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n Vault, through a withdraw call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST NOT revert."},"functionSelector":"ce96cb77","id":2975,"implemented":false,"kind":"function","modifiers":[],"name":"maxWithdraw","nameLocation":"7866:11:13","nodeType":"FunctionDefinition","parameters":{"id":2971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2970,"mutability":"mutable","name":"owner","nameLocation":"7886:5:13","nodeType":"VariableDeclaration","scope":2975,"src":"7878:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2969,"name":"address","nodeType":"ElementaryTypeName","src":"7878:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7877:15:13"},"returnParameters":{"id":2974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"maxAssets","nameLocation":"7924:9:13","nodeType":"VariableDeclaration","scope":2975,"src":"7916:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2972,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7915:19:13"},"scope":3024,"src":"7857:78:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2976,"nodeType":"StructuredDocumentation","src":"7941:1034:13","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n given current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n   called\n   in the same transaction.\n - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."},"functionSelector":"0a28a477","id":2983,"implemented":false,"kind":"function","modifiers":[],"name":"previewWithdraw","nameLocation":"8989:15:13","nodeType":"FunctionDefinition","parameters":{"id":2979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2978,"mutability":"mutable","name":"assets","nameLocation":"9013:6:13","nodeType":"VariableDeclaration","scope":2983,"src":"9005:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2977,"name":"uint256","nodeType":"ElementaryTypeName","src":"9005:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9004:16:13"},"returnParameters":{"id":2982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2981,"mutability":"mutable","name":"shares","nameLocation":"9052:6:13","nodeType":"VariableDeclaration","scope":2983,"src":"9044:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2980,"name":"uint256","nodeType":"ElementaryTypeName","src":"9044:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9043:16:13"},"scope":3024,"src":"8980:80:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2984,"nodeType":"StructuredDocumentation","src":"9066:670:13","text":" @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   withdraw execution, and are accounted for during withdraw.\n - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."},"functionSelector":"b460af94","id":2995,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"9750:8:13","nodeType":"FunctionDefinition","parameters":{"id":2991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2986,"mutability":"mutable","name":"assets","nameLocation":"9767:6:13","nodeType":"VariableDeclaration","scope":2995,"src":"9759:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2985,"name":"uint256","nodeType":"ElementaryTypeName","src":"9759:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2988,"mutability":"mutable","name":"receiver","nameLocation":"9783:8:13","nodeType":"VariableDeclaration","scope":2995,"src":"9775:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2987,"name":"address","nodeType":"ElementaryTypeName","src":"9775:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2990,"mutability":"mutable","name":"owner","nameLocation":"9801:5:13","nodeType":"VariableDeclaration","scope":2995,"src":"9793:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2989,"name":"address","nodeType":"ElementaryTypeName","src":"9793:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9758:49:13"},"returnParameters":{"id":2994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2993,"mutability":"mutable","name":"shares","nameLocation":"9834:6:13","nodeType":"VariableDeclaration","scope":2995,"src":"9826:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2992,"name":"uint256","nodeType":"ElementaryTypeName","src":"9826:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9825:16:13"},"scope":3024,"src":"9741:101:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2996,"nodeType":"StructuredDocumentation","src":"9848:381:13","text":" @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n through a redeem call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n - MUST NOT revert."},"functionSelector":"d905777e","id":3003,"implemented":false,"kind":"function","modifiers":[],"name":"maxRedeem","nameLocation":"10243:9:13","nodeType":"FunctionDefinition","parameters":{"id":2999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2998,"mutability":"mutable","name":"owner","nameLocation":"10261:5:13","nodeType":"VariableDeclaration","scope":3003,"src":"10253:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2997,"name":"address","nodeType":"ElementaryTypeName","src":"10253:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10252:15:13"},"returnParameters":{"id":3002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3001,"mutability":"mutable","name":"maxShares","nameLocation":"10299:9:13","nodeType":"VariableDeclaration","scope":3003,"src":"10291:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3000,"name":"uint256","nodeType":"ElementaryTypeName","src":"10291:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10290:19:13"},"scope":3024,"src":"10234:76:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3004,"nodeType":"StructuredDocumentation","src":"10316:1010:13","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n given current on-chain conditions.\n - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n   same transaction.\n - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n   redemption would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by redeeming."},"functionSelector":"4cdad506","id":3011,"implemented":false,"kind":"function","modifiers":[],"name":"previewRedeem","nameLocation":"11340:13:13","nodeType":"FunctionDefinition","parameters":{"id":3007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3006,"mutability":"mutable","name":"shares","nameLocation":"11362:6:13","nodeType":"VariableDeclaration","scope":3011,"src":"11354:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3005,"name":"uint256","nodeType":"ElementaryTypeName","src":"11354:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11353:16:13"},"returnParameters":{"id":3010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3009,"mutability":"mutable","name":"assets","nameLocation":"11401:6:13","nodeType":"VariableDeclaration","scope":3011,"src":"11393:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3008,"name":"uint256","nodeType":"ElementaryTypeName","src":"11393:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11392:16:13"},"scope":3024,"src":"11331:78:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3012,"nodeType":"StructuredDocumentation","src":"11415:661:13","text":" @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   redeem execution, and are accounted for during redeem.\n - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."},"functionSelector":"ba087652","id":3023,"implemented":false,"kind":"function","modifiers":[],"name":"redeem","nameLocation":"12090:6:13","nodeType":"FunctionDefinition","parameters":{"id":3019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3014,"mutability":"mutable","name":"shares","nameLocation":"12105:6:13","nodeType":"VariableDeclaration","scope":3023,"src":"12097:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3013,"name":"uint256","nodeType":"ElementaryTypeName","src":"12097:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3016,"mutability":"mutable","name":"receiver","nameLocation":"12121:8:13","nodeType":"VariableDeclaration","scope":3023,"src":"12113:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3015,"name":"address","nodeType":"ElementaryTypeName","src":"12113:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3018,"mutability":"mutable","name":"owner","nameLocation":"12139:5:13","nodeType":"VariableDeclaration","scope":3023,"src":"12131:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3017,"name":"address","nodeType":"ElementaryTypeName","src":"12131:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12096:49:13"},"returnParameters":{"id":3022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3021,"mutability":"mutable","name":"assets","nameLocation":"12172:6:13","nodeType":"VariableDeclaration","scope":3023,"src":"12164:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3020,"name":"uint256","nodeType":"ElementaryTypeName","src":"12164:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12163:16:13"},"scope":3024,"src":"12081:99:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3025,"src":"398:11784:13","usedErrors":[],"usedEvents":[2875,2887,3036,3045]}],"src":"107:12076:13"},"id":13},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[3102]},"id":3103,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3026,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":3027,"nodeType":"StructuredDocumentation","src":"132:70:14","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":3102,"linearizedBaseContracts":[3102],"name":"IERC20","nameLocation":"213:6:14","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3028,"nodeType":"StructuredDocumentation","src":"226:158:14","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3036,"name":"Transfer","nameLocation":"395:8:14","nodeType":"EventDefinition","parameters":{"id":3035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3030,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"420:4:14","nodeType":"VariableDeclaration","scope":3036,"src":"404:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3029,"name":"address","nodeType":"ElementaryTypeName","src":"404:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3032,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"442:2:14","nodeType":"VariableDeclaration","scope":3036,"src":"426:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3031,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3034,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"454:5:14","nodeType":"VariableDeclaration","scope":3036,"src":"446:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3033,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"403:57:14"},"src":"389:72:14"},{"anonymous":false,"documentation":{"id":3037,"nodeType":"StructuredDocumentation","src":"467:148:14","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3045,"name":"Approval","nameLocation":"626:8:14","nodeType":"EventDefinition","parameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3039,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"651:5:14","nodeType":"VariableDeclaration","scope":3045,"src":"635:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3038,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3041,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"674:7:14","nodeType":"VariableDeclaration","scope":3045,"src":"658:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3040,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3043,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"691:5:14","nodeType":"VariableDeclaration","scope":3045,"src":"683:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3042,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"634:63:14"},"src":"620:78:14"},{"documentation":{"id":3046,"nodeType":"StructuredDocumentation","src":"704:65:14","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":3051,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:14","nodeType":"FunctionDefinition","parameters":{"id":3047,"nodeType":"ParameterList","parameters":[],"src":"794:2:14"},"returnParameters":{"id":3050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3051,"src":"820:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3048,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:14"},"scope":3102,"src":"774:55:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3052,"nodeType":"StructuredDocumentation","src":"835:71:14","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":3059,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"920:9:14","nodeType":"FunctionDefinition","parameters":{"id":3055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3054,"mutability":"mutable","name":"account","nameLocation":"938:7:14","nodeType":"VariableDeclaration","scope":3059,"src":"930:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3053,"name":"address","nodeType":"ElementaryTypeName","src":"930:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"929:17:14"},"returnParameters":{"id":3058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3057,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3059,"src":"970:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3056,"name":"uint256","nodeType":"ElementaryTypeName","src":"970:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"969:9:14"},"scope":3102,"src":"911:68:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3060,"nodeType":"StructuredDocumentation","src":"985:213:14","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":3069,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1212:8:14","nodeType":"FunctionDefinition","parameters":{"id":3065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3062,"mutability":"mutable","name":"to","nameLocation":"1229:2:14","nodeType":"VariableDeclaration","scope":3069,"src":"1221:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3061,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3064,"mutability":"mutable","name":"value","nameLocation":"1241:5:14","nodeType":"VariableDeclaration","scope":3069,"src":"1233:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3063,"name":"uint256","nodeType":"ElementaryTypeName","src":"1233:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:27:14"},"returnParameters":{"id":3068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3067,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3069,"src":"1266:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3066,"name":"bool","nodeType":"ElementaryTypeName","src":"1266:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1265:6:14"},"scope":3102,"src":"1203:69:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3070,"nodeType":"StructuredDocumentation","src":"1278:264:14","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":3079,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1556:9:14","nodeType":"FunctionDefinition","parameters":{"id":3075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3072,"mutability":"mutable","name":"owner","nameLocation":"1574:5:14","nodeType":"VariableDeclaration","scope":3079,"src":"1566:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3071,"name":"address","nodeType":"ElementaryTypeName","src":"1566:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3074,"mutability":"mutable","name":"spender","nameLocation":"1589:7:14","nodeType":"VariableDeclaration","scope":3079,"src":"1581:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3073,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1565:32:14"},"returnParameters":{"id":3078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3077,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3079,"src":"1621:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3076,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1620:9:14"},"scope":3102,"src":"1547:83:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3080,"nodeType":"StructuredDocumentation","src":"1636:667:14","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3089,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2317:7:14","nodeType":"FunctionDefinition","parameters":{"id":3085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3082,"mutability":"mutable","name":"spender","nameLocation":"2333:7:14","nodeType":"VariableDeclaration","scope":3089,"src":"2325:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3081,"name":"address","nodeType":"ElementaryTypeName","src":"2325:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3084,"mutability":"mutable","name":"value","nameLocation":"2350:5:14","nodeType":"VariableDeclaration","scope":3089,"src":"2342:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3083,"name":"uint256","nodeType":"ElementaryTypeName","src":"2342:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2324:32:14"},"returnParameters":{"id":3088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3087,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3089,"src":"2375:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3086,"name":"bool","nodeType":"ElementaryTypeName","src":"2375:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2374:6:14"},"scope":3102,"src":"2308:73:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3090,"nodeType":"StructuredDocumentation","src":"2387:297:14","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3101,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2698:12:14","nodeType":"FunctionDefinition","parameters":{"id":3097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3092,"mutability":"mutable","name":"from","nameLocation":"2719:4:14","nodeType":"VariableDeclaration","scope":3101,"src":"2711:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3091,"name":"address","nodeType":"ElementaryTypeName","src":"2711:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3094,"mutability":"mutable","name":"to","nameLocation":"2733:2:14","nodeType":"VariableDeclaration","scope":3101,"src":"2725:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3093,"name":"address","nodeType":"ElementaryTypeName","src":"2725:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3096,"mutability":"mutable","name":"value","nameLocation":"2745:5:14","nodeType":"VariableDeclaration","scope":3101,"src":"2737:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3095,"name":"uint256","nodeType":"ElementaryTypeName","src":"2737:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2710:41:14"},"returnParameters":{"id":3100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3099,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3101,"src":"2770:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3098,"name":"bool","nodeType":"ElementaryTypeName","src":"2770:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2769:6:14"},"scope":3102,"src":"2689:87:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3103,"src":"203:2575:14","usedErrors":[],"usedEvents":[3036,3045]}],"src":"106:2673:14"},"id":14},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[3102],"IERC20Metadata":[3128]},"id":3129,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3104,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"125:24:15"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":3106,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3129,"sourceUnit":3103,"src":"151:37:15","symbolAliases":[{"foreign":{"id":3105,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"159:6:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3108,"name":"IERC20","nameLocations":["305:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"305:6:15"},"id":3109,"nodeType":"InheritanceSpecifier","src":"305:6:15"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":3107,"nodeType":"StructuredDocumentation","src":"190:86:15","text":" @dev Interface for the optional metadata functions from the ERC20 standard."},"fullyImplemented":false,"id":3128,"linearizedBaseContracts":[3128,3102],"name":"IERC20Metadata","nameLocation":"287:14:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3110,"nodeType":"StructuredDocumentation","src":"318:54:15","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":3115,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:15","nodeType":"FunctionDefinition","parameters":{"id":3111,"nodeType":"ParameterList","parameters":[],"src":"390:2:15"},"returnParameters":{"id":3114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3113,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3115,"src":"416:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3112,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:15"},"scope":3128,"src":"377:54:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3116,"nodeType":"StructuredDocumentation","src":"437:56:15","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":3121,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:15","nodeType":"FunctionDefinition","parameters":{"id":3117,"nodeType":"ParameterList","parameters":[],"src":"513:2:15"},"returnParameters":{"id":3120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3121,"src":"539:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3118,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:15"},"scope":3128,"src":"498:56:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3122,"nodeType":"StructuredDocumentation","src":"560:65:15","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":3127,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:15","nodeType":"FunctionDefinition","parameters":{"id":3123,"nodeType":"ParameterList","parameters":[],"src":"647:2:15"},"returnParameters":{"id":3126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3127,"src":"673:5:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3124,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:15"},"scope":3128,"src":"630:50:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3129,"src":"277:405:15","usedErrors":[],"usedEvents":[3036,3045]}],"src":"125:558:15"},"id":15},"contracts/VaultExplorer.sol":{"ast":{"absolutePath":"contracts/VaultExplorer.sol","exportedSymbols":{"HooksConfig":[2634],"IERC20":[3102],"IERC4626":[3024],"IVault":[618],"IVaultExplorer":[1990],"IVaultExtension":[2409],"PoolConfig":[2588],"PoolData":[2712],"PoolRoleAccounts":[2660],"PoolSwapParams":[2755],"TokenInfo":[2687],"VaultExplorer":[3966]},"id":3967,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3130,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:16"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":3132,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3967,"sourceUnit":3025,"src":"72:75:16","symbolAliases":[{"foreign":{"id":3131,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"81:8:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3134,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3967,"sourceUnit":3103,"src":"148:72:16","symbolAliases":[{"foreign":{"id":3133,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"157:6:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol","id":3136,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3967,"sourceUnit":2410,"src":"222:99:16","symbolAliases":[{"foreign":{"id":3135,"name":"IVaultExtension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2409,"src":"231:15:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultExplorer.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVaultExplorer.sol","id":3138,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3967,"sourceUnit":1991,"src":"322:97:16","symbolAliases":[{"foreign":{"id":3137,"name":"IVaultExplorer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"331:14:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","id":3140,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3967,"sourceUnit":619,"src":"420:81:16","symbolAliases":[{"foreign":{"id":3139,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"429:6:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","id":3147,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3967,"sourceUnit":2855,"src":"502:181:16","symbolAliases":[{"foreign":{"id":3141,"name":"TokenInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"515:9:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3142,"name":"PoolRoleAccounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"530:16:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3143,"name":"PoolConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"552:10:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3144,"name":"HooksConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"568:11:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3145,"name":"PoolData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"585:8:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3146,"name":"PoolSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"599:14:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3148,"name":"IVaultExplorer","nameLocations":["711:14:16"],"nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"711:14:16"},"id":3149,"nodeType":"InheritanceSpecifier","src":"711:14:16"}],"canonicalName":"VaultExplorer","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3966,"linearizedBaseContracts":[3966,1990],"name":"VaultExplorer","nameLocation":"694:13:16","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3152,"mutability":"immutable","name":"_vault","nameLocation":"758:6:16","nodeType":"VariableDeclaration","scope":3966,"src":"732:32:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"},"typeName":{"id":3151,"nodeType":"UserDefinedTypeName","pathNode":{"id":3150,"name":"IVault","nameLocations":["732:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":618,"src":"732:6:16"},"referencedDeclaration":618,"src":"732:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"visibility":"internal"},{"body":{"id":3162,"nodeType":"Block","src":"797:31:16","statements":[{"expression":{"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3158,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"807:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3159,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"816:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"src":"807:14:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3161,"nodeType":"ExpressionStatement","src":"807:14:16"}]},"id":3163,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3155,"mutability":"mutable","name":"vault","nameLocation":"790:5:16","nodeType":"VariableDeclaration","scope":3163,"src":"783:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"},"typeName":{"id":3154,"nodeType":"UserDefinedTypeName","pathNode":{"id":3153,"name":"IVault","nameLocations":["783:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":618,"src":"783:6:16"},"referencedDeclaration":618,"src":"783:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"visibility":"internal"}],"src":"782:14:16"},"returnParameters":{"id":3157,"nodeType":"ParameterList","parameters":[],"src":"797:0:16"},"scope":3966,"src":"771:57:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1534],"body":{"id":3174,"nodeType":"Block","src":"1140:39:16","statements":[{"expression":{"arguments":[{"id":3171,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"1165:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}],"id":3170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1157:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3169,"name":"address","nodeType":"ElementaryTypeName","src":"1157:7:16","typeDescriptions":{}}},"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1157:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3168,"id":3173,"nodeType":"Return","src":"1150:22:16"}]},"documentation":{"id":3164,"nodeType":"StructuredDocumentation","src":"1047:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"8d928af8","id":3175,"implemented":true,"kind":"function","modifiers":[],"name":"getVault","nameLocation":"1091:8:16","nodeType":"FunctionDefinition","parameters":{"id":3165,"nodeType":"ParameterList","parameters":[],"src":"1099:2:16"},"returnParameters":{"id":3168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3167,"mutability":"mutable","name":"vault","nameLocation":"1133:5:16","nodeType":"VariableDeclaration","scope":3175,"src":"1125:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3166,"name":"address","nodeType":"ElementaryTypeName","src":"1125:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1124:15:16"},"scope":3966,"src":"1082:97:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1540],"body":{"id":3185,"nodeType":"Block","src":"1296:50:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3181,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"1313:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1320:17:16","memberName":"getVaultExtension","nodeType":"MemberAccess","referencedDeclaration":2544,"src":"1313:24:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1313:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3180,"id":3184,"nodeType":"Return","src":"1306:33:16"}]},"documentation":{"id":3176,"nodeType":"StructuredDocumentation","src":"1185:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"b9a8effa","id":3186,"implemented":true,"kind":"function","modifiers":[],"name":"getVaultExtension","nameLocation":"1229:17:16","nodeType":"FunctionDefinition","parameters":{"id":3177,"nodeType":"ParameterList","parameters":[],"src":"1246:2:16"},"returnParameters":{"id":3180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3179,"mutability":"mutable","name":"vaultExtension","nameLocation":"1280:14:16","nodeType":"VariableDeclaration","scope":3186,"src":"1272:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3178,"name":"address","nodeType":"ElementaryTypeName","src":"1272:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1271:24:16"},"scope":3966,"src":"1220:126:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1546],"body":{"id":3200,"nodeType":"Block","src":"1455:83:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3193,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"1488:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1495:17:16","memberName":"getVaultExtension","nodeType":"MemberAccess","referencedDeclaration":2544,"src":"1488:24:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1488:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3192,"name":"IVaultExtension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2409,"src":"1472:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IVaultExtension_$2409_$","typeString":"type(contract IVaultExtension)"}},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1472:43:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVaultExtension_$2409","typeString":"contract IVaultExtension"}},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1516:13:16","memberName":"getVaultAdmin","nodeType":"MemberAccess","referencedDeclaration":2019,"src":"1472:57:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1472:59:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3191,"id":3199,"nodeType":"Return","src":"1465:66:16"}]},"documentation":{"id":3187,"nodeType":"StructuredDocumentation","src":"1352:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"1ba0ae45","id":3201,"implemented":true,"kind":"function","modifiers":[],"name":"getVaultAdmin","nameLocation":"1396:13:16","nodeType":"FunctionDefinition","parameters":{"id":3188,"nodeType":"ParameterList","parameters":[],"src":"1409:2:16"},"returnParameters":{"id":3191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3190,"mutability":"mutable","name":"vaultAdmin","nameLocation":"1443:10:16","nodeType":"VariableDeclaration","scope":3201,"src":"1435:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3189,"name":"address","nodeType":"ElementaryTypeName","src":"1435:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1434:20:16"},"scope":3966,"src":"1387:151:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1552],"body":{"id":3214,"nodeType":"Block","src":"1647:55:16","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3209,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"1672:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1679:13:16","memberName":"getAuthorizer","nodeType":"MemberAccess","referencedDeclaration":2408,"src":"1672:20:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IAuthorizer_$40_$","typeString":"function () view external returns (contract IAuthorizer)"}},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1672:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$40","typeString":"contract IAuthorizer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IAuthorizer_$40","typeString":"contract IAuthorizer"}],"id":3208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1664:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3207,"name":"address","nodeType":"ElementaryTypeName","src":"1664:7:16","typeDescriptions":{}}},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1664:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3206,"id":3213,"nodeType":"Return","src":"1657:38:16"}]},"documentation":{"id":3202,"nodeType":"StructuredDocumentation","src":"1544:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"aaabadc5","id":3215,"implemented":true,"kind":"function","modifiers":[],"name":"getAuthorizer","nameLocation":"1588:13:16","nodeType":"FunctionDefinition","parameters":{"id":3203,"nodeType":"ParameterList","parameters":[],"src":"1601:2:16"},"returnParameters":{"id":3206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3205,"mutability":"mutable","name":"authorizer","nameLocation":"1635:10:16","nodeType":"VariableDeclaration","scope":3215,"src":"1627:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3204,"name":"address","nodeType":"ElementaryTypeName","src":"1627:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1626:20:16"},"scope":3966,"src":"1579:123:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1558],"body":{"id":3228,"nodeType":"Block","src":"1833:66:16","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3223,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"1858:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1865:24:16","memberName":"getProtocolFeeController","nodeType":"MemberAccess","referencedDeclaration":2343,"src":"1858:31:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IProtocolFeeController_$580_$","typeString":"function () view external returns (contract IProtocolFeeController)"}},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1858:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$580","typeString":"contract IProtocolFeeController"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IProtocolFeeController_$580","typeString":"contract IProtocolFeeController"}],"id":3222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1850:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3221,"name":"address","nodeType":"ElementaryTypeName","src":"1850:7:16","typeDescriptions":{}}},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1850:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3220,"id":3227,"nodeType":"Return","src":"1843:49:16"}]},"documentation":{"id":3216,"nodeType":"StructuredDocumentation","src":"1708:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"85f2dbd4","id":3229,"implemented":true,"kind":"function","modifiers":[],"name":"getProtocolFeeController","nameLocation":"1752:24:16","nodeType":"FunctionDefinition","parameters":{"id":3217,"nodeType":"ParameterList","parameters":[],"src":"1776:2:16"},"returnParameters":{"id":3220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3219,"mutability":"mutable","name":"protocolFeeController","nameLocation":"1810:21:16","nodeType":"VariableDeclaration","scope":3229,"src":"1802:29:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3218,"name":"address","nodeType":"ElementaryTypeName","src":"1802:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1801:31:16"},"scope":3966,"src":"1743:156:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1564],"body":{"id":3239,"nodeType":"Block","src":"2222:43:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3235,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"2239:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2246:10:16","memberName":"isUnlocked","nodeType":"MemberAccess","referencedDeclaration":2025,"src":"2239:17:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$","typeString":"function () view external returns (bool)"}},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2239:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3234,"id":3238,"nodeType":"Return","src":"2232:26:16"}]},"documentation":{"id":3230,"nodeType":"StructuredDocumentation","src":"2127:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"8380edb7","id":3240,"implemented":true,"kind":"function","modifiers":[],"name":"isUnlocked","nameLocation":"2171:10:16","nodeType":"FunctionDefinition","parameters":{"id":3231,"nodeType":"ParameterList","parameters":[],"src":"2181:2:16"},"returnParameters":{"id":3234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3233,"mutability":"mutable","name":"unlocked","nameLocation":"2212:8:16","nodeType":"VariableDeclaration","scope":3240,"src":"2207:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3232,"name":"bool","nodeType":"ElementaryTypeName","src":"2207:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2206:15:16"},"scope":3966,"src":"2162:103:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1570],"body":{"id":3250,"nodeType":"Block","src":"2388:53:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3246,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"2405:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2412:20:16","memberName":"getNonzeroDeltaCount","nodeType":"MemberAccess","referencedDeclaration":2031,"src":"2405:27:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2405:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3245,"id":3249,"nodeType":"Return","src":"2398:36:16"}]},"documentation":{"id":3241,"nodeType":"StructuredDocumentation","src":"2271:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"db817187","id":3251,"implemented":true,"kind":"function","modifiers":[],"name":"getNonzeroDeltaCount","nameLocation":"2315:20:16","nodeType":"FunctionDefinition","parameters":{"id":3242,"nodeType":"ParameterList","parameters":[],"src":"2335:2:16"},"returnParameters":{"id":3245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3244,"mutability":"mutable","name":"nonzeroDeltaCount","nameLocation":"2369:17:16","nodeType":"VariableDeclaration","scope":3251,"src":"2361:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3243,"name":"uint256","nodeType":"ElementaryTypeName","src":"2361:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2360:27:16"},"scope":3966,"src":"2306:135:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1579],"body":{"id":3265,"nodeType":"Block","src":"2561:51:16","statements":[{"expression":{"arguments":[{"id":3262,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"2599:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}],"expression":{"id":3260,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"2578:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2585:13:16","memberName":"getTokenDelta","nodeType":"MemberAccess","referencedDeclaration":2040,"src":"2578:20:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_contract$_IERC20_$3102_$returns$_t_int256_$","typeString":"function (contract IERC20) view external returns (int256)"}},"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2578:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3259,"id":3264,"nodeType":"Return","src":"2571:34:16"}]},"documentation":{"id":3252,"nodeType":"StructuredDocumentation","src":"2447:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"9e825ff5","id":3266,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenDelta","nameLocation":"2491:13:16","nodeType":"FunctionDefinition","parameters":{"id":3256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3255,"mutability":"mutable","name":"token","nameLocation":"2512:5:16","nodeType":"VariableDeclaration","scope":3266,"src":"2505:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":3254,"nodeType":"UserDefinedTypeName","pathNode":{"id":3253,"name":"IERC20","nameLocations":["2505:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"2505:6:16"},"referencedDeclaration":3102,"src":"2505:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"2504:14:16"},"returnParameters":{"id":3259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3258,"mutability":"mutable","name":"tokenDelta","nameLocation":"2549:10:16","nodeType":"VariableDeclaration","scope":3266,"src":"2542:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3257,"name":"int256","nodeType":"ElementaryTypeName","src":"2542:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2541:19:16"},"scope":3966,"src":"2482:130:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1588],"body":{"id":3280,"nodeType":"Block","src":"2736:51:16","statements":[{"expression":{"arguments":[{"id":3277,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3270,"src":"2774:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}],"expression":{"id":3275,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"2753:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2760:13:16","memberName":"getReservesOf","nodeType":"MemberAccess","referencedDeclaration":2049,"src":"2753:20:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_contract$_IERC20_$3102_$returns$_t_uint256_$","typeString":"function (contract IERC20) view external returns (uint256)"}},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2753:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3274,"id":3279,"nodeType":"Return","src":"2746:34:16"}]},"documentation":{"id":3267,"nodeType":"StructuredDocumentation","src":"2618:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"96787092","id":3281,"implemented":true,"kind":"function","modifiers":[],"name":"getReservesOf","nameLocation":"2662:13:16","nodeType":"FunctionDefinition","parameters":{"id":3271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3270,"mutability":"mutable","name":"token","nameLocation":"2683:5:16","nodeType":"VariableDeclaration","scope":3281,"src":"2676:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":3269,"nodeType":"UserDefinedTypeName","pathNode":{"id":3268,"name":"IERC20","nameLocations":["2676:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"2676:6:16"},"referencedDeclaration":3102,"src":"2676:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"2675:14:16"},"returnParameters":{"id":3274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3273,"mutability":"mutable","name":"reserveAmount","nameLocation":"2721:13:16","nodeType":"VariableDeclaration","scope":3281,"src":"2713:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3272,"name":"uint256","nodeType":"ElementaryTypeName","src":"2713:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2712:23:16"},"scope":3966,"src":"2653:134:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1596],"body":{"id":3294,"nodeType":"Block","src":"2921:62:16","statements":[{"expression":{"arguments":[{"id":3291,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"2971:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3289,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"2938:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2945:25:16","memberName":"getAddLiquidityCalledFlag","nodeType":"MemberAccess","referencedDeclaration":2057,"src":"2938:32:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2938:38:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3288,"id":3293,"nodeType":"Return","src":"2931:45:16"}]},"documentation":{"id":3282,"nodeType":"StructuredDocumentation","src":"2793:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"ace9b89b","id":3295,"implemented":true,"kind":"function","modifiers":[],"name":"getAddLiquidityCalledFlag","nameLocation":"2837:25:16","nodeType":"FunctionDefinition","parameters":{"id":3285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"pool","nameLocation":"2871:4:16","nodeType":"VariableDeclaration","scope":3295,"src":"2863:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3283,"name":"address","nodeType":"ElementaryTypeName","src":"2863:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2862:14:16"},"returnParameters":{"id":3288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3287,"mutability":"mutable","name":"liquidityAdded","nameLocation":"2905:14:16","nodeType":"VariableDeclaration","scope":3295,"src":"2900:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3286,"name":"bool","nodeType":"ElementaryTypeName","src":"2900:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2899:21:16"},"scope":3966,"src":"2828:155:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1604],"body":{"id":3308,"nodeType":"Block","src":"3329:53:16","statements":[{"expression":{"arguments":[{"id":3305,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"3370:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3303,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"3346:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3353:16:16","memberName":"isPoolRegistered","nodeType":"MemberAccess","referencedDeclaration":2089,"src":"3346:23:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3346:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3302,"id":3307,"nodeType":"Return","src":"3339:36:16"}]},"documentation":{"id":3296,"nodeType":"StructuredDocumentation","src":"3214:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"c673bdaf","id":3309,"implemented":true,"kind":"function","modifiers":[],"name":"isPoolRegistered","nameLocation":"3258:16:16","nodeType":"FunctionDefinition","parameters":{"id":3299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3298,"mutability":"mutable","name":"pool","nameLocation":"3283:4:16","nodeType":"VariableDeclaration","scope":3309,"src":"3275:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3297,"name":"address","nodeType":"ElementaryTypeName","src":"3275:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3274:14:16"},"returnParameters":{"id":3302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3301,"mutability":"mutable","name":"registered","nameLocation":"3317:10:16","nodeType":"VariableDeclaration","scope":3309,"src":"3312:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3300,"name":"bool","nodeType":"ElementaryTypeName","src":"3312:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3311:17:16"},"scope":3966,"src":"3249:133:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1612],"body":{"id":3322,"nodeType":"Block","src":"3729:54:16","statements":[{"expression":{"arguments":[{"id":3319,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"3771:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3317,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"3746:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3753:17:16","memberName":"isPoolInitialized","nodeType":"MemberAccess","referencedDeclaration":2118,"src":"3746:24:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3746:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3316,"id":3321,"nodeType":"Return","src":"3739:37:16"}]},"documentation":{"id":3310,"nodeType":"StructuredDocumentation","src":"3612:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"532cec7c","id":3323,"implemented":true,"kind":"function","modifiers":[],"name":"isPoolInitialized","nameLocation":"3656:17:16","nodeType":"FunctionDefinition","parameters":{"id":3313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3312,"mutability":"mutable","name":"pool","nameLocation":"3682:4:16","nodeType":"VariableDeclaration","scope":3323,"src":"3674:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3311,"name":"address","nodeType":"ElementaryTypeName","src":"3674:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3673:14:16"},"returnParameters":{"id":3316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3315,"mutability":"mutable","name":"initialized","nameLocation":"3716:11:16","nodeType":"VariableDeclaration","scope":3323,"src":"3711:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3314,"name":"bool","nodeType":"ElementaryTypeName","src":"3711:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3710:18:16"},"scope":3966,"src":"3647:136:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1622],"body":{"id":3338,"nodeType":"Block","src":"3908:50:16","statements":[{"expression":{"arguments":[{"id":3335,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"3946:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3333,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"3925:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3932:13:16","memberName":"getPoolTokens","nodeType":"MemberAccess","referencedDeclaration":2128,"src":"3925:20:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_array$_t_contract$_IERC20_$3102_$dyn_memory_ptr_$","typeString":"function (address) view external returns (contract IERC20[] memory)"}},"id":3336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3925:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"functionReturnParameters":3332,"id":3337,"nodeType":"Return","src":"3918:33:16"}]},"documentation":{"id":3324,"nodeType":"StructuredDocumentation","src":"3789:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"ca4f2803","id":3339,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolTokens","nameLocation":"3833:13:16","nodeType":"FunctionDefinition","parameters":{"id":3327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3326,"mutability":"mutable","name":"pool","nameLocation":"3855:4:16","nodeType":"VariableDeclaration","scope":3339,"src":"3847:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3325,"name":"address","nodeType":"ElementaryTypeName","src":"3847:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3846:14:16"},"returnParameters":{"id":3332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3331,"mutability":"mutable","name":"tokens","nameLocation":"3900:6:16","nodeType":"VariableDeclaration","scope":3339,"src":"3884:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":3329,"nodeType":"UserDefinedTypeName","pathNode":{"id":3328,"name":"IERC20","nameLocations":["3884:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"3884:6:16"},"referencedDeclaration":3102,"src":"3884:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"id":3330,"nodeType":"ArrayTypeName","src":"3884:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"3883:24:16"},"scope":3966,"src":"3824:134:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1635],"body":{"id":3358,"nodeType":"Block","src":"4149:76:16","statements":[{"expression":{"arguments":[{"id":3354,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3342,"src":"4206:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3355,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"4212:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}],"expression":{"id":3352,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"4166:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4173:32:16","memberName":"getPoolTokenCountAndIndexOfToken","nodeType":"MemberAccess","referencedDeclaration":2499,"src":"4166:39:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_contract$_IERC20_$3102_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,contract IERC20) view external returns (uint256,uint256)"}},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4166:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":3351,"id":3357,"nodeType":"Return","src":"4159:59:16"}]},"documentation":{"id":3340,"nodeType":"StructuredDocumentation","src":"3964:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"c9c1661b","id":3359,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolTokenCountAndIndexOfToken","nameLocation":"4008:32:16","nodeType":"FunctionDefinition","parameters":{"id":3346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3342,"mutability":"mutable","name":"pool","nameLocation":"4058:4:16","nodeType":"VariableDeclaration","scope":3359,"src":"4050:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3341,"name":"address","nodeType":"ElementaryTypeName","src":"4050:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3345,"mutability":"mutable","name":"token","nameLocation":"4079:5:16","nodeType":"VariableDeclaration","scope":3359,"src":"4072:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":3344,"nodeType":"UserDefinedTypeName","pathNode":{"id":3343,"name":"IERC20","nameLocations":["4072:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"4072:6:16"},"referencedDeclaration":3102,"src":"4072:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"4040:50:16"},"returnParameters":{"id":3351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3348,"mutability":"mutable","name":"tokenCount","nameLocation":"4122:10:16","nodeType":"VariableDeclaration","scope":3359,"src":"4114:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3347,"name":"uint256","nodeType":"ElementaryTypeName","src":"4114:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3350,"mutability":"mutable","name":"index","nameLocation":"4142:5:16","nodeType":"VariableDeclaration","scope":3359,"src":"4134:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3349,"name":"uint256","nodeType":"ElementaryTypeName","src":"4134:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4113:35:16"},"scope":3966,"src":"3999:226:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1647],"body":{"id":3376,"nodeType":"Block","src":"4413:54:16","statements":[{"expression":{"arguments":[{"id":3373,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"4455:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3371,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"4430:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4437:17:16","memberName":"getPoolTokenRates","nodeType":"MemberAccess","referencedDeclaration":2140,"src":"4430:24:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address) view external returns (uint256[] memory,uint256[] memory)"}},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4430:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(uint256[] memory,uint256[] memory)"}},"functionReturnParameters":3370,"id":3375,"nodeType":"Return","src":"4423:37:16"}]},"documentation":{"id":3360,"nodeType":"StructuredDocumentation","src":"4231:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"7e361bde","id":3377,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolTokenRates","nameLocation":"4275:17:16","nodeType":"FunctionDefinition","parameters":{"id":3363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3362,"mutability":"mutable","name":"pool","nameLocation":"4310:4:16","nodeType":"VariableDeclaration","scope":3377,"src":"4302:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3361,"name":"address","nodeType":"ElementaryTypeName","src":"4302:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4292:28:16"},"returnParameters":{"id":3370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3366,"mutability":"mutable","name":"decimalScalingFactors","nameLocation":"4361:21:16","nodeType":"VariableDeclaration","scope":3377,"src":"4344:38:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3364,"name":"uint256","nodeType":"ElementaryTypeName","src":"4344:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3365,"nodeType":"ArrayTypeName","src":"4344:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3369,"mutability":"mutable","name":"tokenRates","nameLocation":"4401:10:16","nodeType":"VariableDeclaration","scope":3377,"src":"4384:27:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3367,"name":"uint256","nodeType":"ElementaryTypeName","src":"4384:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3368,"nodeType":"ArrayTypeName","src":"4384:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4343:69:16"},"scope":3966,"src":"4266:201:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1656],"body":{"id":3391,"nodeType":"Block","src":"4592:48:16","statements":[{"expression":{"arguments":[{"id":3388,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3380,"src":"4628:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3386,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"4609:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4616:11:16","memberName":"getPoolData","nodeType":"MemberAccess","referencedDeclaration":2149,"src":"4609:18:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_struct$_PoolData_$2712_memory_ptr_$","typeString":"function (address) view external returns (struct PoolData memory)"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4609:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$2712_memory_ptr","typeString":"struct PoolData memory"}},"functionReturnParameters":3385,"id":3390,"nodeType":"Return","src":"4602:31:16"}]},"documentation":{"id":3378,"nodeType":"StructuredDocumentation","src":"4473:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"13d21cdf","id":3392,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolData","nameLocation":"4517:11:16","nodeType":"FunctionDefinition","parameters":{"id":3381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3380,"mutability":"mutable","name":"pool","nameLocation":"4537:4:16","nodeType":"VariableDeclaration","scope":3392,"src":"4529:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3379,"name":"address","nodeType":"ElementaryTypeName","src":"4529:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4528:14:16"},"returnParameters":{"id":3385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3384,"mutability":"mutable","name":"poolData","nameLocation":"4582:8:16","nodeType":"VariableDeclaration","scope":3392,"src":"4566:24:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$2712_memory_ptr","typeString":"struct PoolData"},"typeName":{"id":3383,"nodeType":"UserDefinedTypeName","pathNode":{"id":3382,"name":"PoolData","nameLocations":["4566:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":2712,"src":"4566:8:16"},"referencedDeclaration":2712,"src":"4566:8:16","typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$2712_storage_ptr","typeString":"struct PoolData"}},"visibility":"internal"}],"src":"4565:26:16"},"scope":3966,"src":"4508:132:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1676],"body":{"id":3417,"nodeType":"Block","src":"4971:53:16","statements":[{"expression":{"arguments":[{"id":3414,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3395,"src":"5012:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3412,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"4988:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4995:16:16","memberName":"getPoolTokenInfo","nodeType":"MemberAccess","referencedDeclaration":2169,"src":"4988:23:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_array$_t_contract$_IERC20_$3102_$dyn_memory_ptr_$_t_array$_t_struct$_TokenInfo_$2687_memory_ptr_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address) view external returns (contract IERC20[] memory,struct TokenInfo memory[] memory,uint256[] memory,uint256[] memory)"}},"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4988:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_contract$_IERC20_$3102_$dyn_memory_ptr_$_t_array$_t_struct$_TokenInfo_$2687_memory_ptr_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(contract IERC20[] memory,struct TokenInfo memory[] memory,uint256[] memory,uint256[] memory)"}},"functionReturnParameters":3411,"id":3416,"nodeType":"Return","src":"4981:36:16"}]},"documentation":{"id":3393,"nodeType":"StructuredDocumentation","src":"4646:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"67e0e076","id":3418,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolTokenInfo","nameLocation":"4690:16:16","nodeType":"FunctionDefinition","parameters":{"id":3396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3395,"mutability":"mutable","name":"pool","nameLocation":"4724:4:16","nodeType":"VariableDeclaration","scope":3418,"src":"4716:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3394,"name":"address","nodeType":"ElementaryTypeName","src":"4716:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4706:28:16"},"returnParameters":{"id":3411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3400,"mutability":"mutable","name":"tokens","nameLocation":"4811:6:16","nodeType":"VariableDeclaration","scope":3418,"src":"4795:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":3398,"nodeType":"UserDefinedTypeName","pathNode":{"id":3397,"name":"IERC20","nameLocations":["4795:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"4795:6:16"},"referencedDeclaration":3102,"src":"4795:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"id":3399,"nodeType":"ArrayTypeName","src":"4795:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3102_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":3404,"mutability":"mutable","name":"tokenInfo","nameLocation":"4850:9:16","nodeType":"VariableDeclaration","scope":3418,"src":"4831:28:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2687_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenInfo[]"},"typeName":{"baseType":{"id":3402,"nodeType":"UserDefinedTypeName","pathNode":{"id":3401,"name":"TokenInfo","nameLocations":["4831:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":2687,"src":"4831:9:16"},"referencedDeclaration":2687,"src":"4831:9:16","typeDescriptions":{"typeIdentifier":"t_struct$_TokenInfo_$2687_storage_ptr","typeString":"struct TokenInfo"}},"id":3403,"nodeType":"ArrayTypeName","src":"4831:11:16","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2687_storage_$dyn_storage_ptr","typeString":"struct TokenInfo[]"}},"visibility":"internal"},{"constant":false,"id":3407,"mutability":"mutable","name":"balancesRaw","nameLocation":"4890:11:16","nodeType":"VariableDeclaration","scope":3418,"src":"4873:28:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3405,"name":"uint256","nodeType":"ElementaryTypeName","src":"4873:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3406,"nodeType":"ArrayTypeName","src":"4873:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3410,"mutability":"mutable","name":"lastBalancesLiveScaled18","nameLocation":"4932:24:16","nodeType":"VariableDeclaration","scope":3418,"src":"4915:41:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3408,"name":"uint256","nodeType":"ElementaryTypeName","src":"4915:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3409,"nodeType":"ArrayTypeName","src":"4915:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4781:185:16"},"scope":3966,"src":"4681:343:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1685],"body":{"id":3432,"nodeType":"Block","src":"5173:59:16","statements":[{"expression":{"arguments":[{"id":3429,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3421,"src":"5220:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3427,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"5190:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5197:22:16","memberName":"getCurrentLiveBalances","nodeType":"MemberAccess","referencedDeclaration":2178,"src":"5190:29:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address) view external returns (uint256[] memory)"}},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5190:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":3426,"id":3431,"nodeType":"Return","src":"5183:42:16"}]},"documentation":{"id":3419,"nodeType":"StructuredDocumentation","src":"5030:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"535cfd8a","id":3433,"implemented":true,"kind":"function","modifiers":[],"name":"getCurrentLiveBalances","nameLocation":"5074:22:16","nodeType":"FunctionDefinition","parameters":{"id":3422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3421,"mutability":"mutable","name":"pool","nameLocation":"5105:4:16","nodeType":"VariableDeclaration","scope":3433,"src":"5097:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3420,"name":"address","nodeType":"ElementaryTypeName","src":"5097:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5096:14:16"},"returnParameters":{"id":3426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3425,"mutability":"mutable","name":"balancesLiveScaled18","nameLocation":"5151:20:16","nodeType":"VariableDeclaration","scope":3433,"src":"5134:37:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3423,"name":"uint256","nodeType":"ElementaryTypeName","src":"5134:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3424,"nodeType":"ArrayTypeName","src":"5134:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5133:39:16"},"scope":3966,"src":"5065:167:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1694],"body":{"id":3447,"nodeType":"Block","src":"5363:50:16","statements":[{"expression":{"arguments":[{"id":3444,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"5401:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3442,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"5380:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:13:16","memberName":"getPoolConfig","nodeType":"MemberAccess","referencedDeclaration":2187,"src":"5380:20:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_struct$_PoolConfig_$2588_memory_ptr_$","typeString":"function (address) view external returns (struct PoolConfig memory)"}},"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5380:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2588_memory_ptr","typeString":"struct PoolConfig memory"}},"functionReturnParameters":3441,"id":3446,"nodeType":"Return","src":"5373:33:16"}]},"documentation":{"id":3434,"nodeType":"StructuredDocumentation","src":"5238:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"f29486a1","id":3448,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolConfig","nameLocation":"5282:13:16","nodeType":"FunctionDefinition","parameters":{"id":3437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3436,"mutability":"mutable","name":"pool","nameLocation":"5304:4:16","nodeType":"VariableDeclaration","scope":3448,"src":"5296:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3435,"name":"address","nodeType":"ElementaryTypeName","src":"5296:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5295:14:16"},"returnParameters":{"id":3441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3440,"mutability":"mutable","name":"poolConfig","nameLocation":"5351:10:16","nodeType":"VariableDeclaration","scope":3448,"src":"5333:28:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2588_memory_ptr","typeString":"struct PoolConfig"},"typeName":{"id":3439,"nodeType":"UserDefinedTypeName","pathNode":{"id":3438,"name":"PoolConfig","nameLocations":["5333:10:16"],"nodeType":"IdentifierPath","referencedDeclaration":2588,"src":"5333:10:16"},"referencedDeclaration":2588,"src":"5333:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2588_storage_ptr","typeString":"struct PoolConfig"}},"visibility":"internal"}],"src":"5332:30:16"},"scope":3966,"src":"5273:140:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1703],"body":{"id":3462,"nodeType":"Block","src":"5547:51:16","statements":[{"expression":{"arguments":[{"id":3459,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"5586:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3457,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"5564:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5571:14:16","memberName":"getHooksConfig","nodeType":"MemberAccess","referencedDeclaration":2196,"src":"5564:21:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_struct$_HooksConfig_$2634_memory_ptr_$","typeString":"function (address) view external returns (struct HooksConfig memory)"}},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5564:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2634_memory_ptr","typeString":"struct HooksConfig memory"}},"functionReturnParameters":3456,"id":3461,"nodeType":"Return","src":"5557:34:16"}]},"documentation":{"id":3449,"nodeType":"StructuredDocumentation","src":"5419:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"ce8630d4","id":3463,"implemented":true,"kind":"function","modifiers":[],"name":"getHooksConfig","nameLocation":"5463:14:16","nodeType":"FunctionDefinition","parameters":{"id":3452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3451,"mutability":"mutable","name":"pool","nameLocation":"5486:4:16","nodeType":"VariableDeclaration","scope":3463,"src":"5478:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3450,"name":"address","nodeType":"ElementaryTypeName","src":"5478:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5477:14:16"},"returnParameters":{"id":3456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3455,"mutability":"mutable","name":"hooksConfig","nameLocation":"5534:11:16","nodeType":"VariableDeclaration","scope":3463,"src":"5515:30:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2634_memory_ptr","typeString":"struct HooksConfig"},"typeName":{"id":3454,"nodeType":"UserDefinedTypeName","pathNode":{"id":3453,"name":"HooksConfig","nameLocations":["5515:11:16"],"nodeType":"IdentifierPath","referencedDeclaration":2634,"src":"5515:11:16"},"referencedDeclaration":2634,"src":"5515:11:16","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2634_storage_ptr","typeString":"struct HooksConfig"}},"visibility":"internal"}],"src":"5514:32:16"},"scope":3966,"src":"5454:144:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1711],"body":{"id":3476,"nodeType":"Block","src":"5710:47:16","statements":[{"expression":{"arguments":[{"id":3473,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"5745:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3471,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"5727:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5734:10:16","memberName":"getBptRate","nodeType":"MemberAccess","referencedDeclaration":2204,"src":"5727:17:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5727:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3470,"id":3475,"nodeType":"Return","src":"5720:30:16"}]},"documentation":{"id":3464,"nodeType":"StructuredDocumentation","src":"5604:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"4f037ee7","id":3477,"implemented":true,"kind":"function","modifiers":[],"name":"getBptRate","nameLocation":"5648:10:16","nodeType":"FunctionDefinition","parameters":{"id":3467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3466,"mutability":"mutable","name":"pool","nameLocation":"5667:4:16","nodeType":"VariableDeclaration","scope":3477,"src":"5659:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3465,"name":"address","nodeType":"ElementaryTypeName","src":"5659:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5658:14:16"},"returnParameters":{"id":3470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3469,"mutability":"mutable","name":"rate","nameLocation":"5704:4:16","nodeType":"VariableDeclaration","scope":3477,"src":"5696:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3468,"name":"uint256","nodeType":"ElementaryTypeName","src":"5696:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5695:14:16"},"scope":3966,"src":"5639:118:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1719],"body":{"id":3490,"nodeType":"Block","src":"6108:49:16","statements":[{"expression":{"arguments":[{"id":3487,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3480,"src":"6144:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3485,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"6125:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6132:11:16","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":2212,"src":"6125:18:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6125:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3484,"id":3489,"nodeType":"Return","src":"6118:32:16"}]},"documentation":{"id":3478,"nodeType":"StructuredDocumentation","src":"5988:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"e4dc2aa4","id":3491,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"6032:11:16","nodeType":"FunctionDefinition","parameters":{"id":3481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3480,"mutability":"mutable","name":"token","nameLocation":"6052:5:16","nodeType":"VariableDeclaration","scope":3491,"src":"6044:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3479,"name":"address","nodeType":"ElementaryTypeName","src":"6044:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6043:15:16"},"returnParameters":{"id":3484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3483,"mutability":"mutable","name":"tokenTotalSupply","nameLocation":"6090:16:16","nodeType":"VariableDeclaration","scope":3491,"src":"6082:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3482,"name":"uint256","nodeType":"ElementaryTypeName","src":"6082:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6081:26:16"},"scope":3966,"src":"6023:134:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1729],"body":{"id":3507,"nodeType":"Block","src":"6294:56:16","statements":[{"expression":{"arguments":[{"id":3503,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3494,"src":"6328:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3504,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"6335:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3501,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"6311:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6318:9:16","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2222,"src":"6311:16:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6311:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3500,"id":3506,"nodeType":"Return","src":"6304:39:16"}]},"documentation":{"id":3492,"nodeType":"StructuredDocumentation","src":"6163:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"f7888aec","id":3508,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"6207:9:16","nodeType":"FunctionDefinition","parameters":{"id":3497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3494,"mutability":"mutable","name":"token","nameLocation":"6225:5:16","nodeType":"VariableDeclaration","scope":3508,"src":"6217:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3493,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3496,"mutability":"mutable","name":"account","nameLocation":"6240:7:16","nodeType":"VariableDeclaration","scope":3508,"src":"6232:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3495,"name":"address","nodeType":"ElementaryTypeName","src":"6232:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6216:32:16"},"returnParameters":{"id":3500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3499,"mutability":"mutable","name":"tokenBalance","nameLocation":"6280:12:16","nodeType":"VariableDeclaration","scope":3508,"src":"6272:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3498,"name":"uint256","nodeType":"ElementaryTypeName","src":"6272:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6271:22:16"},"scope":3966,"src":"6198:152:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1741],"body":{"id":3527,"nodeType":"Block","src":"6504:63:16","statements":[{"expression":{"arguments":[{"id":3522,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3511,"src":"6538:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3523,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3513,"src":"6545:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3524,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"6552:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3520,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"6521:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6528:9:16","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2234,"src":"6521:16:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address,address) view external returns (uint256)"}},"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6521:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3519,"id":3526,"nodeType":"Return","src":"6514:46:16"}]},"documentation":{"id":3509,"nodeType":"StructuredDocumentation","src":"6356:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"927da105","id":3528,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"6400:9:16","nodeType":"FunctionDefinition","parameters":{"id":3516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3511,"mutability":"mutable","name":"token","nameLocation":"6418:5:16","nodeType":"VariableDeclaration","scope":3528,"src":"6410:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3510,"name":"address","nodeType":"ElementaryTypeName","src":"6410:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3513,"mutability":"mutable","name":"owner","nameLocation":"6433:5:16","nodeType":"VariableDeclaration","scope":3528,"src":"6425:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3512,"name":"address","nodeType":"ElementaryTypeName","src":"6425:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3515,"mutability":"mutable","name":"spender","nameLocation":"6448:7:16","nodeType":"VariableDeclaration","scope":3528,"src":"6440:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3514,"name":"address","nodeType":"ElementaryTypeName","src":"6440:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6409:47:16"},"returnParameters":{"id":3519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3518,"mutability":"mutable","name":"tokenAllowance","nameLocation":"6488:14:16","nodeType":"VariableDeclaration","scope":3528,"src":"6480:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3517,"name":"uint256","nodeType":"ElementaryTypeName","src":"6480:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6479:24:16"},"scope":3966,"src":"6391:176:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1749],"body":{"id":3541,"nodeType":"Block","src":"6905:49:16","statements":[{"expression":{"arguments":[{"id":3538,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3531,"src":"6942:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3536,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"6922:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6929:12:16","memberName":"isPoolPaused","nodeType":"MemberAccess","referencedDeclaration":2254,"src":"6922:19:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6922:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3535,"id":3540,"nodeType":"Return","src":"6915:32:16"}]},"documentation":{"id":3529,"nodeType":"StructuredDocumentation","src":"6794:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"6c9bc732","id":3542,"implemented":true,"kind":"function","modifiers":[],"name":"isPoolPaused","nameLocation":"6838:12:16","nodeType":"FunctionDefinition","parameters":{"id":3532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3531,"mutability":"mutable","name":"pool","nameLocation":"6859:4:16","nodeType":"VariableDeclaration","scope":3542,"src":"6851:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3530,"name":"address","nodeType":"ElementaryTypeName","src":"6851:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6850:14:16"},"returnParameters":{"id":3535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3534,"mutability":"mutable","name":"poolPaused","nameLocation":"6893:10:16","nodeType":"VariableDeclaration","scope":3542,"src":"6888:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3533,"name":"bool","nodeType":"ElementaryTypeName","src":"6888:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6887:17:16"},"scope":3966,"src":"6829:125:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1763],"body":{"id":3561,"nodeType":"Block","src":"7204:55:16","statements":[{"expression":{"arguments":[{"id":3558,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"7247:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3556,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"7221:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7228:18:16","memberName":"getPoolPausedState","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"7221:25:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$_t_uint32_$_t_uint32_$_t_address_$","typeString":"function (address) view external returns (bool,uint32,uint32,address)"}},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7221:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$_t_uint32_$_t_address_$","typeString":"tuple(bool,uint32,uint32,address)"}},"functionReturnParameters":3555,"id":3560,"nodeType":"Return","src":"7214:38:16"}]},"documentation":{"id":3543,"nodeType":"StructuredDocumentation","src":"6960:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"15e32046","id":3562,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolPausedState","nameLocation":"7004:18:16","nodeType":"FunctionDefinition","parameters":{"id":3546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3545,"mutability":"mutable","name":"pool","nameLocation":"7040:4:16","nodeType":"VariableDeclaration","scope":3562,"src":"7032:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3544,"name":"address","nodeType":"ElementaryTypeName","src":"7032:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7022:28:16"},"returnParameters":{"id":3555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3548,"mutability":"mutable","name":"poolPaused","nameLocation":"7103:10:16","nodeType":"VariableDeclaration","scope":3562,"src":"7098:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3547,"name":"bool","nodeType":"ElementaryTypeName","src":"7098:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3550,"mutability":"mutable","name":"poolPauseWindowEndTime","nameLocation":"7122:22:16","nodeType":"VariableDeclaration","scope":3562,"src":"7115:29:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3549,"name":"uint32","nodeType":"ElementaryTypeName","src":"7115:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3552,"mutability":"mutable","name":"poolBufferPeriodEndTime","nameLocation":"7153:23:16","nodeType":"VariableDeclaration","scope":3562,"src":"7146:30:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3551,"name":"uint32","nodeType":"ElementaryTypeName","src":"7146:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3554,"mutability":"mutable","name":"pauseManager","nameLocation":"7186:12:16","nodeType":"VariableDeclaration","scope":3562,"src":"7178:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3553,"name":"address","nodeType":"ElementaryTypeName","src":"7178:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7097:102:16"},"scope":3966,"src":"6995:264:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1774],"body":{"id":3579,"nodeType":"Block","src":"7625:69:16","statements":[{"expression":{"arguments":[{"id":3575,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"7675:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3576,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"7681:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}],"expression":{"id":3573,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"7642:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7649:25:16","memberName":"getAggregateSwapFeeAmount","nodeType":"MemberAccess","referencedDeclaration":2297,"src":"7642:32:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_contract$_IERC20_$3102_$returns$_t_uint256_$","typeString":"function (address,contract IERC20) view external returns (uint256)"}},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7642:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3572,"id":3578,"nodeType":"Return","src":"7635:52:16"}]},"documentation":{"id":3563,"nodeType":"StructuredDocumentation","src":"7481:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"85e0b999","id":3580,"implemented":true,"kind":"function","modifiers":[],"name":"getAggregateSwapFeeAmount","nameLocation":"7525:25:16","nodeType":"FunctionDefinition","parameters":{"id":3569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3565,"mutability":"mutable","name":"pool","nameLocation":"7559:4:16","nodeType":"VariableDeclaration","scope":3580,"src":"7551:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3564,"name":"address","nodeType":"ElementaryTypeName","src":"7551:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3568,"mutability":"mutable","name":"token","nameLocation":"7572:5:16","nodeType":"VariableDeclaration","scope":3580,"src":"7565:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":3567,"nodeType":"UserDefinedTypeName","pathNode":{"id":3566,"name":"IERC20","nameLocations":["7565:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"7565:6:16"},"referencedDeclaration":3102,"src":"7565:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"7550:28:16"},"returnParameters":{"id":3572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3571,"mutability":"mutable","name":"swapFeeAmount","nameLocation":"7610:13:16","nodeType":"VariableDeclaration","scope":3580,"src":"7602:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3570,"name":"uint256","nodeType":"ElementaryTypeName","src":"7602:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7601:23:16"},"scope":3966,"src":"7516:178:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1785],"body":{"id":3597,"nodeType":"Block","src":"7846:70:16","statements":[{"expression":{"arguments":[{"id":3593,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"7897:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3594,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3586,"src":"7903:5:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}],"expression":{"id":3591,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"7863:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7870:26:16","memberName":"getAggregateYieldFeeAmount","nodeType":"MemberAccess","referencedDeclaration":2308,"src":"7863:33:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_contract$_IERC20_$3102_$returns$_t_uint256_$","typeString":"function (address,contract IERC20) view external returns (uint256)"}},"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7863:46:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3590,"id":3596,"nodeType":"Return","src":"7856:53:16"}]},"documentation":{"id":3581,"nodeType":"StructuredDocumentation","src":"7700:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"00fdfa13","id":3598,"implemented":true,"kind":"function","modifiers":[],"name":"getAggregateYieldFeeAmount","nameLocation":"7744:26:16","nodeType":"FunctionDefinition","parameters":{"id":3587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3583,"mutability":"mutable","name":"pool","nameLocation":"7779:4:16","nodeType":"VariableDeclaration","scope":3598,"src":"7771:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3582,"name":"address","nodeType":"ElementaryTypeName","src":"7771:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3586,"mutability":"mutable","name":"token","nameLocation":"7792:5:16","nodeType":"VariableDeclaration","scope":3598,"src":"7785:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"},"typeName":{"id":3585,"nodeType":"UserDefinedTypeName","pathNode":{"id":3584,"name":"IERC20","nameLocations":["7785:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"7785:6:16"},"referencedDeclaration":3102,"src":"7785:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3102","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"7770:28:16"},"returnParameters":{"id":3590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3589,"mutability":"mutable","name":"yieldFeeAmount","nameLocation":"7830:14:16","nodeType":"VariableDeclaration","scope":3598,"src":"7822:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3588,"name":"uint256","nodeType":"ElementaryTypeName","src":"7822:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7821:24:16"},"scope":3966,"src":"7735:181:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1793],"body":{"id":3611,"nodeType":"Block","src":"8057:63:16","statements":[{"expression":{"arguments":[{"id":3608,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"8108:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3606,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"8074:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8081:26:16","memberName":"getStaticSwapFeePercentage","nodeType":"MemberAccess","referencedDeclaration":2316,"src":"8074:33:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8074:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3605,"id":3610,"nodeType":"Return","src":"8067:46:16"}]},"documentation":{"id":3599,"nodeType":"StructuredDocumentation","src":"7922:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"b45090f9","id":3612,"implemented":true,"kind":"function","modifiers":[],"name":"getStaticSwapFeePercentage","nameLocation":"7966:26:16","nodeType":"FunctionDefinition","parameters":{"id":3602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3601,"mutability":"mutable","name":"pool","nameLocation":"8001:4:16","nodeType":"VariableDeclaration","scope":3612,"src":"7993:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3600,"name":"address","nodeType":"ElementaryTypeName","src":"7993:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7992:14:16"},"returnParameters":{"id":3605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3604,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"8038:17:16","nodeType":"VariableDeclaration","scope":3612,"src":"8030:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3603,"name":"uint256","nodeType":"ElementaryTypeName","src":"8030:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8029:27:16"},"scope":3966,"src":"7957:163:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1802],"body":{"id":3626,"nodeType":"Block","src":"8265:56:16","statements":[{"expression":{"arguments":[{"id":3623,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"8309:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3621,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"8282:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8289:19:16","memberName":"getPoolRoleAccounts","nodeType":"MemberAccess","referencedDeclaration":2325,"src":"8282:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_struct$_PoolRoleAccounts_$2660_memory_ptr_$","typeString":"function (address) view external returns (struct PoolRoleAccounts memory)"}},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8282:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2660_memory_ptr","typeString":"struct PoolRoleAccounts memory"}},"functionReturnParameters":3620,"id":3625,"nodeType":"Return","src":"8275:39:16"}]},"documentation":{"id":3613,"nodeType":"StructuredDocumentation","src":"8126:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"e9ddeb26","id":3627,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolRoleAccounts","nameLocation":"8170:19:16","nodeType":"FunctionDefinition","parameters":{"id":3616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3615,"mutability":"mutable","name":"pool","nameLocation":"8198:4:16","nodeType":"VariableDeclaration","scope":3627,"src":"8190:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3614,"name":"address","nodeType":"ElementaryTypeName","src":"8190:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8189:14:16"},"returnParameters":{"id":3620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3619,"mutability":"mutable","name":"roleAccounts","nameLocation":"8251:12:16","nodeType":"VariableDeclaration","scope":3627,"src":"8227:36:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2660_memory_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":3618,"nodeType":"UserDefinedTypeName","pathNode":{"id":3617,"name":"PoolRoleAccounts","nameLocations":["8227:16:16"],"nodeType":"IdentifierPath","referencedDeclaration":2660,"src":"8227:16:16"},"referencedDeclaration":2660,"src":"8227:16:16","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2660_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"}],"src":"8226:38:16"},"scope":3966,"src":"8161:160:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1813],"body":{"id":3644,"nodeType":"Block","src":"8530:80:16","statements":[{"expression":{"arguments":[{"id":3640,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3630,"src":"8586:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3641,"name":"swapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"8592:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2755_memory_ptr","typeString":"struct PoolSwapParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_PoolSwapParams_$2755_memory_ptr","typeString":"struct PoolSwapParams memory"}],"expression":{"id":3638,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"8547:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8554:31:16","memberName":"computeDynamicSwapFeePercentage","nodeType":"MemberAccess","referencedDeclaration":2336,"src":"8547:38:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_struct$_PoolSwapParams_$2755_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,struct PoolSwapParams memory) view external returns (uint256)"}},"id":3642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8547:56:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3637,"id":3643,"nodeType":"Return","src":"8540:63:16"}]},"documentation":{"id":3628,"nodeType":"StructuredDocumentation","src":"8327:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"4d472bdd","id":3645,"implemented":true,"kind":"function","modifiers":[],"name":"computeDynamicSwapFeePercentage","nameLocation":"8371:31:16","nodeType":"FunctionDefinition","parameters":{"id":3634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3630,"mutability":"mutable","name":"pool","nameLocation":"8420:4:16","nodeType":"VariableDeclaration","scope":3645,"src":"8412:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3629,"name":"address","nodeType":"ElementaryTypeName","src":"8412:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3633,"mutability":"mutable","name":"swapParams","nameLocation":"8456:10:16","nodeType":"VariableDeclaration","scope":3645,"src":"8434:32:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2755_memory_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":3632,"nodeType":"UserDefinedTypeName","pathNode":{"id":3631,"name":"PoolSwapParams","nameLocations":["8434:14:16"],"nodeType":"IdentifierPath","referencedDeclaration":2755,"src":"8434:14:16"},"referencedDeclaration":2755,"src":"8434:14:16","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2755_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"}],"src":"8402:70:16"},"returnParameters":{"id":3637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3636,"mutability":"mutable","name":"dynamicSwapFeePercentage","nameLocation":"8504:24:16","nodeType":"VariableDeclaration","scope":3645,"src":"8496:32:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3635,"name":"uint256","nodeType":"ElementaryTypeName","src":"8496:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8495:34:16"},"scope":3966,"src":"8362:248:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1821],"body":{"id":3658,"nodeType":"Block","src":"8960:57:16","statements":[{"expression":{"arguments":[{"id":3655,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"9005:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3653,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"8977:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8984:20:16","memberName":"isPoolInRecoveryMode","nodeType":"MemberAccess","referencedDeclaration":2351,"src":"8977:27:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8977:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3652,"id":3657,"nodeType":"Return","src":"8970:40:16"}]},"documentation":{"id":3646,"nodeType":"StructuredDocumentation","src":"8837:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"be7d628a","id":3659,"implemented":true,"kind":"function","modifiers":[],"name":"isPoolInRecoveryMode","nameLocation":"8881:20:16","nodeType":"FunctionDefinition","parameters":{"id":3649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3648,"mutability":"mutable","name":"pool","nameLocation":"8910:4:16","nodeType":"VariableDeclaration","scope":3659,"src":"8902:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3647,"name":"address","nodeType":"ElementaryTypeName","src":"8902:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8901:14:16"},"returnParameters":{"id":3652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3651,"mutability":"mutable","name":"inRecoveryMode","nameLocation":"8944:14:16","nodeType":"VariableDeclaration","scope":3659,"src":"8939:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3650,"name":"bool","nodeType":"ElementaryTypeName","src":"8939:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8938:21:16"},"scope":3966,"src":"8872:145:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1827],"body":{"id":3671,"nodeType":"Block","src":"9109:48:16","statements":[{"expression":{"arguments":[{"id":3668,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"9145:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3665,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"9119:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9126:18:16","memberName":"enableRecoveryMode","nodeType":"MemberAccess","referencedDeclaration":775,"src":"9119:25:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3670,"nodeType":"ExpressionStatement","src":"9119:31:16"}]},"documentation":{"id":3660,"nodeType":"StructuredDocumentation","src":"9023:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"dc3f574e","id":3672,"implemented":true,"kind":"function","modifiers":[],"name":"enableRecoveryMode","nameLocation":"9067:18:16","nodeType":"FunctionDefinition","parameters":{"id":3663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3662,"mutability":"mutable","name":"pool","nameLocation":"9094:4:16","nodeType":"VariableDeclaration","scope":3672,"src":"9086:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3661,"name":"address","nodeType":"ElementaryTypeName","src":"9086:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9085:14:16"},"returnParameters":{"id":3664,"nodeType":"ParameterList","parameters":[],"src":"9109:0:16"},"scope":3966,"src":"9058:99:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1833],"body":{"id":3682,"nodeType":"Block","src":"9483:48:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3678,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"9500:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9507:15:16","memberName":"isQueryDisabled","nodeType":"MemberAccess","referencedDeclaration":2387,"src":"9500:22:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$","typeString":"function () view external returns (bool)"}},"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9500:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3677,"id":3681,"nodeType":"Return","src":"9493:31:16"}]},"documentation":{"id":3673,"nodeType":"StructuredDocumentation","src":"9378:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"b4aef0ab","id":3683,"implemented":true,"kind":"function","modifiers":[],"name":"isQueryDisabled","nameLocation":"9422:15:16","nodeType":"FunctionDefinition","parameters":{"id":3674,"nodeType":"ParameterList","parameters":[],"src":"9437:2:16"},"returnParameters":{"id":3677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3676,"mutability":"mutable","name":"queryDisabled","nameLocation":"9468:13:16","nodeType":"VariableDeclaration","scope":3683,"src":"9463:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3675,"name":"bool","nodeType":"ElementaryTypeName","src":"9463:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9462:20:16"},"scope":3966,"src":"9413:118:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1839],"body":{"id":3693,"nodeType":"Block","src":"9664:59:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3689,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"9681:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9688:26:16","memberName":"isQueryDisabledPermanently","nodeType":"MemberAccess","referencedDeclaration":2393,"src":"9681:33:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$","typeString":"function () view external returns (bool)"}},"id":3691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9681:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3688,"id":3692,"nodeType":"Return","src":"9674:42:16"}]},"documentation":{"id":3684,"nodeType":"StructuredDocumentation","src":"9537:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"13ef8a5d","id":3694,"implemented":true,"kind":"function","modifiers":[],"name":"isQueryDisabledPermanently","nameLocation":"9581:26:16","nodeType":"FunctionDefinition","parameters":{"id":3685,"nodeType":"ParameterList","parameters":[],"src":"9607:2:16"},"returnParameters":{"id":3688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3687,"mutability":"mutable","name":"queryDisabledPermanently","nameLocation":"9638:24:16","nodeType":"VariableDeclaration","scope":3694,"src":"9633:29:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3686,"name":"bool","nodeType":"ElementaryTypeName","src":"9633:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9632:31:16"},"scope":3966,"src":"9572:151:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1845],"body":{"id":3704,"nodeType":"Block","src":"10062:54:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3700,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"10079:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10086:21:16","memberName":"getPauseWindowEndTime","nodeType":"MemberAccess","referencedDeclaration":642,"src":"10079:28:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint32_$","typeString":"function () view external returns (uint32)"}},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10079:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":3699,"id":3703,"nodeType":"Return","src":"10072:37:16"}]},"documentation":{"id":3695,"nodeType":"StructuredDocumentation","src":"9944:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"8a8d123a","id":3705,"implemented":true,"kind":"function","modifiers":[],"name":"getPauseWindowEndTime","nameLocation":"9988:21:16","nodeType":"FunctionDefinition","parameters":{"id":3696,"nodeType":"ParameterList","parameters":[],"src":"10009:2:16"},"returnParameters":{"id":3699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3698,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"10042:18:16","nodeType":"VariableDeclaration","scope":3705,"src":"10035:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3697,"name":"uint32","nodeType":"ElementaryTypeName","src":"10035:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"10034:27:16"},"scope":3966,"src":"9979:137:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1851],"body":{"id":3715,"nodeType":"Block","src":"10244:56:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3711,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"10261:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10268:23:16","memberName":"getBufferPeriodDuration","nodeType":"MemberAccess","referencedDeclaration":648,"src":"10261:30:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint32_$","typeString":"function () view external returns (uint32)"}},"id":3713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10261:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":3710,"id":3714,"nodeType":"Return","src":"10254:39:16"}]},"documentation":{"id":3706,"nodeType":"StructuredDocumentation","src":"10122:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"20c1fb7a","id":3716,"implemented":true,"kind":"function","modifiers":[],"name":"getBufferPeriodDuration","nameLocation":"10166:23:16","nodeType":"FunctionDefinition","parameters":{"id":3707,"nodeType":"ParameterList","parameters":[],"src":"10189:2:16"},"returnParameters":{"id":3710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3709,"mutability":"mutable","name":"bufferPeriodDuration","nameLocation":"10222:20:16","nodeType":"VariableDeclaration","scope":3716,"src":"10215:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3708,"name":"uint32","nodeType":"ElementaryTypeName","src":"10215:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"10214:29:16"},"scope":3966,"src":"10157:143:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1857],"body":{"id":3726,"nodeType":"Block","src":"10426:55:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3722,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"10443:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10450:22:16","memberName":"getBufferPeriodEndTime","nodeType":"MemberAccess","referencedDeclaration":654,"src":"10443:29:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint32_$","typeString":"function () view external returns (uint32)"}},"id":3724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10443:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":3721,"id":3725,"nodeType":"Return","src":"10436:38:16"}]},"documentation":{"id":3717,"nodeType":"StructuredDocumentation","src":"10306:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"cd51c12f","id":3727,"implemented":true,"kind":"function","modifiers":[],"name":"getBufferPeriodEndTime","nameLocation":"10350:22:16","nodeType":"FunctionDefinition","parameters":{"id":3718,"nodeType":"ParameterList","parameters":[],"src":"10372:2:16"},"returnParameters":{"id":3721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3720,"mutability":"mutable","name":"bufferPeriodEndTime","nameLocation":"10405:19:16","nodeType":"VariableDeclaration","scope":3727,"src":"10398:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3719,"name":"uint32","nodeType":"ElementaryTypeName","src":"10398:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"10397:28:16"},"scope":3966,"src":"10341:140:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1863],"body":{"id":3737,"nodeType":"Block","src":"10596:53:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3733,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"10613:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10620:20:16","memberName":"getMinimumPoolTokens","nodeType":"MemberAccess","referencedDeclaration":660,"src":"10613:27:16","typeDescriptions":{"typeIdentifier":"t_function_external_pure$__$returns$_t_uint256_$","typeString":"function () pure external returns (uint256)"}},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10613:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3732,"id":3736,"nodeType":"Return","src":"10606:36:16"}]},"documentation":{"id":3728,"nodeType":"StructuredDocumentation","src":"10487:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"a8175b27","id":3738,"implemented":true,"kind":"function","modifiers":[],"name":"getMinimumPoolTokens","nameLocation":"10531:20:16","nodeType":"FunctionDefinition","parameters":{"id":3729,"nodeType":"ParameterList","parameters":[],"src":"10551:2:16"},"returnParameters":{"id":3732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3731,"mutability":"mutable","name":"minTokens","nameLocation":"10585:9:16","nodeType":"VariableDeclaration","scope":3738,"src":"10577:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3730,"name":"uint256","nodeType":"ElementaryTypeName","src":"10577:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10576:19:16"},"scope":3966,"src":"10522:127:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1869],"body":{"id":3748,"nodeType":"Block","src":"10764:53:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3744,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"10781:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10788:20:16","memberName":"getMaximumPoolTokens","nodeType":"MemberAccess","referencedDeclaration":666,"src":"10781:27:16","typeDescriptions":{"typeIdentifier":"t_function_external_pure$__$returns$_t_uint256_$","typeString":"function () pure external returns (uint256)"}},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10781:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3743,"id":3747,"nodeType":"Return","src":"10774:36:16"}]},"documentation":{"id":3739,"nodeType":"StructuredDocumentation","src":"10655:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"2e42f4d5","id":3749,"implemented":true,"kind":"function","modifiers":[],"name":"getMaximumPoolTokens","nameLocation":"10699:20:16","nodeType":"FunctionDefinition","parameters":{"id":3740,"nodeType":"ParameterList","parameters":[],"src":"10719:2:16"},"returnParameters":{"id":3743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3742,"mutability":"mutable","name":"maxTokens","nameLocation":"10753:9:16","nodeType":"VariableDeclaration","scope":3749,"src":"10745:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3741,"name":"uint256","nodeType":"ElementaryTypeName","src":"10745:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10744:19:16"},"scope":3966,"src":"10690:127:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1887],"body":{"id":3759,"nodeType":"Block","src":"10942:54:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3755,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"10959:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10966:21:16","memberName":"getMinimumTradeAmount","nodeType":"MemberAccess","referencedDeclaration":684,"src":"10959:28:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10959:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3754,"id":3758,"nodeType":"Return","src":"10952:37:16"}]},"documentation":{"id":3750,"nodeType":"StructuredDocumentation","src":"10823:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"e2cb0ba0","id":3760,"implemented":true,"kind":"function","modifiers":[],"name":"getMinimumTradeAmount","nameLocation":"10867:21:16","nodeType":"FunctionDefinition","parameters":{"id":3751,"nodeType":"ParameterList","parameters":[],"src":"10888:2:16"},"returnParameters":{"id":3754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3753,"mutability":"mutable","name":"minimumTradeAmount","nameLocation":"10922:18:16","nodeType":"VariableDeclaration","scope":3760,"src":"10914:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3752,"name":"uint256","nodeType":"ElementaryTypeName","src":"10914:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10913:28:16"},"scope":3966,"src":"10858:138:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1893],"body":{"id":3770,"nodeType":"Block","src":"11119:53:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3766,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"11136:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11143:20:16","memberName":"getMinimumWrapAmount","nodeType":"MemberAccess","referencedDeclaration":690,"src":"11136:27:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11136:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3765,"id":3769,"nodeType":"Return","src":"11129:36:16"}]},"documentation":{"id":3761,"nodeType":"StructuredDocumentation","src":"11002:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"53956aa2","id":3771,"implemented":true,"kind":"function","modifiers":[],"name":"getMinimumWrapAmount","nameLocation":"11046:20:16","nodeType":"FunctionDefinition","parameters":{"id":3762,"nodeType":"ParameterList","parameters":[],"src":"11066:2:16"},"returnParameters":{"id":3765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3764,"mutability":"mutable","name":"minimumWrapAmount","nameLocation":"11100:17:16","nodeType":"VariableDeclaration","scope":3771,"src":"11092:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3763,"name":"uint256","nodeType":"ElementaryTypeName","src":"11092:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11091:27:16"},"scope":3966,"src":"11037:135:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1875],"body":{"id":3781,"nodeType":"Block","src":"11305:58:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3777,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"11322:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11329:25:16","memberName":"getPoolMinimumTotalSupply","nodeType":"MemberAccess","referencedDeclaration":672,"src":"11322:32:16","typeDescriptions":{"typeIdentifier":"t_function_external_pure$__$returns$_t_uint256_$","typeString":"function () pure external returns (uint256)"}},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11322:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3776,"id":3780,"nodeType":"Return","src":"11315:41:16"}]},"documentation":{"id":3772,"nodeType":"StructuredDocumentation","src":"11178:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"d0965a6b","id":3782,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolMinimumTotalSupply","nameLocation":"11222:25:16","nodeType":"FunctionDefinition","parameters":{"id":3773,"nodeType":"ParameterList","parameters":[],"src":"11247:2:16"},"returnParameters":{"id":3776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3775,"mutability":"mutable","name":"poolMinimumTotalSupply","nameLocation":"11281:22:16","nodeType":"VariableDeclaration","scope":3782,"src":"11273:30:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3774,"name":"uint256","nodeType":"ElementaryTypeName","src":"11273:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11272:32:16"},"scope":3966,"src":"11213:150:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1881],"body":{"id":3792,"nodeType":"Block","src":"11500:60:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3788,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"11517:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11524:27:16","memberName":"getBufferMinimumTotalSupply","nodeType":"MemberAccess","referencedDeclaration":678,"src":"11517:34:16","typeDescriptions":{"typeIdentifier":"t_function_external_pure$__$returns$_t_uint256_$","typeString":"function () pure external returns (uint256)"}},"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11517:36:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3787,"id":3791,"nodeType":"Return","src":"11510:43:16"}]},"documentation":{"id":3783,"nodeType":"StructuredDocumentation","src":"11369:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"26a8a991","id":3793,"implemented":true,"kind":"function","modifiers":[],"name":"getBufferMinimumTotalSupply","nameLocation":"11413:27:16","nodeType":"FunctionDefinition","parameters":{"id":3784,"nodeType":"ParameterList","parameters":[],"src":"11440:2:16"},"returnParameters":{"id":3787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3786,"mutability":"mutable","name":"bufferMinimumTotalSupply","nameLocation":"11474:24:16","nodeType":"VariableDeclaration","scope":3793,"src":"11466:32:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3785,"name":"uint256","nodeType":"ElementaryTypeName","src":"11466:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11465:34:16"},"scope":3966,"src":"11404:156:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1899],"body":{"id":3803,"nodeType":"Block","src":"11888:46:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3799,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"11905:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11912:13:16","memberName":"isVaultPaused","nodeType":"MemberAccess","referencedDeclaration":696,"src":"11905:20:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$","typeString":"function () view external returns (bool)"}},"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11905:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3798,"id":3802,"nodeType":"Return","src":"11898:29:16"}]},"documentation":{"id":3794,"nodeType":"StructuredDocumentation","src":"11787:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"098401f5","id":3804,"implemented":true,"kind":"function","modifiers":[],"name":"isVaultPaused","nameLocation":"11831:13:16","nodeType":"FunctionDefinition","parameters":{"id":3795,"nodeType":"ParameterList","parameters":[],"src":"11844:2:16"},"returnParameters":{"id":3798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3797,"mutability":"mutable","name":"vaultPaused","nameLocation":"11875:11:16","nodeType":"VariableDeclaration","scope":3804,"src":"11870:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3796,"name":"bool","nodeType":"ElementaryTypeName","src":"11870:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11869:18:16"},"scope":3966,"src":"11822:112:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1909],"body":{"id":3818,"nodeType":"Block","src":"12140:52:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3814,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"12157:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12164:19:16","memberName":"getVaultPausedState","nodeType":"MemberAccess","referencedDeclaration":706,"src":"12157:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$_t_uint32_$_t_uint32_$","typeString":"function () view external returns (bool,uint32,uint32)"}},"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12157:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$_t_uint32_$","typeString":"tuple(bool,uint32,uint32)"}},"functionReturnParameters":3813,"id":3817,"nodeType":"Return","src":"12150:35:16"}]},"documentation":{"id":3805,"nodeType":"StructuredDocumentation","src":"11940:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"85c8c015","id":3819,"implemented":true,"kind":"function","modifiers":[],"name":"getVaultPausedState","nameLocation":"11984:19:16","nodeType":"FunctionDefinition","parameters":{"id":3806,"nodeType":"ParameterList","parameters":[],"src":"12003:2:16"},"returnParameters":{"id":3813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3808,"mutability":"mutable","name":"vaultPaused","nameLocation":"12058:11:16","nodeType":"VariableDeclaration","scope":3819,"src":"12053:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3807,"name":"bool","nodeType":"ElementaryTypeName","src":"12053:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3810,"mutability":"mutable","name":"vaultPauseWindowEndTime","nameLocation":"12078:23:16","nodeType":"VariableDeclaration","scope":3819,"src":"12071:30:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3809,"name":"uint32","nodeType":"ElementaryTypeName","src":"12071:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3812,"mutability":"mutable","name":"vaultBufferPeriodEndTime","nameLocation":"12110:24:16","nodeType":"VariableDeclaration","scope":3819,"src":"12103:31:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3811,"name":"uint32","nodeType":"ElementaryTypeName","src":"12103:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"12052:83:16"},"scope":3966,"src":"11975:217:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1919],"body":{"id":3843,"nodeType":"Block","src":"12609:171:16","statements":[{"assignments":[3831],"declarations":[{"constant":false,"id":3831,"mutability":"mutable","name":"poolConfig","nameLocation":"12637:10:16","nodeType":"VariableDeclaration","scope":3843,"src":"12619:28:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2588_memory_ptr","typeString":"struct PoolConfig"},"typeName":{"id":3830,"nodeType":"UserDefinedTypeName","pathNode":{"id":3829,"name":"PoolConfig","nameLocations":["12619:10:16"],"nodeType":"IdentifierPath","referencedDeclaration":2588,"src":"12619:10:16"},"referencedDeclaration":2588,"src":"12619:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2588_storage_ptr","typeString":"struct PoolConfig"}},"visibility":"internal"}],"id":3836,"initialValue":{"arguments":[{"id":3834,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"12671:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3832,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"12650:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12657:13:16","memberName":"getPoolConfig","nodeType":"MemberAccess","referencedDeclaration":2187,"src":"12650:20:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_struct$_PoolConfig_$2588_memory_ptr_$","typeString":"function (address) view external returns (struct PoolConfig memory)"}},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12650:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2588_memory_ptr","typeString":"struct PoolConfig memory"}},"nodeType":"VariableDeclarationStatement","src":"12619:57:16"},{"expression":{"components":[{"expression":{"id":3837,"name":"poolConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"12695:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2588_memory_ptr","typeString":"struct PoolConfig memory"}},"id":3838,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12706:26:16","memberName":"aggregateSwapFeePercentage","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"12695:37:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3839,"name":"poolConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"12734:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2588_memory_ptr","typeString":"struct PoolConfig memory"}},"id":3840,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12745:27:16","memberName":"aggregateYieldFeePercentage","nodeType":"MemberAccess","referencedDeclaration":2575,"src":"12734:38:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3841,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12694:79:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":3828,"id":3842,"nodeType":"Return","src":"12687:86:16"}]},"documentation":{"id":3820,"nodeType":"StructuredDocumentation","src":"12414:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"295f0540","id":3844,"implemented":true,"kind":"function","modifiers":[],"name":"getAggregateFeePercentages","nameLocation":"12458:26:16","nodeType":"FunctionDefinition","parameters":{"id":3823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3822,"mutability":"mutable","name":"pool","nameLocation":"12502:4:16","nodeType":"VariableDeclaration","scope":3844,"src":"12494:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3821,"name":"address","nodeType":"ElementaryTypeName","src":"12494:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12484:28:16"},"returnParameters":{"id":3828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3825,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"12544:26:16","nodeType":"VariableDeclaration","scope":3844,"src":"12536:34:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3824,"name":"uint256","nodeType":"ElementaryTypeName","src":"12536:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3827,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"12580:27:16","nodeType":"VariableDeclaration","scope":3844,"src":"12572:35:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3826,"name":"uint256","nodeType":"ElementaryTypeName","src":"12572:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12535:73:16"},"scope":3966,"src":"12449:331:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1925],"body":{"id":3858,"nodeType":"Block","src":"12874:77:16","statements":[{"expression":{"arguments":[{"id":3855,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3847,"src":"12939:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3850,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"12884:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12891:24:16","memberName":"getProtocolFeeController","nodeType":"MemberAccess","referencedDeclaration":2343,"src":"12884:31:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IProtocolFeeController_$580_$","typeString":"function () view external returns (contract IProtocolFeeController)"}},"id":3853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12884:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$580","typeString":"contract IProtocolFeeController"}},"id":3854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12918:20:16","memberName":"collectAggregateFees","nodeType":"MemberAccess","referencedDeclaration":392,"src":"12884:54:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":3856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12884:60:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3857,"nodeType":"ExpressionStatement","src":"12884:60:16"}]},"documentation":{"id":3845,"nodeType":"StructuredDocumentation","src":"12786:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"8f4ab9ca","id":3859,"implemented":true,"kind":"function","modifiers":[],"name":"collectAggregateFees","nameLocation":"12830:20:16","nodeType":"FunctionDefinition","parameters":{"id":3848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3847,"mutability":"mutable","name":"pool","nameLocation":"12859:4:16","nodeType":"VariableDeclaration","scope":3859,"src":"12851:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3846,"name":"address","nodeType":"ElementaryTypeName","src":"12851:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12850:14:16"},"returnParameters":{"id":3849,"nodeType":"ParameterList","parameters":[],"src":"12874:0:16"},"scope":3966,"src":"12821:130:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1940],"body":{"id":3869,"nodeType":"Block","src":"13284:49:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3865,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"13301:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13308:16:16","memberName":"areBuffersPaused","nodeType":"MemberAccess","referencedDeclaration":799,"src":"13301:23:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$","typeString":"function () view external returns (bool)"}},"id":3867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13301:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3864,"id":3868,"nodeType":"Return","src":"13294:32:16"}]},"documentation":{"id":3860,"nodeType":"StructuredDocumentation","src":"13178:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"55cba7fe","id":3870,"implemented":true,"kind":"function","modifiers":[],"name":"areBuffersPaused","nameLocation":"13222:16:16","nodeType":"FunctionDefinition","parameters":{"id":3861,"nodeType":"ParameterList","parameters":[],"src":"13238:2:16"},"returnParameters":{"id":3864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3863,"mutability":"mutable","name":"buffersPaused","nameLocation":"13269:13:16","nodeType":"VariableDeclaration","scope":3870,"src":"13264:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3862,"name":"bool","nodeType":"ElementaryTypeName","src":"13264:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13263:20:16"},"scope":3966,"src":"13213:120:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1958],"body":{"id":3884,"nodeType":"Block","src":"13469:66:16","statements":[{"expression":{"arguments":[{"id":3881,"name":"wrappedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"13515:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}],"expression":{"id":3879,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"13486:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13493:21:16","memberName":"getERC4626BufferAsset","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"13486:28:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_contract$_IERC4626_$3024_$returns$_t_address_$","typeString":"function (contract IERC4626) view external returns (address)"}},"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13486:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3878,"id":3883,"nodeType":"Return","src":"13479:49:16"}]},"documentation":{"id":3871,"nodeType":"StructuredDocumentation","src":"13339:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"0387587d","id":3885,"implemented":true,"kind":"function","modifiers":[],"name":"getBufferAsset","nameLocation":"13383:14:16","nodeType":"FunctionDefinition","parameters":{"id":3875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3874,"mutability":"mutable","name":"wrappedToken","nameLocation":"13407:12:16","nodeType":"VariableDeclaration","scope":3885,"src":"13398:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":3873,"nodeType":"UserDefinedTypeName","pathNode":{"id":3872,"name":"IERC4626","nameLocations":["13398:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"13398:8:16"},"referencedDeclaration":3024,"src":"13398:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"13397:23:16"},"returnParameters":{"id":3878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3877,"mutability":"mutable","name":"underlyingToken","nameLocation":"13452:15:16","nodeType":"VariableDeclaration","scope":3885,"src":"13444:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3876,"name":"address","nodeType":"ElementaryTypeName","src":"13444:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13443:25:16"},"scope":3966,"src":"13374:161:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1949],"body":{"id":3899,"nodeType":"Block","src":"13678:66:16","statements":[{"expression":{"arguments":[{"id":3896,"name":"wrappedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"13724:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}],"expression":{"id":3894,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"13695:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13702:21:16","memberName":"getERC4626BufferAsset","nodeType":"MemberAccess","referencedDeclaration":2286,"src":"13695:28:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_contract$_IERC4626_$3024_$returns$_t_address_$","typeString":"function (contract IERC4626) view external returns (address)"}},"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13695:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3893,"id":3898,"nodeType":"Return","src":"13688:49:16"}]},"documentation":{"id":3886,"nodeType":"StructuredDocumentation","src":"13541:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"4afbaf5a","id":3900,"implemented":true,"kind":"function","modifiers":[],"name":"getERC4626BufferAsset","nameLocation":"13585:21:16","nodeType":"FunctionDefinition","parameters":{"id":3890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3889,"mutability":"mutable","name":"wrappedToken","nameLocation":"13616:12:16","nodeType":"VariableDeclaration","scope":3900,"src":"13607:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":3888,"nodeType":"UserDefinedTypeName","pathNode":{"id":3887,"name":"IERC4626","nameLocations":["13607:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"13607:8:16"},"referencedDeclaration":3024,"src":"13607:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"13606:23:16"},"returnParameters":{"id":3893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3892,"mutability":"mutable","name":"underlyingToken","nameLocation":"13661:15:16","nodeType":"VariableDeclaration","scope":3900,"src":"13653:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3891,"name":"address","nodeType":"ElementaryTypeName","src":"13653:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13652:25:16"},"scope":3966,"src":"13576:168:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1969],"body":{"id":3917,"nodeType":"Block","src":"13928:81:16","statements":[{"expression":{"arguments":[{"id":3913,"name":"wrappedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"13973:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},{"id":3914,"name":"liquidityOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"13987:14:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3911,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"13945:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13952:20:16","memberName":"getBufferOwnerShares","nodeType":"MemberAccess","referencedDeclaration":880,"src":"13945:27:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_contract$_IERC4626_$3024_$_t_address_$returns$_t_uint256_$","typeString":"function (contract IERC4626,address) view external returns (uint256)"}},"id":3915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13945:57:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3910,"id":3916,"nodeType":"Return","src":"13938:64:16"}]},"documentation":{"id":3901,"nodeType":"StructuredDocumentation","src":"13750:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"9385e39a","id":3918,"implemented":true,"kind":"function","modifiers":[],"name":"getBufferOwnerShares","nameLocation":"13794:20:16","nodeType":"FunctionDefinition","parameters":{"id":3907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3904,"mutability":"mutable","name":"wrappedToken","nameLocation":"13833:12:16","nodeType":"VariableDeclaration","scope":3918,"src":"13824:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":3903,"nodeType":"UserDefinedTypeName","pathNode":{"id":3902,"name":"IERC4626","nameLocations":["13824:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"13824:8:16"},"referencedDeclaration":3024,"src":"13824:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":3906,"mutability":"mutable","name":"liquidityOwner","nameLocation":"13863:14:16","nodeType":"VariableDeclaration","scope":3918,"src":"13855:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3905,"name":"address","nodeType":"ElementaryTypeName","src":"13855:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13814:69:16"},"returnParameters":{"id":3910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3909,"mutability":"mutable","name":"ownerShares","nameLocation":"13915:11:16","nodeType":"VariableDeclaration","scope":3918,"src":"13907:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3908,"name":"uint256","nodeType":"ElementaryTypeName","src":"13907:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13906:21:16"},"scope":3966,"src":"13785:224:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1978],"body":{"id":3932,"nodeType":"Block","src":"14148:65:16","statements":[{"expression":{"arguments":[{"id":3929,"name":"wrappedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"14193:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}],"expression":{"id":3927,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"14165:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14172:20:16","memberName":"getBufferTotalShares","nodeType":"MemberAccess","referencedDeclaration":889,"src":"14165:27:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_contract$_IERC4626_$3024_$returns$_t_uint256_$","typeString":"function (contract IERC4626) view external returns (uint256)"}},"id":3930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14165:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3926,"id":3931,"nodeType":"Return","src":"14158:48:16"}]},"documentation":{"id":3919,"nodeType":"StructuredDocumentation","src":"14015:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"f2784e07","id":3933,"implemented":true,"kind":"function","modifiers":[],"name":"getBufferTotalShares","nameLocation":"14059:20:16","nodeType":"FunctionDefinition","parameters":{"id":3923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3922,"mutability":"mutable","name":"wrappedToken","nameLocation":"14089:12:16","nodeType":"VariableDeclaration","scope":3933,"src":"14080:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":3921,"nodeType":"UserDefinedTypeName","pathNode":{"id":3920,"name":"IERC4626","nameLocations":["14080:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"14080:8:16"},"referencedDeclaration":3024,"src":"14080:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"14079:23:16"},"returnParameters":{"id":3926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3925,"mutability":"mutable","name":"bufferShares","nameLocation":"14134:12:16","nodeType":"VariableDeclaration","scope":3933,"src":"14126:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3924,"name":"uint256","nodeType":"ElementaryTypeName","src":"14126:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14125:22:16"},"scope":3966,"src":"14050:163:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1989],"body":{"id":3949,"nodeType":"Block","src":"14397:61:16","statements":[{"expression":{"arguments":[{"id":3946,"name":"wrappedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3937,"src":"14438:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}],"expression":{"id":3944,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"14414:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14421:16:16","memberName":"getBufferBalance","nodeType":"MemberAccess","referencedDeclaration":900,"src":"14414:23:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_contract$_IERC4626_$3024_$returns$_t_uint256_$_t_uint256_$","typeString":"function (contract IERC4626) view external returns (uint256,uint256)"}},"id":3947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14414:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":3943,"id":3948,"nodeType":"Return","src":"14407:44:16"}]},"documentation":{"id":3934,"nodeType":"StructuredDocumentation","src":"14219:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"4021fe0f","id":3950,"implemented":true,"kind":"function","modifiers":[],"name":"getBufferBalance","nameLocation":"14263:16:16","nodeType":"FunctionDefinition","parameters":{"id":3938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3937,"mutability":"mutable","name":"wrappedToken","nameLocation":"14298:12:16","nodeType":"VariableDeclaration","scope":3950,"src":"14289:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":3936,"nodeType":"UserDefinedTypeName","pathNode":{"id":3935,"name":"IERC4626","nameLocations":["14289:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"14289:8:16"},"referencedDeclaration":3024,"src":"14289:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"14279:37:16"},"returnParameters":{"id":3943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3940,"mutability":"mutable","name":"underlyingBalanceRaw","nameLocation":"14348:20:16","nodeType":"VariableDeclaration","scope":3950,"src":"14340:28:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3939,"name":"uint256","nodeType":"ElementaryTypeName","src":"14340:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3942,"mutability":"mutable","name":"wrappedBalanceRaw","nameLocation":"14378:17:16","nodeType":"VariableDeclaration","scope":3950,"src":"14370:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3941,"name":"uint256","nodeType":"ElementaryTypeName","src":"14370:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14339:57:16"},"scope":3966,"src":"14254:204:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1934],"body":{"id":3964,"nodeType":"Block","src":"14607:71:16","statements":[{"expression":{"arguments":[{"id":3961,"name":"wrappedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3954,"src":"14658:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}],"expression":{"id":3959,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"14624:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$618","typeString":"contract IVault"}},"id":3960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14631:26:16","memberName":"isERC4626BufferInitialized","nodeType":"MemberAccess","referencedDeclaration":2277,"src":"14624:33:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_contract$_IERC4626_$3024_$returns$_t_bool_$","typeString":"function (contract IERC4626) view external returns (bool)"}},"id":3962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14624:47:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3958,"id":3963,"nodeType":"Return","src":"14617:54:16"}]},"documentation":{"id":3951,"nodeType":"StructuredDocumentation","src":"14464:30:16","text":"@inheritdoc IVaultExplorer"},"functionSelector":"6844846b","id":3965,"implemented":true,"kind":"function","modifiers":[],"name":"isERC4626BufferInitialized","nameLocation":"14508:26:16","nodeType":"FunctionDefinition","parameters":{"id":3955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3954,"mutability":"mutable","name":"wrappedToken","nameLocation":"14544:12:16","nodeType":"VariableDeclaration","scope":3965,"src":"14535:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"},"typeName":{"id":3953,"nodeType":"UserDefinedTypeName","pathNode":{"id":3952,"name":"IERC4626","nameLocations":["14535:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3024,"src":"14535:8:16"},"referencedDeclaration":3024,"src":"14535:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$3024","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"14534:23:16"},"returnParameters":{"id":3958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3957,"mutability":"mutable","name":"isBufferInitialized","nameLocation":"14586:19:16","nodeType":"VariableDeclaration","scope":3965,"src":"14581:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3956,"name":"bool","nodeType":"ElementaryTypeName","src":"14581:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14580:26:16"},"scope":3966,"src":"14499:179:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3967,"src":"685:13995:16","usedErrors":[],"usedEvents":[]}],"src":"46:14635:16"},"id":16}},"contracts":{"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"IAuthentication":{"abi":[{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"actionId","type":"bytes32"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"actionId\":\"The computed actionId\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}]},\"kind\":\"user\",\"methods\":{\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"notice\":\"Simple interface for permissioned calling of external functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":\"IAuthentication\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"IRateProvider":{"abi":[{"inputs":[],"name":"getRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getRate()":"679aefce"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRate()\":{\"details\":\"The meaning of this rate depends on the context. Note that there may be an error associated with a token rate, and the caller might require a certain rounding direction to ensure correctness. This (legacy) interface does not take a rounding direction or return an error, so great care must be taken when interpreting and using rates in downstream computations.\",\"returns\":{\"rate\":\"The current token rate\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRate()\":{\"notice\":\"An 18 decimal fixed point number representing the exchange rate of one token to another related token.\"}},\"notice\":\"General interface for token exchange rates.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":\"IRateProvider\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol":{"IAuthorizer":{"abi":[{"inputs":[{"internalType":"bytes32","name":"actionId","type":"bytes32"},{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"where","type":"address"}],"name":"canPerform","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"canPerform(bytes32,address,address)":"9be2a884"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"}],\"name\":\"canPerform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"params\":{\"account\":\"Account trying to perform the action\",\"actionId\":\"Identifier for the action to be performed\",\"where\":\"Target contract for the action\"},\"returns\":{\"success\":\"True if the action is permitted\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"notice\":\"Returns true if `account` can perform the action described by `actionId` in the contract `where`.\"}},\"notice\":\"Interface to the Vault's permission system.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":\"IAuthorizer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol":{"IHooks":{"abi":[{"inputs":[],"name":"getHookFlags","outputs":[{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"}],"internalType":"struct HookFlags","name":"hookFlags","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256[]","name":"amountsInScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"amountsInRaw","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onAfterAddLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256[]","name":"hookAdjustedAmountsInRaw","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onAfterInitialize","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOutScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"amountsOutRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onAfterRemoveLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256[]","name":"hookAdjustedAmountsOutRaw","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountInScaled18","type":"uint256"},{"internalType":"uint256","name":"amountOutScaled18","type":"uint256"},{"internalType":"uint256","name":"tokenInBalanceScaled18","type":"uint256"},{"internalType":"uint256","name":"tokenOutBalanceScaled18","type":"uint256"},{"internalType":"uint256","name":"amountCalculatedScaled18","type":"uint256"},{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct AfterSwapParams","name":"params","type":"tuple"}],"name":"onAfterSwap","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256","name":"hookAdjustedAmountCalculatedRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256[]","name":"maxAmountsInScaled18","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onBeforeAddLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onBeforeInitialize","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOutScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onBeforeRemoveLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"params","type":"tuple"},{"internalType":"address","name":"pool","type":"address"}],"name":"onBeforeSwap","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"params","type":"tuple"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"}],"name":"onComputeDynamicSwapFeePercentage","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256","name":"dynamicSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"factory","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"onRegister","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getHookFlags()":"d77153a7","onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)":"976907cc","onAfterInitialize(uint256[],uint256,bytes)":"38be241d","onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)":"2754888d","onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))":"18b6eb55","onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)":"45421ec7","onBeforeInitialize(uint256[],bytes)":"1c149e28","onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)":"ba5f9f40","onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)":"5211fa77","onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)":"a0e8f5ac","onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))":"0b89f182"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getHookFlags\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"}],\"internalType\":\"struct HookFlags\",\"name\":\"hookFlags\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onAfterAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"hookAdjustedAmountsInRaw\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onAfterInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onAfterRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"hookAdjustedAmountsOutRaw\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenInBalanceScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutBalanceScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCalculatedScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct AfterSwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"onAfterSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"hookAdjustedAmountCalculatedRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsInScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onBeforeAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onBeforeInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOutScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onBeforeRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"onBeforeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"onComputeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dynamicSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"onRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Hooks are functions invoked by the Vault at specific points in the flow of each operation. This guarantees that they are called in the correct order, and with the correct arguments. To maintain this security, these functions should only be called by the Vault. The recommended way to do this is to derive the hook contract from `BaseHooks`, then use the `onlyVault` modifier from `VaultGuard`. (See the examples in /pool-hooks.)\",\"kind\":\"dev\",\"methods\":{\"getHookFlags()\":{\"details\":\"The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero). `onRegister` is the only \\\"mandatory\\\" hook.\",\"returns\":{\"hookFlags\":\"Flags indicating which hooks the contract supports\"}},\"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)\":{\"details\":\"Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"amountsInRaw\":\"Actual amounts of tokens added, sorted in token registration order\",\"amountsInScaled18\":\"Actual amounts of tokens added, sorted in token registration order\",\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"bptAmountOut\":\"Amount of pool tokens minted\",\"kind\":\"The add liquidity operation type (e.g., proportional, custom)\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated an add liquidity operation on the Vault\",\"userData\":\"Additional (optional) data provided by the user\"},\"returns\":{\"hookAdjustedAmountsInRaw\":\"New amountsInRaw, potentially modified by the hook\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onAfterInitialize(uint256[],uint256,bytes)\":{\"details\":\"Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"bptAmountOut\":\"Amount of pool tokens minted during initialization\",\"exactAmountsIn\":\"Exact amounts of input tokens\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool accepts the initialization results\"}},\"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)\":{\"details\":\"Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"amountsOutRaw\":\"Actual amount of tokens to receive, sorted in token registration order\",\"amountsOutScaled18\":\"Scaled amount of tokens to receive, sorted in token registration order\",\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"bptAmountIn\":\"Amount of pool tokens to burn\",\"kind\":\"The type of remove liquidity operation (e.g., proportional, custom)\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated a remove liquidity operation on the Vault\",\"userData\":\"Additional (optional) data provided by the user\"},\"returns\":{\"hookAdjustedAmountsOutRaw\":\"New amountsOutRaw, potentially modified by the hook\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))\":{\"details\":\"Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see above for struct definition)\"},\"returns\":{\"hookAdjustedAmountCalculatedRaw\":\"New amount calculated, potentially modified by the hook\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"kind\":\"The add liquidity operation type (e.g., proportional, custom)\",\"maxAmountsInScaled18\":\"Maximum amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated an add liquidity operation on the Vault\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeInitialize(uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with initialization\"}},\"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"kind\":\"The type of remove liquidity operation (e.g., proportional, custom)\",\"maxBptAmountIn\":\"Maximum amount of input pool tokens\",\"minAmountsOutScaled18\":\"Minimum output amounts, sorted in token registration order\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated a remove liquidity operation on the Vault\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)\":{\"details\":\"Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see PoolSwapParams for struct definition)\",\"pool\":\"Pool address, used to get pool information from the Vault (poolData, token config, etc.)\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)\":{\"details\":\"Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see PoolSwapParams for struct definition)\",\"pool\":\"Pool address, used to get pool information from the Vault (poolData, token config, etc.)\",\"staticSwapFeePercentage\":\"18-decimal FP value of the static swap fee percentage, for reference\"},\"returns\":{\"dynamicSwapFeePercentage\":\"Value of the swap fee percentage, as an 18-decimal FP value\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))\":{\"details\":\"Returns true if registration was successful, and false to revert the pool registration. Make sure this function is properly implemented (e.g. check the factory, and check that the given pool is from the factory). The Vault address will be msg.sender.\",\"params\":{\"factory\":\"Address of the pool factory (contract deploying the pool)\",\"liquidityManagement\":\"Liquidity management flags indicating which functions are enabled\",\"pool\":\"Address of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"},\"returns\":{\"success\":\"True if the hook allowed the registration, false otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getHookFlags()\":{\"notice\":\"Return the set of hooks implemented by the contract.\"},\"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)\":{\"notice\":\"Hook to be executed after adding liquidity.\"},\"onAfterInitialize(uint256[],uint256,bytes)\":{\"notice\":\"Hook to be executed after pool initialization.\"},\"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"Hook to be executed after removing liquidity.\"},\"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))\":{\"notice\":\"Called after a swap to perform further actions once the balances have been updated by the swap.\"},\"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)\":{\"notice\":\"Hook to be executed before adding liquidity.\"},\"onBeforeInitialize(uint256[],bytes)\":{\"notice\":\"Hook executed before pool initialization.\"},\"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)\":{\"notice\":\"Hook to be executed before removing liquidity.\"},\"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)\":{\"notice\":\"Called before a swap to give the Pool an opportunity to perform actions.\"},\"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)\":{\"notice\":\"Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees.\"},\"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))\":{\"notice\":\"Hook executed when a pool is registered with a non-zero hooks contract.\"}},\"notice\":\"Interface for pool hooks.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":\"IHooks\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol":{"IProtocolFeeController":{"abi":[{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"pool","type":"address"}],"name":"CallerIsNotPoolCreator","type":"error"},{"inputs":[],"name":"PoolCreatorFeePercentageTooHigh","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolCreatorNotRegistered","type":"error"},{"inputs":[],"name":"ProtocolSwapFeePercentageTooHigh","type":"error"},{"inputs":[],"name":"ProtocolYieldFeePercentageTooHigh","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"GlobalProtocolSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"yieldFeePercentage","type":"uint256"}],"name":"GlobalProtocolYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"bool","name":"isProtocolFeeExempt","type":"bool"}],"name":"InitialPoolAggregateSwapFeePercentage","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"},{"indexed":false,"internalType":"bool","name":"isProtocolFeeExempt","type":"bool"}],"name":"InitialPoolAggregateYieldFeePercentage","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PoolCreatorFeesWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolCreatorSwapFeePercentage","type":"uint256"}],"name":"PoolCreatorSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolCreatorYieldFeePercentage","type":"uint256"}],"name":"PoolCreatorYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"poolCreator","type":"address"},{"indexed":false,"internalType":"bool","name":"protocolFeeExempt","type":"bool"}],"name":"PoolRegisteredWithFeeController","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ProtocolFeesWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ProtocolSwapFeeCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"ProtocolSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ProtocolYieldFeeCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"yieldFeePercentage","type":"uint256"}],"name":"ProtocolYieldFeePercentageChanged","type":"event"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"protocolFeePercentage","type":"uint256"},{"internalType":"uint256","name":"poolCreatorFeePercentage","type":"uint256"}],"name":"computeAggregateFeePercentage","outputs":[{"internalType":"uint256","name":"aggregateFeePercentage","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getGlobalProtocolSwapFeePercentage","outputs":[{"internalType":"uint256","name":"protocolSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGlobalProtocolYieldFeePercentage","outputs":[{"internalType":"uint256","name":"protocolYieldFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolCreatorFeeAmounts","outputs":[{"internalType":"uint256[]","name":"feeAmounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolCreatorSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolCreatorYieldFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolProtocolSwapFeeInfo","outputs":[{"internalType":"uint256","name":"protocolSwapFeePercentage","type":"uint256"},{"internalType":"bool","name":"isOverride","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolProtocolYieldFeeInfo","outputs":[{"internalType":"uint256","name":"protocolYieldFeePercentage","type":"uint256"},{"internalType":"bool","name":"isOverride","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getProtocolFeeAmounts","outputs":[{"internalType":"uint256[]","name":"feeAmounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"},{"internalType":"bool","name":"protocolFeeExempt","type":"bool"}],"name":"registerPool","outputs":[{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newProtocolSwapFeePercentage","type":"uint256"}],"name":"setGlobalProtocolSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newProtocolYieldFeePercentage","type":"uint256"}],"name":"setGlobalProtocolYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"poolCreatorSwapFeePercentage","type":"uint256"}],"name":"setPoolCreatorSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"poolCreatorYieldFeePercentage","type":"uint256"}],"name":"setPoolCreatorYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newProtocolSwapFeePercentage","type":"uint256"}],"name":"setProtocolSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newProtocolYieldFeePercentage","type":"uint256"}],"name":"setProtocolYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"updateProtocolSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"updateProtocolYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"withdrawPoolCreatorFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawPoolCreatorFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"withdrawProtocolFeesForToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"collectAggregateFees(address)":"8f4ab9ca","computeAggregateFeePercentage(uint256,uint256)":"0ddd60c6","getGlobalProtocolSwapFeePercentage()":"7869ee18","getGlobalProtocolYieldFeePercentage()":"55fb76af","getPoolCreatorFeeAmounts(address)":"9e95f3fd","getPoolCreatorSwapFeePercentage(address)":"0b8e059b","getPoolCreatorYieldFeePercentage(address)":"0252aab5","getPoolProtocolSwapFeeInfo(address)":"5c15a0b4","getPoolProtocolYieldFeeInfo(address)":"7a2b97dc","getProtocolFeeAmounts(address)":"8df44c54","isPoolRegistered(address)":"c673bdaf","registerPool(address,address,bool)":"77ff76e7","setGlobalProtocolSwapFeePercentage(uint256)":"8a3c5c69","setGlobalProtocolYieldFeePercentage(uint256)":"a93df2a4","setPoolCreatorSwapFeePercentage(address,uint256)":"1377c16c","setPoolCreatorYieldFeePercentage(address,uint256)":"3af52712","setProtocolSwapFeePercentage(address,uint256)":"fd267f39","setProtocolYieldFeePercentage(address,uint256)":"abaa3356","updateProtocolSwapFeePercentage(address)":"71ecc8fb","updateProtocolYieldFeePercentage(address)":"71447ea8","vault()":"fbfa77cf","withdrawPoolCreatorFees(address)":"52f125f0","withdrawPoolCreatorFees(address,address)":"f7061445","withdrawProtocolFees(address,address)":"cf7b287f","withdrawProtocolFeesForToken(address,address,address)":"b53a70b2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"CallerIsNotPoolCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolCreatorFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreatorNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolSwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolYieldFeePercentageTooHigh\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"GlobalProtocolSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"GlobalProtocolYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProtocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"InitialPoolAggregateSwapFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProtocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"InitialPoolAggregateYieldFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolCreatorFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolCreatorSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"PoolCreatorSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolCreatorYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"PoolCreatorYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"PoolRegisteredWithFeeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolSwapFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ProtocolSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolYieldFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ProtocolYieldFeePercentageChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolCreatorFeePercentage\",\"type\":\"uint256\"}],\"name\":\"computeAggregateFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aggregateFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalProtocolSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalProtocolYieldFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolYieldFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCreatorFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCreatorSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCreatorYieldFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolProtocolSwapFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOverride\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolProtocolYieldFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolYieldFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOverride\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getProtocolFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setGlobalProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setGlobalProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolCreatorSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setPoolCreatorSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolCreatorYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setPoolCreatorYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"updateProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"updateProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"withdrawPoolCreatorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawPoolCreatorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFeesForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CallerIsNotPoolCreator(address,address)\":[{\"params\":{\"caller\":\"The account attempting to withdraw pool creator fees\",\"pool\":\"The pool the caller tried to withdraw from\"}}],\"PoolCreatorNotRegistered(address)\":[{\"params\":{\"pool\":\"The pool with no creator\"}}],\"ProtocolSwapFeePercentageTooHigh()\":[{\"details\":\"Note that this is checked for both the global and pool-specific protocol swap fee percentages.\"}],\"ProtocolYieldFeePercentageTooHigh()\":[{\"details\":\"Note that this is checked for both the global and pool-specific protocol yield fee percentages.\"}]},\"events\":{\"GlobalProtocolSwapFeePercentageChanged(uint256)\":{\"params\":{\"swapFeePercentage\":\"The updated protocol swap fee percentage\"}},\"GlobalProtocolYieldFeePercentageChanged(uint256)\":{\"params\":{\"yieldFeePercentage\":\"The updated protocol yield fee percentage\"}},\"InitialPoolAggregateSwapFeePercentage(address,uint256,bool)\":{\"details\":\"If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will equal the current global swap fee percentage.\",\"params\":{\"aggregateSwapFeePercentage\":\"The initial aggregate swap fee percentage\",\"isProtocolFeeExempt\":\"True if the pool is exempt from taking protocol fees initially\",\"pool\":\"The pool being registered\"}},\"InitialPoolAggregateYieldFeePercentage(address,uint256,bool)\":{\"details\":\"If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will equal the current global yield fee percentage.\",\"params\":{\"aggregateYieldFeePercentage\":\"The initial aggregate yield fee percentage\",\"isProtocolFeeExempt\":\"True if the pool is exempt from taking protocol fees initially\",\"pool\":\"The pool being registered\"}},\"PoolCreatorFeesWithdrawn(address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the fee token that was withdrawn\",\"pool\":\"The pool from which pool creator fees are being withdrawn\",\"recipient\":\"The recipient of the funds (the pool creator if permissionless, or another account)\",\"token\":\"The token being withdrawn\"}},\"PoolCreatorSwapFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose pool creator swap fee will be changed\",\"poolCreatorSwapFeePercentage\":\"The new pool creator swap fee percentage for the pool\"}},\"PoolCreatorYieldFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose pool creator yield fee will be changed\",\"poolCreatorYieldFeePercentage\":\"The new pool creator yield fee percentage for the pool\"}},\"PoolRegisteredWithFeeController(address,address,bool)\":{\"details\":\"The `PoolRegistered` event includes the `roleAccounts` field, which also records the pool creator, but this simpler event is also provided for convenience. Though `InitialPoolAggregateSwapFeePercentage` and its yield fee counterpart also include the protocol fee exemption flag, we might as well include it here as well.\",\"params\":{\"pool\":\"The address of the pool being registered\",\"poolCreator\":\"The address of the pool creator (non-zero, or the event would not be emitted)\",\"protocolFeeExempt\":\"True if the pool is initially exempt from protocol fees\"}},\"ProtocolFeesWithdrawn(address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the fee token that was withdrawn\",\"pool\":\"The pool from which protocol fees are being withdrawn\",\"recipient\":\"The recipient of the funds\",\"token\":\"The token being withdrawn\"}},\"ProtocolSwapFeeCollected(address,address,uint256)\":{\"details\":\"Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs in the Vault, but fee collection happens in the ProtocolFeeController, the swap fees reported here may encompass multiple operations.\",\"params\":{\"amount\":\"The amount of the token collected in fees\",\"pool\":\"The pool on which the swap fee was charged\",\"token\":\"The token in which the swap fee was charged\"}},\"ProtocolSwapFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose protocol swap fee will be changed\",\"swapFeePercentage\":\"The updated protocol swap fee percentage\"}},\"ProtocolYieldFeeCollected(address,address,uint256)\":{\"details\":\"Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs in the Vault, but fee collection happens in the ProtocolFeeController, the yield fees reported here may encompass multiple operations.\",\"params\":{\"amount\":\"The amount of the token collected in fees\",\"pool\":\"The pool on which the yield fee was charged\",\"token\":\"The token in which the yield fee was charged\"}},\"ProtocolYieldFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose protocol yield fee will be changed\",\"yieldFeePercentage\":\"The updated protocol yield fee percentage\"}}},\"kind\":\"dev\",\"methods\":{\"collectAggregateFees(address)\":{\"params\":{\"pool\":\"The pool with aggregate fees\"}},\"computeAggregateFeePercentage(uint256,uint256)\":{\"details\":\"Not tied to any particular pool; this just performs the low-level \\\"additive fee\\\" calculation. Note that pool creator fees are calculated based on creatorAndLpFees, and not in totalFees. Since aggregate fees are stored in the Vault with 24-bit precision, this will truncate any values that require greater precision. It is expected that pool creators will negotiate with the DAO and agree on reasonable values for these fee components, but the truncation ensures it will not revert for any valid set of fee percentages. See example below: tokenOutAmount = 10000; poolSwapFeePct = 10%; protocolFeePct = 40%; creatorFeePct = 60% totalFees = tokenOutAmount * poolSwapFeePct = 10000 * 10% = 1000 protocolFees = totalFees * protocolFeePct = 1000 * 40% = 400 creatorAndLpFees = totalFees - protocolFees = 1000 - 400 = 600 creatorFees = creatorAndLpFees * creatorFeePct = 600 * 60% = 360 lpFees (will stay in the pool) = creatorAndLpFees - creatorFees = 600 - 360 = 240\",\"params\":{\"poolCreatorFeePercentage\":\"The pool creator portion of the aggregate fee percentage\",\"protocolFeePercentage\":\"The protocol portion of the aggregate fee percentage\"},\"returns\":{\"aggregateFeePercentage\":\"The computed aggregate percentage\"}},\"getGlobalProtocolSwapFeePercentage()\":{\"returns\":{\"protocolSwapFeePercentage\":\"The global protocol swap fee percentage\"}},\"getGlobalProtocolYieldFeePercentage()\":{\"returns\":{\"protocolYieldFeePercentage\":\"The global protocol yield fee percentage\"}},\"getPoolCreatorFeeAmounts(address)\":{\"details\":\"Includes both swap and yield fees.\",\"params\":{\"pool\":\"The address of the pool on which fees were collected\"},\"returns\":{\"feeAmounts\":\"The total amounts of each token available for withdrawal, sorted in token registration order\"}},\"getPoolCreatorSwapFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"_0\":\"poolCreatorSwapFeePercentage The pool creator swap fee component of the aggregate swap fee\"}},\"getPoolCreatorYieldFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"_0\":\"poolCreatorSwapFeePercentage The pool creator yield fee component of the aggregate yield fee\"}},\"getPoolProtocolSwapFeeInfo(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"isOverride\":\"True if the protocol fee has been overridden\",\"protocolSwapFeePercentage\":\"The protocol swap fee percentage for the given pool\"}},\"getPoolProtocolYieldFeeInfo(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"isOverride\":\"True if the protocol fee has been overridden\",\"protocolYieldFeePercentage\":\"The protocol yield fee percentage for the given pool\"}},\"getProtocolFeeAmounts(address)\":{\"details\":\"Includes both swap and yield fees.\",\"params\":{\"pool\":\"The address of the pool on which fees were collected\"},\"returns\":{\"feeAmounts\":\"The total amounts of each token available for withdrawal, sorted in token registration order\"}},\"isPoolRegistered(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"_0\":\"isRegistered True if the pool configuration has been set (e.g., through `registerPool`)\"}},\"registerPool(address,address,bool)\":{\"details\":\"This must be called from the Vault during pool registration. It will initialize the pool to the global protocol fee percentage values (or 0, if the `protocolFeeExempt` flags is set), and return the initial aggregate fee percentages, based on an initial pool creator fee of 0.\",\"params\":{\"pool\":\"The address of the pool being registered\",\"poolCreator\":\"The address of the pool creator (or 0 if there won't be a pool creator fee)\",\"protocolFeeExempt\":\"If true, the pool is initially exempt from protocol fees\"},\"returns\":{\"aggregateSwapFeePercentage\":\"The initial aggregate swap fee percentage\",\"aggregateYieldFeePercentage\":\"The initial aggregate yield fee percentage\"}},\"setGlobalProtocolSwapFeePercentage(uint256)\":{\"params\":{\"newProtocolSwapFeePercentage\":\"The new protocol swap fee percentage\"}},\"setGlobalProtocolYieldFeePercentage(uint256)\":{\"params\":{\"newProtocolYieldFeePercentage\":\"The new protocol yield fee percentage\"}},\"setPoolCreatorSwapFeePercentage(address,uint256)\":{\"details\":\"Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to the \\\"net\\\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\",\"params\":{\"pool\":\"The address of the pool for which the pool creator fee will be changed\",\"poolCreatorSwapFeePercentage\":\"The new pool creator swap fee percentage to apply to the pool\"}},\"setPoolCreatorYieldFeePercentage(address,uint256)\":{\"details\":\"Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to the \\\"net\\\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\",\"params\":{\"pool\":\"The address of the pool for which the pool creator fee will be changed\",\"poolCreatorYieldFeePercentage\":\"The new pool creator yield fee percentage to apply to the pool\"}},\"setProtocolSwapFeePercentage(address,uint256)\":{\"params\":{\"newProtocolSwapFeePercentage\":\"The new protocol swap fee percentage for the pool\",\"pool\":\"The address of the pool for which we are setting the protocol swap fee\"}},\"setProtocolYieldFeePercentage(address,uint256)\":{\"params\":{\"newProtocolYieldFeePercentage\":\"The new protocol yield fee percentage for the pool\",\"pool\":\"The address of the pool for which we are setting the protocol yield fee\"}},\"updateProtocolSwapFeePercentage(address)\":{\"details\":\"This is a permissionless call, and will set the pool's fee to the current global fee, if it is different from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\",\"params\":{\"pool\":\"The pool for which we are setting the protocol swap fee\"}},\"updateProtocolYieldFeePercentage(address)\":{\"details\":\"This is a permissionless call, and will set the pool's fee to the current global fee, if it is different from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\",\"params\":{\"pool\":\"The pool for which we are setting the protocol yield fee\"}},\"vault()\":{\"returns\":{\"_0\":\"vault The Vault address\"}},\"withdrawPoolCreatorFees(address)\":{\"details\":\"Sends swap and yield pool creator fees to the registered poolCreator. Since this is a known and immutable value, this function is permissionless.\",\"params\":{\"pool\":\"The pool on which fees were collected\"}},\"withdrawPoolCreatorFees(address,address)\":{\"details\":\"Sends swap and yield pool creator fees to the recipient.\",\"params\":{\"pool\":\"The pool on which fees were collected\",\"recipient\":\"Address to send the tokens\"}},\"withdrawProtocolFees(address,address)\":{\"details\":\"Sends swap and yield protocol fees to the recipient.\",\"params\":{\"pool\":\"The pool on which fees were collected\",\"recipient\":\"Address to send the tokens\"}},\"withdrawProtocolFeesForToken(address,address,address)\":{\"details\":\"Sends swap and yield protocol fees to the recipient.\",\"params\":{\"pool\":\"The pool on which fees were collected\",\"recipient\":\"Address to send the tokens\",\"token\":\"Token to withdraw\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"CallerIsNotPoolCreator(address,address)\":[{\"notice\":\"Error raised if the wrong account attempts to withdraw pool creator fees.\"}],\"PoolCreatorFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the pool creator swap or yield fee percentage exceeds the maximum allowed value.\"}],\"PoolCreatorNotRegistered(address)\":[{\"notice\":\"Error raised if there is no pool creator on a withdrawal attempt from the given pool.\"}],\"ProtocolSwapFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\"}],\"ProtocolYieldFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\"}]},\"events\":{\"GlobalProtocolSwapFeePercentageChanged(uint256)\":{\"notice\":\"Emitted when the protocol swap fee percentage is updated.\"},\"GlobalProtocolYieldFeePercentageChanged(uint256)\":{\"notice\":\"Emitted when the protocol yield fee percentage is updated.\"},\"InitialPoolAggregateSwapFeePercentage(address,uint256,bool)\":{\"notice\":\"Emitted on pool registration with the initial aggregate swap fee percentage, for off-chain processes.\"},\"InitialPoolAggregateYieldFeePercentage(address,uint256,bool)\":{\"notice\":\"Emitted on pool registration with the initial aggregate yield fee percentage, for off-chain processes.\"},\"PoolCreatorFeesWithdrawn(address,address,address,uint256)\":{\"notice\":\"Logs the withdrawal of pool creator fees in a specific token and amount.\"},\"PoolCreatorSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the pool creator swap fee percentage of a pool is updated.\"},\"PoolCreatorYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the pool creator yield fee percentage of a pool is updated.\"},\"PoolRegisteredWithFeeController(address,address,bool)\":{\"notice\":\"Emitted as a convenience during pool registration, more focused than the Vault's `PoolRegistered` event.\"},\"ProtocolFeesWithdrawn(address,address,address,uint256)\":{\"notice\":\"Logs the withdrawal of protocol fees in a specific token and amount.\"},\"ProtocolSwapFeeCollected(address,address,uint256)\":{\"notice\":\"Logs the collection of protocol swap fees in a specific token and amount.\"},\"ProtocolSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the protocol swap fee percentage is updated for a specific pool.\"},\"ProtocolYieldFeeCollected(address,address,uint256)\":{\"notice\":\"Logs the collection of protocol yield fees in a specific token and amount.\"},\"ProtocolYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the protocol yield fee percentage is updated for a specific pool.\"}},\"kind\":\"user\",\"methods\":{\"collectAggregateFees(address)\":{\"notice\":\"Collects aggregate fees from the Vault for a given pool.\"},\"computeAggregateFeePercentage(uint256,uint256)\":{\"notice\":\"Returns a calculated aggregate percentage from protocol and pool creator fee percentages.\"},\"getGlobalProtocolSwapFeePercentage()\":{\"notice\":\"Getter for the current global protocol swap fee.\"},\"getGlobalProtocolYieldFeePercentage()\":{\"notice\":\"Getter for the current global protocol yield fee.\"},\"getPoolCreatorFeeAmounts(address)\":{\"notice\":\"Returns the amount of each pool token allocated to the pool creator for withdrawal.\"},\"getPoolCreatorSwapFeePercentage(address)\":{\"notice\":\"Getter for the current pool creator swap fee percentage for a given pool.\"},\"getPoolCreatorYieldFeePercentage(address)\":{\"notice\":\"Getter for the current pool creator yield fee percentage for a given pool.\"},\"getPoolProtocolSwapFeeInfo(address)\":{\"notice\":\"Getter for the current protocol swap fee for a given pool.\"},\"getPoolProtocolYieldFeeInfo(address)\":{\"notice\":\"Getter for the current protocol yield fee for a given pool.\"},\"getProtocolFeeAmounts(address)\":{\"notice\":\"Returns the amount of each pool token allocated to the protocol for withdrawal.\"},\"isPoolRegistered(address)\":{\"notice\":\"Getter for pool registration flag.\"},\"registerPool(address,address,bool)\":{\"notice\":\"Add pool-specific entries to the protocol swap and yield percentages.\"},\"setGlobalProtocolSwapFeePercentage(uint256)\":{\"notice\":\"Set the global protocol swap fee percentage, used by standard pools.\"},\"setGlobalProtocolYieldFeePercentage(uint256)\":{\"notice\":\"Set the global protocol yield fee percentage, used by standard pools.\"},\"setPoolCreatorSwapFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new pool creator swap fee percentage to the specified pool.\"},\"setPoolCreatorYieldFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new pool creator yield fee percentage to the specified pool.\"},\"setProtocolSwapFeePercentage(address,uint256)\":{\"notice\":\"Override the protocol swap fee percentage for a specific pool.\"},\"setProtocolYieldFeePercentage(address,uint256)\":{\"notice\":\"Override the protocol yield fee percentage for a specific pool.\"},\"updateProtocolSwapFeePercentage(address)\":{\"notice\":\"Override the protocol swap fee percentage for a specific pool.\"},\"updateProtocolYieldFeePercentage(address)\":{\"notice\":\"Override the protocol yield fee percentage for a specific pool.\"},\"vault()\":{\"notice\":\"Get the address of the main Vault contract.\"},\"withdrawPoolCreatorFees(address)\":{\"notice\":\"Withdraw collected pool creator fees for a given pool.\"},\"withdrawPoolCreatorFees(address,address)\":{\"notice\":\"Withdraw collected pool creator fees for a given pool. This is a permissioned function.\"},\"withdrawProtocolFees(address,address)\":{\"notice\":\"Withdraw collected protocol fees for a given pool (all tokens). This is a permissioned function.\"},\"withdrawProtocolFeesForToken(address,address,address)\":{\"notice\":\"Withdraw collected protocol fees for a given pool and a given token. This is a permissioned function.\"}},\"notice\":\"Contract that handles protocol and pool creator fees for the Vault.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":\"IProtocolFeeController\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol":{"IVault":{"abi":[{"inputs":[],"name":"AfterAddLiquidityHookFailed","type":"error"},{"inputs":[],"name":"AfterInitializeHookFailed","type":"error"},{"inputs":[],"name":"AfterRemoveLiquidityHookFailed","type":"error"},{"inputs":[],"name":"AfterSwapHookFailed","type":"error"},{"inputs":[],"name":"AmountGivenZero","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"AmountInAboveMax","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"AmountOutBelowMin","type":"error"},{"inputs":[],"name":"BalanceNotSettled","type":"error"},{"inputs":[],"name":"BeforeAddLiquidityHookFailed","type":"error"},{"inputs":[],"name":"BeforeInitializeHookFailed","type":"error"},{"inputs":[],"name":"BeforeRemoveLiquidityHookFailed","type":"error"},{"inputs":[],"name":"BeforeSwapHookFailed","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"BptAmountInAboveMax","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"BptAmountOutBelowMin","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"BufferAlreadyInitialized","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"BufferNotInitialized","type":"error"},{"inputs":[],"name":"BufferSharesInvalidOwner","type":"error"},{"inputs":[],"name":"BufferSharesInvalidReceiver","type":"error"},{"inputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"}],"name":"BufferTotalSupplyTooLow","type":"error"},{"inputs":[],"name":"CannotReceiveEth","type":"error"},{"inputs":[],"name":"CannotSwapSameToken","type":"error"},{"inputs":[],"name":"DoesNotSupportAddLiquidityCustom","type":"error"},{"inputs":[],"name":"DoesNotSupportDonation","type":"error"},{"inputs":[],"name":"DoesNotSupportRemoveLiquidityCustom","type":"error"},{"inputs":[],"name":"DoesNotSupportUnbalancedLiquidity","type":"error"},{"inputs":[],"name":"DynamicSwapFeeHookFailed","type":"error"},{"inputs":[],"name":"FeePrecisionTooHigh","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"HookAdjustedAmountInAboveMax","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"HookAdjustedAmountOutBelowMin","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"HookAdjustedSwapLimit","type":"error"},{"inputs":[{"internalType":"address","name":"poolHooksContract","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"poolFactory","type":"address"}],"name":"HookRegistrationFailed","type":"error"},{"inputs":[],"name":"InvalidAddLiquidityKind","type":"error"},{"inputs":[],"name":"InvalidRemoveLiquidityKind","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[],"name":"InvalidTokenConfiguration","type":"error"},{"inputs":[],"name":"InvalidTokenDecimals","type":"error"},{"inputs":[],"name":"InvalidTokenType","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"InvalidUnderlyingToken","type":"error"},{"inputs":[{"internalType":"uint256","name":"issuedShares","type":"uint256"},{"internalType":"uint256","name":"minIssuedShares","type":"uint256"}],"name":"IssuedSharesBelowMin","type":"error"},{"inputs":[],"name":"MaxTokens","type":"error"},{"inputs":[],"name":"MinTokens","type":"error"},{"inputs":[],"name":"NotEnoughBufferShares","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"expectedUnderlyingAmount","type":"uint256"},{"internalType":"uint256","name":"actualUnderlyingAmount","type":"uint256"}],"name":"NotEnoughUnderlying","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"expectedWrappedAmount","type":"uint256"},{"internalType":"uint256","name":"actualWrappedAmount","type":"uint256"}],"name":"NotEnoughWrapped","type":"error"},{"inputs":[],"name":"NotVaultDelegateCall","type":"error"},{"inputs":[],"name":"PauseBufferPeriodDurationTooLarge","type":"error"},{"inputs":[],"name":"PercentageAboveMax","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyInitialized","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolInRecoveryMode","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotInRecoveryMode","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotInitialized","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotPaused","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolPauseWindowExpired","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolPaused","type":"error"},{"inputs":[],"name":"ProtocolFeesExceedTotalCollected","type":"error"},{"inputs":[],"name":"QueriesDisabled","type":"error"},{"inputs":[],"name":"QueriesDisabledPermanently","type":"error"},{"inputs":[],"name":"QuoteResultSpoofed","type":"error"},{"inputs":[],"name":"RouterNotTrusted","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderIsNotVault","type":"error"},{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[],"name":"SwapFeePercentageTooHigh","type":"error"},{"inputs":[],"name":"SwapFeePercentageTooLow","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"SwapLimit","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TokenAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TokenNotRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"expectedToken","type":"address"},{"internalType":"address","name":"actualToken","type":"address"}],"name":"TokensMismatch","type":"error"},{"inputs":[],"name":"TradeAmountTooSmall","type":"error"},{"inputs":[],"name":"VaultBuffersArePaused","type":"error"},{"inputs":[],"name":"VaultIsNotUnlocked","type":"error"},{"inputs":[],"name":"VaultNotPaused","type":"error"},{"inputs":[],"name":"VaultPauseWindowDurationTooLarge","type":"error"},{"inputs":[],"name":"VaultPauseWindowExpired","type":"error"},{"inputs":[],"name":"VaultPaused","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"WrapAmountTooSmall","type":"error"},{"inputs":[],"name":"WrongProtocolFeeControllerDeployment","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"underlyingToken","type":"address"}],"name":"WrongUnderlyingToken","type":"error"},{"inputs":[],"name":"WrongVaultAdminDeployment","type":"error"},{"inputs":[],"name":"WrongVaultExtensionDeployment","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"}],"name":"AggregateSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}],"name":"AggregateYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"AuthorizerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnedShares","type":"uint256"}],"name":"BufferSharesBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"issuedShares","type":"uint256"}],"name":"BufferSharesMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":true,"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"amountsAddedRaw","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"swapFeeAmountsRaw","type":"uint256[]"}],"name":"LiquidityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWrapped","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"LiquidityAddedToBuffer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":true,"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"amountsRemovedRaw","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"swapFeeAmountsRaw","type":"uint256[]"}],"name":"LiquidityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWrapped","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"LiquidityRemovedFromBuffer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"}],"name":"PoolInitialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"PoolPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"bool","name":"recoveryMode","type":"bool"}],"name":"PoolRecoveryModeStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"factory","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"indexed":false,"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"indexed":false,"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"},{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"indexed":false,"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"indexed":false,"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"PoolRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IProtocolFeeController","name":"newProtocolFeeController","type":"address"}],"name":"ProtocolFeeControllerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"SwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnedShares","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"withdrawnUnderlying","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"Unwrap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"bytes32","name":"eventKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"eventData","type":"bytes"}],"name":"VaultAuxiliary","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"VaultBuffersPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"VaultPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"VaultQueriesDisabled","type":"event"},{"anonymous":false,"inputs":[],"name":"VaultQueriesEnabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"depositedUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"mintedShares","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"Wrap","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct AddLiquidityParams","name":"params","type":"tuple"}],"name":"addLiquidity","outputs":[{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"maxAmountUnderlyingInRaw","type":"uint256"},{"internalType":"uint256","name":"maxAmountWrappedInRaw","type":"uint256"},{"internalType":"uint256","name":"exactSharesToIssue","type":"uint256"},{"internalType":"address","name":"sharesOwner","type":"address"}],"name":"addLiquidityToBuffer","outputs":[{"internalType":"uint256","name":"amountUnderlyingRaw","type":"uint256"},{"internalType":"uint256","name":"amountWrappedRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"tokenAllowance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"areBuffersPaused","outputs":[{"internalType":"bool","name":"buffersPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"tokenBalance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFees","outputs":[{"internalType":"uint256[]","name":"swapFeeAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"yieldFeeAmounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"swapParams","type":"tuple"}],"name":"computeDynamicSwapFeePercentage","outputs":[{"internalType":"uint256","name":"dynamicSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"disableQuery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"disableQueryPermanently","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"disableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"eventKey","type":"bytes32"},{"internalType":"bytes","name":"eventData","type":"bytes"}],"name":"emitAuxiliaryEvent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enableQuery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"enableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"enum WrappingDirection","name":"direction","type":"uint8"},{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"}],"internalType":"struct BufferWrapOrUnwrapParams","name":"params","type":"tuple"}],"name":"erc4626BufferWrapOrUnwrap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"actionId","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getAddLiquidityCalledFlag","outputs":[{"internalType":"bool","name":"liquidityAdded","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateSwapFeeAmount","outputs":[{"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateYieldFeeAmount","outputs":[{"internalType":"uint256","name":"yieldFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"authorizer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getBptRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferAsset","outputs":[{"internalType":"address","name":"underlyingToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferBalance","outputs":[{"internalType":"uint256","name":"underlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"wrappedBalanceRaw","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"bufferMinimumTotalSupply","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"liquidityOwner","type":"address"}],"name":"getBufferOwnerShares","outputs":[{"internalType":"uint256","name":"ownerShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodDuration","outputs":[{"internalType":"uint32","name":"bufferPeriodDuration","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodEndTime","outputs":[{"internalType":"uint32","name":"bufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferTotalShares","outputs":[{"internalType":"uint256","name":"bufferShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getCurrentLiveBalances","outputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getERC4626BufferAsset","outputs":[{"internalType":"address","name":"asset","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getHooksConfig","outputs":[{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaximumPoolTokens","outputs":[{"internalType":"uint256","name":"maxTokens","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getMinimumPoolTokens","outputs":[{"internalType":"uint256","name":"minTokens","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getMinimumTradeAmount","outputs":[{"internalType":"uint256","name":"minimumTradeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumWrapAmount","outputs":[{"internalType":"uint256","name":"minimumWrapAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonzeroDeltaCount","outputs":[{"internalType":"uint256","name":"nonzeroDeltaCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPauseWindowEndTime","outputs":[{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolConfig","outputs":[{"components":[{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"},{"internalType":"uint40","name":"tokenDecimalDiffs","type":"uint40"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"isPoolRegistered","type":"bool"},{"internalType":"bool","name":"isPoolInitialized","type":"bool"},{"internalType":"bool","name":"isPoolPaused","type":"bool"},{"internalType":"bool","name":"isPoolInRecoveryMode","type":"bool"}],"internalType":"struct PoolConfig","name":"poolConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolData","outputs":[{"components":[{"internalType":"PoolConfigBits","name":"poolConfigBits","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"},{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"}],"internalType":"struct PoolData","name":"poolData","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPoolMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"poolMinimumTotalSupply","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolPausedState","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"},{"internalType":"uint32","name":"poolPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"poolBufferPeriodEndTime","type":"uint32"},{"internalType":"address","name":"pauseManager","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolRoleAccounts","outputs":[{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getPoolTokenCountAndIndexOfToken","outputs":[{"internalType":"uint256","name":"tokenCount","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenInfo","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"lastBalancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenRates","outputs":[{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeeController","outputs":[{"internalType":"contract IProtocolFeeController","name":"protocolFeeController","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getReservesOf","outputs":[{"internalType":"uint256","name":"reserveAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getStaticSwapFeePercentage","outputs":[{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getTokenDelta","outputs":[{"internalType":"int256","name":"tokenDelta","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultAdmin","outputs":[{"internalType":"address","name":"vaultAdmin","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultExtension","outputs":[{"internalType":"address","name":"vaultExtension","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultPausedState","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"},{"internalType":"uint32","name":"vaultPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"vaultBufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"initialize","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"amountUnderlyingRaw","type":"uint256"},{"internalType":"uint256","name":"amountWrappedRaw","type":"uint256"},{"internalType":"uint256","name":"minIssuedShares","type":"uint256"},{"internalType":"address","name":"sharesOwner","type":"address"}],"name":"initializeBuffer","outputs":[{"internalType":"uint256","name":"issuedShares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"isERC4626BufferInitialized","outputs":[{"internalType":"bool","name":"isBufferInitialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInRecoveryMode","outputs":[{"internalType":"bool","name":"inRecoveryMode","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInitialized","outputs":[{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolPaused","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"registered","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabled","outputs":[{"internalType":"bool","name":"queryDisabled","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabledPermanently","outputs":[{"internalType":"bool","name":"queryDisabledPermanently","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isUnlocked","outputs":[{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isVaultPaused","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"pausePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseVaultBuffers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"quote","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"quoteAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"protocolFeeExempt","type":"bool"},{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"},{"internalType":"address","name":"poolHooksContract","type":"address"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"registerPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct RemoveLiquidityParams","name":"params","type":"tuple"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"sharesToRemove","type":"uint256"},{"internalType":"uint256","name":"minAmountUnderlyingOutRaw","type":"uint256"},{"internalType":"uint256","name":"minAmountWrappedOutRaw","type":"uint256"}],"name":"removeLiquidityFromBuffer","outputs":[{"internalType":"uint256","name":"removedUnderlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"removedWrappedBalanceRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"}],"name":"removeLiquidityRecovery","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"sendTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"setAuthorizer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IProtocolFeeController","name":"newProtocolFeeController","type":"address"}],"name":"setProtocolFeeController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"setStaticSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amountHint","type":"uint256"}],"name":"settle","outputs":[{"internalType":"uint256","name":"credit","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct VaultSwapParams","name":"vaultSwapParams","type":"tuple"}],"name":"swap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"tokenTotalSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"unlock","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"unpausePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseVaultBuffers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newAggregateSwapFeePercentage","type":"uint256"}],"name":"updateAggregateSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newAggregateYieldFeePercentage","type":"uint256"}],"name":"updateAggregateYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addLiquidity((address,address,uint256[],uint256,uint8,bytes))":"4af29ec4","addLiquidityToBuffer(address,uint256,uint256,uint256,address)":"e2a92b1a","allowance(address,address,address)":"927da105","approve(address,address,uint256)":"e1f21c67","areBuffersPaused()":"55cba7fe","balanceOf(address,address)":"f7888aec","collectAggregateFees(address)":"8f4ab9ca","computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))":"4d472bdd","disableQuery()":"de1a36a6","disableQueryPermanently()":"821440f2","disableRecoveryMode(address)":"bffb78b2","emitAuxiliaryEvent(bytes32,bytes)":"c8088247","enableQuery()":"e0d55605","enableRecoveryMode(address)":"dc3f574e","erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))":"43583be5","getActionId(bytes4)":"851c1bb3","getAddLiquidityCalledFlag(address)":"ace9b89b","getAggregateSwapFeeAmount(address,address)":"85e0b999","getAggregateYieldFeeAmount(address,address)":"00fdfa13","getAuthorizer()":"aaabadc5","getBptRate(address)":"4f037ee7","getBufferAsset(address)":"0387587d","getBufferBalance(address)":"4021fe0f","getBufferMinimumTotalSupply()":"26a8a991","getBufferOwnerShares(address,address)":"9385e39a","getBufferPeriodDuration()":"20c1fb7a","getBufferPeriodEndTime()":"cd51c12f","getBufferTotalShares(address)":"f2784e07","getCurrentLiveBalances(address)":"535cfd8a","getERC4626BufferAsset(address)":"4afbaf5a","getHooksConfig(address)":"ce8630d4","getMaximumPoolTokens()":"2e42f4d5","getMinimumPoolTokens()":"a8175b27","getMinimumTradeAmount()":"e2cb0ba0","getMinimumWrapAmount()":"53956aa2","getNonzeroDeltaCount()":"db817187","getPauseWindowEndTime()":"8a8d123a","getPoolConfig(address)":"f29486a1","getPoolData(address)":"13d21cdf","getPoolMinimumTotalSupply()":"d0965a6b","getPoolPausedState(address)":"15e32046","getPoolRoleAccounts(address)":"e9ddeb26","getPoolTokenCountAndIndexOfToken(address,address)":"c9c1661b","getPoolTokenInfo(address)":"67e0e076","getPoolTokenRates(address)":"7e361bde","getPoolTokens(address)":"ca4f2803","getProtocolFeeController()":"85f2dbd4","getReservesOf(address)":"96787092","getStaticSwapFeePercentage(address)":"b45090f9","getTokenDelta(address)":"9e825ff5","getVaultAdmin()":"1ba0ae45","getVaultExtension()":"b9a8effa","getVaultPausedState()":"85c8c015","initialize(address,address,address[],uint256[],uint256,bytes)":"ba8a2be0","initializeBuffer(address,uint256,uint256,uint256,address)":"653eb3b0","isERC4626BufferInitialized(address)":"6844846b","isPoolInRecoveryMode(address)":"be7d628a","isPoolInitialized(address)":"532cec7c","isPoolPaused(address)":"6c9bc732","isPoolRegistered(address)":"c673bdaf","isQueryDisabled()":"b4aef0ab","isQueryDisabledPermanently()":"13ef8a5d","isUnlocked()":"8380edb7","isVaultPaused()":"098401f5","pausePool(address)":"55aca1ec","pauseVault()":"9e0879c2","pauseVaultBuffers()":"e085c5a8","quote(bytes)":"edfa3568","quoteAndRevert(bytes)":"757d64b3","registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))":"eeec802f","removeLiquidity((address,address,uint256,uint256[],uint8,bytes))":"21457897","removeLiquidityFromBuffer(address,uint256,uint256,uint256)":"ebc7955c","removeLiquidityRecovery(address,address,uint256,uint256[])":"a07d6040","sendTo(address,address,uint256)":"ae639329","setAuthorizer(address)":"058a628f","setProtocolFeeController(address)":"2d771389","setStaticSwapFeePercentage(address,uint256)":"d15126ba","settle(address,uint256)":"15afd409","swap((uint8,address,address,address,uint256,uint256,bytes))":"2bfb780c","totalSupply(address)":"e4dc2aa4","transfer(address,address,uint256)":"beabacc8","transferFrom(address,address,address,uint256)":"15dacbea","unlock(bytes)":"48c89491","unpausePool(address)":"f21c38cd","unpauseVault()":"0b7562be","unpauseVaultBuffers()":"b9212b49","updateAggregateSwapFeePercentage(address,uint256)":"5e0b06f4","updateAggregateYieldFeePercentage(address,uint256)":"e253670a","vault()":"fbfa77cf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AfterAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountGivenZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"AmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"AmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"BptAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"BptAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"BufferAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"BufferNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BufferSharesInvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BufferSharesInvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"BufferTotalSupplyTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReceiveEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSwapSameToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportAddLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportDonation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportRemoveLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportUnbalancedLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DynamicSwapFeeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeePrecisionTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedSwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolHooksContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"HookRegistrationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRemoveLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"InvalidUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIssuedShares\",\"type\":\"uint256\"}],\"name\":\"IssuedSharesBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBufferShares\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedUnderlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualUnderlyingAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughUnderlying\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedWrappedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualWrappedAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughWrapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaultDelegateCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PauseBufferPeriodDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PercentageAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeesExceedTotalCollected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabledPermanently\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteResultSpoofed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterNotTrusted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualToken\",\"type\":\"address\"}],\"name\":\"TokensMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradeAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultBuffersArePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultIsNotUnlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"WrapAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongProtocolFeeControllerDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"WrongUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultAdminDeployment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultExtensionDeployment\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"AggregateSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"AggregateYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"}],\"name\":\"BufferSharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"}],\"name\":\"BufferSharesMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsAddedRaw\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmountsRaw\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"LiquidityAddedToBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsRemovedRaw\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmountsRaw\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"LiquidityRemovedFromBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PoolPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"recoveryMode\",\"type\":\"bool\"}],\"name\":\"PoolRecoveryModeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IProtocolFeeController\",\"name\":\"newProtocolFeeController\",\"type\":\"address\"}],\"name\":\"ProtocolFeeControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"Unwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"eventKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"VaultAuxiliary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultBuffersPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultQueriesDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultQueriesEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"Wrap\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountUnderlyingInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountWrappedInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactSharesToIssue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sharesOwner\",\"type\":\"address\"}],\"name\":\"addLiquidityToBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlyingRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWrappedRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areBuffersPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"buffersPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yieldFeeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"}],\"name\":\"computeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynamicSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQueryPermanently\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"disableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"emitAuxiliaryEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"enum WrappingDirection\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"}],\"internalType\":\"struct BufferWrapOrUnwrapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"erc4626BufferWrapOrUnwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAddLiquidityCalledFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"liquidityAdded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateSwapFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateYieldFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"authorizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBptRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityOwner\",\"type\":\"address\"}],\"name\":\"getBufferOwnerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ownerShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getCurrentLiveBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getERC4626BufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getHooksConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTradeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumWrapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumWrapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonzeroDeltaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonzeroDeltaCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseWindowEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"tokenDecimalDiffs\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPoolRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInRecoveryMode\",\"type\":\"bool\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"poolConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"PoolConfigBits\",\"name\":\"poolConfigBits\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"poolPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"poolBufferPeriodEndTime\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolRoleAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenCountAndIndexOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastBalancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeController\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"protocolFeeController\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStaticSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"tokenDelta\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultAdmin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultExtension\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vaultPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vaultBufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountUnderlyingRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWrappedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIssuedShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sharesOwner\",\"type\":\"address\"}],\"name\":\"initializeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"isERC4626BufferInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBufferInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inRecoveryMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabledPermanently\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabledPermanently\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVaultBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quoteAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"poolHooksContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesToRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountUnderlyingOutRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountWrappedOutRaw\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityFromBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"removedUnderlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedWrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"removeLiquidityRecovery\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"newProtocolFeeController\",\"type\":\"address\"}],\"name\":\"setProtocolFeeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setStaticSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountHint\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct VaultSwapParams\",\"name\":\"vaultSwapParams\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVaultBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAggregateSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateAggregateSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateAggregateYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AmountInAboveMax(address,uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total token amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\",\"tokenIn\":\"The incoming token\"}}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\",\"tokenOut\":\"The outgoing token\"}}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total BPT amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\"}}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\"}}],\"BufferAlreadyInitialized(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"BufferNotInitialized(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"BufferTotalSupplyTooLow(uint256)\":[{\"params\":{\"totalSupply\":\"The total supply value that was below the minimum\"}}],\"FeePrecisionTooHigh()\":[{\"details\":\"Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%). Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between the aggregate fee calculated here and that stored in the Vault.\"}],\"HookAdjustedAmountInAboveMax(address,uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total token amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\",\"tokenIn\":\"The incoming token\"}}],\"HookAdjustedAmountOutBelowMin(address,uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\",\"tokenOut\":\"The outgoing token\"}}],\"HookAdjustedSwapLimit(uint256,uint256)\":[{\"params\":{\"amount\":\"The total amount in or out\",\"limit\":\"The amount of the limit that has been exceeded\"}}],\"HookRegistrationFailed(address,address,address)\":[{\"params\":{\"pool\":\"Address of the rejected pool\",\"poolFactory\":\"Address of the pool factory\",\"poolHooksContract\":\"Address of the hook contract that rejected the pool registration\"}}],\"InvalidUnderlyingToken(address)\":[{\"details\":\"This should never happen, but a malicious wrapper contract might do this (e.g., in an attempt to re-initialize the buffer).\",\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"IssuedSharesBelowMin(uint256,uint256)\":[{\"details\":\"Shares issued during initialization are below the requested amount.\"}],\"NotEnoughUnderlying(address,uint256,uint256)\":[{\"details\":\"A wrap/unwrap operation consumed more or returned less underlying tokens than it should.\"}],\"NotEnoughWrapped(address,uint256,uint256)\":[{\"details\":\"A wrap/unwrap operation consumed more or returned less wrapped tokens than it should.\"}],\"NotVaultDelegateCall()\":[{\"details\":\"It can only be called by the Vault via delegatecall.\"}],\"PoolAlreadyInitialized(address)\":[{\"params\":{\"pool\":\"The already initialized pool\"}}],\"PoolAlreadyRegistered(address)\":[{\"params\":{\"pool\":\"The already registered pool\"}}],\"PoolInRecoveryMode(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInRecoveryMode(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInitialized(address)\":[{\"params\":{\"pool\":\"The uninitialized pool\"}}],\"PoolNotPaused(address)\":[{\"params\":{\"pool\":\"The unpaused pool\"}}],\"PoolNotRegistered(address)\":[{\"params\":{\"pool\":\"The unregistered pool\"}}],\"PoolPauseWindowExpired(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolPaused(address)\":[{\"params\":{\"pool\":\"The paused pool\"}}],\"ProtocolFeesExceedTotalCollected()\":[{\"details\":\"This occurs when the sum of the parts (aggregate swap or yield fee) is greater than the whole (total swap or yield fee). Also validated when the protocol fee controller updates aggregate fee percentages in the Vault.\"}],\"SenderIsNotVault(address)\":[{\"params\":{\"sender\":\"The account attempting to call a permissioned function\"}}],\"SwapFeePercentageTooHigh()\":[{\"details\":\"The Vault itself does not impose a universal minimum. Rather, it validates against the range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error if it is above the maximum value returned by the pool. Pools with dynamic fees do not check these limits.\"}],\"SwapFeePercentageTooLow()\":[{\"details\":\"The Vault itself does not impose a universal minimum. Rather, it validates against the range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error if it is below the minimum value returned by the pool. Pools with dynamic fees do not check these limits.\"}],\"SwapLimit(uint256,uint256)\":[{\"params\":{\"amount\":\"The total amount in or out\",\"limit\":\"The amount of the limit that has been exceeded\"}}],\"TokenAlreadyRegistered(address)\":[{\"params\":{\"token\":\"The duplicate token\"}}],\"TokenNotRegistered(address)\":[{\"params\":{\"token\":\"The unregistered token\"}}],\"TokensMismatch(address,address,address)\":[{\"params\":{\"actualToken\":\"The actual token found at that index\",\"expectedToken\":\"The correct token at a given index in the pool\",\"pool\":\"Address of the pool\"}}],\"WrapAmountTooSmall(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"WrongUnderlyingToken(address,address)\":[{\"details\":\"This should never happen, but a malicious wrapper contract might not return the correct address. Legitimate wrapper contracts should make the asset a constant or immutable value.\",\"params\":{\"underlyingToken\":\"The underlying token returned by `asset`\",\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}]},\"events\":{\"AggregateSwapFeePercentageChanged(address,uint256)\":{\"details\":\"The `ProtocolFeeController` will emit an event with the underlying change.\",\"params\":{\"aggregateSwapFeePercentage\":\"The new aggregate swap fee percentage\",\"pool\":\"The pool whose aggregate swap fee percentage changed\"}},\"AggregateYieldFeePercentageChanged(address,uint256)\":{\"details\":\"The `ProtocolFeeController` will emit an event with the underlying change.\",\"params\":{\"aggregateYieldFeePercentage\":\"The new aggregate yield fee percentage\",\"pool\":\"The pool whose aggregate yield fee percentage changed\"}},\"AuthorizerChanged(address)\":{\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"BufferSharesBurned(address,address,uint256)\":{\"details\":\"The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares` retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the \\\"totalSupply\\\" of a buffer.\",\"params\":{\"burnedShares\":\"The amount of \\\"internal BPT\\\" shares burned\",\"from\":\"The owner of the burned shares\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"BufferSharesMinted(address,address,uint256)\":{\"details\":\"The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares` retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the \\\"totalSupply\\\" of a buffer.\",\"params\":{\"issuedShares\":\"The amount of \\\"internal BPT\\\" shares created\",\"to\":\"The owner of the minted shares\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"LiquidityAdded(address,address,uint8,uint256,uint256[],uint256[])\":{\"params\":{\"amountsAddedRaw\":\"The amount of each token that was added, sorted in token registration order\",\"kind\":\"The add liquidity operation type (e.g., proportional, custom)\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool with liquidity added\",\"swapFeeAmountsRaw\":\"The total swap fees charged, sorted in token registration order\",\"totalSupply\":\"The total supply of the pool after the operation\"}},\"LiquidityAddedToBuffer(address,uint256,uint256,bytes32)\":{\"details\":\"The underlying token can be derived from the wrapped token, so it's not included here.\",\"params\":{\"amountUnderlying\":\"The amount of the underlying token that was deposited\",\"amountWrapped\":\"The amount of the wrapped token that was deposited\",\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"LiquidityRemoved(address,address,uint8,uint256,uint256[],uint256[])\":{\"params\":{\"amountsRemovedRaw\":\"The amount of each token that was removed, sorted in token registration order\",\"kind\":\"The remove liquidity operation type (e.g., proportional, custom)\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool with liquidity removed\",\"swapFeeAmountsRaw\":\"The total swap fees charged, sorted in token registration order\",\"totalSupply\":\"The total supply of the pool after the operation\"}},\"LiquidityRemovedFromBuffer(address,uint256,uint256,bytes32)\":{\"details\":\"The underlying token can be derived from the wrapped token, so it's not included here.\",\"params\":{\"amountUnderlying\":\"The amount of the underlying token that was withdrawn\",\"amountWrapped\":\"The amount of the wrapped token that was withdrawn\",\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"PoolInitialized(address)\":{\"params\":{\"pool\":\"The pool being initialized\"}},\"PoolPausedStateChanged(address,bool)\":{\"params\":{\"paused\":\"True if the pool was paused\",\"pool\":\"The pool that was just paused or unpaused\"}},\"PoolRecoveryModeStateChanged(address,bool)\":{\"params\":{\"pool\":\"The pool\",\"recoveryMode\":\"True if recovery mode was enabled\"}},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,uint32,(address,address,address),(bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),(bool,bool,bool,bool))\":{\"params\":{\"factory\":\"The factory creating the pool\",\"hooksConfig\":\"Flags indicating which hooks the pool supports and address of hooks contract\",\"liquidityManagement\":\"Supported liquidity management hook flags\",\"pauseWindowEndTime\":\"The pool's pause window end time\",\"pool\":\"The pool being registered\",\"roleAccounts\":\"Addresses the Vault will allow to change certain pool settings\",\"swapFeePercentage\":\"The static swap fee of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"ProtocolFeeControllerChanged(address)\":{\"params\":{\"newProtocolFeeController\":\"The address of the new protocol fee controller\"}},\"Swap(address,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"Number of tokenIn tokens\",\"amountOut\":\"Number of tokenOut tokens\",\"pool\":\"The pool with the tokens being swapped\",\"swapFeeAmount\":\"Swap fee amount paid\",\"swapFeePercentage\":\"Swap fee percentage applied (can differ if dynamic)\",\"tokenIn\":\"The token entering the Vault (balance increases)\",\"tokenOut\":\"The token leaving the Vault (balance decreases)\"}},\"SwapFeePercentageChanged(address,uint256)\":{\"params\":{\"swapFeePercentage\":\"The new swap fee percentage for the pool\"}},\"Unwrap(address,uint256,uint256,bytes32)\":{\"params\":{\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"burnedShares\":\"Number of shares (wrapped tokens) burned\",\"withdrawnUnderlying\":\"Number of underlying tokens withdrawn\",\"wrappedToken\":\"The wrapped token address\"}},\"VaultAuxiliary(address,bytes32,bytes)\":{\"params\":{\"eventData\":\"Encoded event data\",\"eventKey\":\"Event key\",\"pool\":\"Pool address\"}},\"VaultBuffersPausedStateChanged(bool)\":{\"details\":\"If buffers all paused, all buffer operations (i.e., all calls through the Router with `isBuffer` set to true) will revert.\",\"params\":{\"paused\":\"True if the Vault buffers were paused\"}},\"VaultPausedStateChanged(bool)\":{\"params\":{\"paused\":\"True if the Vault was paused\"}},\"Wrap(address,uint256,uint256,bytes32)\":{\"params\":{\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"depositedUnderlying\":\"Number of underlying tokens deposited\",\"mintedShares\":\"Number of shares (wrapped tokens) minted\",\"wrappedToken\":\"The wrapped token address\"}}},\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"details\":\"Caution should be exercised when adding liquidity because the Vault has the capability to transfer tokens from any user, given that it holds all allowances.\",\"params\":{\"params\":\"Parameters for the add liquidity (see above for struct definition)\"},\"returns\":{\"amountsIn\":\"Actual amounts of input tokens\",\"bptAmountOut\":\"Output pool token amount\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"addLiquidityToBuffer(address,uint256,uint256,uint256,address)\":{\"details\":\"The buffer needs to be initialized beforehand.\",\"params\":{\"exactSharesToIssue\":\"The value in underlying tokens that `sharesOwner` wants to add to the buffer, in underlying token decimals\",\"maxAmountUnderlyingInRaw\":\"Maximum amount of underlying tokens to add to the buffer. It is expressed in underlying token native decimals\",\"maxAmountWrappedInRaw\":\"Maximum amount of wrapped tokens to add to the buffer. It is expressed in wrapped token native decimals\",\"sharesOwner\":\"Address that will own the deposited liquidity. Only this address will be able to remove liquidity from the buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"amountUnderlyingRaw\":\"Amount of underlying tokens deposited into the buffer\",\"amountWrappedRaw\":\"Amount of wrapped tokens deposited into the buffer\"}},\"allowance(address,address,address)\":{\"params\":{\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\",\"token\":\"Address of the token\"},\"returns\":{\"tokenAllowance\":\"Amount of tokens the spender is allowed to spend\"}},\"approve(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to approve\",\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\"},\"returns\":{\"success\":\"True if successful, false otherwise\"}},\"areBuffersPaused()\":{\"details\":\"When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true) will revert. Pausing buffers is reversible. Note that ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they would likely be paused and unpaused together). Call `isVaultPaused` to check the pause state of the Vault.\",\"returns\":{\"buffersPaused\":\"True if the Vault buffers are paused\"}},\"balanceOf(address,address)\":{\"params\":{\"account\":\"Address of the account\",\"token\":\"Address of the token\"},\"returns\":{\"tokenBalance\":\"Token balance of the account\"}},\"collectAggregateFees(address)\":{\"details\":\"Fees are sent to the ProtocolFeeController address.\",\"params\":{\"pool\":\"The pool on which all aggregate fees should be collected\"},\"returns\":{\"swapFeeAmounts\":\"An array with the total swap fees collected, sorted in token registration order\",\"yieldFeeAmounts\":\"An array with the total yield fees collected, sorted in token registration order\"}},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"details\":\"Reverts if the hook doesn't return the success flag set to `true`.\",\"params\":{\"pool\":\"The pool\",\"swapParams\":\"The swap parameters used to compute the fee\"},\"returns\":{\"dynamicSwapFeePercentage\":\"The dynamic swap fee percentage\"}},\"disableQuery()\":{\"details\":\"The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2). This function can be acted upon as an emergency measure in ambiguous contexts where it's not 100% clear whether disabling queries is completely necessary; queries can still be re-enabled after this call.\"},\"disableQueryPermanently()\":{\"details\":\"Shall only be used when there is no doubt that queries pose a fundamental threat to the system.\"},\"disableRecoveryMode(address)\":{\"details\":\"This is a permissioned function. It re-syncs live balances (which could not be updated during Recovery Mode), forfeiting any yield fees that accrued while enabled. It makes external calls, and could potentially fail if there is an issue with any associated Rate Providers.\",\"params\":{\"pool\":\"The address of the pool\"}},\"emitAuxiliaryEvent(bytes32,bytes)\":{\"params\":{\"eventData\":\"Encoded event data\",\"eventKey\":\"Event key\"}},\"enableQuery()\":{\"details\":\"Only works if queries are not permanently disabled.\"},\"enableRecoveryMode(address)\":{\"details\":\"This is a permissioned function. It enables a safe proportional withdrawal, with no external calls. Since there are no external calls, ensuring that entering Recovery Mode cannot fail, we cannot compute and so must forfeit any yield fees between the last operation and enabling Recovery Mode. For the same reason, live balances cannot be updated while in Recovery Mode, as doing so might cause withdrawals to fail.\",\"params\":{\"pool\":\"The address of the pool\"}},\"erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))\":{\"details\":\"All parameters are given in raw token decimal encoding. It requires the buffer to be initialized, and uses the internal wrapped token buffer when it has enough liquidity to avoid external calls.\",\"params\":{\"params\":\"Parameters for the wrap/unwrap operation (see struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"actionId\":\"The computed actionId\"}},\"getAddLiquidityCalledFlag(address)\":{\"details\":\"Taxing remove liquidity proportional whenever liquidity was added in the same `unlock` call adds an extra layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional is the only standard way to exit a position without fees, and this flag is used to enable fees in that case. It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse than a simple swap for every pool type.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"liquidityAdded\":\"True if liquidity has been added to this pool in the current transaction Note that there is no `sessionId` argument; it always returns the value for the current (i.e., latest) session.\"}},\"getAggregateSwapFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"swapFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAggregateYieldFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"yieldFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAuthorizer()\":{\"details\":\"The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can be changed through a permissioned call.\",\"returns\":{\"authorizer\":\"Address of the authorizer contract\"}},\"getBptRate(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"rate\":\"BPT rate\"}},\"getBufferAsset(address)\":{\"details\":\"The asset can never change after buffer initialization.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingToken\":\"Address of the underlying token registered for the wrapper; `address(0)` if the buffer has not been initialized.\"}},\"getBufferBalance(address)\":{\"details\":\"All values are in native token decimals of the wrapped or underlying tokens.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingBalanceRaw\":\"Amount of underlying tokens deposited into the buffer, in native token decimals\",\"wrappedBalanceRaw\":\"Amount of wrapped tokens deposited into the buffer, in native token decimals\"}},\"getBufferMinimumTotalSupply()\":{\"details\":\"This prevents buffers from being completely drained. When the buffer is initialized, this minimum number of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal to the Vault, as buffers are not tokenized.\",\"returns\":{\"bufferMinimumTotalSupply\":\"The minimum total supply a buffer can have after initialization\"}},\"getBufferOwnerShares(address,address)\":{\"params\":{\"liquidityOwner\":\"Address of the user that owns liquidity in the wrapped token's buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"ownerShares\":\"Amount of shares allocated to the liquidity owner, in native underlying token decimals\"}},\"getBufferPeriodDuration()\":{\"details\":\"This value is immutable. It represents the period during which, if paused, the Vault will remain paused. This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer timestamps are 32 bits.\",\"returns\":{\"bufferPeriodDuration\":\"The length of the buffer period in seconds\"}},\"getBufferPeriodEndTime()\":{\"details\":\"This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer timestamps are 32 bits.\",\"returns\":{\"bufferPeriodEndTime\":\"The timestamp after which the Vault remains permanently unpaused\"}},\"getBufferTotalShares(address)\":{\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"bufferShares\":\"Amount of supply shares of the buffer, in native underlying token decimals\"}},\"getCurrentLiveBalances(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesLiveScaled18\":\"Token balances after paying yield fees, applying decimal scaling and rates\"}},\"getERC4626BufferAsset(address)\":{\"details\":\"To avoid malicious wrappers (e.g., that might potentially change their asset after deployment), routers should never call `wrapper.asset()` directly, at least without checking it against the asset registered with the Vault on initialization.\",\"params\":{\"wrappedToken\":\"The wrapped token specifying the buffer\"},\"returns\":{\"asset\":\"The underlying asset of the wrapped token\"}},\"getHooksConfig(address)\":{\"details\":\"The `HooksConfig` contains flags indicating which pool hooks are implemented.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"hooksConfig\":\"The hooks configuration as a `HooksConfig` struct\"}},\"getMaximumPoolTokens()\":{\"returns\":{\"maxTokens\":\"The maximum token count of a pool\"}},\"getMinimumPoolTokens()\":{\"details\":\"We expect the vast majority of pools to be 2-token.\",\"returns\":{\"minTokens\":\"The minimum token count of a pool\"}},\"getMinimumTradeAmount()\":{\"details\":\"This limit is applied to the 18-decimal \\\"upscaled\\\" amount in any operation (swap, add/remove liquidity).\",\"returns\":{\"minimumTradeAmount\":\"The minimum trade amount as an 18-decimal floating point number\"}},\"getMinimumWrapAmount()\":{\"details\":\"This limit is applied to the wrap operation amount, in native underlying token decimals.\",\"returns\":{\"minimumWrapAmount\":\"The minimum wrap amount in native underlying token decimals\"}},\"getNonzeroDeltaCount()\":{\"returns\":{\"nonzeroDeltaCount\":\"The current value of `_nonzeroDeltaCount`\"}},\"getPauseWindowEndTime()\":{\"details\":\"This value is immutable, and represents the timestamp after which the Vault can no longer be paused by governance. Balancer timestamps are 32 bits.\",\"returns\":{\"pauseWindowEndTime\":\"The timestamp when the Vault's pause window ends\"}},\"getPoolConfig(address)\":{\"details\":\"The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"poolConfig\":\"The pool configuration as a `PoolConfig` struct\"}},\"getPoolData(address)\":{\"details\":\"This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\",\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"poolData\":\"The `PoolData` result\"}},\"getPoolMinimumTotalSupply()\":{\"details\":\"This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\",\"returns\":{\"poolMinimumTotalSupply\":\"The minimum total supply a pool can have after initialization\"}},\"getPoolPausedState(address)\":{\"details\":\"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period. Balancer timestamps are 32 bits.\",\"params\":{\"pool\":\"The pool whose data is requested\"},\"returns\":{\"pauseManager\":\"The pause manager, or the zero address\",\"poolBufferPeriodEndTime\":\"The timestamp after which the Pool unpauses itself (if paused)\",\"poolPauseWindowEndTime\":\"The timestamp of the end of the Pool's pause window\",\"poolPaused\":\"True if the Pool is paused\"}},\"getPoolRoleAccounts(address)\":{\"params\":{\"pool\":\"The address of the pool whose roles are being queried\"},\"returns\":{\"roleAccounts\":\"A struct containing the role accounts for the pool (or 0 if unassigned)\"}},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"details\":\"Reverts if the pool is not registered, or if the token does not belong to the pool.\",\"params\":{\"pool\":\"Address of the pool\",\"token\":\"Address of the token\"},\"returns\":{\"index\":\"Index corresponding to the given token in the pool's token list\",\"tokenCount\":\"Number of tokens in the pool\"}},\"getPoolTokenInfo(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesRaw\":\"Current native decimal balances of the pool tokens, sorted in token registration order\",\"lastBalancesLiveScaled18\":\"Last saved live balances, sorted in token registration order\",\"tokenInfo\":\"Token info structs (type, rate provider, yield flag), sorted in token registration order\",\"tokens\":\"The pool tokens, sorted in registration order\"}},\"getPoolTokenRates(address)\":{\"details\":\"This function performs external calls if tokens are yield-bearing. All returned arrays are in token registration order.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"decimalScalingFactors\":\"Conversion factor used to adjust for token decimals for uniform precision in calculations. FP(1) for 18-decimal tokens\",\"tokenRates\":\"18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\"}},\"getPoolTokens(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"tokens\":\"List of tokens in the pool\"}},\"getProtocolFeeController()\":{\"returns\":{\"protocolFeeController\":\"Address of the ProtocolFeeController\"}},\"getReservesOf(address)\":{\"params\":{\"token\":\"The token for which to retrieve the reserve\"},\"returns\":{\"reserveAmount\":\"The amount of reserves for the given token\"}},\"getStaticSwapFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool whose static swap fee percentage is being queried\"},\"returns\":{\"swapFeePercentage\":\"The current static swap fee percentage for the specified pool\"}},\"getTokenDelta(address)\":{\"details\":\"This function allows reading the value from the `_tokenDeltas` mapping.\",\"params\":{\"token\":\"The token for which the delta is being fetched\"},\"returns\":{\"tokenDelta\":\"The delta of the specified token\"}},\"getVaultAdmin()\":{\"details\":\"The VaultAdmin contract mostly implements permissioned functions.\",\"returns\":{\"vaultAdmin\":\"The address of the Vault admin\"}},\"getVaultExtension()\":{\"details\":\"Function is in the main Vault contract. The VaultExtension handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls.\",\"returns\":{\"vaultExtension\":\"Address of the VaultExtension\"}},\"getVaultPausedState()\":{\"details\":\"Balancer timestamps are 32 bits.\",\"returns\":{\"vaultBufferPeriodEndTime\":\"The timestamp of the end of the Vault's buffer period\",\"vaultPauseWindowEndTime\":\"The timestamp of the end of the Vault's pause window\",\"vaultPaused\":\"True if the Vault is paused\"}},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Address of the pool to initialize\",\"to\":\"Address that will receive the output BPT\",\"tokens\":\"Tokens used to seed the pool (must match the registered tokens)\",\"userData\":\"Additional (optional) data required for adding initial liquidity\"},\"returns\":{\"bptAmountOut\":\"Output pool token amount\"}},\"initializeBuffer(address,uint256,uint256,uint256,address)\":{\"params\":{\"amountUnderlyingRaw\":\"Amount of underlying tokens that will be deposited into the buffer\",\"amountWrappedRaw\":\"Amount of wrapped tokens that will be deposited into the buffer\",\"minIssuedShares\":\"Minimum amount of shares to receive from the buffer, expressed in underlying token native decimals\",\"sharesOwner\":\"Address that will own the deposited liquidity. Only this address will be able to remove liquidity from the buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"issuedShares\":\"the amount of tokens sharesOwner has in the buffer, expressed in underlying token amounts. (it is the BPT of an internal ERC4626 buffer). It is expressed in underlying token native decimals.\"}},\"isERC4626BufferInitialized(address)\":{\"details\":\"An initialized buffer should have an asset registered in the Vault.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"isBufferInitialized\":\"True if the ERC4626 buffer is initialized\"}},\"isPoolInRecoveryMode(address)\":{\"details\":\"Recovery Mode enables a safe proportional withdrawal path, with no external calls.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"inRecoveryMode\":\"True if the pool is in Recovery Mode, false otherwise\"}},\"isPoolInitialized(address)\":{\"details\":\"An initialized pool can be considered registered as well.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"initialized\":\"True if the pool is initialized, false otherwise\"}},\"isPoolPaused(address)\":{\"details\":\"If a pool is paused, all non-Recovery Mode state-changing operations will revert.\",\"params\":{\"pool\":\"The pool to be checked\"},\"returns\":{\"poolPaused\":\"True if the pool is paused\"}},\"isPoolRegistered(address)\":{\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"registered\":\"True if the pool is registered, false otherwise\"}},\"isQueryDisabled()\":{\"details\":\"If true, queries might either be disabled temporarily or permanently.\",\"returns\":{\"queryDisabled\":\"True if query functionality is reversibly disabled\"}},\"isQueryDisabledPermanently()\":{\"details\":\"This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\",\"returns\":{\"queryDisabledPermanently\":\"True if query functionality is permanently disabled\"}},\"isUnlocked()\":{\"details\":\"The Vault must be unlocked to perform state-changing liquidity operations.\",\"returns\":{\"unlocked\":\"True if the Vault is unlocked, false otherwise\"}},\"isVaultPaused()\":{\"details\":\"If the Vault is paused, all non-Recovery Mode state-changing operations on pools will revert. Note that ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they would likely be paused and unpaused together). Call `areBuffersPaused` to check the pause state of the buffers.\",\"returns\":{\"vaultPaused\":\"True if the Vault is paused\"}},\"pausePool(address)\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during pool factory deployment.\",\"params\":{\"pool\":\"The pool being paused\"}},\"pauseVault()\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during deployment. Note that ERC4626 buffer operations have an independent pause mechanism, which is not affected by pausing the Vault. Custom routers could still wrap/unwrap using buffers while the Vault is paused, unless buffers are also paused (with `pauseVaultBuffers`).\"},\"pauseVaultBuffers()\":{\"details\":\"When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. Currently it's not possible to pause vault buffers individually. This is a permissioned call, and is reversible (see `unpauseVaultBuffers`). Note that the Vault has a separate and independent pausing mechanism. It is possible to pause the Vault (i.e. pool operations), without affecting buffers, and vice versa.\"},\"quote(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `onlyWhenUnlocked`. `transient` modifier ensuring balances changes within the Vault are settled.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}},\"quoteAndRevert(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `onlyWhenUnlocked`. `transient` modifier ensuring balances changes within the Vault are settled. This call always reverts, returning the result in the revert reason.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"}},\"registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))\":{\"details\":\"A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused pool will automatically unpause. Balancer timestamps are 32 bits. A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to the Vault. If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the authorizer.\",\"params\":{\"liquidityManagement\":\"Liquidity management flags with implemented methods\",\"pauseWindowEndTime\":\"The timestamp after which it is no longer possible to pause the pool\",\"pool\":\"The address of the pool being registered\",\"poolHooksContract\":\"Contract that implements the hooks for the pool\",\"protocolFeeExempt\":\"If true, the pool's initial aggregate fees will be set to 0\",\"roleAccounts\":\"Addresses the Vault will allow to change certain pool settings\",\"swapFeePercentage\":\"The initial static swap fee percentage of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"details\":\"Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user. Untrusted routers require prior approval from the user. This is the only function allowed to call _queryModeBalanceIncrease (and only in a query context).\",\"params\":{\"params\":\"Parameters for the remove liquidity (see above for struct definition)\"},\"returns\":{\"amountsOut\":\"Actual amounts of output tokens\",\"bptAmountIn\":\"Actual amount of BPT burned\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"removeLiquidityFromBuffer(address,uint256,uint256,uint256)\":{\"details\":\"Only proportional exits are supported, and the sender has to be the owner of the shares. This function unlocks the Vault just for this operation; it does not work with a Router as an entrypoint. Pre-conditions: - The buffer needs to be initialized. - sharesOwner is the original msg.sender, it needs to be checked in the Router. That's why   this call is authenticated; only routers approved by the DAO can remove the liquidity of a buffer. - The buffer needs to have some liquidity and have its asset registered in `_bufferAssets` storage.\",\"params\":{\"minAmountUnderlyingOutRaw\":\"Minimum amount of underlying tokens to receive from the buffer. It is expressed in underlying token native decimals\",\"minAmountWrappedOutRaw\":\"Minimum amount of wrapped tokens to receive from the buffer. It is expressed in wrapped token native decimals\",\"sharesToRemove\":\"Amount of shares to remove from the buffer. Cannot be greater than sharesOwner's total shares. It is expressed in underlying token native decimals\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"removedUnderlyingBalanceRaw\":\"Amount of underlying tokens returned to the user\",\"removedWrappedBalanceRaw\":\"Amount of wrapped tokens returned to the user\"}},\"removeLiquidityRecovery(address,address,uint256,uint256[])\":{\"params\":{\"exactBptAmountIn\":\"Input pool token amount\",\"from\":\"Address of user to burn pool tokens from\",\"minAmountsOut\":\"Minimum amounts of tokens to be received, sorted in token registration order\",\"pool\":\"Address of the pool\"},\"returns\":{\"amountsOut\":\"Actual calculated amounts of output tokens, sorted in token registration order\"}},\"sendTo(address,address,uint256)\":{\"details\":\"There is no inverse operation for this function. Transfer funds to the Vault and call `settle` to cancel debts.\",\"params\":{\"amount\":\"Amount of tokens to send\",\"to\":\"Recipient address\",\"token\":\"Address of the token\"}},\"setAuthorizer(address)\":{\"details\":\"This is a permissioned call. Emits an `AuthorizerChanged` event.\",\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"setProtocolFeeController(address)\":{\"details\":\"This is a permissioned call. Emits a `ProtocolFeeControllerChanged` event.\",\"params\":{\"newProtocolFeeController\":\"The address of the new Protocol Fee Controller\"}},\"setStaticSwapFeePercentage(address,uint256)\":{\"details\":\"This is a permissioned function, disabled if the pool is paused. The swap fee percentage must be within the bounds specified by the pool's implementation of `ISwapFeePercentageBounds`. Emits the SwapFeePercentageChanged event.\",\"params\":{\"pool\":\"The address of the pool for which the static swap fee will be changed\",\"swapFeePercentage\":\"The new swap fee percentage to apply to the pool\"}},\"settle(address,uint256)\":{\"details\":\"Protects the caller against leftover dust in the Vault for the token being settled. The caller should know in advance how many tokens were paid to the Vault, so it can provide it as a hint to discard any excess in the Vault balance. If the given hint is equal to or higher than the difference in reserves, the difference in reserves is given as credit to the caller. If it's higher, the caller sent fewer tokens than expected, so settlement would fail. If the given hint is lower than the difference in reserves, the hint is given as credit to the caller. In this case, the excess would be absorbed by the Vault (and reflected correctly in the reserves), but would not affect settlement. The credit supplied by the Vault can be calculated as `min(reserveDifference, amountHint)`, where the reserve difference equals current balance of the token minus existing reserves of the token when the function is called.\",\"params\":{\"amountHint\":\"Amount paid as reported by the caller\",\"token\":\"Address of the token\"},\"returns\":{\"credit\":\"Credit received in return of the payment\"}},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"details\":\"All parameters are given in raw token decimal encoding.\",\"params\":{\"vaultSwapParams\":\"Parameters for the swap (see above for struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"totalSupply(address)\":{\"params\":{\"token\":\"The token address\"},\"returns\":{\"tokenTotalSupply\":\"Total supply of the token\"}},\"transfer(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"owner\":\"Address of the owner\",\"to\":\"Address of the recipient\"},\"returns\":{\"_0\":\"success True if successful, false otherwise\"}},\"transferFrom(address,address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"from\":\"Address of the sender\",\"spender\":\"Address allowed to perform the transfer\",\"to\":\"Address of the recipient\"},\"returns\":{\"success\":\"True if successful, false otherwise\"}},\"unlock(bytes)\":{\"details\":\"Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`, meaning all balances for the caller have to be settled at the end.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}},\"unpausePool(address)\":{\"details\":\"This is a permissioned function that will only work on a paused Pool within the Buffer Period set during deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\",\"params\":{\"pool\":\"The pool being unpaused\"}},\"unpauseVault()\":{\"details\":\"This is a permissioned function that will only work on a paused Vault within the Buffer Period set during deployment. Note that the Vault will automatically unpause after the Buffer Period expires. As noted above, ERC4626 buffers and Vault operations on pools are independent. Unpausing the Vault does not reverse `pauseVaultBuffers`. If buffers were also paused, they will remain in that state until explicitly unpaused.\"},\"unpauseVaultBuffers()\":{\"details\":\"When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. As noted above, ERC4626 buffers and Vault operations on pools are independent. Unpausing buffers does not reverse `pauseVault`. If the Vault was also paused, it will remain in that state until explicitly unpaused. This is a permissioned call.\"},\"updateAggregateSwapFeePercentage(address,uint256)\":{\"details\":\"Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol). Emits an `AggregateSwapFeePercentageChanged` event.\",\"params\":{\"newAggregateSwapFeePercentage\":\"The new aggregate swap fee percentage\",\"pool\":\"The pool whose swap fee percentage will be updated\"}},\"updateAggregateYieldFeePercentage(address,uint256)\":{\"details\":\"Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol). Emits an `AggregateYieldFeePercentageChanged` event.\",\"params\":{\"newAggregateYieldFeePercentage\":\"The new aggregate yield fee percentage\",\"pool\":\"The pool whose yield fee percentage will be updated\"}},\"vault()\":{\"returns\":{\"_0\":\"vault The main Vault address.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AfterAddLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert.\"}],\"AfterInitializeHookFailed()\":[{\"notice\":\"The pool has returned false to the afterInitialize hook, indicating the transaction should revert.\"}],\"AfterRemoveLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert.\"}],\"AfterSwapHookFailed()\":[{\"notice\":\"The pool has returned false to the afterSwap hook, indicating the transaction should revert.\"}],\"AmountGivenZero()\":[{\"notice\":\"The user tried to swap zero tokens.\"}],\"AmountInAboveMax(address,uint256,uint256)\":[{\"notice\":\"A required amountIn exceeds the maximum limit specified for the operation.\"}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"notice\":\"The actual amount out is below the minimum limit specified for the operation.\"}],\"BalanceNotSettled()\":[{\"notice\":\"A transient accounting operation completed with outstanding token deltas.\"}],\"BeforeAddLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert.\"}],\"BeforeInitializeHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeInitialize hook, indicating the transaction should revert.\"}],\"BeforeRemoveLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert.\"}],\"BeforeSwapHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"notice\":\"The required BPT amount in exceeds the maximum limit specified for the operation.\"}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"notice\":\"The BPT amount received from adding liquidity is below the minimum specified for the operation.\"}],\"BufferAlreadyInitialized(address)\":[{\"notice\":\"The buffer for the given wrapped token was already initialized.\"}],\"BufferNotInitialized(address)\":[{\"notice\":\"The buffer for the given wrapped token was not initialized.\"}],\"BufferSharesInvalidOwner()\":[{\"notice\":\"Buffer shares were burned from the zero address.\"}],\"BufferSharesInvalidReceiver()\":[{\"notice\":\"Buffer shares were minted to the zero address.\"}],\"BufferTotalSupplyTooLow(uint256)\":[{\"notice\":\"The total supply of a buffer can't be lower than the absolute minimum.\"}],\"CannotReceiveEth()\":[{\"notice\":\"The contract should not receive ETH.\"}],\"CannotSwapSameToken()\":[{\"notice\":\"The user attempted to swap a token for itself.\"}],\"DoesNotSupportAddLiquidityCustom()\":[{\"notice\":\"Pool does not support adding liquidity with a customized input.\"}],\"DoesNotSupportDonation()\":[{\"notice\":\"Pool does not support adding liquidity through donation.\"}],\"DoesNotSupportRemoveLiquidityCustom()\":[{\"notice\":\"Pool does not support removing liquidity with a customized input.\"}],\"DoesNotSupportUnbalancedLiquidity()\":[{\"notice\":\"Pool does not support adding / removing liquidity with an unbalanced input.\"}],\"DynamicSwapFeeHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"FeePrecisionTooHigh()\":[{\"notice\":\"Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\"}],\"HookAdjustedAmountInAboveMax(address,uint256,uint256)\":[{\"notice\":\"A hook adjusted amountIn exceeds the maximum limit specified for the operation.\"}],\"HookAdjustedAmountOutBelowMin(address,uint256,uint256)\":[{\"notice\":\"The hook adjusted amount out is below the minimum limit specified for the operation.\"}],\"HookAdjustedSwapLimit(uint256,uint256)\":[{\"notice\":\"A hook adjusted amount in or out has exceeded the limit specified in the swap request.\"}],\"HookRegistrationFailed(address,address,address)\":[{\"notice\":\"A hook contract rejected a pool on registration.\"}],\"InvalidAddLiquidityKind()\":[{\"notice\":\"Add liquidity kind not supported.\"}],\"InvalidRemoveLiquidityKind()\":[{\"notice\":\"Remove liquidity kind not supported.\"}],\"InvalidToken()\":[{\"notice\":\"Invalid tokens (e.g., zero) cannot be registered.\"}],\"InvalidTokenConfiguration()\":[{\"notice\":\"The data in a TokenConfig struct is inconsistent or unsupported.\"}],\"InvalidTokenDecimals()\":[{\"notice\":\"Tokens with more than 18 decimals are not supported.\"}],\"InvalidTokenType()\":[{\"notice\":\"The token type given in a TokenConfig during pool registration is invalid.\"}],\"InvalidUnderlyingToken(address)\":[{\"notice\":\"A wrapped token reported the zero address as its underlying token asset.\"}],\"MaxTokens()\":[{\"notice\":\"The token count is above the maximum allowed.\"}],\"MinTokens()\":[{\"notice\":\"The token count is below the minimum allowed.\"}],\"NotEnoughBufferShares()\":[{\"notice\":\"The user is trying to remove more than their allocated shares from the buffer.\"}],\"NotVaultDelegateCall()\":[{\"notice\":\"The `VaultExtension` contract was called by an account directly.\"}],\"PauseBufferPeriodDurationTooLarge()\":[{\"notice\":\"The caller specified a buffer period longer than the maximum.\"}],\"PercentageAboveMax()\":[{\"notice\":\"A given percentage is above the maximum (usually a value close to FixedPoint.ONE, or 1e18 wei).\"}],\"PoolAlreadyInitialized(address)\":[{\"notice\":\"A pool has already been initialized. `initialize` may only be called once.\"}],\"PoolAlreadyRegistered(address)\":[{\"notice\":\"A pool has already been registered. `registerPool` may only be called once.\"}],\"PoolInRecoveryMode(address)\":[{\"notice\":\"Cannot enable recovery mode when already enabled.\"}],\"PoolNotInRecoveryMode(address)\":[{\"notice\":\"Cannot disable recovery mode when not enabled.\"}],\"PoolNotInitialized(address)\":[{\"notice\":\"A referenced pool has not been initialized.\"}],\"PoolNotPaused(address)\":[{\"notice\":\"Governance tried to unpause the Pool when it was not paused.\"}],\"PoolNotRegistered(address)\":[{\"notice\":\"A pool has not been registered.\"}],\"PoolPauseWindowExpired(address)\":[{\"notice\":\"Governance tried to pause a Pool after the pause period expired.\"}],\"PoolPaused(address)\":[{\"notice\":\"A user tried to perform an operation involving a paused Pool.\"}],\"ProtocolFeesExceedTotalCollected()\":[{\"notice\":\"Error raised when there is an overflow in the fee calculation.\"}],\"QueriesDisabled()\":[{\"notice\":\"A user tried to execute a query operation when they were disabled.\"}],\"QueriesDisabledPermanently()\":[{\"notice\":\"An admin tried to re-enable queries, but they were disabled permanently.\"}],\"QuoteResultSpoofed()\":[{\"notice\":\"Quote reverted with a reserved error code.\"}],\"RouterNotTrusted()\":[{\"notice\":\"An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance).\"}],\"SenderIsNotVault(address)\":[{\"notice\":\"Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\"}],\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}],\"SwapFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the swap fee percentage is greater than the maximum allowed value.\"}],\"SwapFeePercentageTooLow()\":[{\"notice\":\"Error raised when the swap fee percentage is less than the minimum allowed value.\"}],\"SwapLimit(uint256,uint256)\":[{\"notice\":\"An amount in or out has exceeded the limit specified in the swap request.\"}],\"TokenAlreadyRegistered(address)\":[{\"notice\":\"A token was already registered (i.e., it is a duplicate in the pool).\"}],\"TokenNotRegistered(address)\":[{\"notice\":\"The user attempted to operate with a token that is not in the pool.\"}],\"TokensMismatch(address,address,address)\":[{\"notice\":\"The token list passed into an operation does not match the pool tokens in the pool.\"}],\"TradeAmountTooSmall()\":[{\"notice\":\"The amount given or calculated for an operation is below the minimum limit.\"}],\"VaultBuffersArePaused()\":[{\"notice\":\"Buffer operation attempted while vault buffers are paused.\"}],\"VaultIsNotUnlocked()\":[{\"notice\":\"A user called a Vault function (swap, add/remove liquidity) outside the lock context.\"}],\"VaultNotPaused()\":[{\"notice\":\"Governance tried to unpause the Vault when it was not paused.\"}],\"VaultPauseWindowDurationTooLarge()\":[{\"notice\":\"The caller specified a pause window period longer than the maximum.\"}],\"VaultPauseWindowExpired()\":[{\"notice\":\"Governance tried to pause the Vault after the pause period expired.\"}],\"VaultPaused()\":[{\"notice\":\"A user tried to perform an operation while the Vault was paused.\"}],\"WrapAmountTooSmall(address)\":[{\"notice\":\"The amount given to wrap/unwrap was too small, which can introduce rounding issues.\"}],\"WrongProtocolFeeControllerDeployment()\":[{\"notice\":\"The `ProtocolFeeController` contract was configured with an incorrect Vault address.\"}],\"WrongUnderlyingToken(address,address)\":[{\"notice\":\"The wrapped token asset does not match the underlying token.\"}],\"WrongVaultAdminDeployment()\":[{\"notice\":\"The `VaultAdmin` contract was configured with an incorrect Vault address.\"}],\"WrongVaultExtensionDeployment()\":[{\"notice\":\"The `VaultExtension` contract was configured with an incorrect Vault address.\"}]},\"events\":{\"AggregateSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"A protocol or pool creator fee has changed, causing an update to the aggregate swap fee.\"},\"AggregateYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"A protocol or pool creator fee has changed, causing an update to the aggregate yield fee.\"},\"AuthorizerChanged(address)\":{\"notice\":\"A new authorizer is set by `setAuthorizer`.\"},\"BufferSharesBurned(address,address,uint256)\":{\"notice\":\"Buffer shares were burned for an ERC4626 buffer corresponding to a given wrapped token.\"},\"BufferSharesMinted(address,address,uint256)\":{\"notice\":\"Buffer shares were minted for an ERC4626 buffer corresponding to a given wrapped token.\"},\"LiquidityAdded(address,address,uint8,uint256,uint256[],uint256[])\":{\"notice\":\"Liquidity has been added to a pool (including initialization).\"},\"LiquidityAddedToBuffer(address,uint256,uint256,bytes32)\":{\"notice\":\"Liquidity was added to an ERC4626 buffer corresponding to the given wrapped token.\"},\"LiquidityRemoved(address,address,uint8,uint256,uint256[],uint256[])\":{\"notice\":\"Liquidity has been removed from a pool.\"},\"LiquidityRemovedFromBuffer(address,uint256,uint256,bytes32)\":{\"notice\":\"Liquidity was removed from an ERC4626 buffer.\"},\"PoolInitialized(address)\":{\"notice\":\"A Pool was initialized by calling `initialize`.\"},\"PoolPausedStateChanged(address,bool)\":{\"notice\":\"A Pool's pause status has changed.\"},\"PoolRecoveryModeStateChanged(address,bool)\":{\"notice\":\"Recovery mode has been enabled or disabled for a pool.\"},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,uint32,(address,address,address),(bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),(bool,bool,bool,bool))\":{\"notice\":\"A Pool was registered by calling `registerPool`.\"},\"ProtocolFeeControllerChanged(address)\":{\"notice\":\"A new protocol fee controller is set by `setProtocolFeeController`.\"},\"Swap(address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"A swap has occurred.\"},\"SwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the swap fee percentage of a pool is updated.\"},\"Unwrap(address,uint256,uint256,bytes32)\":{\"notice\":\"An unwrap operation has occurred.\"},\"VaultAuxiliary(address,bytes32,bytes)\":{\"notice\":\"Pools can use this event to emit event data from the Vault.\"},\"VaultBuffersPausedStateChanged(bool)\":{\"notice\":\"The Vault buffers pause status has changed.\"},\"VaultPausedStateChanged(bool)\":{\"notice\":\"The Vault's pause status has changed.\"},\"VaultQueriesDisabled()\":{\"notice\":\"`disableQuery` has been called on the Vault, disabling query functionality.\"},\"VaultQueriesEnabled()\":{\"notice\":\"`enableQuery` has been called on the Vault, enabling query functionality.\"},\"Wrap(address,uint256,uint256,bytes32)\":{\"notice\":\"A wrap operation has occurred.\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"notice\":\"Adds liquidity to a pool.\"},\"addLiquidityToBuffer(address,uint256,uint256,uint256,address)\":{\"notice\":\"Adds liquidity to an internal ERC4626 buffer in the Vault, proportionally.\"},\"allowance(address,address,address)\":{\"notice\":\"Gets the allowance of a spender for a given ERC20 token and owner.\"},\"approve(address,address,uint256)\":{\"notice\":\"Approves a spender to spend pool tokens on behalf of sender.\"},\"areBuffersPaused()\":{\"notice\":\"Indicates whether the Vault buffers are paused.\"},\"balanceOf(address,address)\":{\"notice\":\"Gets the balance of an account for a given ERC20 token.\"},\"collectAggregateFees(address)\":{\"notice\":\"Collects accumulated aggregate swap and yield fees for the specified pool.\"},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"notice\":\"Query the current dynamic swap fee percentage of a pool, given a set of swap parameters.\"},\"disableQuery()\":{\"notice\":\"Disables query functionality on the Vault. Can only be called by governance.\"},\"disableQueryPermanently()\":{\"notice\":\"Disables query functionality permanently on the Vault. Can only be called by governance.\"},\"disableRecoveryMode(address)\":{\"notice\":\"Disable recovery mode for a pool.\"},\"emitAuxiliaryEvent(bytes32,bytes)\":{\"notice\":\"Pools can use this event to emit event data from the Vault.\"},\"enableQuery()\":{\"notice\":\"Enables query functionality on the Vault. Can only be called by governance.\"},\"enableRecoveryMode(address)\":{\"notice\":\"Enable recovery mode for a pool.\"},\"erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))\":{\"notice\":\"Wraps/unwraps tokens based on the parameters provided.\"},\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getAddLiquidityCalledFlag(address)\":{\"notice\":\"This flag is used to detect and tax \\\"round-trip\\\" interactions (adding and removing liquidity in the same pool).\"},\"getAggregateSwapFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\"},\"getAggregateYieldFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\"},\"getAuthorizer()\":{\"notice\":\"Returns the Authorizer address.\"},\"getBptRate(address)\":{\"notice\":\"The current rate of a pool token (BPT) = invariant / totalSupply.\"},\"getBufferAsset(address)\":{\"notice\":\"Returns the asset registered for a given wrapped token.\"},\"getBufferBalance(address)\":{\"notice\":\"Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\"},\"getBufferMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\"},\"getBufferOwnerShares(address,address)\":{\"notice\":\"Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets in the buffer.\"},\"getBufferPeriodDuration()\":{\"notice\":\"Returns the Vault's buffer period duration.\"},\"getBufferPeriodEndTime()\":{\"notice\":\"Returns the Vault's buffer period end time.\"},\"getBufferTotalShares(address)\":{\"notice\":\"Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\"},\"getCurrentLiveBalances(address)\":{\"notice\":\"Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in registration order.\"},\"getERC4626BufferAsset(address)\":{\"notice\":\"Gets the registered asset for a given buffer.\"},\"getHooksConfig(address)\":{\"notice\":\"Gets the hooks configuration parameters of a pool.\"},\"getMaximumPoolTokens()\":{\"notice\":\"Get the maximum number of tokens in a pool.\"},\"getMinimumPoolTokens()\":{\"notice\":\"Get the minimum number of tokens in a pool.\"},\"getMinimumTradeAmount()\":{\"notice\":\"Get the minimum trade amount in a pool operation.\"},\"getMinimumWrapAmount()\":{\"notice\":\"Get the minimum wrap amount in a buffer operation.\"},\"getNonzeroDeltaCount()\":{\"notice\":\"Returns the count of non-zero deltas.\"},\"getPauseWindowEndTime()\":{\"notice\":\"Returns the Vault's pause window end time.\"},\"getPoolConfig(address)\":{\"notice\":\"Gets the configuration parameters of a pool.\"},\"getPoolData(address)\":{\"notice\":\"Returns comprehensive pool data for the given pool.\"},\"getPoolMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of pool tokens (BPT) for an initialized pool.\"},\"getPoolPausedState(address)\":{\"notice\":\"Returns the paused status, and end times of the Pool's pause window and buffer period.\"},\"getPoolRoleAccounts(address)\":{\"notice\":\"Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\"},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"notice\":\"Gets the index of a token in a given pool.\"},\"getPoolTokenInfo(address)\":{\"notice\":\"Gets the raw data for a pool: tokens, raw balances, scaling factors.\"},\"getPoolTokenRates(address)\":{\"notice\":\"Gets pool token rates.\"},\"getPoolTokens(address)\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"getProtocolFeeController()\":{\"notice\":\"Returns the Protocol Fee Controller address.\"},\"getReservesOf(address)\":{\"notice\":\"Retrieves the reserve (i.e., total Vault balance) of a given token.\"},\"getStaticSwapFeePercentage(address)\":{\"notice\":\"Fetches the static swap fee percentage for a given pool.\"},\"getTokenDelta(address)\":{\"notice\":\"Retrieves the token delta for a specific token.\"},\"getVaultAdmin()\":{\"notice\":\"Returns the VaultAdmin contract address.\"},\"getVaultExtension()\":{\"notice\":\"Returns the VaultExtension contract address.\"},\"getVaultPausedState()\":{\"notice\":\"Returns the paused status, and end times of the Vault's pause window and buffer period.\"},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"notice\":\"Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\"},\"initializeBuffer(address,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes buffer for the given wrapped token.\"},\"isERC4626BufferInitialized(address)\":{\"notice\":\"Checks if the wrapped token has an initialized buffer in the Vault.\"},\"isPoolInRecoveryMode(address)\":{\"notice\":\"Checks whether a pool is in Recovery Mode.\"},\"isPoolInitialized(address)\":{\"notice\":\"Checks whether a pool is initialized.\"},\"isPoolPaused(address)\":{\"notice\":\"Indicates whether a pool is paused.\"},\"isPoolRegistered(address)\":{\"notice\":\"Checks whether a pool is registered.\"},\"isQueryDisabled()\":{\"notice\":\"Returns true if queries are disabled on the Vault.\"},\"isQueryDisabledPermanently()\":{\"notice\":\"Returns true if queries are disabled permanently; false if they are enabled.\"},\"isUnlocked()\":{\"notice\":\"Returns whether the Vault is unlocked (i.e., executing an operation).\"},\"isVaultPaused()\":{\"notice\":\"Indicates whether the Vault is paused.\"},\"pausePool(address)\":{\"notice\":\"Pause the Pool: an emergency action which disables all pool functions.\"},\"pauseVault()\":{\"notice\":\"Pause the Vault: an emergency action which disables all operational state-changing functions on pools.\"},\"pauseVaultBuffers()\":{\"notice\":\"Pauses native vault buffers globally.\"},\"quote(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"quoteAndRevert(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))\":{\"notice\":\"Registers a pool, associating it with its factory and the tokens it manages.\"},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"notice\":\"Removes liquidity from a pool.\"},\"removeLiquidityFromBuffer(address,uint256,uint256,uint256)\":{\"notice\":\"Removes liquidity from an internal ERC4626 buffer in the Vault.\"},\"removeLiquidityRecovery(address,address,uint256,uint256[])\":{\"notice\":\"Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out. The request is implemented by the Vault without any interaction with the pool, ensuring that it works the same for all pools, and cannot be disabled by a new pool type.\"},\"sendTo(address,address,uint256)\":{\"notice\":\"Sends tokens to a recipient.\"},\"setAuthorizer(address)\":{\"notice\":\"Sets a new Authorizer for the Vault.\"},\"setProtocolFeeController(address)\":{\"notice\":\"Sets a new Protocol Fee Controller for the Vault.\"},\"setStaticSwapFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new static swap fee percentage to the specified pool.\"},\"settle(address,uint256)\":{\"notice\":\"Settles deltas for a token; must be successful for the current lock to be released.\"},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"notice\":\"Swaps tokens based on provided parameters.\"},\"totalSupply(address)\":{\"notice\":\"Gets the total supply of a given ERC20 token.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers pool token from owner to a recipient.\"},\"transferFrom(address,address,address,uint256)\":{\"notice\":\"Transfers pool token from a sender to a recipient using an allowance.\"},\"unlock(bytes)\":{\"notice\":\"Creates a context for a sequence of operations (i.e., \\\"unlocks\\\" the Vault).\"},\"unpausePool(address)\":{\"notice\":\"Reverse a `pause` operation, and restore the Pool to normal functionality.\"},\"unpauseVault()\":{\"notice\":\"Reverse a `pause` operation, and restore Vault pool operations to normal functionality.\"},\"unpauseVaultBuffers()\":{\"notice\":\"Unpauses native vault buffers globally.\"},\"updateAggregateSwapFeePercentage(address,uint256)\":{\"notice\":\"Update an aggregate swap fee percentage.\"},\"updateAggregateYieldFeePercentage(address,uint256)\":{\"notice\":\"Update an aggregate yield fee percentage.\"}},\"notice\":\"Composite interface for all Vault operations: swap, add/remove liquidity, and associated queries.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":\"IVault\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol":{"IVaultAdmin":{"abi":[{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"maxAmountUnderlyingInRaw","type":"uint256"},{"internalType":"uint256","name":"maxAmountWrappedInRaw","type":"uint256"},{"internalType":"uint256","name":"exactSharesToIssue","type":"uint256"},{"internalType":"address","name":"sharesOwner","type":"address"}],"name":"addLiquidityToBuffer","outputs":[{"internalType":"uint256","name":"amountUnderlyingRaw","type":"uint256"},{"internalType":"uint256","name":"amountWrappedRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"areBuffersPaused","outputs":[{"internalType":"bool","name":"buffersPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFees","outputs":[{"internalType":"uint256[]","name":"swapFeeAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"yieldFeeAmounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"disableQuery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"disableQueryPermanently","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"disableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enableQuery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"enableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferAsset","outputs":[{"internalType":"address","name":"underlyingToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferBalance","outputs":[{"internalType":"uint256","name":"underlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"wrappedBalanceRaw","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"bufferMinimumTotalSupply","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"liquidityOwner","type":"address"}],"name":"getBufferOwnerShares","outputs":[{"internalType":"uint256","name":"ownerShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodDuration","outputs":[{"internalType":"uint32","name":"bufferPeriodDuration","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodEndTime","outputs":[{"internalType":"uint32","name":"bufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferTotalShares","outputs":[{"internalType":"uint256","name":"bufferShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaximumPoolTokens","outputs":[{"internalType":"uint256","name":"maxTokens","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getMinimumPoolTokens","outputs":[{"internalType":"uint256","name":"minTokens","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getMinimumTradeAmount","outputs":[{"internalType":"uint256","name":"minimumTradeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumWrapAmount","outputs":[{"internalType":"uint256","name":"minimumWrapAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPauseWindowEndTime","outputs":[{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPoolMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"poolMinimumTotalSupply","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getVaultPausedState","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"},{"internalType":"uint32","name":"vaultPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"vaultBufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"amountUnderlyingRaw","type":"uint256"},{"internalType":"uint256","name":"amountWrappedRaw","type":"uint256"},{"internalType":"uint256","name":"minIssuedShares","type":"uint256"},{"internalType":"address","name":"sharesOwner","type":"address"}],"name":"initializeBuffer","outputs":[{"internalType":"uint256","name":"issuedShares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isVaultPaused","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"pausePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseVaultBuffers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"sharesToRemove","type":"uint256"},{"internalType":"uint256","name":"minAmountUnderlyingOutRaw","type":"uint256"},{"internalType":"uint256","name":"minAmountWrappedOutRaw","type":"uint256"}],"name":"removeLiquidityFromBuffer","outputs":[{"internalType":"uint256","name":"removedUnderlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"removedWrappedBalanceRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"setAuthorizer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IProtocolFeeController","name":"newProtocolFeeController","type":"address"}],"name":"setProtocolFeeController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"setStaticSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"unpausePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseVaultBuffers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newAggregateSwapFeePercentage","type":"uint256"}],"name":"updateAggregateSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newAggregateYieldFeePercentage","type":"uint256"}],"name":"updateAggregateYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addLiquidityToBuffer(address,uint256,uint256,uint256,address)":"e2a92b1a","areBuffersPaused()":"55cba7fe","collectAggregateFees(address)":"8f4ab9ca","disableQuery()":"de1a36a6","disableQueryPermanently()":"821440f2","disableRecoveryMode(address)":"bffb78b2","enableQuery()":"e0d55605","enableRecoveryMode(address)":"dc3f574e","getBufferAsset(address)":"0387587d","getBufferBalance(address)":"4021fe0f","getBufferMinimumTotalSupply()":"26a8a991","getBufferOwnerShares(address,address)":"9385e39a","getBufferPeriodDuration()":"20c1fb7a","getBufferPeriodEndTime()":"cd51c12f","getBufferTotalShares(address)":"f2784e07","getMaximumPoolTokens()":"2e42f4d5","getMinimumPoolTokens()":"a8175b27","getMinimumTradeAmount()":"e2cb0ba0","getMinimumWrapAmount()":"53956aa2","getPauseWindowEndTime()":"8a8d123a","getPoolMinimumTotalSupply()":"d0965a6b","getVaultPausedState()":"85c8c015","initializeBuffer(address,uint256,uint256,uint256,address)":"653eb3b0","isVaultPaused()":"098401f5","pausePool(address)":"55aca1ec","pauseVault()":"9e0879c2","pauseVaultBuffers()":"e085c5a8","removeLiquidityFromBuffer(address,uint256,uint256,uint256)":"ebc7955c","setAuthorizer(address)":"058a628f","setProtocolFeeController(address)":"2d771389","setStaticSwapFeePercentage(address,uint256)":"d15126ba","unpausePool(address)":"f21c38cd","unpauseVault()":"0b7562be","unpauseVaultBuffers()":"b9212b49","updateAggregateSwapFeePercentage(address,uint256)":"5e0b06f4","updateAggregateYieldFeePercentage(address,uint256)":"e253670a","vault()":"fbfa77cf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountUnderlyingInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountWrappedInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactSharesToIssue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sharesOwner\",\"type\":\"address\"}],\"name\":\"addLiquidityToBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlyingRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWrappedRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areBuffersPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"buffersPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yieldFeeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQueryPermanently\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"disableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityOwner\",\"type\":\"address\"}],\"name\":\"getBufferOwnerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ownerShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTradeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumWrapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumWrapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseWindowEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vaultPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vaultBufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountUnderlyingRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWrappedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIssuedShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sharesOwner\",\"type\":\"address\"}],\"name\":\"initializeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVaultBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesToRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountUnderlyingOutRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountWrappedOutRaw\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityFromBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"removedUnderlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedWrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"newProtocolFeeController\",\"type\":\"address\"}],\"name\":\"setProtocolFeeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setStaticSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVaultBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAggregateSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateAggregateSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateAggregateYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"`VaultAdmin` is the Proxy extension of `VaultExtension`, and handles the least critical operations, as two delegate calls add gas to each call. Most of the permissioned calls are here.\",\"kind\":\"dev\",\"methods\":{\"addLiquidityToBuffer(address,uint256,uint256,uint256,address)\":{\"details\":\"The buffer needs to be initialized beforehand.\",\"params\":{\"exactSharesToIssue\":\"The value in underlying tokens that `sharesOwner` wants to add to the buffer, in underlying token decimals\",\"maxAmountUnderlyingInRaw\":\"Maximum amount of underlying tokens to add to the buffer. It is expressed in underlying token native decimals\",\"maxAmountWrappedInRaw\":\"Maximum amount of wrapped tokens to add to the buffer. It is expressed in wrapped token native decimals\",\"sharesOwner\":\"Address that will own the deposited liquidity. Only this address will be able to remove liquidity from the buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"amountUnderlyingRaw\":\"Amount of underlying tokens deposited into the buffer\",\"amountWrappedRaw\":\"Amount of wrapped tokens deposited into the buffer\"}},\"areBuffersPaused()\":{\"details\":\"When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true) will revert. Pausing buffers is reversible. Note that ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they would likely be paused and unpaused together). Call `isVaultPaused` to check the pause state of the Vault.\",\"returns\":{\"buffersPaused\":\"True if the Vault buffers are paused\"}},\"collectAggregateFees(address)\":{\"details\":\"Fees are sent to the ProtocolFeeController address.\",\"params\":{\"pool\":\"The pool on which all aggregate fees should be collected\"},\"returns\":{\"swapFeeAmounts\":\"An array with the total swap fees collected, sorted in token registration order\",\"yieldFeeAmounts\":\"An array with the total yield fees collected, sorted in token registration order\"}},\"disableQuery()\":{\"details\":\"The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2). This function can be acted upon as an emergency measure in ambiguous contexts where it's not 100% clear whether disabling queries is completely necessary; queries can still be re-enabled after this call.\"},\"disableQueryPermanently()\":{\"details\":\"Shall only be used when there is no doubt that queries pose a fundamental threat to the system.\"},\"disableRecoveryMode(address)\":{\"details\":\"This is a permissioned function. It re-syncs live balances (which could not be updated during Recovery Mode), forfeiting any yield fees that accrued while enabled. It makes external calls, and could potentially fail if there is an issue with any associated Rate Providers.\",\"params\":{\"pool\":\"The address of the pool\"}},\"enableQuery()\":{\"details\":\"Only works if queries are not permanently disabled.\"},\"enableRecoveryMode(address)\":{\"details\":\"This is a permissioned function. It enables a safe proportional withdrawal, with no external calls. Since there are no external calls, ensuring that entering Recovery Mode cannot fail, we cannot compute and so must forfeit any yield fees between the last operation and enabling Recovery Mode. For the same reason, live balances cannot be updated while in Recovery Mode, as doing so might cause withdrawals to fail.\",\"params\":{\"pool\":\"The address of the pool\"}},\"getBufferAsset(address)\":{\"details\":\"The asset can never change after buffer initialization.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingToken\":\"Address of the underlying token registered for the wrapper; `address(0)` if the buffer has not been initialized.\"}},\"getBufferBalance(address)\":{\"details\":\"All values are in native token decimals of the wrapped or underlying tokens.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingBalanceRaw\":\"Amount of underlying tokens deposited into the buffer, in native token decimals\",\"wrappedBalanceRaw\":\"Amount of wrapped tokens deposited into the buffer, in native token decimals\"}},\"getBufferMinimumTotalSupply()\":{\"details\":\"This prevents buffers from being completely drained. When the buffer is initialized, this minimum number of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal to the Vault, as buffers are not tokenized.\",\"returns\":{\"bufferMinimumTotalSupply\":\"The minimum total supply a buffer can have after initialization\"}},\"getBufferOwnerShares(address,address)\":{\"params\":{\"liquidityOwner\":\"Address of the user that owns liquidity in the wrapped token's buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"ownerShares\":\"Amount of shares allocated to the liquidity owner, in native underlying token decimals\"}},\"getBufferPeriodDuration()\":{\"details\":\"This value is immutable. It represents the period during which, if paused, the Vault will remain paused. This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer timestamps are 32 bits.\",\"returns\":{\"bufferPeriodDuration\":\"The length of the buffer period in seconds\"}},\"getBufferPeriodEndTime()\":{\"details\":\"This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer timestamps are 32 bits.\",\"returns\":{\"bufferPeriodEndTime\":\"The timestamp after which the Vault remains permanently unpaused\"}},\"getBufferTotalShares(address)\":{\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"bufferShares\":\"Amount of supply shares of the buffer, in native underlying token decimals\"}},\"getMaximumPoolTokens()\":{\"returns\":{\"maxTokens\":\"The maximum token count of a pool\"}},\"getMinimumPoolTokens()\":{\"details\":\"We expect the vast majority of pools to be 2-token.\",\"returns\":{\"minTokens\":\"The minimum token count of a pool\"}},\"getMinimumTradeAmount()\":{\"details\":\"This limit is applied to the 18-decimal \\\"upscaled\\\" amount in any operation (swap, add/remove liquidity).\",\"returns\":{\"minimumTradeAmount\":\"The minimum trade amount as an 18-decimal floating point number\"}},\"getMinimumWrapAmount()\":{\"details\":\"This limit is applied to the wrap operation amount, in native underlying token decimals.\",\"returns\":{\"minimumWrapAmount\":\"The minimum wrap amount in native underlying token decimals\"}},\"getPauseWindowEndTime()\":{\"details\":\"This value is immutable, and represents the timestamp after which the Vault can no longer be paused by governance. Balancer timestamps are 32 bits.\",\"returns\":{\"pauseWindowEndTime\":\"The timestamp when the Vault's pause window ends\"}},\"getPoolMinimumTotalSupply()\":{\"details\":\"This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\",\"returns\":{\"poolMinimumTotalSupply\":\"The minimum total supply a pool can have after initialization\"}},\"getVaultPausedState()\":{\"details\":\"Balancer timestamps are 32 bits.\",\"returns\":{\"vaultBufferPeriodEndTime\":\"The timestamp of the end of the Vault's buffer period\",\"vaultPauseWindowEndTime\":\"The timestamp of the end of the Vault's pause window\",\"vaultPaused\":\"True if the Vault is paused\"}},\"initializeBuffer(address,uint256,uint256,uint256,address)\":{\"params\":{\"amountUnderlyingRaw\":\"Amount of underlying tokens that will be deposited into the buffer\",\"amountWrappedRaw\":\"Amount of wrapped tokens that will be deposited into the buffer\",\"minIssuedShares\":\"Minimum amount of shares to receive from the buffer, expressed in underlying token native decimals\",\"sharesOwner\":\"Address that will own the deposited liquidity. Only this address will be able to remove liquidity from the buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"issuedShares\":\"the amount of tokens sharesOwner has in the buffer, expressed in underlying token amounts. (it is the BPT of an internal ERC4626 buffer). It is expressed in underlying token native decimals.\"}},\"isVaultPaused()\":{\"details\":\"If the Vault is paused, all non-Recovery Mode state-changing operations on pools will revert. Note that ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they would likely be paused and unpaused together). Call `areBuffersPaused` to check the pause state of the buffers.\",\"returns\":{\"vaultPaused\":\"True if the Vault is paused\"}},\"pausePool(address)\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during pool factory deployment.\",\"params\":{\"pool\":\"The pool being paused\"}},\"pauseVault()\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during deployment. Note that ERC4626 buffer operations have an independent pause mechanism, which is not affected by pausing the Vault. Custom routers could still wrap/unwrap using buffers while the Vault is paused, unless buffers are also paused (with `pauseVaultBuffers`).\"},\"pauseVaultBuffers()\":{\"details\":\"When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. Currently it's not possible to pause vault buffers individually. This is a permissioned call, and is reversible (see `unpauseVaultBuffers`). Note that the Vault has a separate and independent pausing mechanism. It is possible to pause the Vault (i.e. pool operations), without affecting buffers, and vice versa.\"},\"removeLiquidityFromBuffer(address,uint256,uint256,uint256)\":{\"details\":\"Only proportional exits are supported, and the sender has to be the owner of the shares. This function unlocks the Vault just for this operation; it does not work with a Router as an entrypoint. Pre-conditions: - The buffer needs to be initialized. - sharesOwner is the original msg.sender, it needs to be checked in the Router. That's why   this call is authenticated; only routers approved by the DAO can remove the liquidity of a buffer. - The buffer needs to have some liquidity and have its asset registered in `_bufferAssets` storage.\",\"params\":{\"minAmountUnderlyingOutRaw\":\"Minimum amount of underlying tokens to receive from the buffer. It is expressed in underlying token native decimals\",\"minAmountWrappedOutRaw\":\"Minimum amount of wrapped tokens to receive from the buffer. It is expressed in wrapped token native decimals\",\"sharesToRemove\":\"Amount of shares to remove from the buffer. Cannot be greater than sharesOwner's total shares. It is expressed in underlying token native decimals\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"removedUnderlyingBalanceRaw\":\"Amount of underlying tokens returned to the user\",\"removedWrappedBalanceRaw\":\"Amount of wrapped tokens returned to the user\"}},\"setAuthorizer(address)\":{\"details\":\"This is a permissioned call. Emits an `AuthorizerChanged` event.\",\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"setProtocolFeeController(address)\":{\"details\":\"This is a permissioned call. Emits a `ProtocolFeeControllerChanged` event.\",\"params\":{\"newProtocolFeeController\":\"The address of the new Protocol Fee Controller\"}},\"setStaticSwapFeePercentage(address,uint256)\":{\"details\":\"This is a permissioned function, disabled if the pool is paused. The swap fee percentage must be within the bounds specified by the pool's implementation of `ISwapFeePercentageBounds`. Emits the SwapFeePercentageChanged event.\",\"params\":{\"pool\":\"The address of the pool for which the static swap fee will be changed\",\"swapFeePercentage\":\"The new swap fee percentage to apply to the pool\"}},\"unpausePool(address)\":{\"details\":\"This is a permissioned function that will only work on a paused Pool within the Buffer Period set during deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\",\"params\":{\"pool\":\"The pool being unpaused\"}},\"unpauseVault()\":{\"details\":\"This is a permissioned function that will only work on a paused Vault within the Buffer Period set during deployment. Note that the Vault will automatically unpause after the Buffer Period expires. As noted above, ERC4626 buffers and Vault operations on pools are independent. Unpausing the Vault does not reverse `pauseVaultBuffers`. If buffers were also paused, they will remain in that state until explicitly unpaused.\"},\"unpauseVaultBuffers()\":{\"details\":\"When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. As noted above, ERC4626 buffers and Vault operations on pools are independent. Unpausing buffers does not reverse `pauseVault`. If the Vault was also paused, it will remain in that state until explicitly unpaused. This is a permissioned call.\"},\"updateAggregateSwapFeePercentage(address,uint256)\":{\"details\":\"Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol). Emits an `AggregateSwapFeePercentageChanged` event.\",\"params\":{\"newAggregateSwapFeePercentage\":\"The new aggregate swap fee percentage\",\"pool\":\"The pool whose swap fee percentage will be updated\"}},\"updateAggregateYieldFeePercentage(address,uint256)\":{\"details\":\"Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol). Emits an `AggregateYieldFeePercentageChanged` event.\",\"params\":{\"newAggregateYieldFeePercentage\":\"The new aggregate yield fee percentage\",\"pool\":\"The pool whose yield fee percentage will be updated\"}},\"vault()\":{\"details\":\"The main Vault contains the entrypoint and main liquidity operation implementations.\",\"returns\":{\"_0\":\"vault The address of the main Vault\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidityToBuffer(address,uint256,uint256,uint256,address)\":{\"notice\":\"Adds liquidity to an internal ERC4626 buffer in the Vault, proportionally.\"},\"areBuffersPaused()\":{\"notice\":\"Indicates whether the Vault buffers are paused.\"},\"collectAggregateFees(address)\":{\"notice\":\"Collects accumulated aggregate swap and yield fees for the specified pool.\"},\"disableQuery()\":{\"notice\":\"Disables query functionality on the Vault. Can only be called by governance.\"},\"disableQueryPermanently()\":{\"notice\":\"Disables query functionality permanently on the Vault. Can only be called by governance.\"},\"disableRecoveryMode(address)\":{\"notice\":\"Disable recovery mode for a pool.\"},\"enableQuery()\":{\"notice\":\"Enables query functionality on the Vault. Can only be called by governance.\"},\"enableRecoveryMode(address)\":{\"notice\":\"Enable recovery mode for a pool.\"},\"getBufferAsset(address)\":{\"notice\":\"Returns the asset registered for a given wrapped token.\"},\"getBufferBalance(address)\":{\"notice\":\"Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\"},\"getBufferMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\"},\"getBufferOwnerShares(address,address)\":{\"notice\":\"Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets in the buffer.\"},\"getBufferPeriodDuration()\":{\"notice\":\"Returns the Vault's buffer period duration.\"},\"getBufferPeriodEndTime()\":{\"notice\":\"Returns the Vault's buffer period end time.\"},\"getBufferTotalShares(address)\":{\"notice\":\"Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\"},\"getMaximumPoolTokens()\":{\"notice\":\"Get the maximum number of tokens in a pool.\"},\"getMinimumPoolTokens()\":{\"notice\":\"Get the minimum number of tokens in a pool.\"},\"getMinimumTradeAmount()\":{\"notice\":\"Get the minimum trade amount in a pool operation.\"},\"getMinimumWrapAmount()\":{\"notice\":\"Get the minimum wrap amount in a buffer operation.\"},\"getPauseWindowEndTime()\":{\"notice\":\"Returns the Vault's pause window end time.\"},\"getPoolMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of pool tokens (BPT) for an initialized pool.\"},\"getVaultPausedState()\":{\"notice\":\"Returns the paused status, and end times of the Vault's pause window and buffer period.\"},\"initializeBuffer(address,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes buffer for the given wrapped token.\"},\"isVaultPaused()\":{\"notice\":\"Indicates whether the Vault is paused.\"},\"pausePool(address)\":{\"notice\":\"Pause the Pool: an emergency action which disables all pool functions.\"},\"pauseVault()\":{\"notice\":\"Pause the Vault: an emergency action which disables all operational state-changing functions on pools.\"},\"pauseVaultBuffers()\":{\"notice\":\"Pauses native vault buffers globally.\"},\"removeLiquidityFromBuffer(address,uint256,uint256,uint256)\":{\"notice\":\"Removes liquidity from an internal ERC4626 buffer in the Vault.\"},\"setAuthorizer(address)\":{\"notice\":\"Sets a new Authorizer for the Vault.\"},\"setProtocolFeeController(address)\":{\"notice\":\"Sets a new Protocol Fee Controller for the Vault.\"},\"setStaticSwapFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new static swap fee percentage to the specified pool.\"},\"unpausePool(address)\":{\"notice\":\"Reverse a `pause` operation, and restore the Pool to normal functionality.\"},\"unpauseVault()\":{\"notice\":\"Reverse a `pause` operation, and restore Vault pool operations to normal functionality.\"},\"unpauseVaultBuffers()\":{\"notice\":\"Unpauses native vault buffers globally.\"},\"updateAggregateSwapFeePercentage(address,uint256)\":{\"notice\":\"Update an aggregate swap fee percentage.\"},\"updateAggregateYieldFeePercentage(address,uint256)\":{\"notice\":\"Update an aggregate yield fee percentage.\"},\"vault()\":{\"notice\":\"Returns the main Vault address.\"}},\"notice\":\"Interface for functions defined on the `VaultAdmin` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":\"IVaultAdmin\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol":{"IVaultErrors":{"abi":[{"inputs":[],"name":"AfterAddLiquidityHookFailed","type":"error"},{"inputs":[],"name":"AfterInitializeHookFailed","type":"error"},{"inputs":[],"name":"AfterRemoveLiquidityHookFailed","type":"error"},{"inputs":[],"name":"AfterSwapHookFailed","type":"error"},{"inputs":[],"name":"AmountGivenZero","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"AmountInAboveMax","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"AmountOutBelowMin","type":"error"},{"inputs":[],"name":"BalanceNotSettled","type":"error"},{"inputs":[],"name":"BeforeAddLiquidityHookFailed","type":"error"},{"inputs":[],"name":"BeforeInitializeHookFailed","type":"error"},{"inputs":[],"name":"BeforeRemoveLiquidityHookFailed","type":"error"},{"inputs":[],"name":"BeforeSwapHookFailed","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"BptAmountInAboveMax","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"BptAmountOutBelowMin","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"BufferAlreadyInitialized","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"BufferNotInitialized","type":"error"},{"inputs":[],"name":"BufferSharesInvalidOwner","type":"error"},{"inputs":[],"name":"BufferSharesInvalidReceiver","type":"error"},{"inputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"}],"name":"BufferTotalSupplyTooLow","type":"error"},{"inputs":[],"name":"CannotReceiveEth","type":"error"},{"inputs":[],"name":"CannotSwapSameToken","type":"error"},{"inputs":[],"name":"DoesNotSupportAddLiquidityCustom","type":"error"},{"inputs":[],"name":"DoesNotSupportDonation","type":"error"},{"inputs":[],"name":"DoesNotSupportRemoveLiquidityCustom","type":"error"},{"inputs":[],"name":"DoesNotSupportUnbalancedLiquidity","type":"error"},{"inputs":[],"name":"DynamicSwapFeeHookFailed","type":"error"},{"inputs":[],"name":"FeePrecisionTooHigh","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"HookAdjustedAmountInAboveMax","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"HookAdjustedAmountOutBelowMin","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"HookAdjustedSwapLimit","type":"error"},{"inputs":[{"internalType":"address","name":"poolHooksContract","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"poolFactory","type":"address"}],"name":"HookRegistrationFailed","type":"error"},{"inputs":[],"name":"InvalidAddLiquidityKind","type":"error"},{"inputs":[],"name":"InvalidRemoveLiquidityKind","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[],"name":"InvalidTokenConfiguration","type":"error"},{"inputs":[],"name":"InvalidTokenDecimals","type":"error"},{"inputs":[],"name":"InvalidTokenType","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"InvalidUnderlyingToken","type":"error"},{"inputs":[{"internalType":"uint256","name":"issuedShares","type":"uint256"},{"internalType":"uint256","name":"minIssuedShares","type":"uint256"}],"name":"IssuedSharesBelowMin","type":"error"},{"inputs":[],"name":"MaxTokens","type":"error"},{"inputs":[],"name":"MinTokens","type":"error"},{"inputs":[],"name":"NotEnoughBufferShares","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"expectedUnderlyingAmount","type":"uint256"},{"internalType":"uint256","name":"actualUnderlyingAmount","type":"uint256"}],"name":"NotEnoughUnderlying","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"expectedWrappedAmount","type":"uint256"},{"internalType":"uint256","name":"actualWrappedAmount","type":"uint256"}],"name":"NotEnoughWrapped","type":"error"},{"inputs":[],"name":"NotVaultDelegateCall","type":"error"},{"inputs":[],"name":"PauseBufferPeriodDurationTooLarge","type":"error"},{"inputs":[],"name":"PercentageAboveMax","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyInitialized","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolInRecoveryMode","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotInRecoveryMode","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotInitialized","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotPaused","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolPauseWindowExpired","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolPaused","type":"error"},{"inputs":[],"name":"ProtocolFeesExceedTotalCollected","type":"error"},{"inputs":[],"name":"QueriesDisabled","type":"error"},{"inputs":[],"name":"QueriesDisabledPermanently","type":"error"},{"inputs":[],"name":"QuoteResultSpoofed","type":"error"},{"inputs":[],"name":"RouterNotTrusted","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderIsNotVault","type":"error"},{"inputs":[],"name":"SwapFeePercentageTooHigh","type":"error"},{"inputs":[],"name":"SwapFeePercentageTooLow","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"SwapLimit","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TokenAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TokenNotRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"expectedToken","type":"address"},{"internalType":"address","name":"actualToken","type":"address"}],"name":"TokensMismatch","type":"error"},{"inputs":[],"name":"TradeAmountTooSmall","type":"error"},{"inputs":[],"name":"VaultBuffersArePaused","type":"error"},{"inputs":[],"name":"VaultIsNotUnlocked","type":"error"},{"inputs":[],"name":"VaultNotPaused","type":"error"},{"inputs":[],"name":"VaultPauseWindowDurationTooLarge","type":"error"},{"inputs":[],"name":"VaultPauseWindowExpired","type":"error"},{"inputs":[],"name":"VaultPaused","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"WrapAmountTooSmall","type":"error"},{"inputs":[],"name":"WrongProtocolFeeControllerDeployment","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"underlyingToken","type":"address"}],"name":"WrongUnderlyingToken","type":"error"},{"inputs":[],"name":"WrongVaultAdminDeployment","type":"error"},{"inputs":[],"name":"WrongVaultExtensionDeployment","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AfterAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountGivenZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"AmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"AmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"BptAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"BptAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"BufferAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"BufferNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BufferSharesInvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BufferSharesInvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"BufferTotalSupplyTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReceiveEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSwapSameToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportAddLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportDonation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportRemoveLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportUnbalancedLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DynamicSwapFeeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeePrecisionTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedSwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolHooksContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"HookRegistrationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRemoveLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"InvalidUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIssuedShares\",\"type\":\"uint256\"}],\"name\":\"IssuedSharesBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBufferShares\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedUnderlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualUnderlyingAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughUnderlying\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedWrappedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualWrappedAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughWrapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaultDelegateCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PauseBufferPeriodDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PercentageAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeesExceedTotalCollected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabledPermanently\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteResultSpoofed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterNotTrusted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualToken\",\"type\":\"address\"}],\"name\":\"TokensMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradeAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultBuffersArePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultIsNotUnlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"WrapAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongProtocolFeeControllerDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"WrongUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultAdminDeployment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultExtensionDeployment\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"AmountInAboveMax(address,uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total token amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\",\"tokenIn\":\"The incoming token\"}}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\",\"tokenOut\":\"The outgoing token\"}}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total BPT amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\"}}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\"}}],\"BufferAlreadyInitialized(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"BufferNotInitialized(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"BufferTotalSupplyTooLow(uint256)\":[{\"params\":{\"totalSupply\":\"The total supply value that was below the minimum\"}}],\"FeePrecisionTooHigh()\":[{\"details\":\"Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%). Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between the aggregate fee calculated here and that stored in the Vault.\"}],\"HookAdjustedAmountInAboveMax(address,uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total token amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\",\"tokenIn\":\"The incoming token\"}}],\"HookAdjustedAmountOutBelowMin(address,uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\",\"tokenOut\":\"The outgoing token\"}}],\"HookAdjustedSwapLimit(uint256,uint256)\":[{\"params\":{\"amount\":\"The total amount in or out\",\"limit\":\"The amount of the limit that has been exceeded\"}}],\"HookRegistrationFailed(address,address,address)\":[{\"params\":{\"pool\":\"Address of the rejected pool\",\"poolFactory\":\"Address of the pool factory\",\"poolHooksContract\":\"Address of the hook contract that rejected the pool registration\"}}],\"InvalidUnderlyingToken(address)\":[{\"details\":\"This should never happen, but a malicious wrapper contract might do this (e.g., in an attempt to re-initialize the buffer).\",\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"IssuedSharesBelowMin(uint256,uint256)\":[{\"details\":\"Shares issued during initialization are below the requested amount.\"}],\"NotEnoughUnderlying(address,uint256,uint256)\":[{\"details\":\"A wrap/unwrap operation consumed more or returned less underlying tokens than it should.\"}],\"NotEnoughWrapped(address,uint256,uint256)\":[{\"details\":\"A wrap/unwrap operation consumed more or returned less wrapped tokens than it should.\"}],\"NotVaultDelegateCall()\":[{\"details\":\"It can only be called by the Vault via delegatecall.\"}],\"PoolAlreadyInitialized(address)\":[{\"params\":{\"pool\":\"The already initialized pool\"}}],\"PoolAlreadyRegistered(address)\":[{\"params\":{\"pool\":\"The already registered pool\"}}],\"PoolInRecoveryMode(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInRecoveryMode(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInitialized(address)\":[{\"params\":{\"pool\":\"The uninitialized pool\"}}],\"PoolNotPaused(address)\":[{\"params\":{\"pool\":\"The unpaused pool\"}}],\"PoolNotRegistered(address)\":[{\"params\":{\"pool\":\"The unregistered pool\"}}],\"PoolPauseWindowExpired(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolPaused(address)\":[{\"params\":{\"pool\":\"The paused pool\"}}],\"ProtocolFeesExceedTotalCollected()\":[{\"details\":\"This occurs when the sum of the parts (aggregate swap or yield fee) is greater than the whole (total swap or yield fee). Also validated when the protocol fee controller updates aggregate fee percentages in the Vault.\"}],\"SenderIsNotVault(address)\":[{\"params\":{\"sender\":\"The account attempting to call a permissioned function\"}}],\"SwapFeePercentageTooHigh()\":[{\"details\":\"The Vault itself does not impose a universal minimum. Rather, it validates against the range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error if it is above the maximum value returned by the pool. Pools with dynamic fees do not check these limits.\"}],\"SwapFeePercentageTooLow()\":[{\"details\":\"The Vault itself does not impose a universal minimum. Rather, it validates against the range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error if it is below the minimum value returned by the pool. Pools with dynamic fees do not check these limits.\"}],\"SwapLimit(uint256,uint256)\":[{\"params\":{\"amount\":\"The total amount in or out\",\"limit\":\"The amount of the limit that has been exceeded\"}}],\"TokenAlreadyRegistered(address)\":[{\"params\":{\"token\":\"The duplicate token\"}}],\"TokenNotRegistered(address)\":[{\"params\":{\"token\":\"The unregistered token\"}}],\"TokensMismatch(address,address,address)\":[{\"params\":{\"actualToken\":\"The actual token found at that index\",\"expectedToken\":\"The correct token at a given index in the pool\",\"pool\":\"Address of the pool\"}}],\"WrapAmountTooSmall(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"WrongUnderlyingToken(address,address)\":[{\"details\":\"This should never happen, but a malicious wrapper contract might not return the correct address. Legitimate wrapper contracts should make the asset a constant or immutable value.\",\"params\":{\"underlyingToken\":\"The underlying token returned by `asset`\",\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"AfterAddLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert.\"}],\"AfterInitializeHookFailed()\":[{\"notice\":\"The pool has returned false to the afterInitialize hook, indicating the transaction should revert.\"}],\"AfterRemoveLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert.\"}],\"AfterSwapHookFailed()\":[{\"notice\":\"The pool has returned false to the afterSwap hook, indicating the transaction should revert.\"}],\"AmountGivenZero()\":[{\"notice\":\"The user tried to swap zero tokens.\"}],\"AmountInAboveMax(address,uint256,uint256)\":[{\"notice\":\"A required amountIn exceeds the maximum limit specified for the operation.\"}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"notice\":\"The actual amount out is below the minimum limit specified for the operation.\"}],\"BalanceNotSettled()\":[{\"notice\":\"A transient accounting operation completed with outstanding token deltas.\"}],\"BeforeAddLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert.\"}],\"BeforeInitializeHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeInitialize hook, indicating the transaction should revert.\"}],\"BeforeRemoveLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert.\"}],\"BeforeSwapHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"notice\":\"The required BPT amount in exceeds the maximum limit specified for the operation.\"}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"notice\":\"The BPT amount received from adding liquidity is below the minimum specified for the operation.\"}],\"BufferAlreadyInitialized(address)\":[{\"notice\":\"The buffer for the given wrapped token was already initialized.\"}],\"BufferNotInitialized(address)\":[{\"notice\":\"The buffer for the given wrapped token was not initialized.\"}],\"BufferSharesInvalidOwner()\":[{\"notice\":\"Buffer shares were burned from the zero address.\"}],\"BufferSharesInvalidReceiver()\":[{\"notice\":\"Buffer shares were minted to the zero address.\"}],\"BufferTotalSupplyTooLow(uint256)\":[{\"notice\":\"The total supply of a buffer can't be lower than the absolute minimum.\"}],\"CannotReceiveEth()\":[{\"notice\":\"The contract should not receive ETH.\"}],\"CannotSwapSameToken()\":[{\"notice\":\"The user attempted to swap a token for itself.\"}],\"DoesNotSupportAddLiquidityCustom()\":[{\"notice\":\"Pool does not support adding liquidity with a customized input.\"}],\"DoesNotSupportDonation()\":[{\"notice\":\"Pool does not support adding liquidity through donation.\"}],\"DoesNotSupportRemoveLiquidityCustom()\":[{\"notice\":\"Pool does not support removing liquidity with a customized input.\"}],\"DoesNotSupportUnbalancedLiquidity()\":[{\"notice\":\"Pool does not support adding / removing liquidity with an unbalanced input.\"}],\"DynamicSwapFeeHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"FeePrecisionTooHigh()\":[{\"notice\":\"Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\"}],\"HookAdjustedAmountInAboveMax(address,uint256,uint256)\":[{\"notice\":\"A hook adjusted amountIn exceeds the maximum limit specified for the operation.\"}],\"HookAdjustedAmountOutBelowMin(address,uint256,uint256)\":[{\"notice\":\"The hook adjusted amount out is below the minimum limit specified for the operation.\"}],\"HookAdjustedSwapLimit(uint256,uint256)\":[{\"notice\":\"A hook adjusted amount in or out has exceeded the limit specified in the swap request.\"}],\"HookRegistrationFailed(address,address,address)\":[{\"notice\":\"A hook contract rejected a pool on registration.\"}],\"InvalidAddLiquidityKind()\":[{\"notice\":\"Add liquidity kind not supported.\"}],\"InvalidRemoveLiquidityKind()\":[{\"notice\":\"Remove liquidity kind not supported.\"}],\"InvalidToken()\":[{\"notice\":\"Invalid tokens (e.g., zero) cannot be registered.\"}],\"InvalidTokenConfiguration()\":[{\"notice\":\"The data in a TokenConfig struct is inconsistent or unsupported.\"}],\"InvalidTokenDecimals()\":[{\"notice\":\"Tokens with more than 18 decimals are not supported.\"}],\"InvalidTokenType()\":[{\"notice\":\"The token type given in a TokenConfig during pool registration is invalid.\"}],\"InvalidUnderlyingToken(address)\":[{\"notice\":\"A wrapped token reported the zero address as its underlying token asset.\"}],\"MaxTokens()\":[{\"notice\":\"The token count is above the maximum allowed.\"}],\"MinTokens()\":[{\"notice\":\"The token count is below the minimum allowed.\"}],\"NotEnoughBufferShares()\":[{\"notice\":\"The user is trying to remove more than their allocated shares from the buffer.\"}],\"NotVaultDelegateCall()\":[{\"notice\":\"The `VaultExtension` contract was called by an account directly.\"}],\"PauseBufferPeriodDurationTooLarge()\":[{\"notice\":\"The caller specified a buffer period longer than the maximum.\"}],\"PercentageAboveMax()\":[{\"notice\":\"A given percentage is above the maximum (usually a value close to FixedPoint.ONE, or 1e18 wei).\"}],\"PoolAlreadyInitialized(address)\":[{\"notice\":\"A pool has already been initialized. `initialize` may only be called once.\"}],\"PoolAlreadyRegistered(address)\":[{\"notice\":\"A pool has already been registered. `registerPool` may only be called once.\"}],\"PoolInRecoveryMode(address)\":[{\"notice\":\"Cannot enable recovery mode when already enabled.\"}],\"PoolNotInRecoveryMode(address)\":[{\"notice\":\"Cannot disable recovery mode when not enabled.\"}],\"PoolNotInitialized(address)\":[{\"notice\":\"A referenced pool has not been initialized.\"}],\"PoolNotPaused(address)\":[{\"notice\":\"Governance tried to unpause the Pool when it was not paused.\"}],\"PoolNotRegistered(address)\":[{\"notice\":\"A pool has not been registered.\"}],\"PoolPauseWindowExpired(address)\":[{\"notice\":\"Governance tried to pause a Pool after the pause period expired.\"}],\"PoolPaused(address)\":[{\"notice\":\"A user tried to perform an operation involving a paused Pool.\"}],\"ProtocolFeesExceedTotalCollected()\":[{\"notice\":\"Error raised when there is an overflow in the fee calculation.\"}],\"QueriesDisabled()\":[{\"notice\":\"A user tried to execute a query operation when they were disabled.\"}],\"QueriesDisabledPermanently()\":[{\"notice\":\"An admin tried to re-enable queries, but they were disabled permanently.\"}],\"QuoteResultSpoofed()\":[{\"notice\":\"Quote reverted with a reserved error code.\"}],\"RouterNotTrusted()\":[{\"notice\":\"An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance).\"}],\"SenderIsNotVault(address)\":[{\"notice\":\"Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\"}],\"SwapFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the swap fee percentage is greater than the maximum allowed value.\"}],\"SwapFeePercentageTooLow()\":[{\"notice\":\"Error raised when the swap fee percentage is less than the minimum allowed value.\"}],\"SwapLimit(uint256,uint256)\":[{\"notice\":\"An amount in or out has exceeded the limit specified in the swap request.\"}],\"TokenAlreadyRegistered(address)\":[{\"notice\":\"A token was already registered (i.e., it is a duplicate in the pool).\"}],\"TokenNotRegistered(address)\":[{\"notice\":\"The user attempted to operate with a token that is not in the pool.\"}],\"TokensMismatch(address,address,address)\":[{\"notice\":\"The token list passed into an operation does not match the pool tokens in the pool.\"}],\"TradeAmountTooSmall()\":[{\"notice\":\"The amount given or calculated for an operation is below the minimum limit.\"}],\"VaultBuffersArePaused()\":[{\"notice\":\"Buffer operation attempted while vault buffers are paused.\"}],\"VaultIsNotUnlocked()\":[{\"notice\":\"A user called a Vault function (swap, add/remove liquidity) outside the lock context.\"}],\"VaultNotPaused()\":[{\"notice\":\"Governance tried to unpause the Vault when it was not paused.\"}],\"VaultPauseWindowDurationTooLarge()\":[{\"notice\":\"The caller specified a pause window period longer than the maximum.\"}],\"VaultPauseWindowExpired()\":[{\"notice\":\"Governance tried to pause the Vault after the pause period expired.\"}],\"VaultPaused()\":[{\"notice\":\"A user tried to perform an operation while the Vault was paused.\"}],\"WrapAmountTooSmall(address)\":[{\"notice\":\"The amount given to wrap/unwrap was too small, which can introduce rounding issues.\"}],\"WrongProtocolFeeControllerDeployment()\":[{\"notice\":\"The `ProtocolFeeController` contract was configured with an incorrect Vault address.\"}],\"WrongUnderlyingToken(address,address)\":[{\"notice\":\"The wrapped token asset does not match the underlying token.\"}],\"WrongVaultAdminDeployment()\":[{\"notice\":\"The `VaultAdmin` contract was configured with an incorrect Vault address.\"}],\"WrongVaultExtensionDeployment()\":[{\"notice\":\"The `VaultExtension` contract was configured with an incorrect Vault address.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Errors are declared inside an interface (namespace) to improve DX with Typechain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":\"IVaultErrors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol":{"IVaultEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"}],"name":"AggregateSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}],"name":"AggregateYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"AuthorizerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnedShares","type":"uint256"}],"name":"BufferSharesBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"issuedShares","type":"uint256"}],"name":"BufferSharesMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":true,"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"amountsAddedRaw","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"swapFeeAmountsRaw","type":"uint256[]"}],"name":"LiquidityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWrapped","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"LiquidityAddedToBuffer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":true,"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"amountsRemovedRaw","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"swapFeeAmountsRaw","type":"uint256[]"}],"name":"LiquidityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWrapped","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"LiquidityRemovedFromBuffer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"}],"name":"PoolInitialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"PoolPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"bool","name":"recoveryMode","type":"bool"}],"name":"PoolRecoveryModeStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"factory","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"indexed":false,"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"indexed":false,"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"},{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"indexed":false,"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"indexed":false,"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"PoolRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IProtocolFeeController","name":"newProtocolFeeController","type":"address"}],"name":"ProtocolFeeControllerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"SwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnedShares","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"withdrawnUnderlying","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"Unwrap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"bytes32","name":"eventKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"eventData","type":"bytes"}],"name":"VaultAuxiliary","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"VaultBuffersPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"VaultPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"VaultQueriesDisabled","type":"event"},{"anonymous":false,"inputs":[],"name":"VaultQueriesEnabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"depositedUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"mintedShares","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"Wrap","type":"event"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"AggregateSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"AggregateYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"}],\"name\":\"BufferSharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"}],\"name\":\"BufferSharesMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsAddedRaw\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmountsRaw\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"LiquidityAddedToBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsRemovedRaw\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmountsRaw\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"LiquidityRemovedFromBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PoolPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"recoveryMode\",\"type\":\"bool\"}],\"name\":\"PoolRecoveryModeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IProtocolFeeController\",\"name\":\"newProtocolFeeController\",\"type\":\"address\"}],\"name\":\"ProtocolFeeControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"Unwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"eventKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"VaultAuxiliary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultBuffersPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultQueriesDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultQueriesEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"Wrap\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Events are declared inside an interface (namespace) to improve DX with Typechain.\",\"events\":{\"AggregateSwapFeePercentageChanged(address,uint256)\":{\"details\":\"The `ProtocolFeeController` will emit an event with the underlying change.\",\"params\":{\"aggregateSwapFeePercentage\":\"The new aggregate swap fee percentage\",\"pool\":\"The pool whose aggregate swap fee percentage changed\"}},\"AggregateYieldFeePercentageChanged(address,uint256)\":{\"details\":\"The `ProtocolFeeController` will emit an event with the underlying change.\",\"params\":{\"aggregateYieldFeePercentage\":\"The new aggregate yield fee percentage\",\"pool\":\"The pool whose aggregate yield fee percentage changed\"}},\"AuthorizerChanged(address)\":{\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"BufferSharesBurned(address,address,uint256)\":{\"details\":\"The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares` retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the \\\"totalSupply\\\" of a buffer.\",\"params\":{\"burnedShares\":\"The amount of \\\"internal BPT\\\" shares burned\",\"from\":\"The owner of the burned shares\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"BufferSharesMinted(address,address,uint256)\":{\"details\":\"The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares` retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the \\\"totalSupply\\\" of a buffer.\",\"params\":{\"issuedShares\":\"The amount of \\\"internal BPT\\\" shares created\",\"to\":\"The owner of the minted shares\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"LiquidityAdded(address,address,uint8,uint256,uint256[],uint256[])\":{\"params\":{\"amountsAddedRaw\":\"The amount of each token that was added, sorted in token registration order\",\"kind\":\"The add liquidity operation type (e.g., proportional, custom)\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool with liquidity added\",\"swapFeeAmountsRaw\":\"The total swap fees charged, sorted in token registration order\",\"totalSupply\":\"The total supply of the pool after the operation\"}},\"LiquidityAddedToBuffer(address,uint256,uint256,bytes32)\":{\"details\":\"The underlying token can be derived from the wrapped token, so it's not included here.\",\"params\":{\"amountUnderlying\":\"The amount of the underlying token that was deposited\",\"amountWrapped\":\"The amount of the wrapped token that was deposited\",\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"LiquidityRemoved(address,address,uint8,uint256,uint256[],uint256[])\":{\"params\":{\"amountsRemovedRaw\":\"The amount of each token that was removed, sorted in token registration order\",\"kind\":\"The remove liquidity operation type (e.g., proportional, custom)\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool with liquidity removed\",\"swapFeeAmountsRaw\":\"The total swap fees charged, sorted in token registration order\",\"totalSupply\":\"The total supply of the pool after the operation\"}},\"LiquidityRemovedFromBuffer(address,uint256,uint256,bytes32)\":{\"details\":\"The underlying token can be derived from the wrapped token, so it's not included here.\",\"params\":{\"amountUnderlying\":\"The amount of the underlying token that was withdrawn\",\"amountWrapped\":\"The amount of the wrapped token that was withdrawn\",\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"PoolInitialized(address)\":{\"params\":{\"pool\":\"The pool being initialized\"}},\"PoolPausedStateChanged(address,bool)\":{\"params\":{\"paused\":\"True if the pool was paused\",\"pool\":\"The pool that was just paused or unpaused\"}},\"PoolRecoveryModeStateChanged(address,bool)\":{\"params\":{\"pool\":\"The pool\",\"recoveryMode\":\"True if recovery mode was enabled\"}},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,uint32,(address,address,address),(bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),(bool,bool,bool,bool))\":{\"params\":{\"factory\":\"The factory creating the pool\",\"hooksConfig\":\"Flags indicating which hooks the pool supports and address of hooks contract\",\"liquidityManagement\":\"Supported liquidity management hook flags\",\"pauseWindowEndTime\":\"The pool's pause window end time\",\"pool\":\"The pool being registered\",\"roleAccounts\":\"Addresses the Vault will allow to change certain pool settings\",\"swapFeePercentage\":\"The static swap fee of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"ProtocolFeeControllerChanged(address)\":{\"params\":{\"newProtocolFeeController\":\"The address of the new protocol fee controller\"}},\"Swap(address,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"Number of tokenIn tokens\",\"amountOut\":\"Number of tokenOut tokens\",\"pool\":\"The pool with the tokens being swapped\",\"swapFeeAmount\":\"Swap fee amount paid\",\"swapFeePercentage\":\"Swap fee percentage applied (can differ if dynamic)\",\"tokenIn\":\"The token entering the Vault (balance increases)\",\"tokenOut\":\"The token leaving the Vault (balance decreases)\"}},\"SwapFeePercentageChanged(address,uint256)\":{\"params\":{\"swapFeePercentage\":\"The new swap fee percentage for the pool\"}},\"Unwrap(address,uint256,uint256,bytes32)\":{\"params\":{\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"burnedShares\":\"Number of shares (wrapped tokens) burned\",\"withdrawnUnderlying\":\"Number of underlying tokens withdrawn\",\"wrappedToken\":\"The wrapped token address\"}},\"VaultAuxiliary(address,bytes32,bytes)\":{\"params\":{\"eventData\":\"Encoded event data\",\"eventKey\":\"Event key\",\"pool\":\"Pool address\"}},\"VaultBuffersPausedStateChanged(bool)\":{\"details\":\"If buffers all paused, all buffer operations (i.e., all calls through the Router with `isBuffer` set to true) will revert.\",\"params\":{\"paused\":\"True if the Vault buffers were paused\"}},\"VaultPausedStateChanged(bool)\":{\"params\":{\"paused\":\"True if the Vault was paused\"}},\"Wrap(address,uint256,uint256,bytes32)\":{\"params\":{\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"depositedUnderlying\":\"Number of underlying tokens deposited\",\"mintedShares\":\"Number of shares (wrapped tokens) minted\",\"wrappedToken\":\"The wrapped token address\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AggregateSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"A protocol or pool creator fee has changed, causing an update to the aggregate swap fee.\"},\"AggregateYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"A protocol or pool creator fee has changed, causing an update to the aggregate yield fee.\"},\"AuthorizerChanged(address)\":{\"notice\":\"A new authorizer is set by `setAuthorizer`.\"},\"BufferSharesBurned(address,address,uint256)\":{\"notice\":\"Buffer shares were burned for an ERC4626 buffer corresponding to a given wrapped token.\"},\"BufferSharesMinted(address,address,uint256)\":{\"notice\":\"Buffer shares were minted for an ERC4626 buffer corresponding to a given wrapped token.\"},\"LiquidityAdded(address,address,uint8,uint256,uint256[],uint256[])\":{\"notice\":\"Liquidity has been added to a pool (including initialization).\"},\"LiquidityAddedToBuffer(address,uint256,uint256,bytes32)\":{\"notice\":\"Liquidity was added to an ERC4626 buffer corresponding to the given wrapped token.\"},\"LiquidityRemoved(address,address,uint8,uint256,uint256[],uint256[])\":{\"notice\":\"Liquidity has been removed from a pool.\"},\"LiquidityRemovedFromBuffer(address,uint256,uint256,bytes32)\":{\"notice\":\"Liquidity was removed from an ERC4626 buffer.\"},\"PoolInitialized(address)\":{\"notice\":\"A Pool was initialized by calling `initialize`.\"},\"PoolPausedStateChanged(address,bool)\":{\"notice\":\"A Pool's pause status has changed.\"},\"PoolRecoveryModeStateChanged(address,bool)\":{\"notice\":\"Recovery mode has been enabled or disabled for a pool.\"},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,uint32,(address,address,address),(bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),(bool,bool,bool,bool))\":{\"notice\":\"A Pool was registered by calling `registerPool`.\"},\"ProtocolFeeControllerChanged(address)\":{\"notice\":\"A new protocol fee controller is set by `setProtocolFeeController`.\"},\"Swap(address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"A swap has occurred.\"},\"SwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the swap fee percentage of a pool is updated.\"},\"Unwrap(address,uint256,uint256,bytes32)\":{\"notice\":\"An unwrap operation has occurred.\"},\"VaultAuxiliary(address,bytes32,bytes)\":{\"notice\":\"Pools can use this event to emit event data from the Vault.\"},\"VaultBuffersPausedStateChanged(bool)\":{\"notice\":\"The Vault buffers pause status has changed.\"},\"VaultPausedStateChanged(bool)\":{\"notice\":\"The Vault's pause status has changed.\"},\"VaultQueriesDisabled()\":{\"notice\":\"`disableQuery` has been called on the Vault, disabling query functionality.\"},\"VaultQueriesEnabled()\":{\"notice\":\"`enableQuery` has been called on the Vault, enabling query functionality.\"},\"Wrap(address,uint256,uint256,bytes32)\":{\"notice\":\"A wrap operation has occurred.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":\"IVaultEvents\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultExplorer.sol":{"IVaultExplorer":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"tokenAllowance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"areBuffersPaused","outputs":[{"internalType":"bool","name":"buffersPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"tokenBalance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"swapParams","type":"tuple"}],"name":"computeDynamicSwapFeePercentage","outputs":[{"internalType":"uint256","name":"dynamicSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"enableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getAddLiquidityCalledFlag","outputs":[{"internalType":"bool","name":"liquidityAdded","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getAggregateFeePercentages","outputs":[{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateSwapFeeAmount","outputs":[{"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateYieldFeeAmount","outputs":[{"internalType":"uint256","name":"yieldFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"address","name":"authorizer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getBptRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferAsset","outputs":[{"internalType":"address","name":"underlyingToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferBalance","outputs":[{"internalType":"uint256","name":"underlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"wrappedBalanceRaw","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"bufferMinimumTotalSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"liquidityOwner","type":"address"}],"name":"getBufferOwnerShares","outputs":[{"internalType":"uint256","name":"ownerShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodDuration","outputs":[{"internalType":"uint32","name":"bufferPeriodDuration","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodEndTime","outputs":[{"internalType":"uint32","name":"bufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferTotalShares","outputs":[{"internalType":"uint256","name":"bufferShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getCurrentLiveBalances","outputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getERC4626BufferAsset","outputs":[{"internalType":"address","name":"underlyingToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getHooksConfig","outputs":[{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaximumPoolTokens","outputs":[{"internalType":"uint256","name":"maxTokens","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumPoolTokens","outputs":[{"internalType":"uint256","name":"minTokens","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumTradeAmount","outputs":[{"internalType":"uint256","name":"minimumTradeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumWrapAmount","outputs":[{"internalType":"uint256","name":"minimumWrapAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonzeroDeltaCount","outputs":[{"internalType":"uint256","name":"nonzeroDeltaCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPauseWindowEndTime","outputs":[{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolConfig","outputs":[{"components":[{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"},{"internalType":"uint40","name":"tokenDecimalDiffs","type":"uint40"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"isPoolRegistered","type":"bool"},{"internalType":"bool","name":"isPoolInitialized","type":"bool"},{"internalType":"bool","name":"isPoolPaused","type":"bool"},{"internalType":"bool","name":"isPoolInRecoveryMode","type":"bool"}],"internalType":"struct PoolConfig","name":"poolConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolData","outputs":[{"components":[{"internalType":"PoolConfigBits","name":"poolConfigBits","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"},{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"}],"internalType":"struct PoolData","name":"poolData","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPoolMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"poolMinimumTotalSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolPausedState","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"},{"internalType":"uint32","name":"poolPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"poolBufferPeriodEndTime","type":"uint32"},{"internalType":"address","name":"pauseManager","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolRoleAccounts","outputs":[{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getPoolTokenCountAndIndexOfToken","outputs":[{"internalType":"uint256","name":"tokenCount","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenInfo","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"lastBalancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenRates","outputs":[{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeeController","outputs":[{"internalType":"address","name":"protocolFeeController","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getReservesOf","outputs":[{"internalType":"uint256","name":"reserveAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getStaticSwapFeePercentage","outputs":[{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getTokenDelta","outputs":[{"internalType":"int256","name":"tokenDelta","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVault","outputs":[{"internalType":"address","name":"vault","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultAdmin","outputs":[{"internalType":"address","name":"vaultAdmin","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultExtension","outputs":[{"internalType":"address","name":"vaultExtension","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultPausedState","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"},{"internalType":"uint32","name":"vaultPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"vaultBufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"isERC4626BufferInitialized","outputs":[{"internalType":"bool","name":"isBufferInitialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInRecoveryMode","outputs":[{"internalType":"bool","name":"inRecoveryMode","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInitialized","outputs":[{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolPaused","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"registered","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabled","outputs":[{"internalType":"bool","name":"queryDisabled","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabledPermanently","outputs":[{"internalType":"bool","name":"queryDisabledPermanently","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isUnlocked","outputs":[{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isVaultPaused","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"tokenTotalSupply","type":"uint256"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address,address)":"927da105","areBuffersPaused()":"55cba7fe","balanceOf(address,address)":"f7888aec","collectAggregateFees(address)":"8f4ab9ca","computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))":"4d472bdd","enableRecoveryMode(address)":"dc3f574e","getAddLiquidityCalledFlag(address)":"ace9b89b","getAggregateFeePercentages(address)":"295f0540","getAggregateSwapFeeAmount(address,address)":"85e0b999","getAggregateYieldFeeAmount(address,address)":"00fdfa13","getAuthorizer()":"aaabadc5","getBptRate(address)":"4f037ee7","getBufferAsset(address)":"0387587d","getBufferBalance(address)":"4021fe0f","getBufferMinimumTotalSupply()":"26a8a991","getBufferOwnerShares(address,address)":"9385e39a","getBufferPeriodDuration()":"20c1fb7a","getBufferPeriodEndTime()":"cd51c12f","getBufferTotalShares(address)":"f2784e07","getCurrentLiveBalances(address)":"535cfd8a","getERC4626BufferAsset(address)":"4afbaf5a","getHooksConfig(address)":"ce8630d4","getMaximumPoolTokens()":"2e42f4d5","getMinimumPoolTokens()":"a8175b27","getMinimumTradeAmount()":"e2cb0ba0","getMinimumWrapAmount()":"53956aa2","getNonzeroDeltaCount()":"db817187","getPauseWindowEndTime()":"8a8d123a","getPoolConfig(address)":"f29486a1","getPoolData(address)":"13d21cdf","getPoolMinimumTotalSupply()":"d0965a6b","getPoolPausedState(address)":"15e32046","getPoolRoleAccounts(address)":"e9ddeb26","getPoolTokenCountAndIndexOfToken(address,address)":"c9c1661b","getPoolTokenInfo(address)":"67e0e076","getPoolTokenRates(address)":"7e361bde","getPoolTokens(address)":"ca4f2803","getProtocolFeeController()":"85f2dbd4","getReservesOf(address)":"96787092","getStaticSwapFeePercentage(address)":"b45090f9","getTokenDelta(address)":"9e825ff5","getVault()":"8d928af8","getVaultAdmin()":"1ba0ae45","getVaultExtension()":"b9a8effa","getVaultPausedState()":"85c8c015","isERC4626BufferInitialized(address)":"6844846b","isPoolInRecoveryMode(address)":"be7d628a","isPoolInitialized(address)":"532cec7c","isPoolPaused(address)":"6c9bc732","isPoolRegistered(address)":"c673bdaf","isQueryDisabled()":"b4aef0ab","isQueryDisabledPermanently()":"13ef8a5d","isUnlocked()":"8380edb7","isVaultPaused()":"098401f5","totalSupply(address)":"e4dc2aa4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areBuffersPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"buffersPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"}],\"name\":\"computeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynamicSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAddLiquidityCalledFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"liquidityAdded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAggregateFeePercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateSwapFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateYieldFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBptRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityOwner\",\"type\":\"address\"}],\"name\":\"getBufferOwnerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ownerShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getCurrentLiveBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getERC4626BufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getHooksConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTradeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumWrapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumWrapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonzeroDeltaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonzeroDeltaCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseWindowEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"tokenDecimalDiffs\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPoolRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInRecoveryMode\",\"type\":\"bool\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"poolConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"PoolConfigBits\",\"name\":\"poolConfigBits\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"poolPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"poolBufferPeriodEndTime\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolRoleAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenCountAndIndexOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastBalancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolFeeController\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStaticSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"tokenDelta\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultAdmin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultExtension\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vaultPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vaultBufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"isERC4626BufferInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBufferInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inRecoveryMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabledPermanently\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabledPermanently\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Since the Vault is split across three contracts using the Proxy pattern, there is not much on the Vault contract itself that can be called directly, especially since it is designed to primarily use a single entrypoint for liquidity operations, invoked through a Router. This is unhelpful for off-chain processes (e.g., Etherscan). The proxy contracts (`VaultExtension` and `VaultAdmin`) can only be delegate-called through the main Vault, so although the functions are visible off-chain, they cannot be called from Etherscan. The `VaultExplorer` performs the delegate calls, in order to expose the entire Vault interface in a user-friendly manner. It exposes all the \\\"getters,\\\" plus permissionless write operations (e.g., fee collection).\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\",\"token\":\"Address of the token\"},\"returns\":{\"tokenAllowance\":\"Amount of tokens the spender is allowed to spend\"}},\"areBuffersPaused()\":{\"details\":\"When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true) will revert. This operation is reversible. The implementation is in `VaultAdmin`.\",\"returns\":{\"buffersPaused\":\"True if the Vault buffers are paused\"}},\"balanceOf(address,address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"account\":\"Address of the account\",\"token\":\"Address of the token\"},\"returns\":{\"tokenBalance\":\"Token balance of the account\"}},\"collectAggregateFees(address)\":{\"details\":\"This function is called on the Vault's ProtocolFeeController, and fees are sent to that contract. The implementation is in `VaultAdmin`.\",\"params\":{\"pool\":\"The pool on which all aggregate fees should be collected\"}},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"details\":\"Reverts if the hook doesn't return the success flag set to `true`. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The pool\",\"swapParams\":\"The swap parameters used to compute the fee\"},\"returns\":{\"dynamicSwapFeePercentage\":\"The dynamic swap fee percentage\"}},\"enableRecoveryMode(address)\":{\"details\":\"Recovery Mode enables a safe proportional withdrawal path, with no external calls. Note that attempts to call this during normal operations will revert. It is only permissionless when paused. The implementation is in `VaultAdmin`.\",\"params\":{\"pool\":\"Address of the pool to check\"}},\"getAddLiquidityCalledFlag(address)\":{\"details\":\"Taxing removing liquidity proportionally whenever liquidity was added in the same transaction adds an extra layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional is the only standard way to exit a position without fees, and this flag is used to enable fees when the operation might be an attempted exploit. It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse than a simple swap for every pool type. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"liquidityAdded\":\"True if liquidity has been added to this pool in the current transaction\"}},\"getAggregateFeePercentages(address)\":{\"details\":\"These are determined by the current protocol and pool creator fees, set in the `ProtocolFeeController`. These data are accessible as part of the `PoolConfig` (accessible through `getPoolConfig`), and also through the `IPoolInfo` on the pool itself. Standard Balancer pools implement this interface, but custom pools are not required to. We add this as a convenience function with the same interface, but it will fetch from the data from the Vault (via `VaultExtension`) to ensure it is always supported.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"aggregateSwapFeePercentage\":\"The aggregate percentage fee applied to swaps\",\"aggregateYieldFeePercentage\":\"The aggregate percentage fee applied to yield\"}},\"getAggregateSwapFeeAmount(address,address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"swapFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAggregateYieldFeeAmount(address,address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"yieldFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAuthorizer()\":{\"details\":\"The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can be changed through a permissioned call. The implementation is in `VaultExtension`.\",\"returns\":{\"authorizer\":\"Address of the authorizer contract\"}},\"getBptRate(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"rate\":\"BPT rate\"}},\"getBufferAsset(address)\":{\"details\":\"The asset can never change after buffer initialization. The implementation would be in `VaultAdmin` when called directly from the Vault address, but this implementation calls the equivalent (but slightly cheaper) `getERC4626BufferAsset` function in `VaultExtension`.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingToken\":\"Address of the underlying token registered for the wrapper; `address(0)` if the buffer has not been initialized.\"}},\"getBufferBalance(address)\":{\"details\":\"The implementation is in `VaultAdmin`.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingBalanceRaw\":\"Amount of underlying tokens deposited into the buffer, in native token decimals\",\"wrappedBalanceRaw\":\"Amount of wrapped tokens deposited into the buffer, in native token decimals\"}},\"getBufferMinimumTotalSupply()\":{\"details\":\"This prevents buffers from being completely drained. When the buffer is initialized, this minimum number of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal to the Vault, as buffers are not tokenized. The implementation is in `VaultAdmin`.\",\"returns\":{\"bufferMinimumTotalSupply\":\"The minimum total supply a buffer can have after initialization\"}},\"getBufferOwnerShares(address,address)\":{\"details\":\"The \\\"liquidity owner\\\" is the user who deposited assets in the buffer. The implementation is in `VaultAdmin`.\",\"params\":{\"liquidityOwner\":\"Address of the user that owns liquidity in the wrapped token's buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"ownerShares\":\"Amount of shares allocated to the liquidity owner, in native underlying token decimals\"}},\"getBufferPeriodDuration()\":{\"details\":\"This value is immutable. It represents the period during which, if paused, the Vault will remain paused. This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer timestamps are 32 bits. The implementation is in `VaultAdmin`.\",\"returns\":{\"bufferPeriodDuration\":\"The length of the buffer period in seconds\"}},\"getBufferPeriodEndTime()\":{\"details\":\"This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer timestamps are 32 bits. The implementation is in `VaultAdmin`.\",\"returns\":{\"bufferPeriodEndTime\":\"The timestamp after which the Vault remains permanently unpaused\"}},\"getBufferTotalShares(address)\":{\"details\":\"The implementation is in `VaultAdmin`.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"bufferShares\":\"Amount of supply shares of the buffer, in native underlying token decimals\"}},\"getCurrentLiveBalances(address)\":{\"details\":\"These are 18-decimal fixed point values. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesLiveScaled18\":\" Token balances after paying yield fees, applying decimal scaling and rates\"}},\"getERC4626BufferAsset(address)\":{\"details\":\"The asset can never change after buffer initialization. The implementation is in `VaultExtension`. Note that there is a `getBufferAsset` function in `VaultAdmin` that does the exact same thing. Even though it's technically redundant, we've included it here in case some users are already using that interface. In the Vault Explorer, both functions call `getERC4626BufferAsset`, as the implementation in `VaultExtension` needs one fewer hop than that in `VaultAdmin`, so it will use slightly less gas.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingToken\":\"Address of the underlying token registered for the wrapper; `address(0)` if the buffer has not been initialized.\"}},\"getHooksConfig(address)\":{\"details\":\"The `HooksConfig` contains flags indicating which pool hooks are implemented. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"hooksConfig\":\"The hooks configuration as a `HooksConfig` struct\"}},\"getMaximumPoolTokens()\":{\"details\":\"The implementation is in `VaultAdmin`.\",\"returns\":{\"maxTokens\":\"The maximum token count of a pool\"}},\"getMinimumPoolTokens()\":{\"details\":\"We expect the vast majority of pools to be 2-token. The implementation is in `VaultAdmin`.\",\"returns\":{\"minTokens\":\"The minimum token count of a pool\"}},\"getMinimumTradeAmount()\":{\"details\":\"This limit is applied to the 18-decimal \\\"upscaled\\\" amount in any operation (swap, add/remove liquidity). The implementation is in `VaultAdmin`.\",\"returns\":{\"minimumTradeAmount\":\"The minimum trade amount as an 18-decimal floating point number\"}},\"getMinimumWrapAmount()\":{\"details\":\"This limit is applied to native decimal values, and guards against rounding errors. The implementation is in `VaultAdmin`.\",\"returns\":{\"minimumWrapAmount\":\"The minimum wrap amount\"}},\"getNonzeroDeltaCount()\":{\"details\":\"For an operation to settle, this count must be zero. The implementation is in `VaultExtension`.\",\"returns\":{\"nonzeroDeltaCount\":\"The current value of `_nonzeroDeltaCount`\"}},\"getPauseWindowEndTime()\":{\"details\":\"This value is immutable, and represents the timestamp after which the Vault can no longer be paused by governance. Balancer timestamps are 32 bits. The implementation is in `VaultAdmin`.\",\"returns\":{\"pauseWindowEndTime\":\"The timestamp when the Vault's pause window ends\"}},\"getPoolConfig(address)\":{\"details\":\"The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"poolConfig\":\"The pool configuration as a `PoolConfig` struct\"}},\"getPoolData(address)\":{\"details\":\"This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"poolData\":\"The `PoolData` result\"}},\"getPoolMinimumTotalSupply()\":{\"details\":\"This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals. The implementation is in `VaultAdmin`.\",\"returns\":{\"poolMinimumTotalSupply\":\"The minimum total supply a pool can have after initialization\"}},\"getPoolPausedState(address)\":{\"details\":\"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period. Balancer timestamps are 32 bits. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The pool whose data is requested\"},\"returns\":{\"pauseManager\":\"The pause manager, or the zero address\",\"poolBufferPeriodEndTime\":\"The timestamp after which the Pool unpauses itself (if paused)\",\"poolPauseWindowEndTime\":\"The timestamp of the end of the Pool's pause window\",\"poolPaused\":\"True if the Pool is paused\"}},\"getPoolRoleAccounts(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The address of the pool whose roles are being queried\"},\"returns\":{\"roleAccounts\":\"A struct containing the role accounts for the pool (or 0 if unassigned)\"}},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"details\":\"Reverts if the pool is not registered, or if the token does not belong to the pool. The implementation is in `Vault`.\",\"params\":{\"pool\":\"Address of the pool\",\"token\":\"Address of the token\"},\"returns\":{\"index\":\"Index corresponding to the given token in the pool's token list\",\"tokenCount\":\"Number of tokens in the pool\"}},\"getPoolTokenInfo(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesRaw\":\"Raw balances, sorted in token registration order\",\"lastBalancesLiveScaled18\":\"Last saved live balances, sorted in token registration order\",\"tokenInfo\":\"Token info, sorted in token registration order\",\"tokens\":\"The pool tokens, sorted in registration order\"}},\"getPoolTokenRates(address)\":{\"details\":\"This function performs external calls if tokens are yield-bearing. All returned arrays are in token registration order. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"decimalScalingFactors\":\"Token decimal scaling factors\",\"tokenRates\":\"Token rates for yield-bearing tokens, or FP(1) for standard tokens\"}},\"getPoolTokens(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"tokens\":\"List of tokens in the pool\"}},\"getProtocolFeeController()\":{\"details\":\"The implementation is in `VaultExtension`. Note that the ProtocolFeeController is upgradeable in the Vault, so this address could change over time.\",\"returns\":{\"protocolFeeController\":\"Address of the ProtocolFeeController\"}},\"getReservesOf(address)\":{\"details\":\"The `reserveAmount` should always be equal to or less than the Vault's balance of the token. The implementation is in `VaultExtension`.\",\"params\":{\"token\":\"The token for which to retrieve the reserve\"},\"returns\":{\"reserveAmount\":\"The amount of reserves for the given token\"}},\"getStaticSwapFeePercentage(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The address of the pool whose static swap fee percentage is being queried\"},\"returns\":{\"swapFeePercentage\":\"The current static swap fee percentage for the specified pool\"}},\"getTokenDelta(address)\":{\"details\":\"This function allows reading values from `_tokenDeltas`. A non-zero delta typically occurs only during an operation, and indicates a debt or credit amount in that token. The implementation is in `VaultExtension`.\",\"params\":{\"token\":\"The token for which the delta is being fetched\"},\"returns\":{\"tokenDelta\":\"The delta of the specified token\"}},\"getVault()\":{\"details\":\"The main Vault contains the entrypoint and main liquidity operation implementations. There are redundant `vault()` functions defined in `VaultExtension` and `VaultAdmin`. Rather than call those, it is cheaper to simply return the address stored in this contract.\",\"returns\":{\"vault\":\"The address of the main Vault contract\"}},\"getVaultAdmin()\":{\"details\":\"The VaultAdmin contract is mostly used for permissioned calls. The getter function implementation is in `VaultExtension`.\",\"returns\":{\"vaultAdmin\":\"The address of the Vault admin\"}},\"getVaultExtension()\":{\"details\":\"The VaultExtension handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and liquidity operations. The implementation is in `Vault`.\",\"returns\":{\"vaultExtension\":\"Address of the VaultExtension\"}},\"getVaultPausedState()\":{\"details\":\"Balancer timestamps are 32 bits. The implementation is in `VaultAdmin`.\",\"returns\":{\"vaultBufferPeriodEndTime\":\"The timestamp of the end of the Vault's buffer period\",\"vaultPauseWindowEndTime\":\"The timestamp of the end of the Vault's pause window\",\"vaultPaused\":\"True if the Vault is paused\"}},\"isERC4626BufferInitialized(address)\":{\"details\":\"An initialized buffer will have an asset registered in the Vault. The implementation is in `VaultExtension`.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"isBufferInitialized\":\"True if the ERC4626 buffer is initialized\"}},\"isPoolInRecoveryMode(address)\":{\"details\":\"Recovery Mode enables a safe proportional withdrawal path, with no external calls. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"inRecoveryMode\":\"True if the pool is in Recovery Mode, false otherwise\"}},\"isPoolInitialized(address)\":{\"details\":\"An initialized pool can be considered registered as well. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"initialized\":\"True if the pool is initialized, false otherwise\"}},\"isPoolPaused(address)\":{\"details\":\"If a pool is paused, all non-Recovery Mode state-changing operations will revert. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The pool to be checked\"},\"returns\":{\"poolPaused\":\"True if the pool is paused\"}},\"isPoolRegistered(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"registered\":\"True if the pool is registered, false otherwise\"}},\"isQueryDisabled()\":{\"details\":\"Governance can call `enableQuery` to restore query functionality, unless `disableQueryPermanently` was called. The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable queries in the unlikely event that EVM changes violate its assumptions (e.g., in a new L2 network). The implementation is in `VaultExtension`.\",\"returns\":{\"queryDisabled\":\"If true, then queries are reversibly disabled\"}},\"isQueryDisabledPermanently()\":{\"details\":\"This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled. The implementation is in `VaultExtension`.\",\"returns\":{\"queryDisabledPermanently\":\"If true, then queries are permanently disabled\"}},\"isUnlocked()\":{\"details\":\"The Vault must be unlocked to perform state-changing liquidity operations. The implementation is in `VaultExtension`.\",\"returns\":{\"unlocked\":\"True if the Vault is unlocked, false otherwise\"}},\"isVaultPaused()\":{\"details\":\"If the Vault is paused, all non-Recovery Mode state-changing operations will revert. The implementation is in `VaultAdmin`.\",\"returns\":{\"vaultPaused\":\"True if the Vault is paused\"}},\"totalSupply(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"token\":\"The token address\"},\"returns\":{\"tokenTotalSupply\":\"Total supply of the token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"Gets the allowance of a spender for a given ERC20 token and owner.\"},\"areBuffersPaused()\":{\"notice\":\"Indicates whether the Vault buffers are paused.\"},\"balanceOf(address,address)\":{\"notice\":\"Gets the balance of an account for a given ERC20 token.\"},\"collectAggregateFees(address)\":{\"notice\":\"Collects accumulated aggregate swap and yield fees for the specified pool.\"},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"notice\":\"Query the current dynamic swap fee of a pool, given a set of swap parameters.\"},\"enableRecoveryMode(address)\":{\"notice\":\"Enable Recovery Mode for the given pool, when either the pool or the Vault is paused.\"},\"getAddLiquidityCalledFlag(address)\":{\"notice\":\"This flag is used to detect \\\"round trip\\\" transactions (adding and removing liquidity in the same pool).\"},\"getAggregateFeePercentages(address)\":{\"notice\":\"Gets the aggregate swap and yield fee percentages for a pool.\"},\"getAggregateSwapFeeAmount(address,address)\":{\"notice\":\"Returns the total aggregate swap fees in `token` collected by the pool.\"},\"getAggregateYieldFeeAmount(address,address)\":{\"notice\":\"Returns the total aggregate yield fees in `token` collected by the pool.\"},\"getAuthorizer()\":{\"notice\":\"Returns the Authorizer address.\"},\"getBptRate(address)\":{\"notice\":\"Gets the current bpt rate of a pool, by dividing the current invariant by the total supply of BPT.\"},\"getBufferAsset(address)\":{\"notice\":\"Returns the asset registered for a given wrapped token.\"},\"getBufferBalance(address)\":{\"notice\":\"Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\"},\"getBufferMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\"},\"getBufferOwnerShares(address,address)\":{\"notice\":\"Returns the shares (internal buffer BPT) of a liquidity owner.\"},\"getBufferPeriodDuration()\":{\"notice\":\"Returns the Vault's buffer period duration.\"},\"getBufferPeriodEndTime()\":{\"notice\":\"Returns the Vault's buffer period end time.\"},\"getBufferTotalShares(address)\":{\"notice\":\"Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\"},\"getCurrentLiveBalances(address)\":{\"notice\":\"Gets current live balances of a given pool, in token registration order.\"},\"getERC4626BufferAsset(address)\":{\"notice\":\"Returns the asset registered for a given wrapped token.\"},\"getHooksConfig(address)\":{\"notice\":\"Gets the hooks configuration parameters of a pool.\"},\"getMaximumPoolTokens()\":{\"notice\":\"Get the maximum number of tokens in a pool.\"},\"getMinimumPoolTokens()\":{\"notice\":\"Get the minimum number of tokens in a pool.\"},\"getMinimumTradeAmount()\":{\"notice\":\"Get the minimum trade amount in a pool operation.\"},\"getMinimumWrapAmount()\":{\"notice\":\"Get the minimum amount that can be wrapped by an ERC4626 token buffer by the Vault.\"},\"getNonzeroDeltaCount()\":{\"notice\":\"Returns the count of non-zero deltas.\"},\"getPauseWindowEndTime()\":{\"notice\":\"Returns the Vault's pause window end time.\"},\"getPoolConfig(address)\":{\"notice\":\"Gets the configuration parameters of a pool.\"},\"getPoolData(address)\":{\"notice\":\"Returns comprehensive pool data for the given pool.\"},\"getPoolMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of pool tokens (BPT) for an initialized pool.\"},\"getPoolPausedState(address)\":{\"notice\":\"Returns the paused status, and end times of the Pool's pause window and buffer period.\"},\"getPoolRoleAccounts(address)\":{\"notice\":\"Fetches the role accounts for a given pool (pause manager, swap manager, pool creator).\"},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"notice\":\"Gets the index of a token in a given pool.\"},\"getPoolTokenInfo(address)\":{\"notice\":\"Gets the raw data for a pool: tokens, raw balances, and scaling factors.\"},\"getPoolTokenRates(address)\":{\"notice\":\"Gets pool token rates.\"},\"getPoolTokens(address)\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"getProtocolFeeController()\":{\"notice\":\"Returns the current Protocol Fee Controller address.\"},\"getReservesOf(address)\":{\"notice\":\"Retrieves the reserve (i.e., sum of all pool balances) of a given token.\"},\"getStaticSwapFeePercentage(address)\":{\"notice\":\"Fetches the static swap fee percentage for a given pool.\"},\"getTokenDelta(address)\":{\"notice\":\"Retrieves the token delta for a specific token.\"},\"getVault()\":{\"notice\":\"Returns the main Vault address.\"},\"getVaultAdmin()\":{\"notice\":\"Returns the VaultAdmin contract address.\"},\"getVaultExtension()\":{\"notice\":\"Returns the VaultExtension contract address.\"},\"getVaultPausedState()\":{\"notice\":\"Returns the paused status, and end times of the Vault's pause window and buffer period.\"},\"isERC4626BufferInitialized(address)\":{\"notice\":\"Checks whether the wrapped token has an initialized buffer in the Vault.\"},\"isPoolInRecoveryMode(address)\":{\"notice\":\"Checks whether a pool is in Recovery Mode.\"},\"isPoolInitialized(address)\":{\"notice\":\"Checks whether a pool is initialized.\"},\"isPoolPaused(address)\":{\"notice\":\"Indicates whether a pool is paused.\"},\"isPoolRegistered(address)\":{\"notice\":\"Checks whether a pool is registered.\"},\"isQueryDisabled()\":{\"notice\":\"Checks whether queries are reversibly disabled on the Vault.\"},\"isQueryDisabledPermanently()\":{\"notice\":\"Returns true if queries are disabled permanently; false if they are enabled.\"},\"isUnlocked()\":{\"notice\":\"Returns whether the Vault is unlocked (i.e., executing an operation).\"},\"isVaultPaused()\":{\"notice\":\"Indicates whether the Vault is paused.\"},\"totalSupply(address)\":{\"notice\":\"Gets the total supply of a given ERC20 token.\"}},\"notice\":\"Helper contract that exposes the full permissionless Vault interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExplorer.sol\":\"IVaultExplorer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExplorer.sol\":{\"keccak256\":\"0x6cec9bf25aa6118662cb7da10e87cb039c2b9dbe9345fbe198de18c7c53b922b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://755afc3d1676bf4936fa5589996a00f93f3f8960d103ceacb7b992e5e634f4e4\",\"dweb:/ipfs/QmXwh5VWdJvxU5Wr1QSDKTrCSHahLjvKBjfCuuWKo9WMJM\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol":{"IVaultExtension":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"tokenAllowance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"tokenBalance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"swapParams","type":"tuple"}],"name":"computeDynamicSwapFeePercentage","outputs":[{"internalType":"uint256","name":"dynamicSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"eventKey","type":"bytes32"},{"internalType":"bytes","name":"eventData","type":"bytes"}],"name":"emitAuxiliaryEvent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getAddLiquidityCalledFlag","outputs":[{"internalType":"bool","name":"liquidityAdded","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateSwapFeeAmount","outputs":[{"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateYieldFeeAmount","outputs":[{"internalType":"uint256","name":"yieldFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"authorizer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getBptRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getCurrentLiveBalances","outputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getERC4626BufferAsset","outputs":[{"internalType":"address","name":"asset","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getHooksConfig","outputs":[{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonzeroDeltaCount","outputs":[{"internalType":"uint256","name":"nonzeroDeltaCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolConfig","outputs":[{"components":[{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"},{"internalType":"uint40","name":"tokenDecimalDiffs","type":"uint40"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"isPoolRegistered","type":"bool"},{"internalType":"bool","name":"isPoolInitialized","type":"bool"},{"internalType":"bool","name":"isPoolPaused","type":"bool"},{"internalType":"bool","name":"isPoolInRecoveryMode","type":"bool"}],"internalType":"struct PoolConfig","name":"poolConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolData","outputs":[{"components":[{"internalType":"PoolConfigBits","name":"poolConfigBits","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"},{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"}],"internalType":"struct PoolData","name":"poolData","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolPausedState","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"},{"internalType":"uint32","name":"poolPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"poolBufferPeriodEndTime","type":"uint32"},{"internalType":"address","name":"pauseManager","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolRoleAccounts","outputs":[{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenInfo","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"lastBalancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenRates","outputs":[{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeeController","outputs":[{"internalType":"contract IProtocolFeeController","name":"protocolFeeController","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getReservesOf","outputs":[{"internalType":"uint256","name":"reserveAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getStaticSwapFeePercentage","outputs":[{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getTokenDelta","outputs":[{"internalType":"int256","name":"tokenDelta","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultAdmin","outputs":[{"internalType":"address","name":"vaultAdmin","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"initialize","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"isERC4626BufferInitialized","outputs":[{"internalType":"bool","name":"isBufferInitialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInRecoveryMode","outputs":[{"internalType":"bool","name":"inRecoveryMode","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInitialized","outputs":[{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolPaused","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"registered","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabled","outputs":[{"internalType":"bool","name":"queryDisabled","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabledPermanently","outputs":[{"internalType":"bool","name":"queryDisabledPermanently","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isUnlocked","outputs":[{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"quote","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"quoteAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"protocolFeeExempt","type":"bool"},{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"},{"internalType":"address","name":"poolHooksContract","type":"address"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"registerPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"}],"name":"removeLiquidityRecovery","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"tokenTotalSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address,address)":"927da105","approve(address,address,uint256)":"e1f21c67","balanceOf(address,address)":"f7888aec","computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))":"4d472bdd","emitAuxiliaryEvent(bytes32,bytes)":"c8088247","getAddLiquidityCalledFlag(address)":"ace9b89b","getAggregateSwapFeeAmount(address,address)":"85e0b999","getAggregateYieldFeeAmount(address,address)":"00fdfa13","getAuthorizer()":"aaabadc5","getBptRate(address)":"4f037ee7","getCurrentLiveBalances(address)":"535cfd8a","getERC4626BufferAsset(address)":"4afbaf5a","getHooksConfig(address)":"ce8630d4","getNonzeroDeltaCount()":"db817187","getPoolConfig(address)":"f29486a1","getPoolData(address)":"13d21cdf","getPoolPausedState(address)":"15e32046","getPoolRoleAccounts(address)":"e9ddeb26","getPoolTokenInfo(address)":"67e0e076","getPoolTokenRates(address)":"7e361bde","getPoolTokens(address)":"ca4f2803","getProtocolFeeController()":"85f2dbd4","getReservesOf(address)":"96787092","getStaticSwapFeePercentage(address)":"b45090f9","getTokenDelta(address)":"9e825ff5","getVaultAdmin()":"1ba0ae45","initialize(address,address,address[],uint256[],uint256,bytes)":"ba8a2be0","isERC4626BufferInitialized(address)":"6844846b","isPoolInRecoveryMode(address)":"be7d628a","isPoolInitialized(address)":"532cec7c","isPoolPaused(address)":"6c9bc732","isPoolRegistered(address)":"c673bdaf","isQueryDisabled()":"b4aef0ab","isQueryDisabledPermanently()":"13ef8a5d","isUnlocked()":"8380edb7","quote(bytes)":"edfa3568","quoteAndRevert(bytes)":"757d64b3","registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))":"eeec802f","removeLiquidityRecovery(address,address,uint256,uint256[])":"a07d6040","totalSupply(address)":"e4dc2aa4","vault()":"fbfa77cf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"}],\"name\":\"computeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynamicSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"emitAuxiliaryEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAddLiquidityCalledFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"liquidityAdded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateSwapFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateYieldFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"authorizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBptRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getCurrentLiveBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getERC4626BufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getHooksConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonzeroDeltaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonzeroDeltaCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"tokenDecimalDiffs\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPoolRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInRecoveryMode\",\"type\":\"bool\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"poolConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"PoolConfigBits\",\"name\":\"poolConfigBits\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"poolPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"poolBufferPeriodEndTime\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolRoleAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastBalancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeController\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"protocolFeeController\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStaticSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"tokenDelta\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultAdmin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"isERC4626BufferInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBufferInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inRecoveryMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabledPermanently\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabledPermanently\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quoteAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"poolHooksContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"removeLiquidityRecovery\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"`VaultExtension` handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and liquidity operations.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"params\":{\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\",\"token\":\"Address of the token\"},\"returns\":{\"tokenAllowance\":\"Amount of tokens the spender is allowed to spend\"}},\"approve(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to approve\",\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\"},\"returns\":{\"success\":\"True if successful, false otherwise\"}},\"balanceOf(address,address)\":{\"params\":{\"account\":\"Address of the account\",\"token\":\"Address of the token\"},\"returns\":{\"tokenBalance\":\"Token balance of the account\"}},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"details\":\"Reverts if the hook doesn't return the success flag set to `true`.\",\"params\":{\"pool\":\"The pool\",\"swapParams\":\"The swap parameters used to compute the fee\"},\"returns\":{\"dynamicSwapFeePercentage\":\"The dynamic swap fee percentage\"}},\"emitAuxiliaryEvent(bytes32,bytes)\":{\"params\":{\"eventData\":\"Encoded event data\",\"eventKey\":\"Event key\"}},\"getAddLiquidityCalledFlag(address)\":{\"details\":\"Taxing remove liquidity proportional whenever liquidity was added in the same `unlock` call adds an extra layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional is the only standard way to exit a position without fees, and this flag is used to enable fees in that case. It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse than a simple swap for every pool type.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"liquidityAdded\":\"True if liquidity has been added to this pool in the current transaction Note that there is no `sessionId` argument; it always returns the value for the current (i.e., latest) session.\"}},\"getAggregateSwapFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"swapFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAggregateYieldFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"yieldFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAuthorizer()\":{\"details\":\"The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can be changed through a permissioned call.\",\"returns\":{\"authorizer\":\"Address of the authorizer contract\"}},\"getBptRate(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"rate\":\"BPT rate\"}},\"getCurrentLiveBalances(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesLiveScaled18\":\"Token balances after paying yield fees, applying decimal scaling and rates\"}},\"getERC4626BufferAsset(address)\":{\"details\":\"To avoid malicious wrappers (e.g., that might potentially change their asset after deployment), routers should never call `wrapper.asset()` directly, at least without checking it against the asset registered with the Vault on initialization.\",\"params\":{\"wrappedToken\":\"The wrapped token specifying the buffer\"},\"returns\":{\"asset\":\"The underlying asset of the wrapped token\"}},\"getHooksConfig(address)\":{\"details\":\"The `HooksConfig` contains flags indicating which pool hooks are implemented.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"hooksConfig\":\"The hooks configuration as a `HooksConfig` struct\"}},\"getNonzeroDeltaCount()\":{\"returns\":{\"nonzeroDeltaCount\":\"The current value of `_nonzeroDeltaCount`\"}},\"getPoolConfig(address)\":{\"details\":\"The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"poolConfig\":\"The pool configuration as a `PoolConfig` struct\"}},\"getPoolData(address)\":{\"details\":\"This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\",\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"poolData\":\"The `PoolData` result\"}},\"getPoolPausedState(address)\":{\"details\":\"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period. Balancer timestamps are 32 bits.\",\"params\":{\"pool\":\"The pool whose data is requested\"},\"returns\":{\"pauseManager\":\"The pause manager, or the zero address\",\"poolBufferPeriodEndTime\":\"The timestamp after which the Pool unpauses itself (if paused)\",\"poolPauseWindowEndTime\":\"The timestamp of the end of the Pool's pause window\",\"poolPaused\":\"True if the Pool is paused\"}},\"getPoolRoleAccounts(address)\":{\"params\":{\"pool\":\"The address of the pool whose roles are being queried\"},\"returns\":{\"roleAccounts\":\"A struct containing the role accounts for the pool (or 0 if unassigned)\"}},\"getPoolTokenInfo(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesRaw\":\"Current native decimal balances of the pool tokens, sorted in token registration order\",\"lastBalancesLiveScaled18\":\"Last saved live balances, sorted in token registration order\",\"tokenInfo\":\"Token info structs (type, rate provider, yield flag), sorted in token registration order\",\"tokens\":\"The pool tokens, sorted in registration order\"}},\"getPoolTokenRates(address)\":{\"details\":\"This function performs external calls if tokens are yield-bearing. All returned arrays are in token registration order.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"decimalScalingFactors\":\"Conversion factor used to adjust for token decimals for uniform precision in calculations. FP(1) for 18-decimal tokens\",\"tokenRates\":\"18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\"}},\"getPoolTokens(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"tokens\":\"List of tokens in the pool\"}},\"getProtocolFeeController()\":{\"returns\":{\"protocolFeeController\":\"Address of the ProtocolFeeController\"}},\"getReservesOf(address)\":{\"params\":{\"token\":\"The token for which to retrieve the reserve\"},\"returns\":{\"reserveAmount\":\"The amount of reserves for the given token\"}},\"getStaticSwapFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool whose static swap fee percentage is being queried\"},\"returns\":{\"swapFeePercentage\":\"The current static swap fee percentage for the specified pool\"}},\"getTokenDelta(address)\":{\"details\":\"This function allows reading the value from the `_tokenDeltas` mapping.\",\"params\":{\"token\":\"The token for which the delta is being fetched\"},\"returns\":{\"tokenDelta\":\"The delta of the specified token\"}},\"getVaultAdmin()\":{\"details\":\"The VaultAdmin contract mostly implements permissioned functions.\",\"returns\":{\"vaultAdmin\":\"The address of the Vault admin\"}},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Address of the pool to initialize\",\"to\":\"Address that will receive the output BPT\",\"tokens\":\"Tokens used to seed the pool (must match the registered tokens)\",\"userData\":\"Additional (optional) data required for adding initial liquidity\"},\"returns\":{\"bptAmountOut\":\"Output pool token amount\"}},\"isERC4626BufferInitialized(address)\":{\"details\":\"An initialized buffer should have an asset registered in the Vault.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"isBufferInitialized\":\"True if the ERC4626 buffer is initialized\"}},\"isPoolInRecoveryMode(address)\":{\"details\":\"Recovery Mode enables a safe proportional withdrawal path, with no external calls.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"inRecoveryMode\":\"True if the pool is in Recovery Mode, false otherwise\"}},\"isPoolInitialized(address)\":{\"details\":\"An initialized pool can be considered registered as well.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"initialized\":\"True if the pool is initialized, false otherwise\"}},\"isPoolPaused(address)\":{\"details\":\"If a pool is paused, all non-Recovery Mode state-changing operations will revert.\",\"params\":{\"pool\":\"The pool to be checked\"},\"returns\":{\"poolPaused\":\"True if the pool is paused\"}},\"isPoolRegistered(address)\":{\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"registered\":\"True if the pool is registered, false otherwise\"}},\"isQueryDisabled()\":{\"details\":\"If true, queries might either be disabled temporarily or permanently.\",\"returns\":{\"queryDisabled\":\"True if query functionality is reversibly disabled\"}},\"isQueryDisabledPermanently()\":{\"details\":\"This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\",\"returns\":{\"queryDisabledPermanently\":\"True if query functionality is permanently disabled\"}},\"isUnlocked()\":{\"details\":\"The Vault must be unlocked to perform state-changing liquidity operations.\",\"returns\":{\"unlocked\":\"True if the Vault is unlocked, false otherwise\"}},\"quote(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `onlyWhenUnlocked`. `transient` modifier ensuring balances changes within the Vault are settled.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}},\"quoteAndRevert(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `onlyWhenUnlocked`. `transient` modifier ensuring balances changes within the Vault are settled. This call always reverts, returning the result in the revert reason.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"}},\"registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))\":{\"details\":\"A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused pool will automatically unpause. Balancer timestamps are 32 bits. A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to the Vault. If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the authorizer.\",\"params\":{\"liquidityManagement\":\"Liquidity management flags with implemented methods\",\"pauseWindowEndTime\":\"The timestamp after which it is no longer possible to pause the pool\",\"pool\":\"The address of the pool being registered\",\"poolHooksContract\":\"Contract that implements the hooks for the pool\",\"protocolFeeExempt\":\"If true, the pool's initial aggregate fees will be set to 0\",\"roleAccounts\":\"Addresses the Vault will allow to change certain pool settings\",\"swapFeePercentage\":\"The initial static swap fee percentage of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"removeLiquidityRecovery(address,address,uint256,uint256[])\":{\"params\":{\"exactBptAmountIn\":\"Input pool token amount\",\"from\":\"Address of user to burn pool tokens from\",\"minAmountsOut\":\"Minimum amounts of tokens to be received, sorted in token registration order\",\"pool\":\"Address of the pool\"},\"returns\":{\"amountsOut\":\"Actual calculated amounts of output tokens, sorted in token registration order\"}},\"totalSupply(address)\":{\"params\":{\"token\":\"The token address\"},\"returns\":{\"tokenTotalSupply\":\"Total supply of the token\"}},\"vault()\":{\"details\":\"The main Vault contains the entrypoint and main liquidity operation implementations.\",\"returns\":{\"_0\":\"vault The address of the main Vault\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"Gets the allowance of a spender for a given ERC20 token and owner.\"},\"approve(address,address,uint256)\":{\"notice\":\"Approves a spender to spend pool tokens on behalf of sender.\"},\"balanceOf(address,address)\":{\"notice\":\"Gets the balance of an account for a given ERC20 token.\"},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"notice\":\"Query the current dynamic swap fee percentage of a pool, given a set of swap parameters.\"},\"emitAuxiliaryEvent(bytes32,bytes)\":{\"notice\":\"Pools can use this event to emit event data from the Vault.\"},\"getAddLiquidityCalledFlag(address)\":{\"notice\":\"This flag is used to detect and tax \\\"round-trip\\\" interactions (adding and removing liquidity in the same pool).\"},\"getAggregateSwapFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\"},\"getAggregateYieldFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\"},\"getAuthorizer()\":{\"notice\":\"Returns the Authorizer address.\"},\"getBptRate(address)\":{\"notice\":\"The current rate of a pool token (BPT) = invariant / totalSupply.\"},\"getCurrentLiveBalances(address)\":{\"notice\":\"Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in registration order.\"},\"getERC4626BufferAsset(address)\":{\"notice\":\"Gets the registered asset for a given buffer.\"},\"getHooksConfig(address)\":{\"notice\":\"Gets the hooks configuration parameters of a pool.\"},\"getNonzeroDeltaCount()\":{\"notice\":\"Returns the count of non-zero deltas.\"},\"getPoolConfig(address)\":{\"notice\":\"Gets the configuration parameters of a pool.\"},\"getPoolData(address)\":{\"notice\":\"Returns comprehensive pool data for the given pool.\"},\"getPoolPausedState(address)\":{\"notice\":\"Returns the paused status, and end times of the Pool's pause window and buffer period.\"},\"getPoolRoleAccounts(address)\":{\"notice\":\"Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\"},\"getPoolTokenInfo(address)\":{\"notice\":\"Gets the raw data for a pool: tokens, raw balances, scaling factors.\"},\"getPoolTokenRates(address)\":{\"notice\":\"Gets pool token rates.\"},\"getPoolTokens(address)\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"getProtocolFeeController()\":{\"notice\":\"Returns the Protocol Fee Controller address.\"},\"getReservesOf(address)\":{\"notice\":\"Retrieves the reserve (i.e., total Vault balance) of a given token.\"},\"getStaticSwapFeePercentage(address)\":{\"notice\":\"Fetches the static swap fee percentage for a given pool.\"},\"getTokenDelta(address)\":{\"notice\":\"Retrieves the token delta for a specific token.\"},\"getVaultAdmin()\":{\"notice\":\"Returns the VaultAdmin contract address.\"},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"notice\":\"Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\"},\"isERC4626BufferInitialized(address)\":{\"notice\":\"Checks if the wrapped token has an initialized buffer in the Vault.\"},\"isPoolInRecoveryMode(address)\":{\"notice\":\"Checks whether a pool is in Recovery Mode.\"},\"isPoolInitialized(address)\":{\"notice\":\"Checks whether a pool is initialized.\"},\"isPoolPaused(address)\":{\"notice\":\"Indicates whether a pool is paused.\"},\"isPoolRegistered(address)\":{\"notice\":\"Checks whether a pool is registered.\"},\"isQueryDisabled()\":{\"notice\":\"Returns true if queries are disabled on the Vault.\"},\"isQueryDisabledPermanently()\":{\"notice\":\"Returns true if queries are disabled permanently; false if they are enabled.\"},\"isUnlocked()\":{\"notice\":\"Returns whether the Vault is unlocked (i.e., executing an operation).\"},\"quote(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"quoteAndRevert(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))\":{\"notice\":\"Registers a pool, associating it with its factory and the tokens it manages.\"},\"removeLiquidityRecovery(address,address,uint256,uint256[])\":{\"notice\":\"Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out. The request is implemented by the Vault without any interaction with the pool, ensuring that it works the same for all pools, and cannot be disabled by a new pool type.\"},\"totalSupply(address)\":{\"notice\":\"Gets the total supply of a given ERC20 token.\"},\"vault()\":{\"notice\":\"Returns the main Vault address.\"}},\"notice\":\"Interface for functions defined on the `VaultExtension` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":\"IVaultExtension\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol":{"IVaultMain":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct AddLiquidityParams","name":"params","type":"tuple"}],"name":"addLiquidity","outputs":[{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"enum WrappingDirection","name":"direction","type":"uint8"},{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"}],"internalType":"struct BufferWrapOrUnwrapParams","name":"params","type":"tuple"}],"name":"erc4626BufferWrapOrUnwrap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getPoolTokenCountAndIndexOfToken","outputs":[{"internalType":"uint256","name":"tokenCount","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultExtension","outputs":[{"internalType":"address","name":"vaultExtension","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct RemoveLiquidityParams","name":"params","type":"tuple"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"sendTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amountHint","type":"uint256"}],"name":"settle","outputs":[{"internalType":"uint256","name":"credit","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct VaultSwapParams","name":"vaultSwapParams","type":"tuple"}],"name":"swap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"unlock","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addLiquidity((address,address,uint256[],uint256,uint8,bytes))":"4af29ec4","erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))":"43583be5","getPoolTokenCountAndIndexOfToken(address,address)":"c9c1661b","getVaultExtension()":"b9a8effa","removeLiquidity((address,address,uint256,uint256[],uint8,bytes))":"21457897","sendTo(address,address,uint256)":"ae639329","settle(address,uint256)":"15afd409","swap((uint8,address,address,address,uint256,uint256,bytes))":"2bfb780c","transfer(address,address,uint256)":"beabacc8","transferFrom(address,address,address,uint256)":"15dacbea","unlock(bytes)":"48c89491"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"enum WrappingDirection\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"}],\"internalType\":\"struct BufferWrapOrUnwrapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"erc4626BufferWrapOrUnwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenCountAndIndexOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultExtension\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountHint\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct VaultSwapParams\",\"name\":\"vaultSwapParams\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These are generally \\\"critical path\\\" functions (swap, add/remove liquidity) that are in the main contract for technical or performance reasons.\",\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"details\":\"Caution should be exercised when adding liquidity because the Vault has the capability to transfer tokens from any user, given that it holds all allowances.\",\"params\":{\"params\":\"Parameters for the add liquidity (see above for struct definition)\"},\"returns\":{\"amountsIn\":\"Actual amounts of input tokens\",\"bptAmountOut\":\"Output pool token amount\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))\":{\"details\":\"All parameters are given in raw token decimal encoding. It requires the buffer to be initialized, and uses the internal wrapped token buffer when it has enough liquidity to avoid external calls.\",\"params\":{\"params\":\"Parameters for the wrap/unwrap operation (see struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"details\":\"Reverts if the pool is not registered, or if the token does not belong to the pool.\",\"params\":{\"pool\":\"Address of the pool\",\"token\":\"Address of the token\"},\"returns\":{\"index\":\"Index corresponding to the given token in the pool's token list\",\"tokenCount\":\"Number of tokens in the pool\"}},\"getVaultExtension()\":{\"details\":\"Function is in the main Vault contract. The VaultExtension handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls.\",\"returns\":{\"vaultExtension\":\"Address of the VaultExtension\"}},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"details\":\"Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user. Untrusted routers require prior approval from the user. This is the only function allowed to call _queryModeBalanceIncrease (and only in a query context).\",\"params\":{\"params\":\"Parameters for the remove liquidity (see above for struct definition)\"},\"returns\":{\"amountsOut\":\"Actual amounts of output tokens\",\"bptAmountIn\":\"Actual amount of BPT burned\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"sendTo(address,address,uint256)\":{\"details\":\"There is no inverse operation for this function. Transfer funds to the Vault and call `settle` to cancel debts.\",\"params\":{\"amount\":\"Amount of tokens to send\",\"to\":\"Recipient address\",\"token\":\"Address of the token\"}},\"settle(address,uint256)\":{\"details\":\"Protects the caller against leftover dust in the Vault for the token being settled. The caller should know in advance how many tokens were paid to the Vault, so it can provide it as a hint to discard any excess in the Vault balance. If the given hint is equal to or higher than the difference in reserves, the difference in reserves is given as credit to the caller. If it's higher, the caller sent fewer tokens than expected, so settlement would fail. If the given hint is lower than the difference in reserves, the hint is given as credit to the caller. In this case, the excess would be absorbed by the Vault (and reflected correctly in the reserves), but would not affect settlement. The credit supplied by the Vault can be calculated as `min(reserveDifference, amountHint)`, where the reserve difference equals current balance of the token minus existing reserves of the token when the function is called.\",\"params\":{\"amountHint\":\"Amount paid as reported by the caller\",\"token\":\"Address of the token\"},\"returns\":{\"credit\":\"Credit received in return of the payment\"}},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"details\":\"All parameters are given in raw token decimal encoding.\",\"params\":{\"vaultSwapParams\":\"Parameters for the swap (see above for struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"transfer(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"owner\":\"Address of the owner\",\"to\":\"Address of the recipient\"},\"returns\":{\"_0\":\"success True if successful, false otherwise\"}},\"transferFrom(address,address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"from\":\"Address of the sender\",\"spender\":\"Address allowed to perform the transfer\",\"to\":\"Address of the recipient\"},\"returns\":{\"success\":\"True if successful, false otherwise\"}},\"unlock(bytes)\":{\"details\":\"Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`, meaning all balances for the caller have to be settled at the end.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"notice\":\"Adds liquidity to a pool.\"},\"erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))\":{\"notice\":\"Wraps/unwraps tokens based on the parameters provided.\"},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"notice\":\"Gets the index of a token in a given pool.\"},\"getVaultExtension()\":{\"notice\":\"Returns the VaultExtension contract address.\"},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"notice\":\"Removes liquidity from a pool.\"},\"sendTo(address,address,uint256)\":{\"notice\":\"Sends tokens to a recipient.\"},\"settle(address,uint256)\":{\"notice\":\"Settles deltas for a token; must be successful for the current lock to be released.\"},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"notice\":\"Swaps tokens based on provided parameters.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers pool token from owner to a recipient.\"},\"transferFrom(address,address,address,uint256)\":{\"notice\":\"Transfers pool token from a sender to a recipient using an allowance.\"},\"unlock(bytes)\":{\"notice\":\"Creates a context for a sequence of operations (i.e., \\\"unlocks\\\" the Vault).\"}},\"notice\":\"Interface for functions defined on the main Vault contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":\"IVaultMain\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@openzeppelin/contracts/interfaces/IERC4626.sol":{"IERC4626":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asset","outputs":[{"internalType":"address","name":"assetTokenAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"convertToAssets","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"convertToShares","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"maxDeposit","outputs":[{"internalType":"uint256","name":"maxAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"maxMint","outputs":[{"internalType":"uint256","name":"maxShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxRedeem","outputs":[{"internalType":"uint256","name":"maxShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxWithdraw","outputs":[{"internalType":"uint256","name":"maxAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewDeposit","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewMint","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewRedeem","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewWithdraw","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"totalManagedAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","asset()":"38d52e0f","balanceOf(address)":"70a08231","convertToAssets(uint256)":"07a2d13a","convertToShares(uint256)":"c6e6f592","decimals()":"313ce567","deposit(uint256,address)":"6e553f65","maxDeposit(address)":"402d267d","maxMint(address)":"c63d75b6","maxRedeem(address)":"d905777e","maxWithdraw(address)":"ce96cb77","mint(uint256,address)":"94bf804d","name()":"06fdde03","previewDeposit(uint256)":"ef8b30f7","previewMint(uint256)":"b3d7f6b9","previewRedeem(uint256)":"4cdad506","previewWithdraw(uint256)":"0a28a477","redeem(uint256,address,address)":"ba087652","symbol()":"95d89b41","totalAssets()":"01e1d114","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","withdraw(uint256,address,address)":"b460af94"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"asset()\":{\"details\":\"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"deposit(uint256,address)\":{\"details\":\"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"maxDeposit(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert.\"},\"maxMint(address)\":{\"details\":\"Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert.\"},\"maxRedeem(address)\":{\"details\":\"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert.\"},\"maxWithdraw(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert.\"},\"mint(uint256,address)\":{\"details\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"redeem(uint256,address,address)\":{\"details\":\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalAssets()\":{\"details\":\"Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"withdraw(uint256,address,address)\":{\"details\":\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":\"IERC4626\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"contracts/VaultExplorer.sol":{"VaultExplorer":{"abi":[{"inputs":[{"internalType":"contract IVault","name":"vault","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"tokenAllowance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"areBuffersPaused","outputs":[{"internalType":"bool","name":"buffersPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"tokenBalance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"swapParams","type":"tuple"}],"name":"computeDynamicSwapFeePercentage","outputs":[{"internalType":"uint256","name":"dynamicSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"enableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getAddLiquidityCalledFlag","outputs":[{"internalType":"bool","name":"liquidityAdded","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getAggregateFeePercentages","outputs":[{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateSwapFeeAmount","outputs":[{"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateYieldFeeAmount","outputs":[{"internalType":"uint256","name":"yieldFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"address","name":"authorizer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getBptRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferAsset","outputs":[{"internalType":"address","name":"underlyingToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferBalance","outputs":[{"internalType":"uint256","name":"underlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"wrappedBalanceRaw","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"bufferMinimumTotalSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"liquidityOwner","type":"address"}],"name":"getBufferOwnerShares","outputs":[{"internalType":"uint256","name":"ownerShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodDuration","outputs":[{"internalType":"uint32","name":"bufferPeriodDuration","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodEndTime","outputs":[{"internalType":"uint32","name":"bufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferTotalShares","outputs":[{"internalType":"uint256","name":"bufferShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getCurrentLiveBalances","outputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getERC4626BufferAsset","outputs":[{"internalType":"address","name":"underlyingToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getHooksConfig","outputs":[{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaximumPoolTokens","outputs":[{"internalType":"uint256","name":"maxTokens","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumPoolTokens","outputs":[{"internalType":"uint256","name":"minTokens","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumTradeAmount","outputs":[{"internalType":"uint256","name":"minimumTradeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumWrapAmount","outputs":[{"internalType":"uint256","name":"minimumWrapAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonzeroDeltaCount","outputs":[{"internalType":"uint256","name":"nonzeroDeltaCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPauseWindowEndTime","outputs":[{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolConfig","outputs":[{"components":[{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"},{"internalType":"uint40","name":"tokenDecimalDiffs","type":"uint40"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"isPoolRegistered","type":"bool"},{"internalType":"bool","name":"isPoolInitialized","type":"bool"},{"internalType":"bool","name":"isPoolPaused","type":"bool"},{"internalType":"bool","name":"isPoolInRecoveryMode","type":"bool"}],"internalType":"struct PoolConfig","name":"poolConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolData","outputs":[{"components":[{"internalType":"PoolConfigBits","name":"poolConfigBits","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"},{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"}],"internalType":"struct PoolData","name":"poolData","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPoolMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"poolMinimumTotalSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolPausedState","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"},{"internalType":"uint32","name":"poolPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"poolBufferPeriodEndTime","type":"uint32"},{"internalType":"address","name":"pauseManager","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolRoleAccounts","outputs":[{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getPoolTokenCountAndIndexOfToken","outputs":[{"internalType":"uint256","name":"tokenCount","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenInfo","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"lastBalancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenRates","outputs":[{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeeController","outputs":[{"internalType":"address","name":"protocolFeeController","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getReservesOf","outputs":[{"internalType":"uint256","name":"reserveAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getStaticSwapFeePercentage","outputs":[{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getTokenDelta","outputs":[{"internalType":"int256","name":"tokenDelta","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVault","outputs":[{"internalType":"address","name":"vault","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultAdmin","outputs":[{"internalType":"address","name":"vaultAdmin","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultExtension","outputs":[{"internalType":"address","name":"vaultExtension","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultPausedState","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"},{"internalType":"uint32","name":"vaultPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"vaultBufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"isERC4626BufferInitialized","outputs":[{"internalType":"bool","name":"isBufferInitialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInRecoveryMode","outputs":[{"internalType":"bool","name":"inRecoveryMode","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInitialized","outputs":[{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolPaused","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"registered","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabled","outputs":[{"internalType":"bool","name":"queryDisabled","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabledPermanently","outputs":[{"internalType":"bool","name":"queryDisabledPermanently","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isUnlocked","outputs":[{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isVaultPaused","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"tokenTotalSupply","type":"uint256"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a0346101d657601f6137ce38819003918201601f19168301916001600160401b038311848410176101da578084926020946040528339810103126101d657516001600160a01b03811681036101d6576080526040516135df90816101ef82396080518181816102e50152818161042d015281816105840152818161065c01528181610778015281816107f7015281816108570152818161092c015281816109ad01528181610a9701528181610c8001528181610d5901528181610e6501528181610f3c0152818161100c0152818161108f015281816111540152818161122a015281816112bd0152818161133f01528181611414015281816114a90152818161156f01528181611612015281816116cb015281816117560152818161183c015281816118a60152818161196601528181611a3e01528181611abd01528181611baf01528181611c7e01528181611d9801528181611e6201528181611ef501528181612062015281816120e30152818161217501528181612258015281816122ec015281816125f2015281816126c60152818161276c01528181612802015281816128af0152818161292e015281816129b701528181612af101528181612bfc01528181612cc401528181612f28015261304e0152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c908162fdfa1314612f63575080630387587d14612668578063098401f514612ee257806313d21cdf14612c3757806313ef8a5d14612bb657806315e3204614612a995780631ba0ae451461296d57806320c1fb7a146128e857806326a8a99114612869578063295f0540146127a55780632e42f4d5146127265780634021fe0f1461266d5780634afbaf5a146126685780634d472bdd146123515780634f037ee714612292578063532cec7c146121fe578063535cfd8a1461211c57806353956aa21461209d57806355cba7fe1461201c57806367e0e07614611e9c5780636844846b14611e085780636c9bc73214611d3e5780637e361bde14611c255780638380edb714611b6957806385c8c01514611a7757806385e0b999146119c357806385f2dbd4146119205780638a8d123a146118605780638d928af81461181d5780638f4ab9ca14611704578063927da1051461164b5780639385e39a146115a657806396787092146115135780639e825ff51461144d578063a8175b27146113cc578063aaabadc5146112f8578063ace9b89b14611261578063b45090f9146111ce578063b4aef0ab1461110c578063b9a8effa14611047578063be7d628a14610fb0578063c673bdaf14610ee0578063c9c1661b14610de9578063ca4f280314610cfe578063cd51c12f14610c38578063ce8630d4146109e6578063d0965a6b14610965578063db817187146108e4578063dc3f574e14610830578063e2cb0ba0146107af578063e4dc2aa41461071c578063e9ddeb26146105e9578063f2784e0714610528578063f29486a1146103655763f7888aec1461027a575f80fd5b3461036257604060031936011261036257610293612fca565b90602061029e612fe0565b9260446001600160a01b0391828060405197889586947ff7888aec0000000000000000000000000000000000000000000000000000000086521660048501521660248301527f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f575b602090604051908152f35b506020813d60201161034e575b816103396020938361322b565b8101031261034a5760209051610314565b5f80fd5b3d915061032c565b604051903d90823e3d90fd5b80fd5b50346103625760208060031936011261052457610380612fca565b916040519061038e826131f2565b60405161039a8161320f565b8181528184820152816040820152816060820152825280838301528060408301528060608301528060808301528060a08301528060c08301528060e0830152610100818184015281610120809401526001600160a01b0394856040519687927ff29486a10000000000000000000000000000000000000000000000000000000084521660048301528160246101a09889937f0000000000000000000000000000000000000000000000000000000000000000165afa92831561035657926104f5575b506040519360608351805115158752828101511515838801526040810151151560408801520151151560608601528201516080850152604082015160a0850152606082015160c085015264ffffffffff60808301511660e085015263ffffffff60a0830151168185015260c082015115158385015260e08201511515610140850152810151151561016084015201511515610180820152f35b610516919250853d871161051d575b61050e818361322b565b810190613473565b905f61045c565b503d610504565b5080fd5b5034610362576020908160031936011261036257602482610547612fca565b6040517ff2784e070000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa91821561035657916105bc575b50604051908152f35b90508181813d83116105e2575b6105d3818361322b565b8101031261034a57515f6105b3565b503d6105c9565b50346103625760208060031936011261052457610604612fca565b8260408051610612816131d6565b828152828582015201526001600160a01b039081604051917fe9ddeb26000000000000000000000000000000000000000000000000000000008352166004820152606081602481857f0000000000000000000000000000000000000000000000000000000000000000165afa9384156103565780946106b0575b50506040606093815193838251168552838183015116908501520151166040820152f35b9093506060843d606011610714575b816106cc6060938361322b565b810103126103625750604060609361070a828051926106ea846131d6565b6106f3816132c0565b84526107008782016132c0565b87850152016132c0565b828201529361068c565b3d91506106bf565b503461036257602090816003193601126103625760248261073b612fca565b6040517fe4dc2aa40000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa91821561035657916105bc5750604051908152f35b5034610362578060031936011261036257604051907fe2cb0ba00000000000000000000000000000000000000000000000000000000082526020826004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f57602090604051908152f35b5034610362576020600319360112610362578061084b612fca565b6001600160a01b0390817f00000000000000000000000000000000000000000000000000000000000000001691823b156108df57602484928360405195869485937fdc3f574e0000000000000000000000000000000000000000000000000000000085521660048401525af180156108d4576108c45750f35b6108cd906131a5565b6103625780f35b6040513d84823e3d90fd5b505050fd5b5034610362578060031936011261036257604051907fdb8171870000000000000000000000000000000000000000000000000000000082526020826004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f57602090604051908152f35b5034610362578060031936011261036257604051907fd0965a6b0000000000000000000000000000000000000000000000000000000082526020826004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f57602090604051908152f35b50346103625760208060031936011261052457610a01612fca565b9160405190610a0f826131b9565b80825280838301528060408301528060608301528060808301528060a08301528060c08301528060e0830152610100908082840152610120818185015281610140809501526001600160a01b039283604051977fce8630d4000000000000000000000000000000000000000000000000000000008952166004880152610160968781602481887f0000000000000000000000000000000000000000000000000000000000000000165afa938415610356579081879594939294610b48575b5050604051968351151588528084015115159088015260408301511515604088015260608301511515606088015260808301511515608088015260a0830151151560a088015260c0830151151560c088015260e0830151151560e0880152808301511515908701528082015115159086015201511690820152f35b9194509192508782813d8311610c31575b610b63818361322b565b81010312610362575090849291610c258460405192610b81846131b9565b610b8a816132d4565b8452610b978a82016132d4565b8a850152610ba7604082016132d4565b6040850152610bb8606082016132d4565b6060850152610bc9608082016132d4565b6080850152610bda60a082016132d4565b60a0850152610beb60c082016132d4565b60c0850152610bfc60e082016132d4565b60e0850152610c0c8682016132d4565b86850152610c1b8582016132d4565b85850152016132c0565b84820152915f80610acd565b503d610b59565b5034610362578060031936011261036257604051907fcd51c12f0000000000000000000000000000000000000000000000000000000082526020826004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356578091610cc1575b60208263ffffffff60405191168152f35b90506020823d602011610cf6575b81610cdc6020938361322b565b810103126103625750610cf0602091613462565b5f610cb0565b3d9150610ccf565b50346103625760206003193601126103625780602491610d1c612fca565b6040517fca4f28030000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015293849182907f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356578091610da3575b60405160208082528190610d9f90820185613284565b0390f35b90503d8082843e610db4818461322b565b8201916020818403126105245780519167ffffffffffffffff8311610362575091610de391610d9f93016132e1565b5f610d89565b503461036257604060031936011261036257610e59906040610e09612fca565b610e11612fe0565b82517fc9c1661b0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529116602482015292839081906044820190565b03816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610ed3576040928291610ea4575b5082519182526020820152f35b9050610ec69150823d8411610ecc575b610ebe818361322b565b810190613574565b5f610e97565b503d610eb4565b50604051903d90823e3d90fd5b5034610362576020908160031936011261036257602482610eff612fca565b6040517fc673bdaf0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa918215610356578092610f78575b50506040519015158152f35b9091508282813d8311610fa9575b610f90818361322b565b810103126103625750610fa2906132d4565b5f80610f6c565b503d610f86565b5034610362576020908160031936011261036257602482610fcf612fca565b6040517fbe7d628a0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa918215610356578092610f785750506040519015158152f35b50346103625780600319360112610362576040517fb9a8effa000000000000000000000000000000000000000000000000000000008152906001600160a01b036020836004817f000000000000000000000000000000000000000000000000000000000000000085165afa9182156103565780926110cd575b6020838360405191168152f35b9091506020833d602011611104575b816110e96020938361322b565b8101031261036257506110fd6020926132c0565b905f6110c0565b3d91506110dc565b5034610362578060031936011261036257604051907fb4aef0ab0000000000000000000000000000000000000000000000000000000082526020826004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356578091611191575b6020826040519015158152f35b90506020823d6020116111c6575b816111ac6020938361322b565b8101031261036257506111c06020916132d4565b5f611184565b3d915061119f565b50346103625760209081600319360112610362576024826111ed612fca565b6040517fb45090f90000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa91821561035657916105bc5750604051908152f35b5034610362576020908160031936011261036257602482611280612fca565b6040517face9b89b0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa918215610356578092610f785750506040519015158152f35b50346103625780600319360112610362576040517faaabadc50000000000000000000000000000000000000000000000000000000081526001600160a01b036020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa9182156113c157839261137c576020838360405191168152f35b9091506020813d6020116113b9575b816113986020938361322b565b810103126113b5575181811681036113b55760209250905f6110c0565b8280fd5b3d915061138b565b6040513d85823e3d90fd5b5034610362578060031936011261036257604051907fa8175b270000000000000000000000000000000000000000000000000000000082526020826004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f57602090604051908152f35b503461036257602090816003193601126103625760248261146c612fca565b6040517f9e825ff50000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9182156103565780926114e3575b5050604051908152f35b9091508282813d831161150c575b6114fb818361322b565b810103126103625750515f806114d9565b503d6114f1565b5034610362576020908160031936011261036257602482611532612fca565b6040517f967870920000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa91821561035657916105bc5750604051908152f35b5034610362576040600319360112610362576115c0612fca565b9060206115cb612fe0565b9260446001600160a01b0391828060405197889586947f9385e39a0000000000000000000000000000000000000000000000000000000086521660048501521660248301527f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f57602090604051908152f35b503461036257606060031936011261036257611665612fca565b9061166e612fe0565b916044356001600160a01b039081811680910361034a57602092826064928160405198899687957f927da10500000000000000000000000000000000000000000000000000000000875216600486015216602484015260448301527f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f57602090604051908152f35b503461034a57602060031936011261034a5761171e612fca565b6001600160a01b03906040517f85f2dbd4000000000000000000000000000000000000000000000000000000008152602081600481867f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e35783915f916117ee575b501691823b1561034a5760245f928360405195869485937f8f4ab9ca0000000000000000000000000000000000000000000000000000000085521660048401525af180156117e3576117d7575080f35b6117e191506131a5565b005b6040513d5f823e3d90fd5b611810915060203d602011611816575b611808818361322b565b81019061358a565b5f611787565b503d6117fe565b3461034a575f60031936011261034a5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461034a575f60031936011261034a576040517f8a8d123a0000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f906118e6575b60209063ffffffff60405191168152f35b506020813d602011611918575b816119006020938361322b565b8101031261034a57611913602091613462565b6118d5565b3d91506118f3565b3461034a575f60031936011261034a576040517f85f2dbd40000000000000000000000000000000000000000000000000000000081526001600160a01b036020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa9081156117e3576020925f926119a4575b5060405191168152f35b6119bc919250833d851161181657611808818361322b565b908361199a565b3461034a57604060031936011261034a57611a3260206119e1612fca565b6119e9612fe0565b6040517f85e0b9990000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529116602482015291829081906044820190565b03816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f9061031f57602090604051908152f35b3461034a575f60031936011261034a576040517f85c8c0150000000000000000000000000000000000000000000000000000000081526060816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f905f905f90611b11575b60609350604051921515835263ffffffff8092166020840152166040820152f35b5050506060813d606011611b61575b81611b2d6060938361322b565b8101031261034a5780611b416060926132d4565b611b596040611b5260208501613462565b9301613462565b909190611af0565b3d9150611b20565b3461034a575f60031936011261034a576040517f8380edb70000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f90611beb575b6020906040519015158152f35b506020813d602011611c1d575b81611c056020938361322b565b8101031261034a57611c186020916132d4565b611bde565b3d9150611bf8565b3461034a57602060031936011261034a5760245f611c41612fca565b6040517f7e361bde0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f905f92611cda575b50610d9f611ccc92604051938493604085526040850190613156565b908382036020850152613156565b9150503d805f833e611cec818361322b565b81019060408183031261034a57805167ffffffffffffffff9081811161034a5783611d18918401613401565b91602081015191821161034a57611ccc93610d9f92611d379201613401565b9250611cb0565b3461034a5760208060031936011261034a57602481611d5b612fca565b6040517f6c9bc7320000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f91611dd3575b506040519015158152f35b90508181813d8311611e01575b611dea818361322b565b8101031261034a57611dfb906132d4565b82611dc8565b503d611de0565b3461034a5760208060031936011261034a57602481611e25612fca565b6040517f6844846b0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f91611dd357506040519015158152f35b3461034a57602060031936011261034a5760245f611eb8612fca565b6040517f67e0e0760000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f905f5f915f94611f78575b5092611f6a610d9f92611f5c611f4e96604051978897608089526080890190613284565b9087820360208901526130f5565b908582036040870152613156565b908382036060850152613156565b93505050503d805f833e611f8c818361322b565b810160808282031261034a5781519167ffffffffffffffff9283811161034a5782611fb89183016132e1565b602082015184811161034a5783611fd0918401613352565b92604083015185811161034a5781611fe9918501613401565b91606084015195861161034a57611f5c61200e611f6a93611f4e98610d9f9701613401565b919593919650509250611f2a565b3461034a575f60031936011261034a576040517f55cba7fe0000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f90611beb576020906040519015158152f35b3461034a575f60031936011261034a576040517f53956aa20000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f9061031f57602090604051908152f35b3461034a57602060031936011261034a5760245f612138612fca565b6040517f535cfd8a0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f906121bc575b610d9f90604051918291602083526020830190613156565b503d805f833e6121cc818361322b565b81019060208183031261034a5780519167ffffffffffffffff831161034a57610d9f926121f99201613401565b6121a4565b3461034a5760208060031936011261034a5760248161221b612fca565b6040517f532cec7c0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f91611dd357506040519015158152f35b3461034a5760208060031936011261034a576024816122af612fca565b6040517f4f037ee70000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f916123245750604051908152f35b90508181813d831161234a575b61233b818361322b565b8101031261034a5751826105b3565b503d612331565b3461034a5760031960408136011261034a5761236b612fca565b60243567ffffffffffffffff9283821161034a5760e090823603011261034a576040519261239884613189565b8160040135600281101561034a57845260248201356020850152604482013581811161034a5782013660238201121561034a576004810135906123da8261326c565b916123e8604051938461322b565b8083526024602084019160051b8301019136831161034a57602401905b828210612658575050506040850152606482013560608501526084820135608085015260a48201356001600160a01b038116810361034a5760a085015260c48201359080821161034a5736602383850101121561034a57600482840101351161262b57604051926124a460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f600486880101350116018561322b565b82820160048101358086523691016024011161034a576020935f85600485878284986001600160a01b039a010135602483830101858801370101358301015260c086015260405194859384927f4d472bdd00000000000000000000000000000000000000000000000000000000845216600483015260406024830152805161252b816130be565b60448301528281015160648301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460c0612579604086015160e06084890152610124880190613156565b94606081015160a4880152608081015160c48801526001600160a01b0360a08201511660e488015201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc868603016101048701528051918291828752018786015e5f8682860101520116010301816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f9061031f57602090604051908152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8135815260209182019101612405565b612ff6565b3461034a57602060031936011261034a576024604061268a612fca565b81517f4021fe0f0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3576040915f915f91612707575082519182526020820152f35b90506127209150823d8411610ecc57610ebe818361322b565b83610e97565b3461034a575f60031936011261034a576040517f2e42f4d50000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f9061031f57602090604051908152f35b3461034a57602060031936011261034a576127be612fca565b6001600160a01b0390816040519283927ff29486a10000000000000000000000000000000000000000000000000000000084521660048301528160246101a09485937f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3576040925f9261284c575b505060608282015191015182519182526020820152f35b6128629250803d1061051d5761050e818361322b565b8280612835565b3461034a575f60031936011261034a576040517f26a8a9910000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f9061031f57602090604051908152f35b3461034a575f60031936011261034a576040517f20c1fb7a0000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f906118e65760209063ffffffff60405191168152f35b3461034a575f60031936011261034a576001600160a01b03604051907fb9a8effa0000000000000000000000000000000000000000000000000000000082526020918281600481857f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e357829184915f91612a62575b506004604051809581937f1ba0ae45000000000000000000000000000000000000000000000000000000008352165afa9182156117e3575f92612a32575060405191168152f35b9091508281813d8311612a5b575b612a4a818361322b565b8101031261034a576119bc906132c0565b503d612a40565b92505081813d8311612a92575b612a79818361322b565b8101031261034a5782612a8c83926132c0565b856129eb565b503d612a6f565b3461034a57602060031936011261034a57612ab2612fca565b6001600160a01b0380604051927f15e32046000000000000000000000000000000000000000000000000000000008452166004830152608082602481847f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f915f5f945f92612b4d575b50608094604051941515855263ffffffff8092166020860152166040840152166060820152f35b9350505091506080813d608011612bae575b81612b6c6080938361322b565b8101031261034a57608091612b80826132d4565b612b8c60208401613462565b92612ba56060612b9e60408401613462565b92016132c0565b91939094612b26565b3d9150612b5f565b3461034a575f60031936011261034a576040517f13ef8a5d0000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f90611beb576020906040519015158152f35b3461034a5760208060031936011261034a57612c51612fca565b60c0604051612c5f81613189565b5f81526060918183868194015282604082015282808201528260808201528260a082015201526001600160a01b039081604051937f13d21cdf0000000000000000000000000000000000000000000000000000000085521660048401525f83602481857f0000000000000000000000000000000000000000000000000000000000000000165afa9283156117e3575f93612de6575b50926040929192519384938285526101008501845184870152838501519360e0604088015284518092528061012088019501925f905b838210612dc9578880610d9f8a8a60c0612db7612da4612d908e612d7d6040880151967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe097888c830301848d01526130f5565b90870151868a83030160808b0152613156565b6080860151858983030160a08a0152613156565b60a0850151848883030184890152613156565b920151908483030160e0850152613156565b845181168752899850958201959382019360019190910190612d2a565b9092503d805f833e612df8818361322b565b8101848282031261034a57815167ffffffffffffffff9283821161034a57019060e08282031261034a5760405192612e2f84613189565b825184528683015181811161034a5782612e4a9185016132e1565b87850152604083015181811161034a5782612e66918501613352565b60408501528583015181811161034a5782612e82918501613401565b86850152608083015181811161034a5782612e9e918501613401565b608085015260a083015181811161034a5782612ebb918501613401565b60a085015260c083015190811161034a57612ed69201613401565b60c08201529184612cf4565b3461034a575f60031936011261034a576040517f098401f50000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f90611beb576020906040519015158152f35b3461034a57604060031936011261034a5760208180611a32612f83612fca565b612f8b612fe0565b7efdfa130000000000000000000000000000000000000000000000000000000084526001600160a01b0391821660048501521660248301526044820190565b600435906001600160a01b038216820361034a57565b602435906001600160a01b038216820361034a57565b3461034a5760208060031936011261034a57613010612fca565b6001600160a01b0380604051927f4afbaf5a0000000000000000000000000000000000000000000000000000000084521660048301528282602481847f0000000000000000000000000000000000000000000000000000000000000000165afa9182156117e3575f92613087575060405191168152f35b9091508281813d83116130b7575b61309f818361322b565b8101031261034a576130b0906132c0565b905f61199a565b503d613095565b600211156130c857565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b9081518082526020808093019301915f5b828110613114575050505090565b909192938260606001928751805161312b816130be565b8252808401516001600160a01b03168483015260409081015115159082015201950193929101613106565b9081518082526020808093019301915f5b828110613175575050505090565b835185529381019392810192600101613167565b60e0810190811067ffffffffffffffff82111761262b57604052565b67ffffffffffffffff811161262b57604052565b610160810190811067ffffffffffffffff82111761262b57604052565b6060810190811067ffffffffffffffff82111761262b57604052565b610140810190811067ffffffffffffffff82111761262b57604052565b6080810190811067ffffffffffffffff82111761262b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761262b57604052565b67ffffffffffffffff811161262b5760051b60200190565b9081518082526020808093019301915f5b8281106132a3575050505090565b83516001600160a01b031685529381019392810192600101613295565b51906001600160a01b038216820361034a57565b5190811515820361034a57565b9080601f8301121561034a578151906020916132fc8161326c565b9361330a604051958661322b565b81855260208086019260051b82010192831161034a57602001905b828210613333575050505090565b81516001600160a01b038116810361034a578152908301908301613325565b81601f8201121561034a57805190602061336b8361326c565b93604061337b604051968761322b565b848652828601918360608097028601019481861161034a578401925b8584106133a8575050505050505090565b868483031261034a578251906133bd826131d6565b8451600281101561034a57825285850151906001600160a01b038216820361034a57828792838b9501526133f28688016132d4565b86820152815201930192613397565b9080601f8301121561034a5781519060209161341c8161326c565b9361342a604051958661322b565b81855260208086019260051b82010192831161034a57602001905b828210613453575050505090565b81518152908301908301613445565b519063ffffffff8216820361034a57565b809103906101a0821261034a5760806040519261348f846131f2565b1261034a576040516134a08161320f565b6134a9826132d4565b81526134b7602083016132d4565b60208201526134c8604083016132d4565b60408201526134d9606083016132d4565b606082015282526080810151602083015260a0810151604083015260c0810151606083015260e081015164ffffffffff8116810361034a57608083015261356d6101806101009261352b848201613462565b60a08601526101209361353f8583016132d4565b60c087015261355161014083016132d4565b60e087015261356361016083016132d4565b90860152016132d4565b9082015290565b919082604091031261034a576020825192015190565b9081602091031261034a57516001600160a01b038116810361034a579056fea2646970667358221220a4ef6c33246ed815be6e6e4f48ee6c7f1d4dc2d2994dfd395e937950d089d6fc64736f6c634300081b0033","opcodes":"PUSH1 0xA0 CALLVALUE PUSH2 0x1D6 JUMPI PUSH1 0x1F PUSH2 0x37CE CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x1DA JUMPI DUP1 DUP5 SWAP3 PUSH1 0x20 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x1D6 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1D6 JUMPI PUSH1 0x80 MSTORE PUSH1 0x40 MLOAD PUSH2 0x35DF SWAP1 DUP2 PUSH2 0x1EF DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x2E5 ADD MSTORE DUP2 DUP2 PUSH2 0x42D ADD MSTORE DUP2 DUP2 PUSH2 0x584 ADD MSTORE DUP2 DUP2 PUSH2 0x65C ADD MSTORE DUP2 DUP2 PUSH2 0x778 ADD MSTORE DUP2 DUP2 PUSH2 0x7F7 ADD MSTORE DUP2 DUP2 PUSH2 0x857 ADD MSTORE DUP2 DUP2 PUSH2 0x92C ADD MSTORE DUP2 DUP2 PUSH2 0x9AD ADD MSTORE DUP2 DUP2 PUSH2 0xA97 ADD MSTORE DUP2 DUP2 PUSH2 0xC80 ADD MSTORE DUP2 DUP2 PUSH2 0xD59 ADD MSTORE DUP2 DUP2 PUSH2 0xE65 ADD MSTORE DUP2 DUP2 PUSH2 0xF3C ADD MSTORE DUP2 DUP2 PUSH2 0x100C ADD MSTORE DUP2 DUP2 PUSH2 0x108F ADD MSTORE DUP2 DUP2 PUSH2 0x1154 ADD MSTORE DUP2 DUP2 PUSH2 0x122A ADD MSTORE DUP2 DUP2 PUSH2 0x12BD ADD MSTORE DUP2 DUP2 PUSH2 0x133F ADD MSTORE DUP2 DUP2 PUSH2 0x1414 ADD MSTORE DUP2 DUP2 PUSH2 0x14A9 ADD MSTORE DUP2 DUP2 PUSH2 0x156F ADD MSTORE DUP2 DUP2 PUSH2 0x1612 ADD MSTORE DUP2 DUP2 PUSH2 0x16CB ADD MSTORE DUP2 DUP2 PUSH2 0x1756 ADD MSTORE DUP2 DUP2 PUSH2 0x183C ADD MSTORE DUP2 DUP2 PUSH2 0x18A6 ADD MSTORE DUP2 DUP2 PUSH2 0x1966 ADD MSTORE DUP2 DUP2 PUSH2 0x1A3E ADD MSTORE DUP2 DUP2 PUSH2 0x1ABD ADD MSTORE DUP2 DUP2 PUSH2 0x1BAF ADD MSTORE DUP2 DUP2 PUSH2 0x1C7E ADD MSTORE DUP2 DUP2 PUSH2 0x1D98 ADD MSTORE DUP2 DUP2 PUSH2 0x1E62 ADD MSTORE DUP2 DUP2 PUSH2 0x1EF5 ADD MSTORE DUP2 DUP2 PUSH2 0x2062 ADD MSTORE DUP2 DUP2 PUSH2 0x20E3 ADD MSTORE DUP2 DUP2 PUSH2 0x2175 ADD MSTORE DUP2 DUP2 PUSH2 0x2258 ADD MSTORE DUP2 DUP2 PUSH2 0x22EC ADD MSTORE DUP2 DUP2 PUSH2 0x25F2 ADD MSTORE DUP2 DUP2 PUSH2 0x26C6 ADD MSTORE DUP2 DUP2 PUSH2 0x276C ADD MSTORE DUP2 DUP2 PUSH2 0x2802 ADD MSTORE DUP2 DUP2 PUSH2 0x28AF ADD MSTORE DUP2 DUP2 PUSH2 0x292E ADD MSTORE DUP2 DUP2 PUSH2 0x29B7 ADD MSTORE DUP2 DUP2 PUSH2 0x2AF1 ADD MSTORE DUP2 DUP2 PUSH2 0x2BFC ADD MSTORE DUP2 DUP2 PUSH2 0x2CC4 ADD MSTORE DUP2 DUP2 PUSH2 0x2F28 ADD MSTORE PUSH2 0x304E ADD MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP1 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0xFDFA13 EQ PUSH2 0x2F63 JUMPI POP DUP1 PUSH4 0x387587D EQ PUSH2 0x2668 JUMPI DUP1 PUSH4 0x98401F5 EQ PUSH2 0x2EE2 JUMPI DUP1 PUSH4 0x13D21CDF EQ PUSH2 0x2C37 JUMPI DUP1 PUSH4 0x13EF8A5D EQ PUSH2 0x2BB6 JUMPI DUP1 PUSH4 0x15E32046 EQ PUSH2 0x2A99 JUMPI DUP1 PUSH4 0x1BA0AE45 EQ PUSH2 0x296D JUMPI DUP1 PUSH4 0x20C1FB7A EQ PUSH2 0x28E8 JUMPI DUP1 PUSH4 0x26A8A991 EQ PUSH2 0x2869 JUMPI DUP1 PUSH4 0x295F0540 EQ PUSH2 0x27A5 JUMPI DUP1 PUSH4 0x2E42F4D5 EQ PUSH2 0x2726 JUMPI DUP1 PUSH4 0x4021FE0F EQ PUSH2 0x266D JUMPI DUP1 PUSH4 0x4AFBAF5A EQ PUSH2 0x2668 JUMPI DUP1 PUSH4 0x4D472BDD EQ PUSH2 0x2351 JUMPI DUP1 PUSH4 0x4F037EE7 EQ PUSH2 0x2292 JUMPI DUP1 PUSH4 0x532CEC7C EQ PUSH2 0x21FE JUMPI DUP1 PUSH4 0x535CFD8A EQ PUSH2 0x211C JUMPI DUP1 PUSH4 0x53956AA2 EQ PUSH2 0x209D JUMPI DUP1 PUSH4 0x55CBA7FE EQ PUSH2 0x201C JUMPI DUP1 PUSH4 0x67E0E076 EQ PUSH2 0x1E9C JUMPI DUP1 PUSH4 0x6844846B EQ PUSH2 0x1E08 JUMPI DUP1 PUSH4 0x6C9BC732 EQ PUSH2 0x1D3E JUMPI DUP1 PUSH4 0x7E361BDE EQ PUSH2 0x1C25 JUMPI DUP1 PUSH4 0x8380EDB7 EQ PUSH2 0x1B69 JUMPI DUP1 PUSH4 0x85C8C015 EQ PUSH2 0x1A77 JUMPI DUP1 PUSH4 0x85E0B999 EQ PUSH2 0x19C3 JUMPI DUP1 PUSH4 0x85F2DBD4 EQ PUSH2 0x1920 JUMPI DUP1 PUSH4 0x8A8D123A EQ PUSH2 0x1860 JUMPI DUP1 PUSH4 0x8D928AF8 EQ PUSH2 0x181D JUMPI DUP1 PUSH4 0x8F4AB9CA EQ PUSH2 0x1704 JUMPI DUP1 PUSH4 0x927DA105 EQ PUSH2 0x164B JUMPI DUP1 PUSH4 0x9385E39A EQ PUSH2 0x15A6 JUMPI DUP1 PUSH4 0x96787092 EQ PUSH2 0x1513 JUMPI DUP1 PUSH4 0x9E825FF5 EQ PUSH2 0x144D JUMPI DUP1 PUSH4 0xA8175B27 EQ PUSH2 0x13CC JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0x12F8 JUMPI DUP1 PUSH4 0xACE9B89B EQ PUSH2 0x1261 JUMPI DUP1 PUSH4 0xB45090F9 EQ PUSH2 0x11CE JUMPI DUP1 PUSH4 0xB4AEF0AB EQ PUSH2 0x110C JUMPI DUP1 PUSH4 0xB9A8EFFA EQ PUSH2 0x1047 JUMPI DUP1 PUSH4 0xBE7D628A EQ PUSH2 0xFB0 JUMPI DUP1 PUSH4 0xC673BDAF EQ PUSH2 0xEE0 JUMPI DUP1 PUSH4 0xC9C1661B EQ PUSH2 0xDE9 JUMPI DUP1 PUSH4 0xCA4F2803 EQ PUSH2 0xCFE JUMPI DUP1 PUSH4 0xCD51C12F EQ PUSH2 0xC38 JUMPI DUP1 PUSH4 0xCE8630D4 EQ PUSH2 0x9E6 JUMPI DUP1 PUSH4 0xD0965A6B EQ PUSH2 0x965 JUMPI DUP1 PUSH4 0xDB817187 EQ PUSH2 0x8E4 JUMPI DUP1 PUSH4 0xDC3F574E EQ PUSH2 0x830 JUMPI DUP1 PUSH4 0xE2CB0BA0 EQ PUSH2 0x7AF JUMPI DUP1 PUSH4 0xE4DC2AA4 EQ PUSH2 0x71C JUMPI DUP1 PUSH4 0xE9DDEB26 EQ PUSH2 0x5E9 JUMPI DUP1 PUSH4 0xF2784E07 EQ PUSH2 0x528 JUMPI DUP1 PUSH4 0xF29486A1 EQ PUSH2 0x365 JUMPI PUSH4 0xF7888AEC EQ PUSH2 0x27A JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH2 0x293 PUSH2 0x2FCA JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x29E PUSH2 0x2FE0 JUMP JUMPDEST SWAP3 PUSH1 0x44 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP1 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH32 0xF7888AEC00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE AND PUSH1 0x4 DUP6 ADD MSTORE AND PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x34E JUMPI JUMPDEST DUP2 PUSH2 0x339 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH2 0x314 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x32C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x524 JUMPI PUSH2 0x380 PUSH2 0x2FCA JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x38E DUP3 PUSH2 0x31F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39A DUP2 PUSH2 0x320F JUMP JUMPDEST DUP2 DUP2 MSTORE DUP2 DUP5 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE DUP3 MSTORE DUP1 DUP4 DUP4 ADD MSTORE DUP1 PUSH1 0x40 DUP4 ADD MSTORE DUP1 PUSH1 0x60 DUP4 ADD MSTORE DUP1 PUSH1 0x80 DUP4 ADD MSTORE DUP1 PUSH1 0xA0 DUP4 ADD MSTORE DUP1 PUSH1 0xC0 DUP4 ADD MSTORE DUP1 PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP2 DUP2 DUP5 ADD MSTORE DUP2 PUSH2 0x120 DUP1 SWAP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP3 PUSH32 0xF29486A100000000000000000000000000000000000000000000000000000000 DUP5 MSTORE AND PUSH1 0x4 DUP4 ADD MSTORE DUP2 PUSH1 0x24 PUSH2 0x1A0 SWAP9 DUP10 SWAP4 PUSH32 0x0 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x356 JUMPI SWAP3 PUSH2 0x4F5 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP4 PUSH1 0x60 DUP4 MLOAD DUP1 MLOAD ISZERO ISZERO DUP8 MSTORE DUP3 DUP2 ADD MLOAD ISZERO ISZERO DUP4 DUP9 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0x40 DUP9 ADD MSTORE ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP7 ADD MSTORE DUP3 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH5 0xFFFFFFFFFF PUSH1 0x80 DUP4 ADD MLOAD AND PUSH1 0xE0 DUP6 ADD MSTORE PUSH4 0xFFFFFFFF PUSH1 0xA0 DUP4 ADD MLOAD AND DUP2 DUP6 ADD MSTORE PUSH1 0xC0 DUP3 ADD MLOAD ISZERO ISZERO DUP4 DUP6 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x140 DUP6 ADD MSTORE DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x160 DUP5 ADD MSTORE ADD MLOAD ISZERO ISZERO PUSH2 0x180 DUP3 ADD MSTORE RETURN JUMPDEST PUSH2 0x516 SWAP2 SWAP3 POP DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x51D JUMPI JUMPDEST PUSH2 0x50E DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3473 JUMP JUMPDEST SWAP1 PUSH0 PUSH2 0x45C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x504 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0x547 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF2784E0700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI SWAP2 PUSH2 0x5BC JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x5E2 JUMPI JUMPDEST PUSH2 0x5D3 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI MLOAD PUSH0 PUSH2 0x5B3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x5C9 JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x524 JUMPI PUSH2 0x604 PUSH2 0x2FCA JUMP JUMPDEST DUP3 PUSH1 0x40 DUP1 MLOAD PUSH2 0x612 DUP2 PUSH2 0x31D6 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 DUP6 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH1 0x40 MLOAD SWAP2 PUSH32 0xE9DDEB2600000000000000000000000000000000000000000000000000000000 DUP4 MSTORE AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x60 DUP2 PUSH1 0x24 DUP2 DUP6 PUSH32 0x0 AND GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP5 PUSH2 0x6B0 JUMPI JUMPDEST POP POP PUSH1 0x40 PUSH1 0x60 SWAP4 DUP2 MLOAD SWAP4 DUP4 DUP3 MLOAD AND DUP6 MSTORE DUP4 DUP2 DUP4 ADD MLOAD AND SWAP1 DUP6 ADD MSTORE ADD MLOAD AND PUSH1 0x40 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 SWAP4 POP PUSH1 0x60 DUP5 RETURNDATASIZE PUSH1 0x60 GT PUSH2 0x714 JUMPI JUMPDEST DUP2 PUSH2 0x6CC PUSH1 0x60 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP PUSH1 0x40 PUSH1 0x60 SWAP4 PUSH2 0x70A DUP3 DUP1 MLOAD SWAP3 PUSH2 0x6EA DUP5 PUSH2 0x31D6 JUMP JUMPDEST PUSH2 0x6F3 DUP2 PUSH2 0x32C0 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x700 DUP8 DUP3 ADD PUSH2 0x32C0 JUMP JUMPDEST DUP8 DUP6 ADD MSTORE ADD PUSH2 0x32C0 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE SWAP4 PUSH2 0x68C JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x6BF JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0x73B PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE4DC2AA400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI SWAP2 PUSH2 0x5BC JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xE2CB0BA000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI DUP1 PUSH2 0x84B PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH32 0x0 AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x8DF JUMPI PUSH1 0x24 DUP5 SWAP3 DUP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0xDC3F574E00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE AND PUSH1 0x4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x8D4 JUMPI PUSH2 0x8C4 JUMPI POP RETURN JUMPDEST PUSH2 0x8CD SWAP1 PUSH2 0x31A5 JUMP JUMPDEST PUSH2 0x362 JUMPI DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP POP REVERT JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xDB81718700000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xD0965A6B00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x524 JUMPI PUSH2 0xA01 PUSH2 0x2FCA JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP1 PUSH2 0xA0F DUP3 PUSH2 0x31B9 JUMP JUMPDEST DUP1 DUP3 MSTORE DUP1 DUP4 DUP4 ADD MSTORE DUP1 PUSH1 0x40 DUP4 ADD MSTORE DUP1 PUSH1 0x60 DUP4 ADD MSTORE DUP1 PUSH1 0x80 DUP4 ADD MSTORE DUP1 PUSH1 0xA0 DUP4 ADD MSTORE DUP1 PUSH1 0xC0 DUP4 ADD MSTORE DUP1 PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 SWAP1 DUP1 DUP3 DUP5 ADD MSTORE PUSH2 0x120 DUP2 DUP2 DUP6 ADD MSTORE DUP2 PUSH2 0x140 DUP1 SWAP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 PUSH1 0x40 MLOAD SWAP8 PUSH32 0xCE8630D400000000000000000000000000000000000000000000000000000000 DUP10 MSTORE AND PUSH1 0x4 DUP9 ADD MSTORE PUSH2 0x160 SWAP7 DUP8 DUP2 PUSH1 0x24 DUP2 DUP9 PUSH32 0x0 AND GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x356 JUMPI SWAP1 DUP2 DUP8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP5 PUSH2 0xB48 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP7 DUP4 MLOAD ISZERO ISZERO DUP9 MSTORE DUP1 DUP5 ADD MLOAD ISZERO ISZERO SWAP1 DUP9 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x40 DUP9 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP9 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP9 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0xE0 DUP9 ADD MSTORE DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP8 ADD MSTORE DUP1 DUP3 ADD MLOAD ISZERO ISZERO SWAP1 DUP7 ADD MSTORE ADD MLOAD AND SWAP1 DUP3 ADD MSTORE RETURN JUMPDEST SWAP2 SWAP5 POP SWAP2 SWAP3 POP DUP8 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xC31 JUMPI JUMPDEST PUSH2 0xB63 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP SWAP1 DUP5 SWAP3 SWAP2 PUSH2 0xC25 DUP5 PUSH1 0x40 MLOAD SWAP3 PUSH2 0xB81 DUP5 PUSH2 0x31B9 JUMP JUMPDEST PUSH2 0xB8A DUP2 PUSH2 0x32D4 JUMP JUMPDEST DUP5 MSTORE PUSH2 0xB97 DUP11 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST DUP11 DUP6 ADD MSTORE PUSH2 0xBA7 PUSH1 0x40 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0xBB8 PUSH1 0x60 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0xBC9 PUSH1 0x80 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0xBDA PUSH1 0xA0 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0xBEB PUSH1 0xC0 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0xBFC PUSH1 0xE0 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0xC0C DUP7 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST DUP7 DUP6 ADD MSTORE PUSH2 0xC1B DUP6 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST DUP6 DUP6 ADD MSTORE ADD PUSH2 0x32C0 JUMP JUMPDEST DUP5 DUP3 ADD MSTORE SWAP2 PUSH0 DUP1 PUSH2 0xACD JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xB59 JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xCD51C12F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP2 PUSH2 0xCC1 JUMPI JUMPDEST PUSH1 0x20 DUP3 PUSH4 0xFFFFFFFF PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST SWAP1 POP PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xCF6 JUMPI JUMPDEST DUP2 PUSH2 0xCDC PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP PUSH2 0xCF0 PUSH1 0x20 SWAP2 PUSH2 0x3462 JUMP JUMPDEST PUSH0 PUSH2 0xCB0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xCCF JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI DUP1 PUSH1 0x24 SWAP2 PUSH2 0xD1C PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCA4F280300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP4 DUP5 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP2 PUSH2 0xDA3 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 SWAP1 PUSH2 0xD9F SWAP1 DUP3 ADD DUP6 PUSH2 0x3284 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 POP RETURNDATASIZE DUP1 DUP3 DUP5 RETURNDATACOPY PUSH2 0xDB4 DUP2 DUP5 PUSH2 0x322B JUMP JUMPDEST DUP3 ADD SWAP2 PUSH1 0x20 DUP2 DUP5 SUB SLT PUSH2 0x524 JUMPI DUP1 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x362 JUMPI POP SWAP2 PUSH2 0xDE3 SWAP2 PUSH2 0xD9F SWAP4 ADD PUSH2 0x32E1 JUMP JUMPDEST PUSH0 PUSH2 0xD89 JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH2 0xE59 SWAP1 PUSH1 0x40 PUSH2 0xE09 PUSH2 0x2FCA JUMP JUMPDEST PUSH2 0xE11 PUSH2 0x2FE0 JUMP JUMPDEST DUP3 MLOAD PUSH32 0xC9C1661B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP3 DUP4 SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0xED3 JUMPI PUSH1 0x40 SWAP3 DUP3 SWAP2 PUSH2 0xEA4 JUMPI JUMPDEST POP DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 POP PUSH2 0xEC6 SWAP2 POP DUP3 RETURNDATASIZE DUP5 GT PUSH2 0xECC JUMPI JUMPDEST PUSH2 0xEBE DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3574 JUMP JUMPDEST PUSH0 PUSH2 0xE97 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xEB4 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0xEFF PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xC673BDAF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP3 PUSH2 0xF78 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP DUP3 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xFA9 JUMPI JUMPDEST PUSH2 0xF90 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP PUSH2 0xFA2 SWAP1 PUSH2 0x32D4 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xF6C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xF86 JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0xFCF PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBE7D628A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP3 PUSH2 0xF78 JUMPI POP POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB9A8EFFA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP4 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP3 PUSH2 0x10CD JUMPI JUMPDEST PUSH1 0x20 DUP4 DUP4 PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP4 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1104 JUMPI JUMPDEST DUP2 PUSH2 0x10E9 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP PUSH2 0x10FD PUSH1 0x20 SWAP3 PUSH2 0x32C0 JUMP JUMPDEST SWAP1 PUSH0 PUSH2 0x10C0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x10DC JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xB4AEF0AB00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP2 PUSH2 0x1191 JUMPI JUMPDEST PUSH1 0x20 DUP3 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 POP PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x11C6 JUMPI JUMPDEST DUP2 PUSH2 0x11AC PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP PUSH2 0x11C0 PUSH1 0x20 SWAP2 PUSH2 0x32D4 JUMP JUMPDEST PUSH0 PUSH2 0x1184 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x119F JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0x11ED PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB45090F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI SWAP2 PUSH2 0x5BC JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0x1280 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xACE9B89B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP3 PUSH2 0xF78 JUMPI POP POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x13C1 JUMPI DUP4 SWAP3 PUSH2 0x137C JUMPI PUSH1 0x20 DUP4 DUP4 PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x13B9 JUMPI JUMPDEST DUP2 PUSH2 0x1398 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x13B5 JUMPI MLOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x13B5 JUMPI PUSH1 0x20 SWAP3 POP SWAP1 PUSH0 PUSH2 0x10C0 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x138B JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xA8175B2700000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0x146C PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9E825FF500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP3 PUSH2 0x14E3 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP DUP3 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x150C JUMPI JUMPDEST PUSH2 0x14FB DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP MLOAD PUSH0 DUP1 PUSH2 0x14D9 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x14F1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0x1532 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9678709200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI SWAP2 PUSH2 0x5BC JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH2 0x15C0 PUSH2 0x2FCA JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x15CB PUSH2 0x2FE0 JUMP JUMPDEST SWAP3 PUSH1 0x44 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP1 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH32 0x9385E39A00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE AND PUSH1 0x4 DUP6 ADD MSTORE AND PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH2 0x1665 PUSH2 0x2FCA JUMP JUMPDEST SWAP1 PUSH2 0x166E PUSH2 0x2FE0 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x34A JUMPI PUSH1 0x20 SWAP3 DUP3 PUSH1 0x64 SWAP3 DUP2 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP7 DUP8 SWAP6 PUSH32 0x927DA10500000000000000000000000000000000000000000000000000000000 DUP8 MSTORE AND PUSH1 0x4 DUP7 ADD MSTORE AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x171E PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x40 MLOAD PUSH32 0x85F2DBD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 DUP7 PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI DUP4 SWAP2 PUSH0 SWAP2 PUSH2 0x17EE JUMPI JUMPDEST POP AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x34A JUMPI PUSH1 0x24 PUSH0 SWAP3 DUP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0x8F4AB9CA00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE AND PUSH1 0x4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH2 0x17D7 JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0x17E1 SWAP2 POP PUSH2 0x31A5 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x1810 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1816 JUMPI JUMPDEST PUSH2 0x1808 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x358A JUMP JUMPDEST PUSH0 PUSH2 0x1787 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x17FE JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8A8D123A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x18E6 JUMPI JUMPDEST PUSH1 0x20 SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1918 JUMPI JUMPDEST DUP2 PUSH2 0x1900 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH2 0x1913 PUSH1 0x20 SWAP2 PUSH2 0x3462 JUMP JUMPDEST PUSH2 0x18D5 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x18F3 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x85F2DBD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH1 0x20 SWAP3 PUSH0 SWAP3 PUSH2 0x19A4 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH2 0x19BC SWAP2 SWAP3 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x1816 JUMPI PUSH2 0x1808 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST SWAP1 DUP4 PUSH2 0x199A JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x1A32 PUSH1 0x20 PUSH2 0x19E1 PUSH2 0x2FCA JUMP JUMPDEST PUSH2 0x19E9 PUSH2 0x2FE0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x85E0B99900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP2 DUP3 SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x85C8C01500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH0 SWAP1 PUSH0 SWAP1 PUSH2 0x1B11 JUMPI JUMPDEST PUSH1 0x60 SWAP4 POP PUSH1 0x40 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH4 0xFFFFFFFF DUP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE RETURN JUMPDEST POP POP POP PUSH1 0x60 DUP2 RETURNDATASIZE PUSH1 0x60 GT PUSH2 0x1B61 JUMPI JUMPDEST DUP2 PUSH2 0x1B2D PUSH1 0x60 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI DUP1 PUSH2 0x1B41 PUSH1 0x60 SWAP3 PUSH2 0x32D4 JUMP JUMPDEST PUSH2 0x1B59 PUSH1 0x40 PUSH2 0x1B52 PUSH1 0x20 DUP6 ADD PUSH2 0x3462 JUMP JUMPDEST SWAP4 ADD PUSH2 0x3462 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 PUSH2 0x1AF0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1B20 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8380EDB700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x1BEB JUMPI JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1C1D JUMPI JUMPDEST DUP2 PUSH2 0x1C05 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH2 0x1C18 PUSH1 0x20 SWAP2 PUSH2 0x32D4 JUMP JUMPDEST PUSH2 0x1BDE JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1BF8 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 PUSH0 PUSH2 0x1C41 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x7E361BDE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH0 SWAP3 PUSH2 0x1CDA JUMPI JUMPDEST POP PUSH2 0xD9F PUSH2 0x1CCC SWAP3 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x3156 JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x1CEC DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x40 DUP2 DUP4 SUB SLT PUSH2 0x34A JUMPI DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP4 PUSH2 0x1D18 SWAP2 DUP5 ADD PUSH2 0x3401 JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP2 ADD MLOAD SWAP2 DUP3 GT PUSH2 0x34A JUMPI PUSH2 0x1CCC SWAP4 PUSH2 0xD9F SWAP3 PUSH2 0x1D37 SWAP3 ADD PUSH2 0x3401 JUMP JUMPDEST SWAP3 POP PUSH2 0x1CB0 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 DUP2 PUSH2 0x1D5B PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6C9BC73200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP2 PUSH2 0x1DD3 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1E01 JUMPI JUMPDEST PUSH2 0x1DEA DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH2 0x1DFB SWAP1 PUSH2 0x32D4 JUMP JUMPDEST DUP3 PUSH2 0x1DC8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1DE0 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 DUP2 PUSH2 0x1E25 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6844846B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP2 PUSH2 0x1DD3 JUMPI POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 PUSH0 PUSH2 0x1EB8 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x67E0E07600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH0 PUSH0 SWAP2 PUSH0 SWAP5 PUSH2 0x1F78 JUMPI JUMPDEST POP SWAP3 PUSH2 0x1F6A PUSH2 0xD9F SWAP3 PUSH2 0x1F5C PUSH2 0x1F4E SWAP7 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 PUSH1 0x80 DUP10 MSTORE PUSH1 0x80 DUP10 ADD SWAP1 PUSH2 0x3284 JUMP JUMPDEST SWAP1 DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x30F5 JUMP JUMPDEST SWAP1 DUP6 DUP3 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST SWAP4 POP POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x1F8C DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x34A JUMPI DUP2 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP2 GT PUSH2 0x34A JUMPI DUP3 PUSH2 0x1FB8 SWAP2 DUP4 ADD PUSH2 0x32E1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD DUP5 DUP2 GT PUSH2 0x34A JUMPI DUP4 PUSH2 0x1FD0 SWAP2 DUP5 ADD PUSH2 0x3352 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP4 ADD MLOAD DUP6 DUP2 GT PUSH2 0x34A JUMPI DUP2 PUSH2 0x1FE9 SWAP2 DUP6 ADD PUSH2 0x3401 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP5 ADD MLOAD SWAP6 DUP7 GT PUSH2 0x34A JUMPI PUSH2 0x1F5C PUSH2 0x200E PUSH2 0x1F6A SWAP4 PUSH2 0x1F4E SWAP9 PUSH2 0xD9F SWAP8 ADD PUSH2 0x3401 JUMP JUMPDEST SWAP2 SWAP6 SWAP4 SWAP2 SWAP7 POP POP SWAP3 POP PUSH2 0x1F2A JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x55CBA7FE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x1BEB JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x53956AA200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 PUSH0 PUSH2 0x2138 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x535CFD8A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x21BC JUMPI JUMPDEST PUSH2 0xD9F SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x3156 JUMP JUMPDEST POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x21CC DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x34A JUMPI DUP1 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x34A JUMPI PUSH2 0xD9F SWAP3 PUSH2 0x21F9 SWAP3 ADD PUSH2 0x3401 JUMP JUMPDEST PUSH2 0x21A4 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 DUP2 PUSH2 0x221B PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x532CEC7C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP2 PUSH2 0x1DD3 JUMPI POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 DUP2 PUSH2 0x22AF PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x4F037EE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP2 PUSH2 0x2324 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x234A JUMPI JUMPDEST PUSH2 0x233B DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI MLOAD DUP3 PUSH2 0x5B3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2331 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x3 NOT PUSH1 0x40 DUP2 CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x236B PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x34A JUMPI PUSH1 0xE0 SWAP1 DUP3 CALLDATASIZE SUB ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2398 DUP5 PUSH2 0x3189 JUMP JUMPDEST DUP2 PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x34A JUMPI DUP5 MSTORE PUSH1 0x24 DUP3 ADD CALLDATALOAD PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x44 DUP3 ADD CALLDATALOAD DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP3 ADD CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x34A JUMPI PUSH1 0x4 DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0x23DA DUP3 PUSH2 0x326C JUMP JUMPDEST SWAP2 PUSH2 0x23E8 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x322B JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x24 PUSH1 0x20 DUP5 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0x34A JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x2658 JUMPI POP POP POP PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x64 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x84 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA4 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x34A JUMPI PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC4 DUP3 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT PUSH2 0x34A JUMPI CALLDATASIZE PUSH1 0x23 DUP4 DUP6 ADD ADD SLT ISZERO PUSH2 0x34A JUMPI PUSH1 0x4 DUP3 DUP5 ADD ADD CALLDATALOAD GT PUSH2 0x262B JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x24A4 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x4 DUP7 DUP9 ADD ADD CALLDATALOAD ADD AND ADD DUP6 PUSH2 0x322B JUMP JUMPDEST DUP3 DUP3 ADD PUSH1 0x4 DUP2 ADD CALLDATALOAD DUP1 DUP7 MSTORE CALLDATASIZE SWAP2 ADD PUSH1 0x24 ADD GT PUSH2 0x34A JUMPI PUSH1 0x20 SWAP4 PUSH0 DUP6 PUSH1 0x4 DUP6 DUP8 DUP3 DUP5 SWAP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP11 ADD ADD CALLDATALOAD PUSH1 0x24 DUP4 DUP4 ADD ADD DUP6 DUP9 ADD CALLDATACOPY ADD ADD CALLDATALOAD DUP4 ADD ADD MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0x4D472BDD00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP4 ADD MSTORE DUP1 MLOAD PUSH2 0x252B DUP2 PUSH2 0x30BE JUMP JUMPDEST PUSH1 0x44 DUP4 ADD MSTORE DUP3 DUP2 ADD MLOAD PUSH1 0x64 DUP4 ADD MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 PUSH1 0xC0 PUSH2 0x2579 PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0xE0 PUSH1 0x84 DUP10 ADD MSTORE PUSH2 0x124 DUP9 ADD SWAP1 PUSH2 0x3156 JUMP JUMPDEST SWAP5 PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA4 DUP9 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC4 DUP9 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP3 ADD MLOAD AND PUSH1 0xE4 DUP9 ADD MSTORE ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC DUP7 DUP7 SUB ADD PUSH2 0x104 DUP8 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP8 MSTORE ADD DUP8 DUP7 ADD MCOPY PUSH0 DUP7 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD SUB ADD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2405 JUMP JUMPDEST PUSH2 0x2FF6 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 PUSH1 0x40 PUSH2 0x268A PUSH2 0x2FCA JUMP JUMPDEST DUP2 MLOAD PUSH32 0x4021FE0F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH1 0x40 SWAP2 PUSH0 SWAP2 PUSH0 SWAP2 PUSH2 0x2707 JUMPI POP DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 POP PUSH2 0x2720 SWAP2 POP DUP3 RETURNDATASIZE DUP5 GT PUSH2 0xECC JUMPI PUSH2 0xEBE DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP4 PUSH2 0xE97 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E42F4D500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x27BE PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH32 0xF29486A100000000000000000000000000000000000000000000000000000000 DUP5 MSTORE AND PUSH1 0x4 DUP4 ADD MSTORE DUP2 PUSH1 0x24 PUSH2 0x1A0 SWAP5 DUP6 SWAP4 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH1 0x40 SWAP3 PUSH0 SWAP3 PUSH2 0x284C JUMPI JUMPDEST POP POP PUSH1 0x60 DUP3 DUP3 ADD MLOAD SWAP2 ADD MLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST PUSH2 0x2862 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x51D JUMPI PUSH2 0x50E DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP3 DUP1 PUSH2 0x2835 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x26A8A99100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x20C1FB7A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x18E6 JUMPI PUSH1 0x20 SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 MLOAD SWAP1 PUSH32 0xB9A8EFFA00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 DUP2 PUSH1 0x4 DUP2 DUP6 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI DUP3 SWAP2 DUP5 SWAP2 PUSH0 SWAP2 PUSH2 0x2A62 JUMPI JUMPDEST POP PUSH1 0x4 PUSH1 0x40 MLOAD DUP1 SWAP6 DUP2 SWAP4 PUSH32 0x1BA0AE4500000000000000000000000000000000000000000000000000000000 DUP4 MSTORE AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP3 PUSH2 0x2A32 JUMPI POP PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP DUP3 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2A5B JUMPI JUMPDEST PUSH2 0x2A4A DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH2 0x19BC SWAP1 PUSH2 0x32C0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2A40 JUMP JUMPDEST SWAP3 POP POP DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2A92 JUMPI JUMPDEST PUSH2 0x2A79 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI DUP3 PUSH2 0x2A8C DUP4 SWAP3 PUSH2 0x32C0 JUMP JUMPDEST DUP6 PUSH2 0x29EB JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2A6F JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x2AB2 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x40 MLOAD SWAP3 PUSH32 0x15E3204600000000000000000000000000000000000000000000000000000000 DUP5 MSTORE AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x80 DUP3 PUSH1 0x24 DUP2 DUP5 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP2 PUSH0 PUSH0 SWAP5 PUSH0 SWAP3 PUSH2 0x2B4D JUMPI JUMPDEST POP PUSH1 0x80 SWAP5 PUSH1 0x40 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH4 0xFFFFFFFF DUP1 SWAP3 AND PUSH1 0x20 DUP7 ADD MSTORE AND PUSH1 0x40 DUP5 ADD MSTORE AND PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST SWAP4 POP POP POP SWAP2 POP PUSH1 0x80 DUP2 RETURNDATASIZE PUSH1 0x80 GT PUSH2 0x2BAE JUMPI JUMPDEST DUP2 PUSH2 0x2B6C PUSH1 0x80 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH1 0x80 SWAP2 PUSH2 0x2B80 DUP3 PUSH2 0x32D4 JUMP JUMPDEST PUSH2 0x2B8C PUSH1 0x20 DUP5 ADD PUSH2 0x3462 JUMP JUMPDEST SWAP3 PUSH2 0x2BA5 PUSH1 0x60 PUSH2 0x2B9E PUSH1 0x40 DUP5 ADD PUSH2 0x3462 JUMP JUMPDEST SWAP3 ADD PUSH2 0x32C0 JUMP JUMPDEST SWAP2 SWAP4 SWAP1 SWAP5 PUSH2 0x2B26 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x2B5F JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x13EF8A5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x1BEB JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x2C51 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0xC0 PUSH1 0x40 MLOAD PUSH2 0x2C5F DUP2 PUSH2 0x3189 JUMP JUMPDEST PUSH0 DUP2 MSTORE PUSH1 0x60 SWAP2 DUP2 DUP4 DUP7 DUP2 SWAP5 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 DUP1 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH1 0x40 MLOAD SWAP4 PUSH32 0x13D21CDF00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE AND PUSH1 0x4 DUP5 ADD MSTORE PUSH0 DUP4 PUSH1 0x24 DUP2 DUP6 PUSH32 0x0 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP4 PUSH2 0x2DE6 JUMPI JUMPDEST POP SWAP3 PUSH1 0x40 SWAP3 SWAP2 SWAP3 MLOAD SWAP4 DUP5 SWAP4 DUP3 DUP6 MSTORE PUSH2 0x100 DUP6 ADD DUP5 MLOAD DUP5 DUP8 ADD MSTORE DUP4 DUP6 ADD MLOAD SWAP4 PUSH1 0xE0 PUSH1 0x40 DUP9 ADD MSTORE DUP5 MLOAD DUP1 SWAP3 MSTORE DUP1 PUSH2 0x120 DUP9 ADD SWAP6 ADD SWAP3 PUSH0 SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x2DC9 JUMPI DUP9 DUP1 PUSH2 0xD9F DUP11 DUP11 PUSH1 0xC0 PUSH2 0x2DB7 PUSH2 0x2DA4 PUSH2 0x2D90 DUP15 PUSH2 0x2D7D PUSH1 0x40 DUP9 ADD MLOAD SWAP7 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP8 DUP9 DUP13 DUP4 SUB ADD DUP5 DUP14 ADD MSTORE PUSH2 0x30F5 JUMP JUMPDEST SWAP1 DUP8 ADD MLOAD DUP7 DUP11 DUP4 SUB ADD PUSH1 0x80 DUP12 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST PUSH1 0x80 DUP7 ADD MLOAD DUP6 DUP10 DUP4 SUB ADD PUSH1 0xA0 DUP11 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MLOAD DUP5 DUP9 DUP4 SUB ADD DUP5 DUP10 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 DUP5 DUP4 SUB ADD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST DUP5 MLOAD DUP2 AND DUP8 MSTORE DUP10 SWAP9 POP SWAP6 DUP3 ADD SWAP6 SWAP4 DUP3 ADD SWAP4 PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2D2A JUMP JUMPDEST SWAP1 SWAP3 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x2DF8 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD DUP5 DUP3 DUP3 SUB SLT PUSH2 0x34A JUMPI DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x34A JUMPI ADD SWAP1 PUSH1 0xE0 DUP3 DUP3 SUB SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2E2F DUP5 PUSH2 0x3189 JUMP JUMPDEST DUP3 MLOAD DUP5 MSTORE DUP7 DUP4 ADD MLOAD DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP3 PUSH2 0x2E4A SWAP2 DUP6 ADD PUSH2 0x32E1 JUMP JUMPDEST DUP8 DUP6 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP3 PUSH2 0x2E66 SWAP2 DUP6 ADD PUSH2 0x3352 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE DUP6 DUP4 ADD MLOAD DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP3 PUSH2 0x2E82 SWAP2 DUP6 ADD PUSH2 0x3401 JUMP JUMPDEST DUP7 DUP6 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP3 PUSH2 0x2E9E SWAP2 DUP6 ADD PUSH2 0x3401 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP3 PUSH2 0x2EBB SWAP2 DUP6 ADD PUSH2 0x3401 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD SWAP1 DUP2 GT PUSH2 0x34A JUMPI PUSH2 0x2ED6 SWAP3 ADD PUSH2 0x3401 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE SWAP2 DUP5 PUSH2 0x2CF4 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x98401F500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x1BEB JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x20 DUP2 DUP1 PUSH2 0x1A32 PUSH2 0x2F83 PUSH2 0x2FCA JUMP JUMPDEST PUSH2 0x2F8B PUSH2 0x2FE0 JUMP JUMPDEST PUSH31 0xFDFA1300000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP6 ADD MSTORE AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x34A JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x34A JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x3010 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x40 MLOAD SWAP3 PUSH32 0x4AFBAF5A00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 DUP3 PUSH1 0x24 DUP2 DUP5 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP3 PUSH2 0x3087 JUMPI POP PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP DUP3 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x30B7 JUMPI JUMPDEST PUSH2 0x309F DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH2 0x30B0 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP1 PUSH0 PUSH2 0x199A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3095 JUMP JUMPDEST PUSH1 0x2 GT ISZERO PUSH2 0x30C8 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH0 JUMPDEST DUP3 DUP2 LT PUSH2 0x3114 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 DUP3 PUSH1 0x60 PUSH1 0x1 SWAP3 DUP8 MLOAD DUP1 MLOAD PUSH2 0x312B DUP2 PUSH2 0x30BE JUMP JUMPDEST DUP3 MSTORE DUP1 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP4 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP1 DUP3 ADD MSTORE ADD SWAP6 ADD SWAP4 SWAP3 SWAP2 ADD PUSH2 0x3106 JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH0 JUMPDEST DUP3 DUP2 LT PUSH2 0x3175 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x3167 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x160 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x140 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x262B JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH0 JUMPDEST DUP3 DUP2 LT PUSH2 0x32A3 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x3295 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x34A JUMPI JUMP JUMPDEST MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x34A JUMPI JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x34A JUMPI DUP2 MLOAD SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x32FC DUP2 PUSH2 0x326C JUMP JUMPDEST SWAP4 PUSH2 0x330A PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x322B JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x34A JUMPI PUSH1 0x20 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x3333 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x34A JUMPI DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x3325 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x34A JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 PUSH2 0x336B DUP4 PUSH2 0x326C JUMP JUMPDEST SWAP4 PUSH1 0x40 PUSH2 0x337B PUSH1 0x40 MLOAD SWAP7 DUP8 PUSH2 0x322B JUMP JUMPDEST DUP5 DUP7 MSTORE DUP3 DUP7 ADD SWAP2 DUP4 PUSH1 0x60 DUP1 SWAP8 MUL DUP7 ADD ADD SWAP5 DUP2 DUP7 GT PUSH2 0x34A JUMPI DUP5 ADD SWAP3 JUMPDEST DUP6 DUP5 LT PUSH2 0x33A8 JUMPI POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP7 DUP5 DUP4 SUB SLT PUSH2 0x34A JUMPI DUP3 MLOAD SWAP1 PUSH2 0x33BD DUP3 PUSH2 0x31D6 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x34A JUMPI DUP3 MSTORE DUP6 DUP6 ADD MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x34A JUMPI DUP3 DUP8 SWAP3 DUP4 DUP12 SWAP6 ADD MSTORE PUSH2 0x33F2 DUP7 DUP9 ADD PUSH2 0x32D4 JUMP JUMPDEST DUP7 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP3 PUSH2 0x3397 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x34A JUMPI DUP2 MLOAD SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x341C DUP2 PUSH2 0x326C JUMP JUMPDEST SWAP4 PUSH2 0x342A PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x322B JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x34A JUMPI PUSH1 0x20 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x3453 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x3445 JUMP JUMPDEST MLOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x34A JUMPI JUMP JUMPDEST DUP1 SWAP2 SUB SWAP1 PUSH2 0x1A0 DUP3 SLT PUSH2 0x34A JUMPI PUSH1 0x80 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x348F DUP5 PUSH2 0x31F2 JUMP JUMPDEST SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH2 0x34A0 DUP2 PUSH2 0x320F JUMP JUMPDEST PUSH2 0x34A9 DUP3 PUSH2 0x32D4 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x34B7 PUSH1 0x20 DUP4 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x34C8 PUSH1 0x40 DUP4 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x34D9 PUSH1 0x60 DUP4 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE DUP3 MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x34A JUMPI PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x356D PUSH2 0x180 PUSH2 0x100 SWAP3 PUSH2 0x352B DUP5 DUP3 ADD PUSH2 0x3462 JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0x120 SWAP4 PUSH2 0x353F DUP6 DUP4 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0xC0 DUP8 ADD MSTORE PUSH2 0x3551 PUSH2 0x140 DUP4 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x3563 PUSH2 0x160 DUP4 ADD PUSH2 0x32D4 JUMP JUMPDEST SWAP1 DUP7 ADD MSTORE ADD PUSH2 0x32D4 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x34A JUMPI PUSH1 0x20 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x34A JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x34A JUMPI SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0xEF PUSH13 0x33246ED815BE6E6E4F48EE6C7F SAR 0x4D 0xC2 0xD2 SWAP10 0x4D REVERT CODECOPY MCOPY SWAP4 PUSH26 0x50D089D6FC64736F6C634300081B003300000000000000000000 ","sourceMap":"685:13995:16:-:0;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;-1:-1:-1;;;;;685:13995:16;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;;;807:14;;685:13995;;;;;;;;807:14;685:13995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;685:13995:16;;;;;;-1:-1:-1;685:13995:16;;;;;-1:-1:-1;685:13995:16"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":12256,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_24907":{"entryPoint":12234,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":12992,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_contract_IERC20_dyn_fromMemory":{"entryPoint":13025,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_struct_TokenInfo_dyn_fromMemory":{"entryPoint":13138,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint256_dyn_fromMemory":{"entryPoint":13313,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":13012,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_contract_IProtocolFeeController_fromMemory":{"entryPoint":13706,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_PoolConfig_fromMemory":{"entryPoint":13427,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint256t_uint256_fromMemory":{"entryPoint":13684,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_uint32_fromMemory":{"entryPoint":13410,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_address_contract_IERC20":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_array_contract_IERC20_dyn":{"entryPoint":12932,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_struct_TokenInfo_dyn":{"entryPoint":12533,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":12630,"id":null,"parameterSlots":2,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":12908,"id":null,"parameterSlots":1,"returnSlots":1},"external_fun_getBufferAsset":{"entryPoint":12278,"id":null,"parameterSlots":0,"returnSlots":0},"finalize_allocation":{"entryPoint":12843,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_24910":{"entryPoint":12681,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_24927":{"entryPoint":12709,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_24943":{"entryPoint":12729,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_24949":{"entryPoint":12758,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_24953":{"entryPoint":12786,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_24954":{"entryPoint":12815,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_enum_TokenType":{"entryPoint":12478,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"3152":[{"length":32,"start":741},{"length":32,"start":1069},{"length":32,"start":1412},{"length":32,"start":1628},{"length":32,"start":1912},{"length":32,"start":2039},{"length":32,"start":2135},{"length":32,"start":2348},{"length":32,"start":2477},{"length":32,"start":2711},{"length":32,"start":3200},{"length":32,"start":3417},{"length":32,"start":3685},{"length":32,"start":3900},{"length":32,"start":4108},{"length":32,"start":4239},{"length":32,"start":4436},{"length":32,"start":4650},{"length":32,"start":4797},{"length":32,"start":4927},{"length":32,"start":5140},{"length":32,"start":5289},{"length":32,"start":5487},{"length":32,"start":5650},{"length":32,"start":5835},{"length":32,"start":5974},{"length":32,"start":6204},{"length":32,"start":6310},{"length":32,"start":6502},{"length":32,"start":6718},{"length":32,"start":6845},{"length":32,"start":7087},{"length":32,"start":7294},{"length":32,"start":7576},{"length":32,"start":7778},{"length":32,"start":7925},{"length":32,"start":8290},{"length":32,"start":8419},{"length":32,"start":8565},{"length":32,"start":8792},{"length":32,"start":8940},{"length":32,"start":9714},{"length":32,"start":9926},{"length":32,"start":10092},{"length":32,"start":10242},{"length":32,"start":10415},{"length":32,"start":10542},{"length":32,"start":10679},{"length":32,"start":10993},{"length":32,"start":11260},{"length":32,"start":11460},{"length":32,"start":12072},{"length":32,"start":12366}]},"linkReferences":{},"object":"6080806040526004361015610012575f80fd5b5f905f3560e01c908162fdfa1314612f63575080630387587d14612668578063098401f514612ee257806313d21cdf14612c3757806313ef8a5d14612bb657806315e3204614612a995780631ba0ae451461296d57806320c1fb7a146128e857806326a8a99114612869578063295f0540146127a55780632e42f4d5146127265780634021fe0f1461266d5780634afbaf5a146126685780634d472bdd146123515780634f037ee714612292578063532cec7c146121fe578063535cfd8a1461211c57806353956aa21461209d57806355cba7fe1461201c57806367e0e07614611e9c5780636844846b14611e085780636c9bc73214611d3e5780637e361bde14611c255780638380edb714611b6957806385c8c01514611a7757806385e0b999146119c357806385f2dbd4146119205780638a8d123a146118605780638d928af81461181d5780638f4ab9ca14611704578063927da1051461164b5780639385e39a146115a657806396787092146115135780639e825ff51461144d578063a8175b27146113cc578063aaabadc5146112f8578063ace9b89b14611261578063b45090f9146111ce578063b4aef0ab1461110c578063b9a8effa14611047578063be7d628a14610fb0578063c673bdaf14610ee0578063c9c1661b14610de9578063ca4f280314610cfe578063cd51c12f14610c38578063ce8630d4146109e6578063d0965a6b14610965578063db817187146108e4578063dc3f574e14610830578063e2cb0ba0146107af578063e4dc2aa41461071c578063e9ddeb26146105e9578063f2784e0714610528578063f29486a1146103655763f7888aec1461027a575f80fd5b3461036257604060031936011261036257610293612fca565b90602061029e612fe0565b9260446001600160a01b0391828060405197889586947ff7888aec0000000000000000000000000000000000000000000000000000000086521660048501521660248301527f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f575b602090604051908152f35b506020813d60201161034e575b816103396020938361322b565b8101031261034a5760209051610314565b5f80fd5b3d915061032c565b604051903d90823e3d90fd5b80fd5b50346103625760208060031936011261052457610380612fca565b916040519061038e826131f2565b60405161039a8161320f565b8181528184820152816040820152816060820152825280838301528060408301528060608301528060808301528060a08301528060c08301528060e0830152610100818184015281610120809401526001600160a01b0394856040519687927ff29486a10000000000000000000000000000000000000000000000000000000084521660048301528160246101a09889937f0000000000000000000000000000000000000000000000000000000000000000165afa92831561035657926104f5575b506040519360608351805115158752828101511515838801526040810151151560408801520151151560608601528201516080850152604082015160a0850152606082015160c085015264ffffffffff60808301511660e085015263ffffffff60a0830151168185015260c082015115158385015260e08201511515610140850152810151151561016084015201511515610180820152f35b610516919250853d871161051d575b61050e818361322b565b810190613473565b905f61045c565b503d610504565b5080fd5b5034610362576020908160031936011261036257602482610547612fca565b6040517ff2784e070000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa91821561035657916105bc575b50604051908152f35b90508181813d83116105e2575b6105d3818361322b565b8101031261034a57515f6105b3565b503d6105c9565b50346103625760208060031936011261052457610604612fca565b8260408051610612816131d6565b828152828582015201526001600160a01b039081604051917fe9ddeb26000000000000000000000000000000000000000000000000000000008352166004820152606081602481857f0000000000000000000000000000000000000000000000000000000000000000165afa9384156103565780946106b0575b50506040606093815193838251168552838183015116908501520151166040820152f35b9093506060843d606011610714575b816106cc6060938361322b565b810103126103625750604060609361070a828051926106ea846131d6565b6106f3816132c0565b84526107008782016132c0565b87850152016132c0565b828201529361068c565b3d91506106bf565b503461036257602090816003193601126103625760248261073b612fca565b6040517fe4dc2aa40000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa91821561035657916105bc5750604051908152f35b5034610362578060031936011261036257604051907fe2cb0ba00000000000000000000000000000000000000000000000000000000082526020826004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f57602090604051908152f35b5034610362576020600319360112610362578061084b612fca565b6001600160a01b0390817f00000000000000000000000000000000000000000000000000000000000000001691823b156108df57602484928360405195869485937fdc3f574e0000000000000000000000000000000000000000000000000000000085521660048401525af180156108d4576108c45750f35b6108cd906131a5565b6103625780f35b6040513d84823e3d90fd5b505050fd5b5034610362578060031936011261036257604051907fdb8171870000000000000000000000000000000000000000000000000000000082526020826004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f57602090604051908152f35b5034610362578060031936011261036257604051907fd0965a6b0000000000000000000000000000000000000000000000000000000082526020826004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f57602090604051908152f35b50346103625760208060031936011261052457610a01612fca565b9160405190610a0f826131b9565b80825280838301528060408301528060608301528060808301528060a08301528060c08301528060e0830152610100908082840152610120818185015281610140809501526001600160a01b039283604051977fce8630d4000000000000000000000000000000000000000000000000000000008952166004880152610160968781602481887f0000000000000000000000000000000000000000000000000000000000000000165afa938415610356579081879594939294610b48575b5050604051968351151588528084015115159088015260408301511515604088015260608301511515606088015260808301511515608088015260a0830151151560a088015260c0830151151560c088015260e0830151151560e0880152808301511515908701528082015115159086015201511690820152f35b9194509192508782813d8311610c31575b610b63818361322b565b81010312610362575090849291610c258460405192610b81846131b9565b610b8a816132d4565b8452610b978a82016132d4565b8a850152610ba7604082016132d4565b6040850152610bb8606082016132d4565b6060850152610bc9608082016132d4565b6080850152610bda60a082016132d4565b60a0850152610beb60c082016132d4565b60c0850152610bfc60e082016132d4565b60e0850152610c0c8682016132d4565b86850152610c1b8582016132d4565b85850152016132c0565b84820152915f80610acd565b503d610b59565b5034610362578060031936011261036257604051907fcd51c12f0000000000000000000000000000000000000000000000000000000082526020826004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356578091610cc1575b60208263ffffffff60405191168152f35b90506020823d602011610cf6575b81610cdc6020938361322b565b810103126103625750610cf0602091613462565b5f610cb0565b3d9150610ccf565b50346103625760206003193601126103625780602491610d1c612fca565b6040517fca4f28030000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015293849182907f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356578091610da3575b60405160208082528190610d9f90820185613284565b0390f35b90503d8082843e610db4818461322b565b8201916020818403126105245780519167ffffffffffffffff8311610362575091610de391610d9f93016132e1565b5f610d89565b503461036257604060031936011261036257610e59906040610e09612fca565b610e11612fe0565b82517fc9c1661b0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529116602482015292839081906044820190565b03816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa8015610ed3576040928291610ea4575b5082519182526020820152f35b9050610ec69150823d8411610ecc575b610ebe818361322b565b810190613574565b5f610e97565b503d610eb4565b50604051903d90823e3d90fd5b5034610362576020908160031936011261036257602482610eff612fca565b6040517fc673bdaf0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa918215610356578092610f78575b50506040519015158152f35b9091508282813d8311610fa9575b610f90818361322b565b810103126103625750610fa2906132d4565b5f80610f6c565b503d610f86565b5034610362576020908160031936011261036257602482610fcf612fca565b6040517fbe7d628a0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa918215610356578092610f785750506040519015158152f35b50346103625780600319360112610362576040517fb9a8effa000000000000000000000000000000000000000000000000000000008152906001600160a01b036020836004817f000000000000000000000000000000000000000000000000000000000000000085165afa9182156103565780926110cd575b6020838360405191168152f35b9091506020833d602011611104575b816110e96020938361322b565b8101031261036257506110fd6020926132c0565b905f6110c0565b3d91506110dc565b5034610362578060031936011261036257604051907fb4aef0ab0000000000000000000000000000000000000000000000000000000082526020826004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356578091611191575b6020826040519015158152f35b90506020823d6020116111c6575b816111ac6020938361322b565b8101031261036257506111c06020916132d4565b5f611184565b3d915061119f565b50346103625760209081600319360112610362576024826111ed612fca565b6040517fb45090f90000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa91821561035657916105bc5750604051908152f35b5034610362576020908160031936011261036257602482611280612fca565b6040517face9b89b0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa918215610356578092610f785750506040519015158152f35b50346103625780600319360112610362576040517faaabadc50000000000000000000000000000000000000000000000000000000081526001600160a01b036020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa9182156113c157839261137c576020838360405191168152f35b9091506020813d6020116113b9575b816113986020938361322b565b810103126113b5575181811681036113b55760209250905f6110c0565b8280fd5b3d915061138b565b6040513d85823e3d90fd5b5034610362578060031936011261036257604051907fa8175b270000000000000000000000000000000000000000000000000000000082526020826004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f57602090604051908152f35b503461036257602090816003193601126103625760248261146c612fca565b6040517f9e825ff50000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9182156103565780926114e3575b5050604051908152f35b9091508282813d831161150c575b6114fb818361322b565b810103126103625750515f806114d9565b503d6114f1565b5034610362576020908160031936011261036257602482611532612fca565b6040517f967870920000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa91821561035657916105bc5750604051908152f35b5034610362576040600319360112610362576115c0612fca565b9060206115cb612fe0565b9260446001600160a01b0391828060405197889586947f9385e39a0000000000000000000000000000000000000000000000000000000086521660048501521660248301527f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f57602090604051908152f35b503461036257606060031936011261036257611665612fca565b9061166e612fe0565b916044356001600160a01b039081811680910361034a57602092826064928160405198899687957f927da10500000000000000000000000000000000000000000000000000000000875216600486015216602484015260448301527f0000000000000000000000000000000000000000000000000000000000000000165afa908115610356579061031f57602090604051908152f35b503461034a57602060031936011261034a5761171e612fca565b6001600160a01b03906040517f85f2dbd4000000000000000000000000000000000000000000000000000000008152602081600481867f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e35783915f916117ee575b501691823b1561034a5760245f928360405195869485937f8f4ab9ca0000000000000000000000000000000000000000000000000000000085521660048401525af180156117e3576117d7575080f35b6117e191506131a5565b005b6040513d5f823e3d90fd5b611810915060203d602011611816575b611808818361322b565b81019061358a565b5f611787565b503d6117fe565b3461034a575f60031936011261034a5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461034a575f60031936011261034a576040517f8a8d123a0000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f906118e6575b60209063ffffffff60405191168152f35b506020813d602011611918575b816119006020938361322b565b8101031261034a57611913602091613462565b6118d5565b3d91506118f3565b3461034a575f60031936011261034a576040517f85f2dbd40000000000000000000000000000000000000000000000000000000081526001600160a01b036020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa9081156117e3576020925f926119a4575b5060405191168152f35b6119bc919250833d851161181657611808818361322b565b908361199a565b3461034a57604060031936011261034a57611a3260206119e1612fca565b6119e9612fe0565b6040517f85e0b9990000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529116602482015291829081906044820190565b03816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f9061031f57602090604051908152f35b3461034a575f60031936011261034a576040517f85c8c0150000000000000000000000000000000000000000000000000000000081526060816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f905f905f90611b11575b60609350604051921515835263ffffffff8092166020840152166040820152f35b5050506060813d606011611b61575b81611b2d6060938361322b565b8101031261034a5780611b416060926132d4565b611b596040611b5260208501613462565b9301613462565b909190611af0565b3d9150611b20565b3461034a575f60031936011261034a576040517f8380edb70000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f90611beb575b6020906040519015158152f35b506020813d602011611c1d575b81611c056020938361322b565b8101031261034a57611c186020916132d4565b611bde565b3d9150611bf8565b3461034a57602060031936011261034a5760245f611c41612fca565b6040517f7e361bde0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f905f92611cda575b50610d9f611ccc92604051938493604085526040850190613156565b908382036020850152613156565b9150503d805f833e611cec818361322b565b81019060408183031261034a57805167ffffffffffffffff9081811161034a5783611d18918401613401565b91602081015191821161034a57611ccc93610d9f92611d379201613401565b9250611cb0565b3461034a5760208060031936011261034a57602481611d5b612fca565b6040517f6c9bc7320000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f91611dd3575b506040519015158152f35b90508181813d8311611e01575b611dea818361322b565b8101031261034a57611dfb906132d4565b82611dc8565b503d611de0565b3461034a5760208060031936011261034a57602481611e25612fca565b6040517f6844846b0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f91611dd357506040519015158152f35b3461034a57602060031936011261034a5760245f611eb8612fca565b6040517f67e0e0760000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f905f5f915f94611f78575b5092611f6a610d9f92611f5c611f4e96604051978897608089526080890190613284565b9087820360208901526130f5565b908582036040870152613156565b908382036060850152613156565b93505050503d805f833e611f8c818361322b565b810160808282031261034a5781519167ffffffffffffffff9283811161034a5782611fb89183016132e1565b602082015184811161034a5783611fd0918401613352565b92604083015185811161034a5781611fe9918501613401565b91606084015195861161034a57611f5c61200e611f6a93611f4e98610d9f9701613401565b919593919650509250611f2a565b3461034a575f60031936011261034a576040517f55cba7fe0000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f90611beb576020906040519015158152f35b3461034a575f60031936011261034a576040517f53956aa20000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f9061031f57602090604051908152f35b3461034a57602060031936011261034a5760245f612138612fca565b6040517f535cfd8a0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f906121bc575b610d9f90604051918291602083526020830190613156565b503d805f833e6121cc818361322b565b81019060208183031261034a5780519167ffffffffffffffff831161034a57610d9f926121f99201613401565b6121a4565b3461034a5760208060031936011261034a5760248161221b612fca565b6040517f532cec7c0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f91611dd357506040519015158152f35b3461034a5760208060031936011261034a576024816122af612fca565b6040517f4f037ee70000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f916123245750604051908152f35b90508181813d831161234a575b61233b818361322b565b8101031261034a5751826105b3565b503d612331565b3461034a5760031960408136011261034a5761236b612fca565b60243567ffffffffffffffff9283821161034a5760e090823603011261034a576040519261239884613189565b8160040135600281101561034a57845260248201356020850152604482013581811161034a5782013660238201121561034a576004810135906123da8261326c565b916123e8604051938461322b565b8083526024602084019160051b8301019136831161034a57602401905b828210612658575050506040850152606482013560608501526084820135608085015260a48201356001600160a01b038116810361034a5760a085015260c48201359080821161034a5736602383850101121561034a57600482840101351161262b57604051926124a460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f600486880101350116018561322b565b82820160048101358086523691016024011161034a576020935f85600485878284986001600160a01b039a010135602483830101858801370101358301015260c086015260405194859384927f4d472bdd00000000000000000000000000000000000000000000000000000000845216600483015260406024830152805161252b816130be565b60448301528281015160648301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460c0612579604086015160e06084890152610124880190613156565b94606081015160a4880152608081015160c48801526001600160a01b0360a08201511660e488015201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc868603016101048701528051918291828752018786015e5f8682860101520116010301816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f9061031f57602090604051908152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8135815260209182019101612405565b612ff6565b3461034a57602060031936011261034a576024604061268a612fca565b81517f4021fe0f0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3576040915f915f91612707575082519182526020820152f35b90506127209150823d8411610ecc57610ebe818361322b565b83610e97565b3461034a575f60031936011261034a576040517f2e42f4d50000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f9061031f57602090604051908152f35b3461034a57602060031936011261034a576127be612fca565b6001600160a01b0390816040519283927ff29486a10000000000000000000000000000000000000000000000000000000084521660048301528160246101a09485937f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3576040925f9261284c575b505060608282015191015182519182526020820152f35b6128629250803d1061051d5761050e818361322b565b8280612835565b3461034a575f60031936011261034a576040517f26a8a9910000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f9061031f57602090604051908152f35b3461034a575f60031936011261034a576040517f20c1fb7a0000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f906118e65760209063ffffffff60405191168152f35b3461034a575f60031936011261034a576001600160a01b03604051907fb9a8effa0000000000000000000000000000000000000000000000000000000082526020918281600481857f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e357829184915f91612a62575b506004604051809581937f1ba0ae45000000000000000000000000000000000000000000000000000000008352165afa9182156117e3575f92612a32575060405191168152f35b9091508281813d8311612a5b575b612a4a818361322b565b8101031261034a576119bc906132c0565b503d612a40565b92505081813d8311612a92575b612a79818361322b565b8101031261034a5782612a8c83926132c0565b856129eb565b503d612a6f565b3461034a57602060031936011261034a57612ab2612fca565b6001600160a01b0380604051927f15e32046000000000000000000000000000000000000000000000000000000008452166004830152608082602481847f0000000000000000000000000000000000000000000000000000000000000000165afa9081156117e3575f915f5f945f92612b4d575b50608094604051941515855263ffffffff8092166020860152166040840152166060820152f35b9350505091506080813d608011612bae575b81612b6c6080938361322b565b8101031261034a57608091612b80826132d4565b612b8c60208401613462565b92612ba56060612b9e60408401613462565b92016132c0565b91939094612b26565b3d9150612b5f565b3461034a575f60031936011261034a576040517f13ef8a5d0000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f90611beb576020906040519015158152f35b3461034a5760208060031936011261034a57612c51612fca565b60c0604051612c5f81613189565b5f81526060918183868194015282604082015282808201528260808201528260a082015201526001600160a01b039081604051937f13d21cdf0000000000000000000000000000000000000000000000000000000085521660048401525f83602481857f0000000000000000000000000000000000000000000000000000000000000000165afa9283156117e3575f93612de6575b50926040929192519384938285526101008501845184870152838501519360e0604088015284518092528061012088019501925f905b838210612dc9578880610d9f8a8a60c0612db7612da4612d908e612d7d6040880151967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe097888c830301848d01526130f5565b90870151868a83030160808b0152613156565b6080860151858983030160a08a0152613156565b60a0850151848883030184890152613156565b920151908483030160e0850152613156565b845181168752899850958201959382019360019190910190612d2a565b9092503d805f833e612df8818361322b565b8101848282031261034a57815167ffffffffffffffff9283821161034a57019060e08282031261034a5760405192612e2f84613189565b825184528683015181811161034a5782612e4a9185016132e1565b87850152604083015181811161034a5782612e66918501613352565b60408501528583015181811161034a5782612e82918501613401565b86850152608083015181811161034a5782612e9e918501613401565b608085015260a083015181811161034a5782612ebb918501613401565b60a085015260c083015190811161034a57612ed69201613401565b60c08201529184612cf4565b3461034a575f60031936011261034a576040517f098401f50000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156117e3575f90611beb576020906040519015158152f35b3461034a57604060031936011261034a5760208180611a32612f83612fca565b612f8b612fe0565b7efdfa130000000000000000000000000000000000000000000000000000000084526001600160a01b0391821660048501521660248301526044820190565b600435906001600160a01b038216820361034a57565b602435906001600160a01b038216820361034a57565b3461034a5760208060031936011261034a57613010612fca565b6001600160a01b0380604051927f4afbaf5a0000000000000000000000000000000000000000000000000000000084521660048301528282602481847f0000000000000000000000000000000000000000000000000000000000000000165afa9182156117e3575f92613087575060405191168152f35b9091508281813d83116130b7575b61309f818361322b565b8101031261034a576130b0906132c0565b905f61199a565b503d613095565b600211156130c857565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b9081518082526020808093019301915f5b828110613114575050505090565b909192938260606001928751805161312b816130be565b8252808401516001600160a01b03168483015260409081015115159082015201950193929101613106565b9081518082526020808093019301915f5b828110613175575050505090565b835185529381019392810192600101613167565b60e0810190811067ffffffffffffffff82111761262b57604052565b67ffffffffffffffff811161262b57604052565b610160810190811067ffffffffffffffff82111761262b57604052565b6060810190811067ffffffffffffffff82111761262b57604052565b610140810190811067ffffffffffffffff82111761262b57604052565b6080810190811067ffffffffffffffff82111761262b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761262b57604052565b67ffffffffffffffff811161262b5760051b60200190565b9081518082526020808093019301915f5b8281106132a3575050505090565b83516001600160a01b031685529381019392810192600101613295565b51906001600160a01b038216820361034a57565b5190811515820361034a57565b9080601f8301121561034a578151906020916132fc8161326c565b9361330a604051958661322b565b81855260208086019260051b82010192831161034a57602001905b828210613333575050505090565b81516001600160a01b038116810361034a578152908301908301613325565b81601f8201121561034a57805190602061336b8361326c565b93604061337b604051968761322b565b848652828601918360608097028601019481861161034a578401925b8584106133a8575050505050505090565b868483031261034a578251906133bd826131d6565b8451600281101561034a57825285850151906001600160a01b038216820361034a57828792838b9501526133f28688016132d4565b86820152815201930192613397565b9080601f8301121561034a5781519060209161341c8161326c565b9361342a604051958661322b565b81855260208086019260051b82010192831161034a57602001905b828210613453575050505090565b81518152908301908301613445565b519063ffffffff8216820361034a57565b809103906101a0821261034a5760806040519261348f846131f2565b1261034a576040516134a08161320f565b6134a9826132d4565b81526134b7602083016132d4565b60208201526134c8604083016132d4565b60408201526134d9606083016132d4565b606082015282526080810151602083015260a0810151604083015260c0810151606083015260e081015164ffffffffff8116810361034a57608083015261356d6101806101009261352b848201613462565b60a08601526101209361353f8583016132d4565b60c087015261355161014083016132d4565b60e087015261356361016083016132d4565b90860152016132d4565b9082015290565b919082604091031261034a576020825192015190565b9081602091031261034a57516001600160a01b038116810361034a579056fea2646970667358221220a4ef6c33246ed815be6e6e4f48ee6c7f1d4dc2d2994dfd395e937950d089d6fc64736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP1 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0xFDFA13 EQ PUSH2 0x2F63 JUMPI POP DUP1 PUSH4 0x387587D EQ PUSH2 0x2668 JUMPI DUP1 PUSH4 0x98401F5 EQ PUSH2 0x2EE2 JUMPI DUP1 PUSH4 0x13D21CDF EQ PUSH2 0x2C37 JUMPI DUP1 PUSH4 0x13EF8A5D EQ PUSH2 0x2BB6 JUMPI DUP1 PUSH4 0x15E32046 EQ PUSH2 0x2A99 JUMPI DUP1 PUSH4 0x1BA0AE45 EQ PUSH2 0x296D JUMPI DUP1 PUSH4 0x20C1FB7A EQ PUSH2 0x28E8 JUMPI DUP1 PUSH4 0x26A8A991 EQ PUSH2 0x2869 JUMPI DUP1 PUSH4 0x295F0540 EQ PUSH2 0x27A5 JUMPI DUP1 PUSH4 0x2E42F4D5 EQ PUSH2 0x2726 JUMPI DUP1 PUSH4 0x4021FE0F EQ PUSH2 0x266D JUMPI DUP1 PUSH4 0x4AFBAF5A EQ PUSH2 0x2668 JUMPI DUP1 PUSH4 0x4D472BDD EQ PUSH2 0x2351 JUMPI DUP1 PUSH4 0x4F037EE7 EQ PUSH2 0x2292 JUMPI DUP1 PUSH4 0x532CEC7C EQ PUSH2 0x21FE JUMPI DUP1 PUSH4 0x535CFD8A EQ PUSH2 0x211C JUMPI DUP1 PUSH4 0x53956AA2 EQ PUSH2 0x209D JUMPI DUP1 PUSH4 0x55CBA7FE EQ PUSH2 0x201C JUMPI DUP1 PUSH4 0x67E0E076 EQ PUSH2 0x1E9C JUMPI DUP1 PUSH4 0x6844846B EQ PUSH2 0x1E08 JUMPI DUP1 PUSH4 0x6C9BC732 EQ PUSH2 0x1D3E JUMPI DUP1 PUSH4 0x7E361BDE EQ PUSH2 0x1C25 JUMPI DUP1 PUSH4 0x8380EDB7 EQ PUSH2 0x1B69 JUMPI DUP1 PUSH4 0x85C8C015 EQ PUSH2 0x1A77 JUMPI DUP1 PUSH4 0x85E0B999 EQ PUSH2 0x19C3 JUMPI DUP1 PUSH4 0x85F2DBD4 EQ PUSH2 0x1920 JUMPI DUP1 PUSH4 0x8A8D123A EQ PUSH2 0x1860 JUMPI DUP1 PUSH4 0x8D928AF8 EQ PUSH2 0x181D JUMPI DUP1 PUSH4 0x8F4AB9CA EQ PUSH2 0x1704 JUMPI DUP1 PUSH4 0x927DA105 EQ PUSH2 0x164B JUMPI DUP1 PUSH4 0x9385E39A EQ PUSH2 0x15A6 JUMPI DUP1 PUSH4 0x96787092 EQ PUSH2 0x1513 JUMPI DUP1 PUSH4 0x9E825FF5 EQ PUSH2 0x144D JUMPI DUP1 PUSH4 0xA8175B27 EQ PUSH2 0x13CC JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0x12F8 JUMPI DUP1 PUSH4 0xACE9B89B EQ PUSH2 0x1261 JUMPI DUP1 PUSH4 0xB45090F9 EQ PUSH2 0x11CE JUMPI DUP1 PUSH4 0xB4AEF0AB EQ PUSH2 0x110C JUMPI DUP1 PUSH4 0xB9A8EFFA EQ PUSH2 0x1047 JUMPI DUP1 PUSH4 0xBE7D628A EQ PUSH2 0xFB0 JUMPI DUP1 PUSH4 0xC673BDAF EQ PUSH2 0xEE0 JUMPI DUP1 PUSH4 0xC9C1661B EQ PUSH2 0xDE9 JUMPI DUP1 PUSH4 0xCA4F2803 EQ PUSH2 0xCFE JUMPI DUP1 PUSH4 0xCD51C12F EQ PUSH2 0xC38 JUMPI DUP1 PUSH4 0xCE8630D4 EQ PUSH2 0x9E6 JUMPI DUP1 PUSH4 0xD0965A6B EQ PUSH2 0x965 JUMPI DUP1 PUSH4 0xDB817187 EQ PUSH2 0x8E4 JUMPI DUP1 PUSH4 0xDC3F574E EQ PUSH2 0x830 JUMPI DUP1 PUSH4 0xE2CB0BA0 EQ PUSH2 0x7AF JUMPI DUP1 PUSH4 0xE4DC2AA4 EQ PUSH2 0x71C JUMPI DUP1 PUSH4 0xE9DDEB26 EQ PUSH2 0x5E9 JUMPI DUP1 PUSH4 0xF2784E07 EQ PUSH2 0x528 JUMPI DUP1 PUSH4 0xF29486A1 EQ PUSH2 0x365 JUMPI PUSH4 0xF7888AEC EQ PUSH2 0x27A JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH2 0x293 PUSH2 0x2FCA JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x29E PUSH2 0x2FE0 JUMP JUMPDEST SWAP3 PUSH1 0x44 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP1 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH32 0xF7888AEC00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE AND PUSH1 0x4 DUP6 ADD MSTORE AND PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x34E JUMPI JUMPDEST DUP2 PUSH2 0x339 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH2 0x314 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x32C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x524 JUMPI PUSH2 0x380 PUSH2 0x2FCA JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x38E DUP3 PUSH2 0x31F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39A DUP2 PUSH2 0x320F JUMP JUMPDEST DUP2 DUP2 MSTORE DUP2 DUP5 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE DUP3 MSTORE DUP1 DUP4 DUP4 ADD MSTORE DUP1 PUSH1 0x40 DUP4 ADD MSTORE DUP1 PUSH1 0x60 DUP4 ADD MSTORE DUP1 PUSH1 0x80 DUP4 ADD MSTORE DUP1 PUSH1 0xA0 DUP4 ADD MSTORE DUP1 PUSH1 0xC0 DUP4 ADD MSTORE DUP1 PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP2 DUP2 DUP5 ADD MSTORE DUP2 PUSH2 0x120 DUP1 SWAP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP3 PUSH32 0xF29486A100000000000000000000000000000000000000000000000000000000 DUP5 MSTORE AND PUSH1 0x4 DUP4 ADD MSTORE DUP2 PUSH1 0x24 PUSH2 0x1A0 SWAP9 DUP10 SWAP4 PUSH32 0x0 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x356 JUMPI SWAP3 PUSH2 0x4F5 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP4 PUSH1 0x60 DUP4 MLOAD DUP1 MLOAD ISZERO ISZERO DUP8 MSTORE DUP3 DUP2 ADD MLOAD ISZERO ISZERO DUP4 DUP9 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0x40 DUP9 ADD MSTORE ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP7 ADD MSTORE DUP3 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH5 0xFFFFFFFFFF PUSH1 0x80 DUP4 ADD MLOAD AND PUSH1 0xE0 DUP6 ADD MSTORE PUSH4 0xFFFFFFFF PUSH1 0xA0 DUP4 ADD MLOAD AND DUP2 DUP6 ADD MSTORE PUSH1 0xC0 DUP3 ADD MLOAD ISZERO ISZERO DUP4 DUP6 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD ISZERO ISZERO PUSH2 0x140 DUP6 ADD MSTORE DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x160 DUP5 ADD MSTORE ADD MLOAD ISZERO ISZERO PUSH2 0x180 DUP3 ADD MSTORE RETURN JUMPDEST PUSH2 0x516 SWAP2 SWAP3 POP DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x51D JUMPI JUMPDEST PUSH2 0x50E DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3473 JUMP JUMPDEST SWAP1 PUSH0 PUSH2 0x45C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x504 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0x547 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF2784E0700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI SWAP2 PUSH2 0x5BC JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x5E2 JUMPI JUMPDEST PUSH2 0x5D3 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI MLOAD PUSH0 PUSH2 0x5B3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x5C9 JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x524 JUMPI PUSH2 0x604 PUSH2 0x2FCA JUMP JUMPDEST DUP3 PUSH1 0x40 DUP1 MLOAD PUSH2 0x612 DUP2 PUSH2 0x31D6 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 DUP6 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH1 0x40 MLOAD SWAP2 PUSH32 0xE9DDEB2600000000000000000000000000000000000000000000000000000000 DUP4 MSTORE AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x60 DUP2 PUSH1 0x24 DUP2 DUP6 PUSH32 0x0 AND GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP5 PUSH2 0x6B0 JUMPI JUMPDEST POP POP PUSH1 0x40 PUSH1 0x60 SWAP4 DUP2 MLOAD SWAP4 DUP4 DUP3 MLOAD AND DUP6 MSTORE DUP4 DUP2 DUP4 ADD MLOAD AND SWAP1 DUP6 ADD MSTORE ADD MLOAD AND PUSH1 0x40 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 SWAP4 POP PUSH1 0x60 DUP5 RETURNDATASIZE PUSH1 0x60 GT PUSH2 0x714 JUMPI JUMPDEST DUP2 PUSH2 0x6CC PUSH1 0x60 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP PUSH1 0x40 PUSH1 0x60 SWAP4 PUSH2 0x70A DUP3 DUP1 MLOAD SWAP3 PUSH2 0x6EA DUP5 PUSH2 0x31D6 JUMP JUMPDEST PUSH2 0x6F3 DUP2 PUSH2 0x32C0 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x700 DUP8 DUP3 ADD PUSH2 0x32C0 JUMP JUMPDEST DUP8 DUP6 ADD MSTORE ADD PUSH2 0x32C0 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE SWAP4 PUSH2 0x68C JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x6BF JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0x73B PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE4DC2AA400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI SWAP2 PUSH2 0x5BC JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xE2CB0BA000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI DUP1 PUSH2 0x84B PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH32 0x0 AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x8DF JUMPI PUSH1 0x24 DUP5 SWAP3 DUP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0xDC3F574E00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE AND PUSH1 0x4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x8D4 JUMPI PUSH2 0x8C4 JUMPI POP RETURN JUMPDEST PUSH2 0x8CD SWAP1 PUSH2 0x31A5 JUMP JUMPDEST PUSH2 0x362 JUMPI DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP POP REVERT JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xDB81718700000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xD0965A6B00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x524 JUMPI PUSH2 0xA01 PUSH2 0x2FCA JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP1 PUSH2 0xA0F DUP3 PUSH2 0x31B9 JUMP JUMPDEST DUP1 DUP3 MSTORE DUP1 DUP4 DUP4 ADD MSTORE DUP1 PUSH1 0x40 DUP4 ADD MSTORE DUP1 PUSH1 0x60 DUP4 ADD MSTORE DUP1 PUSH1 0x80 DUP4 ADD MSTORE DUP1 PUSH1 0xA0 DUP4 ADD MSTORE DUP1 PUSH1 0xC0 DUP4 ADD MSTORE DUP1 PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 SWAP1 DUP1 DUP3 DUP5 ADD MSTORE PUSH2 0x120 DUP2 DUP2 DUP6 ADD MSTORE DUP2 PUSH2 0x140 DUP1 SWAP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 PUSH1 0x40 MLOAD SWAP8 PUSH32 0xCE8630D400000000000000000000000000000000000000000000000000000000 DUP10 MSTORE AND PUSH1 0x4 DUP9 ADD MSTORE PUSH2 0x160 SWAP7 DUP8 DUP2 PUSH1 0x24 DUP2 DUP9 PUSH32 0x0 AND GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x356 JUMPI SWAP1 DUP2 DUP8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP5 PUSH2 0xB48 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP7 DUP4 MLOAD ISZERO ISZERO DUP9 MSTORE DUP1 DUP5 ADD MLOAD ISZERO ISZERO SWAP1 DUP9 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x40 DUP9 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP9 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP9 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0xE0 DUP9 ADD MSTORE DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP8 ADD MSTORE DUP1 DUP3 ADD MLOAD ISZERO ISZERO SWAP1 DUP7 ADD MSTORE ADD MLOAD AND SWAP1 DUP3 ADD MSTORE RETURN JUMPDEST SWAP2 SWAP5 POP SWAP2 SWAP3 POP DUP8 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xC31 JUMPI JUMPDEST PUSH2 0xB63 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP SWAP1 DUP5 SWAP3 SWAP2 PUSH2 0xC25 DUP5 PUSH1 0x40 MLOAD SWAP3 PUSH2 0xB81 DUP5 PUSH2 0x31B9 JUMP JUMPDEST PUSH2 0xB8A DUP2 PUSH2 0x32D4 JUMP JUMPDEST DUP5 MSTORE PUSH2 0xB97 DUP11 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST DUP11 DUP6 ADD MSTORE PUSH2 0xBA7 PUSH1 0x40 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0xBB8 PUSH1 0x60 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0xBC9 PUSH1 0x80 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0xBDA PUSH1 0xA0 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0xBEB PUSH1 0xC0 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0xBFC PUSH1 0xE0 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0xC0C DUP7 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST DUP7 DUP6 ADD MSTORE PUSH2 0xC1B DUP6 DUP3 ADD PUSH2 0x32D4 JUMP JUMPDEST DUP6 DUP6 ADD MSTORE ADD PUSH2 0x32C0 JUMP JUMPDEST DUP5 DUP3 ADD MSTORE SWAP2 PUSH0 DUP1 PUSH2 0xACD JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xB59 JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xCD51C12F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP2 PUSH2 0xCC1 JUMPI JUMPDEST PUSH1 0x20 DUP3 PUSH4 0xFFFFFFFF PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST SWAP1 POP PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xCF6 JUMPI JUMPDEST DUP2 PUSH2 0xCDC PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP PUSH2 0xCF0 PUSH1 0x20 SWAP2 PUSH2 0x3462 JUMP JUMPDEST PUSH0 PUSH2 0xCB0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xCCF JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI DUP1 PUSH1 0x24 SWAP2 PUSH2 0xD1C PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCA4F280300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP4 DUP5 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP2 PUSH2 0xDA3 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 SWAP1 PUSH2 0xD9F SWAP1 DUP3 ADD DUP6 PUSH2 0x3284 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 POP RETURNDATASIZE DUP1 DUP3 DUP5 RETURNDATACOPY PUSH2 0xDB4 DUP2 DUP5 PUSH2 0x322B JUMP JUMPDEST DUP3 ADD SWAP2 PUSH1 0x20 DUP2 DUP5 SUB SLT PUSH2 0x524 JUMPI DUP1 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x362 JUMPI POP SWAP2 PUSH2 0xDE3 SWAP2 PUSH2 0xD9F SWAP4 ADD PUSH2 0x32E1 JUMP JUMPDEST PUSH0 PUSH2 0xD89 JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH2 0xE59 SWAP1 PUSH1 0x40 PUSH2 0xE09 PUSH2 0x2FCA JUMP JUMPDEST PUSH2 0xE11 PUSH2 0x2FE0 JUMP JUMPDEST DUP3 MLOAD PUSH32 0xC9C1661B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP3 DUP4 SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0xED3 JUMPI PUSH1 0x40 SWAP3 DUP3 SWAP2 PUSH2 0xEA4 JUMPI JUMPDEST POP DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 POP PUSH2 0xEC6 SWAP2 POP DUP3 RETURNDATASIZE DUP5 GT PUSH2 0xECC JUMPI JUMPDEST PUSH2 0xEBE DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3574 JUMP JUMPDEST PUSH0 PUSH2 0xE97 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xEB4 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0xEFF PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xC673BDAF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP3 PUSH2 0xF78 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP DUP3 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xFA9 JUMPI JUMPDEST PUSH2 0xF90 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP PUSH2 0xFA2 SWAP1 PUSH2 0x32D4 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xF6C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xF86 JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0xFCF PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBE7D628A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP3 PUSH2 0xF78 JUMPI POP POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB9A8EFFA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP4 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP3 PUSH2 0x10CD JUMPI JUMPDEST PUSH1 0x20 DUP4 DUP4 PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP4 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1104 JUMPI JUMPDEST DUP2 PUSH2 0x10E9 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP PUSH2 0x10FD PUSH1 0x20 SWAP3 PUSH2 0x32C0 JUMP JUMPDEST SWAP1 PUSH0 PUSH2 0x10C0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x10DC JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xB4AEF0AB00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP2 PUSH2 0x1191 JUMPI JUMPDEST PUSH1 0x20 DUP3 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 POP PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x11C6 JUMPI JUMPDEST DUP2 PUSH2 0x11AC PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP PUSH2 0x11C0 PUSH1 0x20 SWAP2 PUSH2 0x32D4 JUMP JUMPDEST PUSH0 PUSH2 0x1184 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x119F JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0x11ED PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB45090F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI SWAP2 PUSH2 0x5BC JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0x1280 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xACE9B89B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP3 PUSH2 0xF78 JUMPI POP POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x13C1 JUMPI DUP4 SWAP3 PUSH2 0x137C JUMPI PUSH1 0x20 DUP4 DUP4 PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x13B9 JUMPI JUMPDEST DUP2 PUSH2 0x1398 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x13B5 JUMPI MLOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x13B5 JUMPI PUSH1 0x20 SWAP3 POP SWAP1 PUSH0 PUSH2 0x10C0 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x138B JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xA8175B2700000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0x146C PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9E825FF500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI DUP1 SWAP3 PUSH2 0x14E3 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP DUP3 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x150C JUMPI JUMPDEST PUSH2 0x14FB DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x362 JUMPI POP MLOAD PUSH0 DUP1 PUSH2 0x14D9 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x14F1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH1 0x24 DUP3 PUSH2 0x1532 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9678709200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x356 JUMPI SWAP2 PUSH2 0x5BC JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH2 0x15C0 PUSH2 0x2FCA JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x15CB PUSH2 0x2FE0 JUMP JUMPDEST SWAP3 PUSH1 0x44 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP1 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH32 0x9385E39A00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE AND PUSH1 0x4 DUP6 ADD MSTORE AND PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x362 JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x362 JUMPI PUSH2 0x1665 PUSH2 0x2FCA JUMP JUMPDEST SWAP1 PUSH2 0x166E PUSH2 0x2FE0 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x34A JUMPI PUSH1 0x20 SWAP3 DUP3 PUSH1 0x64 SWAP3 DUP2 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP7 DUP8 SWAP6 PUSH32 0x927DA10500000000000000000000000000000000000000000000000000000000 DUP8 MSTORE AND PUSH1 0x4 DUP7 ADD MSTORE AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x356 JUMPI SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x171E PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x40 MLOAD PUSH32 0x85F2DBD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 DUP7 PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI DUP4 SWAP2 PUSH0 SWAP2 PUSH2 0x17EE JUMPI JUMPDEST POP AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x34A JUMPI PUSH1 0x24 PUSH0 SWAP3 DUP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH32 0x8F4AB9CA00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE AND PUSH1 0x4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH2 0x17D7 JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0x17E1 SWAP2 POP PUSH2 0x31A5 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x1810 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1816 JUMPI JUMPDEST PUSH2 0x1808 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x358A JUMP JUMPDEST PUSH0 PUSH2 0x1787 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x17FE JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8A8D123A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x18E6 JUMPI JUMPDEST PUSH1 0x20 SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1918 JUMPI JUMPDEST DUP2 PUSH2 0x1900 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH2 0x1913 PUSH1 0x20 SWAP2 PUSH2 0x3462 JUMP JUMPDEST PUSH2 0x18D5 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x18F3 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x85F2DBD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH1 0x20 SWAP3 PUSH0 SWAP3 PUSH2 0x19A4 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH2 0x19BC SWAP2 SWAP3 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x1816 JUMPI PUSH2 0x1808 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST SWAP1 DUP4 PUSH2 0x199A JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x1A32 PUSH1 0x20 PUSH2 0x19E1 PUSH2 0x2FCA JUMP JUMPDEST PUSH2 0x19E9 PUSH2 0x2FE0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x85E0B99900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP2 DUP3 SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x85C8C01500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH0 SWAP1 PUSH0 SWAP1 PUSH2 0x1B11 JUMPI JUMPDEST PUSH1 0x60 SWAP4 POP PUSH1 0x40 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH4 0xFFFFFFFF DUP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE RETURN JUMPDEST POP POP POP PUSH1 0x60 DUP2 RETURNDATASIZE PUSH1 0x60 GT PUSH2 0x1B61 JUMPI JUMPDEST DUP2 PUSH2 0x1B2D PUSH1 0x60 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI DUP1 PUSH2 0x1B41 PUSH1 0x60 SWAP3 PUSH2 0x32D4 JUMP JUMPDEST PUSH2 0x1B59 PUSH1 0x40 PUSH2 0x1B52 PUSH1 0x20 DUP6 ADD PUSH2 0x3462 JUMP JUMPDEST SWAP4 ADD PUSH2 0x3462 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 PUSH2 0x1AF0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1B20 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8380EDB700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x1BEB JUMPI JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1C1D JUMPI JUMPDEST DUP2 PUSH2 0x1C05 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH2 0x1C18 PUSH1 0x20 SWAP2 PUSH2 0x32D4 JUMP JUMPDEST PUSH2 0x1BDE JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1BF8 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 PUSH0 PUSH2 0x1C41 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x7E361BDE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH0 SWAP3 PUSH2 0x1CDA JUMPI JUMPDEST POP PUSH2 0xD9F PUSH2 0x1CCC SWAP3 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x3156 JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x1CEC DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x40 DUP2 DUP4 SUB SLT PUSH2 0x34A JUMPI DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP4 PUSH2 0x1D18 SWAP2 DUP5 ADD PUSH2 0x3401 JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP2 ADD MLOAD SWAP2 DUP3 GT PUSH2 0x34A JUMPI PUSH2 0x1CCC SWAP4 PUSH2 0xD9F SWAP3 PUSH2 0x1D37 SWAP3 ADD PUSH2 0x3401 JUMP JUMPDEST SWAP3 POP PUSH2 0x1CB0 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 DUP2 PUSH2 0x1D5B PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6C9BC73200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP2 PUSH2 0x1DD3 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1E01 JUMPI JUMPDEST PUSH2 0x1DEA DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH2 0x1DFB SWAP1 PUSH2 0x32D4 JUMP JUMPDEST DUP3 PUSH2 0x1DC8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1DE0 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 DUP2 PUSH2 0x1E25 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6844846B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP2 PUSH2 0x1DD3 JUMPI POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 PUSH0 PUSH2 0x1EB8 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x67E0E07600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH0 PUSH0 SWAP2 PUSH0 SWAP5 PUSH2 0x1F78 JUMPI JUMPDEST POP SWAP3 PUSH2 0x1F6A PUSH2 0xD9F SWAP3 PUSH2 0x1F5C PUSH2 0x1F4E SWAP7 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 PUSH1 0x80 DUP10 MSTORE PUSH1 0x80 DUP10 ADD SWAP1 PUSH2 0x3284 JUMP JUMPDEST SWAP1 DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x30F5 JUMP JUMPDEST SWAP1 DUP6 DUP3 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST SWAP4 POP POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x1F8C DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x34A JUMPI DUP2 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP2 GT PUSH2 0x34A JUMPI DUP3 PUSH2 0x1FB8 SWAP2 DUP4 ADD PUSH2 0x32E1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD DUP5 DUP2 GT PUSH2 0x34A JUMPI DUP4 PUSH2 0x1FD0 SWAP2 DUP5 ADD PUSH2 0x3352 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP4 ADD MLOAD DUP6 DUP2 GT PUSH2 0x34A JUMPI DUP2 PUSH2 0x1FE9 SWAP2 DUP6 ADD PUSH2 0x3401 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP5 ADD MLOAD SWAP6 DUP7 GT PUSH2 0x34A JUMPI PUSH2 0x1F5C PUSH2 0x200E PUSH2 0x1F6A SWAP4 PUSH2 0x1F4E SWAP9 PUSH2 0xD9F SWAP8 ADD PUSH2 0x3401 JUMP JUMPDEST SWAP2 SWAP6 SWAP4 SWAP2 SWAP7 POP POP SWAP3 POP PUSH2 0x1F2A JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x55CBA7FE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x1BEB JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x53956AA200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 PUSH0 PUSH2 0x2138 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x535CFD8A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x21BC JUMPI JUMPDEST PUSH2 0xD9F SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x3156 JUMP JUMPDEST POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x21CC DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x34A JUMPI DUP1 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x34A JUMPI PUSH2 0xD9F SWAP3 PUSH2 0x21F9 SWAP3 ADD PUSH2 0x3401 JUMP JUMPDEST PUSH2 0x21A4 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 DUP2 PUSH2 0x221B PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x532CEC7C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP2 PUSH2 0x1DD3 JUMPI POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 DUP2 PUSH2 0x22AF PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x4F037EE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP2 PUSH2 0x2324 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x234A JUMPI JUMPDEST PUSH2 0x233B DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI MLOAD DUP3 PUSH2 0x5B3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2331 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x3 NOT PUSH1 0x40 DUP2 CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x236B PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x34A JUMPI PUSH1 0xE0 SWAP1 DUP3 CALLDATASIZE SUB ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2398 DUP5 PUSH2 0x3189 JUMP JUMPDEST DUP2 PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x34A JUMPI DUP5 MSTORE PUSH1 0x24 DUP3 ADD CALLDATALOAD PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x44 DUP3 ADD CALLDATALOAD DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP3 ADD CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x34A JUMPI PUSH1 0x4 DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0x23DA DUP3 PUSH2 0x326C JUMP JUMPDEST SWAP2 PUSH2 0x23E8 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x322B JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x24 PUSH1 0x20 DUP5 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0x34A JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x2658 JUMPI POP POP POP PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x64 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x84 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA4 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x34A JUMPI PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC4 DUP3 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT PUSH2 0x34A JUMPI CALLDATASIZE PUSH1 0x23 DUP4 DUP6 ADD ADD SLT ISZERO PUSH2 0x34A JUMPI PUSH1 0x4 DUP3 DUP5 ADD ADD CALLDATALOAD GT PUSH2 0x262B JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x24A4 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x4 DUP7 DUP9 ADD ADD CALLDATALOAD ADD AND ADD DUP6 PUSH2 0x322B JUMP JUMPDEST DUP3 DUP3 ADD PUSH1 0x4 DUP2 ADD CALLDATALOAD DUP1 DUP7 MSTORE CALLDATASIZE SWAP2 ADD PUSH1 0x24 ADD GT PUSH2 0x34A JUMPI PUSH1 0x20 SWAP4 PUSH0 DUP6 PUSH1 0x4 DUP6 DUP8 DUP3 DUP5 SWAP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP11 ADD ADD CALLDATALOAD PUSH1 0x24 DUP4 DUP4 ADD ADD DUP6 DUP9 ADD CALLDATACOPY ADD ADD CALLDATALOAD DUP4 ADD ADD MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0x4D472BDD00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP4 ADD MSTORE DUP1 MLOAD PUSH2 0x252B DUP2 PUSH2 0x30BE JUMP JUMPDEST PUSH1 0x44 DUP4 ADD MSTORE DUP3 DUP2 ADD MLOAD PUSH1 0x64 DUP4 ADD MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 PUSH1 0xC0 PUSH2 0x2579 PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0xE0 PUSH1 0x84 DUP10 ADD MSTORE PUSH2 0x124 DUP9 ADD SWAP1 PUSH2 0x3156 JUMP JUMPDEST SWAP5 PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA4 DUP9 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC4 DUP9 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP3 ADD MLOAD AND PUSH1 0xE4 DUP9 ADD MSTORE ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBC DUP7 DUP7 SUB ADD PUSH2 0x104 DUP8 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP8 MSTORE ADD DUP8 DUP7 ADD MCOPY PUSH0 DUP7 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD SUB ADD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x2405 JUMP JUMPDEST PUSH2 0x2FF6 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x24 PUSH1 0x40 PUSH2 0x268A PUSH2 0x2FCA JUMP JUMPDEST DUP2 MLOAD PUSH32 0x4021FE0F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH1 0x40 SWAP2 PUSH0 SWAP2 PUSH0 SWAP2 PUSH2 0x2707 JUMPI POP DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 POP PUSH2 0x2720 SWAP2 POP DUP3 RETURNDATASIZE DUP5 GT PUSH2 0xECC JUMPI PUSH2 0xEBE DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP4 PUSH2 0xE97 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E42F4D500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x27BE PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH32 0xF29486A100000000000000000000000000000000000000000000000000000000 DUP5 MSTORE AND PUSH1 0x4 DUP4 ADD MSTORE DUP2 PUSH1 0x24 PUSH2 0x1A0 SWAP5 DUP6 SWAP4 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH1 0x40 SWAP3 PUSH0 SWAP3 PUSH2 0x284C JUMPI JUMPDEST POP POP PUSH1 0x60 DUP3 DUP3 ADD MLOAD SWAP2 ADD MLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST PUSH2 0x2862 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x51D JUMPI PUSH2 0x50E DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP3 DUP1 PUSH2 0x2835 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x26A8A99100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x31F JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x20C1FB7A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x18E6 JUMPI PUSH1 0x20 SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 MLOAD SWAP1 PUSH32 0xB9A8EFFA00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 DUP2 PUSH1 0x4 DUP2 DUP6 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI DUP3 SWAP2 DUP5 SWAP2 PUSH0 SWAP2 PUSH2 0x2A62 JUMPI JUMPDEST POP PUSH1 0x4 PUSH1 0x40 MLOAD DUP1 SWAP6 DUP2 SWAP4 PUSH32 0x1BA0AE4500000000000000000000000000000000000000000000000000000000 DUP4 MSTORE AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP3 PUSH2 0x2A32 JUMPI POP PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP DUP3 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2A5B JUMPI JUMPDEST PUSH2 0x2A4A DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH2 0x19BC SWAP1 PUSH2 0x32C0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2A40 JUMP JUMPDEST SWAP3 POP POP DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2A92 JUMPI JUMPDEST PUSH2 0x2A79 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI DUP3 PUSH2 0x2A8C DUP4 SWAP3 PUSH2 0x32C0 JUMP JUMPDEST DUP6 PUSH2 0x29EB JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2A6F JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x2AB2 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x40 MLOAD SWAP3 PUSH32 0x15E3204600000000000000000000000000000000000000000000000000000000 DUP5 MSTORE AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x80 DUP3 PUSH1 0x24 DUP2 DUP5 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP2 PUSH0 PUSH0 SWAP5 PUSH0 SWAP3 PUSH2 0x2B4D JUMPI JUMPDEST POP PUSH1 0x80 SWAP5 PUSH1 0x40 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH4 0xFFFFFFFF DUP1 SWAP3 AND PUSH1 0x20 DUP7 ADD MSTORE AND PUSH1 0x40 DUP5 ADD MSTORE AND PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST SWAP4 POP POP POP SWAP2 POP PUSH1 0x80 DUP2 RETURNDATASIZE PUSH1 0x80 GT PUSH2 0x2BAE JUMPI JUMPDEST DUP2 PUSH2 0x2B6C PUSH1 0x80 SWAP4 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH1 0x80 SWAP2 PUSH2 0x2B80 DUP3 PUSH2 0x32D4 JUMP JUMPDEST PUSH2 0x2B8C PUSH1 0x20 DUP5 ADD PUSH2 0x3462 JUMP JUMPDEST SWAP3 PUSH2 0x2BA5 PUSH1 0x60 PUSH2 0x2B9E PUSH1 0x40 DUP5 ADD PUSH2 0x3462 JUMP JUMPDEST SWAP3 ADD PUSH2 0x32C0 JUMP JUMPDEST SWAP2 SWAP4 SWAP1 SWAP5 PUSH2 0x2B26 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x2B5F JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x13EF8A5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x1BEB JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x2C51 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0xC0 PUSH1 0x40 MLOAD PUSH2 0x2C5F DUP2 PUSH2 0x3189 JUMP JUMPDEST PUSH0 DUP2 MSTORE PUSH1 0x60 SWAP2 DUP2 DUP4 DUP7 DUP2 SWAP5 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 DUP1 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH1 0x40 MLOAD SWAP4 PUSH32 0x13D21CDF00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE AND PUSH1 0x4 DUP5 ADD MSTORE PUSH0 DUP4 PUSH1 0x24 DUP2 DUP6 PUSH32 0x0 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP4 PUSH2 0x2DE6 JUMPI JUMPDEST POP SWAP3 PUSH1 0x40 SWAP3 SWAP2 SWAP3 MLOAD SWAP4 DUP5 SWAP4 DUP3 DUP6 MSTORE PUSH2 0x100 DUP6 ADD DUP5 MLOAD DUP5 DUP8 ADD MSTORE DUP4 DUP6 ADD MLOAD SWAP4 PUSH1 0xE0 PUSH1 0x40 DUP9 ADD MSTORE DUP5 MLOAD DUP1 SWAP3 MSTORE DUP1 PUSH2 0x120 DUP9 ADD SWAP6 ADD SWAP3 PUSH0 SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x2DC9 JUMPI DUP9 DUP1 PUSH2 0xD9F DUP11 DUP11 PUSH1 0xC0 PUSH2 0x2DB7 PUSH2 0x2DA4 PUSH2 0x2D90 DUP15 PUSH2 0x2D7D PUSH1 0x40 DUP9 ADD MLOAD SWAP7 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP8 DUP9 DUP13 DUP4 SUB ADD DUP5 DUP14 ADD MSTORE PUSH2 0x30F5 JUMP JUMPDEST SWAP1 DUP8 ADD MLOAD DUP7 DUP11 DUP4 SUB ADD PUSH1 0x80 DUP12 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST PUSH1 0x80 DUP7 ADD MLOAD DUP6 DUP10 DUP4 SUB ADD PUSH1 0xA0 DUP11 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MLOAD DUP5 DUP9 DUP4 SUB ADD DUP5 DUP10 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 DUP5 DUP4 SUB ADD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x3156 JUMP JUMPDEST DUP5 MLOAD DUP2 AND DUP8 MSTORE DUP10 SWAP9 POP SWAP6 DUP3 ADD SWAP6 SWAP4 DUP3 ADD SWAP4 PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2D2A JUMP JUMPDEST SWAP1 SWAP3 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x2DF8 DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD DUP5 DUP3 DUP3 SUB SLT PUSH2 0x34A JUMPI DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x34A JUMPI ADD SWAP1 PUSH1 0xE0 DUP3 DUP3 SUB SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x2E2F DUP5 PUSH2 0x3189 JUMP JUMPDEST DUP3 MLOAD DUP5 MSTORE DUP7 DUP4 ADD MLOAD DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP3 PUSH2 0x2E4A SWAP2 DUP6 ADD PUSH2 0x32E1 JUMP JUMPDEST DUP8 DUP6 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP3 PUSH2 0x2E66 SWAP2 DUP6 ADD PUSH2 0x3352 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE DUP6 DUP4 ADD MLOAD DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP3 PUSH2 0x2E82 SWAP2 DUP6 ADD PUSH2 0x3401 JUMP JUMPDEST DUP7 DUP6 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP3 PUSH2 0x2E9E SWAP2 DUP6 ADD PUSH2 0x3401 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD DUP2 DUP2 GT PUSH2 0x34A JUMPI DUP3 PUSH2 0x2EBB SWAP2 DUP6 ADD PUSH2 0x3401 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD SWAP1 DUP2 GT PUSH2 0x34A JUMPI PUSH2 0x2ED6 SWAP3 ADD PUSH2 0x3401 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE SWAP2 DUP5 PUSH2 0x2CF4 JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x98401F500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP1 PUSH2 0x1BEB JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH1 0x20 DUP2 DUP1 PUSH2 0x1A32 PUSH2 0x2F83 PUSH2 0x2FCA JUMP JUMPDEST PUSH2 0x2F8B PUSH2 0x2FE0 JUMP JUMPDEST PUSH31 0xFDFA1300000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP6 ADD MSTORE AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x34A JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x34A JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x34A JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x34A JUMPI PUSH2 0x3010 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x40 MLOAD SWAP3 PUSH32 0x4AFBAF5A00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 DUP3 PUSH1 0x24 DUP2 DUP5 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x17E3 JUMPI PUSH0 SWAP3 PUSH2 0x3087 JUMPI POP PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP DUP3 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x30B7 JUMPI JUMPDEST PUSH2 0x309F DUP2 DUP4 PUSH2 0x322B JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x34A JUMPI PUSH2 0x30B0 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP1 PUSH0 PUSH2 0x199A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3095 JUMP JUMPDEST PUSH1 0x2 GT ISZERO PUSH2 0x30C8 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH0 JUMPDEST DUP3 DUP2 LT PUSH2 0x3114 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 DUP3 PUSH1 0x60 PUSH1 0x1 SWAP3 DUP8 MLOAD DUP1 MLOAD PUSH2 0x312B DUP2 PUSH2 0x30BE JUMP JUMPDEST DUP3 MSTORE DUP1 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP4 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP1 DUP3 ADD MSTORE ADD SWAP6 ADD SWAP4 SWAP3 SWAP2 ADD PUSH2 0x3106 JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH0 JUMPDEST DUP3 DUP2 LT PUSH2 0x3175 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x3167 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x160 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x140 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x262B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x262B JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH0 JUMPDEST DUP3 DUP2 LT PUSH2 0x32A3 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x3295 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x34A JUMPI JUMP JUMPDEST MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x34A JUMPI JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x34A JUMPI DUP2 MLOAD SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x32FC DUP2 PUSH2 0x326C JUMP JUMPDEST SWAP4 PUSH2 0x330A PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x322B JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x34A JUMPI PUSH1 0x20 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x3333 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x34A JUMPI DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x3325 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x34A JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 PUSH2 0x336B DUP4 PUSH2 0x326C JUMP JUMPDEST SWAP4 PUSH1 0x40 PUSH2 0x337B PUSH1 0x40 MLOAD SWAP7 DUP8 PUSH2 0x322B JUMP JUMPDEST DUP5 DUP7 MSTORE DUP3 DUP7 ADD SWAP2 DUP4 PUSH1 0x60 DUP1 SWAP8 MUL DUP7 ADD ADD SWAP5 DUP2 DUP7 GT PUSH2 0x34A JUMPI DUP5 ADD SWAP3 JUMPDEST DUP6 DUP5 LT PUSH2 0x33A8 JUMPI POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP7 DUP5 DUP4 SUB SLT PUSH2 0x34A JUMPI DUP3 MLOAD SWAP1 PUSH2 0x33BD DUP3 PUSH2 0x31D6 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x34A JUMPI DUP3 MSTORE DUP6 DUP6 ADD MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x34A JUMPI DUP3 DUP8 SWAP3 DUP4 DUP12 SWAP6 ADD MSTORE PUSH2 0x33F2 DUP7 DUP9 ADD PUSH2 0x32D4 JUMP JUMPDEST DUP7 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP3 PUSH2 0x3397 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x34A JUMPI DUP2 MLOAD SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x341C DUP2 PUSH2 0x326C JUMP JUMPDEST SWAP4 PUSH2 0x342A PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x322B JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x34A JUMPI PUSH1 0x20 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x3453 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x3445 JUMP JUMPDEST MLOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x34A JUMPI JUMP JUMPDEST DUP1 SWAP2 SUB SWAP1 PUSH2 0x1A0 DUP3 SLT PUSH2 0x34A JUMPI PUSH1 0x80 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x348F DUP5 PUSH2 0x31F2 JUMP JUMPDEST SLT PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH2 0x34A0 DUP2 PUSH2 0x320F JUMP JUMPDEST PUSH2 0x34A9 DUP3 PUSH2 0x32D4 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x34B7 PUSH1 0x20 DUP4 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x34C8 PUSH1 0x40 DUP4 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x34D9 PUSH1 0x60 DUP4 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE DUP3 MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x34A JUMPI PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x356D PUSH2 0x180 PUSH2 0x100 SWAP3 PUSH2 0x352B DUP5 DUP3 ADD PUSH2 0x3462 JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0x120 SWAP4 PUSH2 0x353F DUP6 DUP4 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0xC0 DUP8 ADD MSTORE PUSH2 0x3551 PUSH2 0x140 DUP4 ADD PUSH2 0x32D4 JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MSTORE PUSH2 0x3563 PUSH2 0x160 DUP4 ADD PUSH2 0x32D4 JUMP JUMPDEST SWAP1 DUP7 ADD MSTORE ADD PUSH2 0x32D4 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x34A JUMPI PUSH1 0x20 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x34A JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x34A JUMPI SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0xEF PUSH13 0x33246ED815BE6E6E4F48EE6C7F SAR 0x4D 0xC2 0xD2 SWAP10 0x4D REVERT CODECOPY MCOPY SWAP4 PUSH26 0x50D089D6FC64736F6C634300081B003300000000000000000000 ","sourceMap":"685:13995:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11905:22;685:13995;11905:22;;;685:13995;;;;;9681:35;685:13995;9681:35;;;7221:31;685:13995;7221:31;;;1488:26;685:13995;1488:26;;;10261:32;685:13995;10261:32;;;11517:36;685:13995;11517:36;;;685:13995;;;;;10781:29;685:13995;10781:29;;;685:13995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11136:29;685:13995;11136:29;;;13301:25;685:13995;13301:25;;;685:13995;;;;;;;;;;;;;;;;;;;;2239:19;685:13995;2239:19;;;12157:28;685:13995;12157:28;;;685:13995;;;;;1858:33;685:13995;1858:33;;;10079:30;685:13995;10079:30;;;685:13995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10613:29;685:13995;10613:29;;;1672:22;685:13995;1672:22;;;685:13995;;;;;;;;;;9500:24;685:13995;9500:24;;;1313:26;685:13995;1313:26;;;685:13995;;;;;;;;;;;;;;;;;;;;10443:31;685:13995;10443:31;;;685:13995;;;;;11322:34;685:13995;11322:34;;;2405:29;685:13995;2405:29;;;685:13995;;;;;10959:30;685:13995;10959:30;;;685:13995;;;;;;;;;;;;;;;;5380:26;;;685:13995;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;:::i;:::-;;;;;:::i;:::-;;;-1:-1:-1;;;;;685:13995:16;;;;;6311:32;;;;;685:13995;6311:32;;685:13995;;6311:32;;685:13995;;;;;;6311:6;685:13995;6311:32;;;;;;;;;;685:13995;;;;;;;;;6311:32;;685:13995;6311:32;;685:13995;6311:32;;;;;;685:13995;6311:32;;;:::i;:::-;;;685:13995;;;;;;;6311:32;;685:13995;;;;6311:32;;;-1:-1:-1;6311:32:16;;;685:13995;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;5380:26;;;685:13995;5380:26;;685:13995;;5380:26;;685:13995;5380:26;685:13995;5380:26;:6;;;;685:13995;5380:26;;;;;;;;;;685:13995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5380:26;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;685:13995;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;14165:41;;-1:-1:-1;;;;;685:13995:16;;;;14165:41;;685:13995;;;;;;14165:6;685:13995;14165:41;;;;;;;;;;685:13995;;;;;;;;14165:41;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;14165:41;;;;;;;;685:13995;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;8282:32;685:13995;8282:32;;685:13995;;8282:32;;685:13995;;8282:6;685:13995;8282:6;;;685:13995;8282:32;;;;;;;;;;;685:13995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8282:32;;;;685:13995;8282:32;;685:13995;8282:32;;;;;;685:13995;8282:32;;;:::i;:::-;;;685:13995;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;8282:32;;;;;;-1:-1:-1;8282:32:16;;685:13995;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;6125:25;;-1:-1:-1;;;;;685:13995:16;;;;6125:25;;685:13995;;;;;;6125:6;685:13995;6125:25;;;;;;;;;;685:13995;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;10959:30;685:13995;10959:30;;;:6;685:13995;10959:6;-1:-1:-1;;;;;10959:6:16;685:13995;10959:30;;;;;;;;;;;685:13995;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;:::i;:::-;-1:-1:-1;;;;;9119:6:16;;;685:13995;9119:31;;;;;;685:13995;;;;;;9119:31;;;;;685:13995;9119:31;;685:13995;;9119:31;;685:13995;9119:31;;;;;;;;685:13995;;9119:31;;;;:::i;:::-;685:13995;;9119:31;685:13995;9119:31;685:13995;;;;;;;;;9119:31;685:13995;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;2405:29;685:13995;2405:29;;;:6;685:13995;2405:6;-1:-1:-1;;;;;2405:6:16;685:13995;2405:29;;;;;;;;;;;685:13995;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;11322:34;685:13995;11322:34;;;:6;685:13995;11322:6;-1:-1:-1;;;;;11322:6:16;685:13995;11322:34;;;;;;;;;;;685:13995;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;5564:27;685:13995;5564:27;;685:13995;;5564:27;;685:13995;;5564:6;;;685:13995;5564:6;;;685:13995;5564:27;;;;;;;;;;;;;;;;;685:13995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5564:27;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;5564:27;;;;;;;;;;685:13995;;;;;;-1:-1:-1;;685:13995:16;;;;;;;10443:31;685:13995;10443:31;;;:6;685:13995;10443:6;-1:-1:-1;;;;;10443:6:16;685:13995;10443:31;;;;;;;;;;;685:13995;10443:31;685:13995;;;;;;;;;10443:31;;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;10443:31;685:13995;;:::i;:::-;10443:31;;;;;;-1:-1:-1;10443:31:16;;685:13995;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;;:::i;:::-;;;;3925:26;;-1:-1:-1;;;;;685:13995:16;;;;3925:26;;685:13995;;;;;;3925:6;685:13995;3925:26;;;;;;;;;;;685:13995;;;;;;;;;;;;;;;:::i;:::-;;;;3925:26;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3925:26;;;685:13995;;;;;;-1:-1:-1;;685:13995:16;;;;;4166:52;685:13995;;;;:::i;:::-;;;:::i;:::-;;;;4166:52;;-1:-1:-1;;;;;685:13995:16;;;;4166:52;;685:13995;;;;;;;;;;;;;;;;;4166:52;;:6;-1:-1:-1;;;;;4166:6:16;685:13995;4166:52;;;;;;685:13995;4166:52;;;;;685:13995;;;;;;;;;;;;4166:52;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;685:13995;;;;;;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;3346:29;;-1:-1:-1;;;;;685:13995:16;;;;3346:29;;685:13995;;;;;;3346:6;685:13995;3346:29;;;;;;;;;;;685:13995;;;;;;;;;;;3346:29;;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;;;:::i;:::-;3346:29;;;;;;;;;685:13995;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;8977:33;;-1:-1:-1;;;;;685:13995:16;;;;8977:33;;685:13995;;;;;;8977:6;685:13995;8977:33;;;;;;;;;;;685:13995;;;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;1313:26;;685:13995;-1:-1:-1;;;;;1313:26:16;685:13995;;;1313:6;685:13995;;1313:26;;;;;;;;;;;685:13995;1313:26;685:13995;;;;;;;;;1313:26;;;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;1313:26;685:13995;;:::i;:::-;1313:26;;;;;;;-1:-1:-1;1313:26:16;;685:13995;;;;;;-1:-1:-1;;685:13995:16;;;;;;;9500:24;685:13995;9500:24;;;:6;685:13995;9500:6;-1:-1:-1;;;;;9500:6:16;685:13995;9500:24;;;;;;;;;;;685:13995;9500:24;685:13995;;;;;;;;;9500:24;;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;9500:24;685:13995;;:::i;:::-;9500:24;;;;;;-1:-1:-1;9500:24:16;;685:13995;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;8074:39;;-1:-1:-1;;;;;685:13995:16;;;;8074:39;;685:13995;;;;;;8074:6;685:13995;8074:39;;;;;;;;;;685:13995;;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;2938:38;;-1:-1:-1;;;;;685:13995:16;;;;2938:38;;685:13995;;;;;;2938:6;685:13995;2938:38;;;;;;;;;;;685:13995;;;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;1672:22;;-1:-1:-1;;;;;1672:22:16;685:13995;;;1672:6;685:13995;;1672:22;;;;;;;;;;;;685:13995;;;;;;;;;1672:22;;;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;;;;;;;1672:22;;;;;;;685:13995;;;;1672:22;;;-1:-1:-1;1672:22:16;;;685:13995;;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;10613:29;685:13995;10613:29;;;:6;685:13995;10613:6;-1:-1:-1;;;;;10613:6:16;685:13995;10613:29;;;;;;;;;;;685:13995;;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;2578:27;;-1:-1:-1;;;;;685:13995:16;;;;2578:27;;685:13995;;;;;;2578:6;685:13995;2578:27;;;;;;;;;;;685:13995;;;;;;;;;2578:27;;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;2578:27;;;;;;;;;685:13995;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;2753:27;;-1:-1:-1;;;;;685:13995:16;;;;2753:27;;685:13995;;;;;;2753:6;685:13995;2753:27;;;;;;;;;;685:13995;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;:::i;:::-;;;;;:::i;:::-;;;-1:-1:-1;;;;;685:13995:16;;;;;13945:57;;;;;685:13995;13945:57;;685:13995;;13945:57;;685:13995;;;;;;13945:6;685:13995;13945:57;;;;;;;;;;685:13995;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;685:13995:16;;;;;;;;;;;;;;;;;6521:39;;;;;685:13995;6521:39;;685:13995;;6521:39;;685:13995;;;;;;;;;;6521:6;685:13995;6521:39;;;;;;;;;;685:13995;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;:::i;:::-;-1:-1:-1;;;;;685:13995:16;;;;12884:33;;685:13995;12884:6;685:13995;12884:6;;;685:13995;12884:33;;;;;;;;685:13995;12884:33;;;685:13995;;;12884:60;;;;;;685:13995;;;;;;12884:60;;;;;685:13995;12884:60;;685:13995;;12884:60;;685:13995;12884:60;;;;;;;;685:13995;;;12884:60;;;;;:::i;:::-;685:13995;12884:60;685:13995;;;;;;;;;12884:33;;;;685:13995;12884:33;685:13995;12884:33;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;685:13995;;;;;-1:-1:-1;;685:13995:16;;;;;;;;-1:-1:-1;;;;;1165:6:16;685:13995;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;10079:30;;;:6;685:13995;10079:6;-1:-1:-1;;;;;10079:6:16;685:13995;10079:30;;;;;;685:13995;10079:30;;;685:13995;10079:30;685:13995;;;;;;;;;10079:30;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;10079:30;685:13995;;:::i;:::-;10079:30;;;;;-1:-1:-1;10079:30:16;;685:13995;;;;;-1:-1:-1;;685:13995:16;;;;;;;;1858:33;;-1:-1:-1;;;;;1858:33:16;685:13995;;;1858:6;685:13995;;1858:33;;;;;;;;;685:13995;1858:33;;;685:13995;;;;;;;;;1858:33;;;;;;;;;;;;;;;:::i;:::-;;;;;685:13995;;;;;-1:-1:-1;;685:13995:16;;;;;7642:45;685:13995;;;:::i;:::-;;;:::i;:::-;;;;7642:45;;-1:-1:-1;;;;;685:13995:16;;;;7642:45;;685:13995;;;;;;;;;;;;;;;;;7642:45;;:6;-1:-1:-1;;;;;7642:6:16;685:13995;7642:45;;;;;;685:13995;7642:45;;;685:13995;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;12157:28;;;:6;685:13995;12157:6;-1:-1:-1;;;;;12157:6:16;685:13995;12157:28;;;;;;685:13995;;;;;12157:28;;;685:13995;12157:28;685:13995;;;;;;;;;;;;;;;;;;;;;;;12157:28;;;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;12157:28;685:13995;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;12157:28;;;;;;;;-1:-1:-1;12157:28:16;;685:13995;;;;;-1:-1:-1;;685:13995:16;;;;;;;;2239:19;;;:6;685:13995;2239:6;-1:-1:-1;;;;;2239:6:16;685:13995;2239:19;;;;;;685:13995;2239:19;;;685:13995;2239:19;685:13995;;;;;;;;;2239:19;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;2239:19;685:13995;;:::i;:::-;2239:19;;;;;-1:-1:-1;2239:19:16;;685:13995;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;4430:30;;-1:-1:-1;;;;;685:13995:16;;;;4430:30;;685:13995;;;;;;4430:6;685:13995;4430:30;;;;;;;685:13995;;;4430:30;;;685:13995;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;4430:30::-;;;;;;685:13995;4430:30;;;;;;:::i;:::-;;;685:13995;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;4430:30;;;;685:13995;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;6922:25;;-1:-1:-1;;;;;685:13995:16;;;;6922:25;;685:13995;;;;;;6922:6;685:13995;6922:25;;;;;;;685:13995;6922:25;;;685:13995;;;;;;;;;;6922:25;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;;:::i;:::-;6922:25;;;;;;;;685:13995;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;14624:47;;-1:-1:-1;;;;;685:13995:16;;;;14624:47;;685:13995;;;;;;14624:6;685:13995;14624:47;;;;;;;685:13995;14624:47;;;685:13995;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;4988:29;;-1:-1:-1;;;;;685:13995:16;;;;4988:29;;685:13995;;;;;;4988:6;685:13995;4988:29;;;;;;;685:13995;;;;;;4988:29;;;685:13995;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;4988:29::-;;;;;;;;685:13995;4988:29;;;;;;:::i;:::-;;;685:13995;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4988:29;;;;;;;;;;;685:13995;;;;;-1:-1:-1;;685:13995:16;;;;;;;;13301:25;;;:6;685:13995;13301:6;-1:-1:-1;;;;;13301:6:16;685:13995;13301:25;;;;;;685:13995;13301:25;;;;685:13995;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;11136:29;;;:6;685:13995;11136:6;-1:-1:-1;;;;;11136:6:16;685:13995;11136:29;;;;;;685:13995;11136:29;;;;685:13995;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;5190:35;;-1:-1:-1;;;;;685:13995:16;;;;5190:35;;685:13995;;;;;;5190:6;685:13995;5190:35;;;;;;685:13995;5190:35;;;685:13995;;;;;;;;;;;;;;;;:::i;5190:35::-;;;;685:13995;5190:35;;;;;;:::i;:::-;;;685:13995;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5190:35;;685:13995;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;3746:30;;-1:-1:-1;;;;;685:13995:16;;;;3746:30;;685:13995;;;;;;3746:6;685:13995;3746:30;;;;;;;685:13995;3746:30;;;685:13995;;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;5727:23;;-1:-1:-1;;;;;685:13995:16;;;;5727:23;;685:13995;;;;;;5727:6;685:13995;5727:23;;;;;;;685:13995;5727:23;;;685:13995;;;;;;;5727:23;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;5727:23;;;;;;;;685:13995;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;;;;;;;;;;;;;;;;;;;;;;;8547:56;;;;;685:13995;8547:56;;685:13995;;8547:56;;685:13995;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8547:56;;:6;-1:-1:-1;;;;;8547:6:16;685:13995;8547:56;;;;;;685:13995;8547:56;;;685:13995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;685:13995:16;;;;;;;;;:::i;:::-;;;;14414:37;;-1:-1:-1;;;;;685:13995:16;;;;14414:37;;685:13995;;;;;;14414:6;685:13995;14414:37;;;;;;;685:13995;14414:37;685:13995;;;14414:37;;;685:13995;;;;;;;;;;;14414:37;;;;;;;;;;;;;;;;:::i;:::-;;;;685:13995;;;;;-1:-1:-1;;685:13995:16;;;;;;;;10781:29;;;:6;685:13995;10781:6;-1:-1:-1;;;;;10781:6:16;685:13995;10781:29;;;;;;685:13995;10781:29;;;;685:13995;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;:::i;:::-;-1:-1:-1;;;;;685:13995:16;;;;12650:26;;;685:13995;12650:26;;685:13995;;12650:26;;685:13995;12650:26;685:13995;12650:26;:6;;;;685:13995;12650:26;;;;;;;685:13995;12650:26;685:13995;12650:26;;;685:13995;12695:37;;12734:38;12695:37;;;685:13995;12734:38;;685:13995;;;;;;;;;;;12650:26;;;;;;-1:-1:-1;12650:26:16;;;;;;:::i;:::-;;;;;685:13995;;;;;-1:-1:-1;;685:13995:16;;;;;;;;11517:36;;;:6;685:13995;11517:6;-1:-1:-1;;;;;11517:6:16;685:13995;11517:36;;;;;;685:13995;11517:36;;;;685:13995;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;10261:32;;;:6;685:13995;10261:6;-1:-1:-1;;;;;10261:6:16;685:13995;10261:32;;;;;;685:13995;10261:32;;;;685:13995;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;-1:-1:-1;;;;;685:13995:16;;1488:26;685:13995;1488:26;;;:6;;;685:13995;1488:6;;;685:13995;1488:26;;;;;;;;;;;685:13995;1488:26;;;685:13995;;;;;1472:59;;;;685:13995;1472:59;;685:13995;1472:59;;;;;;;685:13995;1472:59;;;685:13995;;;;;;;;1472:59;;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;;:::i;1472:59::-;;;;;1488:26;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;;;;:::i;:::-;1488:26;;;;;;;;685:13995;;;;;-1:-1:-1;;685:13995:16;;;;;;;:::i;:::-;-1:-1:-1;;;;;685:13995:16;;;7221:31;685:13995;7221:31;;685:13995;;7221:31;;685:13995;7221:31;:6;685:13995;7221:6;;;685:13995;7221:31;;;;;;;685:13995;;;;;;7221:31;;;685:13995;;7221:31;685:13995;;;;;;;;;;;;;;;;;;;;;;;;;;;7221:31;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;7221:31;685:13995;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;:::i;:::-;7221:31;;;;;;;;;-1:-1:-1;7221:31:16;;685:13995;;;;;-1:-1:-1;;685:13995:16;;;;;;;;9681:35;;;:6;685:13995;9681:6;-1:-1:-1;;;;;9681:6:16;685:13995;9681:35;;;;;;685:13995;9681:35;;;;685:13995;;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;4609:24;685:13995;4609:24;;685:13995;;4609:24;;685:13995;;4609:6;685:13995;4609:6;;;685:13995;4609:24;;;;;;;685:13995;4609:24;;;685:13995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;685:13995:16;;;;;;;;;;;;;;;;4609:24;;;;;;685:13995;4609:24;;;;;;:::i;:::-;;;685:13995;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;4609:24;;;;685:13995;;;;;-1:-1:-1;;685:13995:16;;;;;;;;11905:22;;;:6;685:13995;11905:6;-1:-1:-1;;;;;11905:6:16;685:13995;11905:22;;;;;;685:13995;11905:22;;;;685:13995;;;;;;;;;;;;;;-1:-1:-1;;685:13995:16;;;;;;;;7863:46;685:13995;;:::i;:::-;;;:::i;:::-;;7863:46;;-1:-1:-1;;;;;685:13995:16;;;;7863:46;;685:13995;;;;;;;;;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;685:13995:16;;;;;;:::o;:::-;;;;;;-1:-1:-1;;685:13995:16;;;;;;;:::i;:::-;-1:-1:-1;;;;;685:13995:16;;;13486:42;685:13995;13486:42;;685:13995;13486:42;;;685:13995;13486:6;;685:13995;13486:6;;;685:13995;13486:42;;;;;;;-1:-1:-1;13486:42:16;;;685:13995;;;;;;;;13486:42;;;;;;;;;;;;;;;;;:::i;:::-;;;685:13995;;;;;;;:::i;:::-;13486:42;;;;;;;;;685:13995;;-1:-1:-1;685:13995:16;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;685:13995:16;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;685:13995:16;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;-1:-1:-1;685:13995:16;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;685:13995:16;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;685:13995:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;;;;685:13995:16;;;;;;;:::o"},"methodIdentifiers":{"allowance(address,address,address)":"927da105","areBuffersPaused()":"55cba7fe","balanceOf(address,address)":"f7888aec","collectAggregateFees(address)":"8f4ab9ca","computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))":"4d472bdd","enableRecoveryMode(address)":"dc3f574e","getAddLiquidityCalledFlag(address)":"ace9b89b","getAggregateFeePercentages(address)":"295f0540","getAggregateSwapFeeAmount(address,address)":"85e0b999","getAggregateYieldFeeAmount(address,address)":"00fdfa13","getAuthorizer()":"aaabadc5","getBptRate(address)":"4f037ee7","getBufferAsset(address)":"0387587d","getBufferBalance(address)":"4021fe0f","getBufferMinimumTotalSupply()":"26a8a991","getBufferOwnerShares(address,address)":"9385e39a","getBufferPeriodDuration()":"20c1fb7a","getBufferPeriodEndTime()":"cd51c12f","getBufferTotalShares(address)":"f2784e07","getCurrentLiveBalances(address)":"535cfd8a","getERC4626BufferAsset(address)":"4afbaf5a","getHooksConfig(address)":"ce8630d4","getMaximumPoolTokens()":"2e42f4d5","getMinimumPoolTokens()":"a8175b27","getMinimumTradeAmount()":"e2cb0ba0","getMinimumWrapAmount()":"53956aa2","getNonzeroDeltaCount()":"db817187","getPauseWindowEndTime()":"8a8d123a","getPoolConfig(address)":"f29486a1","getPoolData(address)":"13d21cdf","getPoolMinimumTotalSupply()":"d0965a6b","getPoolPausedState(address)":"15e32046","getPoolRoleAccounts(address)":"e9ddeb26","getPoolTokenCountAndIndexOfToken(address,address)":"c9c1661b","getPoolTokenInfo(address)":"67e0e076","getPoolTokenRates(address)":"7e361bde","getPoolTokens(address)":"ca4f2803","getProtocolFeeController()":"85f2dbd4","getReservesOf(address)":"96787092","getStaticSwapFeePercentage(address)":"b45090f9","getTokenDelta(address)":"9e825ff5","getVault()":"8d928af8","getVaultAdmin()":"1ba0ae45","getVaultExtension()":"b9a8effa","getVaultPausedState()":"85c8c015","isERC4626BufferInitialized(address)":"6844846b","isPoolInRecoveryMode(address)":"be7d628a","isPoolInitialized(address)":"532cec7c","isPoolPaused(address)":"6c9bc732","isPoolRegistered(address)":"c673bdaf","isQueryDisabled()":"b4aef0ab","isQueryDisabledPermanently()":"13ef8a5d","isUnlocked()":"8380edb7","isVaultPaused()":"098401f5","totalSupply(address)":"e4dc2aa4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areBuffersPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"buffersPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"}],\"name\":\"computeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynamicSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAddLiquidityCalledFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"liquidityAdded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAggregateFeePercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateSwapFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateYieldFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBptRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityOwner\",\"type\":\"address\"}],\"name\":\"getBufferOwnerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ownerShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getCurrentLiveBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getERC4626BufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getHooksConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTradeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumWrapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumWrapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonzeroDeltaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonzeroDeltaCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseWindowEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"tokenDecimalDiffs\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPoolRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInRecoveryMode\",\"type\":\"bool\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"poolConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"PoolConfigBits\",\"name\":\"poolConfigBits\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"poolPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"poolBufferPeriodEndTime\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolRoleAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenCountAndIndexOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastBalancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolFeeController\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStaticSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"tokenDelta\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultAdmin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultExtension\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vaultPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vaultBufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"isERC4626BufferInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBufferInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inRecoveryMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabledPermanently\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabledPermanently\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\",\"token\":\"Address of the token\"},\"returns\":{\"tokenAllowance\":\"Amount of tokens the spender is allowed to spend\"}},\"areBuffersPaused()\":{\"details\":\"When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true) will revert. This operation is reversible. The implementation is in `VaultAdmin`.\",\"returns\":{\"buffersPaused\":\"True if the Vault buffers are paused\"}},\"balanceOf(address,address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"account\":\"Address of the account\",\"token\":\"Address of the token\"},\"returns\":{\"tokenBalance\":\"Token balance of the account\"}},\"collectAggregateFees(address)\":{\"details\":\"This function is called on the Vault's ProtocolFeeController, and fees are sent to that contract. The implementation is in `VaultAdmin`.\",\"params\":{\"pool\":\"The pool on which all aggregate fees should be collected\"}},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"details\":\"Reverts if the hook doesn't return the success flag set to `true`. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The pool\",\"swapParams\":\"The swap parameters used to compute the fee\"},\"returns\":{\"dynamicSwapFeePercentage\":\"The dynamic swap fee percentage\"}},\"enableRecoveryMode(address)\":{\"details\":\"Recovery Mode enables a safe proportional withdrawal path, with no external calls. Note that attempts to call this during normal operations will revert. It is only permissionless when paused. The implementation is in `VaultAdmin`.\",\"params\":{\"pool\":\"Address of the pool to check\"}},\"getAddLiquidityCalledFlag(address)\":{\"details\":\"Taxing removing liquidity proportionally whenever liquidity was added in the same transaction adds an extra layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional is the only standard way to exit a position without fees, and this flag is used to enable fees when the operation might be an attempted exploit. It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse than a simple swap for every pool type. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"liquidityAdded\":\"True if liquidity has been added to this pool in the current transaction\"}},\"getAggregateFeePercentages(address)\":{\"details\":\"These are determined by the current protocol and pool creator fees, set in the `ProtocolFeeController`. These data are accessible as part of the `PoolConfig` (accessible through `getPoolConfig`), and also through the `IPoolInfo` on the pool itself. Standard Balancer pools implement this interface, but custom pools are not required to. We add this as a convenience function with the same interface, but it will fetch from the data from the Vault (via `VaultExtension`) to ensure it is always supported.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"aggregateSwapFeePercentage\":\"The aggregate percentage fee applied to swaps\",\"aggregateYieldFeePercentage\":\"The aggregate percentage fee applied to yield\"}},\"getAggregateSwapFeeAmount(address,address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"swapFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAggregateYieldFeeAmount(address,address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"yieldFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAuthorizer()\":{\"details\":\"The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can be changed through a permissioned call. The implementation is in `VaultExtension`.\",\"returns\":{\"authorizer\":\"Address of the authorizer contract\"}},\"getBptRate(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"rate\":\"BPT rate\"}},\"getBufferAsset(address)\":{\"details\":\"The asset can never change after buffer initialization. The implementation would be in `VaultAdmin` when called directly from the Vault address, but this implementation calls the equivalent (but slightly cheaper) `getERC4626BufferAsset` function in `VaultExtension`.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingToken\":\"Address of the underlying token registered for the wrapper; `address(0)` if the buffer has not been initialized.\"}},\"getBufferBalance(address)\":{\"details\":\"The implementation is in `VaultAdmin`.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingBalanceRaw\":\"Amount of underlying tokens deposited into the buffer, in native token decimals\",\"wrappedBalanceRaw\":\"Amount of wrapped tokens deposited into the buffer, in native token decimals\"}},\"getBufferMinimumTotalSupply()\":{\"details\":\"This prevents buffers from being completely drained. When the buffer is initialized, this minimum number of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal to the Vault, as buffers are not tokenized. The implementation is in `VaultAdmin`.\",\"returns\":{\"bufferMinimumTotalSupply\":\"The minimum total supply a buffer can have after initialization\"}},\"getBufferOwnerShares(address,address)\":{\"details\":\"The \\\"liquidity owner\\\" is the user who deposited assets in the buffer. The implementation is in `VaultAdmin`.\",\"params\":{\"liquidityOwner\":\"Address of the user that owns liquidity in the wrapped token's buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"ownerShares\":\"Amount of shares allocated to the liquidity owner, in native underlying token decimals\"}},\"getBufferPeriodDuration()\":{\"details\":\"This value is immutable. It represents the period during which, if paused, the Vault will remain paused. This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer timestamps are 32 bits. The implementation is in `VaultAdmin`.\",\"returns\":{\"bufferPeriodDuration\":\"The length of the buffer period in seconds\"}},\"getBufferPeriodEndTime()\":{\"details\":\"This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer timestamps are 32 bits. The implementation is in `VaultAdmin`.\",\"returns\":{\"bufferPeriodEndTime\":\"The timestamp after which the Vault remains permanently unpaused\"}},\"getBufferTotalShares(address)\":{\"details\":\"The implementation is in `VaultAdmin`.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"bufferShares\":\"Amount of supply shares of the buffer, in native underlying token decimals\"}},\"getCurrentLiveBalances(address)\":{\"details\":\"These are 18-decimal fixed point values. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesLiveScaled18\":\" Token balances after paying yield fees, applying decimal scaling and rates\"}},\"getERC4626BufferAsset(address)\":{\"details\":\"The asset can never change after buffer initialization. The implementation is in `VaultExtension`. Note that there is a `getBufferAsset` function in `VaultAdmin` that does the exact same thing. Even though it's technically redundant, we've included it here in case some users are already using that interface. In the Vault Explorer, both functions call `getERC4626BufferAsset`, as the implementation in `VaultExtension` needs one fewer hop than that in `VaultAdmin`, so it will use slightly less gas.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingToken\":\"Address of the underlying token registered for the wrapper; `address(0)` if the buffer has not been initialized.\"}},\"getHooksConfig(address)\":{\"details\":\"The `HooksConfig` contains flags indicating which pool hooks are implemented. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"hooksConfig\":\"The hooks configuration as a `HooksConfig` struct\"}},\"getMaximumPoolTokens()\":{\"details\":\"The implementation is in `VaultAdmin`.\",\"returns\":{\"maxTokens\":\"The maximum token count of a pool\"}},\"getMinimumPoolTokens()\":{\"details\":\"We expect the vast majority of pools to be 2-token. The implementation is in `VaultAdmin`.\",\"returns\":{\"minTokens\":\"The minimum token count of a pool\"}},\"getMinimumTradeAmount()\":{\"details\":\"This limit is applied to the 18-decimal \\\"upscaled\\\" amount in any operation (swap, add/remove liquidity). The implementation is in `VaultAdmin`.\",\"returns\":{\"minimumTradeAmount\":\"The minimum trade amount as an 18-decimal floating point number\"}},\"getMinimumWrapAmount()\":{\"details\":\"This limit is applied to native decimal values, and guards against rounding errors. The implementation is in `VaultAdmin`.\",\"returns\":{\"minimumWrapAmount\":\"The minimum wrap amount\"}},\"getNonzeroDeltaCount()\":{\"details\":\"For an operation to settle, this count must be zero. The implementation is in `VaultExtension`.\",\"returns\":{\"nonzeroDeltaCount\":\"The current value of `_nonzeroDeltaCount`\"}},\"getPauseWindowEndTime()\":{\"details\":\"This value is immutable, and represents the timestamp after which the Vault can no longer be paused by governance. Balancer timestamps are 32 bits. The implementation is in `VaultAdmin`.\",\"returns\":{\"pauseWindowEndTime\":\"The timestamp when the Vault's pause window ends\"}},\"getPoolConfig(address)\":{\"details\":\"The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"poolConfig\":\"The pool configuration as a `PoolConfig` struct\"}},\"getPoolData(address)\":{\"details\":\"This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"poolData\":\"The `PoolData` result\"}},\"getPoolMinimumTotalSupply()\":{\"details\":\"This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals. The implementation is in `VaultAdmin`.\",\"returns\":{\"poolMinimumTotalSupply\":\"The minimum total supply a pool can have after initialization\"}},\"getPoolPausedState(address)\":{\"details\":\"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period. Balancer timestamps are 32 bits. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The pool whose data is requested\"},\"returns\":{\"pauseManager\":\"The pause manager, or the zero address\",\"poolBufferPeriodEndTime\":\"The timestamp after which the Pool unpauses itself (if paused)\",\"poolPauseWindowEndTime\":\"The timestamp of the end of the Pool's pause window\",\"poolPaused\":\"True if the Pool is paused\"}},\"getPoolRoleAccounts(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The address of the pool whose roles are being queried\"},\"returns\":{\"roleAccounts\":\"A struct containing the role accounts for the pool (or 0 if unassigned)\"}},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"details\":\"Reverts if the pool is not registered, or if the token does not belong to the pool. The implementation is in `Vault`.\",\"params\":{\"pool\":\"Address of the pool\",\"token\":\"Address of the token\"},\"returns\":{\"index\":\"Index corresponding to the given token in the pool's token list\",\"tokenCount\":\"Number of tokens in the pool\"}},\"getPoolTokenInfo(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesRaw\":\"Raw balances, sorted in token registration order\",\"lastBalancesLiveScaled18\":\"Last saved live balances, sorted in token registration order\",\"tokenInfo\":\"Token info, sorted in token registration order\",\"tokens\":\"The pool tokens, sorted in registration order\"}},\"getPoolTokenRates(address)\":{\"details\":\"This function performs external calls if tokens are yield-bearing. All returned arrays are in token registration order. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"decimalScalingFactors\":\"Token decimal scaling factors\",\"tokenRates\":\"Token rates for yield-bearing tokens, or FP(1) for standard tokens\"}},\"getPoolTokens(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"tokens\":\"List of tokens in the pool\"}},\"getProtocolFeeController()\":{\"details\":\"The implementation is in `VaultExtension`. Note that the ProtocolFeeController is upgradeable in the Vault, so this address could change over time.\",\"returns\":{\"protocolFeeController\":\"Address of the ProtocolFeeController\"}},\"getReservesOf(address)\":{\"details\":\"The `reserveAmount` should always be equal to or less than the Vault's balance of the token. The implementation is in `VaultExtension`.\",\"params\":{\"token\":\"The token for which to retrieve the reserve\"},\"returns\":{\"reserveAmount\":\"The amount of reserves for the given token\"}},\"getStaticSwapFeePercentage(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The address of the pool whose static swap fee percentage is being queried\"},\"returns\":{\"swapFeePercentage\":\"The current static swap fee percentage for the specified pool\"}},\"getTokenDelta(address)\":{\"details\":\"This function allows reading values from `_tokenDeltas`. A non-zero delta typically occurs only during an operation, and indicates a debt or credit amount in that token. The implementation is in `VaultExtension`.\",\"params\":{\"token\":\"The token for which the delta is being fetched\"},\"returns\":{\"tokenDelta\":\"The delta of the specified token\"}},\"getVault()\":{\"details\":\"The main Vault contains the entrypoint and main liquidity operation implementations. There are redundant `vault()` functions defined in `VaultExtension` and `VaultAdmin`. Rather than call those, it is cheaper to simply return the address stored in this contract.\",\"returns\":{\"vault\":\"The address of the main Vault contract\"}},\"getVaultAdmin()\":{\"details\":\"The VaultAdmin contract is mostly used for permissioned calls. The getter function implementation is in `VaultExtension`.\",\"returns\":{\"vaultAdmin\":\"The address of the Vault admin\"}},\"getVaultExtension()\":{\"details\":\"The VaultExtension handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and liquidity operations. The implementation is in `Vault`.\",\"returns\":{\"vaultExtension\":\"Address of the VaultExtension\"}},\"getVaultPausedState()\":{\"details\":\"Balancer timestamps are 32 bits. The implementation is in `VaultAdmin`.\",\"returns\":{\"vaultBufferPeriodEndTime\":\"The timestamp of the end of the Vault's buffer period\",\"vaultPauseWindowEndTime\":\"The timestamp of the end of the Vault's pause window\",\"vaultPaused\":\"True if the Vault is paused\"}},\"isERC4626BufferInitialized(address)\":{\"details\":\"An initialized buffer will have an asset registered in the Vault. The implementation is in `VaultExtension`.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"isBufferInitialized\":\"True if the ERC4626 buffer is initialized\"}},\"isPoolInRecoveryMode(address)\":{\"details\":\"Recovery Mode enables a safe proportional withdrawal path, with no external calls. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"inRecoveryMode\":\"True if the pool is in Recovery Mode, false otherwise\"}},\"isPoolInitialized(address)\":{\"details\":\"An initialized pool can be considered registered as well. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"initialized\":\"True if the pool is initialized, false otherwise\"}},\"isPoolPaused(address)\":{\"details\":\"If a pool is paused, all non-Recovery Mode state-changing operations will revert. The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"The pool to be checked\"},\"returns\":{\"poolPaused\":\"True if the pool is paused\"}},\"isPoolRegistered(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"registered\":\"True if the pool is registered, false otherwise\"}},\"isQueryDisabled()\":{\"details\":\"Governance can call `enableQuery` to restore query functionality, unless `disableQueryPermanently` was called. The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable queries in the unlikely event that EVM changes violate its assumptions (e.g., in a new L2 network). The implementation is in `VaultExtension`.\",\"returns\":{\"queryDisabled\":\"If true, then queries are reversibly disabled\"}},\"isQueryDisabledPermanently()\":{\"details\":\"This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled. The implementation is in `VaultExtension`.\",\"returns\":{\"queryDisabledPermanently\":\"If true, then queries are permanently disabled\"}},\"isUnlocked()\":{\"details\":\"The Vault must be unlocked to perform state-changing liquidity operations. The implementation is in `VaultExtension`.\",\"returns\":{\"unlocked\":\"True if the Vault is unlocked, false otherwise\"}},\"isVaultPaused()\":{\"details\":\"If the Vault is paused, all non-Recovery Mode state-changing operations will revert. The implementation is in `VaultAdmin`.\",\"returns\":{\"vaultPaused\":\"True if the Vault is paused\"}},\"totalSupply(address)\":{\"details\":\"The implementation is in `VaultExtension`.\",\"params\":{\"token\":\"The token address\"},\"returns\":{\"tokenTotalSupply\":\"Total supply of the token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"Gets the allowance of a spender for a given ERC20 token and owner.\"},\"areBuffersPaused()\":{\"notice\":\"Indicates whether the Vault buffers are paused.\"},\"balanceOf(address,address)\":{\"notice\":\"Gets the balance of an account for a given ERC20 token.\"},\"collectAggregateFees(address)\":{\"notice\":\"Collects accumulated aggregate swap and yield fees for the specified pool.\"},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"notice\":\"Query the current dynamic swap fee of a pool, given a set of swap parameters.\"},\"enableRecoveryMode(address)\":{\"notice\":\"Enable Recovery Mode for the given pool, when either the pool or the Vault is paused.\"},\"getAddLiquidityCalledFlag(address)\":{\"notice\":\"This flag is used to detect \\\"round trip\\\" transactions (adding and removing liquidity in the same pool).\"},\"getAggregateFeePercentages(address)\":{\"notice\":\"Gets the aggregate swap and yield fee percentages for a pool.\"},\"getAggregateSwapFeeAmount(address,address)\":{\"notice\":\"Returns the total aggregate swap fees in `token` collected by the pool.\"},\"getAggregateYieldFeeAmount(address,address)\":{\"notice\":\"Returns the total aggregate yield fees in `token` collected by the pool.\"},\"getAuthorizer()\":{\"notice\":\"Returns the Authorizer address.\"},\"getBptRate(address)\":{\"notice\":\"Gets the current bpt rate of a pool, by dividing the current invariant by the total supply of BPT.\"},\"getBufferAsset(address)\":{\"notice\":\"Returns the asset registered for a given wrapped token.\"},\"getBufferBalance(address)\":{\"notice\":\"Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\"},\"getBufferMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\"},\"getBufferOwnerShares(address,address)\":{\"notice\":\"Returns the shares (internal buffer BPT) of a liquidity owner.\"},\"getBufferPeriodDuration()\":{\"notice\":\"Returns the Vault's buffer period duration.\"},\"getBufferPeriodEndTime()\":{\"notice\":\"Returns the Vault's buffer period end time.\"},\"getBufferTotalShares(address)\":{\"notice\":\"Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\"},\"getCurrentLiveBalances(address)\":{\"notice\":\"Gets current live balances of a given pool, in token registration order.\"},\"getERC4626BufferAsset(address)\":{\"notice\":\"Returns the asset registered for a given wrapped token.\"},\"getHooksConfig(address)\":{\"notice\":\"Gets the hooks configuration parameters of a pool.\"},\"getMaximumPoolTokens()\":{\"notice\":\"Get the maximum number of tokens in a pool.\"},\"getMinimumPoolTokens()\":{\"notice\":\"Get the minimum number of tokens in a pool.\"},\"getMinimumTradeAmount()\":{\"notice\":\"Get the minimum trade amount in a pool operation.\"},\"getMinimumWrapAmount()\":{\"notice\":\"Get the minimum amount that can be wrapped by an ERC4626 token buffer by the Vault.\"},\"getNonzeroDeltaCount()\":{\"notice\":\"Returns the count of non-zero deltas.\"},\"getPauseWindowEndTime()\":{\"notice\":\"Returns the Vault's pause window end time.\"},\"getPoolConfig(address)\":{\"notice\":\"Gets the configuration parameters of a pool.\"},\"getPoolData(address)\":{\"notice\":\"Returns comprehensive pool data for the given pool.\"},\"getPoolMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of pool tokens (BPT) for an initialized pool.\"},\"getPoolPausedState(address)\":{\"notice\":\"Returns the paused status, and end times of the Pool's pause window and buffer period.\"},\"getPoolRoleAccounts(address)\":{\"notice\":\"Fetches the role accounts for a given pool (pause manager, swap manager, pool creator).\"},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"notice\":\"Gets the index of a token in a given pool.\"},\"getPoolTokenInfo(address)\":{\"notice\":\"Gets the raw data for a pool: tokens, raw balances, and scaling factors.\"},\"getPoolTokenRates(address)\":{\"notice\":\"Gets pool token rates.\"},\"getPoolTokens(address)\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"getProtocolFeeController()\":{\"notice\":\"Returns the current Protocol Fee Controller address.\"},\"getReservesOf(address)\":{\"notice\":\"Retrieves the reserve (i.e., sum of all pool balances) of a given token.\"},\"getStaticSwapFeePercentage(address)\":{\"notice\":\"Fetches the static swap fee percentage for a given pool.\"},\"getTokenDelta(address)\":{\"notice\":\"Retrieves the token delta for a specific token.\"},\"getVault()\":{\"notice\":\"Returns the main Vault address.\"},\"getVaultAdmin()\":{\"notice\":\"Returns the VaultAdmin contract address.\"},\"getVaultExtension()\":{\"notice\":\"Returns the VaultExtension contract address.\"},\"getVaultPausedState()\":{\"notice\":\"Returns the paused status, and end times of the Vault's pause window and buffer period.\"},\"isERC4626BufferInitialized(address)\":{\"notice\":\"Checks whether the wrapped token has an initialized buffer in the Vault.\"},\"isPoolInRecoveryMode(address)\":{\"notice\":\"Checks whether a pool is in Recovery Mode.\"},\"isPoolInitialized(address)\":{\"notice\":\"Checks whether a pool is initialized.\"},\"isPoolPaused(address)\":{\"notice\":\"Indicates whether a pool is paused.\"},\"isPoolRegistered(address)\":{\"notice\":\"Checks whether a pool is registered.\"},\"isQueryDisabled()\":{\"notice\":\"Checks whether queries are reversibly disabled on the Vault.\"},\"isQueryDisabledPermanently()\":{\"notice\":\"Returns true if queries are disabled permanently; false if they are enabled.\"},\"isUnlocked()\":{\"notice\":\"Returns whether the Vault is unlocked (i.e., executing an operation).\"},\"isVaultPaused()\":{\"notice\":\"Indicates whether the Vault is paused.\"},\"totalSupply(address)\":{\"notice\":\"Gets the total supply of a given ERC20 token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultExplorer.sol\":\"VaultExplorer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExplorer.sol\":{\"keccak256\":\"0x6cec9bf25aa6118662cb7da10e87cb039c2b9dbe9345fbe198de18c7c53b922b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://755afc3d1676bf4936fa5589996a00f93f3f8960d103ceacb7b992e5e634f4e4\",\"dweb:/ipfs/QmXwh5VWdJvxU5Wr1QSDKTrCSHahLjvKBjfCuuWKo9WMJM\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"contracts/VaultExplorer.sol\":{\"keccak256\":\"0x1484824bfa822904942c7c0ccbe5db2135f552f54cb783d390dab4c59f2692cd\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://d7862f08ddd640c4d3c3718f586b7333ee63ba4060bb1cdf9665f79042e67fe6\",\"dweb:/ipfs/QmXH2mXmFnJxc3Bru9gLE5KbPR1ros36YxPDgEZ8RSBtmU\"]}},\"version\":1}"}}}}}