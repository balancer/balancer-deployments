{"id":"c49be96798feffa712b434b4f36691be","_format":"hh-sol-build-info-1","solcVersion":"0.8.27","solcLongVersion":"0.8.27+commit.40a35a09","input":{"language":"Solidity","sources":{"@balancer-labs/v3-interfaces/contracts/governance-scripts/IBasicAuthorizer.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IAuthorizer } from \"../vault/IAuthorizer.sol\";\n\ninterface IBasicAuthorizer is IAuthorizer {\n    // solhint-disable-next-line func-name-mixedcase\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\n\n    function grantRole(bytes32 role, address account) external;\n\n    function revokeRole(bytes32 role, address account) external;\n\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n/// @notice Simple interface for permissioned calling of external functions.\ninterface IAuthentication {\n    /// @notice The sender does not have permission to call a function.\n    error SenderNotAllowed();\n\n    /**\n     * @notice Returns the action identifier associated with the external function described by `selector`.\n     * @param selector The 4-byte selector of the permissioned function\n     * @return actionId The computed actionId\n     */\n    function getActionId(bytes4 selector) external view returns (bytes32 actionId);\n}\n"},"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n/// @notice General interface for token exchange rates.\ninterface IRateProvider {\n    /**\n     * @notice An 18 decimal fixed point number representing the exchange rate of one token to another related token.\n     * @dev The meaning of this rate depends on the context. Note that there may be an error associated with a token\n     * rate, and the caller might require a certain rounding direction to ensure correctness. This (legacy) interface\n     * does not take a rounding direction or return an error, so great care must be taken when interpreting and using\n     * rates in downstream computations.\n     *\n     * @return rate The current token rate\n     */\n    function getRate() external view returns (uint256 rate);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n/// @notice Interface to the Vault's permission system.\ninterface IAuthorizer {\n    /**\n     * @notice Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n     * @param actionId Identifier for the action to be performed\n     * @param account Account trying to perform the action\n     * @param where Target contract for the action\n     * @return success True if the action is permitted\n     */\n    function canPerform(bytes32 actionId, address account, address where) external view returns (bool success);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\n// Explicitly import VaultTypes structs because we expect this interface to be heavily used by external developers.\n// Internally, when this list gets too long, we usually just do a simple import to keep things tidy.\nimport {\n    TokenConfig,\n    LiquidityManagement,\n    PoolSwapParams,\n    AfterSwapParams,\n    HookFlags,\n    AddLiquidityKind,\n    RemoveLiquidityKind,\n    SwapKind\n} from \"./VaultTypes.sol\";\n\n/**\n * @notice Interface for pool hooks.\n * @dev Hooks are functions invoked by the Vault at specific points in the flow of each operation. This guarantees that\n * they are called in the correct order, and with the correct arguments. To maintain this security, these functions\n * should only be called by the Vault. The recommended way to do this is to derive the hook contract from `BaseHooks`,\n * then use the `onlyVault` modifier from `VaultGuard`. (See the examples in /pool-hooks.)\n */\ninterface IHooks {\n    /***************************************************************************\n                                   Register\n    ***************************************************************************/\n\n    /**\n     * @notice Hook executed when a pool is registered with a non-zero hooks contract.\n     * @dev Returns true if registration was successful, and false to revert the pool registration.\n     * Make sure this function is properly implemented (e.g. check the factory, and check that the\n     * given pool is from the factory). The Vault address will be msg.sender.\n     *\n     * @param factory Address of the pool factory (contract deploying the pool)\n     * @param pool Address of the pool\n     * @param tokenConfig An array of descriptors for the tokens the pool will manage\n     * @param liquidityManagement Liquidity management flags indicating which functions are enabled\n     * @return success True if the hook allowed the registration, false otherwise\n     */\n    function onRegister(\n        address factory,\n        address pool,\n        TokenConfig[] memory tokenConfig,\n        LiquidityManagement calldata liquidityManagement\n    ) external returns (bool success);\n\n    /**\n     * @notice Return the set of hooks implemented by the contract.\n     * @dev The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined\n     * (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero).\n     * `onRegister` is the only \"mandatory\" hook.\n     *\n     * @return hookFlags Flags indicating which hooks the contract supports\n     */\n    function getHookFlags() external view returns (HookFlags memory hookFlags);\n\n    /***************************************************************************\n                                   Initialize\n    ***************************************************************************/\n\n    /**\n     * @notice Hook executed before pool initialization.\n     * @dev Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param exactAmountsIn Exact amounts of input tokens\n     * @param userData Optional, arbitrary data sent with the encoded request\n     * @return success True if the pool wishes to proceed with initialization\n     */\n    function onBeforeInitialize(uint256[] memory exactAmountsIn, bytes memory userData) external returns (bool success);\n\n    /**\n     * @notice Hook to be executed after pool initialization.\n     * @dev Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param exactAmountsIn Exact amounts of input tokens\n     * @param bptAmountOut Amount of pool tokens minted during initialization\n     * @param userData Optional, arbitrary data sent with the encoded request\n     * @return success True if the pool accepts the initialization results\n     */\n    function onAfterInitialize(\n        uint256[] memory exactAmountsIn,\n        uint256 bptAmountOut,\n        bytes memory userData\n    ) external returns (bool success);\n\n    /***************************************************************************\n                                   Add Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Hook to be executed before adding liquidity.\n     * @dev Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n     * @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n     * @param kind The add liquidity operation type (e.g., proportional, custom)\n     * @param maxAmountsInScaled18 Maximum amounts of input tokens\n     * @param minBptAmountOut Minimum amount of output pool tokens\n     * @param balancesScaled18 Current pool balances, sorted in token registration order\n     * @param userData Optional, arbitrary data sent with the encoded request\n     * @return success True if the pool wishes to proceed with settlement\n     */\n    function onBeforeAddLiquidity(\n        address router,\n        address pool,\n        AddLiquidityKind kind,\n        uint256[] memory maxAmountsInScaled18,\n        uint256 minBptAmountOut,\n        uint256[] memory balancesScaled18,\n        bytes memory userData\n    ) external returns (bool success);\n\n    /**\n     * @notice Hook to be executed after adding liquidity.\n     * @dev Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore\n     * `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n     * `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n     * @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n     * @param kind The add liquidity operation type (e.g., proportional, custom)\n     * @param amountsInScaled18 Actual amounts of tokens added, sorted in token registration order\n     * @param amountsInRaw Actual amounts of tokens added, sorted in token registration order\n     * @param bptAmountOut Amount of pool tokens minted\n     * @param balancesScaled18 Current pool balances, sorted in token registration order\n     * @param userData Additional (optional) data provided by the user\n     * @return success True if the pool wishes to proceed with settlement\n     * @return hookAdjustedAmountsInRaw New amountsInRaw, potentially modified by the hook\n     */\n    function onAfterAddLiquidity(\n        address router,\n        address pool,\n        AddLiquidityKind kind,\n        uint256[] memory amountsInScaled18,\n        uint256[] memory amountsInRaw,\n        uint256 bptAmountOut,\n        uint256[] memory balancesScaled18,\n        bytes memory userData\n    ) external returns (bool success, uint256[] memory hookAdjustedAmountsInRaw);\n\n    /***************************************************************************\n                                 Remove Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Hook to be executed before removing liquidity.\n     * @dev Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n     * @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n     * @param kind The type of remove liquidity operation (e.g., proportional, custom)\n     * @param maxBptAmountIn Maximum amount of input pool tokens\n     * @param minAmountsOutScaled18 Minimum output amounts, sorted in token registration order\n     * @param balancesScaled18 Current pool balances, sorted in token registration order\n     * @param userData Optional, arbitrary data sent with the encoded request\n     * @return success True if the pool wishes to proceed with settlement\n     */\n    function onBeforeRemoveLiquidity(\n        address router,\n        address pool,\n        RemoveLiquidityKind kind,\n        uint256 maxBptAmountIn,\n        uint256[] memory minAmountsOutScaled18,\n        uint256[] memory balancesScaled18,\n        bytes memory userData\n    ) external returns (bool success);\n\n    /**\n     * @notice Hook to be executed after removing liquidity.\n     * @dev Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore\n     * `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n     * `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n     * @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n     * @param kind The type of remove liquidity operation (e.g., proportional, custom)\n     * @param bptAmountIn Amount of pool tokens to burn\n     * @param amountsOutScaled18 Scaled amount of tokens to receive, sorted in token registration order\n     * @param amountsOutRaw Actual amount of tokens to receive, sorted in token registration order\n     * @param balancesScaled18 Current pool balances, sorted in token registration order\n     * @param userData Additional (optional) data provided by the user\n     * @return success True if the pool wishes to proceed with settlement\n     * @return hookAdjustedAmountsOutRaw New amountsOutRaw, potentially modified by the hook\n     */\n    function onAfterRemoveLiquidity(\n        address router,\n        address pool,\n        RemoveLiquidityKind kind,\n        uint256 bptAmountIn,\n        uint256[] memory amountsOutScaled18,\n        uint256[] memory amountsOutRaw,\n        uint256[] memory balancesScaled18,\n        bytes memory userData\n    ) external returns (bool success, uint256[] memory hookAdjustedAmountsOutRaw);\n\n    /***************************************************************************\n                                    Swap\n    ***************************************************************************/\n\n    /**\n     * @notice Called before a swap to give the Pool an opportunity to perform actions.\n     * @dev Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the\n     * `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param params Swap parameters (see PoolSwapParams for struct definition)\n     * @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n     * @return success True if the pool wishes to proceed with settlement\n     */\n    function onBeforeSwap(PoolSwapParams calldata params, address pool) external returns (bool success);\n\n    /**\n     * @notice Called after a swap to perform further actions once the balances have been updated by the swap.\n     * @dev Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore\n     * `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should\n     * use the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param params Swap parameters (see above for struct definition)\n     * @return success True if the pool wishes to proceed with settlement\n     * @return hookAdjustedAmountCalculatedRaw New amount calculated, potentially modified by the hook\n     */\n    function onAfterSwap(\n        AfterSwapParams calldata params\n    ) external returns (bool success, uint256 hookAdjustedAmountCalculatedRaw);\n\n    /**\n     * @notice Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees.\n     * @dev Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use\n     * the `onlyVault` modifier to guarantee this is only called by the Vault.\n     *\n     * @param params Swap parameters (see PoolSwapParams for struct definition)\n     * @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n     * @param staticSwapFeePercentage 18-decimal FP value of the static swap fee percentage, for reference\n     * @return success True if the pool wishes to proceed with settlement\n     * @return dynamicSwapFeePercentage Value of the swap fee percentage, as an 18-decimal FP value\n     */\n    function onComputeDynamicSwapFeePercentage(\n        PoolSwapParams calldata params,\n        address pool,\n        uint256 staticSwapFeePercentage\n    ) external view returns (bool success, uint256 dynamicSwapFeePercentage);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IVault } from \"./IVault.sol\";\n\n/// @notice Contract that handles protocol and pool creator fees for the Vault.\ninterface IProtocolFeeController {\n    /**\n     * @notice Emitted when the protocol swap fee percentage is updated.\n     * @param swapFeePercentage The updated protocol swap fee percentage\n     */\n    event GlobalProtocolSwapFeePercentageChanged(uint256 swapFeePercentage);\n\n    /**\n     * @notice Emitted when the protocol yield fee percentage is updated.\n     * @param yieldFeePercentage The updated protocol yield fee percentage\n     */\n    event GlobalProtocolYieldFeePercentageChanged(uint256 yieldFeePercentage);\n\n    /**\n     * @notice Emitted when the protocol swap fee percentage is updated for a specific pool.\n     * @param pool The pool whose protocol swap fee will be changed\n     * @param swapFeePercentage The updated protocol swap fee percentage\n     */\n    event ProtocolSwapFeePercentageChanged(address indexed pool, uint256 swapFeePercentage);\n\n    /**\n     * @notice Emitted when the protocol yield fee percentage is updated for a specific pool.\n     * @param pool The pool whose protocol yield fee will be changed\n     * @param yieldFeePercentage The updated protocol yield fee percentage\n     */\n    event ProtocolYieldFeePercentageChanged(address indexed pool, uint256 yieldFeePercentage);\n\n    /**\n     * @notice Emitted when the pool creator swap fee percentage of a pool is updated.\n     * @param pool The pool whose pool creator swap fee will be changed\n     * @param poolCreatorSwapFeePercentage The new pool creator swap fee percentage for the pool\n     */\n    event PoolCreatorSwapFeePercentageChanged(address indexed pool, uint256 poolCreatorSwapFeePercentage);\n\n    /**\n     * @notice Emitted when the pool creator yield fee percentage of a pool is updated.\n     * @param pool The pool whose pool creator yield fee will be changed\n     * @param poolCreatorYieldFeePercentage The new pool creator yield fee percentage for the pool\n     */\n    event PoolCreatorYieldFeePercentageChanged(address indexed pool, uint256 poolCreatorYieldFeePercentage);\n\n    /**\n     * @notice Logs the collection of protocol swap fees in a specific token and amount.\n     * @dev Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs\n     * in the Vault, but fee collection happens in the ProtocolFeeController, the swap fees reported here may encompass\n     * multiple operations.\n     *\n     * @param pool The pool on which the swap fee was charged\n     * @param token The token in which the swap fee was charged\n     * @param amount The amount of the token collected in fees\n     */\n    event ProtocolSwapFeeCollected(address indexed pool, IERC20 indexed token, uint256 amount);\n\n    /**\n     * @notice Logs the collection of protocol yield fees in a specific token and amount.\n     * @dev Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs\n     * in the Vault, but fee collection happens in the ProtocolFeeController, the yield fees reported here may encompass\n     * multiple operations.\n     *\n     * @param pool The pool on which the yield fee was charged\n     * @param token The token in which the yield fee was charged\n     * @param amount The amount of the token collected in fees\n     */\n    event ProtocolYieldFeeCollected(address indexed pool, IERC20 indexed token, uint256 amount);\n\n    /**\n     * @notice Logs the withdrawal of protocol fees in a specific token and amount.\n     * @param pool The pool from which protocol fees are being withdrawn\n     * @param token The token being withdrawn\n     * @param recipient The recipient of the funds\n     * @param amount The amount of the fee token that was withdrawn\n     */\n    event ProtocolFeesWithdrawn(address indexed pool, IERC20 indexed token, address indexed recipient, uint256 amount);\n\n    /**\n     * @notice Logs the withdrawal of pool creator fees in a specific token and amount.\n     * @param pool The pool from which pool creator fees are being withdrawn\n     * @param token The token being withdrawn\n     * @param recipient The recipient of the funds (the pool creator if permissionless, or another account)\n     * @param amount The amount of the fee token that was withdrawn\n     */\n    event PoolCreatorFeesWithdrawn(\n        address indexed pool,\n        IERC20 indexed token,\n        address indexed recipient,\n        uint256 amount\n    );\n\n    /**\n     * @notice Emitted on pool registration with the initial aggregate swap fee percentage, for off-chain processes.\n     * @dev If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will\n     * equal the current global swap fee percentage.\n     *\n     * @param pool The pool being registered\n     * @param aggregateSwapFeePercentage The initial aggregate swap fee percentage\n     * @param isProtocolFeeExempt True if the pool is exempt from taking protocol fees initially\n     */\n    event InitialPoolAggregateSwapFeePercentage(\n        address indexed pool,\n        uint256 aggregateSwapFeePercentage,\n        bool isProtocolFeeExempt\n    );\n\n    /**\n     * @notice Emitted on pool registration with the initial aggregate yield fee percentage, for off-chain processes.\n     * @dev If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will\n     * equal the current global yield fee percentage.\n     *\n     * @param pool The pool being registered\n     * @param aggregateYieldFeePercentage The initial aggregate yield fee percentage\n     * @param isProtocolFeeExempt True if the pool is exempt from taking protocol fees initially\n     */\n    event InitialPoolAggregateYieldFeePercentage(\n        address indexed pool,\n        uint256 aggregateYieldFeePercentage,\n        bool isProtocolFeeExempt\n    );\n\n    /**\n     * @notice Emitted as a convenience during pool registration, more focused than the Vault's `PoolRegistered` event.\n     * @dev The `PoolRegistered` event includes the `roleAccounts` field, which also records the pool creator, but this\n     * simpler event is also provided for convenience. Though `InitialPoolAggregateSwapFeePercentage` and its yield fee\n     * counterpart also include the protocol fee exemption flag, we might as well include it here as well.\n     *\n     * @param pool The address of the pool being registered\n     * @param poolCreator The address of the pool creator (non-zero, or the event would not be emitted)\n     * @param  protocolFeeExempt True if the pool is initially exempt from protocol fees\n     */\n    event PoolRegisteredWithFeeController(address indexed pool, address indexed poolCreator, bool protocolFeeExempt);\n\n    /**\n     * @notice Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\n     * @dev Note that this is checked for both the global and pool-specific protocol swap fee percentages.\n     */\n    error ProtocolSwapFeePercentageTooHigh();\n\n    /**\n     * @notice Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\n     * @dev Note that this is checked for both the global and pool-specific protocol yield fee percentages.\n     */\n    error ProtocolYieldFeePercentageTooHigh();\n\n    /**\n     * @notice Error raised if there is no pool creator on a withdrawal attempt from the given pool.\n     * @param pool The pool with no creator\n     */\n    error PoolCreatorNotRegistered(address pool);\n\n    /**\n     * @notice Error raised if the wrong account attempts to withdraw pool creator fees.\n     * @param caller The account attempting to withdraw pool creator fees\n     * @param pool The pool the caller tried to withdraw from\n     */\n    error CallerIsNotPoolCreator(address caller, address pool);\n\n    /// @notice Error raised when the pool creator swap or yield fee percentage exceeds the maximum allowed value.\n    error PoolCreatorFeePercentageTooHigh();\n\n    /**\n     * @notice Get the address of the main Vault contract.\n     * @return vault The Vault address\n     */\n    function vault() external view returns (IVault);\n\n    /**\n     * @notice Collects aggregate fees from the Vault for a given pool.\n     * @param pool The pool with aggregate fees\n     */\n    function collectAggregateFees(address pool) external;\n\n    /**\n     * @notice Getter for the current global protocol swap fee.\n     * @return protocolSwapFeePercentage The global protocol swap fee percentage\n     */\n    function getGlobalProtocolSwapFeePercentage() external view returns (uint256 protocolSwapFeePercentage);\n\n    /**\n     * @notice Getter for the current global protocol yield fee.\n     * @return protocolYieldFeePercentage The global protocol yield fee percentage\n     */\n    function getGlobalProtocolYieldFeePercentage() external view returns (uint256 protocolYieldFeePercentage);\n\n    /**\n     * @notice Getter for pool registration flag.\n     * @param pool The address of the pool\n     * @return isRegistered True if the pool configuration has been set (e.g., through `registerPool`)\n     */\n    function isPoolRegistered(address pool) external view returns (bool);\n\n    /**\n     * @notice Getter for the current protocol swap fee for a given pool.\n     * @param pool The address of the pool\n     * @return protocolSwapFeePercentage The protocol swap fee percentage for the given pool\n     * @return isOverride True if the protocol fee has been overridden\n     */\n    function getPoolProtocolSwapFeeInfo(\n        address pool\n    ) external view returns (uint256 protocolSwapFeePercentage, bool isOverride);\n\n    /**\n     * @notice Getter for the current protocol yield fee for a given pool.\n     * @param pool The address of the pool\n     * @return protocolYieldFeePercentage The protocol yield fee percentage for the given pool\n     * @return isOverride True if the protocol fee has been overridden\n     */\n    function getPoolProtocolYieldFeeInfo(\n        address pool\n    ) external view returns (uint256 protocolYieldFeePercentage, bool isOverride);\n\n    /**\n     * @notice Getter for the current pool creator swap fee percentage for a given pool.\n     * @param pool The address of the pool\n     * @return poolCreatorSwapFeePercentage The pool creator swap fee component of the aggregate swap fee\n     */\n    function getPoolCreatorSwapFeePercentage(address pool) external view returns (uint256);\n\n    /**\n     * @notice Getter for the current pool creator yield fee percentage for a given pool.\n     * @param pool The address of the pool\n     * @return poolCreatorSwapFeePercentage The pool creator yield fee component of the aggregate yield fee\n     */\n    function getPoolCreatorYieldFeePercentage(address pool) external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of each pool token allocated to the protocol for withdrawal.\n     * @dev Includes both swap and yield fees.\n     * @param pool The address of the pool on which fees were collected\n     * @return feeAmounts The total amounts of each token available for withdrawal, sorted in token registration order\n     */\n    function getProtocolFeeAmounts(address pool) external view returns (uint256[] memory feeAmounts);\n\n    /**\n     * @notice Returns the amount of each pool token allocated to the pool creator for withdrawal.\n     * @dev Includes both swap and yield fees.\n     * @param pool The address of the pool on which fees were collected\n     * @return feeAmounts The total amounts of each token available for withdrawal, sorted in token registration order\n     */\n    function getPoolCreatorFeeAmounts(address pool) external view returns (uint256[] memory feeAmounts);\n\n    /**\n     * @notice Returns a calculated aggregate percentage from protocol and pool creator fee percentages.\n     * @dev Not tied to any particular pool; this just performs the low-level \"additive fee\" calculation. Note that\n     * pool creator fees are calculated based on creatorAndLpFees, and not in totalFees. Since aggregate fees are\n     * stored in the Vault with 24-bit precision, this will truncate any values that require greater precision.\n     * It is expected that pool creators will negotiate with the DAO and agree on reasonable values for these fee\n     * components, but the truncation ensures it will not revert for any valid set of fee percentages.\n     *\n     * See example below:\n     *\n     * tokenOutAmount = 10000; poolSwapFeePct = 10%; protocolFeePct = 40%; creatorFeePct = 60%\n     * totalFees = tokenOutAmount * poolSwapFeePct = 10000 * 10% = 1000\n     * protocolFees = totalFees * protocolFeePct = 1000 * 40% = 400\n     * creatorAndLpFees = totalFees - protocolFees = 1000 - 400 = 600\n     * creatorFees = creatorAndLpFees * creatorFeePct = 600 * 60% = 360\n     * lpFees (will stay in the pool) = creatorAndLpFees - creatorFees = 600 - 360 = 240\n     *\n     * @param protocolFeePercentage The protocol portion of the aggregate fee percentage\n     * @param poolCreatorFeePercentage The pool creator portion of the aggregate fee percentage\n     * @return aggregateFeePercentage The computed aggregate percentage\n     */\n    function computeAggregateFeePercentage(\n        uint256 protocolFeePercentage,\n        uint256 poolCreatorFeePercentage\n    ) external pure returns (uint256 aggregateFeePercentage);\n\n    /**\n     * @notice Override the protocol swap fee percentage for a specific pool.\n     * @dev This is a permissionless call, and will set the pool's fee to the current global fee, if it is different\n     * from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\n     *\n     * @param pool The pool for which we are setting the protocol swap fee\n     */\n    function updateProtocolSwapFeePercentage(address pool) external;\n\n    /**\n     * @notice Override the protocol yield fee percentage for a specific pool.\n     * @dev This is a permissionless call, and will set the pool's fee to the current global fee, if it is different\n     * from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\n     *\n     * @param pool The pool for which we are setting the protocol yield fee\n     */\n    function updateProtocolYieldFeePercentage(address pool) external;\n\n    /***************************************************************************\n                                Permissioned Functions\n    ***************************************************************************/\n\n    /**\n     * @notice Add pool-specific entries to the protocol swap and yield percentages.\n     * @dev This must be called from the Vault during pool registration. It will initialize the pool to the global\n     * protocol fee percentage values (or 0, if the `protocolFeeExempt` flags is set), and return the initial aggregate\n     * fee percentages, based on an initial pool creator fee of 0.\n     *\n     * @param pool The address of the pool being registered\n     * @param poolCreator The address of the pool creator (or 0 if there won't be a pool creator fee)\n     * @param protocolFeeExempt If true, the pool is initially exempt from protocol fees\n     * @return aggregateSwapFeePercentage The initial aggregate swap fee percentage\n     * @return aggregateYieldFeePercentage The initial aggregate yield fee percentage\n     */\n    function registerPool(\n        address pool,\n        address poolCreator,\n        bool protocolFeeExempt\n    ) external returns (uint256 aggregateSwapFeePercentage, uint256 aggregateYieldFeePercentage);\n\n    /**\n     * @notice Set the global protocol swap fee percentage, used by standard pools.\n     * @param newProtocolSwapFeePercentage The new protocol swap fee percentage\n     */\n    function setGlobalProtocolSwapFeePercentage(uint256 newProtocolSwapFeePercentage) external;\n\n    /**\n     * @notice Set the global protocol yield fee percentage, used by standard pools.\n     * @param newProtocolYieldFeePercentage The new protocol yield fee percentage\n     */\n    function setGlobalProtocolYieldFeePercentage(uint256 newProtocolYieldFeePercentage) external;\n\n    /**\n     * @notice Override the protocol swap fee percentage for a specific pool.\n     * @param pool The address of the pool for which we are setting the protocol swap fee\n     * @param newProtocolSwapFeePercentage The new protocol swap fee percentage for the pool\n     */\n    function setProtocolSwapFeePercentage(address pool, uint256 newProtocolSwapFeePercentage) external;\n\n    /**\n     * @notice Override the protocol yield fee percentage for a specific pool.\n     * @param pool The address of the pool for which we are setting the protocol yield fee\n     * @param newProtocolYieldFeePercentage The new protocol yield fee percentage for the pool\n     */\n    function setProtocolYieldFeePercentage(address pool, uint256 newProtocolYieldFeePercentage) external;\n\n    /**\n     * @notice Assigns a new pool creator swap fee percentage to the specified pool.\n     * @dev Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to\n     * the \"net\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the\n     * pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\n     *\n     * @param pool The address of the pool for which the pool creator fee will be changed\n     * @param poolCreatorSwapFeePercentage The new pool creator swap fee percentage to apply to the pool\n     */\n    function setPoolCreatorSwapFeePercentage(address pool, uint256 poolCreatorSwapFeePercentage) external;\n\n    /**\n     * @notice Assigns a new pool creator yield fee percentage to the specified pool.\n     * @dev Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to\n     * the \"net\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the\n     * pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\n     *\n     * @param pool The address of the pool for which the pool creator fee will be changed\n     * @param poolCreatorYieldFeePercentage The new pool creator yield fee percentage to apply to the pool\n     */\n    function setPoolCreatorYieldFeePercentage(address pool, uint256 poolCreatorYieldFeePercentage) external;\n\n    /**\n     * @notice Withdraw collected protocol fees for a given pool (all tokens). This is a permissioned function.\n     * @dev Sends swap and yield protocol fees to the recipient.\n     * @param pool The pool on which fees were collected\n     * @param recipient Address to send the tokens\n     */\n    function withdrawProtocolFees(address pool, address recipient) external;\n\n    /**\n     * @notice Withdraw collected protocol fees for a given pool and a given token. This is a permissioned function.\n     * @dev Sends swap and yield protocol fees to the recipient.\n     * @param pool The pool on which fees were collected\n     * @param recipient Address to send the tokens\n     * @param token Token to withdraw\n     */\n    function withdrawProtocolFeesForToken(address pool, address recipient, IERC20 token) external;\n\n    /**\n     * @notice Withdraw collected pool creator fees for a given pool. This is a permissioned function.\n     * @dev Sends swap and yield pool creator fees to the recipient.\n     * @param pool The pool on which fees were collected\n     * @param recipient Address to send the tokens\n     */\n    function withdrawPoolCreatorFees(address pool, address recipient) external;\n\n    /**\n     * @notice Withdraw collected pool creator fees for a given pool.\n     * @dev Sends swap and yield pool creator fees to the registered poolCreator. Since this is a known and immutable\n     * value, this function is permissionless.\n     *\n     * @param pool The pool on which fees were collected\n     */\n    function withdrawPoolCreatorFees(address pool) external;\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IAuthentication } from \"../solidity-utils/helpers/IAuthentication.sol\";\nimport { IVaultExtension } from \"./IVaultExtension.sol\";\nimport { IVaultErrors } from \"./IVaultErrors.sol\";\nimport { IVaultEvents } from \"./IVaultEvents.sol\";\nimport { IVaultAdmin } from \"./IVaultAdmin.sol\";\nimport { IVaultMain } from \"./IVaultMain.sol\";\n\n/// @notice Composite interface for all Vault operations: swap, add/remove liquidity, and associated queries.\ninterface IVault is IVaultMain, IVaultExtension, IVaultAdmin, IVaultErrors, IVaultEvents, IAuthentication {\n    /// @return vault The main Vault address.\n    function vault() external view override(IVaultAdmin, IVaultExtension) returns (IVault);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\n\nimport { IProtocolFeeController } from \"./IProtocolFeeController.sol\";\nimport { IAuthorizer } from \"./IAuthorizer.sol\";\nimport { IVault } from \"./IVault.sol\";\n\n/**\n * @notice Interface for functions defined on the `VaultAdmin` contract.\n * @dev `VaultAdmin` is the Proxy extension of `VaultExtension`, and handles the least critical operations,\n * as two delegate calls add gas to each call. Most of the permissioned calls are here.\n */\ninterface IVaultAdmin {\n    /*******************************************************************************\n                               Constants and immutables\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the main Vault address.\n     * @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n     * @return vault The address of the main Vault\n     */\n    function vault() external view returns (IVault);\n\n    /**\n     * @notice Returns the Vault's pause window end time.\n     * @dev This value is immutable, and represents the timestamp after which the Vault can no longer be paused\n     * by governance. Balancer timestamps are 32 bits.\n     *\n     * @return pauseWindowEndTime The timestamp when the Vault's pause window ends\n     */\n    function getPauseWindowEndTime() external view returns (uint32 pauseWindowEndTime);\n\n    /**\n     * @notice Returns the Vault's buffer period duration.\n     * @dev This value is immutable. It represents the period during which, if paused, the Vault will remain paused.\n     * This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer\n     * timestamps are 32 bits.\n     *\n     * @return bufferPeriodDuration The length of the buffer period in seconds\n     */\n    function getBufferPeriodDuration() external view returns (uint32 bufferPeriodDuration);\n\n    /**\n     * @notice Returns the Vault's buffer period end time.\n     * @dev This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer\n     * timestamps are 32 bits.\n     *\n     * @return bufferPeriodEndTime The timestamp after which the Vault remains permanently unpaused\n     */\n    function getBufferPeriodEndTime() external view returns (uint32 bufferPeriodEndTime);\n\n    /**\n     * @notice Get the minimum number of tokens in a pool.\n     * @dev We expect the vast majority of pools to be 2-token.\n     * @return minTokens The minimum token count of a pool\n     */\n    function getMinimumPoolTokens() external pure returns (uint256 minTokens);\n\n    /**\n     * @notice Get the maximum number of tokens in a pool.\n     * @return maxTokens The maximum token count of a pool\n     */\n    function getMaximumPoolTokens() external pure returns (uint256 maxTokens);\n\n    /**\n     * @notice Get the minimum total supply of pool tokens (BPT) for an initialized pool.\n     * @dev This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT\n     * is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\n     *\n     * @return poolMinimumTotalSupply The minimum total supply a pool can have after initialization\n     */\n    function getPoolMinimumTotalSupply() external pure returns (uint256 poolMinimumTotalSupply);\n\n    /**\n     * @notice Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\n     * @dev This prevents buffers from being completely drained. When the buffer is initialized, this minimum number\n     * of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal\n     * to the Vault, as buffers are not tokenized.\n     *\n     * @return bufferMinimumTotalSupply The minimum total supply a buffer can have after initialization\n     */\n    function getBufferMinimumTotalSupply() external pure returns (uint256 bufferMinimumTotalSupply);\n\n    /**\n     * @notice Get the minimum trade amount in a pool operation.\n     * @dev This limit is applied to the 18-decimal \"upscaled\" amount in any operation (swap, add/remove liquidity).\n     * @return minimumTradeAmount The minimum trade amount as an 18-decimal floating point number\n     */\n    function getMinimumTradeAmount() external view returns (uint256 minimumTradeAmount);\n\n    /**\n     * @notice Get the minimum wrap amount in a buffer operation.\n     * @dev This limit is applied to the wrap operation amount, in native underlying token decimals.\n     * @return minimumWrapAmount The minimum wrap amount in native underlying token decimals\n     */\n    function getMinimumWrapAmount() external view returns (uint256 minimumWrapAmount);\n\n    /*******************************************************************************\n                                    Vault Pausing\n    *******************************************************************************/\n\n    /**\n     * @notice Indicates whether the Vault is paused.\n     * @dev If the Vault is paused, all non-Recovery Mode state-changing operations on pools will revert. Note that\n     * ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not\n     * also pause buffers (though we anticipate they would likely be paused and unpaused together). Call\n     * `areBuffersPaused` to check the pause state of the buffers.\n     *\n     * @return vaultPaused True if the Vault is paused\n     */\n    function isVaultPaused() external view returns (bool vaultPaused);\n\n    /**\n     * @notice Returns the paused status, and end times of the Vault's pause window and buffer period.\n     * @dev Balancer timestamps are 32 bits.\n     * @return vaultPaused True if the Vault is paused\n     * @return vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\n     * @return vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period\n     */\n    function getVaultPausedState()\n        external\n        view\n        returns (bool vaultPaused, uint32 vaultPauseWindowEndTime, uint32 vaultBufferPeriodEndTime);\n\n    /**\n     * @notice Pause the Vault: an emergency action which disables all operational state-changing functions on pools.\n     * @dev This is a permissioned function that will only work during the Pause Window set during deployment.\n     * Note that ERC4626 buffer operations have an independent pause mechanism, which is not affected by pausing\n     * the Vault. Custom routers could still wrap/unwrap using buffers while the Vault is paused, unless buffers\n     * are also paused (with `pauseVaultBuffers`).\n     */\n    function pauseVault() external;\n\n    /**\n     * @notice Reverse a `pause` operation, and restore Vault pool operations to normal functionality.\n     * @dev This is a permissioned function that will only work on a paused Vault within the Buffer Period set during\n     * deployment. Note that the Vault will automatically unpause after the Buffer Period expires. As noted above,\n     * ERC4626 buffers and Vault operations on pools are independent. Unpausing the Vault does not reverse\n     * `pauseVaultBuffers`. If buffers were also paused, they will remain in that state until explicitly unpaused.\n     */\n    function unpauseVault() external;\n\n    /*******************************************************************************\n                                    Pool Pausing\n    *******************************************************************************/\n\n    /**\n     * @notice Pause the Pool: an emergency action which disables all pool functions.\n     * @dev This is a permissioned function that will only work during the Pause Window set during pool factory\n     * deployment.\n     *\n     * @param pool The pool being paused\n     */\n    function pausePool(address pool) external;\n\n    /**\n     * @notice Reverse a `pause` operation, and restore the Pool to normal functionality.\n     * @dev This is a permissioned function that will only work on a paused Pool within the Buffer Period set during\n     * deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\n     *\n     * @param pool The pool being unpaused\n     */\n    function unpausePool(address pool) external;\n\n    /*******************************************************************************\n                                         Fees\n    *******************************************************************************/\n\n    /**\n     * @notice Assigns a new static swap fee percentage to the specified pool.\n     * @dev This is a permissioned function, disabled if the pool is paused. The swap fee percentage must be within\n     * the bounds specified by the pool's implementation of `ISwapFeePercentageBounds`.\n     * Emits the SwapFeePercentageChanged event.\n     *\n     * @param pool The address of the pool for which the static swap fee will be changed\n     * @param swapFeePercentage The new swap fee percentage to apply to the pool\n     */\n    function setStaticSwapFeePercentage(address pool, uint256 swapFeePercentage) external;\n\n    /**\n     * @notice Collects accumulated aggregate swap and yield fees for the specified pool.\n     * @dev Fees are sent to the ProtocolFeeController address.\n     * @param pool The pool on which all aggregate fees should be collected\n     * @return swapFeeAmounts An array with the total swap fees collected, sorted in token registration order\n     * @return yieldFeeAmounts An array with the total yield fees collected, sorted in token registration order\n     */\n    function collectAggregateFees(\n        address pool\n    ) external returns (uint256[] memory swapFeeAmounts, uint256[] memory yieldFeeAmounts);\n\n    /**\n     * @notice Update an aggregate swap fee percentage.\n     * @dev Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee\n     * for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's\n     * fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also\n     * that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol).\n     * Emits an `AggregateSwapFeePercentageChanged` event.\n     *\n     * @param pool The pool whose swap fee percentage will be updated\n     * @param newAggregateSwapFeePercentage The new aggregate swap fee percentage\n     */\n    function updateAggregateSwapFeePercentage(address pool, uint256 newAggregateSwapFeePercentage) external;\n\n    /**\n     * @notice Update an aggregate yield fee percentage.\n     * @dev Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee\n     * for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's\n     * fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also\n     * that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol).\n     * Emits an `AggregateYieldFeePercentageChanged` event.\n     *\n     * @param pool The pool whose yield fee percentage will be updated\n     * @param newAggregateYieldFeePercentage The new aggregate yield fee percentage\n     */\n    function updateAggregateYieldFeePercentage(address pool, uint256 newAggregateYieldFeePercentage) external;\n\n    /**\n     * @notice Sets a new Protocol Fee Controller for the Vault.\n     * @dev This is a permissioned call. Emits a `ProtocolFeeControllerChanged` event.\n     * @param newProtocolFeeController The address of the new Protocol Fee Controller\n     */\n    function setProtocolFeeController(IProtocolFeeController newProtocolFeeController) external;\n\n    /*******************************************************************************\n                                    Recovery Mode\n    *******************************************************************************/\n\n    /**\n     * @notice Enable recovery mode for a pool.\n     * @dev This is a permissioned function. It enables a safe proportional withdrawal, with no external calls.\n     * Since there are no external calls, ensuring that entering Recovery Mode cannot fail, we cannot compute and so\n     * must forfeit any yield fees between the last operation and enabling Recovery Mode. For the same reason, live\n     * balances cannot be updated while in Recovery Mode, as doing so might cause withdrawals to fail.\n     *\n     * @param pool The address of the pool\n     */\n    function enableRecoveryMode(address pool) external;\n\n    /**\n     * @notice Disable recovery mode for a pool.\n     * @dev This is a permissioned function. It re-syncs live balances (which could not be updated during\n     * Recovery Mode), forfeiting any yield fees that accrued while enabled. It makes external calls, and could\n     * potentially fail if there is an issue with any associated Rate Providers.\n     *\n     * @param pool The address of the pool\n     */\n    function disableRecoveryMode(address pool) external;\n\n    /*******************************************************************************\n                                  Query Functionality\n    *******************************************************************************/\n\n    /**\n     * @notice Disables query functionality on the Vault. Can only be called by governance.\n     * @dev The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from\n     * settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable\n     * queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2).\n     * This function can be acted upon as an emergency measure in ambiguous contexts where it's not 100% clear whether\n     * disabling queries is completely necessary; queries can still be re-enabled after this call.\n     */\n    function disableQuery() external;\n\n    /**\n     * @notice Disables query functionality permanently on the Vault. Can only be called by governance.\n     * @dev Shall only be used when there is no doubt that queries pose a fundamental threat to the system.\n     */\n    function disableQueryPermanently() external;\n\n    /**\n     * @notice Enables query functionality on the Vault. Can only be called by governance.\n     * @dev Only works if queries are not permanently disabled.\n     */\n    function enableQuery() external;\n\n    /*******************************************************************************\n                                  ERC4626 Buffers\n    *******************************************************************************/\n\n    /**\n     * @notice Indicates whether the Vault buffers are paused.\n     * @dev When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true)\n     * will revert. Pausing buffers is reversible. Note that ERC4626 buffers and the Vault have separate and\n     * independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they\n     * would likely be paused and unpaused together). Call `isVaultPaused` to check the pause state of the Vault.\n     *\n     * @return buffersPaused True if the Vault buffers are paused\n     */\n    function areBuffersPaused() external view returns (bool buffersPaused);\n\n    /**\n     * @notice Pauses native vault buffers globally.\n     * @dev When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's\n     * `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. Currently it's not\n     * possible to pause vault buffers individually.\n     *\n     * This is a permissioned call, and is reversible (see `unpauseVaultBuffers`). Note that the Vault has a separate\n     * and independent pausing mechanism. It is possible to pause the Vault (i.e. pool operations), without affecting\n     * buffers, and vice versa.\n     */\n    function pauseVaultBuffers() external;\n\n    /**\n     * @notice Unpauses native vault buffers globally.\n     * @dev When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's\n     * `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. As noted above,\n     * ERC4626 buffers and Vault operations on pools are independent. Unpausing buffers does not reverse `pauseVault`.\n     * If the Vault was also paused, it will remain in that state until explicitly unpaused.\n     *\n     * This is a permissioned call.\n     */\n    function unpauseVaultBuffers() external;\n\n    /**\n     * @notice Initializes buffer for the given wrapped token.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param amountUnderlyingRaw Amount of underlying tokens that will be deposited into the buffer\n     * @param amountWrappedRaw Amount of wrapped tokens that will be deposited into the buffer\n     * @param minIssuedShares Minimum amount of shares to receive from the buffer, expressed in underlying token\n     * native decimals\n     * @param sharesOwner Address that will own the deposited liquidity. Only this address will be able to remove\n     * liquidity from the buffer\n     * @return issuedShares the amount of tokens sharesOwner has in the buffer, expressed in underlying token amounts.\n     * (it is the BPT of an internal ERC4626 buffer). It is expressed in underlying token native decimals.\n     */\n    function initializeBuffer(\n        IERC4626 wrappedToken,\n        uint256 amountUnderlyingRaw,\n        uint256 amountWrappedRaw,\n        uint256 minIssuedShares,\n        address sharesOwner\n    ) external returns (uint256 issuedShares);\n\n    /**\n     * @notice Adds liquidity to an internal ERC4626 buffer in the Vault, proportionally.\n     * @dev The buffer needs to be initialized beforehand.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param maxAmountUnderlyingInRaw Maximum amount of underlying tokens to add to the buffer. It is expressed in\n     * underlying token native decimals\n     * @param maxAmountWrappedInRaw Maximum amount of wrapped tokens to add to the buffer. It is expressed in wrapped\n     * token native decimals\n     * @param exactSharesToIssue The value in underlying tokens that `sharesOwner` wants to add to the buffer,\n     * in underlying token decimals\n     * @param sharesOwner Address that will own the deposited liquidity. Only this address will be able to remove\n     * liquidity from the buffer\n     * @return amountUnderlyingRaw Amount of underlying tokens deposited into the buffer\n     * @return amountWrappedRaw Amount of wrapped tokens deposited into the buffer\n     */\n    function addLiquidityToBuffer(\n        IERC4626 wrappedToken,\n        uint256 maxAmountUnderlyingInRaw,\n        uint256 maxAmountWrappedInRaw,\n        uint256 exactSharesToIssue,\n        address sharesOwner\n    ) external returns (uint256 amountUnderlyingRaw, uint256 amountWrappedRaw);\n\n    /**\n     * @notice Removes liquidity from an internal ERC4626 buffer in the Vault.\n     * @dev Only proportional exits are supported, and the sender has to be the owner of the shares.\n     * This function unlocks the Vault just for this operation; it does not work with a Router as an entrypoint.\n     *\n     * Pre-conditions:\n     * - The buffer needs to be initialized.\n     * - sharesOwner is the original msg.sender, it needs to be checked in the Router. That's why\n     *   this call is authenticated; only routers approved by the DAO can remove the liquidity of a buffer.\n     * - The buffer needs to have some liquidity and have its asset registered in `_bufferAssets` storage.\n     *\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param sharesToRemove Amount of shares to remove from the buffer. Cannot be greater than sharesOwner's\n     * total shares. It is expressed in underlying token native decimals\n     * @param minAmountUnderlyingOutRaw Minimum amount of underlying tokens to receive from the buffer. It is expressed\n     * in underlying token native decimals\n     * @param minAmountWrappedOutRaw Minimum amount of wrapped tokens to receive from the buffer. It is expressed in\n     * wrapped token native decimals\n     * @return removedUnderlyingBalanceRaw Amount of underlying tokens returned to the user\n     * @return removedWrappedBalanceRaw Amount of wrapped tokens returned to the user\n     */\n    function removeLiquidityFromBuffer(\n        IERC4626 wrappedToken,\n        uint256 sharesToRemove,\n        uint256 minAmountUnderlyingOutRaw,\n        uint256 minAmountWrappedOutRaw\n    ) external returns (uint256 removedUnderlyingBalanceRaw, uint256 removedWrappedBalanceRaw);\n\n    /**\n     * @notice Returns the asset registered for a given wrapped token.\n     * @dev The asset can never change after buffer initialization.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return underlyingToken Address of the underlying token registered for the wrapper; `address(0)` if the buffer\n     * has not been initialized.\n     */\n    function getBufferAsset(IERC4626 wrappedToken) external view returns (address underlyingToken);\n\n    /**\n     * @notice Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets\n     * in the buffer.\n     *\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @param liquidityOwner Address of the user that owns liquidity in the wrapped token's buffer\n     * @return ownerShares Amount of shares allocated to the liquidity owner, in native underlying token decimals\n     */\n    function getBufferOwnerShares(\n        IERC4626 wrappedToken,\n        address liquidityOwner\n    ) external view returns (uint256 ownerShares);\n\n    /**\n     * @notice Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return bufferShares Amount of supply shares of the buffer, in native underlying token decimals\n     */\n    function getBufferTotalShares(IERC4626 wrappedToken) external view returns (uint256 bufferShares);\n\n    /**\n     * @notice Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\n     * @dev All values are in native token decimals of the wrapped or underlying tokens.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return underlyingBalanceRaw Amount of underlying tokens deposited into the buffer, in native token decimals\n     * @return wrappedBalanceRaw Amount of wrapped tokens deposited into the buffer, in native token decimals\n     */\n    function getBufferBalance(\n        IERC4626 wrappedToken\n    ) external view returns (uint256 underlyingBalanceRaw, uint256 wrappedBalanceRaw);\n\n    /*******************************************************************************\n                                Authentication\n    *******************************************************************************/\n\n    /**\n     * @notice Sets a new Authorizer for the Vault.\n     * @dev This is a permissioned call. Emits an `AuthorizerChanged` event.\n     * @param newAuthorizer The address of the new authorizer\n     */\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @notice Errors are declared inside an interface (namespace) to improve DX with Typechain.\ninterface IVaultErrors {\n    /*******************************************************************************\n                            Registration and Initialization\n    *******************************************************************************/\n\n    /**\n     * @notice A pool has already been registered. `registerPool` may only be called once.\n     * @param pool The already registered pool\n     */\n    error PoolAlreadyRegistered(address pool);\n\n    /**\n     * @notice A pool has already been initialized. `initialize` may only be called once.\n     * @param pool The already initialized pool\n     */\n    error PoolAlreadyInitialized(address pool);\n\n    /**\n     * @notice A pool has not been registered.\n     * @param pool The unregistered pool\n     */\n    error PoolNotRegistered(address pool);\n\n    /**\n     * @notice A referenced pool has not been initialized.\n     * @param pool The uninitialized pool\n     */\n    error PoolNotInitialized(address pool);\n\n    /**\n     * @notice A hook contract rejected a pool on registration.\n     * @param poolHooksContract Address of the hook contract that rejected the pool registration\n     * @param pool Address of the rejected pool\n     * @param poolFactory Address of the pool factory\n     */\n    error HookRegistrationFailed(address poolHooksContract, address pool, address poolFactory);\n\n    /**\n     * @notice A token was already registered (i.e., it is a duplicate in the pool).\n     * @param token The duplicate token\n     */\n    error TokenAlreadyRegistered(IERC20 token);\n\n    /// @notice The token count is below the minimum allowed.\n    error MinTokens();\n\n    /// @notice The token count is above the maximum allowed.\n    error MaxTokens();\n\n    /// @notice Invalid tokens (e.g., zero) cannot be registered.\n    error InvalidToken();\n\n    /// @notice The token type given in a TokenConfig during pool registration is invalid.\n    error InvalidTokenType();\n\n    /// @notice The data in a TokenConfig struct is inconsistent or unsupported.\n    error InvalidTokenConfiguration();\n\n    /// @notice Tokens with more than 18 decimals are not supported.\n    error InvalidTokenDecimals();\n\n    /**\n     * @notice The token list passed into an operation does not match the pool tokens in the pool.\n     * @param pool Address of the pool\n     * @param expectedToken The correct token at a given index in the pool\n     * @param actualToken The actual token found at that index\n     */\n    error TokensMismatch(address pool, address expectedToken, address actualToken);\n\n    /*******************************************************************************\n                                 Transient Accounting\n    *******************************************************************************/\n\n    /// @notice A transient accounting operation completed with outstanding token deltas.\n    error BalanceNotSettled();\n\n    /// @notice A user called a Vault function (swap, add/remove liquidity) outside the lock context.\n    error VaultIsNotUnlocked();\n\n    /// @notice The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\n    error DynamicSwapFeeHookFailed();\n\n    /// @notice The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\n    error BeforeSwapHookFailed();\n\n    /// @notice The pool has returned false to the afterSwap hook, indicating the transaction should revert.\n    error AfterSwapHookFailed();\n\n    /// @notice The pool has returned false to the beforeInitialize hook, indicating the transaction should revert.\n    error BeforeInitializeHookFailed();\n\n    /// @notice The pool has returned false to the afterInitialize hook, indicating the transaction should revert.\n    error AfterInitializeHookFailed();\n\n    /// @notice The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert.\n    error BeforeAddLiquidityHookFailed();\n\n    /// @notice The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert.\n    error AfterAddLiquidityHookFailed();\n\n    /// @notice The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert.\n    error BeforeRemoveLiquidityHookFailed();\n\n    /// @notice The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert.\n    error AfterRemoveLiquidityHookFailed();\n\n    /// @notice An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance).\n    error RouterNotTrusted();\n\n    /*******************************************************************************\n                                        Swaps\n    *******************************************************************************/\n\n    /// @notice The user tried to swap zero tokens.\n    error AmountGivenZero();\n\n    /// @notice The user attempted to swap a token for itself.\n    error CannotSwapSameToken();\n\n    /**\n     * @notice The user attempted to operate with a token that is not in the pool.\n     * @param token The unregistered token\n     */\n    error TokenNotRegistered(IERC20 token);\n\n    /**\n     * @notice An amount in or out has exceeded the limit specified in the swap request.\n     * @param amount The total amount in or out\n     * @param limit The amount of the limit that has been exceeded\n     */\n    error SwapLimit(uint256 amount, uint256 limit);\n\n    /**\n     * @notice A hook adjusted amount in or out has exceeded the limit specified in the swap request.\n     * @param amount The total amount in or out\n     * @param limit The amount of the limit that has been exceeded\n     */\n    error HookAdjustedSwapLimit(uint256 amount, uint256 limit);\n\n    /// @notice The amount given or calculated for an operation is below the minimum limit.\n    error TradeAmountTooSmall();\n\n    /*******************************************************************************\n                                    Add Liquidity\n    *******************************************************************************/\n\n    /// @notice Add liquidity kind not supported.\n    error InvalidAddLiquidityKind();\n\n    /**\n     * @notice A required amountIn exceeds the maximum limit specified for the operation.\n     * @param tokenIn The incoming token\n     * @param amountIn The total token amount in\n     * @param maxAmountIn The amount of the limit that has been exceeded\n     */\n    error AmountInAboveMax(IERC20 tokenIn, uint256 amountIn, uint256 maxAmountIn);\n\n    /**\n     * @notice A hook adjusted amountIn exceeds the maximum limit specified for the operation.\n     * @param tokenIn The incoming token\n     * @param amountIn The total token amount in\n     * @param maxAmountIn The amount of the limit that has been exceeded\n     */\n    error HookAdjustedAmountInAboveMax(IERC20 tokenIn, uint256 amountIn, uint256 maxAmountIn);\n\n    /**\n     * @notice The BPT amount received from adding liquidity is below the minimum specified for the operation.\n     * @param amountOut The total BPT amount out\n     * @param minAmountOut The amount of the limit that has been exceeded\n     */\n    error BptAmountOutBelowMin(uint256 amountOut, uint256 minAmountOut);\n\n    /// @notice Pool does not support adding liquidity with a customized input.\n    error DoesNotSupportAddLiquidityCustom();\n\n    /// @notice Pool does not support adding liquidity through donation.\n    error DoesNotSupportDonation();\n\n    /*******************************************************************************\n                                    Remove Liquidity\n    *******************************************************************************/\n\n    /// @notice Remove liquidity kind not supported.\n    error InvalidRemoveLiquidityKind();\n\n    /**\n     * @notice The actual amount out is below the minimum limit specified for the operation.\n     * @param tokenOut The outgoing token\n     * @param amountOut The total BPT amount out\n     * @param minAmountOut The amount of the limit that has been exceeded\n     */\n    error AmountOutBelowMin(IERC20 tokenOut, uint256 amountOut, uint256 minAmountOut);\n\n    /**\n     * @notice The hook adjusted amount out is below the minimum limit specified for the operation.\n     * @param tokenOut The outgoing token\n     * @param amountOut The total BPT amount out\n     * @param minAmountOut The amount of the limit that has been exceeded\n     */\n    error HookAdjustedAmountOutBelowMin(IERC20 tokenOut, uint256 amountOut, uint256 minAmountOut);\n\n    /**\n     * @notice The required BPT amount in exceeds the maximum limit specified for the operation.\n     * @param amountIn The total BPT amount in\n     * @param maxAmountIn The amount of the limit that has been exceeded\n     */\n    error BptAmountInAboveMax(uint256 amountIn, uint256 maxAmountIn);\n\n    /// @notice Pool does not support removing liquidity with a customized input.\n    error DoesNotSupportRemoveLiquidityCustom();\n\n    /*******************************************************************************\n                                     Fees\n    *******************************************************************************/\n\n    /**\n     * @notice Error raised when there is an overflow in the fee calculation.\n     * @dev This occurs when the sum of the parts (aggregate swap or yield fee) is greater than the whole\n     * (total swap or yield fee). Also validated when the protocol fee controller updates aggregate fee\n     * percentages in the Vault.\n     */\n    error ProtocolFeesExceedTotalCollected();\n\n    /**\n     * @notice Error raised when the swap fee percentage is less than the minimum allowed value.\n     * @dev The Vault itself does not impose a universal minimum. Rather, it validates against the\n     * range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error\n     * if it is below the minimum value returned by the pool.\n     *\n     * Pools with dynamic fees do not check these limits.\n     */\n    error SwapFeePercentageTooLow();\n\n    /**\n     * @notice Error raised when the swap fee percentage is greater than the maximum allowed value.\n     * @dev The Vault itself does not impose a universal minimum. Rather, it validates against the\n     * range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error\n     * if it is above the maximum value returned by the pool.\n     *\n     * Pools with dynamic fees do not check these limits.\n     */\n    error SwapFeePercentageTooHigh();\n\n    /**\n     * @notice Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\n     * @dev Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit\n     * precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which\n     * corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%).\n     * Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between\n     * the aggregate fee calculated here and that stored in the Vault.\n     */\n    error FeePrecisionTooHigh();\n\n    /// @notice A given percentage is above the maximum (usually a value close to FixedPoint.ONE, or 1e18 wei).\n    error PercentageAboveMax();\n\n    /*******************************************************************************\n                                    Queries\n    *******************************************************************************/\n\n    /// @notice A user tried to execute a query operation when they were disabled.\n    error QueriesDisabled();\n\n    /// @notice An admin tried to re-enable queries, but they were disabled permanently.\n    error QueriesDisabledPermanently();\n\n    /*******************************************************************************\n                                Recovery Mode\n    *******************************************************************************/\n\n    /**\n     * @notice Cannot enable recovery mode when already enabled.\n     * @param pool The pool\n     */\n    error PoolInRecoveryMode(address pool);\n\n    /**\n     * @notice Cannot disable recovery mode when not enabled.\n     * @param pool The pool\n     */\n    error PoolNotInRecoveryMode(address pool);\n\n    /*******************************************************************************\n                                Authentication\n    *******************************************************************************/\n\n    /**\n     * @notice Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\n     * @param sender The account attempting to call a permissioned function\n     */\n    error SenderIsNotVault(address sender);\n\n    /*******************************************************************************\n                                        Pausing\n    *******************************************************************************/\n\n    /// @notice The caller specified a pause window period longer than the maximum.\n    error VaultPauseWindowDurationTooLarge();\n\n    /// @notice The caller specified a buffer period longer than the maximum.\n    error PauseBufferPeriodDurationTooLarge();\n\n    /// @notice A user tried to perform an operation while the Vault was paused.\n    error VaultPaused();\n\n    /// @notice Governance tried to unpause the Vault when it was not paused.\n    error VaultNotPaused();\n\n    /// @notice Governance tried to pause the Vault after the pause period expired.\n    error VaultPauseWindowExpired();\n\n    /**\n     * @notice A user tried to perform an operation involving a paused Pool.\n     * @param pool The paused pool\n     */\n    error PoolPaused(address pool);\n\n    /**\n     * @notice Governance tried to unpause the Pool when it was not paused.\n     * @param pool The unpaused pool\n     */\n    error PoolNotPaused(address pool);\n\n    /**\n     * @notice Governance tried to pause a Pool after the pause period expired.\n     * @param pool The pool\n     */\n    error PoolPauseWindowExpired(address pool);\n\n    /*******************************************************************************\n                                ERC4626 token buffers\n    *******************************************************************************/\n\n    /**\n     * @notice The buffer for the given wrapped token was already initialized.\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     */\n    error BufferAlreadyInitialized(IERC4626 wrappedToken);\n\n    /**\n     * @notice The buffer for the given wrapped token was not initialized.\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     */\n    error BufferNotInitialized(IERC4626 wrappedToken);\n\n    /// @notice The user is trying to remove more than their allocated shares from the buffer.\n    error NotEnoughBufferShares();\n\n    /**\n     * @notice The wrapped token asset does not match the underlying token.\n     * @dev This should never happen, but a malicious wrapper contract might not return the correct address.\n     * Legitimate wrapper contracts should make the asset a constant or immutable value.\n     *\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     * @param underlyingToken The underlying token returned by `asset`\n     */\n    error WrongUnderlyingToken(IERC4626 wrappedToken, address underlyingToken);\n\n    /**\n     * @notice A wrapped token reported the zero address as its underlying token asset.\n     * @dev This should never happen, but a malicious wrapper contract might do this (e.g., in an attempt to\n     * re-initialize the buffer).\n     *\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     */\n    error InvalidUnderlyingToken(IERC4626 wrappedToken);\n\n    /**\n     * @notice The amount given to wrap/unwrap was too small, which can introduce rounding issues.\n     * @param wrappedToken The wrapped token corresponding to the buffer\n     */\n    error WrapAmountTooSmall(IERC4626 wrappedToken);\n\n    /// @notice Buffer operation attempted while vault buffers are paused.\n    error VaultBuffersArePaused();\n\n    /// @notice Buffer shares were minted to the zero address.\n    error BufferSharesInvalidReceiver();\n\n    /// @notice Buffer shares were burned from the zero address.\n    error BufferSharesInvalidOwner();\n\n    /**\n     * @notice The total supply of a buffer can't be lower than the absolute minimum.\n     * @param totalSupply The total supply value that was below the minimum\n     */\n    error BufferTotalSupplyTooLow(uint256 totalSupply);\n\n    /// @dev A wrap/unwrap operation consumed more or returned less underlying tokens than it should.\n    error NotEnoughUnderlying(IERC4626 wrappedToken, uint256 expectedUnderlyingAmount, uint256 actualUnderlyingAmount);\n\n    /// @dev A wrap/unwrap operation consumed more or returned less wrapped tokens than it should.\n    error NotEnoughWrapped(IERC4626 wrappedToken, uint256 expectedWrappedAmount, uint256 actualWrappedAmount);\n\n    /// @dev Shares issued during initialization are below the requested amount.\n    error IssuedSharesBelowMin(uint256 issuedShares, uint256 minIssuedShares);\n\n    /*******************************************************************************\n                                    Miscellaneous\n    *******************************************************************************/\n\n    /// @notice Pool does not support adding / removing liquidity with an unbalanced input.\n    error DoesNotSupportUnbalancedLiquidity();\n\n    /// @notice The contract should not receive ETH.\n    error CannotReceiveEth();\n\n    /**\n     * @notice The `VaultExtension` contract was called by an account directly.\n     * @dev It can only be called by the Vault via delegatecall.\n     */\n    error NotVaultDelegateCall();\n\n    /// @notice The `VaultExtension` contract was configured with an incorrect Vault address.\n    error WrongVaultExtensionDeployment();\n\n    /// @notice The `ProtocolFeeController` contract was configured with an incorrect Vault address.\n    error WrongProtocolFeeControllerDeployment();\n\n    /// @notice The `VaultAdmin` contract was configured with an incorrect Vault address.\n    error WrongVaultAdminDeployment();\n\n    /// @notice Quote reverted with a reserved error code.\n    error QuoteResultSpoofed();\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IProtocolFeeController } from \"./IProtocolFeeController.sol\";\nimport { IAuthorizer } from \"./IAuthorizer.sol\";\nimport { IHooks } from \"./IHooks.sol\";\nimport \"./VaultTypes.sol\";\n\n/// @dev Events are declared inside an interface (namespace) to improve DX with Typechain.\ninterface IVaultEvents {\n    /**\n     * @notice A Pool was registered by calling `registerPool`.\n     * @param pool The pool being registered\n     * @param factory The factory creating the pool\n     * @param tokenConfig An array of descriptors for the tokens the pool will manage\n     * @param swapFeePercentage The static swap fee of the pool\n     * @param pauseWindowEndTime The pool's pause window end time\n     * @param roleAccounts Addresses the Vault will allow to change certain pool settings\n     * @param hooksConfig Flags indicating which hooks the pool supports and address of hooks contract\n     * @param liquidityManagement Supported liquidity management hook flags\n     */\n    event PoolRegistered(\n        address indexed pool,\n        address indexed factory,\n        TokenConfig[] tokenConfig,\n        uint256 swapFeePercentage,\n        uint32 pauseWindowEndTime,\n        PoolRoleAccounts roleAccounts,\n        HooksConfig hooksConfig,\n        LiquidityManagement liquidityManagement\n    );\n\n    /**\n     * @notice A Pool was initialized by calling `initialize`.\n     * @param pool The pool being initialized\n     */\n    event PoolInitialized(address indexed pool);\n\n    /**\n     * @notice A swap has occurred.\n     * @param pool The pool with the tokens being swapped\n     * @param tokenIn The token entering the Vault (balance increases)\n     * @param tokenOut The token leaving the Vault (balance decreases)\n     * @param amountIn Number of tokenIn tokens\n     * @param amountOut Number of tokenOut tokens\n     * @param swapFeePercentage Swap fee percentage applied (can differ if dynamic)\n     * @param swapFeeAmount Swap fee amount paid\n     */\n    event Swap(\n        address indexed pool,\n        IERC20 indexed tokenIn,\n        IERC20 indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut,\n        uint256 swapFeePercentage,\n        uint256 swapFeeAmount\n    );\n\n    /**\n     * @notice A wrap operation has occurred.\n     * @param wrappedToken The wrapped token address\n     * @param depositedUnderlying Number of underlying tokens deposited\n     * @param mintedShares Number of shares (wrapped tokens) minted\n     * @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)\n     */\n    event Wrap(\n        IERC4626 indexed wrappedToken,\n        uint256 depositedUnderlying,\n        uint256 mintedShares,\n        bytes32 bufferBalances\n    );\n\n    /**\n     * @notice An unwrap operation has occurred.\n     * @param wrappedToken The wrapped token address\n     * @param burnedShares Number of shares (wrapped tokens) burned\n     * @param withdrawnUnderlying Number of underlying tokens withdrawn\n     * @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)\n     */\n    event Unwrap(\n        IERC4626 indexed wrappedToken,\n        uint256 burnedShares,\n        uint256 withdrawnUnderlying,\n        bytes32 bufferBalances\n    );\n\n    /**\n     * @notice Liquidity has been added to a pool (including initialization).\n     * @param pool The pool with liquidity added\n     * @param liquidityProvider The user performing the operation\n     * @param kind The add liquidity operation type (e.g., proportional, custom)\n     * @param totalSupply The total supply of the pool after the operation\n     * @param amountsAddedRaw The amount of each token that was added, sorted in token registration order\n     * @param swapFeeAmountsRaw The total swap fees charged, sorted in token registration order\n     */\n    event LiquidityAdded(\n        address indexed pool,\n        address indexed liquidityProvider,\n        AddLiquidityKind indexed kind,\n        uint256 totalSupply,\n        uint256[] amountsAddedRaw,\n        uint256[] swapFeeAmountsRaw\n    );\n\n    /**\n     * @notice Liquidity has been removed from a pool.\n     * @param pool The pool with liquidity removed\n     * @param liquidityProvider The user performing the operation\n     * @param kind The remove liquidity operation type (e.g., proportional, custom)\n     * @param totalSupply The total supply of the pool after the operation\n     * @param amountsRemovedRaw The amount of each token that was removed, sorted in token registration order\n     * @param swapFeeAmountsRaw The total swap fees charged, sorted in token registration order\n     */\n    event LiquidityRemoved(\n        address indexed pool,\n        address indexed liquidityProvider,\n        RemoveLiquidityKind indexed kind,\n        uint256 totalSupply,\n        uint256[] amountsRemovedRaw,\n        uint256[] swapFeeAmountsRaw\n    );\n\n    /**\n     * @notice The Vault's pause status has changed.\n     * @param paused True if the Vault was paused\n     */\n    event VaultPausedStateChanged(bool paused);\n\n    /// @notice `disableQuery` has been called on the Vault, disabling query functionality.\n    event VaultQueriesDisabled();\n\n    /// @notice `enableQuery` has been called on the Vault, enabling query functionality.\n    event VaultQueriesEnabled();\n\n    /**\n     * @notice A Pool's pause status has changed.\n     * @param pool The pool that was just paused or unpaused\n     * @param paused True if the pool was paused\n     */\n    event PoolPausedStateChanged(address indexed pool, bool paused);\n\n    /**\n     * @notice Emitted when the swap fee percentage of a pool is updated.\n     * @param swapFeePercentage The new swap fee percentage for the pool\n     */\n    event SwapFeePercentageChanged(address indexed pool, uint256 swapFeePercentage);\n\n    /**\n     * @notice Recovery mode has been enabled or disabled for a pool.\n     * @param pool The pool\n     * @param recoveryMode True if recovery mode was enabled\n     */\n    event PoolRecoveryModeStateChanged(address indexed pool, bool recoveryMode);\n\n    /**\n     * @notice A protocol or pool creator fee has changed, causing an update to the aggregate swap fee.\n     * @dev The `ProtocolFeeController` will emit an event with the underlying change.\n     * @param pool The pool whose aggregate swap fee percentage changed\n     * @param aggregateSwapFeePercentage The new aggregate swap fee percentage\n     */\n    event AggregateSwapFeePercentageChanged(address indexed pool, uint256 aggregateSwapFeePercentage);\n\n    /**\n     * @notice A protocol or pool creator fee has changed, causing an update to the aggregate yield fee.\n     * @dev The `ProtocolFeeController` will emit an event with the underlying change.\n     * @param pool The pool whose aggregate yield fee percentage changed\n     * @param aggregateYieldFeePercentage The new aggregate yield fee percentage\n     */\n    event AggregateYieldFeePercentageChanged(address indexed pool, uint256 aggregateYieldFeePercentage);\n\n    /**\n     * @notice A new authorizer is set by `setAuthorizer`.\n     * @param newAuthorizer The address of the new authorizer\n     */\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\n\n    /**\n     * @notice A new protocol fee controller is set by `setProtocolFeeController`.\n     * @param newProtocolFeeController The address of the new protocol fee controller\n     */\n    event ProtocolFeeControllerChanged(IProtocolFeeController indexed newProtocolFeeController);\n\n    /**\n     * @notice Liquidity was added to an ERC4626 buffer corresponding to the given wrapped token.\n     * @dev The underlying token can be derived from the wrapped token, so it's not included here.\n     *\n     * @param wrappedToken The wrapped token that identifies the buffer\n     * @param amountUnderlying The amount of the underlying token that was deposited\n     * @param amountWrapped The amount of the wrapped token that was deposited\n     * @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)\n     */\n    event LiquidityAddedToBuffer(\n        IERC4626 indexed wrappedToken,\n        uint256 amountUnderlying,\n        uint256 amountWrapped,\n        bytes32 bufferBalances\n    );\n\n    /**\n     * @notice Buffer shares were minted for an ERC4626 buffer corresponding to a given wrapped token.\n     * @dev The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares`\n     * retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the\n     * \"totalSupply\" of a buffer.\n     *\n     * @param wrappedToken The wrapped token that identifies the buffer\n     * @param to The owner of the minted shares\n     * @param issuedShares The amount of \"internal BPT\" shares created\n     */\n    event BufferSharesMinted(IERC4626 indexed wrappedToken, address indexed to, uint256 issuedShares);\n\n    /**\n     * @notice Buffer shares were burned for an ERC4626 buffer corresponding to a given wrapped token.\n     * @dev The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares`\n     * retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the\n     * \"totalSupply\" of a buffer.\n     *\n     * @param wrappedToken The wrapped token that identifies the buffer\n     * @param from The owner of the burned shares\n     * @param burnedShares The amount of \"internal BPT\" shares burned\n     */\n    event BufferSharesBurned(IERC4626 indexed wrappedToken, address indexed from, uint256 burnedShares);\n\n    /**\n     * @notice Liquidity was removed from an ERC4626 buffer.\n     * @dev The underlying token can be derived from the wrapped token, so it's not included here.\n     * @param wrappedToken The wrapped token that identifies the buffer\n     * @param amountUnderlying The amount of the underlying token that was withdrawn\n     * @param amountWrapped The amount of the wrapped token that was withdrawn\n     * @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)\n     */\n    event LiquidityRemovedFromBuffer(\n        IERC4626 indexed wrappedToken,\n        uint256 amountUnderlying,\n        uint256 amountWrapped,\n        bytes32 bufferBalances\n    );\n\n    /**\n     * @notice The Vault buffers pause status has changed.\n     * @dev If buffers all paused, all buffer operations (i.e., all calls through the Router with `isBuffer`\n     * set to true) will revert.\n     *\n     * @param paused True if the Vault buffers were paused\n     */\n    event VaultBuffersPausedStateChanged(bool paused);\n\n    /**\n     * @notice Pools can use this event to emit event data from the Vault.\n     * @param pool Pool address\n     * @param eventKey Event key\n     * @param eventData Encoded event data\n     */\n    event VaultAuxiliary(address indexed pool, bytes32 indexed eventKey, bytes eventData);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IAuthorizer } from \"./IAuthorizer.sol\";\nimport { IProtocolFeeController } from \"./IProtocolFeeController.sol\";\nimport { IVault } from \"./IVault.sol\";\nimport { IHooks } from \"./IHooks.sol\";\nimport \"./VaultTypes.sol\";\n\n/**\n * @notice Interface for functions defined on the `VaultExtension` contract.\n * @dev `VaultExtension` handles less critical or frequently used functions, since delegate calls through\n * the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and\n * liquidity operations.\n */\ninterface IVaultExtension {\n    /*******************************************************************************\n                              Constants and immutables\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the main Vault address.\n     * @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n     * @return vault The address of the main Vault\n     */\n    function vault() external view returns (IVault);\n\n    /**\n     * @notice Returns the VaultAdmin contract address.\n     * @dev The VaultAdmin contract mostly implements permissioned functions.\n     * @return vaultAdmin The address of the Vault admin\n     */\n    function getVaultAdmin() external view returns (address vaultAdmin);\n\n    /*******************************************************************************\n                              Transient Accounting\n    *******************************************************************************/\n\n    /**\n     * @notice Returns whether the Vault is unlocked (i.e., executing an operation).\n     * @dev The Vault must be unlocked to perform state-changing liquidity operations.\n     * @return unlocked True if the Vault is unlocked, false otherwise\n     */\n    function isUnlocked() external view returns (bool unlocked);\n\n    /**\n     *  @notice Returns the count of non-zero deltas.\n     *  @return nonzeroDeltaCount The current value of `_nonzeroDeltaCount`\n     */\n    function getNonzeroDeltaCount() external view returns (uint256 nonzeroDeltaCount);\n\n    /**\n     * @notice Retrieves the token delta for a specific token.\n     * @dev This function allows reading the value from the `_tokenDeltas` mapping.\n     * @param token The token for which the delta is being fetched\n     * @return tokenDelta The delta of the specified token\n     */\n    function getTokenDelta(IERC20 token) external view returns (int256 tokenDelta);\n\n    /**\n     * @notice Retrieves the reserve (i.e., total Vault balance) of a given token.\n     * @param token The token for which to retrieve the reserve\n     * @return reserveAmount The amount of reserves for the given token\n     */\n    function getReservesOf(IERC20 token) external view returns (uint256 reserveAmount);\n\n    /**\n     * @notice This flag is used to detect and tax \"round-trip\" interactions (adding and removing liquidity in the\n     * same pool).\n     * @dev Taxing remove liquidity proportional whenever liquidity was added in the same `unlock` call adds an extra\n     * layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional\n     * is the only standard way to exit a position without fees, and this flag is used to enable fees in that case.\n     * It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse\n     * than a simple swap for every pool type.\n     *\n     * @param pool Address of the pool to check\n     * @return liquidityAdded True if liquidity has been added to this pool in the current transaction\n     \n     * Note that there is no `sessionId` argument; it always returns the value for the current (i.e., latest) session.\n     */\n    function getAddLiquidityCalledFlag(address pool) external view returns (bool liquidityAdded);\n\n    /*******************************************************************************\n                                    Pool Registration\n    *******************************************************************************/\n\n    /**\n     * @notice Registers a pool, associating it with its factory and the tokens it manages.\n     * @dev A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely\n     * by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an\n     * additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused\n     * pool will automatically unpause. Balancer timestamps are 32 bits.\n     *\n     * A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a\n     * multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to\n     * the Vault.\n     *\n     * If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the\n     * authorizer.\n     *\n     * @param pool The address of the pool being registered\n     * @param tokenConfig An array of descriptors for the tokens the pool will manage\n     * @param swapFeePercentage The initial static swap fee percentage of the pool\n     * @param pauseWindowEndTime The timestamp after which it is no longer possible to pause the pool\n     * @param protocolFeeExempt If true, the pool's initial aggregate fees will be set to 0\n     * @param roleAccounts Addresses the Vault will allow to change certain pool settings\n     * @param poolHooksContract Contract that implements the hooks for the pool\n     * @param liquidityManagement Liquidity management flags with implemented methods\n     */\n    function registerPool(\n        address pool,\n        TokenConfig[] memory tokenConfig,\n        uint256 swapFeePercentage,\n        uint32 pauseWindowEndTime,\n        bool protocolFeeExempt,\n        PoolRoleAccounts calldata roleAccounts,\n        address poolHooksContract,\n        LiquidityManagement calldata liquidityManagement\n    ) external;\n\n    /**\n     * @notice Checks whether a pool is registered.\n     * @param pool Address of the pool to check\n     * @return registered True if the pool is registered, false otherwise\n     */\n    function isPoolRegistered(address pool) external view returns (bool registered);\n\n    /**\n     * @notice Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\n     * @param pool Address of the pool to initialize\n     * @param to Address that will receive the output BPT\n     * @param tokens Tokens used to seed the pool (must match the registered tokens)\n     * @param exactAmountsIn Exact amounts of input tokens\n     * @param minBptAmountOut Minimum amount of output pool tokens\n     * @param userData Additional (optional) data required for adding initial liquidity\n     * @return bptAmountOut Output pool token amount\n     */\n    function initialize(\n        address pool,\n        address to,\n        IERC20[] memory tokens,\n        uint256[] memory exactAmountsIn,\n        uint256 minBptAmountOut,\n        bytes memory userData\n    ) external returns (uint256 bptAmountOut);\n\n    /*******************************************************************************\n                                    Pool Information\n    *******************************************************************************/\n\n    /**\n     * @notice Checks whether a pool is initialized.\n     * @dev An initialized pool can be considered registered as well.\n     * @param pool Address of the pool to check\n     * @return initialized True if the pool is initialized, false otherwise\n     */\n    function isPoolInitialized(address pool) external view returns (bool initialized);\n\n    /**\n     * @notice Gets the tokens registered to a pool.\n     * @param pool Address of the pool\n     * @return tokens List of tokens in the pool\n     */\n    function getPoolTokens(address pool) external view returns (IERC20[] memory tokens);\n\n    /**\n     * @notice Gets pool token rates.\n     * @dev This function performs external calls if tokens are yield-bearing. All returned arrays are in token\n     * registration order.\n     *\n     * @param pool Address of the pool\n     * @return decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n     * calculations. FP(1) for 18-decimal tokens\n     * @return tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\n     */\n    function getPoolTokenRates(\n        address pool\n    ) external view returns (uint256[] memory decimalScalingFactors, uint256[] memory tokenRates);\n\n    /**\n     * @notice Returns comprehensive pool data for the given pool.\n     * @dev This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\n     * @param pool The address of the pool\n     * @return poolData The `PoolData` result\n     */\n    function getPoolData(address pool) external view returns (PoolData memory poolData);\n\n    /**\n     * @notice Gets the raw data for a pool: tokens, raw balances, scaling factors.\n     * @param pool Address of the pool\n     * @return tokens The pool tokens, sorted in registration order\n     * @return tokenInfo Token info structs (type, rate provider, yield flag), sorted in token registration order\n     * @return balancesRaw Current native decimal balances of the pool tokens, sorted in token registration order\n     * @return lastBalancesLiveScaled18 Last saved live balances, sorted in token registration order\n     */\n    function getPoolTokenInfo(\n        address pool\n    )\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            TokenInfo[] memory tokenInfo,\n            uint256[] memory balancesRaw,\n            uint256[] memory lastBalancesLiveScaled18\n        );\n\n    /**\n     * @notice Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in\n     * registration order.\n     *\n     * @param pool Address of the pool\n     * @return balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates\n     */\n    function getCurrentLiveBalances(address pool) external view returns (uint256[] memory balancesLiveScaled18);\n\n    /**\n     * @notice Gets the configuration parameters of a pool.\n     * @dev The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\n     * @param pool Address of the pool\n     * @return poolConfig The pool configuration as a `PoolConfig` struct\n     */\n    function getPoolConfig(address pool) external view returns (PoolConfig memory poolConfig);\n\n    /**\n     * @notice Gets the hooks configuration parameters of a pool.\n     * @dev The `HooksConfig` contains flags indicating which pool hooks are implemented.\n     * @param pool Address of the pool\n     * @return hooksConfig The hooks configuration as a `HooksConfig` struct\n     */\n    function getHooksConfig(address pool) external view returns (HooksConfig memory hooksConfig);\n\n    /**\n     * @notice The current rate of a pool token (BPT) = invariant / totalSupply.\n     * @param pool Address of the pool\n     * @return rate BPT rate\n     */\n    function getBptRate(address pool) external view returns (uint256 rate);\n\n    /*******************************************************************************\n                                 Balancer Pool Tokens\n    *******************************************************************************/\n\n    /**\n     * @notice Gets the total supply of a given ERC20 token.\n     * @param token The token address\n     * @return tokenTotalSupply Total supply of the token\n     */\n    function totalSupply(address token) external view returns (uint256 tokenTotalSupply);\n\n    /**\n     * @notice Gets the balance of an account for a given ERC20 token.\n     * @param token Address of the token\n     * @param account Address of the account\n     * @return tokenBalance Token balance of the account\n     */\n    function balanceOf(address token, address account) external view returns (uint256 tokenBalance);\n\n    /**\n     * @notice Gets the allowance of a spender for a given ERC20 token and owner.\n     * @param token Address of the token\n     * @param owner Address of the owner\n     * @param spender Address of the spender\n     * @return tokenAllowance Amount of tokens the spender is allowed to spend\n     */\n    function allowance(address token, address owner, address spender) external view returns (uint256 tokenAllowance);\n\n    /**\n     * @notice Approves a spender to spend pool tokens on behalf of sender.\n     * @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n     * the pool contract, so msg.sender is used as the token address.\n     *\n     * @param owner Address of the owner\n     * @param spender Address of the spender\n     * @param amount Amount of tokens to approve\n     * @return success True if successful, false otherwise\n     */\n    function approve(address owner, address spender, uint256 amount) external returns (bool success);\n\n    /*******************************************************************************\n                                     Pool Pausing\n    *******************************************************************************/\n\n    /**\n     * @notice Indicates whether a pool is paused.\n     * @dev If a pool is paused, all non-Recovery Mode state-changing operations will revert.\n     * @param pool The pool to be checked\n     * @return poolPaused True if the pool is paused\n     */\n    function isPoolPaused(address pool) external view returns (bool poolPaused);\n\n    /**\n     * @notice Returns the paused status, and end times of the Pool's pause window and buffer period.\n     * @dev Note that even when set to a paused state, the pool will automatically unpause at the end of\n     * the buffer period. Balancer timestamps are 32 bits.\n     *\n     * @param pool The pool whose data is requested\n     * @return poolPaused True if the Pool is paused\n     * @return poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\n     * @return poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\n     * @return pauseManager The pause manager, or the zero address\n     */\n    function getPoolPausedState(\n        address pool\n    )\n        external\n        view\n        returns (bool poolPaused, uint32 poolPauseWindowEndTime, uint32 poolBufferPeriodEndTime, address pauseManager);\n\n    /*******************************************************************************\n                                   ERC4626 Buffers\n    *******************************************************************************/\n\n    /**\n     * @notice Checks if the wrapped token has an initialized buffer in the Vault.\n     * @dev An initialized buffer should have an asset registered in the Vault.\n     * @param wrappedToken Address of the wrapped token that implements IERC4626\n     * @return isBufferInitialized True if the ERC4626 buffer is initialized\n     */\n    function isERC4626BufferInitialized(IERC4626 wrappedToken) external view returns (bool isBufferInitialized);\n\n    /**\n     * @notice Gets the registered asset for a given buffer.\n     * @dev To avoid malicious wrappers (e.g., that might potentially change their asset after deployment), routers\n     * should never call `wrapper.asset()` directly, at least without checking it against the asset registered with\n     * the Vault on initialization.\n     *\n     * @param wrappedToken The wrapped token specifying the buffer\n     * @return asset The underlying asset of the wrapped token\n     */\n    function getERC4626BufferAsset(IERC4626 wrappedToken) external view returns (address asset);\n\n    /*******************************************************************************\n                                          Fees\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\n     * @param pool The address of the pool for which aggregate fees have been collected\n     * @param token The address of the token in which fees have been accumulated\n     * @return swapFeeAmount The total amount of fees accumulated in the specified token\n     */\n    function getAggregateSwapFeeAmount(address pool, IERC20 token) external view returns (uint256 swapFeeAmount);\n\n    /**\n     * @notice Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\n     * @param pool The address of the pool for which aggregate fees have been collected\n     * @param token The address of the token in which fees have been accumulated\n     * @return yieldFeeAmount The total amount of fees accumulated in the specified token\n     */\n    function getAggregateYieldFeeAmount(address pool, IERC20 token) external view returns (uint256 yieldFeeAmount);\n\n    /**\n     * @notice Fetches the static swap fee percentage for a given pool.\n     * @param pool The address of the pool whose static swap fee percentage is being queried\n     * @return swapFeePercentage The current static swap fee percentage for the specified pool\n     */\n    function getStaticSwapFeePercentage(address pool) external view returns (uint256 swapFeePercentage);\n\n    /**\n     * @notice Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\n     * @param pool The address of the pool whose roles are being queried\n     * @return roleAccounts A struct containing the role accounts for the pool (or 0 if unassigned)\n     */\n    function getPoolRoleAccounts(address pool) external view returns (PoolRoleAccounts memory roleAccounts);\n\n    /**\n     * @notice Query the current dynamic swap fee percentage of a pool, given a set of swap parameters.\n     * @dev Reverts if the hook doesn't return the success flag set to `true`.\n     * @param pool The pool\n     * @param swapParams The swap parameters used to compute the fee\n     * @return dynamicSwapFeePercentage The dynamic swap fee percentage\n     */\n    function computeDynamicSwapFeePercentage(\n        address pool,\n        PoolSwapParams memory swapParams\n    ) external view returns (uint256 dynamicSwapFeePercentage);\n\n    /**\n     * @notice Returns the Protocol Fee Controller address.\n     * @return protocolFeeController Address of the ProtocolFeeController\n     */\n    function getProtocolFeeController() external view returns (IProtocolFeeController protocolFeeController);\n\n    /*******************************************************************************\n                                     Recovery Mode\n    *******************************************************************************/\n\n    /**\n     * @notice Checks whether a pool is in Recovery Mode.\n     * @dev Recovery Mode enables a safe proportional withdrawal path, with no external calls.\n     * @param pool Address of the pool to check\n     * @return inRecoveryMode True if the pool is in Recovery Mode, false otherwise\n     */\n    function isPoolInRecoveryMode(address pool) external view returns (bool inRecoveryMode);\n\n    /**\n     * @notice Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out.\n     * The request is implemented by the Vault without any interaction with the pool, ensuring that\n     * it works the same for all pools, and cannot be disabled by a new pool type.\n     *\n     * @param pool Address of the pool\n     * @param from Address of user to burn pool tokens from\n     * @param exactBptAmountIn Input pool token amount\n     * @param minAmountsOut Minimum amounts of tokens to be received, sorted in token registration order\n     * @return amountsOut Actual calculated amounts of output tokens, sorted in token registration order\n     */\n    function removeLiquidityRecovery(\n        address pool,\n        address from,\n        uint256 exactBptAmountIn,\n        uint256[] memory minAmountsOut\n    ) external returns (uint256[] memory amountsOut);\n\n    /*******************************************************************************\n                                    Queries\n    *******************************************************************************/\n\n    /**\n     * @notice Performs a callback on msg.sender with arguments provided in `data`.\n     * @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\n     * anything else will revert.\n     *\n     * Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier.\n     *\n     * Allows the external calling of a function via the Vault contract to\n     * access Vault's functions guarded by `onlyWhenUnlocked`.\n     * `transient` modifier ensuring balances changes within the Vault are settled.\n     *\n     * @param data Contains function signature and args to be passed to the msg.sender\n     * @return result Resulting data from the call\n     */\n    function quote(bytes calldata data) external returns (bytes memory result);\n\n    /**\n     * @notice Performs a callback on msg.sender with arguments provided in `data`.\n     * @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\n     * anything else will revert.\n     *\n     * Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier.\n     *\n     * Allows the external calling of a function via the Vault contract to\n     * access Vault's functions guarded by `onlyWhenUnlocked`.\n     * `transient` modifier ensuring balances changes within the Vault are settled.\n     *\n     * This call always reverts, returning the result in the revert reason.\n     *\n     * @param data Contains function signature and args to be passed to the msg.sender\n     */\n    function quoteAndRevert(bytes calldata data) external;\n\n    /**\n     * @notice Returns true if queries are disabled on the Vault.\n     * @dev If true, queries might either be disabled temporarily or permanently.\n     * @return queryDisabled True if query functionality is reversibly disabled\n     */\n    function isQueryDisabled() external view returns (bool queryDisabled);\n\n    /**\n     * @notice Returns true if queries are disabled permanently; false if they are enabled.\n     * @dev This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\n     * @return queryDisabledPermanently True if query functionality is permanently disabled\n     */\n    function isQueryDisabledPermanently() external view returns (bool queryDisabledPermanently);\n\n    /**\n     * @notice Pools can use this event to emit event data from the Vault.\n     * @param eventKey Event key\n     * @param eventData Encoded event data\n     */\n    function emitAuxiliaryEvent(bytes32 eventKey, bytes calldata eventData) external;\n\n    /*******************************************************************************\n                                Authentication\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the Authorizer address.\n     * @dev The authorizer holds the permissions granted by governance. It is set on Vault deployment,\n     * and can be changed through a permissioned call.\n     *\n     * @return authorizer Address of the authorizer contract\n     */\n    function getAuthorizer() external view returns (IAuthorizer authorizer);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./VaultTypes.sol\";\n\n/**\n * @notice Interface for functions defined on the main Vault contract.\n * @dev These are generally \"critical path\" functions (swap, add/remove liquidity) that are in the main contract\n * for technical or performance reasons.\n */\ninterface IVaultMain {\n    /*******************************************************************************\n                              Transient Accounting\n    *******************************************************************************/\n\n    /**\n     * @notice Creates a context for a sequence of operations (i.e., \"unlocks\" the Vault).\n     * @dev Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`,\n     * meaning all balances for the caller have to be settled at the end.\n     *\n     * @param data Contains function signature and args to be passed to the msg.sender\n     * @return result Resulting data from the call\n     */\n    function unlock(bytes calldata data) external returns (bytes memory result);\n\n    /**\n     * @notice Settles deltas for a token; must be successful for the current lock to be released.\n     * @dev Protects the caller against leftover dust in the Vault for the token being settled. The caller\n     * should know in advance how many tokens were paid to the Vault, so it can provide it as a hint to discard any\n     * excess in the Vault balance.\n     *\n     * If the given hint is equal to or higher than the difference in reserves, the difference in reserves is given as\n     * credit to the caller. If it's higher, the caller sent fewer tokens than expected, so settlement would fail.\n     *\n     * If the given hint is lower than the difference in reserves, the hint is given as credit to the caller.\n     * In this case, the excess would be absorbed by the Vault (and reflected correctly in the reserves), but would\n     * not affect settlement.\n     *\n     * The credit supplied by the Vault can be calculated as `min(reserveDifference, amountHint)`, where the reserve\n     * difference equals current balance of the token minus existing reserves of the token when the function is called.\n     *\n     * @param token Address of the token\n     * @param amountHint Amount paid as reported by the caller\n     * @return credit Credit received in return of the payment\n     */\n    function settle(IERC20 token, uint256 amountHint) external returns (uint256 credit);\n\n    /**\n     * @notice Sends tokens to a recipient.\n     * @dev There is no inverse operation for this function. Transfer funds to the Vault and call `settle` to cancel\n     * debts.\n     *\n     * @param token Address of the token\n     * @param to Recipient address\n     * @param amount Amount of tokens to send\n     */\n    function sendTo(IERC20 token, address to, uint256 amount) external;\n\n    /***************************************************************************\n                                       Swaps\n    ***************************************************************************/\n\n    /**\n     * @notice Swaps tokens based on provided parameters.\n     * @dev All parameters are given in raw token decimal encoding.\n     * @param vaultSwapParams Parameters for the swap (see above for struct definition)\n     * @return amountCalculatedRaw Calculated swap amount\n     * @return amountInRaw Amount of input tokens for the swap\n     * @return amountOutRaw Amount of output tokens from the swap\n     */\n    function swap(\n        VaultSwapParams memory vaultSwapParams\n    ) external returns (uint256 amountCalculatedRaw, uint256 amountInRaw, uint256 amountOutRaw);\n\n    /***************************************************************************\n                                   Add Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Adds liquidity to a pool.\n     * @dev Caution should be exercised when adding liquidity because the Vault has the capability\n     * to transfer tokens from any user, given that it holds all allowances.\n     *\n     * @param params Parameters for the add liquidity (see above for struct definition)\n     * @return amountsIn Actual amounts of input tokens\n     * @return bptAmountOut Output pool token amount\n     * @return returnData Arbitrary (optional) data with an encoded response from the pool\n     */\n    function addLiquidity(\n        AddLiquidityParams memory params\n    ) external returns (uint256[] memory amountsIn, uint256 bptAmountOut, bytes memory returnData);\n\n    /***************************************************************************\n                                 Remove Liquidity\n    ***************************************************************************/\n\n    /**\n     * @notice Removes liquidity from a pool.\n     * @dev Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user.\n     * Untrusted routers require prior approval from the user. This is the only function allowed to call\n     * _queryModeBalanceIncrease (and only in a query context).\n     *\n     * @param params Parameters for the remove liquidity (see above for struct definition)\n     * @return bptAmountIn Actual amount of BPT burned\n     * @return amountsOut Actual amounts of output tokens\n     * @return returnData Arbitrary (optional) data with an encoded response from the pool\n     */\n    function removeLiquidity(\n        RemoveLiquidityParams memory params\n    ) external returns (uint256 bptAmountIn, uint256[] memory amountsOut, bytes memory returnData);\n\n    /*******************************************************************************\n                                    Pool Information\n    *******************************************************************************/\n\n    /**\n     * @notice Gets the index of a token in a given pool.\n     * @dev Reverts if the pool is not registered, or if the token does not belong to the pool.\n     * @param pool Address of the pool\n     * @param token Address of the token\n     * @return tokenCount Number of tokens in the pool\n     * @return index Index corresponding to the given token in the pool's token list\n     */\n    function getPoolTokenCountAndIndexOfToken(\n        address pool,\n        IERC20 token\n    ) external view returns (uint256 tokenCount, uint256 index);\n\n    /*******************************************************************************\n                                 Balancer Pool Tokens\n    *******************************************************************************/\n\n    /**\n     * @notice Transfers pool token from owner to a recipient.\n     * @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n     * the pool contract, so msg.sender is used as the token address.\n     *\n     * @param owner Address of the owner\n     * @param to Address of the recipient\n     * @param amount Amount of tokens to transfer\n     * @return success True if successful, false otherwise\n     */\n    function transfer(address owner, address to, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Transfers pool token from a sender to a recipient using an allowance.\n     * @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n     * the pool contract, so msg.sender is used as the token address.\n     *\n     * @param spender Address allowed to perform the transfer\n     * @param from Address of the sender\n     * @param to Address of the recipient\n     * @param amount Amount of tokens to transfer\n     * @return success True if successful, false otherwise\n     */\n    function transferFrom(address spender, address from, address to, uint256 amount) external returns (bool success);\n\n    /*******************************************************************************\n                                  ERC4626 Buffers\n    *******************************************************************************/\n\n    /**\n     * @notice Wraps/unwraps tokens based on the parameters provided.\n     * @dev All parameters are given in raw token decimal encoding. It requires the buffer to be initialized,\n     * and uses the internal wrapped token buffer when it has enough liquidity to avoid external calls.\n     *\n     * @param params Parameters for the wrap/unwrap operation (see struct definition)\n     * @return amountCalculatedRaw Calculated swap amount\n     * @return amountInRaw Amount of input tokens for the swap\n     * @return amountOutRaw Amount of output tokens from the swap\n     */\n    function erc4626BufferWrapOrUnwrap(\n        BufferWrapOrUnwrapParams memory params\n    ) external returns (uint256 amountCalculatedRaw, uint256 amountInRaw, uint256 amountOutRaw);\n\n    /*******************************************************************************\n                                     Miscellaneous\n    *******************************************************************************/\n\n    /**\n     * @notice Returns the VaultExtension contract address.\n     * @dev Function is in the main Vault contract. The VaultExtension handles less critical or frequently used\n     * functions, since delegate calls through the Vault are more expensive than direct calls.\n     *\n     * @return vaultExtension Address of the VaultExtension\n     */\n    function getVaultExtension() external view returns (address vaultExtension);\n}\n"},"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\n\nimport { IRateProvider } from \"../solidity-utils/helpers/IRateProvider.sol\";\n\n/**\n * @notice Represents a pool's liquidity management configuration.\n * @param disableUnbalancedLiquidity If set, liquidity can only be added or removed proportionally\n * @param enableAddLiquidityCustom If set, the pool has implemented `onAddLiquidityCustom`\n * @param enableRemoveLiquidityCustom If set, the pool has implemented `onRemoveLiquidityCustom`\n * @param enableDonation If set, the pool will not revert if liquidity is added with AddLiquidityKind.DONATION\n */\nstruct LiquidityManagement {\n    bool disableUnbalancedLiquidity;\n    bool enableAddLiquidityCustom;\n    bool enableRemoveLiquidityCustom;\n    bool enableDonation;\n}\n\n// @notice Custom type to store the entire configuration of the pool.\ntype PoolConfigBits is bytes32;\n\n/**\n * @notice Represents a pool's configuration (hooks configuration are separated in another struct).\n * @param liquidityManagement Flags related to adding/removing liquidity\n * @param staticSwapFeePercentage The pool's native swap fee\n * @param aggregateSwapFeePercentage The total swap fee charged, including protocol and pool creator components\n * @param aggregateYieldFeePercentage The total swap fee charged, including protocol and pool creator components\n * @param tokenDecimalDiffs Compressed storage of the token decimals of each pool token\n * @param pauseWindowEndTime Timestamp after which the pool cannot be paused\n * @param isPoolRegistered If true, the pool has been registered with the Vault\n * @param isPoolInitialized If true, the pool has been initialized with liquidity, and is available for trading\n * @param isPoolPaused If true, the pool has been paused (by governance or the pauseManager)\n * @param isPoolInRecoveryMode If true, the pool has been placed in recovery mode, enabling recovery mode withdrawals\n */\nstruct PoolConfig {\n    LiquidityManagement liquidityManagement;\n    uint256 staticSwapFeePercentage;\n    uint256 aggregateSwapFeePercentage;\n    uint256 aggregateYieldFeePercentage;\n    uint40 tokenDecimalDiffs;\n    uint32 pauseWindowEndTime;\n    bool isPoolRegistered;\n    bool isPoolInitialized;\n    bool isPoolPaused;\n    bool isPoolInRecoveryMode;\n}\n\n/**\n * @notice The flag portion of the `HooksConfig`.\n * @dev `enableHookAdjustedAmounts` must be true for all contracts that modify the `amountCalculated`\n * in after hooks. Otherwise, the Vault will ignore any \"hookAdjusted\" amounts. Setting any \"shouldCall\"\n * flags to true will cause the Vault to call the corresponding hook during operations.\n */\nstruct HookFlags {\n    bool enableHookAdjustedAmounts;\n    bool shouldCallBeforeInitialize;\n    bool shouldCallAfterInitialize;\n    bool shouldCallComputeDynamicSwapFee;\n    bool shouldCallBeforeSwap;\n    bool shouldCallAfterSwap;\n    bool shouldCallBeforeAddLiquidity;\n    bool shouldCallAfterAddLiquidity;\n    bool shouldCallBeforeRemoveLiquidity;\n    bool shouldCallAfterRemoveLiquidity;\n}\n\n/// @notice Represents a hook contract configuration for a pool (HookFlags + hooksContract address).\nstruct HooksConfig {\n    bool enableHookAdjustedAmounts;\n    bool shouldCallBeforeInitialize;\n    bool shouldCallAfterInitialize;\n    bool shouldCallComputeDynamicSwapFee;\n    bool shouldCallBeforeSwap;\n    bool shouldCallAfterSwap;\n    bool shouldCallBeforeAddLiquidity;\n    bool shouldCallAfterAddLiquidity;\n    bool shouldCallBeforeRemoveLiquidity;\n    bool shouldCallAfterRemoveLiquidity;\n    address hooksContract;\n}\n\n/**\n * @notice Represents temporary state used during a swap operation.\n * @param indexIn The zero-based index of tokenIn\n * @param indexOut The zero-based index of tokenOut\n * @param amountGivenScaled18 The amountGiven (i.e., tokenIn for ExactIn), adjusted for token decimals\n * @param swapFeePercentage The swap fee to be applied (might be static or dynamic)\n */\nstruct SwapState {\n    uint256 indexIn;\n    uint256 indexOut;\n    uint256 amountGivenScaled18;\n    uint256 swapFeePercentage;\n}\n\n/**\n * @notice Represents the Vault's configuration.\n * @param isQueryDisabled If set to true, disables query functionality of the Vault. Can be modified by governance\n * @param isVaultPaused If set to true, swaps and add/remove liquidity operations are halted\n * @param areBuffersPaused If set to true, the Vault wrap/unwrap primitives associated with buffers will be disabled\n */\nstruct VaultState {\n    bool isQueryDisabled;\n    bool isVaultPaused;\n    bool areBuffersPaused;\n}\n\n/**\n * @notice Represents the accounts holding certain roles for a given pool. This is passed in on pool registration.\n * @param pauseManager Account empowered to pause/unpause the pool (note that governance can always pause a pool)\n * @param swapFeeManager Account empowered to set static swap fees for a pool (or 0 to delegate to governance)\n * @param poolCreator Account empowered to set the pool creator fee (or 0 if all fees go to the protocol and LPs)\n */\nstruct PoolRoleAccounts {\n    address pauseManager;\n    address swapFeeManager;\n    address poolCreator;\n}\n\n/*******************************************************************************\n                                   Tokens\n*******************************************************************************/\n\n// Note that the following tokens are unsupported by the Vault. This list is not meant to be exhaustive, but covers\n// many common types of tokens that will not work with the Vault architecture. (See https://github.com/d-xo/weird-erc20\n// for examples of token features that are problematic for many protocols.)\n//\n// * Rebasing tokens (e.g., aDAI). The Vault keeps track of token balances in its internal accounting; any token whose\n//   balance changes asynchronously (i.e., outside a swap or liquidity operation), would get out-of-sync with this\n//   internal accounting. This category would also include \"airdrop\" tokens, whose balances can change unexpectedly.\n//\n// * Double entrypoint (e.g., old Synthetix tokens, now fixed). These could likewise bypass internal accounting by\n//   registering the token under one address, then accessing it through another. This is especially troublesome\n//   in v3, with the introduction of ERC4626 buffers.\n//\n// * Fee on transfer (e.g., PAXG). The Vault issues credits and debits according to given and calculated token amounts,\n//   and settlement assumes that the send/receive transfer functions transfer exactly the given number of tokens.\n//   If this is not the case, transactions will not settle. Unlike with the other types, which are fundamentally\n//   incompatible, it would be possible to design a Router to handle this - but we didn't try it. In any case, it's\n//   not supported in the current Routers.\n//\n// * Tokens with more than 18 decimals (e.g., YAM-V2). The Vault handles token scaling: i.e., handling I/O for\n//   amounts in native token decimals, but doing calculations with full 18-decimal precision. This requires reading\n//   and storing the decimals for each token. Since virtually all tokens are 18 or fewer decimals, and we have limited\n//   storage space, 18 was a reasonable maximum. Unlike the other types, this is enforceable by the Vault. Attempting\n//   to register such tokens will revert with `InvalidTokenDecimals`. Of course, we must also be able to read the token\n//   decimals, so the Vault only supports tokens that implement `IERC20Metadata.decimals`, and return a value less than\n//   or equal to 18.\n//\n//  * Token decimals are checked and stored only once, on registration. Valid tokens store their decimals as immutable\n//    variables or constants. Malicious tokens that don't respect this basic property would not work anywhere in DeFi.\n//\n// These types of tokens are supported but discouraged, as they don't tend to play well with AMMs generally.\n//\n// * Very low-decimal tokens (e.g., GUSD). The Vault has been extensively tested with 6-decimal tokens (e.g., USDC),\n//   but going much below that may lead to unanticipated effects due to precision loss, especially with smaller trade\n//   values.\n//\n// * Revert on zero value approval/transfer. The Vault has been tested against these, but peripheral contracts, such\n//   as hooks, might not have been designed with this in mind.\n//\n// * Other types from \"weird-erc20,\" such as upgradeable, pausable, or tokens with blocklists. We have seen cases\n//   where a token upgrade fails, \"bricking\" the token - and many operations on pools containing that token. Any\n//   sort of \"permissioned\" token that can make transfers fail can cause operations on pools containing them to\n//   revert. Even Recovery Mode cannot help then, as it does a proportional withdrawal of all tokens. If one of\n//   them is bricked, the whole operation will revert. Since v3 does not have \"internal balances\" like v2, there\n//   is no recourse.\n//\n//   Of course, many tokens in common use have some of these \"features\" (especially centralized stable coins), so\n//   we have to support them anyway. Working with common centralized tokens is a risk common to all of DeFi.\n\n/**\n * @notice Token types supported by the Vault.\n * @dev In general, pools may contain any combination of these tokens.\n *\n * STANDARD tokens (e.g., BAL, WETH) have no rate provider.\n * WITH_RATE tokens (e.g., wstETH) require a rate provider. These may be tokens like wstETH, which need to be wrapped\n * because the underlying stETH token is rebasing, and such tokens are unsupported by the Vault. They may also be\n * tokens like sEUR, which track an underlying asset, but are not yield-bearing. Finally, this encompasses\n * yield-bearing ERC4626 tokens, which can be used to facilitate swaps without requiring wrapping or unwrapping\n * in most cases. The `paysYieldFees` flag can be used to indicate whether a token is yield-bearing (e.g., waDAI),\n * not yield-bearing (e.g., sEUR), or yield-bearing but exempt from fees (e.g., in certain nested pools, where\n * yield fees are charged elsewhere).\n *\n * NB: STANDARD must always be the first enum element, so that newly initialized data structures default to Standard.\n */\nenum TokenType {\n    STANDARD,\n    WITH_RATE\n}\n\n/**\n * @notice Encapsulate the data required for the Vault to support a token of the given type.\n * @dev For STANDARD tokens, the rate provider address must be 0, and paysYieldFees must be false. All WITH_RATE tokens\n * need a rate provider, and may or may not be yield-bearing.\n *\n * At registration time, it is useful to include the token address along with the token parameters in the structure\n * passed to `registerPool`, as the alternative would be parallel arrays, which would be error prone and require\n * validation checks. `TokenConfig` is only used for registration, and is never put into storage (see `TokenInfo`).\n *\n * @param token The token address\n * @param tokenType The token type (see the enum for supported types)\n * @param rateProvider The rate provider for a token (see further documentation above)\n * @param paysYieldFees Flag indicating whether yield fees should be charged on this token\n */\nstruct TokenConfig {\n    IERC20 token;\n    TokenType tokenType;\n    IRateProvider rateProvider;\n    bool paysYieldFees;\n}\n\n/**\n * @notice This data structure is stored in `_poolTokenInfo`, a nested mapping from pool -> (token -> TokenInfo).\n * @dev Since the token is already the key of the nested mapping, it would be redundant (and an extra SLOAD) to store\n * it again in the struct. When we construct PoolData, the tokens are separated into their own array.\n *\n * @param tokenType The token type (see the enum for supported types)\n * @param rateProvider The rate provider for a token (see further documentation above)\n * @param paysYieldFees Flag indicating whether yield fees should be charged on this token\n */\nstruct TokenInfo {\n    TokenType tokenType;\n    IRateProvider rateProvider;\n    bool paysYieldFees;\n}\n\n/**\n * @notice Data structure used to represent the current pool state in memory\n * @param poolConfigBits Custom type to store the entire configuration of the pool.\n * @param tokens Pool tokens, sorted in token registration order\n * @param tokenInfo Configuration data for each token, sorted in token registration order\n * @param balancesRaw Token balances in native decimals\n * @param balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates\n * @param tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\n * @param decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n * calculations. It is 1e18 (FP 1) for 18-decimal tokens\n */\nstruct PoolData {\n    PoolConfigBits poolConfigBits;\n    IERC20[] tokens;\n    TokenInfo[] tokenInfo;\n    uint256[] balancesRaw;\n    uint256[] balancesLiveScaled18;\n    uint256[] tokenRates;\n    uint256[] decimalScalingFactors;\n}\n\nenum Rounding {\n    ROUND_UP,\n    ROUND_DOWN\n}\n\n/*******************************************************************************\n                                    Swaps\n*******************************************************************************/\n\nenum SwapKind {\n    EXACT_IN,\n    EXACT_OUT\n}\n\n// There are two \"SwapParams\" structs defined below. `VaultSwapParams` corresponds to the external swap API defined\n// in the Router contracts, which uses explicit token addresses, the amount given and limit on the calculated amount\n// expressed in native token decimals, and optional user data passed in from the caller.\n//\n// `PoolSwapParams` passes some of this information through (kind, userData), but \"translates\" the parameters to fit\n// the internal swap API used by `IBasePool`. It scales amounts to full 18-decimal precision, adds the token balances,\n// converts the raw token addresses to indices, and adds the address of the Router originating the request. It does\n// not need the limit, since this is checked at the Router level.\n\n/**\n * @notice Data passed into primary Vault `swap` operations.\n * @param kind Type of swap (Exact In or Exact Out)\n * @param pool The pool with the tokens being swapped\n * @param tokenIn The token entering the Vault (balance increases)\n * @param tokenOut The token leaving the Vault (balance decreases)\n * @param amountGivenRaw Amount specified for tokenIn or tokenOut (depending on the type of swap)\n * @param limitRaw Minimum or maximum value of the calculated amount (depending on the type of swap)\n * @param userData Additional (optional) user data\n */\nstruct VaultSwapParams {\n    SwapKind kind;\n    address pool;\n    IERC20 tokenIn;\n    IERC20 tokenOut;\n    uint256 amountGivenRaw;\n    uint256 limitRaw;\n    bytes userData;\n}\n\n/**\n * @notice Data for a swap operation, used by contracts implementing `IBasePool`.\n * @param kind Type of swap (exact in or exact out)\n * @param amountGivenScaled18 Amount given based on kind of the swap (e.g., tokenIn for EXACT_IN)\n * @param balancesScaled18 Current pool balances\n * @param indexIn Index of tokenIn\n * @param indexOut Index of tokenOut\n * @param router The address (usually a router contract) that initiated a swap operation on the Vault\n * @param userData Additional (optional) data required for the swap\n */\nstruct PoolSwapParams {\n    SwapKind kind;\n    uint256 amountGivenScaled18;\n    uint256[] balancesScaled18;\n    uint256 indexIn;\n    uint256 indexOut;\n    address router;\n    bytes userData;\n}\n\n/**\n * @notice Data for the hook after a swap operation.\n * @param kind Type of swap (exact in or exact out)\n * @param tokenIn Token to be swapped from\n * @param tokenOut Token to be swapped to\n * @param amountInScaled18 Amount of tokenIn (entering the Vault)\n * @param amountOutScaled18 Amount of tokenOut (leaving the Vault)\n * @param tokenInBalanceScaled18 Updated (after swap) balance of tokenIn\n * @param tokenOutBalanceScaled18 Updated (after swap) balance of tokenOut\n * @param amountCalculatedScaled18 Token amount calculated by the swap\n * @param amountCalculatedRaw Token amount calculated by the swap\n * @param router The address (usually a router contract) that initiated a swap operation on the Vault\n * @param pool Pool address\n * @param userData Additional (optional) data required for the swap\n */\nstruct AfterSwapParams {\n    SwapKind kind;\n    IERC20 tokenIn;\n    IERC20 tokenOut;\n    uint256 amountInScaled18;\n    uint256 amountOutScaled18;\n    uint256 tokenInBalanceScaled18;\n    uint256 tokenOutBalanceScaled18;\n    uint256 amountCalculatedScaled18;\n    uint256 amountCalculatedRaw;\n    address router;\n    address pool;\n    bytes userData;\n}\n\n/*******************************************************************************\n                                Add liquidity\n*******************************************************************************/\n\nenum AddLiquidityKind {\n    PROPORTIONAL,\n    UNBALANCED,\n    SINGLE_TOKEN_EXACT_OUT,\n    DONATION,\n    CUSTOM\n}\n\n/**\n * @notice Data for an add liquidity operation.\n * @param pool Address of the pool\n * @param to Address of user to mint to\n * @param maxAmountsIn Maximum amounts of input tokens\n * @param minBptAmountOut Minimum amount of output pool tokens\n * @param kind Add liquidity kind\n * @param userData Optional user data\n */\nstruct AddLiquidityParams {\n    address pool;\n    address to;\n    uint256[] maxAmountsIn;\n    uint256 minBptAmountOut;\n    AddLiquidityKind kind;\n    bytes userData;\n}\n\n/*******************************************************************************\n                                Remove liquidity\n*******************************************************************************/\n\nenum RemoveLiquidityKind {\n    PROPORTIONAL,\n    SINGLE_TOKEN_EXACT_IN,\n    SINGLE_TOKEN_EXACT_OUT,\n    CUSTOM\n}\n\n/**\n * @notice Data for an remove liquidity operation.\n * @param pool Address of the pool\n * @param from Address of user to burn from\n * @param maxBptAmountIn Maximum amount of input pool tokens\n * @param minAmountsOut Minimum amounts of output tokens\n * @param kind Remove liquidity kind\n * @param userData Optional user data\n */\nstruct RemoveLiquidityParams {\n    address pool;\n    address from;\n    uint256 maxBptAmountIn;\n    uint256[] minAmountsOut;\n    RemoveLiquidityKind kind;\n    bytes userData;\n}\n\n/*******************************************************************************\n                                Remove liquidity\n*******************************************************************************/\n\nenum WrappingDirection {\n    WRAP,\n    UNWRAP\n}\n\n/**\n * @notice Data for a wrap/unwrap operation.\n * @param kind Type of swap (Exact In or Exact Out)\n * @param direction Direction of the wrapping operation (Wrap or Unwrap)\n * @param wrappedToken Wrapped token, compatible with interface ERC4626\n * @param amountGivenRaw Amount specified for tokenIn or tokenOut (depends on the type of swap and wrapping direction)\n * @param limitRaw Minimum or maximum amount specified for the other token (depends on the type of swap and wrapping\n * direction)\n */\nstruct BufferWrapOrUnwrapParams {\n    SwapKind kind;\n    WrappingDirection direction;\n    IERC4626 wrappedToken;\n    uint256 amountGivenRaw;\n    uint256 limitRaw;\n}\n\n// Protocol Fees are 24-bit values. We transform them by multiplying by 1e11, so that they can be set to any value\n// between 0% and 100% (step 0.00001%). Protocol and pool creator fees are set in the `ProtocolFeeController`, and\n// ensure both constituent and aggregate fees do not exceed this precision.\nuint256 constant FEE_BITLENGTH = 24;\nuint256 constant FEE_SCALING_FACTOR = 1e11;\n// Used to ensure the safety of fee-related math (e.g., pools or hooks don't set it greater than 100%).\n// This value should work for practical purposes and is well within the max precision requirements.\nuint256 constant MAX_FEE_PERCENTAGE = 99.9999e16; // 99.9999%\n"},"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IAuthentication } from \"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\";\n\n/**\n * @notice Building block for performing access control on external functions.\n * @dev This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be\n * applied to external functions to make them only callable by authorized accounts.\n *\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\n */\nabstract contract Authentication is IAuthentication {\n    bytes32 private immutable _actionIdDisambiguator;\n\n    /**\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\n     * multi-contract systems.\n     *\n     * There are two main uses for it:\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\n     *    unique. The contract's own address is a good option.\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\n     *    shared by the entire family (and no other contract) should be used instead.\n     */\n    constructor(bytes32 actionIdDisambiguator) {\n        _actionIdDisambiguator = actionIdDisambiguator;\n    }\n\n    /// @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\n    modifier authenticate() {\n        _authenticateCaller();\n        _;\n    }\n\n    /// @dev Reverts unless the caller is allowed to call the entry point function.\n    function _authenticateCaller() internal view {\n        bytes32 actionId = getActionId(msg.sig);\n\n        if (!_canPerform(actionId, msg.sender)) {\n            revert SenderNotAllowed();\n        }\n    }\n\n    /// @inheritdoc IAuthentication\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\n        // multiple contracts.\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\n    }\n\n    /**\n     * @dev Derived contracts must implement this function to perform the actual access control logic.\n     * @param actionId The action identifier associated with an external function\n     * @param user The account performing the action\n     * @return success True if the action is permitted\n     */\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\n}\n"},"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { LogExpMath } from \"./LogExpMath.sol\";\n\n/// @notice Support 18-decimal fixed point arithmetic. All Vault calculations use this for high and uniform precision.\nlibrary FixedPoint {\n    /// @notice Attempted division by zero.\n    error ZeroDivision();\n\n    // solhint-disable no-inline-assembly\n    // solhint-disable private-vars-leading-underscore\n\n    uint256 internal constant ONE = 1e18; // 18 decimal places\n    uint256 internal constant TWO = 2 * ONE;\n    uint256 internal constant FOUR = 4 * ONE;\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\n\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Multiplication overflow protection is provided by Solidity 0.8.x.\n        uint256 product = a * b;\n\n        return product / ONE;\n    }\n\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\n        // Multiplication overflow protection is provided by Solidity 0.8.x.\n        uint256 product = a * b;\n\n        // Equivalent to:\n        // result = product == 0 ? 0 : ((product - 1) / FixedPoint.ONE) + 1\n        assembly (\"memory-safe\") {\n            result := mul(iszero(iszero(product)), add(div(sub(product, 1), ONE), 1))\n        }\n    }\n\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity 0.8 reverts with a Panic code (0x11) if the multiplication overflows.\n        uint256 aInflated = a * ONE;\n\n        // Solidity 0.8 reverts with a \"Division by Zero\" Panic code (0x12) if b is zero\n        return aInflated / b;\n    }\n\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\n        return mulDivUp(a, ONE, b);\n    }\n\n    /// @dev Return (a * b) / c, rounding up.\n    function mulDivUp(uint256 a, uint256 b, uint256 c) internal pure returns (uint256 result) {\n        // This check is required because Yul's `div` doesn't revert on c==0.\n        if (c == 0) {\n            revert ZeroDivision();\n        }\n\n        // Multiple overflow protection is done by Solidity 0.8.x.\n        uint256 product = a * b;\n\n        // The traditional divUp formula is:\n        // divUp(x, y) := (x + y - 1) / y\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\n        // divUp(x, y) := (x - 1) / y + 1\n        // Note that this requires x != 0, if x == 0 then the result is zero\n        //\n        // Equivalent to:\n        // result = a == 0 ? 0 : (a * b - 1) / c + 1\n        assembly (\"memory-safe\") {\n            result := mul(iszero(iszero(product)), add(div(sub(product, 1), c), 1))\n        }\n    }\n\n    /**\n     * @dev Version of divUp when the input is raw (i.e., already \"inflated\"). For instance,\n     * invariant * invariant (36 decimals) vs. invariant.mulDown(invariant) (18 decimal FP).\n     * This can occur in calculations with many successive multiplications and divisions, and\n     * we want to minimize the number of operations by avoiding unnecessary scaling by ONE.\n     */\n    function divUpRaw(uint256 a, uint256 b) internal pure returns (uint256 result) {\n        // This check is required because Yul's `div` doesn't revert on b==0.\n        if (b == 0) {\n            revert ZeroDivision();\n        }\n\n        // Equivalent to:\n        // result = a == 0 ? 0 : 1 + (a - 1) / b\n        assembly (\"memory-safe\") {\n            result := mul(iszero(iszero(a)), add(1, div(sub(a, 1), b)))\n        }\n    }\n\n    /**\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\n     * the true value (that is, the error function expected - actual is always positive).\n     */\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        // Optimize for when y equals 1.0, 2.0 or 4.0, as those are very simple to implement and occur often in 50/50\n        // and 80/20 Weighted Pools\n        if (y == ONE) {\n            return x;\n        } else if (y == TWO) {\n            return mulDown(x, x);\n        } else if (y == FOUR) {\n            uint256 square = mulDown(x, x);\n            return mulDown(square, square);\n        } else {\n            uint256 raw = LogExpMath.pow(x, y);\n            uint256 maxError = mulUp(raw, MAX_POW_RELATIVE_ERROR) + 1;\n\n            if (raw < maxError) {\n                return 0;\n            } else {\n                unchecked {\n                    return raw - maxError;\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\n     * the true value (that is, the error function expected - actual is always negative).\n     */\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        // Optimize for when y equals 1.0, 2.0 or 4.0, as those are very simple to implement and occur often in 50/50\n        // and 80/20 Weighted Pools\n        if (y == ONE) {\n            return x;\n        } else if (y == TWO) {\n            return mulUp(x, x);\n        } else if (y == FOUR) {\n            uint256 square = mulUp(x, x);\n            return mulUp(square, square);\n        } else {\n            uint256 raw = LogExpMath.pow(x, y);\n            uint256 maxError = mulUp(raw, MAX_POW_RELATIVE_ERROR) + 1;\n\n            return raw + maxError;\n        }\n    }\n\n    /**\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\n     *\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\n     * prevents intermediate negative values.\n     */\n    function complement(uint256 x) internal pure returns (uint256 result) {\n        // Equivalent to:\n        // result = (x < ONE) ? (ONE - x) : 0\n        assembly (\"memory-safe\") {\n            result := mul(lt(x, ONE), sub(ONE, x))\n        }\n    }\n}\n"},"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\n// solhint-disable\n\n/**\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\n *\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\n * exponentiation and logarithm (where the base is Euler's number).\n *\n * All math operations are unchecked in order to save gas.\n *\n * @author Fernando Martinelli - @fernandomartinelli\n * @author Sergio Yuhjtman     - @sergioyuhjtman\n * @author Daniel Fernandez    - @dmf7z\n */\nlibrary LogExpMath {\n    /// @notice This error is thrown when a base is not within an acceptable range.\n    error BaseOutOfBounds();\n\n    /// @notice This error is thrown when a exponent is not within an acceptable range.\n    error ExponentOutOfBounds();\n\n    /// @notice This error is thrown when the exponent * ln(base) is not within an acceptable range.\n    error ProductOutOfBounds();\n\n    /// @notice This error is thrown when an exponent used in the exp function is not within an acceptable range.\n    error InvalidExponent();\n\n    /// @notice This error is thrown when a variable or result is not within the acceptable bounds defined in the function.\n    error OutOfBounds();\n\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\n    // two numbers, and multiply by ONE when dividing them.\n\n    // All arguments and return values are 18 decimal fixed point numbers.\n    int256 constant ONE_18 = 1e18;\n\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\n    // case of ln36, 36 decimals.\n    int256 constant ONE_20 = 1e20;\n    int256 constant ONE_36 = 1e36;\n\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\n    //\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\n    // The smallest possible result is 10^(-18), which makes largest negative argument\n    // ln(10^(-18)) = -41.446531673892822312.\n    // We use 130.0 and -41.0 to have some safety margin.\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\n\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\n    // 256 bit integer.\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\n\n    uint256 constant MILD_EXPONENT_BOUND = 2 ** 254 / uint256(ONE_20);\n\n    // 18 decimal constants\n    int256 constant x0 = 128000000000000000000; // 2ˆ7\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // eˆ(x0) (no decimals)\n    int256 constant x1 = 64000000000000000000; // 2ˆ6\n    int256 constant a1 = 6235149080811616882910000000; // eˆ(x1) (no decimals)\n\n    // 20 decimal constants\n    int256 constant x2 = 3200000000000000000000; // 2ˆ5\n    int256 constant a2 = 7896296018268069516100000000000000; // eˆ(x2)\n    int256 constant x3 = 1600000000000000000000; // 2ˆ4\n    int256 constant a3 = 888611052050787263676000000; // eˆ(x3)\n    int256 constant x4 = 800000000000000000000; // 2ˆ3\n    int256 constant a4 = 298095798704172827474000; // eˆ(x4)\n    int256 constant x5 = 400000000000000000000; // 2ˆ2\n    int256 constant a5 = 5459815003314423907810; // eˆ(x5)\n    int256 constant x6 = 200000000000000000000; // 2ˆ1\n    int256 constant a6 = 738905609893065022723; // eˆ(x6)\n    int256 constant x7 = 100000000000000000000; // 2ˆ0\n    int256 constant a7 = 271828182845904523536; // eˆ(x7)\n    int256 constant x8 = 50000000000000000000; // 2ˆ-1\n    int256 constant a8 = 164872127070012814685; // eˆ(x8)\n    int256 constant x9 = 25000000000000000000; // 2ˆ-2\n    int256 constant a9 = 128402541668774148407; // eˆ(x9)\n    int256 constant x10 = 12500000000000000000; // 2ˆ-3\n    int256 constant a10 = 113314845306682631683; // eˆ(x10)\n    int256 constant x11 = 6250000000000000000; // 2ˆ-4\n    int256 constant a11 = 106449445891785942956; // eˆ(x11)\n\n    /**\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\n     *\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\n     */\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\n        if (y == 0) {\n            // We solve the 0^0 indetermination by making it equal one.\n            return uint256(ONE_18);\n        }\n\n        if (x == 0) {\n            return 0;\n        }\n\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\n        // x^y = exp(y * ln(x)).\n\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\n        if (x >> 255 != 0) {\n            revert BaseOutOfBounds();\n        }\n        int256 x_int256 = int256(x);\n\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\n\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\n        if (y >= MILD_EXPONENT_BOUND) {\n            revert ExponentOutOfBounds();\n        }\n        int256 y_int256 = int256(y);\n\n        int256 logx_times_y;\n        unchecked {\n            if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\n                int256 ln_36_x = _ln_36(x_int256);\n\n                // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\n                // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\n                // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\n                // (downscaled) last 18 decimals.\n                logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\n            } else {\n                logx_times_y = _ln(x_int256) * y_int256;\n            }\n            logx_times_y /= ONE_18;\n        }\n\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\n        if (!(MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT)) {\n            revert ProductOutOfBounds();\n        }\n\n        return uint256(exp(logx_times_y));\n    }\n\n    /**\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\n     *\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\n     */\n    function exp(int256 x) internal pure returns (int256) {\n        if (!(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT)) {\n            revert InvalidExponent();\n        }\n\n        // We avoid using recursion here because zkSync doesn't support it.\n        bool negativeExponent = false;\n\n        if (x < 0) {\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT). In the negative\n            // exponent case, compute e^x, then return 1 / result.\n            unchecked {\n                x = -x;\n            }\n            negativeExponent = true;\n        }\n\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\n        // decomposition.\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\n        // decomposition, which will be lower than the smallest x_n.\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\n\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\n        // decomposition.\n\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\n        // it and compute the accumulated product.\n\n        int256 firstAN;\n        unchecked {\n            if (x >= x0) {\n                x -= x0;\n                firstAN = a0;\n            } else if (x >= x1) {\n                x -= x1;\n                firstAN = a1;\n            } else {\n                firstAN = 1; // One with no decimal places\n            }\n\n            // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\n            // smaller terms.\n            x *= 100;\n        }\n\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\n        int256 product = ONE_20;\n\n        unchecked {\n            if (x >= x2) {\n                x -= x2;\n                product = (product * a2) / ONE_20;\n            }\n            if (x >= x3) {\n                x -= x3;\n                product = (product * a3) / ONE_20;\n            }\n            if (x >= x4) {\n                x -= x4;\n                product = (product * a4) / ONE_20;\n            }\n            if (x >= x5) {\n                x -= x5;\n                product = (product * a5) / ONE_20;\n            }\n            if (x >= x6) {\n                x -= x6;\n                product = (product * a6) / ONE_20;\n            }\n            if (x >= x7) {\n                x -= x7;\n                product = (product * a7) / ONE_20;\n            }\n            if (x >= x8) {\n                x -= x8;\n                product = (product * a8) / ONE_20;\n            }\n            if (x >= x9) {\n                x -= x9;\n                product = (product * a9) / ONE_20;\n            }\n        }\n\n        // x10 and x11 are unnecessary here since we have high enough precision already.\n\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\n\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\n\n        // The first term is simply x.\n        term = x;\n        unchecked {\n            seriesSum += term;\n\n            // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\n            // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\n\n            term = ((term * x) / ONE_20) / 2;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 3;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 4;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 5;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 6;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 7;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 8;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 9;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 10;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 11;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 12;\n            seriesSum += term;\n\n            // 12 Taylor terms are sufficient for 18 decimal precision.\n\n            // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\n            // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\n            // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\n            // and then drop two digits to return an 18 decimal value.\n\n            int256 result = (((product * seriesSum) / ONE_20) * firstAN) / 100;\n\n            // We avoid using recursion here because zkSync doesn't support it.\n            return negativeExponent ? (ONE_18 * ONE_18) / result : result;\n        }\n    }\n\n    /// @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\n    function log(int256 arg, int256 base) internal pure returns (int256) {\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\n\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\n        // upscaling.\n\n        int256 logBase;\n        unchecked {\n            if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\n                logBase = _ln_36(base);\n            } else {\n                logBase = _ln(base) * ONE_18;\n            }\n        }\n\n        int256 logArg;\n        unchecked {\n            if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\n                logArg = _ln_36(arg);\n            } else {\n                logArg = _ln(arg) * ONE_18;\n            }\n\n            // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\n            return (logArg * ONE_18) / logBase;\n        }\n    }\n\n    /// @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n    function ln(int256 a) internal pure returns (int256) {\n        // The real natural logarithm is not defined for negative numbers or zero.\n        if (a <= 0) {\n            revert OutOfBounds();\n        }\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\n            unchecked {\n                return _ln_36(a) / ONE_18;\n            }\n        } else {\n            return _ln(a);\n        }\n    }\n\n    /// @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n    function _ln(int256 a) private pure returns (int256) {\n        // We avoid using recursion here because zkSync doesn't support it.\n        bool negativeExponent = false;\n\n        if (a < ONE_18) {\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\n            // than one, 1/a will be greater than one, so in this case we compute ln(1/a) and negate the final result.\n            unchecked {\n                a = (ONE_18 * ONE_18) / a;\n            }\n            negativeExponent = true;\n        }\n\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\n        // decomposition, which will be lower than the smallest a_n.\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\n\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\n        // ONE_18 to convert them to fixed point.\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\n        // by it and compute the accumulated sum.\n\n        int256 sum = 0;\n        unchecked {\n            if (a >= a0 * ONE_18) {\n                a /= a0; // Integer, not fixed point division\n                sum += x0;\n            }\n\n            if (a >= a1 * ONE_18) {\n                a /= a1; // Integer, not fixed point division\n                sum += x1;\n            }\n\n            // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\n            sum *= 100;\n            a *= 100;\n\n            // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\n\n            if (a >= a2) {\n                a = (a * ONE_20) / a2;\n                sum += x2;\n            }\n\n            if (a >= a3) {\n                a = (a * ONE_20) / a3;\n                sum += x3;\n            }\n\n            if (a >= a4) {\n                a = (a * ONE_20) / a4;\n                sum += x4;\n            }\n\n            if (a >= a5) {\n                a = (a * ONE_20) / a5;\n                sum += x5;\n            }\n\n            if (a >= a6) {\n                a = (a * ONE_20) / a6;\n                sum += x6;\n            }\n\n            if (a >= a7) {\n                a = (a * ONE_20) / a7;\n                sum += x7;\n            }\n\n            if (a >= a8) {\n                a = (a * ONE_20) / a8;\n                sum += x8;\n            }\n\n            if (a >= a9) {\n                a = (a * ONE_20) / a9;\n                sum += x9;\n            }\n\n            if (a >= a10) {\n                a = (a * ONE_20) / a10;\n                sum += x10;\n            }\n\n            if (a >= a11) {\n                a = (a * ONE_20) / a11;\n                sum += x11;\n            }\n        }\n\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\n        // Let z = (a - 1) / (a + 1).\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\n        // division by ONE_20.\n        unchecked {\n            int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\n            int256 z_squared = (z * z) / ONE_20;\n\n            // num is the numerator of the series: the z^(2 * n + 1) term\n            int256 num = z;\n\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n            int256 seriesSum = num;\n\n            // In each step, the numerator is multiplied by z^2\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 3;\n\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 5;\n\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 7;\n\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 9;\n\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 11;\n\n            // 6 Taylor terms are sufficient for 36 decimal precision.\n\n            // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\n            seriesSum *= 2;\n\n            // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\n            // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\n            // value.\n\n            int256 result = (sum + seriesSum) / 100;\n\n            // We avoid using recursion here because zkSync doesn't support it.\n            return negativeExponent ? -result : result;\n        }\n    }\n\n    /**\n     * @dev Internal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\n     * for x close to one.\n     *\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\n     */\n    function _ln_36(int256 x) private pure returns (int256) {\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\n        // worthwhile.\n\n        // First, we transform x to a 36 digit fixed point value.\n        unchecked {\n            x *= ONE_18;\n\n            // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\n            // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n            // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\n            // division by ONE_36.\n            int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\n            int256 z_squared = (z * z) / ONE_36;\n\n            // num is the numerator of the series: the z^(2 * n + 1) term\n            int256 num = z;\n\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n            int256 seriesSum = num;\n\n            // In each step, the numerator is multiplied by z^2\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 3;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 5;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 7;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 9;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 11;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 13;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 15;\n\n            // 8 Taylor terms are sufficient for 36 decimal precision.\n\n            // All that remains is multiplying by 2 (non fixed point).\n            return seriesSum * 2;\n        }\n    }\n}\n"},"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport { StorageSlotExtension } from \"./StorageSlotExtension.sol\";\n\n/**\n * @notice Variant of {ReentrancyGuard} that uses transient storage.\n * @dev NOTE: This variant only works on networks where EIP-1153 is available.\n */\nabstract contract ReentrancyGuardTransient {\n    using StorageSlotExtension for *;\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant _REENTRANCY_GUARD_STORAGE =\n        0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    /// @notice Unauthorized reentrant call.\n    error ReentrancyGuardReentrantCall();\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED.\n        if (_reentrancyGuardEntered()) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail.\n        _REENTRANCY_GUARD_STORAGE.asBoolean().tstore(true);\n    }\n\n    function _nonReentrantAfter() private {\n        _REENTRANCY_GUARD_STORAGE.asBoolean().tstore(false);\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _REENTRANCY_GUARD_STORAGE.asBoolean().tload();\n    }\n}\n"},"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\n/**\n * @notice Library for reading and writing primitive types to specific storage slots. Based on OpenZeppelin; just adding support for int256.\n * @dev TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlotExtension {\n    struct Int256Slot {\n        int256 value;\n    }\n\n    /// @dev Returns an `Int256Slot` with member `value` located at `slot`.\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /// @dev Custom type that represents a slot holding an address.\n    type AddressSlotType is bytes32;\n\n    /// @dev Cast an arbitrary slot to a AddressSlotType.\n    function asAddress(bytes32 slot) internal pure returns (AddressSlotType) {\n        return AddressSlotType.wrap(slot);\n    }\n\n    /// @dev Custom type that represents a slot holding a boolean.\n    type BooleanSlotType is bytes32;\n\n    /// @dev Cast an arbitrary slot to a BooleanSlotType.\n    function asBoolean(bytes32 slot) internal pure returns (BooleanSlotType) {\n        return BooleanSlotType.wrap(slot);\n    }\n\n    /// @dev Custom type that represents a slot holding a bytes32.\n    type Bytes32SlotType is bytes32;\n\n    /// @dev Cast an arbitrary slot to a Bytes32SlotType.\n    function asBytes32(bytes32 slot) internal pure returns (Bytes32SlotType) {\n        return Bytes32SlotType.wrap(slot);\n    }\n\n    /// @dev Custom type that represents a slot holding a uint256.\n    type Uint256SlotType is bytes32;\n\n    /// @dev Cast an arbitrary slot to a Uint256SlotType.\n    function asUint256(bytes32 slot) internal pure returns (Uint256SlotType) {\n        return Uint256SlotType.wrap(slot);\n    }\n\n    /// @dev Custom type that represents a slot holding an int256.\n    type Int256SlotType is bytes32;\n\n    /// @dev Cast an arbitrary slot to an Int256SlotType.\n    function asInt256(bytes32 slot) internal pure returns (Int256SlotType) {\n        return Int256SlotType.wrap(slot);\n    }\n\n    /// @dev Load the value held at location `slot` in transient storage.\n    function tload(AddressSlotType slot) internal view returns (address value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /// @dev Store `value` at location `slot` in transient storage.\n    function tstore(AddressSlotType slot, address value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /// @dev Load the value held at location `slot` in transient storage.\n    function tload(BooleanSlotType slot) internal view returns (bool value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /// @dev Store `value` at location `slot` in transient storage.\n    function tstore(BooleanSlotType slot, bool value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /// @dev Load the value held at location `slot` in transient storage.\n    function tload(Bytes32SlotType slot) internal view returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /// @dev Store `value` at location `slot` in transient storage.\n    function tstore(Bytes32SlotType slot, bytes32 value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /// @dev Load the value held at location `slot` in transient storage.\n    function tload(Uint256SlotType slot) internal view returns (uint256 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /// @dev Store `value` at location `slot` in transient storage.\n    function tstore(Uint256SlotType slot, uint256 value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /// @dev Load the value held at location `slot` in transient storage.\n    function tload(Int256SlotType slot) internal view returns (int256 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /// @dev Store `value` at location `slot` in transient storage.\n    function tstore(Int256SlotType slot, int256 value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n}\n"},"@balancer-labs/v3-vault/contracts/CommonAuthentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IVault } from \"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\";\nimport { Authentication } from \"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\";\n\n/// @dev Base contract for performing access control on external functions within pools.\nabstract contract CommonAuthentication is Authentication {\n    IVault private immutable _vault;\n\n    /// @notice Caller must be the swapFeeManager, if defined. Otherwise, default to governance.\n    modifier onlySwapFeeManagerOrGovernance(address pool) {\n        address roleAddress = _vault.getPoolRoleAccounts(pool).swapFeeManager;\n        _ensureAuthenticatedByExclusiveRole(pool, roleAddress);\n        _;\n    }\n\n    constructor(IVault vault, bytes32 actionIdDisambiguator) Authentication(actionIdDisambiguator) {\n        _vault = vault;\n    }\n\n    function _getVault() internal view returns (IVault) {\n        return _vault;\n    }\n\n    // Access control is delegated to the Authorizer in the `_canPerform` functions.\n    function _canPerform(bytes32 actionId, address user) internal view override returns (bool) {\n        return _vault.getAuthorizer().canPerform(actionId, user, address(this));\n    }\n\n    function _canPerform(bytes32 actionId, address account, address where) internal view returns (bool) {\n        return _vault.getAuthorizer().canPerform(actionId, account, where);\n    }\n\n    /// @dev Ensure the sender is the roleAccount, or default to governance if roleAccount is address(0).\n    function _ensureAuthenticatedByExclusiveRole(address where, address roleAccount) internal view {\n        if (roleAccount == address(0)) {\n            // Defer to governance if no role assigned.\n            if (_canPerform(getActionId(msg.sig), msg.sender, where) == false) {\n                revert SenderNotAllowed();\n            }\n        } else if (msg.sender != roleAccount) {\n            revert SenderNotAllowed();\n        }\n    }\n\n    /// @dev Ensure the sender is either the role manager, or is authorized by governance (non-exclusive).\n    function _ensureAuthenticatedByRole(address where, address roleAccount) internal view {\n        // If the sender is not the delegated manager for the role, defer to governance.\n        if (msg.sender != roleAccount) {\n            if (_canPerform(getActionId(msg.sig), msg.sender, where) == false) {\n                revert SenderNotAllowed();\n            }\n        }\n        // (else) if the sender is the delegated manager, proceed.\n    }\n}\n"},"@balancer-labs/v3-vault/contracts/ProtocolFeeController.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IProtocolFeeController } from \"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\";\nimport { IVaultErrors } from \"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\";\nimport { IVault } from \"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\";\nimport {\n    FEE_SCALING_FACTOR,\n    MAX_FEE_PERCENTAGE,\n    PoolRoleAccounts\n} from \"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\";\n\nimport {\n    ReentrancyGuardTransient\n} from \"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol\";\nimport { FixedPoint } from \"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol\";\n\nimport { SingletonAuthentication } from \"./SingletonAuthentication.sol\";\nimport { VaultGuard } from \"./VaultGuard.sol\";\n\n/**\n * @notice Helper contract to manage protocol and creator fees outside the Vault.\n * @dev This contract stores global default protocol swap and yield fees, and also tracks the values of those fees\n * for each pool (the `PoolFeeConfig` described below). Protocol fees can always be overwritten by governance, but\n * pool creator fees are controlled by the registered poolCreator (see `PoolRoleAccounts`).\n *\n * The Vault stores a single aggregate percentage for swap and yield fees; only this `ProtocolFeeController` knows\n * the component fee percentages, and how to compute the aggregate from the components. This is done for performance\n * reasons, to minimize gas on the critical path, as this way the Vault simply applies a single \"cut\", and stores the\n * fee amounts separately from the pool balances.\n *\n * The pool creator fees are \"net\" protocol fees, meaning the protocol fee is taken first, and the pool creator fee\n * percentage is applied to the remainder. Essentially, the protocol is paid first, then the remainder is divided\n * between the pool creator and the LPs.\n *\n * There is a permissionless function (`collectAggregateFees`) that transfers these tokens from the Vault to this\n * contract, and distributes them between the protocol and pool creator, after which they can be withdrawn at any\n * time by governance and the pool creator, respectively.\n *\n * Protocol fees can be zero in some cases (e.g., the token is registered as exempt), and pool creator fees are zero\n * if there is no creator role address defined. Protocol fees are capped at a maximum percentage (50%); pool creator\n * fees are computed \"net\" protocol fees, so they can be any value from 0 to 100%. Any combination is possible.\n * A protocol-fee-exempt pool with a 100% pool creator fee would send all fees to the creator. If there is no pool\n * creator, a pool with a 50% protocol fee would divide the fees evenly between the protocol and LPs.\n *\n * This contract is deployed with the Vault, but can be changed by governance.\n */\ncontract ProtocolFeeController is\n    IProtocolFeeController,\n    SingletonAuthentication,\n    ReentrancyGuardTransient,\n    VaultGuard\n{\n    using FixedPoint for uint256;\n    using SafeERC20 for IERC20;\n    using SafeCast for *;\n\n    enum ProtocolFeeType {\n        SWAP,\n        YIELD\n    }\n\n    /**\n     * @notice Fee configuration stored in the swap and yield fee mappings.\n     * @dev Instead of storing only the fee in the mapping, also store a flag to indicate whether the fee has been\n     * set by governance through a permissioned call. (The fee is stored in 64-bits, so that the struct fits\n     * within a single slot.)\n     *\n     * We know the percentage is an 18-decimal FP value, which only takes 60 bits, so it's guaranteed to fit,\n     * and we can do simple casts to truncate the high bits without needed SafeCast.\n     *\n     * We want to enable permissionless updates for pools, so that it is less onerous to update potentially\n     * hundreds of pools if the global protocol fees change. However, we don't want to overwrite pools that\n     * have had their fee percentages manually set by the DAO (i.e., after off-chain negotiation and agreement).\n     *\n     * @param feePercentage The raw swap or yield fee percentage\n     * @param isOverride When set, this fee is controlled by governance, and cannot be changed permissionlessly\n     */\n    struct PoolFeeConfig {\n        uint64 feePercentage;\n        bool isOverride;\n    }\n\n    // Maximum protocol swap fee percentage. FixedPoint.ONE corresponds to a 100% fee.\n    uint256 public constant MAX_PROTOCOL_SWAP_FEE_PERCENTAGE = 50e16; // 50%\n\n    // Maximum protocol yield fee percentage.\n    uint256 public constant MAX_PROTOCOL_YIELD_FEE_PERCENTAGE = 50e16; // 50%\n\n    // Maximum pool creator (swap, yield) fee percentage.\n    uint256 public constant MAX_CREATOR_FEE_PERCENTAGE = 99.999e16; // 99.999%\n\n    // Global protocol swap fee.\n    uint256 private _globalProtocolSwapFeePercentage;\n\n    // Global protocol yield fee.\n    uint256 private _globalProtocolYieldFeePercentage;\n\n    // Store the pool-specific swap fee percentages (the Vault's poolConfigBits stores the aggregate percentage).\n    mapping(address pool => PoolFeeConfig swapFeeConfig) internal _poolProtocolSwapFeePercentages;\n\n    // Store the pool-specific yield fee percentages (the Vault's poolConfigBits stores the aggregate percentage).\n    mapping(address pool => PoolFeeConfig yieldFeeConfig) internal _poolProtocolYieldFeePercentages;\n\n    // Explicitly mark a pool as registered. This will enable future migrations to safely update protected state.\n    mapping(address pool => bool isRegistered) internal _registeredPools;\n\n    // Pool creator swap fee percentages for each pool.\n    mapping(address pool => uint256 poolCreatorSwapFee) internal _poolCreatorSwapFeePercentages;\n\n    // Pool creator yield fee percentages for each pool.\n    mapping(address pool => uint256 poolCreatorYieldFee) internal _poolCreatorYieldFeePercentages;\n\n    // Disaggregated protocol fees (from swap and yield), available for withdrawal by governance.\n    mapping(address pool => mapping(IERC20 poolToken => uint256 feeAmount)) internal _protocolFeeAmounts;\n\n    // Disaggregated pool creator fees (from swap and yield), available for withdrawal by the pool creator.\n    mapping(address pool => mapping(IERC20 poolToken => uint256 feeAmount)) internal _poolCreatorFeeAmounts;\n\n    /**\n     * @notice Prevent pool data from being registered more than once.\n     * @dev This can happen if there is an error in the migration, or if governance somehow grants permission to\n     * `migratePool`, which should never happen.\n     *\n     * @param pool The pool\n     */\n    error PoolAlreadyRegistered(address pool);\n\n    /// @notice Migration source cannot be this contract.\n    error InvalidMigrationSource();\n\n    // Ensure that the caller is the pool creator.\n    modifier onlyPoolCreator(address pool) {\n        _ensureCallerIsPoolCreator(pool);\n        _;\n    }\n\n    // Validate the swap fee percentage against the maximum.\n    modifier withValidSwapFee(uint256 newSwapFeePercentage) {\n        if (newSwapFeePercentage > MAX_PROTOCOL_SWAP_FEE_PERCENTAGE) {\n            revert ProtocolSwapFeePercentageTooHigh();\n        }\n        _ensureValidPrecision(newSwapFeePercentage);\n        _;\n    }\n\n    // Validate the yield fee percentage against the maximum.\n    modifier withValidYieldFee(uint256 newYieldFeePercentage) {\n        if (newYieldFeePercentage > MAX_PROTOCOL_YIELD_FEE_PERCENTAGE) {\n            revert ProtocolYieldFeePercentageTooHigh();\n        }\n        _ensureValidPrecision(newYieldFeePercentage);\n        _;\n    }\n\n    modifier withValidPoolCreatorFee(uint256 newPoolCreatorFeePercentage) {\n        if (newPoolCreatorFeePercentage > MAX_CREATOR_FEE_PERCENTAGE) {\n            revert PoolCreatorFeePercentageTooHigh();\n        }\n        _;\n    }\n\n    // Force collection and disaggregation (e.g., before changing protocol fee percentages).\n    modifier withLatestFees(address pool) {\n        collectAggregateFees(pool);\n        _;\n    }\n\n    constructor(\n        IVault vault_,\n        uint256 initialGlobalSwapFeePercentage,\n        uint256 initialGlobalYieldFeePercentage\n    ) SingletonAuthentication(vault_) VaultGuard(vault_) {\n        _setGlobalProtocolSwapFeePercentage(initialGlobalSwapFeePercentage);\n        _setGlobalProtocolYieldFeePercentage(initialGlobalYieldFeePercentage);\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function vault() external view returns (IVault) {\n        return _vault;\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function collectAggregateFees(address pool) public {\n        _vault.unlock(abi.encodeCall(ProtocolFeeController.collectAggregateFeesHook, pool));\n    }\n\n    /**\n     * @dev Copy and zero out the `aggregateFeeAmounts` collected in the Vault accounting, supplying credit\n     * for each token. Then have the Vault transfer tokens to this contract, debiting each token for the amount\n     * transferred so that the transaction settles when the hook returns.\n     */\n    function collectAggregateFeesHook(address pool) external onlyVault {\n        (uint256[] memory totalSwapFees, uint256[] memory totalYieldFees) = _vault.collectAggregateFees(pool);\n        _receiveAggregateFees(pool, totalSwapFees, totalYieldFees);\n    }\n\n    /**\n     * @notice Settle fee credits from the Vault.\n     * @dev This must be called after calling `collectAggregateFees` in the Vault. Note that since charging protocol\n     * fees (i.e., distributing tokens between pool and fee balances) occurs in the Vault, but fee collection\n     * happens in the ProtocolFeeController, the swap fees reported here may encompass multiple operations. The Vault\n     * differentiates between swap and yield fees (since they can have different percentage values); the Controller\n     * combines swap and yield fees, then allocates the total between the protocol and pool creator.\n     *\n     * @param pool The address of the pool on which the swap fees were charged\n     * @param swapFeeAmounts An array with the total swap fees collected, sorted in token registration order\n     * @param yieldFeeAmounts An array with the total yield fees collected, sorted in token registration order\n     */\n    function _receiveAggregateFees(\n        address pool,\n        uint256[] memory swapFeeAmounts,\n        uint256[] memory yieldFeeAmounts\n    ) internal {\n        _receiveAggregateFees(pool, ProtocolFeeType.SWAP, swapFeeAmounts);\n        _receiveAggregateFees(pool, ProtocolFeeType.YIELD, yieldFeeAmounts);\n    }\n\n    function _receiveAggregateFees(address pool, ProtocolFeeType feeType, uint256[] memory feeAmounts) private {\n        // There are two cases when we don't need to split fees (in which case we can save gas and avoid rounding\n        // errors by skipping calculations) if either the protocol or pool creator fee percentage is zero.\n\n        uint256 protocolFeePercentage = feeType == ProtocolFeeType.SWAP\n            ? _poolProtocolSwapFeePercentages[pool].feePercentage\n            : _poolProtocolYieldFeePercentages[pool].feePercentage;\n\n        uint256 poolCreatorFeePercentage = feeType == ProtocolFeeType.SWAP\n            ? _poolCreatorSwapFeePercentages[pool]\n            : _poolCreatorYieldFeePercentages[pool];\n\n        uint256 aggregateFeePercentage;\n\n        bool needToSplitFees = poolCreatorFeePercentage > 0 && protocolFeePercentage > 0;\n        if (needToSplitFees) {\n            // Calculate once, outside the loop.\n            aggregateFeePercentage = _computeAggregateFeePercentage(protocolFeePercentage, poolCreatorFeePercentage);\n        }\n\n        (IERC20[] memory poolTokens, uint256 numTokens) = _getPoolTokensAndCount(pool);\n        for (uint256 i = 0; i < numTokens; ++i) {\n            if (feeAmounts[i] > 0) {\n                IERC20 token = poolTokens[i];\n\n                _vault.sendTo(token, address(this), feeAmounts[i]);\n\n                // It should be easier for off-chain processes to handle two events, rather than parsing the type\n                // out of a single event.\n                if (feeType == ProtocolFeeType.SWAP) {\n                    emit ProtocolSwapFeeCollected(pool, token, feeAmounts[i]);\n                } else {\n                    emit ProtocolYieldFeeCollected(pool, token, feeAmounts[i]);\n                }\n\n                if (needToSplitFees) {\n                    // The Vault took a single \"cut\" for the aggregate total percentage (protocol + pool creator) for\n                    // this fee type (swap or yield). The first step is to reconstruct this total fee amount. Then we\n                    // need to \"disaggregate\" this total, dividing it between the protocol and pool creator according\n                    // to their individual percentages. We do this by computing the protocol portion first, then\n                    // assigning the remainder to the pool creator.\n                    uint256 totalFeeAmountRaw = feeAmounts[i].divUp(aggregateFeePercentage);\n                    uint256 protocolPortion = totalFeeAmountRaw.mulUp(protocolFeePercentage);\n\n                    _protocolFeeAmounts[pool][token] += protocolPortion;\n                    _poolCreatorFeeAmounts[pool][token] += feeAmounts[i] - protocolPortion;\n                } else {\n                    // If we don't need to split, one of them must be zero.\n                    if (poolCreatorFeePercentage == 0) {\n                        _protocolFeeAmounts[pool][token] += feeAmounts[i];\n                    } else {\n                        _poolCreatorFeeAmounts[pool][token] += feeAmounts[i];\n                    }\n                }\n            }\n        }\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function getGlobalProtocolSwapFeePercentage() external view returns (uint256) {\n        return _globalProtocolSwapFeePercentage;\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function getGlobalProtocolYieldFeePercentage() external view returns (uint256) {\n        return _globalProtocolYieldFeePercentage;\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function isPoolRegistered(address pool) external view returns (bool) {\n        return _registeredPools[pool];\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function getPoolProtocolSwapFeeInfo(address pool) external view returns (uint256, bool) {\n        PoolFeeConfig memory config = _poolProtocolSwapFeePercentages[pool];\n\n        return (config.feePercentage, config.isOverride);\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function getPoolProtocolYieldFeeInfo(address pool) external view returns (uint256, bool) {\n        PoolFeeConfig memory config = _poolProtocolYieldFeePercentages[pool];\n\n        return (config.feePercentage, config.isOverride);\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function getPoolCreatorSwapFeePercentage(address pool) external view returns (uint256) {\n        return _poolCreatorSwapFeePercentages[pool];\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function getPoolCreatorYieldFeePercentage(address pool) external view returns (uint256) {\n        return _poolCreatorYieldFeePercentages[pool];\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function getProtocolFeeAmounts(address pool) external view returns (uint256[] memory feeAmounts) {\n        (IERC20[] memory poolTokens, uint256 numTokens) = _getPoolTokensAndCount(pool);\n\n        feeAmounts = new uint256[](numTokens);\n        for (uint256 i = 0; i < numTokens; ++i) {\n            feeAmounts[i] = _protocolFeeAmounts[pool][poolTokens[i]];\n        }\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function getPoolCreatorFeeAmounts(address pool) external view returns (uint256[] memory feeAmounts) {\n        (IERC20[] memory poolTokens, uint256 numTokens) = _getPoolTokensAndCount(pool);\n\n        feeAmounts = new uint256[](numTokens);\n        for (uint256 i = 0; i < numTokens; ++i) {\n            feeAmounts[i] = _poolCreatorFeeAmounts[pool][poolTokens[i]];\n        }\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function computeAggregateFeePercentage(\n        uint256 protocolFeePercentage,\n        uint256 poolCreatorFeePercentage\n    ) external pure returns (uint256) {\n        return _computeAggregateFeePercentage(protocolFeePercentage, poolCreatorFeePercentage);\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function updateProtocolSwapFeePercentage(address pool) external withLatestFees(pool) {\n        PoolFeeConfig memory feeConfig = _poolProtocolSwapFeePercentages[pool];\n        uint256 globalProtocolSwapFee = _globalProtocolSwapFeePercentage;\n\n        if (feeConfig.isOverride == false && globalProtocolSwapFee != feeConfig.feePercentage) {\n            _updatePoolSwapFeePercentage(pool, globalProtocolSwapFee, false);\n        }\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function updateProtocolYieldFeePercentage(address pool) external withLatestFees(pool) {\n        PoolFeeConfig memory feeConfig = _poolProtocolYieldFeePercentages[pool];\n        uint256 globalProtocolYieldFee = _globalProtocolYieldFeePercentage;\n\n        if (feeConfig.isOverride == false && globalProtocolYieldFee != feeConfig.feePercentage) {\n            _updatePoolYieldFeePercentage(pool, globalProtocolYieldFee, false);\n        }\n    }\n\n    function _getAggregateFeePercentage(address pool, ProtocolFeeType feeType) internal view returns (uint256) {\n        uint256 protocolFeePercentage;\n        uint256 poolCreatorFeePercentage;\n\n        if (feeType == ProtocolFeeType.SWAP) {\n            protocolFeePercentage = _poolProtocolSwapFeePercentages[pool].feePercentage;\n            poolCreatorFeePercentage = _poolCreatorSwapFeePercentages[pool];\n        } else {\n            protocolFeePercentage = _poolProtocolYieldFeePercentages[pool].feePercentage;\n            poolCreatorFeePercentage = _poolCreatorYieldFeePercentages[pool];\n        }\n\n        return _computeAggregateFeePercentage(protocolFeePercentage, poolCreatorFeePercentage);\n    }\n\n    function _computeAggregateFeePercentage(\n        uint256 protocolFeePercentage,\n        uint256 poolCreatorFeePercentage\n    ) internal pure returns (uint256 aggregateFeePercentage) {\n        aggregateFeePercentage =\n            protocolFeePercentage +\n            protocolFeePercentage.complement().mulDown(poolCreatorFeePercentage);\n\n        // Protocol fee percentages are limited to 24-bit precision for performance reasons (i.e., to fit all the fees\n        // in a single slot), and because high precision is not needed. Generally we expect protocol fees set by\n        // governance to be simple integers.\n        //\n        // However, the pool creator fee is entirely controlled by the pool creator, and it is possible to craft a\n        // valid pool creator fee percentage that would cause the aggregate fee percentage to fail the precision check.\n        // This case should be rare, so we ensure this can't happen by truncating the final value.\n        aggregateFeePercentage = (aggregateFeePercentage / FEE_SCALING_FACTOR) * FEE_SCALING_FACTOR;\n    }\n\n    function _ensureCallerIsPoolCreator(address pool) internal view {\n        address poolCreator = _getPoolCreator(pool);\n\n        if (poolCreator == address(0)) {\n            revert PoolCreatorNotRegistered(pool);\n        }\n\n        if (poolCreator != msg.sender) {\n            revert CallerIsNotPoolCreator(msg.sender, pool);\n        }\n    }\n\n    function _getPoolTokensAndCount(address pool) internal view returns (IERC20[] memory tokens, uint256 numTokens) {\n        tokens = _vault.getPoolTokens(pool);\n        numTokens = tokens.length;\n    }\n\n    // Retrieve the pool creator for a pool from the Vault.\n    function _getPoolCreator(address pool) internal view returns (address) {\n        PoolRoleAccounts memory roleAccounts = _vault.getPoolRoleAccounts(pool);\n\n        return roleAccounts.poolCreator;\n    }\n\n    /***************************************************************************\n                                 Pool Migration\n    ***************************************************************************/\n\n    /**\n     * @notice Not exposed in the interface, this enables migration of hidden pool state.\n     * @dev Permission should NEVER be granted to this function outside of a migration contract. It is necessary to\n     * permit migration of the `ProtocolFeeController` with all state (in particular, protocol fee overrides and pool\n     * creator fees) that cannot be written outside of the `registerPool` function called by the Vault during pool\n     * deployment.\n     *\n     * Even if governance were to grant permission to call this function, the `_registeredPools` latch keeps it safe,\n     * guaranteeing that it is impossible to use this function to change anything after registration. A pool can only\n     * be registered / configured once - either copied to a new controller in the migration context, or added normally\n     * through the Vault calling `registerPool`.\n     *\n     * @param pool The address of the pool to be migrated\n     */\n    function migratePool(address pool) external {\n        IProtocolFeeController oldFeeController = _vault.getProtocolFeeController();\n\n        if (address(oldFeeController) == address(this)) {\n            revert InvalidMigrationSource();\n        }\n\n        if (_registeredPools[pool]) {\n            revert PoolAlreadyRegistered(pool);\n        }\n\n        _registeredPools[pool] = true;\n\n        (uint256 protocolSwapFeePercentage, bool swapFeeIsOverride) = oldFeeController.getPoolProtocolSwapFeeInfo(pool);\n        _poolProtocolSwapFeePercentages[pool] = PoolFeeConfig({\n            feePercentage: protocolSwapFeePercentage.toUint64(),\n            isOverride: swapFeeIsOverride\n        });\n\n        (uint256 protocolYieldFeePercentage, bool yieldFeeIsOverride) = oldFeeController.getPoolProtocolYieldFeeInfo(\n            pool\n        );\n        _poolProtocolYieldFeePercentages[pool] = PoolFeeConfig({\n            feePercentage: protocolYieldFeePercentage.toUint64(),\n            isOverride: yieldFeeIsOverride\n        });\n\n        // On the first migration, these functions won't exist, as they were not included in the originally deployed\n        // contract. This is ok, as the first time the contract will be migrated, there will be no pool creators.\n        // In the event a pool that did have a pool creator was missed, the pool creator can simply set the fee\n        // percentage again on the new controller. The fact that a pool has a pool creator cannot be lost, as this\n        // is stored in the Vault on initial registration.\n        try oldFeeController.getPoolCreatorSwapFeePercentage(pool) returns (uint256 poolCreatorSwapFeePercentage) {\n            _poolCreatorSwapFeePercentages[pool] = poolCreatorSwapFeePercentage;\n        } catch {\n            // solhint-disable-previous-line no-empty-blocks\n        }\n\n        try oldFeeController.getPoolCreatorYieldFeePercentage(pool) returns (uint256 poolCreatorYieldFeePercentage) {\n            _poolCreatorYieldFeePercentages[pool] = poolCreatorYieldFeePercentage;\n        } catch {\n            // solhint-disable-previous-line no-empty-blocks\n        }\n    }\n\n    /***************************************************************************\n                                Permissioned Functions\n    ***************************************************************************/\n\n    /// @inheritdoc IProtocolFeeController\n    function registerPool(\n        address pool,\n        address poolCreator,\n        bool protocolFeeExempt\n    ) external onlyVault returns (uint256 aggregateSwapFeePercentage, uint256 aggregateYieldFeePercentage) {\n        _registeredPools[pool] = true;\n\n        // Set local storage of the actual percentages for the pool (default to global).\n        aggregateSwapFeePercentage = protocolFeeExempt ? 0 : _globalProtocolSwapFeePercentage;\n        aggregateYieldFeePercentage = protocolFeeExempt ? 0 : _globalProtocolYieldFeePercentage;\n\n        // `isOverride` is true if the pool is protocol fee exempt; otherwise, default to false.\n        // If exempt, this pool cannot be updated to the current global percentage permissionlessly.\n        // The percentages are 18 decimal floating point numbers, bound between 0 and the max fee (<= FixedPoint.ONE).\n        // Since this fits in 64 bits, the SafeCast shouldn't be necessary, and is done out of an abundance of caution.\n        _poolProtocolSwapFeePercentages[pool] = PoolFeeConfig({\n            feePercentage: aggregateSwapFeePercentage.toUint64(),\n            isOverride: protocolFeeExempt\n        });\n        _poolProtocolYieldFeePercentages[pool] = PoolFeeConfig({\n            feePercentage: aggregateYieldFeePercentage.toUint64(),\n            isOverride: protocolFeeExempt\n        });\n\n        // Allow tracking pool fee percentages in all cases (e.g., when the pool is protocol-fee exempt).\n        emit InitialPoolAggregateSwapFeePercentage(pool, aggregateSwapFeePercentage, protocolFeeExempt);\n        emit InitialPoolAggregateYieldFeePercentage(pool, aggregateYieldFeePercentage, protocolFeeExempt);\n\n        emit PoolRegisteredWithFeeController(pool, poolCreator, protocolFeeExempt);\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function setGlobalProtocolSwapFeePercentage(uint256 newProtocolSwapFeePercentage) external authenticate {\n        _setGlobalProtocolSwapFeePercentage(newProtocolSwapFeePercentage);\n    }\n\n    function _setGlobalProtocolSwapFeePercentage(\n        uint256 newProtocolSwapFeePercentage\n    ) internal withValidSwapFee(newProtocolSwapFeePercentage) {\n        _globalProtocolSwapFeePercentage = newProtocolSwapFeePercentage;\n\n        emit GlobalProtocolSwapFeePercentageChanged(newProtocolSwapFeePercentage);\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function setGlobalProtocolYieldFeePercentage(uint256 newProtocolYieldFeePercentage) external authenticate {\n        _setGlobalProtocolYieldFeePercentage(newProtocolYieldFeePercentage);\n    }\n\n    function _setGlobalProtocolYieldFeePercentage(\n        uint256 newProtocolYieldFeePercentage\n    ) internal withValidYieldFee(newProtocolYieldFeePercentage) {\n        _globalProtocolYieldFeePercentage = newProtocolYieldFeePercentage;\n\n        emit GlobalProtocolYieldFeePercentageChanged(newProtocolYieldFeePercentage);\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function setProtocolSwapFeePercentage(\n        address pool,\n        uint256 newProtocolSwapFeePercentage\n    ) external authenticate withValidSwapFee(newProtocolSwapFeePercentage) withLatestFees(pool) {\n        _updatePoolSwapFeePercentage(pool, newProtocolSwapFeePercentage, true);\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function setProtocolYieldFeePercentage(\n        address pool,\n        uint256 newProtocolYieldFeePercentage\n    ) external authenticate withValidYieldFee(newProtocolYieldFeePercentage) withLatestFees(pool) {\n        _updatePoolYieldFeePercentage(pool, newProtocolYieldFeePercentage, true);\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function setPoolCreatorSwapFeePercentage(\n        address pool,\n        uint256 poolCreatorSwapFeePercentage\n    ) external onlyPoolCreator(pool) withValidPoolCreatorFee(poolCreatorSwapFeePercentage) withLatestFees(pool) {\n        _setPoolCreatorFeePercentage(pool, poolCreatorSwapFeePercentage, ProtocolFeeType.SWAP);\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function setPoolCreatorYieldFeePercentage(\n        address pool,\n        uint256 poolCreatorYieldFeePercentage\n    ) external onlyPoolCreator(pool) withValidPoolCreatorFee(poolCreatorYieldFeePercentage) withLatestFees(pool) {\n        _setPoolCreatorFeePercentage(pool, poolCreatorYieldFeePercentage, ProtocolFeeType.YIELD);\n    }\n\n    function _setPoolCreatorFeePercentage(\n        address pool,\n        uint256 poolCreatorFeePercentage,\n        ProtocolFeeType feeType\n    ) internal {\n        // Need to set locally, and update the aggregate percentage in the Vault.\n        if (feeType == ProtocolFeeType.SWAP) {\n            _poolCreatorSwapFeePercentages[pool] = poolCreatorFeePercentage;\n\n            // The Vault will also emit an `AggregateSwapFeePercentageChanged` event.\n            _vault.updateAggregateSwapFeePercentage(pool, _getAggregateFeePercentage(pool, ProtocolFeeType.SWAP));\n\n            emit PoolCreatorSwapFeePercentageChanged(pool, poolCreatorFeePercentage);\n        } else {\n            _poolCreatorYieldFeePercentages[pool] = poolCreatorFeePercentage;\n\n            // The Vault will also emit an `AggregateYieldFeePercentageChanged` event.\n            _vault.updateAggregateYieldFeePercentage(pool, _getAggregateFeePercentage(pool, ProtocolFeeType.YIELD));\n\n            emit PoolCreatorYieldFeePercentageChanged(pool, poolCreatorFeePercentage);\n        }\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function withdrawProtocolFees(address pool, address recipient) external authenticate {\n        (IERC20[] memory poolTokens, uint256 numTokens) = _getPoolTokensAndCount(pool);\n\n        for (uint256 i = 0; i < numTokens; ++i) {\n            IERC20 token = poolTokens[i];\n\n            _withdrawProtocolFees(pool, recipient, token);\n        }\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function withdrawProtocolFeesForToken(address pool, address recipient, IERC20 token) external authenticate {\n        // Revert if the pool is not registered or if the token does not belong to the pool.\n        _vault.getPoolTokenCountAndIndexOfToken(pool, token);\n        _withdrawProtocolFees(pool, recipient, token);\n    }\n\n    function _withdrawProtocolFees(address pool, address recipient, IERC20 token) internal {\n        uint256 amountToWithdraw = _protocolFeeAmounts[pool][token];\n        if (amountToWithdraw > 0) {\n            _protocolFeeAmounts[pool][token] = 0;\n            token.safeTransfer(recipient, amountToWithdraw);\n\n            emit ProtocolFeesWithdrawn(pool, token, recipient, amountToWithdraw);\n        }\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function withdrawPoolCreatorFees(address pool, address recipient) external onlyPoolCreator(pool) {\n        _withdrawPoolCreatorFees(pool, recipient);\n    }\n\n    /// @inheritdoc IProtocolFeeController\n    function withdrawPoolCreatorFees(address pool) external {\n        _withdrawPoolCreatorFees(pool, _getPoolCreator(pool));\n    }\n\n    function _withdrawPoolCreatorFees(address pool, address recipient) private {\n        (IERC20[] memory poolTokens, uint256 numTokens) = _getPoolTokensAndCount(pool);\n\n        for (uint256 i = 0; i < numTokens; ++i) {\n            IERC20 token = poolTokens[i];\n\n            uint256 amountToWithdraw = _poolCreatorFeeAmounts[pool][token];\n            if (amountToWithdraw > 0) {\n                _poolCreatorFeeAmounts[pool][token] = 0;\n                token.safeTransfer(recipient, amountToWithdraw);\n\n                emit PoolCreatorFeesWithdrawn(pool, token, recipient, amountToWithdraw);\n            }\n        }\n    }\n\n    /// @dev Common code shared between set/update. `isOverride` will be true if governance is setting the percentage.\n    function _updatePoolSwapFeePercentage(address pool, uint256 newProtocolSwapFeePercentage, bool isOverride) private {\n        // Update local storage of the raw percentage.\n        //\n        // The percentages are 18 decimal floating point numbers, bound between 0 and the max fee (<= FixedPoint.ONE).\n        // Since this fits in 64 bits, the SafeCast shouldn't be necessary, and is done out of an abundance of caution.\n        _poolProtocolSwapFeePercentages[pool] = PoolFeeConfig({\n            feePercentage: newProtocolSwapFeePercentage.toUint64(),\n            isOverride: isOverride\n        });\n\n        // Update the resulting aggregate swap fee value in the Vault (PoolConfig).\n        _vault.updateAggregateSwapFeePercentage(pool, _getAggregateFeePercentage(pool, ProtocolFeeType.SWAP));\n\n        emit ProtocolSwapFeePercentageChanged(pool, newProtocolSwapFeePercentage);\n    }\n\n    /// @dev Common code shared between set/update. `isOverride` will be true if governance is setting the percentage.\n    function _updatePoolYieldFeePercentage(\n        address pool,\n        uint256 newProtocolYieldFeePercentage,\n        bool isOverride\n    ) private {\n        // Update local storage of the raw percentage.\n        // The percentages are 18 decimal floating point numbers, bound between 0 and the max fee (<= FixedPoint.ONE).\n        // Since this fits in 64 bits, the SafeCast shouldn't be necessary, and is done out of an abundance of caution.\n        _poolProtocolYieldFeePercentages[pool] = PoolFeeConfig({\n            feePercentage: newProtocolYieldFeePercentage.toUint64(),\n            isOverride: isOverride\n        });\n\n        // Update the resulting aggregate yield fee value in the Vault (PoolConfig).\n        _vault.updateAggregateYieldFeePercentage(pool, _getAggregateFeePercentage(pool, ProtocolFeeType.YIELD));\n\n        emit ProtocolYieldFeePercentageChanged(pool, newProtocolYieldFeePercentage);\n    }\n\n    function _ensureValidPrecision(uint256 feePercentage) private pure {\n        // Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit\n        // precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which\n        // corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%).\n        // Ensure there will be no precision loss in the Vault - which would lead to a discrepancy between the\n        // aggregate fee calculated here and that stored in the Vault.\n        if ((feePercentage / FEE_SCALING_FACTOR) * FEE_SCALING_FACTOR != feePercentage) {\n            revert IVaultErrors.FeePrecisionTooHigh();\n        }\n    }\n}\n"},"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IAuthorizer } from \"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\";\nimport { IVault } from \"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\";\n\nimport { CommonAuthentication } from \"./CommonAuthentication.sol\";\n\n/**\n * @notice Base contract suitable for Singleton contracts (e.g., pool factories) that have permissioned functions.\n * @dev The disambiguator is the contract's own address. This is used in the construction of actionIds for permissioned\n * functions, to avoid conflicts when multiple contracts (or multiple versions of the same contract) use the same\n * function name.\n */\nabstract contract SingletonAuthentication is CommonAuthentication {\n    // Use the contract's own address to disambiguate action identifiers.\n    constructor(IVault vault) CommonAuthentication(vault, bytes32(uint256(uint160(address(this))))) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @notice Get the address of the Balancer Vault.\n     * @return vault An interface pointer to the Vault\n     */\n    function getVault() public view returns (IVault) {\n        return _getVault();\n    }\n\n    /**\n     * @notice Get the address of the Authorizer.\n     * @return authorizer An interface pointer to the Authorizer\n     */\n    function getAuthorizer() public view returns (IAuthorizer) {\n        return getVault().getAuthorizer();\n    }\n}\n"},"@balancer-labs/v3-vault/contracts/VaultGuard.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IVaultErrors } from \"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\";\nimport { IVault } from \"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\";\n\n/// @notice Contract that shares the modifier `onlyVault`.\ncontract VaultGuard {\n    IVault internal immutable _vault;\n\n    constructor(IVault vault) {\n        _vault = vault;\n    }\n\n    modifier onlyVault() {\n        _ensureOnlyVault();\n        _;\n    }\n\n    function _ensureOnlyVault() private view {\n        if (msg.sender != address(_vault)) {\n            revert IVaultErrors.SenderIsNotVault(msg.sender);\n        }\n    }\n}\n"},"@openzeppelin/contracts/interfaces/IERC4626.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n"},"contracts/ProtocolFeeControllerMigration.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.24;\n\nimport { IAuthentication } from \"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\";\nimport { IBasicAuthorizer } from \"@balancer-labs/v3-interfaces/contracts/governance-scripts/IBasicAuthorizer.sol\";\nimport { IProtocolFeeController } from \"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\";\nimport { PoolRoleAccounts, PoolConfig } from \"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\";\nimport { IVaultAdmin } from \"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\";\nimport { IVault } from \"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\";\n\nimport { SingletonAuthentication } from \"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol\";\nimport { ProtocolFeeController } from \"@balancer-labs/v3-vault/contracts/ProtocolFeeController.sol\";\nimport {\n    ReentrancyGuardTransient\n} from \"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol\";\n\n/**\n * @notice Migrate to a ProtocolFeeController with extra events and infrastructure for future migrations.\n * @dev These events enable tracking pool protocol fees under all circumstances (in particular, when protocol fees are\n * initially turned off).\n *\n * After deployment, call `migratePools` as many times as necessary. The list must be generated externally, as pools\n * are not iterable on-chain. The batch interface allows an unlimited number of pools to be migrated; it's possible\n * there might be too many to migrate in a single call.\n *\n * The first time `migratePools` is called, the contract will first copy the global (pool-independent data). This could\n * be done in a separate stage, but we're trying to keep the contract simple, vs. duplicating the staging coordinator\n * system of v2 just yet.\n *\n * When all pools have been migrated, call `finalizeMigration` to disable further migration, update the address in the\n * Vault, and renounce all permissions. While `migratePools` is permissionless, this call must be permissioned to\n * prevent premature termination in case multiple transactions are required to migrate all the pools.\n *\n * Associated with `20250221-protocol-fee-controller-migration` (fork test only).\n */\ncontract ProtocolFeeControllerMigration is ReentrancyGuardTransient, SingletonAuthentication {\n    IProtocolFeeController public immutable oldFeeController;\n    IProtocolFeeController public newFeeController;\n\n    IVault public immutable vault;\n\n    // IAuthorizer with interface for granting/revoking roles.\n    IBasicAuthorizer internal immutable _authorizer;\n\n    // Set when the operation is complete and all permissions have been renounced.\n    bool internal _finalized;\n\n    // Set after the global percentages have been transferred (on the first call to `migratePools`).\n    bool internal _globalPercentagesMigrated;\n\n    /**\n     * @notice Attempt to deploy this contract with invalid parameters.\n     * @dev ProtocolFeeController contracts return the address of the Vault they were deployed with. Ensure that both\n     * the old and new controllers reference the same vault.\n     */\n    error InvalidFeeController();\n\n    /// @notice Migration can only be performed once.\n    error AlreadyMigrated();\n\n    constructor(IVault _vault, IProtocolFeeController _newFeeController) SingletonAuthentication(_vault) {\n        oldFeeController = _vault.getProtocolFeeController();\n\n        // Ensure valid fee controllers. Also ensure that we are not trying to operate on the current fee controller.\n        if (_newFeeController.vault() != _vault || _newFeeController == oldFeeController) {\n            revert InvalidFeeController();\n        }\n\n        vault = _vault;\n        newFeeController = _newFeeController;\n\n        _authorizer = IBasicAuthorizer(address(vault.getAuthorizer()));\n    }\n\n    /**\n     * @notice Check whether migration has been completed.\n     * @dev It can only be done once.\n     * @return isComplete True if `finalizeMigration` has been called.\n     */\n    function isMigrationComplete() public view returns (bool) {\n        return _finalized;\n    }\n\n    /**\n     * @notice Migrate pools from the old fee controller to the new one.\n     * @dev This can be called multiple times, if there are too many pools for a single transaction. Note that the\n     * first time this is called, it will migrate the global fee percentages, then proceed with the first set of pools.\n     *\n     * @param pools The set of pools to be migrated in this call\n     */\n    function migratePools(address[] memory pools) external virtual nonReentrant {\n        if (isMigrationComplete()) {\n            revert AlreadyMigrated();\n        }\n\n        // Migrate the global percentages only once, before the first set of pools.\n        if (_globalPercentagesMigrated == false) {\n            _globalPercentagesMigrated = true;\n\n            _migrateGlobalPercentages();\n        }\n\n        // This more complex migration allows for pool creators and overrides, and uses the new features in the second\n        // deployment of the `ProtocolFeeController`.\n        //\n        // At the end of this process, governance must still withdraw any leftover protocol fees from the old\n        // controller (i.e., that have been collected but not withdrawn). Pool creators likewise would still need to\n        // withdraw any leftover pool creator fees from the old controller.\n        for (uint256 i = 0; i < pools.length; ++i) {\n            // This function is not in the public interface.\n            ProtocolFeeController(address(newFeeController)).migratePool(pools[i]);\n        }\n    }\n\n    function finalizeMigration() external virtual authenticate {\n        if (isMigrationComplete()) {\n            revert AlreadyMigrated();\n        }\n\n        _finalized = true;\n\n        // Update the fee controller in the Vault.\n        _migrateFeeController();\n\n        // Revoke all permissions.\n        _authorizer.renounceRole(_authorizer.DEFAULT_ADMIN_ROLE(), address(this));\n    }\n\n    function _migrateGlobalPercentages() internal {\n        // Grant global fee percentage permissions to set on new controller.\n        bytes32 swapFeeRole = IAuthentication(address(newFeeController)).getActionId(\n            IProtocolFeeController.setGlobalProtocolSwapFeePercentage.selector\n        );\n\n        bytes32 yieldFeeRole = IAuthentication(address(newFeeController)).getActionId(\n            IProtocolFeeController.setGlobalProtocolYieldFeePercentage.selector\n        );\n\n        _authorizer.grantRole(swapFeeRole, address(this));\n        _authorizer.grantRole(yieldFeeRole, address(this));\n\n        // Copy percentages to new controller.\n        uint256 globalSwapFeePercentage = oldFeeController.getGlobalProtocolSwapFeePercentage();\n        uint256 globalYieldFeePercentage = oldFeeController.getGlobalProtocolYieldFeePercentage();\n\n        newFeeController.setGlobalProtocolSwapFeePercentage(globalSwapFeePercentage);\n        newFeeController.setGlobalProtocolYieldFeePercentage(globalYieldFeePercentage);\n\n        // Revoke permissions.\n        _authorizer.renounceRole(swapFeeRole, address(this));\n        _authorizer.renounceRole(yieldFeeRole, address(this));\n    }\n\n    function _migrateFeeController() internal {\n        bytes32 setFeeControllerRole = IAuthentication(address(vault)).getActionId(\n            IVaultAdmin.setProtocolFeeController.selector\n        );\n\n        _authorizer.grantRole(setFeeControllerRole, address(this));\n\n        vault.setProtocolFeeController(newFeeController);\n\n        _authorizer.renounceRole(setFeeControllerRole, address(this));\n    }\n}\n"}},"settings":{"viaIR":true,"evmVersion":"cancun","optimizer":{"enabled":true,"runs":9999,"details":{"yulDetails":{"optimizerSteps":"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu"}}},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":"2394","formattedMessage":"Warning: Transient storage as defined by EIP-1153 can break the composability of smart contracts: Since transient storage is cleared only at the end of the transaction and not at the end of the outermost call frame to the contract within a transaction, your contract may unintentionally misbehave when invoked multiple times in a complex transaction. To avoid this, be sure to clear all transient storage at the end of any call to your contract. The use of transient storage for reentrancy guards that are cleared at the end of the call is safe.\n  --> @balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol:74:13:\n   |\n74 |             tstore(slot, value)\n   |             ^^^^^^\n\n","message":"Transient storage as defined by EIP-1153 can break the composability of smart contracts: Since transient storage is cleared only at the end of the transaction and not at the end of the outermost call frame to the contract within a transaction, your contract may unintentionally misbehave when invoked multiple times in a complex transaction. To avoid this, be sure to clear all transient storage at the end of any call to your contract. The use of transient storage for reentrancy guards that are cleared at the end of the call is safe.","severity":"warning","sourceLocation":{"end":2572,"file":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol","start":2566},"type":"Warning"}],"sources":{"@balancer-labs/v3-interfaces/contracts/governance-scripts/IBasicAuthorizer.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/governance-scripts/IBasicAuthorizer.sol","exportedSymbols":{"IAuthorizer":[73],"IBasicAuthorizer":[32]},"id":33,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:0"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","file":"../vault/IAuthorizer.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":74,"src":"72:55:0","symbolAliases":[{"foreign":{"id":2,"name":"IAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"81:11:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4,"name":"IAuthorizer","nameLocations":["159:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":73,"src":"159:11:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"159:11:0"}],"canonicalName":"IBasicAuthorizer","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":32,"linearizedBaseContracts":[32,73],"name":"IBasicAuthorizer","nameLocation":"139:16:0","nodeType":"ContractDefinition","nodes":[{"functionSelector":"a217fddf","id":10,"implemented":false,"kind":"function","modifiers":[],"name":"DEFAULT_ADMIN_ROLE","nameLocation":"239:18:0","nodeType":"FunctionDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"257:2:0"},"returnParameters":{"id":9,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":10,"src":"283:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7,"name":"bytes32","nodeType":"ElementaryTypeName","src":"283:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"282:9:0"},"scope":32,"src":"230:62:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"2f2ff15d","id":17,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"307:9:0","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"mutability":"mutable","name":"role","nameLocation":"325:4:0","nodeType":"VariableDeclaration","scope":17,"src":"317:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":11,"name":"bytes32","nodeType":"ElementaryTypeName","src":"317:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":14,"mutability":"mutable","name":"account","nameLocation":"339:7:0","nodeType":"VariableDeclaration","scope":17,"src":"331:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"331:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"316:31:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"356:0:0"},"scope":32,"src":"298:59:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d547741f","id":24,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"372:10:0","nodeType":"FunctionDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"role","nameLocation":"391:4:0","nodeType":"VariableDeclaration","scope":24,"src":"383:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":18,"name":"bytes32","nodeType":"ElementaryTypeName","src":"383:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":21,"mutability":"mutable","name":"account","nameLocation":"405:7:0","nodeType":"VariableDeclaration","scope":24,"src":"397:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":20,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"382:31:0"},"returnParameters":{"id":23,"nodeType":"ParameterList","parameters":[],"src":"422:0:0"},"scope":32,"src":"363:60:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"36568abe","id":31,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"438:12:0","nodeType":"FunctionDefinition","parameters":{"id":29,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"role","nameLocation":"459:4:0","nodeType":"VariableDeclaration","scope":31,"src":"451:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":25,"name":"bytes32","nodeType":"ElementaryTypeName","src":"451:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":28,"mutability":"mutable","name":"account","nameLocation":"473:7:0","nodeType":"VariableDeclaration","scope":31,"src":"465:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":27,"name":"address","nodeType":"ElementaryTypeName","src":"465:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"450:31:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"490:0:0"},"scope":32,"src":"429:62:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":33,"src":"129:364:0","usedErrors":[],"usedEvents":[]}],"src":"46:448:0"},"id":0},"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","exportedSymbols":{"IAuthentication":[47]},"id":48,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":34,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAuthentication","contractDependencies":[],"contractKind":"interface","documentation":{"id":35,"nodeType":"StructuredDocumentation","src":"72:77:1","text":"@notice Simple interface for permissioned calling of external functions."},"fullyImplemented":false,"id":47,"linearizedBaseContracts":[47],"name":"IAuthentication","nameLocation":"159:15:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":36,"nodeType":"StructuredDocumentation","src":"181:67:1","text":"@notice The sender does not have permission to call a function."},"errorSelector":"23dada53","id":38,"name":"SenderNotAllowed","nameLocation":"259:16:1","nodeType":"ErrorDefinition","parameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"275:2:1"},"src":"253:25:1"},{"documentation":{"id":39,"nodeType":"StructuredDocumentation","src":"284:237:1","text":" @notice Returns the action identifier associated with the external function described by `selector`.\n @param selector The 4-byte selector of the permissioned function\n @return actionId The computed actionId"},"functionSelector":"851c1bb3","id":46,"implemented":false,"kind":"function","modifiers":[],"name":"getActionId","nameLocation":"535:11:1","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[{"constant":false,"id":41,"mutability":"mutable","name":"selector","nameLocation":"554:8:1","nodeType":"VariableDeclaration","scope":46,"src":"547:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":40,"name":"bytes4","nodeType":"ElementaryTypeName","src":"547:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"546:17:1"},"returnParameters":{"id":45,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44,"mutability":"mutable","name":"actionId","nameLocation":"595:8:1","nodeType":"VariableDeclaration","scope":46,"src":"587:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":43,"name":"bytes32","nodeType":"ElementaryTypeName","src":"587:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"586:18:1"},"scope":47,"src":"526:79:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":48,"src":"149:458:1","usedErrors":[38],"usedEvents":[]}],"src":"46:562:1"},"id":1},"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol","exportedSymbols":{"IRateProvider":[57]},"id":58,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":49,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IRateProvider","contractDependencies":[],"contractKind":"interface","documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"72:56:2","text":"@notice General interface for token exchange rates."},"fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"IRateProvider","nameLocation":"138:13:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"158:573:2","text":" @notice An 18 decimal fixed point number representing the exchange rate of one token to another related token.\n @dev The meaning of this rate depends on the context. Note that there may be an error associated with a token\n rate, and the caller might require a certain rounding direction to ensure correctness. This (legacy) interface\n does not take a rounding direction or return an error, so great care must be taken when interpreting and using\n rates in downstream computations.\n @return rate The current token rate"},"functionSelector":"679aefce","id":56,"implemented":false,"kind":"function","modifiers":[],"name":"getRate","nameLocation":"745:7:2","nodeType":"FunctionDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"752:2:2"},"returnParameters":{"id":55,"nodeType":"ParameterList","parameters":[{"constant":false,"id":54,"mutability":"mutable","name":"rate","nameLocation":"786:4:2","nodeType":"VariableDeclaration","scope":56,"src":"778:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":53,"name":"uint256","nodeType":"ElementaryTypeName","src":"778:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"777:14:2"},"scope":57,"src":"736:56:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":58,"src":"128:666:2","usedErrors":[],"usedEvents":[]}],"src":"46:749:2"},"id":2},"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","exportedSymbols":{"IAuthorizer":[73]},"id":74,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IAuthorizer","contractDependencies":[],"contractKind":"interface","documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"72:56:3","text":"@notice Interface to the Vault's permission system."},"fullyImplemented":false,"id":73,"linearizedBaseContracts":[73],"name":"IAuthorizer","nameLocation":"138:11:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":61,"nodeType":"StructuredDocumentation","src":"156:354:3","text":" @notice Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n @param actionId Identifier for the action to be performed\n @param account Account trying to perform the action\n @param where Target contract for the action\n @return success True if the action is permitted"},"functionSelector":"9be2a884","id":72,"implemented":false,"kind":"function","modifiers":[],"name":"canPerform","nameLocation":"524:10:3","nodeType":"FunctionDefinition","parameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"actionId","nameLocation":"543:8:3","nodeType":"VariableDeclaration","scope":72,"src":"535:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":62,"name":"bytes32","nodeType":"ElementaryTypeName","src":"535:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"account","nameLocation":"561:7:3","nodeType":"VariableDeclaration","scope":72,"src":"553:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"553:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"where","nameLocation":"578:5:3","nodeType":"VariableDeclaration","scope":72,"src":"570:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":66,"name":"address","nodeType":"ElementaryTypeName","src":"570:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"534:50:3"},"returnParameters":{"id":71,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"success","nameLocation":"613:7:3","nodeType":"VariableDeclaration","scope":72,"src":"608:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":69,"name":"bool","nodeType":"ElementaryTypeName","src":"608:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"607:14:3"},"scope":73,"src":"515:107:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":74,"src":"128:496:3","usedErrors":[],"usedEvents":[]}],"src":"46:579:3"},"id":3},"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol","exportedSymbols":{"AddLiquidityKind":[2347],"AfterSwapParams":[2341],"HookFlags":[2167],"IHooks":[275],"LiquidityManagement":[2120],"PoolSwapParams":[2312],"RemoveLiquidityKind":[2368],"SwapKind":[2275],"TokenConfig":[2234]},"id":276,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":75,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:4"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":84,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":276,"sourceUnit":2412,"src":"289:193:4","symbolAliases":[{"foreign":{"id":76,"name":"TokenConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"302:11:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":77,"name":"LiquidityManagement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2120,"src":"319:19:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":78,"name":"PoolSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2312,"src":"344:14:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":79,"name":"AfterSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"364:15:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":80,"name":"HookFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"385:9:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":81,"name":"AddLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"400:16:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":82,"name":"RemoveLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"422:19:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":83,"name":"SwapKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"447:8:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IHooks","contractDependencies":[],"contractKind":"interface","documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"484:490:4","text":" @notice Interface for pool hooks.\n @dev Hooks are functions invoked by the Vault at specific points in the flow of each operation. This guarantees that\n they are called in the correct order, and with the correct arguments. To maintain this security, these functions\n should only be called by the Vault. The recommended way to do this is to derive the hook contract from `BaseHooks`,\n then use the `onlyVault` modifier from `VaultGuard`. (See the examples in /pool-hooks.)"},"fullyImplemented":false,"id":275,"linearizedBaseContracts":[275],"name":"IHooks","nameLocation":"985:6:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":86,"nodeType":"StructuredDocumentation","src":"1205:769:4","text":" @notice Hook executed when a pool is registered with a non-zero hooks contract.\n @dev Returns true if registration was successful, and false to revert the pool registration.\n Make sure this function is properly implemented (e.g. check the factory, and check that the\n given pool is from the factory). The Vault address will be msg.sender.\n @param factory Address of the pool factory (contract deploying the pool)\n @param pool Address of the pool\n @param tokenConfig An array of descriptors for the tokens the pool will manage\n @param liquidityManagement Liquidity management flags indicating which functions are enabled\n @return success True if the hook allowed the registration, false otherwise"},"functionSelector":"0b89f182","id":102,"implemented":false,"kind":"function","modifiers":[],"name":"onRegister","nameLocation":"1988:10:4","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88,"mutability":"mutable","name":"factory","nameLocation":"2016:7:4","nodeType":"VariableDeclaration","scope":102,"src":"2008:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":87,"name":"address","nodeType":"ElementaryTypeName","src":"2008:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":90,"mutability":"mutable","name":"pool","nameLocation":"2041:4:4","nodeType":"VariableDeclaration","scope":102,"src":"2033:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":89,"name":"address","nodeType":"ElementaryTypeName","src":"2033:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":94,"mutability":"mutable","name":"tokenConfig","nameLocation":"2076:11:4","nodeType":"VariableDeclaration","scope":102,"src":"2055:32:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2234_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenConfig[]"},"typeName":{"baseType":{"id":92,"nodeType":"UserDefinedTypeName","pathNode":{"id":91,"name":"TokenConfig","nameLocations":["2055:11:4"],"nodeType":"IdentifierPath","referencedDeclaration":2234,"src":"2055:11:4"},"referencedDeclaration":2234,"src":"2055:11:4","typeDescriptions":{"typeIdentifier":"t_struct$_TokenConfig_$2234_storage_ptr","typeString":"struct TokenConfig"}},"id":93,"nodeType":"ArrayTypeName","src":"2055:13:4","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2234_storage_$dyn_storage_ptr","typeString":"struct TokenConfig[]"}},"visibility":"internal"},{"constant":false,"id":97,"mutability":"mutable","name":"liquidityManagement","nameLocation":"2126:19:4","nodeType":"VariableDeclaration","scope":102,"src":"2097:48:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2120_calldata_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":96,"nodeType":"UserDefinedTypeName","pathNode":{"id":95,"name":"LiquidityManagement","nameLocations":["2097:19:4"],"nodeType":"IdentifierPath","referencedDeclaration":2120,"src":"2097:19:4"},"referencedDeclaration":2120,"src":"2097:19:4","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2120_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"}],"src":"1998:153:4"},"returnParameters":{"id":101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":100,"mutability":"mutable","name":"success","nameLocation":"2175:7:4","nodeType":"VariableDeclaration","scope":102,"src":"2170:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":99,"name":"bool","nodeType":"ElementaryTypeName","src":"2170:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2169:14:4"},"scope":275,"src":"1979:205:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":103,"nodeType":"StructuredDocumentation","src":"2190:412:4","text":" @notice Return the set of hooks implemented by the contract.\n @dev The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined\n (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero).\n `onRegister` is the only \"mandatory\" hook.\n @return hookFlags Flags indicating which hooks the contract supports"},"functionSelector":"d77153a7","id":109,"implemented":false,"kind":"function","modifiers":[],"name":"getHookFlags","nameLocation":"2616:12:4","nodeType":"FunctionDefinition","parameters":{"id":104,"nodeType":"ParameterList","parameters":[],"src":"2628:2:4"},"returnParameters":{"id":108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":107,"mutability":"mutable","name":"hookFlags","nameLocation":"2671:9:4","nodeType":"VariableDeclaration","scope":109,"src":"2654:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_HookFlags_$2167_memory_ptr","typeString":"struct HookFlags"},"typeName":{"id":106,"nodeType":"UserDefinedTypeName","pathNode":{"id":105,"name":"HookFlags","nameLocations":["2654:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2167,"src":"2654:9:4"},"referencedDeclaration":2167,"src":"2654:9:4","typeDescriptions":{"typeIdentifier":"t_struct$_HookFlags_$2167_storage_ptr","typeString":"struct HookFlags"}},"visibility":"internal"}],"src":"2653:28:4"},"scope":275,"src":"2607:75:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":110,"nodeType":"StructuredDocumentation","src":"2897:484:4","text":" @notice Hook executed before pool initialization.\n @dev Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param exactAmountsIn Exact amounts of input tokens\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool wishes to proceed with initialization"},"functionSelector":"1c149e28","id":120,"implemented":false,"kind":"function","modifiers":[],"name":"onBeforeInitialize","nameLocation":"3395:18:4","nodeType":"FunctionDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"3431:14:4","nodeType":"VariableDeclaration","scope":120,"src":"3414:31:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":111,"name":"uint256","nodeType":"ElementaryTypeName","src":"3414:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":112,"nodeType":"ArrayTypeName","src":"3414:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"userData","nameLocation":"3460:8:4","nodeType":"VariableDeclaration","scope":120,"src":"3447:21:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":114,"name":"bytes","nodeType":"ElementaryTypeName","src":"3447:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3413:56:4"},"returnParameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"success","nameLocation":"3493:7:4","nodeType":"VariableDeclaration","scope":120,"src":"3488:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":117,"name":"bool","nodeType":"ElementaryTypeName","src":"3488:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3487:14:4"},"scope":275,"src":"3386:116:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":121,"nodeType":"StructuredDocumentation","src":"3508:563:4","text":" @notice Hook to be executed after pool initialization.\n @dev Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param exactAmountsIn Exact amounts of input tokens\n @param bptAmountOut Amount of pool tokens minted during initialization\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool accepts the initialization results"},"functionSelector":"38be241d","id":133,"implemented":false,"kind":"function","modifiers":[],"name":"onAfterInitialize","nameLocation":"4085:17:4","nodeType":"FunctionDefinition","parameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"4129:14:4","nodeType":"VariableDeclaration","scope":133,"src":"4112:31:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":122,"name":"uint256","nodeType":"ElementaryTypeName","src":"4112:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":123,"nodeType":"ArrayTypeName","src":"4112:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":126,"mutability":"mutable","name":"bptAmountOut","nameLocation":"4161:12:4","nodeType":"VariableDeclaration","scope":133,"src":"4153:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":125,"name":"uint256","nodeType":"ElementaryTypeName","src":"4153:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":128,"mutability":"mutable","name":"userData","nameLocation":"4196:8:4","nodeType":"VariableDeclaration","scope":133,"src":"4183:21:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":127,"name":"bytes","nodeType":"ElementaryTypeName","src":"4183:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4102:108:4"},"returnParameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":131,"mutability":"mutable","name":"success","nameLocation":"4234:7:4","nodeType":"VariableDeclaration","scope":133,"src":"4229:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":130,"name":"bool","nodeType":"ElementaryTypeName","src":"4229:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4228:14:4"},"scope":275,"src":"4076:167:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":134,"nodeType":"StructuredDocumentation","src":"4461:953:4","text":" @notice Hook to be executed before adding liquidity.\n @dev Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The add liquidity operation type (e.g., proportional, custom)\n @param maxAmountsInScaled18 Maximum amounts of input tokens\n @param minBptAmountOut Minimum amount of output pool tokens\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool wishes to proceed with settlement"},"functionSelector":"45421ec7","id":156,"implemented":false,"kind":"function","modifiers":[],"name":"onBeforeAddLiquidity","nameLocation":"5428:20:4","nodeType":"FunctionDefinition","parameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":136,"mutability":"mutable","name":"router","nameLocation":"5466:6:4","nodeType":"VariableDeclaration","scope":156,"src":"5458:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":135,"name":"address","nodeType":"ElementaryTypeName","src":"5458:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":138,"mutability":"mutable","name":"pool","nameLocation":"5490:4:4","nodeType":"VariableDeclaration","scope":156,"src":"5482:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":137,"name":"address","nodeType":"ElementaryTypeName","src":"5482:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":141,"mutability":"mutable","name":"kind","nameLocation":"5521:4:4","nodeType":"VariableDeclaration","scope":156,"src":"5504:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2347","typeString":"enum AddLiquidityKind"},"typeName":{"id":140,"nodeType":"UserDefinedTypeName","pathNode":{"id":139,"name":"AddLiquidityKind","nameLocations":["5504:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":2347,"src":"5504:16:4"},"referencedDeclaration":2347,"src":"5504:16:4","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2347","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":144,"mutability":"mutable","name":"maxAmountsInScaled18","nameLocation":"5552:20:4","nodeType":"VariableDeclaration","scope":156,"src":"5535:37:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":142,"name":"uint256","nodeType":"ElementaryTypeName","src":"5535:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":143,"nodeType":"ArrayTypeName","src":"5535:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":146,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"5590:15:4","nodeType":"VariableDeclaration","scope":156,"src":"5582:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":145,"name":"uint256","nodeType":"ElementaryTypeName","src":"5582:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":149,"mutability":"mutable","name":"balancesScaled18","nameLocation":"5632:16:4","nodeType":"VariableDeclaration","scope":156,"src":"5615:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":147,"name":"uint256","nodeType":"ElementaryTypeName","src":"5615:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":148,"nodeType":"ArrayTypeName","src":"5615:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":151,"mutability":"mutable","name":"userData","nameLocation":"5671:8:4","nodeType":"VariableDeclaration","scope":156,"src":"5658:21:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":150,"name":"bytes","nodeType":"ElementaryTypeName","src":"5658:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5448:237:4"},"returnParameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":154,"mutability":"mutable","name":"success","nameLocation":"5709:7:4","nodeType":"VariableDeclaration","scope":156,"src":"5704:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":153,"name":"bool","nodeType":"ElementaryTypeName","src":"5704:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5703:14:4"},"scope":275,"src":"5419:299:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":157,"nodeType":"StructuredDocumentation","src":"5724:1250:4","text":" @notice Hook to be executed after adding liquidity.\n @dev Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore\n `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The add liquidity operation type (e.g., proportional, custom)\n @param amountsInScaled18 Actual amounts of tokens added, sorted in token registration order\n @param amountsInRaw Actual amounts of tokens added, sorted in token registration order\n @param bptAmountOut Amount of pool tokens minted\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Additional (optional) data provided by the user\n @return success True if the pool wishes to proceed with settlement\n @return hookAdjustedAmountsInRaw New amountsInRaw, potentially modified by the hook"},"functionSelector":"976907cc","id":185,"implemented":false,"kind":"function","modifiers":[],"name":"onAfterAddLiquidity","nameLocation":"6988:19:4","nodeType":"FunctionDefinition","parameters":{"id":178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"router","nameLocation":"7025:6:4","nodeType":"VariableDeclaration","scope":185,"src":"7017:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":158,"name":"address","nodeType":"ElementaryTypeName","src":"7017:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":161,"mutability":"mutable","name":"pool","nameLocation":"7049:4:4","nodeType":"VariableDeclaration","scope":185,"src":"7041:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":160,"name":"address","nodeType":"ElementaryTypeName","src":"7041:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":164,"mutability":"mutable","name":"kind","nameLocation":"7080:4:4","nodeType":"VariableDeclaration","scope":185,"src":"7063:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2347","typeString":"enum AddLiquidityKind"},"typeName":{"id":163,"nodeType":"UserDefinedTypeName","pathNode":{"id":162,"name":"AddLiquidityKind","nameLocations":["7063:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":2347,"src":"7063:16:4"},"referencedDeclaration":2347,"src":"7063:16:4","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2347","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":167,"mutability":"mutable","name":"amountsInScaled18","nameLocation":"7111:17:4","nodeType":"VariableDeclaration","scope":185,"src":"7094:34:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":165,"name":"uint256","nodeType":"ElementaryTypeName","src":"7094:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":166,"nodeType":"ArrayTypeName","src":"7094:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"amountsInRaw","nameLocation":"7155:12:4","nodeType":"VariableDeclaration","scope":185,"src":"7138:29:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":168,"name":"uint256","nodeType":"ElementaryTypeName","src":"7138:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":169,"nodeType":"ArrayTypeName","src":"7138:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":172,"mutability":"mutable","name":"bptAmountOut","nameLocation":"7185:12:4","nodeType":"VariableDeclaration","scope":185,"src":"7177:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":171,"name":"uint256","nodeType":"ElementaryTypeName","src":"7177:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":175,"mutability":"mutable","name":"balancesScaled18","nameLocation":"7224:16:4","nodeType":"VariableDeclaration","scope":185,"src":"7207:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":173,"name":"uint256","nodeType":"ElementaryTypeName","src":"7207:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":174,"nodeType":"ArrayTypeName","src":"7207:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":177,"mutability":"mutable","name":"userData","nameLocation":"7263:8:4","nodeType":"VariableDeclaration","scope":185,"src":"7250:21:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":176,"name":"bytes","nodeType":"ElementaryTypeName","src":"7250:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7007:270:4"},"returnParameters":{"id":184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":180,"mutability":"mutable","name":"success","nameLocation":"7301:7:4","nodeType":"VariableDeclaration","scope":185,"src":"7296:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":179,"name":"bool","nodeType":"ElementaryTypeName","src":"7296:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":183,"mutability":"mutable","name":"hookAdjustedAmountsInRaw","nameLocation":"7327:24:4","nodeType":"VariableDeclaration","scope":185,"src":"7310:41:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":181,"name":"uint256","nodeType":"ElementaryTypeName","src":"7310:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":182,"nodeType":"ArrayTypeName","src":"7310:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"7295:57:4"},"scope":275,"src":"6979:374:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":186,"nodeType":"StructuredDocumentation","src":"7572:992:4","text":" @notice Hook to be executed before removing liquidity.\n @dev Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The type of remove liquidity operation (e.g., proportional, custom)\n @param maxBptAmountIn Maximum amount of input pool tokens\n @param minAmountsOutScaled18 Minimum output amounts, sorted in token registration order\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool wishes to proceed with settlement"},"functionSelector":"ba5f9f40","id":208,"implemented":false,"kind":"function","modifiers":[],"name":"onBeforeRemoveLiquidity","nameLocation":"8578:23:4","nodeType":"FunctionDefinition","parameters":{"id":204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":188,"mutability":"mutable","name":"router","nameLocation":"8619:6:4","nodeType":"VariableDeclaration","scope":208,"src":"8611:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":187,"name":"address","nodeType":"ElementaryTypeName","src":"8611:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":190,"mutability":"mutable","name":"pool","nameLocation":"8643:4:4","nodeType":"VariableDeclaration","scope":208,"src":"8635:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":189,"name":"address","nodeType":"ElementaryTypeName","src":"8635:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":193,"mutability":"mutable","name":"kind","nameLocation":"8677:4:4","nodeType":"VariableDeclaration","scope":208,"src":"8657:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2368","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":192,"nodeType":"UserDefinedTypeName","pathNode":{"id":191,"name":"RemoveLiquidityKind","nameLocations":["8657:19:4"],"nodeType":"IdentifierPath","referencedDeclaration":2368,"src":"8657:19:4"},"referencedDeclaration":2368,"src":"8657:19:4","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2368","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":195,"mutability":"mutable","name":"maxBptAmountIn","nameLocation":"8699:14:4","nodeType":"VariableDeclaration","scope":208,"src":"8691:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":194,"name":"uint256","nodeType":"ElementaryTypeName","src":"8691:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":198,"mutability":"mutable","name":"minAmountsOutScaled18","nameLocation":"8740:21:4","nodeType":"VariableDeclaration","scope":208,"src":"8723:38:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":196,"name":"uint256","nodeType":"ElementaryTypeName","src":"8723:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":197,"nodeType":"ArrayTypeName","src":"8723:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":201,"mutability":"mutable","name":"balancesScaled18","nameLocation":"8788:16:4","nodeType":"VariableDeclaration","scope":208,"src":"8771:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":199,"name":"uint256","nodeType":"ElementaryTypeName","src":"8771:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":200,"nodeType":"ArrayTypeName","src":"8771:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":203,"mutability":"mutable","name":"userData","nameLocation":"8827:8:4","nodeType":"VariableDeclaration","scope":208,"src":"8814:21:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":202,"name":"bytes","nodeType":"ElementaryTypeName","src":"8814:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8601:240:4"},"returnParameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":206,"mutability":"mutable","name":"success","nameLocation":"8865:7:4","nodeType":"VariableDeclaration","scope":208,"src":"8860:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":205,"name":"bool","nodeType":"ElementaryTypeName","src":"8860:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8859:14:4"},"scope":275,"src":"8569:305:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":209,"nodeType":"StructuredDocumentation","src":"8880:1276:4","text":" @notice Hook to be executed after removing liquidity.\n @dev Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore\n `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The type of remove liquidity operation (e.g., proportional, custom)\n @param bptAmountIn Amount of pool tokens to burn\n @param amountsOutScaled18 Scaled amount of tokens to receive, sorted in token registration order\n @param amountsOutRaw Actual amount of tokens to receive, sorted in token registration order\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Additional (optional) data provided by the user\n @return success True if the pool wishes to proceed with settlement\n @return hookAdjustedAmountsOutRaw New amountsOutRaw, potentially modified by the hook"},"functionSelector":"2754888d","id":237,"implemented":false,"kind":"function","modifiers":[],"name":"onAfterRemoveLiquidity","nameLocation":"10170:22:4","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":211,"mutability":"mutable","name":"router","nameLocation":"10210:6:4","nodeType":"VariableDeclaration","scope":237,"src":"10202:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":210,"name":"address","nodeType":"ElementaryTypeName","src":"10202:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":213,"mutability":"mutable","name":"pool","nameLocation":"10234:4:4","nodeType":"VariableDeclaration","scope":237,"src":"10226:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":212,"name":"address","nodeType":"ElementaryTypeName","src":"10226:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":216,"mutability":"mutable","name":"kind","nameLocation":"10268:4:4","nodeType":"VariableDeclaration","scope":237,"src":"10248:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2368","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":215,"nodeType":"UserDefinedTypeName","pathNode":{"id":214,"name":"RemoveLiquidityKind","nameLocations":["10248:19:4"],"nodeType":"IdentifierPath","referencedDeclaration":2368,"src":"10248:19:4"},"referencedDeclaration":2368,"src":"10248:19:4","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2368","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":218,"mutability":"mutable","name":"bptAmountIn","nameLocation":"10290:11:4","nodeType":"VariableDeclaration","scope":237,"src":"10282:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"10282:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":221,"mutability":"mutable","name":"amountsOutScaled18","nameLocation":"10328:18:4","nodeType":"VariableDeclaration","scope":237,"src":"10311:35:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":219,"name":"uint256","nodeType":"ElementaryTypeName","src":"10311:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":220,"nodeType":"ArrayTypeName","src":"10311:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":224,"mutability":"mutable","name":"amountsOutRaw","nameLocation":"10373:13:4","nodeType":"VariableDeclaration","scope":237,"src":"10356:30:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":222,"name":"uint256","nodeType":"ElementaryTypeName","src":"10356:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":223,"nodeType":"ArrayTypeName","src":"10356:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":227,"mutability":"mutable","name":"balancesScaled18","nameLocation":"10413:16:4","nodeType":"VariableDeclaration","scope":237,"src":"10396:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":225,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":226,"nodeType":"ArrayTypeName","src":"10396:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"userData","nameLocation":"10452:8:4","nodeType":"VariableDeclaration","scope":237,"src":"10439:21:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":228,"name":"bytes","nodeType":"ElementaryTypeName","src":"10439:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10192:274:4"},"returnParameters":{"id":236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":232,"mutability":"mutable","name":"success","nameLocation":"10490:7:4","nodeType":"VariableDeclaration","scope":237,"src":"10485:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":231,"name":"bool","nodeType":"ElementaryTypeName","src":"10485:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":235,"mutability":"mutable","name":"hookAdjustedAmountsOutRaw","nameLocation":"10516:25:4","nodeType":"VariableDeclaration","scope":237,"src":"10499:42:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":233,"name":"uint256","nodeType":"ElementaryTypeName","src":"10499:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":234,"nodeType":"ArrayTypeName","src":"10499:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10484:58:4"},"scope":275,"src":"10161:382:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":238,"nodeType":"StructuredDocumentation","src":"10753:556:4","text":" @notice Called before a swap to give the Pool an opportunity to perform actions.\n @dev Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the\n `onlyVault` modifier to guarantee this is only called by the Vault.\n @param params Swap parameters (see PoolSwapParams for struct definition)\n @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n @return success True if the pool wishes to proceed with settlement"},"functionSelector":"5211fa77","id":248,"implemented":false,"kind":"function","modifiers":[],"name":"onBeforeSwap","nameLocation":"11323:12:4","nodeType":"FunctionDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"params","nameLocation":"11360:6:4","nodeType":"VariableDeclaration","scope":248,"src":"11336:30:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2312_calldata_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":240,"nodeType":"UserDefinedTypeName","pathNode":{"id":239,"name":"PoolSwapParams","nameLocations":["11336:14:4"],"nodeType":"IdentifierPath","referencedDeclaration":2312,"src":"11336:14:4"},"referencedDeclaration":2312,"src":"11336:14:4","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2312_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"pool","nameLocation":"11376:4:4","nodeType":"VariableDeclaration","scope":248,"src":"11368:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":242,"name":"address","nodeType":"ElementaryTypeName","src":"11368:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11335:46:4"},"returnParameters":{"id":247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":246,"mutability":"mutable","name":"success","nameLocation":"11405:7:4","nodeType":"VariableDeclaration","scope":248,"src":"11400:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":245,"name":"bool","nodeType":"ElementaryTypeName","src":"11400:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11399:14:4"},"scope":275,"src":"11314:100:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"11420:671:4","text":" @notice Called after a swap to perform further actions once the balances have been updated by the swap.\n @dev Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore\n `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should\n use the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param params Swap parameters (see above for struct definition)\n @return success True if the pool wishes to proceed with settlement\n @return hookAdjustedAmountCalculatedRaw New amount calculated, potentially modified by the hook"},"functionSelector":"18b6eb55","id":259,"implemented":false,"kind":"function","modifiers":[],"name":"onAfterSwap","nameLocation":"12105:11:4","nodeType":"FunctionDefinition","parameters":{"id":253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"params","nameLocation":"12151:6:4","nodeType":"VariableDeclaration","scope":259,"src":"12126:31:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AfterSwapParams_$2341_calldata_ptr","typeString":"struct AfterSwapParams"},"typeName":{"id":251,"nodeType":"UserDefinedTypeName","pathNode":{"id":250,"name":"AfterSwapParams","nameLocations":["12126:15:4"],"nodeType":"IdentifierPath","referencedDeclaration":2341,"src":"12126:15:4"},"referencedDeclaration":2341,"src":"12126:15:4","typeDescriptions":{"typeIdentifier":"t_struct$_AfterSwapParams_$2341_storage_ptr","typeString":"struct AfterSwapParams"}},"visibility":"internal"}],"src":"12116:47:4"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":255,"mutability":"mutable","name":"success","nameLocation":"12187:7:4","nodeType":"VariableDeclaration","scope":259,"src":"12182:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":254,"name":"bool","nodeType":"ElementaryTypeName","src":"12182:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":257,"mutability":"mutable","name":"hookAdjustedAmountCalculatedRaw","nameLocation":"12204:31:4","nodeType":"VariableDeclaration","scope":259,"src":"12196:39:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":256,"name":"uint256","nodeType":"ElementaryTypeName","src":"12196:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12181:55:4"},"scope":275,"src":"12096:141:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"12243:795:4","text":" @notice Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees.\n @dev Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param params Swap parameters (see PoolSwapParams for struct definition)\n @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n @param staticSwapFeePercentage 18-decimal FP value of the static swap fee percentage, for reference\n @return success True if the pool wishes to proceed with settlement\n @return dynamicSwapFeePercentage Value of the swap fee percentage, as an 18-decimal FP value"},"functionSelector":"a0e8f5ac","id":274,"implemented":false,"kind":"function","modifiers":[],"name":"onComputeDynamicSwapFeePercentage","nameLocation":"13052:33:4","nodeType":"FunctionDefinition","parameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"params","nameLocation":"13119:6:4","nodeType":"VariableDeclaration","scope":274,"src":"13095:30:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2312_calldata_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":262,"nodeType":"UserDefinedTypeName","pathNode":{"id":261,"name":"PoolSwapParams","nameLocations":["13095:14:4"],"nodeType":"IdentifierPath","referencedDeclaration":2312,"src":"13095:14:4"},"referencedDeclaration":2312,"src":"13095:14:4","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2312_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"},{"constant":false,"id":265,"mutability":"mutable","name":"pool","nameLocation":"13143:4:4","nodeType":"VariableDeclaration","scope":274,"src":"13135:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":264,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":267,"mutability":"mutable","name":"staticSwapFeePercentage","nameLocation":"13165:23:4","nodeType":"VariableDeclaration","scope":274,"src":"13157:31:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":266,"name":"uint256","nodeType":"ElementaryTypeName","src":"13157:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13085:109:4"},"returnParameters":{"id":273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":270,"mutability":"mutable","name":"success","nameLocation":"13223:7:4","nodeType":"VariableDeclaration","scope":274,"src":"13218:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":269,"name":"bool","nodeType":"ElementaryTypeName","src":"13218:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":272,"mutability":"mutable","name":"dynamicSwapFeePercentage","nameLocation":"13240:24:4","nodeType":"VariableDeclaration","scope":274,"src":"13232:32:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":271,"name":"uint256","nodeType":"ElementaryTypeName","src":"13232:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13217:48:4"},"scope":275,"src":"13043:223:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":276,"src":"975:12293:4","usedErrors":[],"usedEvents":[]}],"src":"46:13223:4"},"id":4},"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","exportedSymbols":{"IERC20":[6654],"IProtocolFeeController":[613],"IVault":[651]},"id":614,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":277,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":279,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":614,"sourceUnit":6655,"src":"72:72:5","symbolAliases":[{"foreign":{"id":278,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6654,"src":"81:6:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"./IVault.sol","id":281,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":614,"sourceUnit":652,"src":"146:38:5","symbolAliases":[{"foreign":{"id":280,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"155:6:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IProtocolFeeController","contractDependencies":[],"contractKind":"interface","documentation":{"id":282,"nodeType":"StructuredDocumentation","src":"186:80:5","text":"@notice Contract that handles protocol and pool creator fees for the Vault."},"fullyImplemented":false,"id":613,"linearizedBaseContracts":[613],"name":"IProtocolFeeController","nameLocation":"276:22:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":283,"nodeType":"StructuredDocumentation","src":"305:157:5","text":" @notice Emitted when the protocol swap fee percentage is updated.\n @param swapFeePercentage The updated protocol swap fee percentage"},"eventSelector":"bf5ac0fc89bbf8819be79f280146b65ea2af2a9705cd9cfe0c9d93f6e87f307d","id":287,"name":"GlobalProtocolSwapFeePercentageChanged","nameLocation":"473:38:5","nodeType":"EventDefinition","parameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"520:17:5","nodeType":"VariableDeclaration","scope":287,"src":"512:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":284,"name":"uint256","nodeType":"ElementaryTypeName","src":"512:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"511:27:5"},"src":"467:72:5"},{"anonymous":false,"documentation":{"id":288,"nodeType":"StructuredDocumentation","src":"545:160:5","text":" @notice Emitted when the protocol yield fee percentage is updated.\n @param yieldFeePercentage The updated protocol yield fee percentage"},"eventSelector":"48c5c3ccec54c4e0ea08d83d838fa9bb725eb0b52c591cb00bd6e63bca8c44f6","id":292,"name":"GlobalProtocolYieldFeePercentageChanged","nameLocation":"716:39:5","nodeType":"EventDefinition","parameters":{"id":291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":290,"indexed":false,"mutability":"mutable","name":"yieldFeePercentage","nameLocation":"764:18:5","nodeType":"VariableDeclaration","scope":292,"src":"756:26:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":289,"name":"uint256","nodeType":"ElementaryTypeName","src":"756:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"755:28:5"},"src":"710:74:5"},{"anonymous":false,"documentation":{"id":293,"nodeType":"StructuredDocumentation","src":"790:245:5","text":" @notice Emitted when the protocol swap fee percentage is updated for a specific pool.\n @param pool The pool whose protocol swap fee will be changed\n @param swapFeePercentage The updated protocol swap fee percentage"},"eventSelector":"97cff4b6e6d80e307faab8b730d9f69264e860f2e0e10cfb8cdaf8a2f44e839e","id":299,"name":"ProtocolSwapFeePercentageChanged","nameLocation":"1046:32:5","nodeType":"EventDefinition","parameters":{"id":298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1095:4:5","nodeType":"VariableDeclaration","scope":299,"src":"1079:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":294,"name":"address","nodeType":"ElementaryTypeName","src":"1079:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":297,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"1109:17:5","nodeType":"VariableDeclaration","scope":299,"src":"1101:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":296,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1078:49:5"},"src":"1040:88:5"},{"anonymous":false,"documentation":{"id":300,"nodeType":"StructuredDocumentation","src":"1134:249:5","text":" @notice Emitted when the protocol yield fee percentage is updated for a specific pool.\n @param pool The pool whose protocol yield fee will be changed\n @param yieldFeePercentage The updated protocol yield fee percentage"},"eventSelector":"af47449d1c3597ccc9f5ec3acad03cef57aa90a719000441b320687087948efd","id":306,"name":"ProtocolYieldFeePercentageChanged","nameLocation":"1394:33:5","nodeType":"EventDefinition","parameters":{"id":305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1444:4:5","nodeType":"VariableDeclaration","scope":306,"src":"1428:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":301,"name":"address","nodeType":"ElementaryTypeName","src":"1428:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":304,"indexed":false,"mutability":"mutable","name":"yieldFeePercentage","nameLocation":"1458:18:5","nodeType":"VariableDeclaration","scope":306,"src":"1450:26:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":303,"name":"uint256","nodeType":"ElementaryTypeName","src":"1450:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1427:50:5"},"src":"1388:90:5"},{"anonymous":false,"documentation":{"id":307,"nodeType":"StructuredDocumentation","src":"1484:267:5","text":" @notice Emitted when the pool creator swap fee percentage of a pool is updated.\n @param pool The pool whose pool creator swap fee will be changed\n @param poolCreatorSwapFeePercentage The new pool creator swap fee percentage for the pool"},"eventSelector":"b7cf36369623c01ed7b2eafc4025224e924a2836d5fb49428a0f65417586bf5c","id":313,"name":"PoolCreatorSwapFeePercentageChanged","nameLocation":"1762:35:5","nodeType":"EventDefinition","parameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":309,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1814:4:5","nodeType":"VariableDeclaration","scope":313,"src":"1798:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"1798:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":311,"indexed":false,"mutability":"mutable","name":"poolCreatorSwapFeePercentage","nameLocation":"1828:28:5","nodeType":"VariableDeclaration","scope":313,"src":"1820:36:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":310,"name":"uint256","nodeType":"ElementaryTypeName","src":"1820:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1797:60:5"},"src":"1756:102:5"},{"anonymous":false,"documentation":{"id":314,"nodeType":"StructuredDocumentation","src":"1864:271:5","text":" @notice Emitted when the pool creator yield fee percentage of a pool is updated.\n @param pool The pool whose pool creator yield fee will be changed\n @param poolCreatorYieldFeePercentage The new pool creator yield fee percentage for the pool"},"eventSelector":"47f70ddbc624c299cef7841aaea0a86b677c800203e953104e958c9ec9bdab34","id":320,"name":"PoolCreatorYieldFeePercentageChanged","nameLocation":"2146:36:5","nodeType":"EventDefinition","parameters":{"id":319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":316,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"2199:4:5","nodeType":"VariableDeclaration","scope":320,"src":"2183:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":315,"name":"address","nodeType":"ElementaryTypeName","src":"2183:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":318,"indexed":false,"mutability":"mutable","name":"poolCreatorYieldFeePercentage","nameLocation":"2213:29:5","nodeType":"VariableDeclaration","scope":320,"src":"2205:37:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":317,"name":"uint256","nodeType":"ElementaryTypeName","src":"2205:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:61:5"},"src":"2140:104:5"},{"anonymous":false,"documentation":{"id":321,"nodeType":"StructuredDocumentation","src":"2250:560:5","text":" @notice Logs the collection of protocol swap fees in a specific token and amount.\n @dev Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs\n in the Vault, but fee collection happens in the ProtocolFeeController, the swap fees reported here may encompass\n multiple operations.\n @param pool The pool on which the swap fee was charged\n @param token The token in which the swap fee was charged\n @param amount The amount of the token collected in fees"},"eventSelector":"ae7ebad9fc3d1d17965f063fa520d393595e2ef6c8e22ae8413b60900444e19f","id":330,"name":"ProtocolSwapFeeCollected","nameLocation":"2821:24:5","nodeType":"EventDefinition","parameters":{"id":329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"2862:4:5","nodeType":"VariableDeclaration","scope":330,"src":"2846:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":322,"name":"address","nodeType":"ElementaryTypeName","src":"2846:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":326,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"2883:5:5","nodeType":"VariableDeclaration","scope":330,"src":"2868:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":325,"nodeType":"UserDefinedTypeName","pathNode":{"id":324,"name":"IERC20","nameLocations":["2868:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"2868:6:5"},"referencedDeclaration":6654,"src":"2868:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":328,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2898:6:5","nodeType":"VariableDeclaration","scope":330,"src":"2890:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":327,"name":"uint256","nodeType":"ElementaryTypeName","src":"2890:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2845:60:5"},"src":"2815:91:5"},{"anonymous":false,"documentation":{"id":331,"nodeType":"StructuredDocumentation","src":"2912:564:5","text":" @notice Logs the collection of protocol yield fees in a specific token and amount.\n @dev Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs\n in the Vault, but fee collection happens in the ProtocolFeeController, the yield fees reported here may encompass\n multiple operations.\n @param pool The pool on which the yield fee was charged\n @param token The token in which the yield fee was charged\n @param amount The amount of the token collected in fees"},"eventSelector":"e505e41b0d437b47350a9990142ccf38acb11ffa0e5af8f973b9e172f3d5d5e2","id":340,"name":"ProtocolYieldFeeCollected","nameLocation":"3487:25:5","nodeType":"EventDefinition","parameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":333,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"3529:4:5","nodeType":"VariableDeclaration","scope":340,"src":"3513:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":332,"name":"address","nodeType":"ElementaryTypeName","src":"3513:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":336,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3550:5:5","nodeType":"VariableDeclaration","scope":340,"src":"3535:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":335,"nodeType":"UserDefinedTypeName","pathNode":{"id":334,"name":"IERC20","nameLocations":["3535:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"3535:6:5"},"referencedDeclaration":6654,"src":"3535:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":338,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3565:6:5","nodeType":"VariableDeclaration","scope":340,"src":"3557:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":337,"name":"uint256","nodeType":"ElementaryTypeName","src":"3557:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3512:60:5"},"src":"3481:92:5"},{"anonymous":false,"documentation":{"id":341,"nodeType":"StructuredDocumentation","src":"3579:333:5","text":" @notice Logs the withdrawal of protocol fees in a specific token and amount.\n @param pool The pool from which protocol fees are being withdrawn\n @param token The token being withdrawn\n @param recipient The recipient of the funds\n @param amount The amount of the fee token that was withdrawn"},"eventSelector":"1c2887fcb98f75e66bb9a36311f2d3d22fb204e6362106f30e9df7eaf63131b5","id":352,"name":"ProtocolFeesWithdrawn","nameLocation":"3923:21:5","nodeType":"EventDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"3961:4:5","nodeType":"VariableDeclaration","scope":352,"src":"3945:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":342,"name":"address","nodeType":"ElementaryTypeName","src":"3945:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":346,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3982:5:5","nodeType":"VariableDeclaration","scope":352,"src":"3967:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":345,"nodeType":"UserDefinedTypeName","pathNode":{"id":344,"name":"IERC20","nameLocations":["3967:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"3967:6:5"},"referencedDeclaration":6654,"src":"3967:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":348,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4005:9:5","nodeType":"VariableDeclaration","scope":352,"src":"3989:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"3989:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":350,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"4024:6:5","nodeType":"VariableDeclaration","scope":352,"src":"4016:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":349,"name":"uint256","nodeType":"ElementaryTypeName","src":"4016:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3944:87:5"},"src":"3917:115:5"},{"anonymous":false,"documentation":{"id":353,"nodeType":"StructuredDocumentation","src":"4038:398:5","text":" @notice Logs the withdrawal of pool creator fees in a specific token and amount.\n @param pool The pool from which pool creator fees are being withdrawn\n @param token The token being withdrawn\n @param recipient The recipient of the funds (the pool creator if permissionless, or another account)\n @param amount The amount of the fee token that was withdrawn"},"eventSelector":"938f3a3a03ee425ccc0f8010b0468938cbafd3750fa43bbdf09c6f75e97e51f9","id":364,"name":"PoolCreatorFeesWithdrawn","nameLocation":"4447:24:5","nodeType":"EventDefinition","parameters":{"id":363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":355,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"4497:4:5","nodeType":"VariableDeclaration","scope":364,"src":"4481:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":354,"name":"address","nodeType":"ElementaryTypeName","src":"4481:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":358,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"4526:5:5","nodeType":"VariableDeclaration","scope":364,"src":"4511:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":357,"nodeType":"UserDefinedTypeName","pathNode":{"id":356,"name":"IERC20","nameLocations":["4511:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"4511:6:5"},"referencedDeclaration":6654,"src":"4511:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":360,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4557:9:5","nodeType":"VariableDeclaration","scope":364,"src":"4541:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":359,"name":"address","nodeType":"ElementaryTypeName","src":"4541:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":362,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"4584:6:5","nodeType":"VariableDeclaration","scope":364,"src":"4576:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":361,"name":"uint256","nodeType":"ElementaryTypeName","src":"4576:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4471:125:5"},"src":"4441:156:5"},{"anonymous":false,"documentation":{"id":365,"nodeType":"StructuredDocumentation","src":"4603:529:5","text":" @notice Emitted on pool registration with the initial aggregate swap fee percentage, for off-chain processes.\n @dev If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will\n equal the current global swap fee percentage.\n @param pool The pool being registered\n @param aggregateSwapFeePercentage The initial aggregate swap fee percentage\n @param isProtocolFeeExempt True if the pool is exempt from taking protocol fees initially"},"eventSelector":"a34ad86562f9716c2f1e723934cc63f44a9b4695cb8535c30dd8308d03a78564","id":373,"name":"InitialPoolAggregateSwapFeePercentage","nameLocation":"5143:37:5","nodeType":"EventDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":367,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"5206:4:5","nodeType":"VariableDeclaration","scope":373,"src":"5190:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":366,"name":"address","nodeType":"ElementaryTypeName","src":"5190:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":369,"indexed":false,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"5228:26:5","nodeType":"VariableDeclaration","scope":373,"src":"5220:34:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":368,"name":"uint256","nodeType":"ElementaryTypeName","src":"5220:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":371,"indexed":false,"mutability":"mutable","name":"isProtocolFeeExempt","nameLocation":"5269:19:5","nodeType":"VariableDeclaration","scope":373,"src":"5264:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":370,"name":"bool","nodeType":"ElementaryTypeName","src":"5264:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5180:114:5"},"src":"5137:158:5"},{"anonymous":false,"documentation":{"id":374,"nodeType":"StructuredDocumentation","src":"5301:533:5","text":" @notice Emitted on pool registration with the initial aggregate yield fee percentage, for off-chain processes.\n @dev If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will\n equal the current global yield fee percentage.\n @param pool The pool being registered\n @param aggregateYieldFeePercentage The initial aggregate yield fee percentage\n @param isProtocolFeeExempt True if the pool is exempt from taking protocol fees initially"},"eventSelector":"ce1d009285405b74cf77294916c17664de2c84eef81225c71f265f823b358bcb","id":382,"name":"InitialPoolAggregateYieldFeePercentage","nameLocation":"5845:38:5","nodeType":"EventDefinition","parameters":{"id":381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"5909:4:5","nodeType":"VariableDeclaration","scope":382,"src":"5893:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":375,"name":"address","nodeType":"ElementaryTypeName","src":"5893:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":378,"indexed":false,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"5931:27:5","nodeType":"VariableDeclaration","scope":382,"src":"5923:35:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":377,"name":"uint256","nodeType":"ElementaryTypeName","src":"5923:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":380,"indexed":false,"mutability":"mutable","name":"isProtocolFeeExempt","nameLocation":"5973:19:5","nodeType":"VariableDeclaration","scope":382,"src":"5968:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":379,"name":"bool","nodeType":"ElementaryTypeName","src":"5968:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5883:115:5"},"src":"5839:160:5"},{"anonymous":false,"documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"6005:738:5","text":" @notice Emitted as a convenience during pool registration, more focused than the Vault's `PoolRegistered` event.\n @dev The `PoolRegistered` event includes the `roleAccounts` field, which also records the pool creator, but this\n simpler event is also provided for convenience. Though `InitialPoolAggregateSwapFeePercentage` and its yield fee\n counterpart also include the protocol fee exemption flag, we might as well include it here as well.\n @param pool The address of the pool being registered\n @param poolCreator The address of the pool creator (non-zero, or the event would not be emitted)\n @param  protocolFeeExempt True if the pool is initially exempt from protocol fees"},"eventSelector":"d9725c347996d9a5d6001b5f7c2a2515d365258012fceff4f49e84310ed07912","id":391,"name":"PoolRegisteredWithFeeController","nameLocation":"6754:31:5","nodeType":"EventDefinition","parameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":385,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"6802:4:5","nodeType":"VariableDeclaration","scope":391,"src":"6786:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":384,"name":"address","nodeType":"ElementaryTypeName","src":"6786:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":387,"indexed":true,"mutability":"mutable","name":"poolCreator","nameLocation":"6824:11:5","nodeType":"VariableDeclaration","scope":391,"src":"6808:27:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":386,"name":"address","nodeType":"ElementaryTypeName","src":"6808:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":389,"indexed":false,"mutability":"mutable","name":"protocolFeeExempt","nameLocation":"6842:17:5","nodeType":"VariableDeclaration","scope":391,"src":"6837:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":388,"name":"bool","nodeType":"ElementaryTypeName","src":"6837:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6785:75:5"},"src":"6748:113:5"},{"documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"6867:219:5","text":" @notice Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\n @dev Note that this is checked for both the global and pool-specific protocol swap fee percentages."},"errorSelector":"7e6eb7fb","id":394,"name":"ProtocolSwapFeePercentageTooHigh","nameLocation":"7097:32:5","nodeType":"ErrorDefinition","parameters":{"id":393,"nodeType":"ParameterList","parameters":[],"src":"7129:2:5"},"src":"7091:41:5"},{"documentation":{"id":395,"nodeType":"StructuredDocumentation","src":"7138:221:5","text":" @notice Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\n @dev Note that this is checked for both the global and pool-specific protocol yield fee percentages."},"errorSelector":"a7849e8e","id":397,"name":"ProtocolYieldFeePercentageTooHigh","nameLocation":"7370:33:5","nodeType":"ErrorDefinition","parameters":{"id":396,"nodeType":"ParameterList","parameters":[],"src":"7403:2:5"},"src":"7364:42:5"},{"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"7412:156:5","text":" @notice Error raised if there is no pool creator on a withdrawal attempt from the given pool.\n @param pool The pool with no creator"},"errorSelector":"8bcbf353","id":402,"name":"PoolCreatorNotRegistered","nameLocation":"7579:24:5","nodeType":"ErrorDefinition","parameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"pool","nameLocation":"7612:4:5","nodeType":"VariableDeclaration","scope":402,"src":"7604:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":399,"name":"address","nodeType":"ElementaryTypeName","src":"7604:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7603:14:5"},"src":"7573:45:5"},{"documentation":{"id":403,"nodeType":"StructuredDocumentation","src":"7624:236:5","text":" @notice Error raised if the wrong account attempts to withdraw pool creator fees.\n @param caller The account attempting to withdraw pool creator fees\n @param pool The pool the caller tried to withdraw from"},"errorSelector":"fbecdbf4","id":409,"name":"CallerIsNotPoolCreator","nameLocation":"7871:22:5","nodeType":"ErrorDefinition","parameters":{"id":408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":405,"mutability":"mutable","name":"caller","nameLocation":"7902:6:5","nodeType":"VariableDeclaration","scope":409,"src":"7894:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":404,"name":"address","nodeType":"ElementaryTypeName","src":"7894:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":407,"mutability":"mutable","name":"pool","nameLocation":"7918:4:5","nodeType":"VariableDeclaration","scope":409,"src":"7910:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"7910:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7893:30:5"},"src":"7865:59:5"},{"documentation":{"id":410,"nodeType":"StructuredDocumentation","src":"7930:110:5","text":"@notice Error raised when the pool creator swap or yield fee percentage exceeds the maximum allowed value."},"errorSelector":"0370da74","id":412,"name":"PoolCreatorFeePercentageTooHigh","nameLocation":"8051:31:5","nodeType":"ErrorDefinition","parameters":{"id":411,"nodeType":"ParameterList","parameters":[],"src":"8082:2:5"},"src":"8045:40:5"},{"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"8091:109:5","text":" @notice Get the address of the main Vault contract.\n @return vault The Vault address"},"functionSelector":"fbfa77cf","id":419,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"8214:5:5","nodeType":"FunctionDefinition","parameters":{"id":414,"nodeType":"ParameterList","parameters":[],"src":"8219:2:5"},"returnParameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":419,"src":"8245:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":416,"nodeType":"UserDefinedTypeName","pathNode":{"id":415,"name":"IVault","nameLocations":["8245:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"8245:6:5"},"referencedDeclaration":651,"src":"8245:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"}],"src":"8244:8:5"},"scope":613,"src":"8205:48:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":420,"nodeType":"StructuredDocumentation","src":"8259:131:5","text":" @notice Collects aggregate fees from the Vault for a given pool.\n @param pool The pool with aggregate fees"},"functionSelector":"8f4ab9ca","id":425,"implemented":false,"kind":"function","modifiers":[],"name":"collectAggregateFees","nameLocation":"8404:20:5","nodeType":"FunctionDefinition","parameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":422,"mutability":"mutable","name":"pool","nameLocation":"8433:4:5","nodeType":"VariableDeclaration","scope":425,"src":"8425:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":421,"name":"address","nodeType":"ElementaryTypeName","src":"8425:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8424:14:5"},"returnParameters":{"id":424,"nodeType":"ParameterList","parameters":[],"src":"8447:0:5"},"scope":613,"src":"8395:53:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":426,"nodeType":"StructuredDocumentation","src":"8454:156:5","text":" @notice Getter for the current global protocol swap fee.\n @return protocolSwapFeePercentage The global protocol swap fee percentage"},"functionSelector":"7869ee18","id":431,"implemented":false,"kind":"function","modifiers":[],"name":"getGlobalProtocolSwapFeePercentage","nameLocation":"8624:34:5","nodeType":"FunctionDefinition","parameters":{"id":427,"nodeType":"ParameterList","parameters":[],"src":"8658:2:5"},"returnParameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":429,"mutability":"mutable","name":"protocolSwapFeePercentage","nameLocation":"8692:25:5","nodeType":"VariableDeclaration","scope":431,"src":"8684:33:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":428,"name":"uint256","nodeType":"ElementaryTypeName","src":"8684:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8683:35:5"},"scope":613,"src":"8615:104:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":432,"nodeType":"StructuredDocumentation","src":"8725:159:5","text":" @notice Getter for the current global protocol yield fee.\n @return protocolYieldFeePercentage The global protocol yield fee percentage"},"functionSelector":"55fb76af","id":437,"implemented":false,"kind":"function","modifiers":[],"name":"getGlobalProtocolYieldFeePercentage","nameLocation":"8898:35:5","nodeType":"FunctionDefinition","parameters":{"id":433,"nodeType":"ParameterList","parameters":[],"src":"8933:2:5"},"returnParameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"protocolYieldFeePercentage","nameLocation":"8967:26:5","nodeType":"VariableDeclaration","scope":437,"src":"8959:34:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":434,"name":"uint256","nodeType":"ElementaryTypeName","src":"8959:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8958:36:5"},"scope":613,"src":"8889:106:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":438,"nodeType":"StructuredDocumentation","src":"9001:207:5","text":" @notice Getter for pool registration flag.\n @param pool The address of the pool\n @return isRegistered True if the pool configuration has been set (e.g., through `registerPool`)"},"functionSelector":"c673bdaf","id":445,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolRegistered","nameLocation":"9222:16:5","nodeType":"FunctionDefinition","parameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":440,"mutability":"mutable","name":"pool","nameLocation":"9247:4:5","nodeType":"VariableDeclaration","scope":445,"src":"9239:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":439,"name":"address","nodeType":"ElementaryTypeName","src":"9239:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9238:14:5"},"returnParameters":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":445,"src":"9276:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":442,"name":"bool","nodeType":"ElementaryTypeName","src":"9276:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9275:6:5"},"scope":613,"src":"9213:69:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":446,"nodeType":"StructuredDocumentation","src":"9288:292:5","text":" @notice Getter for the current protocol swap fee for a given pool.\n @param pool The address of the pool\n @return protocolSwapFeePercentage The protocol swap fee percentage for the given pool\n @return isOverride True if the protocol fee has been overridden"},"functionSelector":"5c15a0b4","id":455,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolProtocolSwapFeeInfo","nameLocation":"9594:26:5","nodeType":"FunctionDefinition","parameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":448,"mutability":"mutable","name":"pool","nameLocation":"9638:4:5","nodeType":"VariableDeclaration","scope":455,"src":"9630:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":447,"name":"address","nodeType":"ElementaryTypeName","src":"9630:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9620:28:5"},"returnParameters":{"id":454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"protocolSwapFeePercentage","nameLocation":"9680:25:5","nodeType":"VariableDeclaration","scope":455,"src":"9672:33:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":450,"name":"uint256","nodeType":"ElementaryTypeName","src":"9672:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":453,"mutability":"mutable","name":"isOverride","nameLocation":"9712:10:5","nodeType":"VariableDeclaration","scope":455,"src":"9707:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":452,"name":"bool","nodeType":"ElementaryTypeName","src":"9707:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9671:52:5"},"scope":613,"src":"9585:139:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":456,"nodeType":"StructuredDocumentation","src":"9730:295:5","text":" @notice Getter for the current protocol yield fee for a given pool.\n @param pool The address of the pool\n @return protocolYieldFeePercentage The protocol yield fee percentage for the given pool\n @return isOverride True if the protocol fee has been overridden"},"functionSelector":"7a2b97dc","id":465,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolProtocolYieldFeeInfo","nameLocation":"10039:27:5","nodeType":"FunctionDefinition","parameters":{"id":459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":458,"mutability":"mutable","name":"pool","nameLocation":"10084:4:5","nodeType":"VariableDeclaration","scope":465,"src":"10076:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":457,"name":"address","nodeType":"ElementaryTypeName","src":"10076:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10066:28:5"},"returnParameters":{"id":464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"protocolYieldFeePercentage","nameLocation":"10126:26:5","nodeType":"VariableDeclaration","scope":465,"src":"10118:34:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":460,"name":"uint256","nodeType":"ElementaryTypeName","src":"10118:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":463,"mutability":"mutable","name":"isOverride","nameLocation":"10159:10:5","nodeType":"VariableDeclaration","scope":465,"src":"10154:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":462,"name":"bool","nodeType":"ElementaryTypeName","src":"10154:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10117:53:5"},"scope":613,"src":"10030:141:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":466,"nodeType":"StructuredDocumentation","src":"10177:249:5","text":" @notice Getter for the current pool creator swap fee percentage for a given pool.\n @param pool The address of the pool\n @return poolCreatorSwapFeePercentage The pool creator swap fee component of the aggregate swap fee"},"functionSelector":"0b8e059b","id":473,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolCreatorSwapFeePercentage","nameLocation":"10440:31:5","nodeType":"FunctionDefinition","parameters":{"id":469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":468,"mutability":"mutable","name":"pool","nameLocation":"10480:4:5","nodeType":"VariableDeclaration","scope":473,"src":"10472:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":467,"name":"address","nodeType":"ElementaryTypeName","src":"10472:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10471:14:5"},"returnParameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":473,"src":"10509:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":470,"name":"uint256","nodeType":"ElementaryTypeName","src":"10509:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10508:9:5"},"scope":613,"src":"10431:87:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":474,"nodeType":"StructuredDocumentation","src":"10524:252:5","text":" @notice Getter for the current pool creator yield fee percentage for a given pool.\n @param pool The address of the pool\n @return poolCreatorSwapFeePercentage The pool creator yield fee component of the aggregate yield fee"},"functionSelector":"0252aab5","id":481,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolCreatorYieldFeePercentage","nameLocation":"10790:32:5","nodeType":"FunctionDefinition","parameters":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":476,"mutability":"mutable","name":"pool","nameLocation":"10831:4:5","nodeType":"VariableDeclaration","scope":481,"src":"10823:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":475,"name":"address","nodeType":"ElementaryTypeName","src":"10823:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10822:14:5"},"returnParameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":481,"src":"10860:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":478,"name":"uint256","nodeType":"ElementaryTypeName","src":"10860:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10859:9:5"},"scope":613,"src":"10781:88:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":482,"nodeType":"StructuredDocumentation","src":"10875:344:5","text":" @notice Returns the amount of each pool token allocated to the protocol for withdrawal.\n @dev Includes both swap and yield fees.\n @param pool The address of the pool on which fees were collected\n @return feeAmounts The total amounts of each token available for withdrawal, sorted in token registration order"},"functionSelector":"8df44c54","id":490,"implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeeAmounts","nameLocation":"11233:21:5","nodeType":"FunctionDefinition","parameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"mutability":"mutable","name":"pool","nameLocation":"11263:4:5","nodeType":"VariableDeclaration","scope":490,"src":"11255:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":483,"name":"address","nodeType":"ElementaryTypeName","src":"11255:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11254:14:5"},"returnParameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"mutability":"mutable","name":"feeAmounts","nameLocation":"11309:10:5","nodeType":"VariableDeclaration","scope":490,"src":"11292:27:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":486,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":487,"nodeType":"ArrayTypeName","src":"11292:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11291:29:5"},"scope":613,"src":"11224:97:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":491,"nodeType":"StructuredDocumentation","src":"11327:348:5","text":" @notice Returns the amount of each pool token allocated to the pool creator for withdrawal.\n @dev Includes both swap and yield fees.\n @param pool The address of the pool on which fees were collected\n @return feeAmounts The total amounts of each token available for withdrawal, sorted in token registration order"},"functionSelector":"9e95f3fd","id":499,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolCreatorFeeAmounts","nameLocation":"11689:24:5","nodeType":"FunctionDefinition","parameters":{"id":494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":493,"mutability":"mutable","name":"pool","nameLocation":"11722:4:5","nodeType":"VariableDeclaration","scope":499,"src":"11714:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"11714:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11713:14:5"},"returnParameters":{"id":498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":497,"mutability":"mutable","name":"feeAmounts","nameLocation":"11768:10:5","nodeType":"VariableDeclaration","scope":499,"src":"11751:27:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":495,"name":"uint256","nodeType":"ElementaryTypeName","src":"11751:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":496,"nodeType":"ArrayTypeName","src":"11751:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11750:29:5"},"scope":613,"src":"11680:100:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":500,"nodeType":"StructuredDocumentation","src":"11786:1445:5","text":" @notice Returns a calculated aggregate percentage from protocol and pool creator fee percentages.\n @dev Not tied to any particular pool; this just performs the low-level \"additive fee\" calculation. Note that\n pool creator fees are calculated based on creatorAndLpFees, and not in totalFees. Since aggregate fees are\n stored in the Vault with 24-bit precision, this will truncate any values that require greater precision.\n It is expected that pool creators will negotiate with the DAO and agree on reasonable values for these fee\n components, but the truncation ensures it will not revert for any valid set of fee percentages.\n See example below:\n tokenOutAmount = 10000; poolSwapFeePct = 10%; protocolFeePct = 40%; creatorFeePct = 60%\n totalFees = tokenOutAmount * poolSwapFeePct = 10000 * 10% = 1000\n protocolFees = totalFees * protocolFeePct = 1000 * 40% = 400\n creatorAndLpFees = totalFees - protocolFees = 1000 - 400 = 600\n creatorFees = creatorAndLpFees * creatorFeePct = 600 * 60% = 360\n lpFees (will stay in the pool) = creatorAndLpFees - creatorFees = 600 - 360 = 240\n @param protocolFeePercentage The protocol portion of the aggregate fee percentage\n @param poolCreatorFeePercentage The pool creator portion of the aggregate fee percentage\n @return aggregateFeePercentage The computed aggregate percentage"},"functionSelector":"0ddd60c6","id":509,"implemented":false,"kind":"function","modifiers":[],"name":"computeAggregateFeePercentage","nameLocation":"13245:29:5","nodeType":"FunctionDefinition","parameters":{"id":505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":502,"mutability":"mutable","name":"protocolFeePercentage","nameLocation":"13292:21:5","nodeType":"VariableDeclaration","scope":509,"src":"13284:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":501,"name":"uint256","nodeType":"ElementaryTypeName","src":"13284:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":504,"mutability":"mutable","name":"poolCreatorFeePercentage","nameLocation":"13331:24:5","nodeType":"VariableDeclaration","scope":509,"src":"13323:32:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":503,"name":"uint256","nodeType":"ElementaryTypeName","src":"13323:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13274:87:5"},"returnParameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":507,"mutability":"mutable","name":"aggregateFeePercentage","nameLocation":"13393:22:5","nodeType":"VariableDeclaration","scope":509,"src":"13385:30:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":506,"name":"uint256","nodeType":"ElementaryTypeName","src":"13385:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13384:32:5"},"scope":613,"src":"13236:181:5","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":510,"nodeType":"StructuredDocumentation","src":"13423:398:5","text":" @notice Override the protocol swap fee percentage for a specific pool.\n @dev This is a permissionless call, and will set the pool's fee to the current global fee, if it is different\n from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\n @param pool The pool for which we are setting the protocol swap fee"},"functionSelector":"71ecc8fb","id":515,"implemented":false,"kind":"function","modifiers":[],"name":"updateProtocolSwapFeePercentage","nameLocation":"13835:31:5","nodeType":"FunctionDefinition","parameters":{"id":513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":512,"mutability":"mutable","name":"pool","nameLocation":"13875:4:5","nodeType":"VariableDeclaration","scope":515,"src":"13867:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":511,"name":"address","nodeType":"ElementaryTypeName","src":"13867:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13866:14:5"},"returnParameters":{"id":514,"nodeType":"ParameterList","parameters":[],"src":"13889:0:5"},"scope":613,"src":"13826:64:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"13896:400:5","text":" @notice Override the protocol yield fee percentage for a specific pool.\n @dev This is a permissionless call, and will set the pool's fee to the current global fee, if it is different\n from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\n @param pool The pool for which we are setting the protocol yield fee"},"functionSelector":"71447ea8","id":521,"implemented":false,"kind":"function","modifiers":[],"name":"updateProtocolYieldFeePercentage","nameLocation":"14310:32:5","nodeType":"FunctionDefinition","parameters":{"id":519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":518,"mutability":"mutable","name":"pool","nameLocation":"14351:4:5","nodeType":"VariableDeclaration","scope":521,"src":"14343:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":517,"name":"address","nodeType":"ElementaryTypeName","src":"14343:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14342:14:5"},"returnParameters":{"id":520,"nodeType":"ParameterList","parameters":[],"src":"14365:0:5"},"scope":613,"src":"14301:65:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":522,"nodeType":"StructuredDocumentation","src":"14590:826:5","text":" @notice Add pool-specific entries to the protocol swap and yield percentages.\n @dev This must be called from the Vault during pool registration. It will initialize the pool to the global\n protocol fee percentage values (or 0, if the `protocolFeeExempt` flags is set), and return the initial aggregate\n fee percentages, based on an initial pool creator fee of 0.\n @param pool The address of the pool being registered\n @param poolCreator The address of the pool creator (or 0 if there won't be a pool creator fee)\n @param protocolFeeExempt If true, the pool is initially exempt from protocol fees\n @return aggregateSwapFeePercentage The initial aggregate swap fee percentage\n @return aggregateYieldFeePercentage The initial aggregate yield fee percentage"},"functionSelector":"77ff76e7","id":535,"implemented":false,"kind":"function","modifiers":[],"name":"registerPool","nameLocation":"15430:12:5","nodeType":"FunctionDefinition","parameters":{"id":529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":524,"mutability":"mutable","name":"pool","nameLocation":"15460:4:5","nodeType":"VariableDeclaration","scope":535,"src":"15452:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":523,"name":"address","nodeType":"ElementaryTypeName","src":"15452:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":526,"mutability":"mutable","name":"poolCreator","nameLocation":"15482:11:5","nodeType":"VariableDeclaration","scope":535,"src":"15474:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":525,"name":"address","nodeType":"ElementaryTypeName","src":"15474:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"protocolFeeExempt","nameLocation":"15508:17:5","nodeType":"VariableDeclaration","scope":535,"src":"15503:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":527,"name":"bool","nodeType":"ElementaryTypeName","src":"15503:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15442:89:5"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":531,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"15558:26:5","nodeType":"VariableDeclaration","scope":535,"src":"15550:34:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":530,"name":"uint256","nodeType":"ElementaryTypeName","src":"15550:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":533,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"15594:27:5","nodeType":"VariableDeclaration","scope":535,"src":"15586:35:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":532,"name":"uint256","nodeType":"ElementaryTypeName","src":"15586:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15549:73:5"},"scope":613,"src":"15421:202:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":536,"nodeType":"StructuredDocumentation","src":"15629:175:5","text":" @notice Set the global protocol swap fee percentage, used by standard pools.\n @param newProtocolSwapFeePercentage The new protocol swap fee percentage"},"functionSelector":"8a3c5c69","id":541,"implemented":false,"kind":"function","modifiers":[],"name":"setGlobalProtocolSwapFeePercentage","nameLocation":"15818:34:5","nodeType":"FunctionDefinition","parameters":{"id":539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":538,"mutability":"mutable","name":"newProtocolSwapFeePercentage","nameLocation":"15861:28:5","nodeType":"VariableDeclaration","scope":541,"src":"15853:36:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":537,"name":"uint256","nodeType":"ElementaryTypeName","src":"15853:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15852:38:5"},"returnParameters":{"id":540,"nodeType":"ParameterList","parameters":[],"src":"15899:0:5"},"scope":613,"src":"15809:91:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":542,"nodeType":"StructuredDocumentation","src":"15906:178:5","text":" @notice Set the global protocol yield fee percentage, used by standard pools.\n @param newProtocolYieldFeePercentage The new protocol yield fee percentage"},"functionSelector":"a93df2a4","id":547,"implemented":false,"kind":"function","modifiers":[],"name":"setGlobalProtocolYieldFeePercentage","nameLocation":"16098:35:5","nodeType":"FunctionDefinition","parameters":{"id":545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":544,"mutability":"mutable","name":"newProtocolYieldFeePercentage","nameLocation":"16142:29:5","nodeType":"VariableDeclaration","scope":547,"src":"16134:37:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":543,"name":"uint256","nodeType":"ElementaryTypeName","src":"16134:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16133:39:5"},"returnParameters":{"id":546,"nodeType":"ParameterList","parameters":[],"src":"16181:0:5"},"scope":613,"src":"16089:93:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":548,"nodeType":"StructuredDocumentation","src":"16188:272:5","text":" @notice Override the protocol swap fee percentage for a specific pool.\n @param pool The address of the pool for which we are setting the protocol swap fee\n @param newProtocolSwapFeePercentage The new protocol swap fee percentage for the pool"},"functionSelector":"fd267f39","id":555,"implemented":false,"kind":"function","modifiers":[],"name":"setProtocolSwapFeePercentage","nameLocation":"16474:28:5","nodeType":"FunctionDefinition","parameters":{"id":553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":550,"mutability":"mutable","name":"pool","nameLocation":"16511:4:5","nodeType":"VariableDeclaration","scope":555,"src":"16503:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":549,"name":"address","nodeType":"ElementaryTypeName","src":"16503:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":552,"mutability":"mutable","name":"newProtocolSwapFeePercentage","nameLocation":"16525:28:5","nodeType":"VariableDeclaration","scope":555,"src":"16517:36:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":551,"name":"uint256","nodeType":"ElementaryTypeName","src":"16517:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16502:52:5"},"returnParameters":{"id":554,"nodeType":"ParameterList","parameters":[],"src":"16563:0:5"},"scope":613,"src":"16465:99:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":556,"nodeType":"StructuredDocumentation","src":"16570:276:5","text":" @notice Override the protocol yield fee percentage for a specific pool.\n @param pool The address of the pool for which we are setting the protocol yield fee\n @param newProtocolYieldFeePercentage The new protocol yield fee percentage for the pool"},"functionSelector":"abaa3356","id":563,"implemented":false,"kind":"function","modifiers":[],"name":"setProtocolYieldFeePercentage","nameLocation":"16860:29:5","nodeType":"FunctionDefinition","parameters":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":558,"mutability":"mutable","name":"pool","nameLocation":"16898:4:5","nodeType":"VariableDeclaration","scope":563,"src":"16890:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":557,"name":"address","nodeType":"ElementaryTypeName","src":"16890:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":560,"mutability":"mutable","name":"newProtocolYieldFeePercentage","nameLocation":"16912:29:5","nodeType":"VariableDeclaration","scope":563,"src":"16904:37:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":559,"name":"uint256","nodeType":"ElementaryTypeName","src":"16904:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16889:53:5"},"returnParameters":{"id":562,"nodeType":"ParameterList","parameters":[],"src":"16951:0:5"},"scope":613,"src":"16851:101:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":564,"nodeType":"StructuredDocumentation","src":"16958:623:5","text":" @notice Assigns a new pool creator swap fee percentage to the specified pool.\n @dev Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to\n the \"net\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the\n pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\n @param pool The address of the pool for which the pool creator fee will be changed\n @param poolCreatorSwapFeePercentage The new pool creator swap fee percentage to apply to the pool"},"functionSelector":"1377c16c","id":571,"implemented":false,"kind":"function","modifiers":[],"name":"setPoolCreatorSwapFeePercentage","nameLocation":"17595:31:5","nodeType":"FunctionDefinition","parameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":566,"mutability":"mutable","name":"pool","nameLocation":"17635:4:5","nodeType":"VariableDeclaration","scope":571,"src":"17627:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":565,"name":"address","nodeType":"ElementaryTypeName","src":"17627:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":568,"mutability":"mutable","name":"poolCreatorSwapFeePercentage","nameLocation":"17649:28:5","nodeType":"VariableDeclaration","scope":571,"src":"17641:36:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":567,"name":"uint256","nodeType":"ElementaryTypeName","src":"17641:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17626:52:5"},"returnParameters":{"id":570,"nodeType":"ParameterList","parameters":[],"src":"17687:0:5"},"scope":613,"src":"17586:102:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":572,"nodeType":"StructuredDocumentation","src":"17694:626:5","text":" @notice Assigns a new pool creator yield fee percentage to the specified pool.\n @dev Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to\n the \"net\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the\n pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\n @param pool The address of the pool for which the pool creator fee will be changed\n @param poolCreatorYieldFeePercentage The new pool creator yield fee percentage to apply to the pool"},"functionSelector":"3af52712","id":579,"implemented":false,"kind":"function","modifiers":[],"name":"setPoolCreatorYieldFeePercentage","nameLocation":"18334:32:5","nodeType":"FunctionDefinition","parameters":{"id":577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"mutability":"mutable","name":"pool","nameLocation":"18375:4:5","nodeType":"VariableDeclaration","scope":579,"src":"18367:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"18367:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":576,"mutability":"mutable","name":"poolCreatorYieldFeePercentage","nameLocation":"18389:29:5","nodeType":"VariableDeclaration","scope":579,"src":"18381:37:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":575,"name":"uint256","nodeType":"ElementaryTypeName","src":"18381:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18366:53:5"},"returnParameters":{"id":578,"nodeType":"ParameterList","parameters":[],"src":"18428:0:5"},"scope":613,"src":"18325:104:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":580,"nodeType":"StructuredDocumentation","src":"18435:296:5","text":" @notice Withdraw collected protocol fees for a given pool (all tokens). This is a permissioned function.\n @dev Sends swap and yield protocol fees to the recipient.\n @param pool The pool on which fees were collected\n @param recipient Address to send the tokens"},"functionSelector":"cf7b287f","id":587,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawProtocolFees","nameLocation":"18745:20:5","nodeType":"FunctionDefinition","parameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":582,"mutability":"mutable","name":"pool","nameLocation":"18774:4:5","nodeType":"VariableDeclaration","scope":587,"src":"18766:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":581,"name":"address","nodeType":"ElementaryTypeName","src":"18766:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":584,"mutability":"mutable","name":"recipient","nameLocation":"18788:9:5","nodeType":"VariableDeclaration","scope":587,"src":"18780:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":583,"name":"address","nodeType":"ElementaryTypeName","src":"18780:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18765:33:5"},"returnParameters":{"id":586,"nodeType":"ParameterList","parameters":[],"src":"18807:0:5"},"scope":613,"src":"18736:72:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":588,"nodeType":"StructuredDocumentation","src":"18814:339:5","text":" @notice Withdraw collected protocol fees for a given pool and a given token. This is a permissioned function.\n @dev Sends swap and yield protocol fees to the recipient.\n @param pool The pool on which fees were collected\n @param recipient Address to send the tokens\n @param token Token to withdraw"},"functionSelector":"b53a70b2","id":598,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawProtocolFeesForToken","nameLocation":"19167:28:5","nodeType":"FunctionDefinition","parameters":{"id":596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":590,"mutability":"mutable","name":"pool","nameLocation":"19204:4:5","nodeType":"VariableDeclaration","scope":598,"src":"19196:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":589,"name":"address","nodeType":"ElementaryTypeName","src":"19196:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":592,"mutability":"mutable","name":"recipient","nameLocation":"19218:9:5","nodeType":"VariableDeclaration","scope":598,"src":"19210:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":591,"name":"address","nodeType":"ElementaryTypeName","src":"19210:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":595,"mutability":"mutable","name":"token","nameLocation":"19236:5:5","nodeType":"VariableDeclaration","scope":598,"src":"19229:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":594,"nodeType":"UserDefinedTypeName","pathNode":{"id":593,"name":"IERC20","nameLocations":["19229:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"19229:6:5"},"referencedDeclaration":6654,"src":"19229:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"19195:47:5"},"returnParameters":{"id":597,"nodeType":"ParameterList","parameters":[],"src":"19251:0:5"},"scope":613,"src":"19158:94:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":599,"nodeType":"StructuredDocumentation","src":"19258:291:5","text":" @notice Withdraw collected pool creator fees for a given pool. This is a permissioned function.\n @dev Sends swap and yield pool creator fees to the recipient.\n @param pool The pool on which fees were collected\n @param recipient Address to send the tokens"},"functionSelector":"f7061445","id":606,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawPoolCreatorFees","nameLocation":"19563:23:5","nodeType":"FunctionDefinition","parameters":{"id":604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":601,"mutability":"mutable","name":"pool","nameLocation":"19595:4:5","nodeType":"VariableDeclaration","scope":606,"src":"19587:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":600,"name":"address","nodeType":"ElementaryTypeName","src":"19587:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":603,"mutability":"mutable","name":"recipient","nameLocation":"19609:9:5","nodeType":"VariableDeclaration","scope":606,"src":"19601:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":602,"name":"address","nodeType":"ElementaryTypeName","src":"19601:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19586:33:5"},"returnParameters":{"id":605,"nodeType":"ParameterList","parameters":[],"src":"19628:0:5"},"scope":613,"src":"19554:75:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":607,"nodeType":"StructuredDocumentation","src":"19635:310:5","text":" @notice Withdraw collected pool creator fees for a given pool.\n @dev Sends swap and yield pool creator fees to the registered poolCreator. Since this is a known and immutable\n value, this function is permissionless.\n @param pool The pool on which fees were collected"},"functionSelector":"52f125f0","id":612,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawPoolCreatorFees","nameLocation":"19959:23:5","nodeType":"FunctionDefinition","parameters":{"id":610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":609,"mutability":"mutable","name":"pool","nameLocation":"19991:4:5","nodeType":"VariableDeclaration","scope":612,"src":"19983:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"19983:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19982:14:5"},"returnParameters":{"id":611,"nodeType":"ParameterList","parameters":[],"src":"20005:0:5"},"scope":613,"src":"19950:56:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":614,"src":"266:19742:5","usedErrors":[394,397,402,409,412],"usedEvents":[287,292,299,306,313,320,330,340,352,364,373,382,391]}],"src":"46:19963:5"},"id":5},"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","exportedSymbols":{"IAuthentication":[47],"IVault":[651],"IVaultAdmin":[941],"IVaultErrors":[1308],"IVaultEvents":[1547],"IVaultExtension":[1966],"IVaultMain":[2102]},"id":652,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":615,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:6"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","file":"../solidity-utils/helpers/IAuthentication.sol","id":617,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":652,"sourceUnit":48,"src":"72:80:6","symbolAliases":[{"foreign":{"id":616,"name":"IAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"81:15:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol","file":"./IVaultExtension.sol","id":619,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":652,"sourceUnit":1967,"src":"153:56:6","symbolAliases":[{"foreign":{"id":618,"name":"IVaultExtension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"162:15:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol","file":"./IVaultErrors.sol","id":621,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":652,"sourceUnit":1309,"src":"210:50:6","symbolAliases":[{"foreign":{"id":620,"name":"IVaultErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"219:12:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol","file":"./IVaultEvents.sol","id":623,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":652,"sourceUnit":1548,"src":"261:50:6","symbolAliases":[{"foreign":{"id":622,"name":"IVaultEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"270:12:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol","file":"./IVaultAdmin.sol","id":625,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":652,"sourceUnit":942,"src":"312:48:6","symbolAliases":[{"foreign":{"id":624,"name":"IVaultAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"321:11:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol","file":"./IVaultMain.sol","id":627,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":652,"sourceUnit":2103,"src":"361:46:6","symbolAliases":[{"foreign":{"id":626,"name":"IVaultMain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"370:10:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":629,"name":"IVaultMain","nameLocations":["539:10:6"],"nodeType":"IdentifierPath","referencedDeclaration":2102,"src":"539:10:6"},"id":630,"nodeType":"InheritanceSpecifier","src":"539:10:6"},{"baseName":{"id":631,"name":"IVaultExtension","nameLocations":["551:15:6"],"nodeType":"IdentifierPath","referencedDeclaration":1966,"src":"551:15:6"},"id":632,"nodeType":"InheritanceSpecifier","src":"551:15:6"},{"baseName":{"id":633,"name":"IVaultAdmin","nameLocations":["568:11:6"],"nodeType":"IdentifierPath","referencedDeclaration":941,"src":"568:11:6"},"id":634,"nodeType":"InheritanceSpecifier","src":"568:11:6"},{"baseName":{"id":635,"name":"IVaultErrors","nameLocations":["581:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":1308,"src":"581:12:6"},"id":636,"nodeType":"InheritanceSpecifier","src":"581:12:6"},{"baseName":{"id":637,"name":"IVaultEvents","nameLocations":["595:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":1547,"src":"595:12:6"},"id":638,"nodeType":"InheritanceSpecifier","src":"595:12:6"},{"baseName":{"id":639,"name":"IAuthentication","nameLocations":["609:15:6"],"nodeType":"IdentifierPath","referencedDeclaration":47,"src":"609:15:6"},"id":640,"nodeType":"InheritanceSpecifier","src":"609:15:6"}],"canonicalName":"IVault","contractDependencies":[],"contractKind":"interface","documentation":{"id":628,"nodeType":"StructuredDocumentation","src":"409:110:6","text":"@notice Composite interface for all Vault operations: swap, add/remove liquidity, and associated queries."},"fullyImplemented":false,"id":651,"linearizedBaseContracts":[651,47,1547,1308,941,1966,2102],"name":"IVault","nameLocation":"529:6:6","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[669,1570],"documentation":{"id":641,"nodeType":"StructuredDocumentation","src":"631:41:6","text":"@return vault The main Vault address."},"functionSelector":"fbfa77cf","id":650,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"686:5:6","nodeType":"FunctionDefinition","overrides":{"id":645,"nodeType":"OverrideSpecifier","overrides":[{"id":643,"name":"IVaultAdmin","nameLocations":["717:11:6"],"nodeType":"IdentifierPath","referencedDeclaration":941,"src":"717:11:6"},{"id":644,"name":"IVaultExtension","nameLocations":["730:15:6"],"nodeType":"IdentifierPath","referencedDeclaration":1966,"src":"730:15:6"}],"src":"708:38:6"},"parameters":{"id":642,"nodeType":"ParameterList","parameters":[],"src":"691:2:6"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":650,"src":"756:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":647,"nodeType":"UserDefinedTypeName","pathNode":{"id":646,"name":"IVault","nameLocations":["756:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"756:6:6"},"referencedDeclaration":651,"src":"756:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"}],"src":"755:8:6"},"scope":651,"src":"677:87:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":652,"src":"519:247:6","usedErrors":[38,953,958,963,968,977,983,986,989,992,995,998,1001,1010,1013,1016,1019,1022,1025,1028,1031,1034,1037,1040,1043,1046,1049,1052,1058,1065,1072,1075,1078,1088,1098,1105,1108,1111,1114,1124,1134,1141,1144,1147,1150,1153,1156,1159,1162,1165,1170,1175,1180,1183,1186,1189,1192,1195,1200,1205,1210,1216,1222,1225,1233,1239,1245,1248,1251,1254,1259,1269,1279,1286,1289,1292,1295,1298,1301,1304,1307],"usedEvents":[1346,1351,1370,1382,1394,1412,1430,1435,1438,1441,1448,1455,1462,1469,1476,1482,1488,1500,1510,1520,1532,1537,1546]}],"src":"46:721:6"},"id":6},"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol","exportedSymbols":{"IAuthorizer":[73],"IERC4626":[6576],"IProtocolFeeController":[613],"IVault":[651],"IVaultAdmin":[941]},"id":942,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":653,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:7"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":655,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":942,"sourceUnit":6577,"src":"72:75:7","symbolAliases":[{"foreign":{"id":654,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6576,"src":"81:8:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"./IProtocolFeeController.sol","id":657,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":942,"sourceUnit":614,"src":"149:70:7","symbolAliases":[{"foreign":{"id":656,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"158:22:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","file":"./IAuthorizer.sol","id":659,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":942,"sourceUnit":74,"src":"220:48:7","symbolAliases":[{"foreign":{"id":658,"name":"IAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"229:11:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"./IVault.sol","id":661,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":942,"sourceUnit":652,"src":"269:38:7","symbolAliases":[{"foreign":{"id":660,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"278:6:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultAdmin","contractDependencies":[],"contractKind":"interface","documentation":{"id":662,"nodeType":"StructuredDocumentation","src":"309:276:7","text":" @notice Interface for functions defined on the `VaultAdmin` contract.\n @dev `VaultAdmin` is the Proxy extension of `VaultExtension`, and handles the least critical operations,\n as two delegate calls add gas to each call. Most of the permissioned calls are here."},"fullyImplemented":false,"id":941,"linearizedBaseContracts":[941],"name":"IVaultAdmin","nameLocation":"596:11:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":663,"nodeType":"StructuredDocumentation","src":"841:206:7","text":" @notice Returns the main Vault address.\n @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n @return vault The address of the main Vault"},"functionSelector":"fbfa77cf","id":669,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"1061:5:7","nodeType":"FunctionDefinition","parameters":{"id":664,"nodeType":"ParameterList","parameters":[],"src":"1066:2:7"},"returnParameters":{"id":668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":667,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":669,"src":"1092:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":666,"nodeType":"UserDefinedTypeName","pathNode":{"id":665,"name":"IVault","nameLocations":["1092:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"1092:6:7"},"referencedDeclaration":651,"src":"1092:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"}],"src":"1091:8:7"},"scope":941,"src":"1052:48:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":670,"nodeType":"StructuredDocumentation","src":"1106:326:7","text":" @notice Returns the Vault's pause window end time.\n @dev This value is immutable, and represents the timestamp after which the Vault can no longer be paused\n by governance. Balancer timestamps are 32 bits.\n @return pauseWindowEndTime The timestamp when the Vault's pause window ends"},"functionSelector":"8a8d123a","id":675,"implemented":false,"kind":"function","modifiers":[],"name":"getPauseWindowEndTime","nameLocation":"1446:21:7","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"1467:2:7"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":673,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"1500:18:7","nodeType":"VariableDeclaration","scope":675,"src":"1493:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":672,"name":"uint32","nodeType":"ElementaryTypeName","src":"1493:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1492:27:7"},"scope":941,"src":"1437:83:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":676,"nodeType":"StructuredDocumentation","src":"1526:414:7","text":" @notice Returns the Vault's buffer period duration.\n @dev This value is immutable. It represents the period during which, if paused, the Vault will remain paused.\n This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer\n timestamps are 32 bits.\n @return bufferPeriodDuration The length of the buffer period in seconds"},"functionSelector":"20c1fb7a","id":681,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferPeriodDuration","nameLocation":"1954:23:7","nodeType":"FunctionDefinition","parameters":{"id":677,"nodeType":"ParameterList","parameters":[],"src":"1977:2:7"},"returnParameters":{"id":680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":679,"mutability":"mutable","name":"bufferPeriodDuration","nameLocation":"2010:20:7","nodeType":"VariableDeclaration","scope":681,"src":"2003:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":678,"name":"uint32","nodeType":"ElementaryTypeName","src":"2003:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2002:29:7"},"scope":941,"src":"1945:87:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"2038:321:7","text":" @notice Returns the Vault's buffer period end time.\n @dev This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer\n timestamps are 32 bits.\n @return bufferPeriodEndTime The timestamp after which the Vault remains permanently unpaused"},"functionSelector":"cd51c12f","id":687,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferPeriodEndTime","nameLocation":"2373:22:7","nodeType":"FunctionDefinition","parameters":{"id":683,"nodeType":"ParameterList","parameters":[],"src":"2395:2:7"},"returnParameters":{"id":686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":685,"mutability":"mutable","name":"bufferPeriodEndTime","nameLocation":"2428:19:7","nodeType":"VariableDeclaration","scope":687,"src":"2421:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":684,"name":"uint32","nodeType":"ElementaryTypeName","src":"2421:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2420:28:7"},"scope":941,"src":"2364:85:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":688,"nodeType":"StructuredDocumentation","src":"2455:193:7","text":" @notice Get the minimum number of tokens in a pool.\n @dev We expect the vast majority of pools to be 2-token.\n @return minTokens The minimum token count of a pool"},"functionSelector":"a8175b27","id":693,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumPoolTokens","nameLocation":"2662:20:7","nodeType":"FunctionDefinition","parameters":{"id":689,"nodeType":"ParameterList","parameters":[],"src":"2682:2:7"},"returnParameters":{"id":692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":691,"mutability":"mutable","name":"minTokens","nameLocation":"2716:9:7","nodeType":"VariableDeclaration","scope":693,"src":"2708:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":690,"name":"uint256","nodeType":"ElementaryTypeName","src":"2708:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2707:19:7"},"scope":941,"src":"2653:74:7","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":694,"nodeType":"StructuredDocumentation","src":"2733:129:7","text":" @notice Get the maximum number of tokens in a pool.\n @return maxTokens The maximum token count of a pool"},"functionSelector":"2e42f4d5","id":699,"implemented":false,"kind":"function","modifiers":[],"name":"getMaximumPoolTokens","nameLocation":"2876:20:7","nodeType":"FunctionDefinition","parameters":{"id":695,"nodeType":"ParameterList","parameters":[],"src":"2896:2:7"},"returnParameters":{"id":698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":697,"mutability":"mutable","name":"maxTokens","nameLocation":"2930:9:7","nodeType":"VariableDeclaration","scope":699,"src":"2922:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":696,"name":"uint256","nodeType":"ElementaryTypeName","src":"2922:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2921:19:7"},"scope":941,"src":"2867:74:7","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":700,"nodeType":"StructuredDocumentation","src":"2947:439:7","text":" @notice Get the minimum total supply of pool tokens (BPT) for an initialized pool.\n @dev This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT\n is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\n @return poolMinimumTotalSupply The minimum total supply a pool can have after initialization"},"functionSelector":"d0965a6b","id":705,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolMinimumTotalSupply","nameLocation":"3400:25:7","nodeType":"FunctionDefinition","parameters":{"id":701,"nodeType":"ParameterList","parameters":[],"src":"3425:2:7"},"returnParameters":{"id":704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":703,"mutability":"mutable","name":"poolMinimumTotalSupply","nameLocation":"3459:22:7","nodeType":"VariableDeclaration","scope":705,"src":"3451:30:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":702,"name":"uint256","nodeType":"ElementaryTypeName","src":"3451:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3450:32:7"},"scope":941,"src":"3391:92:7","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":706,"nodeType":"StructuredDocumentation","src":"3489:502:7","text":" @notice Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\n @dev This prevents buffers from being completely drained. When the buffer is initialized, this minimum number\n of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal\n to the Vault, as buffers are not tokenized.\n @return bufferMinimumTotalSupply The minimum total supply a buffer can have after initialization"},"functionSelector":"26a8a991","id":711,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferMinimumTotalSupply","nameLocation":"4005:27:7","nodeType":"FunctionDefinition","parameters":{"id":707,"nodeType":"ParameterList","parameters":[],"src":"4032:2:7"},"returnParameters":{"id":710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":709,"mutability":"mutable","name":"bufferMinimumTotalSupply","nameLocation":"4066:24:7","nodeType":"VariableDeclaration","scope":711,"src":"4058:32:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":708,"name":"uint256","nodeType":"ElementaryTypeName","src":"4058:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4057:34:7"},"scope":941,"src":"3996:96:7","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":712,"nodeType":"StructuredDocumentation","src":"4098:291:7","text":" @notice Get the minimum trade amount in a pool operation.\n @dev This limit is applied to the 18-decimal \"upscaled\" amount in any operation (swap, add/remove liquidity).\n @return minimumTradeAmount The minimum trade amount as an 18-decimal floating point number"},"functionSelector":"e2cb0ba0","id":717,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumTradeAmount","nameLocation":"4403:21:7","nodeType":"FunctionDefinition","parameters":{"id":713,"nodeType":"ParameterList","parameters":[],"src":"4424:2:7"},"returnParameters":{"id":716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":715,"mutability":"mutable","name":"minimumTradeAmount","nameLocation":"4458:18:7","nodeType":"VariableDeclaration","scope":717,"src":"4450:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":714,"name":"uint256","nodeType":"ElementaryTypeName","src":"4450:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4449:28:7"},"scope":941,"src":"4394:84:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":718,"nodeType":"StructuredDocumentation","src":"4484:271:7","text":" @notice Get the minimum wrap amount in a buffer operation.\n @dev This limit is applied to the wrap operation amount, in native underlying token decimals.\n @return minimumWrapAmount The minimum wrap amount in native underlying token decimals"},"functionSelector":"53956aa2","id":723,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumWrapAmount","nameLocation":"4769:20:7","nodeType":"FunctionDefinition","parameters":{"id":719,"nodeType":"ParameterList","parameters":[],"src":"4789:2:7"},"returnParameters":{"id":722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":721,"mutability":"mutable","name":"minimumWrapAmount","nameLocation":"4823:17:7","nodeType":"VariableDeclaration","scope":723,"src":"4815:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":720,"name":"uint256","nodeType":"ElementaryTypeName","src":"4815:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4814:27:7"},"scope":941,"src":"4760:82:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":724,"nodeType":"StructuredDocumentation","src":"5069:529:7","text":" @notice Indicates whether the Vault is paused.\n @dev If the Vault is paused, all non-Recovery Mode state-changing operations on pools will revert. Note that\n ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not\n also pause buffers (though we anticipate they would likely be paused and unpaused together). Call\n `areBuffersPaused` to check the pause state of the buffers.\n @return vaultPaused True if the Vault is paused"},"functionSelector":"098401f5","id":729,"implemented":false,"kind":"function","modifiers":[],"name":"isVaultPaused","nameLocation":"5612:13:7","nodeType":"FunctionDefinition","parameters":{"id":725,"nodeType":"ParameterList","parameters":[],"src":"5625:2:7"},"returnParameters":{"id":728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":727,"mutability":"mutable","name":"vaultPaused","nameLocation":"5656:11:7","nodeType":"VariableDeclaration","scope":729,"src":"5651:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":726,"name":"bool","nodeType":"ElementaryTypeName","src":"5651:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5650:18:7"},"scope":941,"src":"5603:66:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"5675:400:7","text":" @notice Returns the paused status, and end times of the Vault's pause window and buffer period.\n @dev Balancer timestamps are 32 bits.\n @return vaultPaused True if the Vault is paused\n @return vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\n @return vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period"},"functionSelector":"85c8c015","id":739,"implemented":false,"kind":"function","modifiers":[],"name":"getVaultPausedState","nameLocation":"6089:19:7","nodeType":"FunctionDefinition","parameters":{"id":731,"nodeType":"ParameterList","parameters":[],"src":"6108:2:7"},"returnParameters":{"id":738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":733,"mutability":"mutable","name":"vaultPaused","nameLocation":"6163:11:7","nodeType":"VariableDeclaration","scope":739,"src":"6158:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":732,"name":"bool","nodeType":"ElementaryTypeName","src":"6158:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":735,"mutability":"mutable","name":"vaultPauseWindowEndTime","nameLocation":"6183:23:7","nodeType":"VariableDeclaration","scope":739,"src":"6176:30:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":734,"name":"uint32","nodeType":"ElementaryTypeName","src":"6176:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":737,"mutability":"mutable","name":"vaultBufferPeriodEndTime","nameLocation":"6215:24:7","nodeType":"VariableDeclaration","scope":739,"src":"6208:31:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":736,"name":"uint32","nodeType":"ElementaryTypeName","src":"6208:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"6157:83:7"},"scope":941,"src":"6080:161:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":740,"nodeType":"StructuredDocumentation","src":"6247:517:7","text":" @notice Pause the Vault: an emergency action which disables all operational state-changing functions on pools.\n @dev This is a permissioned function that will only work during the Pause Window set during deployment.\n Note that ERC4626 buffer operations have an independent pause mechanism, which is not affected by pausing\n the Vault. Custom routers could still wrap/unwrap using buffers while the Vault is paused, unless buffers\n are also paused (with `pauseVaultBuffers`)."},"functionSelector":"9e0879c2","id":743,"implemented":false,"kind":"function","modifiers":[],"name":"pauseVault","nameLocation":"6778:10:7","nodeType":"FunctionDefinition","parameters":{"id":741,"nodeType":"ParameterList","parameters":[],"src":"6788:2:7"},"returnParameters":{"id":742,"nodeType":"ParameterList","parameters":[],"src":"6799:0:7"},"scope":941,"src":"6769:31:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":744,"nodeType":"StructuredDocumentation","src":"6806:569:7","text":" @notice Reverse a `pause` operation, and restore Vault pool operations to normal functionality.\n @dev This is a permissioned function that will only work on a paused Vault within the Buffer Period set during\n deployment. Note that the Vault will automatically unpause after the Buffer Period expires. As noted above,\n ERC4626 buffers and Vault operations on pools are independent. Unpausing the Vault does not reverse\n `pauseVaultBuffers`. If buffers were also paused, they will remain in that state until explicitly unpaused."},"functionSelector":"0b7562be","id":747,"implemented":false,"kind":"function","modifiers":[],"name":"unpauseVault","nameLocation":"7389:12:7","nodeType":"FunctionDefinition","parameters":{"id":745,"nodeType":"ParameterList","parameters":[],"src":"7401:2:7"},"returnParameters":{"id":746,"nodeType":"ParameterList","parameters":[],"src":"7412:0:7"},"scope":941,"src":"7380:33:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":748,"nodeType":"StructuredDocumentation","src":"7639:276:7","text":" @notice Pause the Pool: an emergency action which disables all pool functions.\n @dev This is a permissioned function that will only work during the Pause Window set during pool factory\n deployment.\n @param pool The pool being paused"},"functionSelector":"55aca1ec","id":753,"implemented":false,"kind":"function","modifiers":[],"name":"pausePool","nameLocation":"7929:9:7","nodeType":"FunctionDefinition","parameters":{"id":751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":750,"mutability":"mutable","name":"pool","nameLocation":"7947:4:7","nodeType":"VariableDeclaration","scope":753,"src":"7939:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":749,"name":"address","nodeType":"ElementaryTypeName","src":"7939:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7938:14:7"},"returnParameters":{"id":752,"nodeType":"ParameterList","parameters":[],"src":"7961:0:7"},"scope":941,"src":"7920:42:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":754,"nodeType":"StructuredDocumentation","src":"7968:366:7","text":" @notice Reverse a `pause` operation, and restore the Pool to normal functionality.\n @dev This is a permissioned function that will only work on a paused Pool within the Buffer Period set during\n deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\n @param pool The pool being unpaused"},"functionSelector":"f21c38cd","id":759,"implemented":false,"kind":"function","modifiers":[],"name":"unpausePool","nameLocation":"8348:11:7","nodeType":"FunctionDefinition","parameters":{"id":757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":756,"mutability":"mutable","name":"pool","nameLocation":"8368:4:7","nodeType":"VariableDeclaration","scope":759,"src":"8360:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":755,"name":"address","nodeType":"ElementaryTypeName","src":"8360:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8359:14:7"},"returnParameters":{"id":758,"nodeType":"ParameterList","parameters":[],"src":"8382:0:7"},"scope":941,"src":"8339:44:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":760,"nodeType":"StructuredDocumentation","src":"8606:520:7","text":" @notice Assigns a new static swap fee percentage to the specified pool.\n @dev This is a permissioned function, disabled if the pool is paused. The swap fee percentage must be within\n the bounds specified by the pool's implementation of `ISwapFeePercentageBounds`.\n Emits the SwapFeePercentageChanged event.\n @param pool The address of the pool for which the static swap fee will be changed\n @param swapFeePercentage The new swap fee percentage to apply to the pool"},"functionSelector":"d15126ba","id":767,"implemented":false,"kind":"function","modifiers":[],"name":"setStaticSwapFeePercentage","nameLocation":"9140:26:7","nodeType":"FunctionDefinition","parameters":{"id":765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"mutability":"mutable","name":"pool","nameLocation":"9175:4:7","nodeType":"VariableDeclaration","scope":767,"src":"9167:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":761,"name":"address","nodeType":"ElementaryTypeName","src":"9167:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":764,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"9189:17:7","nodeType":"VariableDeclaration","scope":767,"src":"9181:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":763,"name":"uint256","nodeType":"ElementaryTypeName","src":"9181:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9166:41:7"},"returnParameters":{"id":766,"nodeType":"ParameterList","parameters":[],"src":"9216:0:7"},"scope":941,"src":"9131:86:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"9223:463:7","text":" @notice Collects accumulated aggregate swap and yield fees for the specified pool.\n @dev Fees are sent to the ProtocolFeeController address.\n @param pool The pool on which all aggregate fees should be collected\n @return swapFeeAmounts An array with the total swap fees collected, sorted in token registration order\n @return yieldFeeAmounts An array with the total yield fees collected, sorted in token registration order"},"functionSelector":"8f4ab9ca","id":779,"implemented":false,"kind":"function","modifiers":[],"name":"collectAggregateFees","nameLocation":"9700:20:7","nodeType":"FunctionDefinition","parameters":{"id":771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"pool","nameLocation":"9738:4:7","nodeType":"VariableDeclaration","scope":779,"src":"9730:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"9730:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9720:28:7"},"returnParameters":{"id":778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":774,"mutability":"mutable","name":"swapFeeAmounts","nameLocation":"9784:14:7","nodeType":"VariableDeclaration","scope":779,"src":"9767:31:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":772,"name":"uint256","nodeType":"ElementaryTypeName","src":"9767:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":773,"nodeType":"ArrayTypeName","src":"9767:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"yieldFeeAmounts","nameLocation":"9817:15:7","nodeType":"VariableDeclaration","scope":779,"src":"9800:32:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":775,"name":"uint256","nodeType":"ElementaryTypeName","src":"9800:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":776,"nodeType":"ArrayTypeName","src":"9800:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"9766:67:7"},"scope":941,"src":"9691:143:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":780,"nodeType":"StructuredDocumentation","src":"9840:755:7","text":" @notice Update an aggregate swap fee percentage.\n @dev Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee\n for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's\n fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also\n that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol).\n Emits an `AggregateSwapFeePercentageChanged` event.\n @param pool The pool whose swap fee percentage will be updated\n @param newAggregateSwapFeePercentage The new aggregate swap fee percentage"},"functionSelector":"5e0b06f4","id":787,"implemented":false,"kind":"function","modifiers":[],"name":"updateAggregateSwapFeePercentage","nameLocation":"10609:32:7","nodeType":"FunctionDefinition","parameters":{"id":785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":782,"mutability":"mutable","name":"pool","nameLocation":"10650:4:7","nodeType":"VariableDeclaration","scope":787,"src":"10642:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":781,"name":"address","nodeType":"ElementaryTypeName","src":"10642:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":784,"mutability":"mutable","name":"newAggregateSwapFeePercentage","nameLocation":"10664:29:7","nodeType":"VariableDeclaration","scope":787,"src":"10656:37:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":783,"name":"uint256","nodeType":"ElementaryTypeName","src":"10656:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10641:53:7"},"returnParameters":{"id":786,"nodeType":"ParameterList","parameters":[],"src":"10703:0:7"},"scope":941,"src":"10600:104:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":788,"nodeType":"StructuredDocumentation","src":"10710:760:7","text":" @notice Update an aggregate yield fee percentage.\n @dev Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee\n for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's\n fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also\n that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol).\n Emits an `AggregateYieldFeePercentageChanged` event.\n @param pool The pool whose yield fee percentage will be updated\n @param newAggregateYieldFeePercentage The new aggregate yield fee percentage"},"functionSelector":"e253670a","id":795,"implemented":false,"kind":"function","modifiers":[],"name":"updateAggregateYieldFeePercentage","nameLocation":"11484:33:7","nodeType":"FunctionDefinition","parameters":{"id":793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":790,"mutability":"mutable","name":"pool","nameLocation":"11526:4:7","nodeType":"VariableDeclaration","scope":795,"src":"11518:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":789,"name":"address","nodeType":"ElementaryTypeName","src":"11518:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":792,"mutability":"mutable","name":"newAggregateYieldFeePercentage","nameLocation":"11540:30:7","nodeType":"VariableDeclaration","scope":795,"src":"11532:38:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":791,"name":"uint256","nodeType":"ElementaryTypeName","src":"11532:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11517:54:7"},"returnParameters":{"id":794,"nodeType":"ParameterList","parameters":[],"src":"11580:0:7"},"scope":941,"src":"11475:106:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":796,"nodeType":"StructuredDocumentation","src":"11587:249:7","text":" @notice Sets a new Protocol Fee Controller for the Vault.\n @dev This is a permissioned call. Emits a `ProtocolFeeControllerChanged` event.\n @param newProtocolFeeController The address of the new Protocol Fee Controller"},"functionSelector":"2d771389","id":802,"implemented":false,"kind":"function","modifiers":[],"name":"setProtocolFeeController","nameLocation":"11850:24:7","nodeType":"FunctionDefinition","parameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":799,"mutability":"mutable","name":"newProtocolFeeController","nameLocation":"11898:24:7","nodeType":"VariableDeclaration","scope":802,"src":"11875:47:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"},"typeName":{"id":798,"nodeType":"UserDefinedTypeName","pathNode":{"id":797,"name":"IProtocolFeeController","nameLocations":["11875:22:7"],"nodeType":"IdentifierPath","referencedDeclaration":613,"src":"11875:22:7"},"referencedDeclaration":613,"src":"11875:22:7","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"src":"11874:49:7"},"returnParameters":{"id":801,"nodeType":"ParameterList","parameters":[],"src":"11932:0:7"},"scope":941,"src":"11841:92:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":803,"nodeType":"StructuredDocumentation","src":"12160:557:7","text":" @notice Enable recovery mode for a pool.\n @dev This is a permissioned function. It enables a safe proportional withdrawal, with no external calls.\n Since there are no external calls, ensuring that entering Recovery Mode cannot fail, we cannot compute and so\n must forfeit any yield fees between the last operation and enabling Recovery Mode. For the same reason, live\n balances cannot be updated while in Recovery Mode, as doing so might cause withdrawals to fail.\n @param pool The address of the pool"},"functionSelector":"dc3f574e","id":808,"implemented":false,"kind":"function","modifiers":[],"name":"enableRecoveryMode","nameLocation":"12731:18:7","nodeType":"FunctionDefinition","parameters":{"id":806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":805,"mutability":"mutable","name":"pool","nameLocation":"12758:4:7","nodeType":"VariableDeclaration","scope":808,"src":"12750:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":804,"name":"address","nodeType":"ElementaryTypeName","src":"12750:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12749:14:7"},"returnParameters":{"id":807,"nodeType":"ParameterList","parameters":[],"src":"12772:0:7"},"scope":941,"src":"12722:51:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":809,"nodeType":"StructuredDocumentation","src":"12779:409:7","text":" @notice Disable recovery mode for a pool.\n @dev This is a permissioned function. It re-syncs live balances (which could not be updated during\n Recovery Mode), forfeiting any yield fees that accrued while enabled. It makes external calls, and could\n potentially fail if there is an issue with any associated Rate Providers.\n @param pool The address of the pool"},"functionSelector":"bffb78b2","id":814,"implemented":false,"kind":"function","modifiers":[],"name":"disableRecoveryMode","nameLocation":"13202:19:7","nodeType":"FunctionDefinition","parameters":{"id":812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"pool","nameLocation":"13230:4:7","nodeType":"VariableDeclaration","scope":814,"src":"13222:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":810,"name":"address","nodeType":"ElementaryTypeName","src":"13222:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13221:14:7"},"returnParameters":{"id":813,"nodeType":"ParameterList","parameters":[],"src":"13244:0:7"},"scope":941,"src":"13193:52:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":815,"nodeType":"StructuredDocumentation","src":"13476:653:7","text":" @notice Disables query functionality on the Vault. Can only be called by governance.\n @dev The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from\n settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable\n queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2).\n This function can be acted upon as an emergency measure in ambiguous contexts where it's not 100% clear whether\n disabling queries is completely necessary; queries can still be re-enabled after this call."},"functionSelector":"de1a36a6","id":818,"implemented":false,"kind":"function","modifiers":[],"name":"disableQuery","nameLocation":"14143:12:7","nodeType":"FunctionDefinition","parameters":{"id":816,"nodeType":"ParameterList","parameters":[],"src":"14155:2:7"},"returnParameters":{"id":817,"nodeType":"ParameterList","parameters":[],"src":"14166:0:7"},"scope":941,"src":"14134:33:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":819,"nodeType":"StructuredDocumentation","src":"14173:223:7","text":" @notice Disables query functionality permanently on the Vault. Can only be called by governance.\n @dev Shall only be used when there is no doubt that queries pose a fundamental threat to the system."},"functionSelector":"821440f2","id":822,"implemented":false,"kind":"function","modifiers":[],"name":"disableQueryPermanently","nameLocation":"14410:23:7","nodeType":"FunctionDefinition","parameters":{"id":820,"nodeType":"ParameterList","parameters":[],"src":"14433:2:7"},"returnParameters":{"id":821,"nodeType":"ParameterList","parameters":[],"src":"14444:0:7"},"scope":941,"src":"14401:44:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":823,"nodeType":"StructuredDocumentation","src":"14451:166:7","text":" @notice Enables query functionality on the Vault. Can only be called by governance.\n @dev Only works if queries are not permanently disabled."},"functionSelector":"e0d55605","id":826,"implemented":false,"kind":"function","modifiers":[],"name":"enableQuery","nameLocation":"14631:11:7","nodeType":"FunctionDefinition","parameters":{"id":824,"nodeType":"ParameterList","parameters":[],"src":"14642:2:7"},"returnParameters":{"id":825,"nodeType":"ParameterList","parameters":[],"src":"14653:0:7"},"scope":941,"src":"14622:32:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":827,"nodeType":"StructuredDocumentation","src":"14881:590:7","text":" @notice Indicates whether the Vault buffers are paused.\n @dev When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true)\n will revert. Pausing buffers is reversible. Note that ERC4626 buffers and the Vault have separate and\n independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they\n would likely be paused and unpaused together). Call `isVaultPaused` to check the pause state of the Vault.\n @return buffersPaused True if the Vault buffers are paused"},"functionSelector":"55cba7fe","id":832,"implemented":false,"kind":"function","modifiers":[],"name":"areBuffersPaused","nameLocation":"15485:16:7","nodeType":"FunctionDefinition","parameters":{"id":828,"nodeType":"ParameterList","parameters":[],"src":"15501:2:7"},"returnParameters":{"id":831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":830,"mutability":"mutable","name":"buffersPaused","nameLocation":"15532:13:7","nodeType":"VariableDeclaration","scope":832,"src":"15527:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":829,"name":"bool","nodeType":"ElementaryTypeName","src":"15527:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15526:20:7"},"scope":941,"src":"15476:71:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":833,"nodeType":"StructuredDocumentation","src":"15553:619:7","text":" @notice Pauses native vault buffers globally.\n @dev When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's\n `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. Currently it's not\n possible to pause vault buffers individually.\n This is a permissioned call, and is reversible (see `unpauseVaultBuffers`). Note that the Vault has a separate\n and independent pausing mechanism. It is possible to pause the Vault (i.e. pool operations), without affecting\n buffers, and vice versa."},"functionSelector":"e085c5a8","id":836,"implemented":false,"kind":"function","modifiers":[],"name":"pauseVaultBuffers","nameLocation":"16186:17:7","nodeType":"FunctionDefinition","parameters":{"id":834,"nodeType":"ParameterList","parameters":[],"src":"16203:2:7"},"returnParameters":{"id":835,"nodeType":"ParameterList","parameters":[],"src":"16214:0:7"},"scope":941,"src":"16177:38:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":837,"nodeType":"StructuredDocumentation","src":"16221:545:7","text":" @notice Unpauses native vault buffers globally.\n @dev When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's\n `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. As noted above,\n ERC4626 buffers and Vault operations on pools are independent. Unpausing buffers does not reverse `pauseVault`.\n If the Vault was also paused, it will remain in that state until explicitly unpaused.\n This is a permissioned call."},"functionSelector":"b9212b49","id":840,"implemented":false,"kind":"function","modifiers":[],"name":"unpauseVaultBuffers","nameLocation":"16780:19:7","nodeType":"FunctionDefinition","parameters":{"id":838,"nodeType":"ParameterList","parameters":[],"src":"16799:2:7"},"returnParameters":{"id":839,"nodeType":"ParameterList","parameters":[],"src":"16810:0:7"},"scope":941,"src":"16771:40:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":841,"nodeType":"StructuredDocumentation","src":"16817:860:7","text":" @notice Initializes buffer for the given wrapped token.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param amountUnderlyingRaw Amount of underlying tokens that will be deposited into the buffer\n @param amountWrappedRaw Amount of wrapped tokens that will be deposited into the buffer\n @param minIssuedShares Minimum amount of shares to receive from the buffer, expressed in underlying token\n native decimals\n @param sharesOwner Address that will own the deposited liquidity. Only this address will be able to remove\n liquidity from the buffer\n @return issuedShares the amount of tokens sharesOwner has in the buffer, expressed in underlying token amounts.\n (it is the BPT of an internal ERC4626 buffer). It is expressed in underlying token native decimals."},"functionSelector":"653eb3b0","id":857,"implemented":false,"kind":"function","modifiers":[],"name":"initializeBuffer","nameLocation":"17691:16:7","nodeType":"FunctionDefinition","parameters":{"id":853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":844,"mutability":"mutable","name":"wrappedToken","nameLocation":"17726:12:7","nodeType":"VariableDeclaration","scope":857,"src":"17717:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":843,"nodeType":"UserDefinedTypeName","pathNode":{"id":842,"name":"IERC4626","nameLocations":["17717:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"17717:8:7"},"referencedDeclaration":6576,"src":"17717:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":846,"mutability":"mutable","name":"amountUnderlyingRaw","nameLocation":"17756:19:7","nodeType":"VariableDeclaration","scope":857,"src":"17748:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":845,"name":"uint256","nodeType":"ElementaryTypeName","src":"17748:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":848,"mutability":"mutable","name":"amountWrappedRaw","nameLocation":"17793:16:7","nodeType":"VariableDeclaration","scope":857,"src":"17785:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":847,"name":"uint256","nodeType":"ElementaryTypeName","src":"17785:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":850,"mutability":"mutable","name":"minIssuedShares","nameLocation":"17827:15:7","nodeType":"VariableDeclaration","scope":857,"src":"17819:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":849,"name":"uint256","nodeType":"ElementaryTypeName","src":"17819:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":852,"mutability":"mutable","name":"sharesOwner","nameLocation":"17860:11:7","nodeType":"VariableDeclaration","scope":857,"src":"17852:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":851,"name":"address","nodeType":"ElementaryTypeName","src":"17852:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17707:170:7"},"returnParameters":{"id":856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":855,"mutability":"mutable","name":"issuedShares","nameLocation":"17904:12:7","nodeType":"VariableDeclaration","scope":857,"src":"17896:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":854,"name":"uint256","nodeType":"ElementaryTypeName","src":"17896:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17895:22:7"},"scope":941,"src":"17682:236:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":858,"nodeType":"StructuredDocumentation","src":"17924:1010:7","text":" @notice Adds liquidity to an internal ERC4626 buffer in the Vault, proportionally.\n @dev The buffer needs to be initialized beforehand.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param maxAmountUnderlyingInRaw Maximum amount of underlying tokens to add to the buffer. It is expressed in\n underlying token native decimals\n @param maxAmountWrappedInRaw Maximum amount of wrapped tokens to add to the buffer. It is expressed in wrapped\n token native decimals\n @param exactSharesToIssue The value in underlying tokens that `sharesOwner` wants to add to the buffer,\n in underlying token decimals\n @param sharesOwner Address that will own the deposited liquidity. Only this address will be able to remove\n liquidity from the buffer\n @return amountUnderlyingRaw Amount of underlying tokens deposited into the buffer\n @return amountWrappedRaw Amount of wrapped tokens deposited into the buffer"},"functionSelector":"e2a92b1a","id":876,"implemented":false,"kind":"function","modifiers":[],"name":"addLiquidityToBuffer","nameLocation":"18948:20:7","nodeType":"FunctionDefinition","parameters":{"id":870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":861,"mutability":"mutable","name":"wrappedToken","nameLocation":"18987:12:7","nodeType":"VariableDeclaration","scope":876,"src":"18978:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":860,"nodeType":"UserDefinedTypeName","pathNode":{"id":859,"name":"IERC4626","nameLocations":["18978:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"18978:8:7"},"referencedDeclaration":6576,"src":"18978:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":863,"mutability":"mutable","name":"maxAmountUnderlyingInRaw","nameLocation":"19017:24:7","nodeType":"VariableDeclaration","scope":876,"src":"19009:32:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":862,"name":"uint256","nodeType":"ElementaryTypeName","src":"19009:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":865,"mutability":"mutable","name":"maxAmountWrappedInRaw","nameLocation":"19059:21:7","nodeType":"VariableDeclaration","scope":876,"src":"19051:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":864,"name":"uint256","nodeType":"ElementaryTypeName","src":"19051:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":867,"mutability":"mutable","name":"exactSharesToIssue","nameLocation":"19098:18:7","nodeType":"VariableDeclaration","scope":876,"src":"19090:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":866,"name":"uint256","nodeType":"ElementaryTypeName","src":"19090:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":869,"mutability":"mutable","name":"sharesOwner","nameLocation":"19134:11:7","nodeType":"VariableDeclaration","scope":876,"src":"19126:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":868,"name":"address","nodeType":"ElementaryTypeName","src":"19126:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18968:183:7"},"returnParameters":{"id":875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":872,"mutability":"mutable","name":"amountUnderlyingRaw","nameLocation":"19178:19:7","nodeType":"VariableDeclaration","scope":876,"src":"19170:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":871,"name":"uint256","nodeType":"ElementaryTypeName","src":"19170:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":874,"mutability":"mutable","name":"amountWrappedRaw","nameLocation":"19207:16:7","nodeType":"VariableDeclaration","scope":876,"src":"19199:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":873,"name":"uint256","nodeType":"ElementaryTypeName","src":"19199:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19169:55:7"},"scope":941,"src":"18939:286:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":877,"nodeType":"StructuredDocumentation","src":"19231:1458:7","text":" @notice Removes liquidity from an internal ERC4626 buffer in the Vault.\n @dev Only proportional exits are supported, and the sender has to be the owner of the shares.\n This function unlocks the Vault just for this operation; it does not work with a Router as an entrypoint.\n Pre-conditions:\n - The buffer needs to be initialized.\n - sharesOwner is the original msg.sender, it needs to be checked in the Router. That's why\n   this call is authenticated; only routers approved by the DAO can remove the liquidity of a buffer.\n - The buffer needs to have some liquidity and have its asset registered in `_bufferAssets` storage.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param sharesToRemove Amount of shares to remove from the buffer. Cannot be greater than sharesOwner's\n total shares. It is expressed in underlying token native decimals\n @param minAmountUnderlyingOutRaw Minimum amount of underlying tokens to receive from the buffer. It is expressed\n in underlying token native decimals\n @param minAmountWrappedOutRaw Minimum amount of wrapped tokens to receive from the buffer. It is expressed in\n wrapped token native decimals\n @return removedUnderlyingBalanceRaw Amount of underlying tokens returned to the user\n @return removedWrappedBalanceRaw Amount of wrapped tokens returned to the user"},"functionSelector":"ebc7955c","id":893,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityFromBuffer","nameLocation":"20703:25:7","nodeType":"FunctionDefinition","parameters":{"id":887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":880,"mutability":"mutable","name":"wrappedToken","nameLocation":"20747:12:7","nodeType":"VariableDeclaration","scope":893,"src":"20738:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":879,"nodeType":"UserDefinedTypeName","pathNode":{"id":878,"name":"IERC4626","nameLocations":["20738:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"20738:8:7"},"referencedDeclaration":6576,"src":"20738:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":882,"mutability":"mutable","name":"sharesToRemove","nameLocation":"20777:14:7","nodeType":"VariableDeclaration","scope":893,"src":"20769:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":881,"name":"uint256","nodeType":"ElementaryTypeName","src":"20769:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":884,"mutability":"mutable","name":"minAmountUnderlyingOutRaw","nameLocation":"20809:25:7","nodeType":"VariableDeclaration","scope":893,"src":"20801:33:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":883,"name":"uint256","nodeType":"ElementaryTypeName","src":"20801:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":886,"mutability":"mutable","name":"minAmountWrappedOutRaw","nameLocation":"20852:22:7","nodeType":"VariableDeclaration","scope":893,"src":"20844:30:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":885,"name":"uint256","nodeType":"ElementaryTypeName","src":"20844:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20728:152:7"},"returnParameters":{"id":892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":889,"mutability":"mutable","name":"removedUnderlyingBalanceRaw","nameLocation":"20907:27:7","nodeType":"VariableDeclaration","scope":893,"src":"20899:35:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"20899:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":891,"mutability":"mutable","name":"removedWrappedBalanceRaw","nameLocation":"20944:24:7","nodeType":"VariableDeclaration","scope":893,"src":"20936:32:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":890,"name":"uint256","nodeType":"ElementaryTypeName","src":"20936:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20898:71:7"},"scope":941,"src":"20694:276:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":894,"nodeType":"StructuredDocumentation","src":"20976:382:7","text":" @notice Returns the asset registered for a given wrapped token.\n @dev The asset can never change after buffer initialization.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return underlyingToken Address of the underlying token registered for the wrapper; `address(0)` if the buffer\n has not been initialized."},"functionSelector":"0387587d","id":902,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferAsset","nameLocation":"21372:14:7","nodeType":"FunctionDefinition","parameters":{"id":898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":897,"mutability":"mutable","name":"wrappedToken","nameLocation":"21396:12:7","nodeType":"VariableDeclaration","scope":902,"src":"21387:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":896,"nodeType":"UserDefinedTypeName","pathNode":{"id":895,"name":"IERC4626","nameLocations":["21387:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"21387:8:7"},"referencedDeclaration":6576,"src":"21387:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"21386:23:7"},"returnParameters":{"id":901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":900,"mutability":"mutable","name":"underlyingToken","nameLocation":"21441:15:7","nodeType":"VariableDeclaration","scope":902,"src":"21433:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":899,"name":"address","nodeType":"ElementaryTypeName","src":"21433:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21432:25:7"},"scope":941,"src":"21363:95:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":903,"nodeType":"StructuredDocumentation","src":"21464:441:7","text":" @notice Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets\n in the buffer.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param liquidityOwner Address of the user that owns liquidity in the wrapped token's buffer\n @return ownerShares Amount of shares allocated to the liquidity owner, in native underlying token decimals"},"functionSelector":"9385e39a","id":913,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferOwnerShares","nameLocation":"21919:20:7","nodeType":"FunctionDefinition","parameters":{"id":909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"wrappedToken","nameLocation":"21958:12:7","nodeType":"VariableDeclaration","scope":913,"src":"21949:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":905,"nodeType":"UserDefinedTypeName","pathNode":{"id":904,"name":"IERC4626","nameLocations":["21949:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"21949:8:7"},"referencedDeclaration":6576,"src":"21949:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":908,"mutability":"mutable","name":"liquidityOwner","nameLocation":"21988:14:7","nodeType":"VariableDeclaration","scope":913,"src":"21980:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":907,"name":"address","nodeType":"ElementaryTypeName","src":"21980:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21939:69:7"},"returnParameters":{"id":912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":911,"mutability":"mutable","name":"ownerShares","nameLocation":"22040:11:7","nodeType":"VariableDeclaration","scope":913,"src":"22032:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":910,"name":"uint256","nodeType":"ElementaryTypeName","src":"22032:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22031:21:7"},"scope":941,"src":"21910:143:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":914,"nodeType":"StructuredDocumentation","src":"22059:281:7","text":" @notice Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return bufferShares Amount of supply shares of the buffer, in native underlying token decimals"},"functionSelector":"f2784e07","id":922,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferTotalShares","nameLocation":"22354:20:7","nodeType":"FunctionDefinition","parameters":{"id":918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":917,"mutability":"mutable","name":"wrappedToken","nameLocation":"22384:12:7","nodeType":"VariableDeclaration","scope":922,"src":"22375:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":916,"nodeType":"UserDefinedTypeName","pathNode":{"id":915,"name":"IERC4626","nameLocations":["22375:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"22375:8:7"},"referencedDeclaration":6576,"src":"22375:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"22374:23:7"},"returnParameters":{"id":921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":920,"mutability":"mutable","name":"bufferShares","nameLocation":"22429:12:7","nodeType":"VariableDeclaration","scope":922,"src":"22421:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":919,"name":"uint256","nodeType":"ElementaryTypeName","src":"22421:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22420:22:7"},"scope":941,"src":"22345:98:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":923,"nodeType":"StructuredDocumentation","src":"22449:521:7","text":" @notice Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\n @dev All values are in native token decimals of the wrapped or underlying tokens.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return underlyingBalanceRaw Amount of underlying tokens deposited into the buffer, in native token decimals\n @return wrappedBalanceRaw Amount of wrapped tokens deposited into the buffer, in native token decimals"},"functionSelector":"4021fe0f","id":933,"implemented":false,"kind":"function","modifiers":[],"name":"getBufferBalance","nameLocation":"22984:16:7","nodeType":"FunctionDefinition","parameters":{"id":927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":926,"mutability":"mutable","name":"wrappedToken","nameLocation":"23019:12:7","nodeType":"VariableDeclaration","scope":933,"src":"23010:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":925,"nodeType":"UserDefinedTypeName","pathNode":{"id":924,"name":"IERC4626","nameLocations":["23010:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"23010:8:7"},"referencedDeclaration":6576,"src":"23010:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"23000:37:7"},"returnParameters":{"id":932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"underlyingBalanceRaw","nameLocation":"23069:20:7","nodeType":"VariableDeclaration","scope":933,"src":"23061:28:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":928,"name":"uint256","nodeType":"ElementaryTypeName","src":"23061:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":931,"mutability":"mutable","name":"wrappedBalanceRaw","nameLocation":"23099:17:7","nodeType":"VariableDeclaration","scope":933,"src":"23091:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":930,"name":"uint256","nodeType":"ElementaryTypeName","src":"23091:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23060:57:7"},"scope":941,"src":"22975:143:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":934,"nodeType":"StructuredDocumentation","src":"23342:202:7","text":" @notice Sets a new Authorizer for the Vault.\n @dev This is a permissioned call. Emits an `AuthorizerChanged` event.\n @param newAuthorizer The address of the new authorizer"},"functionSelector":"058a628f","id":940,"implemented":false,"kind":"function","modifiers":[],"name":"setAuthorizer","nameLocation":"23558:13:7","nodeType":"FunctionDefinition","parameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":937,"mutability":"mutable","name":"newAuthorizer","nameLocation":"23584:13:7","nodeType":"VariableDeclaration","scope":940,"src":"23572:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"},"typeName":{"id":936,"nodeType":"UserDefinedTypeName","pathNode":{"id":935,"name":"IAuthorizer","nameLocations":["23572:11:7"],"nodeType":"IdentifierPath","referencedDeclaration":73,"src":"23572:11:7"},"referencedDeclaration":73,"src":"23572:11:7","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"23571:27:7"},"returnParameters":{"id":939,"nodeType":"ParameterList","parameters":[],"src":"23607:0:7"},"scope":941,"src":"23549:59:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":942,"src":"586:23024:7","usedErrors":[],"usedEvents":[]}],"src":"46:23565:7"},"id":7},"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol","exportedSymbols":{"IERC20":[6654],"IERC4626":[6576],"IVaultErrors":[1308]},"id":1309,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":943,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:8"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":945,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1309,"sourceUnit":6577,"src":"72:75:8","symbolAliases":[{"foreign":{"id":944,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6576,"src":"81:8:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":947,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1309,"sourceUnit":6655,"src":"148:72:8","symbolAliases":[{"foreign":{"id":946,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6654,"src":"157:6:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultErrors","contractDependencies":[],"contractKind":"interface","documentation":{"id":948,"nodeType":"StructuredDocumentation","src":"222:94:8","text":"@notice Errors are declared inside an interface (namespace) to improve DX with Typechain."},"fullyImplemented":true,"id":1308,"linearizedBaseContracts":[1308],"name":"IVaultErrors","nameLocation":"326:12:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":949,"nodeType":"StructuredDocumentation","src":"576:149:8","text":" @notice A pool has already been registered. `registerPool` may only be called once.\n @param pool The already registered pool"},"errorSelector":"db771c80","id":953,"name":"PoolAlreadyRegistered","nameLocation":"736:21:8","nodeType":"ErrorDefinition","parameters":{"id":952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":951,"mutability":"mutable","name":"pool","nameLocation":"766:4:8","nodeType":"VariableDeclaration","scope":953,"src":"758:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":950,"name":"address","nodeType":"ElementaryTypeName","src":"758:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"757:14:8"},"src":"730:42:8"},{"documentation":{"id":954,"nodeType":"StructuredDocumentation","src":"778:149:8","text":" @notice A pool has already been initialized. `initialize` may only be called once.\n @param pool The already initialized pool"},"errorSelector":"218e3747","id":958,"name":"PoolAlreadyInitialized","nameLocation":"938:22:8","nodeType":"ErrorDefinition","parameters":{"id":957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":956,"mutability":"mutable","name":"pool","nameLocation":"969:4:8","nodeType":"VariableDeclaration","scope":958,"src":"961:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":955,"name":"address","nodeType":"ElementaryTypeName","src":"961:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"960:14:8"},"src":"932:43:8"},{"documentation":{"id":959,"nodeType":"StructuredDocumentation","src":"981:99:8","text":" @notice A pool has not been registered.\n @param pool The unregistered pool"},"errorSelector":"9e51bd5c","id":963,"name":"PoolNotRegistered","nameLocation":"1091:17:8","nodeType":"ErrorDefinition","parameters":{"id":962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":961,"mutability":"mutable","name":"pool","nameLocation":"1117:4:8","nodeType":"VariableDeclaration","scope":963,"src":"1109:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":960,"name":"address","nodeType":"ElementaryTypeName","src":"1109:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1108:14:8"},"src":"1085:38:8"},{"documentation":{"id":964,"nodeType":"StructuredDocumentation","src":"1129:112:8","text":" @notice A referenced pool has not been initialized.\n @param pool The uninitialized pool"},"errorSelector":"4bdace13","id":968,"name":"PoolNotInitialized","nameLocation":"1252:18:8","nodeType":"ErrorDefinition","parameters":{"id":967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":966,"mutability":"mutable","name":"pool","nameLocation":"1279:4:8","nodeType":"VariableDeclaration","scope":968,"src":"1271:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":965,"name":"address","nodeType":"ElementaryTypeName","src":"1271:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1270:14:8"},"src":"1246:39:8"},{"documentation":{"id":969,"nodeType":"StructuredDocumentation","src":"1291:274:8","text":" @notice A hook contract rejected a pool on registration.\n @param poolHooksContract Address of the hook contract that rejected the pool registration\n @param pool Address of the rejected pool\n @param poolFactory Address of the pool factory"},"errorSelector":"fa93d814","id":977,"name":"HookRegistrationFailed","nameLocation":"1576:22:8","nodeType":"ErrorDefinition","parameters":{"id":976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":971,"mutability":"mutable","name":"poolHooksContract","nameLocation":"1607:17:8","nodeType":"VariableDeclaration","scope":977,"src":"1599:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":970,"name":"address","nodeType":"ElementaryTypeName","src":"1599:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":973,"mutability":"mutable","name":"pool","nameLocation":"1634:4:8","nodeType":"VariableDeclaration","scope":977,"src":"1626:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":972,"name":"address","nodeType":"ElementaryTypeName","src":"1626:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":975,"mutability":"mutable","name":"poolFactory","nameLocation":"1648:11:8","nodeType":"VariableDeclaration","scope":977,"src":"1640:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":974,"name":"address","nodeType":"ElementaryTypeName","src":"1640:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1598:62:8"},"src":"1570:91:8"},{"documentation":{"id":978,"nodeType":"StructuredDocumentation","src":"1667:136:8","text":" @notice A token was already registered (i.e., it is a duplicate in the pool).\n @param token The duplicate token"},"errorSelector":"4f4b634e","id":983,"name":"TokenAlreadyRegistered","nameLocation":"1814:22:8","nodeType":"ErrorDefinition","parameters":{"id":982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":981,"mutability":"mutable","name":"token","nameLocation":"1844:5:8","nodeType":"VariableDeclaration","scope":983,"src":"1837:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":980,"nodeType":"UserDefinedTypeName","pathNode":{"id":979,"name":"IERC20","nameLocations":["1837:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"1837:6:8"},"referencedDeclaration":6654,"src":"1837:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"1836:14:8"},"src":"1808:43:8"},{"documentation":{"id":984,"nodeType":"StructuredDocumentation","src":"1857:57:8","text":"@notice The token count is below the minimum allowed."},"errorSelector":"5ed4ba8f","id":986,"name":"MinTokens","nameLocation":"1925:9:8","nodeType":"ErrorDefinition","parameters":{"id":985,"nodeType":"ParameterList","parameters":[],"src":"1934:2:8"},"src":"1919:18:8"},{"documentation":{"id":987,"nodeType":"StructuredDocumentation","src":"1943:57:8","text":"@notice The token count is above the maximum allowed."},"errorSelector":"707bdf58","id":989,"name":"MaxTokens","nameLocation":"2011:9:8","nodeType":"ErrorDefinition","parameters":{"id":988,"nodeType":"ParameterList","parameters":[],"src":"2020:2:8"},"src":"2005:18:8"},{"documentation":{"id":990,"nodeType":"StructuredDocumentation","src":"2029:61:8","text":"@notice Invalid tokens (e.g., zero) cannot be registered."},"errorSelector":"c1ab6dc1","id":992,"name":"InvalidToken","nameLocation":"2101:12:8","nodeType":"ErrorDefinition","parameters":{"id":991,"nodeType":"ParameterList","parameters":[],"src":"2113:2:8"},"src":"2095:21:8"},{"documentation":{"id":993,"nodeType":"StructuredDocumentation","src":"2122:86:8","text":"@notice The token type given in a TokenConfig during pool registration is invalid."},"errorSelector":"a1e9dd9d","id":995,"name":"InvalidTokenType","nameLocation":"2219:16:8","nodeType":"ErrorDefinition","parameters":{"id":994,"nodeType":"ParameterList","parameters":[],"src":"2235:2:8"},"src":"2213:25:8"},{"documentation":{"id":996,"nodeType":"StructuredDocumentation","src":"2244:76:8","text":"@notice The data in a TokenConfig struct is inconsistent or unsupported."},"errorSelector":"df450632","id":998,"name":"InvalidTokenConfiguration","nameLocation":"2331:25:8","nodeType":"ErrorDefinition","parameters":{"id":997,"nodeType":"ParameterList","parameters":[],"src":"2356:2:8"},"src":"2325:34:8"},{"documentation":{"id":999,"nodeType":"StructuredDocumentation","src":"2365:64:8","text":"@notice Tokens with more than 18 decimals are not supported."},"errorSelector":"686d3607","id":1001,"name":"InvalidTokenDecimals","nameLocation":"2440:20:8","nodeType":"ErrorDefinition","parameters":{"id":1000,"nodeType":"ParameterList","parameters":[],"src":"2460:2:8"},"src":"2434:29:8"},{"documentation":{"id":1002,"nodeType":"StructuredDocumentation","src":"2469:287:8","text":" @notice The token list passed into an operation does not match the pool tokens in the pool.\n @param pool Address of the pool\n @param expectedToken The correct token at a given index in the pool\n @param actualToken The actual token found at that index"},"errorSelector":"ffe261a1","id":1010,"name":"TokensMismatch","nameLocation":"2767:14:8","nodeType":"ErrorDefinition","parameters":{"id":1009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1004,"mutability":"mutable","name":"pool","nameLocation":"2790:4:8","nodeType":"VariableDeclaration","scope":1010,"src":"2782:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1003,"name":"address","nodeType":"ElementaryTypeName","src":"2782:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1006,"mutability":"mutable","name":"expectedToken","nameLocation":"2804:13:8","nodeType":"VariableDeclaration","scope":1010,"src":"2796:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1005,"name":"address","nodeType":"ElementaryTypeName","src":"2796:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1008,"mutability":"mutable","name":"actualToken","nameLocation":"2827:11:8","nodeType":"VariableDeclaration","scope":1010,"src":"2819:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1007,"name":"address","nodeType":"ElementaryTypeName","src":"2819:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2781:58:8"},"src":"2761:79:8"},{"documentation":{"id":1011,"nodeType":"StructuredDocumentation","src":"3071:85:8","text":"@notice A transient accounting operation completed with outstanding token deltas."},"errorSelector":"20f1d86d","id":1013,"name":"BalanceNotSettled","nameLocation":"3167:17:8","nodeType":"ErrorDefinition","parameters":{"id":1012,"nodeType":"ParameterList","parameters":[],"src":"3184:2:8"},"src":"3161:26:8"},{"documentation":{"id":1014,"nodeType":"StructuredDocumentation","src":"3193:97:8","text":"@notice A user called a Vault function (swap, add/remove liquidity) outside the lock context."},"errorSelector":"c09ba736","id":1016,"name":"VaultIsNotUnlocked","nameLocation":"3301:18:8","nodeType":"ErrorDefinition","parameters":{"id":1015,"nodeType":"ParameterList","parameters":[],"src":"3319:2:8"},"src":"3295:27:8"},{"documentation":{"id":1017,"nodeType":"StructuredDocumentation","src":"3328:105:8","text":"@notice The pool has returned false to the beforeSwap hook, indicating the transaction should revert."},"errorSelector":"53f976d4","id":1019,"name":"DynamicSwapFeeHookFailed","nameLocation":"3444:24:8","nodeType":"ErrorDefinition","parameters":{"id":1018,"nodeType":"ParameterList","parameters":[],"src":"3468:2:8"},"src":"3438:33:8"},{"documentation":{"id":1020,"nodeType":"StructuredDocumentation","src":"3477:105:8","text":"@notice The pool has returned false to the beforeSwap hook, indicating the transaction should revert."},"errorSelector":"e91e17e7","id":1022,"name":"BeforeSwapHookFailed","nameLocation":"3593:20:8","nodeType":"ErrorDefinition","parameters":{"id":1021,"nodeType":"ParameterList","parameters":[],"src":"3613:2:8"},"src":"3587:29:8"},{"documentation":{"id":1023,"nodeType":"StructuredDocumentation","src":"3622:104:8","text":"@notice The pool has returned false to the afterSwap hook, indicating the transaction should revert."},"errorSelector":"15a29dec","id":1025,"name":"AfterSwapHookFailed","nameLocation":"3737:19:8","nodeType":"ErrorDefinition","parameters":{"id":1024,"nodeType":"ParameterList","parameters":[],"src":"3756:2:8"},"src":"3731:28:8"},{"documentation":{"id":1026,"nodeType":"StructuredDocumentation","src":"3765:111:8","text":"@notice The pool has returned false to the beforeInitialize hook, indicating the transaction should revert."},"errorSelector":"60612925","id":1028,"name":"BeforeInitializeHookFailed","nameLocation":"3887:26:8","nodeType":"ErrorDefinition","parameters":{"id":1027,"nodeType":"ParameterList","parameters":[],"src":"3913:2:8"},"src":"3881:35:8"},{"documentation":{"id":1029,"nodeType":"StructuredDocumentation","src":"3922:110:8","text":"@notice The pool has returned false to the afterInitialize hook, indicating the transaction should revert."},"errorSelector":"0f23dbc6","id":1031,"name":"AfterInitializeHookFailed","nameLocation":"4043:25:8","nodeType":"ErrorDefinition","parameters":{"id":1030,"nodeType":"ParameterList","parameters":[],"src":"4068:2:8"},"src":"4037:34:8"},{"documentation":{"id":1032,"nodeType":"StructuredDocumentation","src":"4077:113:8","text":"@notice The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert."},"errorSelector":"0b2eb652","id":1034,"name":"BeforeAddLiquidityHookFailed","nameLocation":"4201:28:8","nodeType":"ErrorDefinition","parameters":{"id":1033,"nodeType":"ParameterList","parameters":[],"src":"4229:2:8"},"src":"4195:37:8"},{"documentation":{"id":1035,"nodeType":"StructuredDocumentation","src":"4238:112:8","text":"@notice The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert."},"errorSelector":"e1249165","id":1037,"name":"AfterAddLiquidityHookFailed","nameLocation":"4361:27:8","nodeType":"ErrorDefinition","parameters":{"id":1036,"nodeType":"ParameterList","parameters":[],"src":"4388:2:8"},"src":"4355:36:8"},{"documentation":{"id":1038,"nodeType":"StructuredDocumentation","src":"4397:116:8","text":"@notice The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert."},"errorSelector":"2aaf8866","id":1040,"name":"BeforeRemoveLiquidityHookFailed","nameLocation":"4524:31:8","nodeType":"ErrorDefinition","parameters":{"id":1039,"nodeType":"ParameterList","parameters":[],"src":"4555:2:8"},"src":"4518:40:8"},{"documentation":{"id":1041,"nodeType":"StructuredDocumentation","src":"4564:115:8","text":"@notice The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert."},"errorSelector":"1d3391d8","id":1043,"name":"AfterRemoveLiquidityHookFailed","nameLocation":"4690:30:8","nodeType":"ErrorDefinition","parameters":{"id":1042,"nodeType":"ParameterList","parameters":[],"src":"4720:2:8"},"src":"4684:39:8"},{"documentation":{"id":1044,"nodeType":"StructuredDocumentation","src":"4729:115:8","text":"@notice An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance)."},"errorSelector":"e5d185cf","id":1046,"name":"RouterNotTrusted","nameLocation":"4855:16:8","nodeType":"ErrorDefinition","parameters":{"id":1045,"nodeType":"ParameterList","parameters":[],"src":"4871:2:8"},"src":"4849:25:8"},{"documentation":{"id":1047,"nodeType":"StructuredDocumentation","src":"5097:47:8","text":"@notice The user tried to swap zero tokens."},"errorSelector":"57a456b7","id":1049,"name":"AmountGivenZero","nameLocation":"5155:15:8","nodeType":"ErrorDefinition","parameters":{"id":1048,"nodeType":"ParameterList","parameters":[],"src":"5170:2:8"},"src":"5149:24:8"},{"documentation":{"id":1050,"nodeType":"StructuredDocumentation","src":"5179:58:8","text":"@notice The user attempted to swap a token for itself."},"errorSelector":"a54b181d","id":1052,"name":"CannotSwapSameToken","nameLocation":"5248:19:8","nodeType":"ErrorDefinition","parameters":{"id":1051,"nodeType":"ParameterList","parameters":[],"src":"5267:2:8"},"src":"5242:28:8"},{"documentation":{"id":1053,"nodeType":"StructuredDocumentation","src":"5276:137:8","text":" @notice The user attempted to operate with a token that is not in the pool.\n @param token The unregistered token"},"errorSelector":"ddef98d7","id":1058,"name":"TokenNotRegistered","nameLocation":"5424:18:8","nodeType":"ErrorDefinition","parameters":{"id":1057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1056,"mutability":"mutable","name":"token","nameLocation":"5450:5:8","nodeType":"VariableDeclaration","scope":1058,"src":"5443:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1055,"nodeType":"UserDefinedTypeName","pathNode":{"id":1054,"name":"IERC20","nameLocations":["5443:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"5443:6:8"},"referencedDeclaration":6654,"src":"5443:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"5442:14:8"},"src":"5418:39:8"},{"documentation":{"id":1059,"nodeType":"StructuredDocumentation","src":"5463:215:8","text":" @notice An amount in or out has exceeded the limit specified in the swap request.\n @param amount The total amount in or out\n @param limit The amount of the limit that has been exceeded"},"errorSelector":"e2ea151b","id":1065,"name":"SwapLimit","nameLocation":"5689:9:8","nodeType":"ErrorDefinition","parameters":{"id":1064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1061,"mutability":"mutable","name":"amount","nameLocation":"5707:6:8","nodeType":"VariableDeclaration","scope":1065,"src":"5699:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1060,"name":"uint256","nodeType":"ElementaryTypeName","src":"5699:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1063,"mutability":"mutable","name":"limit","nameLocation":"5723:5:8","nodeType":"VariableDeclaration","scope":1065,"src":"5715:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1062,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5698:31:8"},"src":"5683:47:8"},{"documentation":{"id":1066,"nodeType":"StructuredDocumentation","src":"5736:228:8","text":" @notice A hook adjusted amount in or out has exceeded the limit specified in the swap request.\n @param amount The total amount in or out\n @param limit The amount of the limit that has been exceeded"},"errorSelector":"cc0e4a99","id":1072,"name":"HookAdjustedSwapLimit","nameLocation":"5975:21:8","nodeType":"ErrorDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1068,"mutability":"mutable","name":"amount","nameLocation":"6005:6:8","nodeType":"VariableDeclaration","scope":1072,"src":"5997:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1067,"name":"uint256","nodeType":"ElementaryTypeName","src":"5997:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1070,"mutability":"mutable","name":"limit","nameLocation":"6021:5:8","nodeType":"VariableDeclaration","scope":1072,"src":"6013:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"6013:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5996:31:8"},"src":"5969:59:8"},{"documentation":{"id":1073,"nodeType":"StructuredDocumentation","src":"6034:87:8","text":"@notice The amount given or calculated for an operation is below the minimum limit."},"errorSelector":"1ed4d118","id":1075,"name":"TradeAmountTooSmall","nameLocation":"6132:19:8","nodeType":"ErrorDefinition","parameters":{"id":1074,"nodeType":"ParameterList","parameters":[],"src":"6151:2:8"},"src":"6126:28:8"},{"documentation":{"id":1076,"nodeType":"StructuredDocumentation","src":"6381:45:8","text":"@notice Add liquidity kind not supported."},"errorSelector":"6c02b395","id":1078,"name":"InvalidAddLiquidityKind","nameLocation":"6437:23:8","nodeType":"ErrorDefinition","parameters":{"id":1077,"nodeType":"ParameterList","parameters":[],"src":"6460:2:8"},"src":"6431:32:8"},{"documentation":{"id":1079,"nodeType":"StructuredDocumentation","src":"6469:264:8","text":" @notice A required amountIn exceeds the maximum limit specified for the operation.\n @param tokenIn The incoming token\n @param amountIn The total token amount in\n @param maxAmountIn The amount of the limit that has been exceeded"},"errorSelector":"8eda85e4","id":1088,"name":"AmountInAboveMax","nameLocation":"6744:16:8","nodeType":"ErrorDefinition","parameters":{"id":1087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1082,"mutability":"mutable","name":"tokenIn","nameLocation":"6768:7:8","nodeType":"VariableDeclaration","scope":1088,"src":"6761:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1081,"nodeType":"UserDefinedTypeName","pathNode":{"id":1080,"name":"IERC20","nameLocations":["6761:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"6761:6:8"},"referencedDeclaration":6654,"src":"6761:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1084,"mutability":"mutable","name":"amountIn","nameLocation":"6785:8:8","nodeType":"VariableDeclaration","scope":1088,"src":"6777:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"6777:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1086,"mutability":"mutable","name":"maxAmountIn","nameLocation":"6803:11:8","nodeType":"VariableDeclaration","scope":1088,"src":"6795:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1085,"name":"uint256","nodeType":"ElementaryTypeName","src":"6795:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6760:55:8"},"src":"6738:78:8"},{"documentation":{"id":1089,"nodeType":"StructuredDocumentation","src":"6822:269:8","text":" @notice A hook adjusted amountIn exceeds the maximum limit specified for the operation.\n @param tokenIn The incoming token\n @param amountIn The total token amount in\n @param maxAmountIn The amount of the limit that has been exceeded"},"errorSelector":"cefa3afa","id":1098,"name":"HookAdjustedAmountInAboveMax","nameLocation":"7102:28:8","nodeType":"ErrorDefinition","parameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1092,"mutability":"mutable","name":"tokenIn","nameLocation":"7138:7:8","nodeType":"VariableDeclaration","scope":1098,"src":"7131:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1091,"nodeType":"UserDefinedTypeName","pathNode":{"id":1090,"name":"IERC20","nameLocations":["7131:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"7131:6:8"},"referencedDeclaration":6654,"src":"7131:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1094,"mutability":"mutable","name":"amountIn","nameLocation":"7155:8:8","nodeType":"VariableDeclaration","scope":1098,"src":"7147:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1093,"name":"uint256","nodeType":"ElementaryTypeName","src":"7147:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1096,"mutability":"mutable","name":"maxAmountIn","nameLocation":"7173:11:8","nodeType":"VariableDeclaration","scope":1098,"src":"7165:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1095,"name":"uint256","nodeType":"ElementaryTypeName","src":"7165:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7130:55:8"},"src":"7096:90:8"},{"documentation":{"id":1099,"nodeType":"StructuredDocumentation","src":"7192:245:8","text":" @notice The BPT amount received from adding liquidity is below the minimum specified for the operation.\n @param amountOut The total BPT amount out\n @param minAmountOut The amount of the limit that has been exceeded"},"errorSelector":"8d261d5d","id":1105,"name":"BptAmountOutBelowMin","nameLocation":"7448:20:8","nodeType":"ErrorDefinition","parameters":{"id":1104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"amountOut","nameLocation":"7477:9:8","nodeType":"VariableDeclaration","scope":1105,"src":"7469:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"7469:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1103,"mutability":"mutable","name":"minAmountOut","nameLocation":"7496:12:8","nodeType":"VariableDeclaration","scope":1105,"src":"7488:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1102,"name":"uint256","nodeType":"ElementaryTypeName","src":"7488:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7468:41:8"},"src":"7442:68:8"},{"documentation":{"id":1106,"nodeType":"StructuredDocumentation","src":"7516:75:8","text":"@notice Pool does not support adding liquidity with a customized input."},"errorSelector":"4876c0bc","id":1108,"name":"DoesNotSupportAddLiquidityCustom","nameLocation":"7602:32:8","nodeType":"ErrorDefinition","parameters":{"id":1107,"nodeType":"ParameterList","parameters":[],"src":"7634:2:8"},"src":"7596:41:8"},{"documentation":{"id":1109,"nodeType":"StructuredDocumentation","src":"7643:68:8","text":"@notice Pool does not support adding liquidity through donation."},"errorSelector":"efe0265d","id":1111,"name":"DoesNotSupportDonation","nameLocation":"7722:22:8","nodeType":"ErrorDefinition","parameters":{"id":1110,"nodeType":"ParameterList","parameters":[],"src":"7744:2:8"},"src":"7716:31:8"},{"documentation":{"id":1112,"nodeType":"StructuredDocumentation","src":"7977:48:8","text":"@notice Remove liquidity kind not supported."},"errorSelector":"137a9a39","id":1114,"name":"InvalidRemoveLiquidityKind","nameLocation":"8036:26:8","nodeType":"ErrorDefinition","parameters":{"id":1113,"nodeType":"ParameterList","parameters":[],"src":"8062:2:8"},"src":"8030:35:8"},{"documentation":{"id":1115,"nodeType":"StructuredDocumentation","src":"8071:269:8","text":" @notice The actual amount out is below the minimum limit specified for the operation.\n @param tokenOut The outgoing token\n @param amountOut The total BPT amount out\n @param minAmountOut The amount of the limit that has been exceeded"},"errorSelector":"2f785e46","id":1124,"name":"AmountOutBelowMin","nameLocation":"8351:17:8","nodeType":"ErrorDefinition","parameters":{"id":1123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1118,"mutability":"mutable","name":"tokenOut","nameLocation":"8376:8:8","nodeType":"VariableDeclaration","scope":1124,"src":"8369:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1117,"nodeType":"UserDefinedTypeName","pathNode":{"id":1116,"name":"IERC20","nameLocations":["8369:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"8369:6:8"},"referencedDeclaration":6654,"src":"8369:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1120,"mutability":"mutable","name":"amountOut","nameLocation":"8394:9:8","nodeType":"VariableDeclaration","scope":1124,"src":"8386:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1119,"name":"uint256","nodeType":"ElementaryTypeName","src":"8386:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1122,"mutability":"mutable","name":"minAmountOut","nameLocation":"8413:12:8","nodeType":"VariableDeclaration","scope":1124,"src":"8405:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1121,"name":"uint256","nodeType":"ElementaryTypeName","src":"8405:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8368:58:8"},"src":"8345:82:8"},{"documentation":{"id":1125,"nodeType":"StructuredDocumentation","src":"8433:276:8","text":" @notice The hook adjusted amount out is below the minimum limit specified for the operation.\n @param tokenOut The outgoing token\n @param amountOut The total BPT amount out\n @param minAmountOut The amount of the limit that has been exceeded"},"errorSelector":"fbd8a724","id":1134,"name":"HookAdjustedAmountOutBelowMin","nameLocation":"8720:29:8","nodeType":"ErrorDefinition","parameters":{"id":1133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1128,"mutability":"mutable","name":"tokenOut","nameLocation":"8757:8:8","nodeType":"VariableDeclaration","scope":1134,"src":"8750:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1127,"nodeType":"UserDefinedTypeName","pathNode":{"id":1126,"name":"IERC20","nameLocations":["8750:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"8750:6:8"},"referencedDeclaration":6654,"src":"8750:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1130,"mutability":"mutable","name":"amountOut","nameLocation":"8775:9:8","nodeType":"VariableDeclaration","scope":1134,"src":"8767:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1129,"name":"uint256","nodeType":"ElementaryTypeName","src":"8767:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1132,"mutability":"mutable","name":"minAmountOut","nameLocation":"8794:12:8","nodeType":"VariableDeclaration","scope":1134,"src":"8786:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1131,"name":"uint256","nodeType":"ElementaryTypeName","src":"8786:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8749:58:8"},"src":"8714:94:8"},{"documentation":{"id":1135,"nodeType":"StructuredDocumentation","src":"8814:228:8","text":" @notice The required BPT amount in exceeds the maximum limit specified for the operation.\n @param amountIn The total BPT amount in\n @param maxAmountIn The amount of the limit that has been exceeded"},"errorSelector":"31d38e0b","id":1141,"name":"BptAmountInAboveMax","nameLocation":"9053:19:8","nodeType":"ErrorDefinition","parameters":{"id":1140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1137,"mutability":"mutable","name":"amountIn","nameLocation":"9081:8:8","nodeType":"VariableDeclaration","scope":1141,"src":"9073:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1136,"name":"uint256","nodeType":"ElementaryTypeName","src":"9073:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1139,"mutability":"mutable","name":"maxAmountIn","nameLocation":"9099:11:8","nodeType":"VariableDeclaration","scope":1141,"src":"9091:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1138,"name":"uint256","nodeType":"ElementaryTypeName","src":"9091:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9072:39:8"},"src":"9047:65:8"},{"documentation":{"id":1142,"nodeType":"StructuredDocumentation","src":"9118:77:8","text":"@notice Pool does not support removing liquidity with a customized input."},"errorSelector":"cf0a95c0","id":1144,"name":"DoesNotSupportRemoveLiquidityCustom","nameLocation":"9206:35:8","nodeType":"ErrorDefinition","parameters":{"id":1143,"nodeType":"ParameterList","parameters":[],"src":"9241:2:8"},"src":"9200:44:8"},{"documentation":{"id":1145,"nodeType":"StructuredDocumentation","src":"9463:332:8","text":" @notice Error raised when there is an overflow in the fee calculation.\n @dev This occurs when the sum of the parts (aggregate swap or yield fee) is greater than the whole\n (total swap or yield fee). Also validated when the protocol fee controller updates aggregate fee\n percentages in the Vault."},"errorSelector":"4c69ac5d","id":1147,"name":"ProtocolFeesExceedTotalCollected","nameLocation":"9806:32:8","nodeType":"ErrorDefinition","parameters":{"id":1146,"nodeType":"ParameterList","parameters":[],"src":"9838:2:8"},"src":"9800:41:8"},{"documentation":{"id":1148,"nodeType":"StructuredDocumentation","src":"9847:430:8","text":" @notice Error raised when the swap fee percentage is less than the minimum allowed value.\n @dev The Vault itself does not impose a universal minimum. Rather, it validates against the\n range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error\n if it is below the minimum value returned by the pool.\n Pools with dynamic fees do not check these limits."},"errorSelector":"bfb20688","id":1150,"name":"SwapFeePercentageTooLow","nameLocation":"10288:23:8","nodeType":"ErrorDefinition","parameters":{"id":1149,"nodeType":"ParameterList","parameters":[],"src":"10311:2:8"},"src":"10282:32:8"},{"documentation":{"id":1151,"nodeType":"StructuredDocumentation","src":"10320:433:8","text":" @notice Error raised when the swap fee percentage is greater than the maximum allowed value.\n @dev The Vault itself does not impose a universal minimum. Rather, it validates against the\n range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error\n if it is above the maximum value returned by the pool.\n Pools with dynamic fees do not check these limits."},"errorSelector":"7f47834b","id":1153,"name":"SwapFeePercentageTooHigh","nameLocation":"10764:24:8","nodeType":"ErrorDefinition","parameters":{"id":1152,"nodeType":"ParameterList","parameters":[],"src":"10788:2:8"},"src":"10758:33:8"},{"documentation":{"id":1154,"nodeType":"StructuredDocumentation","src":"10797:646:8","text":" @notice Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\n @dev Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit\n precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which\n corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%).\n Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between\n the aggregate fee calculated here and that stored in the Vault."},"errorSelector":"833fb3ce","id":1156,"name":"FeePrecisionTooHigh","nameLocation":"11454:19:8","nodeType":"ErrorDefinition","parameters":{"id":1155,"nodeType":"ParameterList","parameters":[],"src":"11473:2:8"},"src":"11448:28:8"},{"documentation":{"id":1157,"nodeType":"StructuredDocumentation","src":"11482:107:8","text":"@notice A given percentage is above the maximum (usually a value close to FixedPoint.ONE, or 1e18 wei)."},"errorSelector":"746e5940","id":1159,"name":"PercentageAboveMax","nameLocation":"11600:18:8","nodeType":"ErrorDefinition","parameters":{"id":1158,"nodeType":"ParameterList","parameters":[],"src":"11618:2:8"},"src":"11594:27:8"},{"documentation":{"id":1160,"nodeType":"StructuredDocumentation","src":"11842:78:8","text":"@notice A user tried to execute a query operation when they were disabled."},"errorSelector":"7a198886","id":1162,"name":"QueriesDisabled","nameLocation":"11931:15:8","nodeType":"ErrorDefinition","parameters":{"id":1161,"nodeType":"ParameterList","parameters":[],"src":"11946:2:8"},"src":"11925:24:8"},{"documentation":{"id":1163,"nodeType":"StructuredDocumentation","src":"11955:84:8","text":"@notice An admin tried to re-enable queries, but they were disabled permanently."},"errorSelector":"069f8cbc","id":1165,"name":"QueriesDisabledPermanently","nameLocation":"12050:26:8","nodeType":"ErrorDefinition","parameters":{"id":1164,"nodeType":"ParameterList","parameters":[],"src":"12076:2:8"},"src":"12044:35:8"},{"documentation":{"id":1166,"nodeType":"StructuredDocumentation","src":"12302:104:8","text":" @notice Cannot enable recovery mode when already enabled.\n @param pool The pool"},"errorSelector":"346d7607","id":1170,"name":"PoolInRecoveryMode","nameLocation":"12417:18:8","nodeType":"ErrorDefinition","parameters":{"id":1169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1168,"mutability":"mutable","name":"pool","nameLocation":"12444:4:8","nodeType":"VariableDeclaration","scope":1170,"src":"12436:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1167,"name":"address","nodeType":"ElementaryTypeName","src":"12436:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12435:14:8"},"src":"12411:39:8"},{"documentation":{"id":1171,"nodeType":"StructuredDocumentation","src":"12456:101:8","text":" @notice Cannot disable recovery mode when not enabled.\n @param pool The pool"},"errorSelector":"ef029adf","id":1175,"name":"PoolNotInRecoveryMode","nameLocation":"12568:21:8","nodeType":"ErrorDefinition","parameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1173,"mutability":"mutable","name":"pool","nameLocation":"12598:4:8","nodeType":"VariableDeclaration","scope":1175,"src":"12590:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1172,"name":"address","nodeType":"ElementaryTypeName","src":"12590:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12589:14:8"},"src":"12562:42:8"},{"documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"12828:206:8","text":" @notice Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\n @param sender The account attempting to call a permissioned function"},"errorSelector":"089676d5","id":1180,"name":"SenderIsNotVault","nameLocation":"13045:16:8","nodeType":"ErrorDefinition","parameters":{"id":1179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1178,"mutability":"mutable","name":"sender","nameLocation":"13070:6:8","nodeType":"VariableDeclaration","scope":1180,"src":"13062:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1177,"name":"address","nodeType":"ElementaryTypeName","src":"13062:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13061:16:8"},"src":"13039:39:8"},{"documentation":{"id":1181,"nodeType":"StructuredDocumentation","src":"13303:79:8","text":"@notice The caller specified a pause window period longer than the maximum."},"errorSelector":"cc0e8fe5","id":1183,"name":"VaultPauseWindowDurationTooLarge","nameLocation":"13393:32:8","nodeType":"ErrorDefinition","parameters":{"id":1182,"nodeType":"ParameterList","parameters":[],"src":"13425:2:8"},"src":"13387:41:8"},{"documentation":{"id":1184,"nodeType":"StructuredDocumentation","src":"13434:73:8","text":"@notice The caller specified a buffer period longer than the maximum."},"errorSelector":"9ea4efee","id":1186,"name":"PauseBufferPeriodDurationTooLarge","nameLocation":"13518:33:8","nodeType":"ErrorDefinition","parameters":{"id":1185,"nodeType":"ParameterList","parameters":[],"src":"13551:2:8"},"src":"13512:42:8"},{"documentation":{"id":1187,"nodeType":"StructuredDocumentation","src":"13560:76:8","text":"@notice A user tried to perform an operation while the Vault was paused."},"errorSelector":"da9f8b34","id":1189,"name":"VaultPaused","nameLocation":"13647:11:8","nodeType":"ErrorDefinition","parameters":{"id":1188,"nodeType":"ParameterList","parameters":[],"src":"13658:2:8"},"src":"13641:20:8"},{"documentation":{"id":1190,"nodeType":"StructuredDocumentation","src":"13667:73:8","text":"@notice Governance tried to unpause the Vault when it was not paused."},"errorSelector":"f7ff4dca","id":1192,"name":"VaultNotPaused","nameLocation":"13751:14:8","nodeType":"ErrorDefinition","parameters":{"id":1191,"nodeType":"ParameterList","parameters":[],"src":"13765:2:8"},"src":"13745:23:8"},{"documentation":{"id":1193,"nodeType":"StructuredDocumentation","src":"13774:79:8","text":"@notice Governance tried to pause the Vault after the pause period expired."},"errorSelector":"0e4460b7","id":1195,"name":"VaultPauseWindowExpired","nameLocation":"13864:23:8","nodeType":"ErrorDefinition","parameters":{"id":1194,"nodeType":"ParameterList","parameters":[],"src":"13887:2:8"},"src":"13858:32:8"},{"documentation":{"id":1196,"nodeType":"StructuredDocumentation","src":"13896:123:8","text":" @notice A user tried to perform an operation involving a paused Pool.\n @param pool The paused pool"},"errorSelector":"d971f597","id":1200,"name":"PoolPaused","nameLocation":"14030:10:8","nodeType":"ErrorDefinition","parameters":{"id":1199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1198,"mutability":"mutable","name":"pool","nameLocation":"14049:4:8","nodeType":"VariableDeclaration","scope":1200,"src":"14041:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1197,"name":"address","nodeType":"ElementaryTypeName","src":"14041:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14040:14:8"},"src":"14024:31:8"},{"documentation":{"id":1201,"nodeType":"StructuredDocumentation","src":"14061:124:8","text":" @notice Governance tried to unpause the Pool when it was not paused.\n @param pool The unpaused pool"},"errorSelector":"fdcd6894","id":1205,"name":"PoolNotPaused","nameLocation":"14196:13:8","nodeType":"ErrorDefinition","parameters":{"id":1204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1203,"mutability":"mutable","name":"pool","nameLocation":"14218:4:8","nodeType":"VariableDeclaration","scope":1205,"src":"14210:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1202,"name":"address","nodeType":"ElementaryTypeName","src":"14210:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14209:14:8"},"src":"14190:34:8"},{"documentation":{"id":1206,"nodeType":"StructuredDocumentation","src":"14230:119:8","text":" @notice Governance tried to pause a Pool after the pause period expired.\n @param pool The pool"},"errorSelector":"eb5a1217","id":1210,"name":"PoolPauseWindowExpired","nameLocation":"14360:22:8","nodeType":"ErrorDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"pool","nameLocation":"14391:4:8","nodeType":"VariableDeclaration","scope":1210,"src":"14383:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1207,"name":"address","nodeType":"ElementaryTypeName","src":"14383:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14382:14:8"},"src":"14354:43:8"},{"documentation":{"id":1211,"nodeType":"StructuredDocumentation","src":"14628:163:8","text":" @notice The buffer for the given wrapped token was already initialized.\n @param wrappedToken The wrapped token corresponding to the buffer"},"errorSelector":"1690fa40","id":1216,"name":"BufferAlreadyInitialized","nameLocation":"14802:24:8","nodeType":"ErrorDefinition","parameters":{"id":1215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1214,"mutability":"mutable","name":"wrappedToken","nameLocation":"14836:12:8","nodeType":"VariableDeclaration","scope":1216,"src":"14827:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1213,"nodeType":"UserDefinedTypeName","pathNode":{"id":1212,"name":"IERC4626","nameLocations":["14827:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"14827:8:8"},"referencedDeclaration":6576,"src":"14827:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"14826:23:8"},"src":"14796:54:8"},{"documentation":{"id":1217,"nodeType":"StructuredDocumentation","src":"14856:159:8","text":" @notice The buffer for the given wrapped token was not initialized.\n @param wrappedToken The wrapped token corresponding to the buffer"},"errorSelector":"85f41299","id":1222,"name":"BufferNotInitialized","nameLocation":"15026:20:8","nodeType":"ErrorDefinition","parameters":{"id":1221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1220,"mutability":"mutable","name":"wrappedToken","nameLocation":"15056:12:8","nodeType":"VariableDeclaration","scope":1222,"src":"15047:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1219,"nodeType":"UserDefinedTypeName","pathNode":{"id":1218,"name":"IERC4626","nameLocations":["15047:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"15047:8:8"},"referencedDeclaration":6576,"src":"15047:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"15046:23:8"},"src":"15020:50:8"},{"documentation":{"id":1223,"nodeType":"StructuredDocumentation","src":"15076:90:8","text":"@notice The user is trying to remove more than their allocated shares from the buffer."},"errorSelector":"98c5dbd6","id":1225,"name":"NotEnoughBufferShares","nameLocation":"15177:21:8","nodeType":"ErrorDefinition","parameters":{"id":1224,"nodeType":"ParameterList","parameters":[],"src":"15198:2:8"},"src":"15171:30:8"},{"documentation":{"id":1226,"nodeType":"StructuredDocumentation","src":"15207:436:8","text":" @notice The wrapped token asset does not match the underlying token.\n @dev This should never happen, but a malicious wrapper contract might not return the correct address.\n Legitimate wrapper contracts should make the asset a constant or immutable value.\n @param wrappedToken The wrapped token corresponding to the buffer\n @param underlyingToken The underlying token returned by `asset`"},"errorSelector":"36b18d09","id":1233,"name":"WrongUnderlyingToken","nameLocation":"15654:20:8","nodeType":"ErrorDefinition","parameters":{"id":1232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1229,"mutability":"mutable","name":"wrappedToken","nameLocation":"15684:12:8","nodeType":"VariableDeclaration","scope":1233,"src":"15675:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1228,"nodeType":"UserDefinedTypeName","pathNode":{"id":1227,"name":"IERC4626","nameLocations":["15675:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"15675:8:8"},"referencedDeclaration":6576,"src":"15675:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1231,"mutability":"mutable","name":"underlyingToken","nameLocation":"15706:15:8","nodeType":"VariableDeclaration","scope":1233,"src":"15698:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1230,"name":"address","nodeType":"ElementaryTypeName","src":"15698:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15674:48:8"},"src":"15648:75:8"},{"documentation":{"id":1234,"nodeType":"StructuredDocumentation","src":"15729:322:8","text":" @notice A wrapped token reported the zero address as its underlying token asset.\n @dev This should never happen, but a malicious wrapper contract might do this (e.g., in an attempt to\n re-initialize the buffer).\n @param wrappedToken The wrapped token corresponding to the buffer"},"errorSelector":"d407f9c5","id":1239,"name":"InvalidUnderlyingToken","nameLocation":"16062:22:8","nodeType":"ErrorDefinition","parameters":{"id":1238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1237,"mutability":"mutable","name":"wrappedToken","nameLocation":"16094:12:8","nodeType":"VariableDeclaration","scope":1239,"src":"16085:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1236,"nodeType":"UserDefinedTypeName","pathNode":{"id":1235,"name":"IERC4626","nameLocations":["16085:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"16085:8:8"},"referencedDeclaration":6576,"src":"16085:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"16084:23:8"},"src":"16056:52:8"},{"documentation":{"id":1240,"nodeType":"StructuredDocumentation","src":"16114:183:8","text":" @notice The amount given to wrap/unwrap was too small, which can introduce rounding issues.\n @param wrappedToken The wrapped token corresponding to the buffer"},"errorSelector":"18fe7385","id":1245,"name":"WrapAmountTooSmall","nameLocation":"16308:18:8","nodeType":"ErrorDefinition","parameters":{"id":1244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1243,"mutability":"mutable","name":"wrappedToken","nameLocation":"16336:12:8","nodeType":"VariableDeclaration","scope":1245,"src":"16327:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1242,"nodeType":"UserDefinedTypeName","pathNode":{"id":1241,"name":"IERC4626","nameLocations":["16327:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"16327:8:8"},"referencedDeclaration":6576,"src":"16327:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"16326:23:8"},"src":"16302:48:8"},{"documentation":{"id":1246,"nodeType":"StructuredDocumentation","src":"16356:70:8","text":"@notice Buffer operation attempted while vault buffers are paused."},"errorSelector":"0f27df09","id":1248,"name":"VaultBuffersArePaused","nameLocation":"16437:21:8","nodeType":"ErrorDefinition","parameters":{"id":1247,"nodeType":"ParameterList","parameters":[],"src":"16458:2:8"},"src":"16431:30:8"},{"documentation":{"id":1249,"nodeType":"StructuredDocumentation","src":"16467:58:8","text":"@notice Buffer shares were minted to the zero address."},"errorSelector":"dbe6b10e","id":1251,"name":"BufferSharesInvalidReceiver","nameLocation":"16536:27:8","nodeType":"ErrorDefinition","parameters":{"id":1250,"nodeType":"ParameterList","parameters":[],"src":"16563:2:8"},"src":"16530:36:8"},{"documentation":{"id":1252,"nodeType":"StructuredDocumentation","src":"16572:60:8","text":"@notice Buffer shares were burned from the zero address."},"errorSelector":"586d06df","id":1254,"name":"BufferSharesInvalidOwner","nameLocation":"16643:24:8","nodeType":"ErrorDefinition","parameters":{"id":1253,"nodeType":"ParameterList","parameters":[],"src":"16667:2:8"},"src":"16637:33:8"},{"documentation":{"id":1255,"nodeType":"StructuredDocumentation","src":"16676:173:8","text":" @notice The total supply of a buffer can't be lower than the absolute minimum.\n @param totalSupply The total supply value that was below the minimum"},"errorSelector":"34bdbfaa","id":1259,"name":"BufferTotalSupplyTooLow","nameLocation":"16860:23:8","nodeType":"ErrorDefinition","parameters":{"id":1258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1257,"mutability":"mutable","name":"totalSupply","nameLocation":"16892:11:8","nodeType":"VariableDeclaration","scope":1259,"src":"16884:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1256,"name":"uint256","nodeType":"ElementaryTypeName","src":"16884:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16883:21:8"},"src":"16854:51:8"},{"documentation":{"id":1260,"nodeType":"StructuredDocumentation","src":"16911:97:8","text":"@dev A wrap/unwrap operation consumed more or returned less underlying tokens than it should."},"errorSelector":"1c6a5375","id":1269,"name":"NotEnoughUnderlying","nameLocation":"17019:19:8","nodeType":"ErrorDefinition","parameters":{"id":1268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"wrappedToken","nameLocation":"17048:12:8","nodeType":"VariableDeclaration","scope":1269,"src":"17039:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1262,"nodeType":"UserDefinedTypeName","pathNode":{"id":1261,"name":"IERC4626","nameLocations":["17039:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"17039:8:8"},"referencedDeclaration":6576,"src":"17039:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1265,"mutability":"mutable","name":"expectedUnderlyingAmount","nameLocation":"17070:24:8","nodeType":"VariableDeclaration","scope":1269,"src":"17062:32:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1264,"name":"uint256","nodeType":"ElementaryTypeName","src":"17062:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1267,"mutability":"mutable","name":"actualUnderlyingAmount","nameLocation":"17104:22:8","nodeType":"VariableDeclaration","scope":1269,"src":"17096:30:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1266,"name":"uint256","nodeType":"ElementaryTypeName","src":"17096:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17038:89:8"},"src":"17013:115:8"},{"documentation":{"id":1270,"nodeType":"StructuredDocumentation","src":"17134:94:8","text":"@dev A wrap/unwrap operation consumed more or returned less wrapped tokens than it should."},"errorSelector":"1149424d","id":1279,"name":"NotEnoughWrapped","nameLocation":"17239:16:8","nodeType":"ErrorDefinition","parameters":{"id":1278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1273,"mutability":"mutable","name":"wrappedToken","nameLocation":"17265:12:8","nodeType":"VariableDeclaration","scope":1279,"src":"17256:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1272,"nodeType":"UserDefinedTypeName","pathNode":{"id":1271,"name":"IERC4626","nameLocations":["17256:8:8"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"17256:8:8"},"referencedDeclaration":6576,"src":"17256:8:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1275,"mutability":"mutable","name":"expectedWrappedAmount","nameLocation":"17287:21:8","nodeType":"VariableDeclaration","scope":1279,"src":"17279:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1274,"name":"uint256","nodeType":"ElementaryTypeName","src":"17279:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1277,"mutability":"mutable","name":"actualWrappedAmount","nameLocation":"17318:19:8","nodeType":"VariableDeclaration","scope":1279,"src":"17310:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1276,"name":"uint256","nodeType":"ElementaryTypeName","src":"17310:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17255:83:8"},"src":"17233:106:8"},{"documentation":{"id":1280,"nodeType":"StructuredDocumentation","src":"17345:76:8","text":"@dev Shares issued during initialization are below the requested amount."},"errorSelector":"da0cb07e","id":1286,"name":"IssuedSharesBelowMin","nameLocation":"17432:20:8","nodeType":"ErrorDefinition","parameters":{"id":1285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1282,"mutability":"mutable","name":"issuedShares","nameLocation":"17461:12:8","nodeType":"VariableDeclaration","scope":1286,"src":"17453:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1281,"name":"uint256","nodeType":"ElementaryTypeName","src":"17453:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1284,"mutability":"mutable","name":"minIssuedShares","nameLocation":"17483:15:8","nodeType":"VariableDeclaration","scope":1286,"src":"17475:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1283,"name":"uint256","nodeType":"ElementaryTypeName","src":"17475:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17452:47:8"},"src":"17426:74:8"},{"documentation":{"id":1287,"nodeType":"StructuredDocumentation","src":"17727:87:8","text":"@notice Pool does not support adding / removing liquidity with an unbalanced input."},"errorSelector":"d4f5779c","id":1289,"name":"DoesNotSupportUnbalancedLiquidity","nameLocation":"17825:33:8","nodeType":"ErrorDefinition","parameters":{"id":1288,"nodeType":"ParameterList","parameters":[],"src":"17858:2:8"},"src":"17819:42:8"},{"documentation":{"id":1290,"nodeType":"StructuredDocumentation","src":"17867:48:8","text":"@notice The contract should not receive ETH."},"errorSelector":"f2238896","id":1292,"name":"CannotReceiveEth","nameLocation":"17926:16:8","nodeType":"ErrorDefinition","parameters":{"id":1291,"nodeType":"ParameterList","parameters":[],"src":"17942:2:8"},"src":"17920:25:8"},{"documentation":{"id":1293,"nodeType":"StructuredDocumentation","src":"17951:156:8","text":" @notice The `VaultExtension` contract was called by an account directly.\n @dev It can only be called by the Vault via delegatecall."},"errorSelector":"9fd25b36","id":1295,"name":"NotVaultDelegateCall","nameLocation":"18118:20:8","nodeType":"ErrorDefinition","parameters":{"id":1294,"nodeType":"ParameterList","parameters":[],"src":"18138:2:8"},"src":"18112:29:8"},{"documentation":{"id":1296,"nodeType":"StructuredDocumentation","src":"18147:89:8","text":"@notice The `VaultExtension` contract was configured with an incorrect Vault address."},"errorSelector":"1ab9d9d0","id":1298,"name":"WrongVaultExtensionDeployment","nameLocation":"18247:29:8","nodeType":"ErrorDefinition","parameters":{"id":1297,"nodeType":"ParameterList","parameters":[],"src":"18276:2:8"},"src":"18241:38:8"},{"documentation":{"id":1299,"nodeType":"StructuredDocumentation","src":"18285:96:8","text":"@notice The `ProtocolFeeController` contract was configured with an incorrect Vault address."},"errorSelector":"1bbe95c7","id":1301,"name":"WrongProtocolFeeControllerDeployment","nameLocation":"18392:36:8","nodeType":"ErrorDefinition","parameters":{"id":1300,"nodeType":"ParameterList","parameters":[],"src":"18428:2:8"},"src":"18386:45:8"},{"documentation":{"id":1302,"nodeType":"StructuredDocumentation","src":"18437:85:8","text":"@notice The `VaultAdmin` contract was configured with an incorrect Vault address."},"errorSelector":"82cc28b6","id":1304,"name":"WrongVaultAdminDeployment","nameLocation":"18533:25:8","nodeType":"ErrorDefinition","parameters":{"id":1303,"nodeType":"ParameterList","parameters":[],"src":"18558:2:8"},"src":"18527:34:8"},{"documentation":{"id":1305,"nodeType":"StructuredDocumentation","src":"18567:54:8","text":"@notice Quote reverted with a reserved error code."},"errorSelector":"28f95541","id":1307,"name":"QuoteResultSpoofed","nameLocation":"18632:18:8","nodeType":"ErrorDefinition","parameters":{"id":1306,"nodeType":"ParameterList","parameters":[],"src":"18650:2:8"},"src":"18626:27:8"}],"scope":1309,"src":"316:18339:8","usedErrors":[953,958,963,968,977,983,986,989,992,995,998,1001,1010,1013,1016,1019,1022,1025,1028,1031,1034,1037,1040,1043,1046,1049,1052,1058,1065,1072,1075,1078,1088,1098,1105,1108,1111,1114,1124,1134,1141,1144,1147,1150,1153,1156,1159,1162,1165,1170,1175,1180,1183,1186,1189,1192,1195,1200,1205,1210,1216,1222,1225,1233,1239,1245,1248,1251,1254,1259,1269,1279,1286,1289,1292,1295,1298,1301,1304,1307],"usedEvents":[]}],"src":"46:18610:8"},"id":8},"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol","exportedSymbols":{"AddLiquidityKind":[2347],"AddLiquidityParams":[2363],"AfterSwapParams":[2341],"BufferWrapOrUnwrapParams":[2402],"FEE_BITLENGTH":[2405],"FEE_SCALING_FACTOR":[2408],"HookFlags":[2167],"HooksConfig":[2191],"IAuthorizer":[73],"IERC20":[6654],"IERC4626":[6576],"IHooks":[275],"IProtocolFeeController":[613],"IRateProvider":[57],"IVaultEvents":[1547],"LiquidityManagement":[2120],"MAX_FEE_PERCENTAGE":[2411],"PoolConfig":[2145],"PoolConfigBits":[2122],"PoolData":[2269],"PoolRoleAccounts":[2217],"PoolSwapParams":[2312],"RemoveLiquidityKind":[2368],"RemoveLiquidityParams":[2384],"Rounding":[2272],"SwapKind":[2275],"SwapState":[2201],"TokenConfig":[2234],"TokenInfo":[2244],"TokenType":[2221],"VaultState":[2209],"VaultSwapParams":[2294],"WrappingDirection":[2387]},"id":1548,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1310,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:9"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":1312,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1548,"sourceUnit":6577,"src":"72:75:9","symbolAliases":[{"foreign":{"id":1311,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6576,"src":"81:8:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":1314,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1548,"sourceUnit":6655,"src":"148:72:9","symbolAliases":[{"foreign":{"id":1313,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6654,"src":"157:6:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"./IProtocolFeeController.sol","id":1316,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1548,"sourceUnit":614,"src":"222:70:9","symbolAliases":[{"foreign":{"id":1315,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"231:22:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","file":"./IAuthorizer.sol","id":1318,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1548,"sourceUnit":74,"src":"293:48:9","symbolAliases":[{"foreign":{"id":1317,"name":"IAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"302:11:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol","file":"./IHooks.sol","id":1320,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1548,"sourceUnit":276,"src":"342:38:9","symbolAliases":[{"foreign":{"id":1319,"name":"IHooks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"351:6:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":1321,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1548,"sourceUnit":2412,"src":"381:26:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultEvents","contractDependencies":[],"contractKind":"interface","documentation":{"id":1322,"nodeType":"StructuredDocumentation","src":"409:91:9","text":"@dev Events are declared inside an interface (namespace) to improve DX with Typechain."},"fullyImplemented":true,"id":1547,"linearizedBaseContracts":[1547],"name":"IVaultEvents","nameLocation":"510:12:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1323,"nodeType":"StructuredDocumentation","src":"529:657:9","text":" @notice A Pool was registered by calling `registerPool`.\n @param pool The pool being registered\n @param factory The factory creating the pool\n @param tokenConfig An array of descriptors for the tokens the pool will manage\n @param swapFeePercentage The static swap fee of the pool\n @param pauseWindowEndTime The pool's pause window end time\n @param roleAccounts Addresses the Vault will allow to change certain pool settings\n @param hooksConfig Flags indicating which hooks the pool supports and address of hooks contract\n @param liquidityManagement Supported liquidity management hook flags"},"eventSelector":"bc1561eeab9f40962e2fb827a7ff9c7cdb47a9d7c84caeefa4ed90e043842dad","id":1346,"name":"PoolRegistered","nameLocation":"1197:14:9","nodeType":"EventDefinition","parameters":{"id":1345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1325,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1237:4:9","nodeType":"VariableDeclaration","scope":1346,"src":"1221:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1324,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1327,"indexed":true,"mutability":"mutable","name":"factory","nameLocation":"1267:7:9","nodeType":"VariableDeclaration","scope":1346,"src":"1251:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1326,"name":"address","nodeType":"ElementaryTypeName","src":"1251:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1331,"indexed":false,"mutability":"mutable","name":"tokenConfig","nameLocation":"1298:11:9","nodeType":"VariableDeclaration","scope":1346,"src":"1284:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2234_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenConfig[]"},"typeName":{"baseType":{"id":1329,"nodeType":"UserDefinedTypeName","pathNode":{"id":1328,"name":"TokenConfig","nameLocations":["1284:11:9"],"nodeType":"IdentifierPath","referencedDeclaration":2234,"src":"1284:11:9"},"referencedDeclaration":2234,"src":"1284:11:9","typeDescriptions":{"typeIdentifier":"t_struct$_TokenConfig_$2234_storage_ptr","typeString":"struct TokenConfig"}},"id":1330,"nodeType":"ArrayTypeName","src":"1284:13:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2234_storage_$dyn_storage_ptr","typeString":"struct TokenConfig[]"}},"visibility":"internal"},{"constant":false,"id":1333,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"1327:17:9","nodeType":"VariableDeclaration","scope":1346,"src":"1319:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1332,"name":"uint256","nodeType":"ElementaryTypeName","src":"1319:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1335,"indexed":false,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"1361:18:9","nodeType":"VariableDeclaration","scope":1346,"src":"1354:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1334,"name":"uint32","nodeType":"ElementaryTypeName","src":"1354:6:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1338,"indexed":false,"mutability":"mutable","name":"roleAccounts","nameLocation":"1406:12:9","nodeType":"VariableDeclaration","scope":1346,"src":"1389:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2217_memory_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":1337,"nodeType":"UserDefinedTypeName","pathNode":{"id":1336,"name":"PoolRoleAccounts","nameLocations":["1389:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":2217,"src":"1389:16:9"},"referencedDeclaration":2217,"src":"1389:16:9","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2217_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"},{"constant":false,"id":1341,"indexed":false,"mutability":"mutable","name":"hooksConfig","nameLocation":"1440:11:9","nodeType":"VariableDeclaration","scope":1346,"src":"1428:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2191_memory_ptr","typeString":"struct HooksConfig"},"typeName":{"id":1340,"nodeType":"UserDefinedTypeName","pathNode":{"id":1339,"name":"HooksConfig","nameLocations":["1428:11:9"],"nodeType":"IdentifierPath","referencedDeclaration":2191,"src":"1428:11:9"},"referencedDeclaration":2191,"src":"1428:11:9","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2191_storage_ptr","typeString":"struct HooksConfig"}},"visibility":"internal"},{"constant":false,"id":1344,"indexed":false,"mutability":"mutable","name":"liquidityManagement","nameLocation":"1481:19:9","nodeType":"VariableDeclaration","scope":1346,"src":"1461:39:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2120_memory_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":1343,"nodeType":"UserDefinedTypeName","pathNode":{"id":1342,"name":"LiquidityManagement","nameLocations":["1461:19:9"],"nodeType":"IdentifierPath","referencedDeclaration":2120,"src":"1461:19:9"},"referencedDeclaration":2120,"src":"1461:19:9","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2120_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"}],"src":"1211:295:9"},"src":"1191:316:9"},{"anonymous":false,"documentation":{"id":1347,"nodeType":"StructuredDocumentation","src":"1513:120:9","text":" @notice A Pool was initialized by calling `initialize`.\n @param pool The pool being initialized"},"eventSelector":"cad8c9d32507393b6508ca4a888b81979919b477510585bde8488f153072d6f3","id":1351,"name":"PoolInitialized","nameLocation":"1644:15:9","nodeType":"EventDefinition","parameters":{"id":1350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1349,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"1676:4:9","nodeType":"VariableDeclaration","scope":1351,"src":"1660:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1348,"name":"address","nodeType":"ElementaryTypeName","src":"1660:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1659:22:9"},"src":"1638:44:9"},{"anonymous":false,"documentation":{"id":1352,"nodeType":"StructuredDocumentation","src":"1688:478:9","text":" @notice A swap has occurred.\n @param pool The pool with the tokens being swapped\n @param tokenIn The token entering the Vault (balance increases)\n @param tokenOut The token leaving the Vault (balance decreases)\n @param amountIn Number of tokenIn tokens\n @param amountOut Number of tokenOut tokens\n @param swapFeePercentage Swap fee percentage applied (can differ if dynamic)\n @param swapFeeAmount Swap fee amount paid"},"eventSelector":"0874b2d545cb271cdbda4e093020c452328b24af12382ed62c4d00f5c26709db","id":1370,"name":"Swap","nameLocation":"2177:4:9","nodeType":"EventDefinition","parameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1354,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"2207:4:9","nodeType":"VariableDeclaration","scope":1370,"src":"2191:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1353,"name":"address","nodeType":"ElementaryTypeName","src":"2191:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1357,"indexed":true,"mutability":"mutable","name":"tokenIn","nameLocation":"2236:7:9","nodeType":"VariableDeclaration","scope":1370,"src":"2221:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1356,"nodeType":"UserDefinedTypeName","pathNode":{"id":1355,"name":"IERC20","nameLocations":["2221:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"2221:6:9"},"referencedDeclaration":6654,"src":"2221:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1360,"indexed":true,"mutability":"mutable","name":"tokenOut","nameLocation":"2268:8:9","nodeType":"VariableDeclaration","scope":1370,"src":"2253:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1359,"nodeType":"UserDefinedTypeName","pathNode":{"id":1358,"name":"IERC20","nameLocations":["2253:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"2253:6:9"},"referencedDeclaration":6654,"src":"2253:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1362,"indexed":false,"mutability":"mutable","name":"amountIn","nameLocation":"2294:8:9","nodeType":"VariableDeclaration","scope":1370,"src":"2286:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1361,"name":"uint256","nodeType":"ElementaryTypeName","src":"2286:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1364,"indexed":false,"mutability":"mutable","name":"amountOut","nameLocation":"2320:9:9","nodeType":"VariableDeclaration","scope":1370,"src":"2312:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1363,"name":"uint256","nodeType":"ElementaryTypeName","src":"2312:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1366,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"2347:17:9","nodeType":"VariableDeclaration","scope":1370,"src":"2339:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1365,"name":"uint256","nodeType":"ElementaryTypeName","src":"2339:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1368,"indexed":false,"mutability":"mutable","name":"swapFeeAmount","nameLocation":"2382:13:9","nodeType":"VariableDeclaration","scope":1370,"src":"2374:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1367,"name":"uint256","nodeType":"ElementaryTypeName","src":"2374:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2181:220:9"},"src":"2171:231:9"},{"anonymous":false,"documentation":{"id":1371,"nodeType":"StructuredDocumentation","src":"2408:352:9","text":" @notice A wrap operation has occurred.\n @param wrappedToken The wrapped token address\n @param depositedUnderlying Number of underlying tokens deposited\n @param mintedShares Number of shares (wrapped tokens) minted\n @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)"},"eventSelector":"3771d13c67011e31e12031c54bb59b0bf544a80b81d280a3711e172aa8b7f47b","id":1382,"name":"Wrap","nameLocation":"2771:4:9","nodeType":"EventDefinition","parameters":{"id":1381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1374,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"2802:12:9","nodeType":"VariableDeclaration","scope":1382,"src":"2785:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1373,"nodeType":"UserDefinedTypeName","pathNode":{"id":1372,"name":"IERC4626","nameLocations":["2785:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"2785:8:9"},"referencedDeclaration":6576,"src":"2785:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1376,"indexed":false,"mutability":"mutable","name":"depositedUnderlying","nameLocation":"2832:19:9","nodeType":"VariableDeclaration","scope":1382,"src":"2824:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1375,"name":"uint256","nodeType":"ElementaryTypeName","src":"2824:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1378,"indexed":false,"mutability":"mutable","name":"mintedShares","nameLocation":"2869:12:9","nodeType":"VariableDeclaration","scope":1382,"src":"2861:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1377,"name":"uint256","nodeType":"ElementaryTypeName","src":"2861:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1380,"indexed":false,"mutability":"mutable","name":"bufferBalances","nameLocation":"2899:14:9","nodeType":"VariableDeclaration","scope":1382,"src":"2891:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2891:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2775:144:9"},"src":"2765:155:9"},{"anonymous":false,"documentation":{"id":1383,"nodeType":"StructuredDocumentation","src":"2926:355:9","text":" @notice An unwrap operation has occurred.\n @param wrappedToken The wrapped token address\n @param burnedShares Number of shares (wrapped tokens) burned\n @param withdrawnUnderlying Number of underlying tokens withdrawn\n @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)"},"eventSelector":"eeb740c90bf2b18c9532eb7d473137767036d893dff3e009f32718f821b2a4c0","id":1394,"name":"Unwrap","nameLocation":"3292:6:9","nodeType":"EventDefinition","parameters":{"id":1393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1386,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"3325:12:9","nodeType":"VariableDeclaration","scope":1394,"src":"3308:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1385,"nodeType":"UserDefinedTypeName","pathNode":{"id":1384,"name":"IERC4626","nameLocations":["3308:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"3308:8:9"},"referencedDeclaration":6576,"src":"3308:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1388,"indexed":false,"mutability":"mutable","name":"burnedShares","nameLocation":"3355:12:9","nodeType":"VariableDeclaration","scope":1394,"src":"3347:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1387,"name":"uint256","nodeType":"ElementaryTypeName","src":"3347:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1390,"indexed":false,"mutability":"mutable","name":"withdrawnUnderlying","nameLocation":"3385:19:9","nodeType":"VariableDeclaration","scope":1394,"src":"3377:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1389,"name":"uint256","nodeType":"ElementaryTypeName","src":"3377:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1392,"indexed":false,"mutability":"mutable","name":"bufferBalances","nameLocation":"3422:14:9","nodeType":"VariableDeclaration","scope":1394,"src":"3414:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1391,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3414:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3298:144:9"},"src":"3286:157:9"},{"anonymous":false,"documentation":{"id":1395,"nodeType":"StructuredDocumentation","src":"3449:562:9","text":" @notice Liquidity has been added to a pool (including initialization).\n @param pool The pool with liquidity added\n @param liquidityProvider The user performing the operation\n @param kind The add liquidity operation type (e.g., proportional, custom)\n @param totalSupply The total supply of the pool after the operation\n @param amountsAddedRaw The amount of each token that was added, sorted in token registration order\n @param swapFeeAmountsRaw The total swap fees charged, sorted in token registration order"},"eventSelector":"a26a52d8d53702bba7f137907b8e1f99ff87f6d450144270ca25e72481cca871","id":1412,"name":"LiquidityAdded","nameLocation":"4022:14:9","nodeType":"EventDefinition","parameters":{"id":1411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1397,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"4062:4:9","nodeType":"VariableDeclaration","scope":1412,"src":"4046:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1396,"name":"address","nodeType":"ElementaryTypeName","src":"4046:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1399,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"4092:17:9","nodeType":"VariableDeclaration","scope":1412,"src":"4076:33:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1398,"name":"address","nodeType":"ElementaryTypeName","src":"4076:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1402,"indexed":true,"mutability":"mutable","name":"kind","nameLocation":"4144:4:9","nodeType":"VariableDeclaration","scope":1412,"src":"4119:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2347","typeString":"enum AddLiquidityKind"},"typeName":{"id":1401,"nodeType":"UserDefinedTypeName","pathNode":{"id":1400,"name":"AddLiquidityKind","nameLocations":["4119:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":2347,"src":"4119:16:9"},"referencedDeclaration":2347,"src":"4119:16:9","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2347","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":1404,"indexed":false,"mutability":"mutable","name":"totalSupply","nameLocation":"4166:11:9","nodeType":"VariableDeclaration","scope":1412,"src":"4158:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1403,"name":"uint256","nodeType":"ElementaryTypeName","src":"4158:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1407,"indexed":false,"mutability":"mutable","name":"amountsAddedRaw","nameLocation":"4197:15:9","nodeType":"VariableDeclaration","scope":1412,"src":"4187:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1405,"name":"uint256","nodeType":"ElementaryTypeName","src":"4187:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1406,"nodeType":"ArrayTypeName","src":"4187:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1410,"indexed":false,"mutability":"mutable","name":"swapFeeAmountsRaw","nameLocation":"4232:17:9","nodeType":"VariableDeclaration","scope":1412,"src":"4222:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1408,"name":"uint256","nodeType":"ElementaryTypeName","src":"4222:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1409,"nodeType":"ArrayTypeName","src":"4222:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4036:219:9"},"src":"4016:240:9"},{"anonymous":false,"documentation":{"id":1413,"nodeType":"StructuredDocumentation","src":"4262:548:9","text":" @notice Liquidity has been removed from a pool.\n @param pool The pool with liquidity removed\n @param liquidityProvider The user performing the operation\n @param kind The remove liquidity operation type (e.g., proportional, custom)\n @param totalSupply The total supply of the pool after the operation\n @param amountsRemovedRaw The amount of each token that was removed, sorted in token registration order\n @param swapFeeAmountsRaw The total swap fees charged, sorted in token registration order"},"eventSelector":"fbe5b0d79fb94f1e81c0a92bf86ae9d3a19e9d1bf6202c0d3e75120f65d5d8a5","id":1430,"name":"LiquidityRemoved","nameLocation":"4821:16:9","nodeType":"EventDefinition","parameters":{"id":1429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1415,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"4863:4:9","nodeType":"VariableDeclaration","scope":1430,"src":"4847:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1414,"name":"address","nodeType":"ElementaryTypeName","src":"4847:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1417,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"4893:17:9","nodeType":"VariableDeclaration","scope":1430,"src":"4877:33:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1416,"name":"address","nodeType":"ElementaryTypeName","src":"4877:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1420,"indexed":true,"mutability":"mutable","name":"kind","nameLocation":"4948:4:9","nodeType":"VariableDeclaration","scope":1430,"src":"4920:32:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2368","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":1419,"nodeType":"UserDefinedTypeName","pathNode":{"id":1418,"name":"RemoveLiquidityKind","nameLocations":["4920:19:9"],"nodeType":"IdentifierPath","referencedDeclaration":2368,"src":"4920:19:9"},"referencedDeclaration":2368,"src":"4920:19:9","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2368","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":1422,"indexed":false,"mutability":"mutable","name":"totalSupply","nameLocation":"4970:11:9","nodeType":"VariableDeclaration","scope":1430,"src":"4962:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1421,"name":"uint256","nodeType":"ElementaryTypeName","src":"4962:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1425,"indexed":false,"mutability":"mutable","name":"amountsRemovedRaw","nameLocation":"5001:17:9","nodeType":"VariableDeclaration","scope":1430,"src":"4991:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1423,"name":"uint256","nodeType":"ElementaryTypeName","src":"4991:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1424,"nodeType":"ArrayTypeName","src":"4991:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1428,"indexed":false,"mutability":"mutable","name":"swapFeeAmountsRaw","nameLocation":"5038:17:9","nodeType":"VariableDeclaration","scope":1430,"src":"5028:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1426,"name":"uint256","nodeType":"ElementaryTypeName","src":"5028:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1427,"nodeType":"ArrayTypeName","src":"5028:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4837:224:9"},"src":"4815:247:9"},{"anonymous":false,"documentation":{"id":1431,"nodeType":"StructuredDocumentation","src":"5068:114:9","text":" @notice The Vault's pause status has changed.\n @param paused True if the Vault was paused"},"eventSelector":"e0629fe656e45ad7fd63a24b899da368690024c07043b88e57aee5095b1d3d02","id":1435,"name":"VaultPausedStateChanged","nameLocation":"5193:23:9","nodeType":"EventDefinition","parameters":{"id":1434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1433,"indexed":false,"mutability":"mutable","name":"paused","nameLocation":"5222:6:9","nodeType":"VariableDeclaration","scope":1435,"src":"5217:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1432,"name":"bool","nodeType":"ElementaryTypeName","src":"5217:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5216:13:9"},"src":"5187:43:9"},{"anonymous":false,"documentation":{"id":1436,"nodeType":"StructuredDocumentation","src":"5236:87:9","text":"@notice `disableQuery` has been called on the Vault, disabling query functionality."},"eventSelector":"bd204090fd387f08e3076528bf09b4fc99d8100d749eace96c06002d3fedc625","id":1438,"name":"VaultQueriesDisabled","nameLocation":"5334:20:9","nodeType":"EventDefinition","parameters":{"id":1437,"nodeType":"ParameterList","parameters":[],"src":"5354:2:9"},"src":"5328:29:9"},{"anonymous":false,"documentation":{"id":1439,"nodeType":"StructuredDocumentation","src":"5363:85:9","text":"@notice `enableQuery` has been called on the Vault, enabling query functionality."},"eventSelector":"91d7478835f2b5adc315f5aad920f4a7f0a02f7fddf3042d17b2c80168ea17f5","id":1441,"name":"VaultQueriesEnabled","nameLocation":"5459:19:9","nodeType":"EventDefinition","parameters":{"id":1440,"nodeType":"ParameterList","parameters":[],"src":"5478:2:9"},"src":"5453:28:9"},{"anonymous":false,"documentation":{"id":1442,"nodeType":"StructuredDocumentation","src":"5487:171:9","text":" @notice A Pool's pause status has changed.\n @param pool The pool that was just paused or unpaused\n @param paused True if the pool was paused"},"eventSelector":"57e20448028297190122571be7cb6c1b1ef85730c673f7c72f533c8662419aa7","id":1448,"name":"PoolPausedStateChanged","nameLocation":"5669:22:9","nodeType":"EventDefinition","parameters":{"id":1447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1444,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"5708:4:9","nodeType":"VariableDeclaration","scope":1448,"src":"5692:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1443,"name":"address","nodeType":"ElementaryTypeName","src":"5692:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1446,"indexed":false,"mutability":"mutable","name":"paused","nameLocation":"5719:6:9","nodeType":"VariableDeclaration","scope":1448,"src":"5714:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1445,"name":"bool","nodeType":"ElementaryTypeName","src":"5714:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5691:35:9"},"src":"5663:64:9"},{"anonymous":false,"documentation":{"id":1449,"nodeType":"StructuredDocumentation","src":"5733:158:9","text":" @notice Emitted when the swap fee percentage of a pool is updated.\n @param swapFeePercentage The new swap fee percentage for the pool"},"eventSelector":"89d41522342fabac1471ca6073a5623e5caf367b03ca6e9a001478d0cf8be4a1","id":1455,"name":"SwapFeePercentageChanged","nameLocation":"5902:24:9","nodeType":"EventDefinition","parameters":{"id":1454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1451,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"5943:4:9","nodeType":"VariableDeclaration","scope":1455,"src":"5927:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1450,"name":"address","nodeType":"ElementaryTypeName","src":"5927:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1453,"indexed":false,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"5957:17:9","nodeType":"VariableDeclaration","scope":1455,"src":"5949:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1452,"name":"uint256","nodeType":"ElementaryTypeName","src":"5949:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5926:49:9"},"src":"5896:80:9"},{"anonymous":false,"documentation":{"id":1456,"nodeType":"StructuredDocumentation","src":"5982:170:9","text":" @notice Recovery mode has been enabled or disabled for a pool.\n @param pool The pool\n @param recoveryMode True if recovery mode was enabled"},"eventSelector":"c2354cc2f78ea57777e55ddd43a7f22b112ce98868596880edaeb22b4f9c73a9","id":1462,"name":"PoolRecoveryModeStateChanged","nameLocation":"6163:28:9","nodeType":"EventDefinition","parameters":{"id":1461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1458,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"6208:4:9","nodeType":"VariableDeclaration","scope":1462,"src":"6192:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1457,"name":"address","nodeType":"ElementaryTypeName","src":"6192:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1460,"indexed":false,"mutability":"mutable","name":"recoveryMode","nameLocation":"6219:12:9","nodeType":"VariableDeclaration","scope":1462,"src":"6214:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1459,"name":"bool","nodeType":"ElementaryTypeName","src":"6214:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6191:41:9"},"src":"6157:76:9"},{"anonymous":false,"documentation":{"id":1463,"nodeType":"StructuredDocumentation","src":"6239:353:9","text":" @notice A protocol or pool creator fee has changed, causing an update to the aggregate swap fee.\n @dev The `ProtocolFeeController` will emit an event with the underlying change.\n @param pool The pool whose aggregate swap fee percentage changed\n @param aggregateSwapFeePercentage The new aggregate swap fee percentage"},"eventSelector":"e4d371097beea42453a37406e2aef4c04f3c548f84ac50e72578662c0dcd7354","id":1469,"name":"AggregateSwapFeePercentageChanged","nameLocation":"6603:33:9","nodeType":"EventDefinition","parameters":{"id":1468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1465,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"6653:4:9","nodeType":"VariableDeclaration","scope":1469,"src":"6637:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1464,"name":"address","nodeType":"ElementaryTypeName","src":"6637:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1467,"indexed":false,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"6667:26:9","nodeType":"VariableDeclaration","scope":1469,"src":"6659:34:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1466,"name":"uint256","nodeType":"ElementaryTypeName","src":"6659:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6636:58:9"},"src":"6597:98:9"},{"anonymous":false,"documentation":{"id":1470,"nodeType":"StructuredDocumentation","src":"6701:357:9","text":" @notice A protocol or pool creator fee has changed, causing an update to the aggregate yield fee.\n @dev The `ProtocolFeeController` will emit an event with the underlying change.\n @param pool The pool whose aggregate yield fee percentage changed\n @param aggregateYieldFeePercentage The new aggregate yield fee percentage"},"eventSelector":"606eb97d83164bd6b200d638cd49c14c65d94d4f2c674cfd85e24e0e202c3ca5","id":1476,"name":"AggregateYieldFeePercentageChanged","nameLocation":"7069:34:9","nodeType":"EventDefinition","parameters":{"id":1475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1472,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"7120:4:9","nodeType":"VariableDeclaration","scope":1476,"src":"7104:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1471,"name":"address","nodeType":"ElementaryTypeName","src":"7104:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1474,"indexed":false,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"7134:27:9","nodeType":"VariableDeclaration","scope":1476,"src":"7126:35:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1473,"name":"uint256","nodeType":"ElementaryTypeName","src":"7126:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7103:59:9"},"src":"7063:100:9"},{"anonymous":false,"documentation":{"id":1477,"nodeType":"StructuredDocumentation","src":"7169:132:9","text":" @notice A new authorizer is set by `setAuthorizer`.\n @param newAuthorizer The address of the new authorizer"},"eventSelector":"94b979b6831a51293e2641426f97747feed46f17779fed9cd18d1ecefcfe92ef","id":1482,"name":"AuthorizerChanged","nameLocation":"7312:17:9","nodeType":"EventDefinition","parameters":{"id":1481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"indexed":true,"mutability":"mutable","name":"newAuthorizer","nameLocation":"7350:13:9","nodeType":"VariableDeclaration","scope":1482,"src":"7330:33:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"},"typeName":{"id":1479,"nodeType":"UserDefinedTypeName","pathNode":{"id":1478,"name":"IAuthorizer","nameLocations":["7330:11:9"],"nodeType":"IdentifierPath","referencedDeclaration":73,"src":"7330:11:9"},"referencedDeclaration":73,"src":"7330:11:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"7329:35:9"},"src":"7306:59:9"},{"anonymous":false,"documentation":{"id":1483,"nodeType":"StructuredDocumentation","src":"7371:180:9","text":" @notice A new protocol fee controller is set by `setProtocolFeeController`.\n @param newProtocolFeeController The address of the new protocol fee controller"},"eventSelector":"280a60b1e63c1774d397d35cce80eb80e51408ead755fb446e6f744ce98e5df0","id":1488,"name":"ProtocolFeeControllerChanged","nameLocation":"7562:28:9","nodeType":"EventDefinition","parameters":{"id":1487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1486,"indexed":true,"mutability":"mutable","name":"newProtocolFeeController","nameLocation":"7622:24:9","nodeType":"VariableDeclaration","scope":1488,"src":"7591:55:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"},"typeName":{"id":1485,"nodeType":"UserDefinedTypeName","pathNode":{"id":1484,"name":"IProtocolFeeController","nameLocations":["7591:22:9"],"nodeType":"IdentifierPath","referencedDeclaration":613,"src":"7591:22:9"},"referencedDeclaration":613,"src":"7591:22:9","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"src":"7590:57:9"},"src":"7556:92:9"},{"anonymous":false,"documentation":{"id":1489,"nodeType":"StructuredDocumentation","src":"7654:553:9","text":" @notice Liquidity was added to an ERC4626 buffer corresponding to the given wrapped token.\n @dev The underlying token can be derived from the wrapped token, so it's not included here.\n @param wrappedToken The wrapped token that identifies the buffer\n @param amountUnderlying The amount of the underlying token that was deposited\n @param amountWrapped The amount of the wrapped token that was deposited\n @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)"},"eventSelector":"75c4dc5f23640eeba7d404d9165f515fc3d9e23a5c8b6e2d09b4b9da56ff00a9","id":1500,"name":"LiquidityAddedToBuffer","nameLocation":"8218:22:9","nodeType":"EventDefinition","parameters":{"id":1499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1492,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"8267:12:9","nodeType":"VariableDeclaration","scope":1500,"src":"8250:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1491,"nodeType":"UserDefinedTypeName","pathNode":{"id":1490,"name":"IERC4626","nameLocations":["8250:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"8250:8:9"},"referencedDeclaration":6576,"src":"8250:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1494,"indexed":false,"mutability":"mutable","name":"amountUnderlying","nameLocation":"8297:16:9","nodeType":"VariableDeclaration","scope":1500,"src":"8289:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1493,"name":"uint256","nodeType":"ElementaryTypeName","src":"8289:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1496,"indexed":false,"mutability":"mutable","name":"amountWrapped","nameLocation":"8331:13:9","nodeType":"VariableDeclaration","scope":1500,"src":"8323:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1495,"name":"uint256","nodeType":"ElementaryTypeName","src":"8323:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1498,"indexed":false,"mutability":"mutable","name":"bufferBalances","nameLocation":"8362:14:9","nodeType":"VariableDeclaration","scope":1500,"src":"8354:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1497,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8354:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8240:142:9"},"src":"8212:171:9"},{"anonymous":false,"documentation":{"id":1501,"nodeType":"StructuredDocumentation","src":"8389:570:9","text":" @notice Buffer shares were minted for an ERC4626 buffer corresponding to a given wrapped token.\n @dev The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares`\n retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the\n \"totalSupply\" of a buffer.\n @param wrappedToken The wrapped token that identifies the buffer\n @param to The owner of the minted shares\n @param issuedShares The amount of \"internal BPT\" shares created"},"eventSelector":"d66f031d33381c6408f0b32c884461e5de3df8808399b6f3a3d86b1368f8ec34","id":1510,"name":"BufferSharesMinted","nameLocation":"8970:18:9","nodeType":"EventDefinition","parameters":{"id":1509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1504,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"9006:12:9","nodeType":"VariableDeclaration","scope":1510,"src":"8989:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1503,"nodeType":"UserDefinedTypeName","pathNode":{"id":1502,"name":"IERC4626","nameLocations":["8989:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"8989:8:9"},"referencedDeclaration":6576,"src":"8989:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1506,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"9036:2:9","nodeType":"VariableDeclaration","scope":1510,"src":"9020:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1505,"name":"address","nodeType":"ElementaryTypeName","src":"9020:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1508,"indexed":false,"mutability":"mutable","name":"issuedShares","nameLocation":"9048:12:9","nodeType":"VariableDeclaration","scope":1510,"src":"9040:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1507,"name":"uint256","nodeType":"ElementaryTypeName","src":"9040:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8988:73:9"},"src":"8964:98:9"},{"anonymous":false,"documentation":{"id":1511,"nodeType":"StructuredDocumentation","src":"9068:571:9","text":" @notice Buffer shares were burned for an ERC4626 buffer corresponding to a given wrapped token.\n @dev The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares`\n retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the\n \"totalSupply\" of a buffer.\n @param wrappedToken The wrapped token that identifies the buffer\n @param from The owner of the burned shares\n @param burnedShares The amount of \"internal BPT\" shares burned"},"eventSelector":"4e09f7f7fc37ce2897800e2c2a9099565edb0a133d19d84a6871b3530af8846b","id":1520,"name":"BufferSharesBurned","nameLocation":"9650:18:9","nodeType":"EventDefinition","parameters":{"id":1519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1514,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"9686:12:9","nodeType":"VariableDeclaration","scope":1520,"src":"9669:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1513,"nodeType":"UserDefinedTypeName","pathNode":{"id":1512,"name":"IERC4626","nameLocations":["9669:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"9669:8:9"},"referencedDeclaration":6576,"src":"9669:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1516,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"9716:4:9","nodeType":"VariableDeclaration","scope":1520,"src":"9700:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1515,"name":"address","nodeType":"ElementaryTypeName","src":"9700:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1518,"indexed":false,"mutability":"mutable","name":"burnedShares","nameLocation":"9730:12:9","nodeType":"VariableDeclaration","scope":1520,"src":"9722:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1517,"name":"uint256","nodeType":"ElementaryTypeName","src":"9722:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9668:75:9"},"src":"9644:100:9"},{"anonymous":false,"documentation":{"id":1521,"nodeType":"StructuredDocumentation","src":"9750:509:9","text":" @notice Liquidity was removed from an ERC4626 buffer.\n @dev The underlying token can be derived from the wrapped token, so it's not included here.\n @param wrappedToken The wrapped token that identifies the buffer\n @param amountUnderlying The amount of the underlying token that was withdrawn\n @param amountWrapped The amount of the wrapped token that was withdrawn\n @param bufferBalances The final buffer balances, packed in 128-bit words (underlying, wrapped)"},"eventSelector":"44d97b36e99b590b3d2875aad3b167b1d7fb1e063f3f1325a1eeac76caee5113","id":1532,"name":"LiquidityRemovedFromBuffer","nameLocation":"10270:26:9","nodeType":"EventDefinition","parameters":{"id":1531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1524,"indexed":true,"mutability":"mutable","name":"wrappedToken","nameLocation":"10323:12:9","nodeType":"VariableDeclaration","scope":1532,"src":"10306:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1523,"nodeType":"UserDefinedTypeName","pathNode":{"id":1522,"name":"IERC4626","nameLocations":["10306:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"10306:8:9"},"referencedDeclaration":6576,"src":"10306:8:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":1526,"indexed":false,"mutability":"mutable","name":"amountUnderlying","nameLocation":"10353:16:9","nodeType":"VariableDeclaration","scope":1532,"src":"10345:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1525,"name":"uint256","nodeType":"ElementaryTypeName","src":"10345:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1528,"indexed":false,"mutability":"mutable","name":"amountWrapped","nameLocation":"10387:13:9","nodeType":"VariableDeclaration","scope":1532,"src":"10379:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1527,"name":"uint256","nodeType":"ElementaryTypeName","src":"10379:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1530,"indexed":false,"mutability":"mutable","name":"bufferBalances","nameLocation":"10418:14:9","nodeType":"VariableDeclaration","scope":1532,"src":"10410:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1529,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10410:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10296:142:9"},"src":"10264:175:9"},{"anonymous":false,"documentation":{"id":1533,"nodeType":"StructuredDocumentation","src":"10445:278:9","text":" @notice The Vault buffers pause status has changed.\n @dev If buffers all paused, all buffer operations (i.e., all calls through the Router with `isBuffer`\n set to true) will revert.\n @param paused True if the Vault buffers were paused"},"eventSelector":"300c7ca619eb846386aa0a6e5916ac2a41406448b0a2e99ba9ccafeb899015a5","id":1537,"name":"VaultBuffersPausedStateChanged","nameLocation":"10734:30:9","nodeType":"EventDefinition","parameters":{"id":1536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1535,"indexed":false,"mutability":"mutable","name":"paused","nameLocation":"10770:6:9","nodeType":"VariableDeclaration","scope":1537,"src":"10765:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1534,"name":"bool","nodeType":"ElementaryTypeName","src":"10765:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10764:13:9"},"src":"10728:50:9"},{"anonymous":false,"documentation":{"id":1538,"nodeType":"StructuredDocumentation","src":"10784:194:9","text":" @notice Pools can use this event to emit event data from the Vault.\n @param pool Pool address\n @param eventKey Event key\n @param eventData Encoded event data"},"eventSelector":"4bc4412e210115456903c65b5277d299a505e79f2eb852b92b1ca52d85856428","id":1546,"name":"VaultAuxiliary","nameLocation":"10989:14:9","nodeType":"EventDefinition","parameters":{"id":1545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"indexed":true,"mutability":"mutable","name":"pool","nameLocation":"11020:4:9","nodeType":"VariableDeclaration","scope":1546,"src":"11004:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1539,"name":"address","nodeType":"ElementaryTypeName","src":"11004:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1542,"indexed":true,"mutability":"mutable","name":"eventKey","nameLocation":"11042:8:9","nodeType":"VariableDeclaration","scope":1546,"src":"11026:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1541,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11026:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1544,"indexed":false,"mutability":"mutable","name":"eventData","nameLocation":"11058:9:9","nodeType":"VariableDeclaration","scope":1546,"src":"11052:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1543,"name":"bytes","nodeType":"ElementaryTypeName","src":"11052:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11003:65:9"},"src":"10983:86:9"}],"scope":1548,"src":"500:10571:9","usedErrors":[],"usedEvents":[1346,1351,1370,1382,1394,1412,1430,1435,1438,1441,1448,1455,1462,1469,1476,1482,1488,1500,1510,1520,1532,1537,1546]}],"src":"46:11026:9"},"id":9},"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol","exportedSymbols":{"AddLiquidityKind":[2347],"AddLiquidityParams":[2363],"AfterSwapParams":[2341],"BufferWrapOrUnwrapParams":[2402],"FEE_BITLENGTH":[2405],"FEE_SCALING_FACTOR":[2408],"HookFlags":[2167],"HooksConfig":[2191],"IAuthorizer":[73],"IERC20":[6654],"IERC4626":[6576],"IHooks":[275],"IProtocolFeeController":[613],"IRateProvider":[57],"IVault":[651],"IVaultExtension":[1966],"LiquidityManagement":[2120],"MAX_FEE_PERCENTAGE":[2411],"PoolConfig":[2145],"PoolConfigBits":[2122],"PoolData":[2269],"PoolRoleAccounts":[2217],"PoolSwapParams":[2312],"RemoveLiquidityKind":[2368],"RemoveLiquidityParams":[2384],"Rounding":[2272],"SwapKind":[2275],"SwapState":[2201],"TokenConfig":[2234],"TokenInfo":[2244],"TokenType":[2221],"VaultState":[2209],"VaultSwapParams":[2294],"WrappingDirection":[2387]},"id":1967,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1549,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:10"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":1551,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":6577,"src":"72:75:10","symbolAliases":[{"foreign":{"id":1550,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6576,"src":"81:8:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":1553,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":6655,"src":"148:72:10","symbolAliases":[{"foreign":{"id":1552,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6654,"src":"157:6:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","file":"./IAuthorizer.sol","id":1555,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":74,"src":"222:48:10","symbolAliases":[{"foreign":{"id":1554,"name":"IAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"231:11:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"./IProtocolFeeController.sol","id":1557,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":614,"src":"271:70:10","symbolAliases":[{"foreign":{"id":1556,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"280:22:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"./IVault.sol","id":1559,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":652,"src":"342:38:10","symbolAliases":[{"foreign":{"id":1558,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"351:6:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol","file":"./IHooks.sol","id":1561,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":276,"src":"381:38:10","symbolAliases":[{"foreign":{"id":1560,"name":"IHooks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"390:6:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":1562,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":2412,"src":"420:26:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultExtension","contractDependencies":[],"contractKind":"interface","documentation":{"id":1563,"nodeType":"StructuredDocumentation","src":"448:318:10","text":" @notice Interface for functions defined on the `VaultExtension` contract.\n @dev `VaultExtension` handles less critical or frequently used functions, since delegate calls through\n the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and\n liquidity operations."},"fullyImplemented":false,"id":1966,"linearizedBaseContracts":[1966],"name":"IVaultExtension","nameLocation":"777:15:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1564,"nodeType":"StructuredDocumentation","src":"1025:206:10","text":" @notice Returns the main Vault address.\n @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n @return vault The address of the main Vault"},"functionSelector":"fbfa77cf","id":1570,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"1245:5:10","nodeType":"FunctionDefinition","parameters":{"id":1565,"nodeType":"ParameterList","parameters":[],"src":"1250:2:10"},"returnParameters":{"id":1569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1570,"src":"1276:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":1567,"nodeType":"UserDefinedTypeName","pathNode":{"id":1566,"name":"IVault","nameLocations":["1276:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"1276:6:10"},"referencedDeclaration":651,"src":"1276:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"}],"src":"1275:8:10"},"scope":1966,"src":"1236:48:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1571,"nodeType":"StructuredDocumentation","src":"1290:202:10","text":" @notice Returns the VaultAdmin contract address.\n @dev The VaultAdmin contract mostly implements permissioned functions.\n @return vaultAdmin The address of the Vault admin"},"functionSelector":"1ba0ae45","id":1576,"implemented":false,"kind":"function","modifiers":[],"name":"getVaultAdmin","nameLocation":"1506:13:10","nodeType":"FunctionDefinition","parameters":{"id":1572,"nodeType":"ParameterList","parameters":[],"src":"1519:2:10"},"returnParameters":{"id":1575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1574,"mutability":"mutable","name":"vaultAdmin","nameLocation":"1553:10:10","nodeType":"VariableDeclaration","scope":1576,"src":"1545:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1573,"name":"address","nodeType":"ElementaryTypeName","src":"1545:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1544:20:10"},"scope":1966,"src":"1497:68:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1577,"nodeType":"StructuredDocumentation","src":"1793:254:10","text":" @notice Returns whether the Vault is unlocked (i.e., executing an operation).\n @dev The Vault must be unlocked to perform state-changing liquidity operations.\n @return unlocked True if the Vault is unlocked, false otherwise"},"functionSelector":"8380edb7","id":1582,"implemented":false,"kind":"function","modifiers":[],"name":"isUnlocked","nameLocation":"2061:10:10","nodeType":"FunctionDefinition","parameters":{"id":1578,"nodeType":"ParameterList","parameters":[],"src":"2071:2:10"},"returnParameters":{"id":1581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1580,"mutability":"mutable","name":"unlocked","nameLocation":"2102:8:10","nodeType":"VariableDeclaration","scope":1582,"src":"2097:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1579,"name":"bool","nodeType":"ElementaryTypeName","src":"2097:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2096:15:10"},"scope":1966,"src":"2052:60:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1583,"nodeType":"StructuredDocumentation","src":"2118:141:10","text":"  @notice Returns the count of non-zero deltas.\n  @return nonzeroDeltaCount The current value of `_nonzeroDeltaCount`"},"functionSelector":"db817187","id":1588,"implemented":false,"kind":"function","modifiers":[],"name":"getNonzeroDeltaCount","nameLocation":"2273:20:10","nodeType":"FunctionDefinition","parameters":{"id":1584,"nodeType":"ParameterList","parameters":[],"src":"2293:2:10"},"returnParameters":{"id":1587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1586,"mutability":"mutable","name":"nonzeroDeltaCount","nameLocation":"2327:17:10","nodeType":"VariableDeclaration","scope":1588,"src":"2319:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1585,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2318:27:10"},"scope":1966,"src":"2264:82:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1589,"nodeType":"StructuredDocumentation","src":"2352:284:10","text":" @notice Retrieves the token delta for a specific token.\n @dev This function allows reading the value from the `_tokenDeltas` mapping.\n @param token The token for which the delta is being fetched\n @return tokenDelta The delta of the specified token"},"functionSelector":"9e825ff5","id":1597,"implemented":false,"kind":"function","modifiers":[],"name":"getTokenDelta","nameLocation":"2650:13:10","nodeType":"FunctionDefinition","parameters":{"id":1593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1592,"mutability":"mutable","name":"token","nameLocation":"2671:5:10","nodeType":"VariableDeclaration","scope":1597,"src":"2664:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1591,"nodeType":"UserDefinedTypeName","pathNode":{"id":1590,"name":"IERC20","nameLocations":["2664:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"2664:6:10"},"referencedDeclaration":6654,"src":"2664:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"2663:14:10"},"returnParameters":{"id":1596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1595,"mutability":"mutable","name":"tokenDelta","nameLocation":"2708:10:10","nodeType":"VariableDeclaration","scope":1597,"src":"2701:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1594,"name":"int256","nodeType":"ElementaryTypeName","src":"2701:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2700:19:10"},"scope":1966,"src":"2641:79:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1598,"nodeType":"StructuredDocumentation","src":"2726:230:10","text":" @notice Retrieves the reserve (i.e., total Vault balance) of a given token.\n @param token The token for which to retrieve the reserve\n @return reserveAmount The amount of reserves for the given token"},"functionSelector":"96787092","id":1606,"implemented":false,"kind":"function","modifiers":[],"name":"getReservesOf","nameLocation":"2970:13:10","nodeType":"FunctionDefinition","parameters":{"id":1602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1601,"mutability":"mutable","name":"token","nameLocation":"2991:5:10","nodeType":"VariableDeclaration","scope":1606,"src":"2984:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1600,"nodeType":"UserDefinedTypeName","pathNode":{"id":1599,"name":"IERC20","nameLocations":["2984:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"2984:6:10"},"referencedDeclaration":6654,"src":"2984:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"2983:14:10"},"returnParameters":{"id":1605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1604,"mutability":"mutable","name":"reserveAmount","nameLocation":"3029:13:10","nodeType":"VariableDeclaration","scope":1606,"src":"3021:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1603,"name":"uint256","nodeType":"ElementaryTypeName","src":"3021:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3020:23:10"},"scope":1966,"src":"2961:83:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1607,"nodeType":"StructuredDocumentation","src":"3050:944:10","text":" @notice This flag is used to detect and tax \"round-trip\" interactions (adding and removing liquidity in the\n same pool).\n @dev Taxing remove liquidity proportional whenever liquidity was added in the same `unlock` call adds an extra\n layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional\n is the only standard way to exit a position without fees, and this flag is used to enable fees in that case.\n It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse\n than a simple swap for every pool type.\n @param pool Address of the pool to check\n @return liquidityAdded True if liquidity has been added to this pool in the current transaction\n Note that there is no `sessionId` argument; it always returns the value for the current (i.e., latest) session."},"functionSelector":"ace9b89b","id":1614,"implemented":false,"kind":"function","modifiers":[],"name":"getAddLiquidityCalledFlag","nameLocation":"4008:25:10","nodeType":"FunctionDefinition","parameters":{"id":1610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1609,"mutability":"mutable","name":"pool","nameLocation":"4042:4:10","nodeType":"VariableDeclaration","scope":1614,"src":"4034:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1608,"name":"address","nodeType":"ElementaryTypeName","src":"4034:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4033:14:10"},"returnParameters":{"id":1613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1612,"mutability":"mutable","name":"liquidityAdded","nameLocation":"4076:14:10","nodeType":"VariableDeclaration","scope":1614,"src":"4071:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1611,"name":"bool","nodeType":"ElementaryTypeName","src":"4071:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4070:21:10"},"scope":1966,"src":"3999:93:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1615,"nodeType":"StructuredDocumentation","src":"4323:1604:10","text":" @notice Registers a pool, associating it with its factory and the tokens it manages.\n @dev A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely\n by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an\n additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused\n pool will automatically unpause. Balancer timestamps are 32 bits.\n A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a\n multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to\n the Vault.\n If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the\n authorizer.\n @param pool The address of the pool being registered\n @param tokenConfig An array of descriptors for the tokens the pool will manage\n @param swapFeePercentage The initial static swap fee percentage of the pool\n @param pauseWindowEndTime The timestamp after which it is no longer possible to pause the pool\n @param protocolFeeExempt If true, the pool's initial aggregate fees will be set to 0\n @param roleAccounts Addresses the Vault will allow to change certain pool settings\n @param poolHooksContract Contract that implements the hooks for the pool\n @param liquidityManagement Liquidity management flags with implemented methods"},"functionSelector":"eeec802f","id":1638,"implemented":false,"kind":"function","modifiers":[],"name":"registerPool","nameLocation":"5941:12:10","nodeType":"FunctionDefinition","parameters":{"id":1636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1617,"mutability":"mutable","name":"pool","nameLocation":"5971:4:10","nodeType":"VariableDeclaration","scope":1638,"src":"5963:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1616,"name":"address","nodeType":"ElementaryTypeName","src":"5963:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1621,"mutability":"mutable","name":"tokenConfig","nameLocation":"6006:11:10","nodeType":"VariableDeclaration","scope":1638,"src":"5985:32:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2234_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenConfig[]"},"typeName":{"baseType":{"id":1619,"nodeType":"UserDefinedTypeName","pathNode":{"id":1618,"name":"TokenConfig","nameLocations":["5985:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":2234,"src":"5985:11:10"},"referencedDeclaration":2234,"src":"5985:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_TokenConfig_$2234_storage_ptr","typeString":"struct TokenConfig"}},"id":1620,"nodeType":"ArrayTypeName","src":"5985:13:10","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$2234_storage_$dyn_storage_ptr","typeString":"struct TokenConfig[]"}},"visibility":"internal"},{"constant":false,"id":1623,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"6035:17:10","nodeType":"VariableDeclaration","scope":1638,"src":"6027:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1622,"name":"uint256","nodeType":"ElementaryTypeName","src":"6027:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1625,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"6069:18:10","nodeType":"VariableDeclaration","scope":1638,"src":"6062:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1624,"name":"uint32","nodeType":"ElementaryTypeName","src":"6062:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1627,"mutability":"mutable","name":"protocolFeeExempt","nameLocation":"6102:17:10","nodeType":"VariableDeclaration","scope":1638,"src":"6097:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1626,"name":"bool","nodeType":"ElementaryTypeName","src":"6097:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1630,"mutability":"mutable","name":"roleAccounts","nameLocation":"6155:12:10","nodeType":"VariableDeclaration","scope":1638,"src":"6129:38:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2217_calldata_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":1629,"nodeType":"UserDefinedTypeName","pathNode":{"id":1628,"name":"PoolRoleAccounts","nameLocations":["6129:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":2217,"src":"6129:16:10"},"referencedDeclaration":2217,"src":"6129:16:10","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2217_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"},{"constant":false,"id":1632,"mutability":"mutable","name":"poolHooksContract","nameLocation":"6185:17:10","nodeType":"VariableDeclaration","scope":1638,"src":"6177:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1631,"name":"address","nodeType":"ElementaryTypeName","src":"6177:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1635,"mutability":"mutable","name":"liquidityManagement","nameLocation":"6241:19:10","nodeType":"VariableDeclaration","scope":1638,"src":"6212:48:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2120_calldata_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":1634,"nodeType":"UserDefinedTypeName","pathNode":{"id":1633,"name":"LiquidityManagement","nameLocations":["6212:19:10"],"nodeType":"IdentifierPath","referencedDeclaration":2120,"src":"6212:19:10"},"referencedDeclaration":2120,"src":"6212:19:10","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2120_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"}],"src":"5953:313:10"},"returnParameters":{"id":1637,"nodeType":"ParameterList","parameters":[],"src":"6275:0:10"},"scope":1966,"src":"5932:344:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1639,"nodeType":"StructuredDocumentation","src":"6282:185:10","text":" @notice Checks whether a pool is registered.\n @param pool Address of the pool to check\n @return registered True if the pool is registered, false otherwise"},"functionSelector":"c673bdaf","id":1646,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolRegistered","nameLocation":"6481:16:10","nodeType":"FunctionDefinition","parameters":{"id":1642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1641,"mutability":"mutable","name":"pool","nameLocation":"6506:4:10","nodeType":"VariableDeclaration","scope":1646,"src":"6498:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1640,"name":"address","nodeType":"ElementaryTypeName","src":"6498:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6497:14:10"},"returnParameters":{"id":1645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1644,"mutability":"mutable","name":"registered","nameLocation":"6540:10:10","nodeType":"VariableDeclaration","scope":1646,"src":"6535:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1643,"name":"bool","nodeType":"ElementaryTypeName","src":"6535:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6534:17:10"},"scope":1966,"src":"6472:80:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1647,"nodeType":"StructuredDocumentation","src":"6558:589:10","text":" @notice Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\n @param pool Address of the pool to initialize\n @param to Address that will receive the output BPT\n @param tokens Tokens used to seed the pool (must match the registered tokens)\n @param exactAmountsIn Exact amounts of input tokens\n @param minBptAmountOut Minimum amount of output pool tokens\n @param userData Additional (optional) data required for adding initial liquidity\n @return bptAmountOut Output pool token amount"},"functionSelector":"ba8a2be0","id":1667,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"7161:10:10","nodeType":"FunctionDefinition","parameters":{"id":1663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"mutability":"mutable","name":"pool","nameLocation":"7189:4:10","nodeType":"VariableDeclaration","scope":1667,"src":"7181:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1648,"name":"address","nodeType":"ElementaryTypeName","src":"7181:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1651,"mutability":"mutable","name":"to","nameLocation":"7211:2:10","nodeType":"VariableDeclaration","scope":1667,"src":"7203:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1650,"name":"address","nodeType":"ElementaryTypeName","src":"7203:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1655,"mutability":"mutable","name":"tokens","nameLocation":"7239:6:10","nodeType":"VariableDeclaration","scope":1667,"src":"7223:22:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1653,"nodeType":"UserDefinedTypeName","pathNode":{"id":1652,"name":"IERC20","nameLocations":["7223:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"7223:6:10"},"referencedDeclaration":6654,"src":"7223:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":1654,"nodeType":"ArrayTypeName","src":"7223:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1658,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"7272:14:10","nodeType":"VariableDeclaration","scope":1667,"src":"7255:31:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1656,"name":"uint256","nodeType":"ElementaryTypeName","src":"7255:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1657,"nodeType":"ArrayTypeName","src":"7255:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1660,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"7304:15:10","nodeType":"VariableDeclaration","scope":1667,"src":"7296:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1659,"name":"uint256","nodeType":"ElementaryTypeName","src":"7296:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1662,"mutability":"mutable","name":"userData","nameLocation":"7342:8:10","nodeType":"VariableDeclaration","scope":1667,"src":"7329:21:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1661,"name":"bytes","nodeType":"ElementaryTypeName","src":"7329:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7171:185:10"},"returnParameters":{"id":1666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1665,"mutability":"mutable","name":"bptAmountOut","nameLocation":"7383:12:10","nodeType":"VariableDeclaration","scope":1667,"src":"7375:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1664,"name":"uint256","nodeType":"ElementaryTypeName","src":"7375:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7374:22:10"},"scope":1966,"src":"7152:245:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1668,"nodeType":"StructuredDocumentation","src":"7627:258:10","text":" @notice Checks whether a pool is initialized.\n @dev An initialized pool can be considered registered as well.\n @param pool Address of the pool to check\n @return initialized True if the pool is initialized, false otherwise"},"functionSelector":"532cec7c","id":1675,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolInitialized","nameLocation":"7899:17:10","nodeType":"FunctionDefinition","parameters":{"id":1671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1670,"mutability":"mutable","name":"pool","nameLocation":"7925:4:10","nodeType":"VariableDeclaration","scope":1675,"src":"7917:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1669,"name":"address","nodeType":"ElementaryTypeName","src":"7917:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7916:14:10"},"returnParameters":{"id":1674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1673,"mutability":"mutable","name":"initialized","nameLocation":"7959:11:10","nodeType":"VariableDeclaration","scope":1675,"src":"7954:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1672,"name":"bool","nodeType":"ElementaryTypeName","src":"7954:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7953:18:10"},"scope":1966,"src":"7890:82:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1676,"nodeType":"StructuredDocumentation","src":"7978:152:10","text":" @notice Gets the tokens registered to a pool.\n @param pool Address of the pool\n @return tokens List of tokens in the pool"},"functionSelector":"ca4f2803","id":1685,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokens","nameLocation":"8144:13:10","nodeType":"FunctionDefinition","parameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1678,"mutability":"mutable","name":"pool","nameLocation":"8166:4:10","nodeType":"VariableDeclaration","scope":1685,"src":"8158:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1677,"name":"address","nodeType":"ElementaryTypeName","src":"8158:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8157:14:10"},"returnParameters":{"id":1684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1683,"mutability":"mutable","name":"tokens","nameLocation":"8211:6:10","nodeType":"VariableDeclaration","scope":1685,"src":"8195:22:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1681,"nodeType":"UserDefinedTypeName","pathNode":{"id":1680,"name":"IERC20","nameLocations":["8195:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"8195:6:10"},"referencedDeclaration":6654,"src":"8195:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":1682,"nodeType":"ArrayTypeName","src":"8195:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"8194:24:10"},"scope":1966,"src":"8135:84:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1686,"nodeType":"StructuredDocumentation","src":"8225:512:10","text":" @notice Gets pool token rates.\n @dev This function performs external calls if tokens are yield-bearing. All returned arrays are in token\n registration order.\n @param pool Address of the pool\n @return decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n calculations. FP(1) for 18-decimal tokens\n @return tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens"},"functionSelector":"7e361bde","id":1697,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenRates","nameLocation":"8751:17:10","nodeType":"FunctionDefinition","parameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1688,"mutability":"mutable","name":"pool","nameLocation":"8786:4:10","nodeType":"VariableDeclaration","scope":1697,"src":"8778:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1687,"name":"address","nodeType":"ElementaryTypeName","src":"8778:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8768:28:10"},"returnParameters":{"id":1696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1692,"mutability":"mutable","name":"decimalScalingFactors","nameLocation":"8837:21:10","nodeType":"VariableDeclaration","scope":1697,"src":"8820:38:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1690,"name":"uint256","nodeType":"ElementaryTypeName","src":"8820:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1691,"nodeType":"ArrayTypeName","src":"8820:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1695,"mutability":"mutable","name":"tokenRates","nameLocation":"8877:10:10","nodeType":"VariableDeclaration","scope":1697,"src":"8860:27:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1693,"name":"uint256","nodeType":"ElementaryTypeName","src":"8860:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1694,"nodeType":"ArrayTypeName","src":"8860:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"8819:69:10"},"scope":1966,"src":"8742:147:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1698,"nodeType":"StructuredDocumentation","src":"8895:287:10","text":" @notice Returns comprehensive pool data for the given pool.\n @dev This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\n @param pool The address of the pool\n @return poolData The `PoolData` result"},"functionSelector":"13d21cdf","id":1706,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolData","nameLocation":"9196:11:10","nodeType":"FunctionDefinition","parameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"pool","nameLocation":"9216:4:10","nodeType":"VariableDeclaration","scope":1706,"src":"9208:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1699,"name":"address","nodeType":"ElementaryTypeName","src":"9208:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9207:14:10"},"returnParameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1704,"mutability":"mutable","name":"poolData","nameLocation":"9261:8:10","nodeType":"VariableDeclaration","scope":1706,"src":"9245:24:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$2269_memory_ptr","typeString":"struct PoolData"},"typeName":{"id":1703,"nodeType":"UserDefinedTypeName","pathNode":{"id":1702,"name":"PoolData","nameLocations":["9245:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":2269,"src":"9245:8:10"},"referencedDeclaration":2269,"src":"9245:8:10","typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$2269_storage_ptr","typeString":"struct PoolData"}},"visibility":"internal"}],"src":"9244:26:10"},"scope":1966,"src":"9187:84:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1707,"nodeType":"StructuredDocumentation","src":"9277:531:10","text":" @notice Gets the raw data for a pool: tokens, raw balances, scaling factors.\n @param pool Address of the pool\n @return tokens The pool tokens, sorted in registration order\n @return tokenInfo Token info structs (type, rate provider, yield flag), sorted in token registration order\n @return balancesRaw Current native decimal balances of the pool tokens, sorted in token registration order\n @return lastBalancesLiveScaled18 Last saved live balances, sorted in token registration order"},"functionSelector":"67e0e076","id":1726,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenInfo","nameLocation":"9822:16:10","nodeType":"FunctionDefinition","parameters":{"id":1710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1709,"mutability":"mutable","name":"pool","nameLocation":"9856:4:10","nodeType":"VariableDeclaration","scope":1726,"src":"9848:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1708,"name":"address","nodeType":"ElementaryTypeName","src":"9848:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9838:28:10"},"returnParameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1714,"mutability":"mutable","name":"tokens","nameLocation":"9943:6:10","nodeType":"VariableDeclaration","scope":1726,"src":"9927:22:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1712,"nodeType":"UserDefinedTypeName","pathNode":{"id":1711,"name":"IERC20","nameLocations":["9927:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"9927:6:10"},"referencedDeclaration":6654,"src":"9927:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":1713,"nodeType":"ArrayTypeName","src":"9927:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1718,"mutability":"mutable","name":"tokenInfo","nameLocation":"9982:9:10","nodeType":"VariableDeclaration","scope":1726,"src":"9963:28:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2244_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenInfo[]"},"typeName":{"baseType":{"id":1716,"nodeType":"UserDefinedTypeName","pathNode":{"id":1715,"name":"TokenInfo","nameLocations":["9963:9:10"],"nodeType":"IdentifierPath","referencedDeclaration":2244,"src":"9963:9:10"},"referencedDeclaration":2244,"src":"9963:9:10","typeDescriptions":{"typeIdentifier":"t_struct$_TokenInfo_$2244_storage_ptr","typeString":"struct TokenInfo"}},"id":1717,"nodeType":"ArrayTypeName","src":"9963:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2244_storage_$dyn_storage_ptr","typeString":"struct TokenInfo[]"}},"visibility":"internal"},{"constant":false,"id":1721,"mutability":"mutable","name":"balancesRaw","nameLocation":"10022:11:10","nodeType":"VariableDeclaration","scope":1726,"src":"10005:28:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1719,"name":"uint256","nodeType":"ElementaryTypeName","src":"10005:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1720,"nodeType":"ArrayTypeName","src":"10005:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1724,"mutability":"mutable","name":"lastBalancesLiveScaled18","nameLocation":"10064:24:10","nodeType":"VariableDeclaration","scope":1726,"src":"10047:41:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1722,"name":"uint256","nodeType":"ElementaryTypeName","src":"10047:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1723,"nodeType":"ArrayTypeName","src":"10047:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"9913:185:10"},"scope":1966,"src":"9813:286:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1727,"nodeType":"StructuredDocumentation","src":"10105:312:10","text":" @notice Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in\n registration order.\n @param pool Address of the pool\n @return balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates"},"functionSelector":"535cfd8a","id":1735,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentLiveBalances","nameLocation":"10431:22:10","nodeType":"FunctionDefinition","parameters":{"id":1730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1729,"mutability":"mutable","name":"pool","nameLocation":"10462:4:10","nodeType":"VariableDeclaration","scope":1735,"src":"10454:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1728,"name":"address","nodeType":"ElementaryTypeName","src":"10454:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10453:14:10"},"returnParameters":{"id":1734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"mutability":"mutable","name":"balancesLiveScaled18","nameLocation":"10508:20:10","nodeType":"VariableDeclaration","scope":1735,"src":"10491:37:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1731,"name":"uint256","nodeType":"ElementaryTypeName","src":"10491:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1732,"nodeType":"ArrayTypeName","src":"10491:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10490:39:10"},"scope":1966,"src":"10422:108:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1736,"nodeType":"StructuredDocumentation","src":"10536:301:10","text":" @notice Gets the configuration parameters of a pool.\n @dev The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\n @param pool Address of the pool\n @return poolConfig The pool configuration as a `PoolConfig` struct"},"functionSelector":"f29486a1","id":1744,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolConfig","nameLocation":"10851:13:10","nodeType":"FunctionDefinition","parameters":{"id":1739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1738,"mutability":"mutable","name":"pool","nameLocation":"10873:4:10","nodeType":"VariableDeclaration","scope":1744,"src":"10865:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1737,"name":"address","nodeType":"ElementaryTypeName","src":"10865:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10864:14:10"},"returnParameters":{"id":1743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1742,"mutability":"mutable","name":"poolConfig","nameLocation":"10920:10:10","nodeType":"VariableDeclaration","scope":1744,"src":"10902:28:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2145_memory_ptr","typeString":"struct PoolConfig"},"typeName":{"id":1741,"nodeType":"UserDefinedTypeName","pathNode":{"id":1740,"name":"PoolConfig","nameLocations":["10902:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":2145,"src":"10902:10:10"},"referencedDeclaration":2145,"src":"10902:10:10","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$2145_storage_ptr","typeString":"struct PoolConfig"}},"visibility":"internal"}],"src":"10901:30:10"},"scope":1966,"src":"10842:90:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1745,"nodeType":"StructuredDocumentation","src":"10938:283:10","text":" @notice Gets the hooks configuration parameters of a pool.\n @dev The `HooksConfig` contains flags indicating which pool hooks are implemented.\n @param pool Address of the pool\n @return hooksConfig The hooks configuration as a `HooksConfig` struct"},"functionSelector":"ce8630d4","id":1753,"implemented":false,"kind":"function","modifiers":[],"name":"getHooksConfig","nameLocation":"11235:14:10","nodeType":"FunctionDefinition","parameters":{"id":1748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"pool","nameLocation":"11258:4:10","nodeType":"VariableDeclaration","scope":1753,"src":"11250:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1746,"name":"address","nodeType":"ElementaryTypeName","src":"11250:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11249:14:10"},"returnParameters":{"id":1752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1751,"mutability":"mutable","name":"hooksConfig","nameLocation":"11306:11:10","nodeType":"VariableDeclaration","scope":1753,"src":"11287:30:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2191_memory_ptr","typeString":"struct HooksConfig"},"typeName":{"id":1750,"nodeType":"UserDefinedTypeName","pathNode":{"id":1749,"name":"HooksConfig","nameLocations":["11287:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":2191,"src":"11287:11:10"},"referencedDeclaration":2191,"src":"11287:11:10","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$2191_storage_ptr","typeString":"struct HooksConfig"}},"visibility":"internal"}],"src":"11286:32:10"},"scope":1966,"src":"11226:93:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1754,"nodeType":"StructuredDocumentation","src":"11325:160:10","text":" @notice The current rate of a pool token (BPT) = invariant / totalSupply.\n @param pool Address of the pool\n @return rate BPT rate"},"functionSelector":"4f037ee7","id":1761,"implemented":false,"kind":"function","modifiers":[],"name":"getBptRate","nameLocation":"11499:10:10","nodeType":"FunctionDefinition","parameters":{"id":1757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1756,"mutability":"mutable","name":"pool","nameLocation":"11518:4:10","nodeType":"VariableDeclaration","scope":1761,"src":"11510:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1755,"name":"address","nodeType":"ElementaryTypeName","src":"11510:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11509:14:10"},"returnParameters":{"id":1760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1759,"mutability":"mutable","name":"rate","nameLocation":"11555:4:10","nodeType":"VariableDeclaration","scope":1761,"src":"11547:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1758,"name":"uint256","nodeType":"ElementaryTypeName","src":"11547:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11546:14:10"},"scope":1966,"src":"11490:71:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1762,"nodeType":"StructuredDocumentation","src":"11792:168:10","text":" @notice Gets the total supply of a given ERC20 token.\n @param token The token address\n @return tokenTotalSupply Total supply of the token"},"functionSelector":"e4dc2aa4","id":1769,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"11974:11:10","nodeType":"FunctionDefinition","parameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1764,"mutability":"mutable","name":"token","nameLocation":"11994:5:10","nodeType":"VariableDeclaration","scope":1769,"src":"11986:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1763,"name":"address","nodeType":"ElementaryTypeName","src":"11986:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11985:15:10"},"returnParameters":{"id":1768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1767,"mutability":"mutable","name":"tokenTotalSupply","nameLocation":"12032:16:10","nodeType":"VariableDeclaration","scope":1769,"src":"12024:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1766,"name":"uint256","nodeType":"ElementaryTypeName","src":"12024:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12023:26:10"},"scope":1966,"src":"11965:85:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1770,"nodeType":"StructuredDocumentation","src":"12056:225:10","text":" @notice Gets the balance of an account for a given ERC20 token.\n @param token Address of the token\n @param account Address of the account\n @return tokenBalance Token balance of the account"},"functionSelector":"f7888aec","id":1779,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"12295:9:10","nodeType":"FunctionDefinition","parameters":{"id":1775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1772,"mutability":"mutable","name":"token","nameLocation":"12313:5:10","nodeType":"VariableDeclaration","scope":1779,"src":"12305:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1771,"name":"address","nodeType":"ElementaryTypeName","src":"12305:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1774,"mutability":"mutable","name":"account","nameLocation":"12328:7:10","nodeType":"VariableDeclaration","scope":1779,"src":"12320:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1773,"name":"address","nodeType":"ElementaryTypeName","src":"12320:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12304:32:10"},"returnParameters":{"id":1778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1777,"mutability":"mutable","name":"tokenBalance","nameLocation":"12368:12:10","nodeType":"VariableDeclaration","scope":1779,"src":"12360:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1776,"name":"uint256","nodeType":"ElementaryTypeName","src":"12360:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12359:22:10"},"scope":1966,"src":"12286:96:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1780,"nodeType":"StructuredDocumentation","src":"12388:299:10","text":" @notice Gets the allowance of a spender for a given ERC20 token and owner.\n @param token Address of the token\n @param owner Address of the owner\n @param spender Address of the spender\n @return tokenAllowance Amount of tokens the spender is allowed to spend"},"functionSelector":"927da105","id":1791,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"12701:9:10","nodeType":"FunctionDefinition","parameters":{"id":1787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1782,"mutability":"mutable","name":"token","nameLocation":"12719:5:10","nodeType":"VariableDeclaration","scope":1791,"src":"12711:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1781,"name":"address","nodeType":"ElementaryTypeName","src":"12711:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1784,"mutability":"mutable","name":"owner","nameLocation":"12734:5:10","nodeType":"VariableDeclaration","scope":1791,"src":"12726:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1783,"name":"address","nodeType":"ElementaryTypeName","src":"12726:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1786,"mutability":"mutable","name":"spender","nameLocation":"12749:7:10","nodeType":"VariableDeclaration","scope":1791,"src":"12741:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1785,"name":"address","nodeType":"ElementaryTypeName","src":"12741:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12710:47:10"},"returnParameters":{"id":1790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1789,"mutability":"mutable","name":"tokenAllowance","nameLocation":"12789:14:10","nodeType":"VariableDeclaration","scope":1791,"src":"12781:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1788,"name":"uint256","nodeType":"ElementaryTypeName","src":"12781:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12780:24:10"},"scope":1966,"src":"12692:113:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1792,"nodeType":"StructuredDocumentation","src":"12811:475:10","text":" @notice Approves a spender to spend pool tokens on behalf of sender.\n @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n the pool contract, so msg.sender is used as the token address.\n @param owner Address of the owner\n @param spender Address of the spender\n @param amount Amount of tokens to approve\n @return success True if successful, false otherwise"},"functionSelector":"e1f21c67","id":1803,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"13300:7:10","nodeType":"FunctionDefinition","parameters":{"id":1799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1794,"mutability":"mutable","name":"owner","nameLocation":"13316:5:10","nodeType":"VariableDeclaration","scope":1803,"src":"13308:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1793,"name":"address","nodeType":"ElementaryTypeName","src":"13308:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1796,"mutability":"mutable","name":"spender","nameLocation":"13331:7:10","nodeType":"VariableDeclaration","scope":1803,"src":"13323:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1795,"name":"address","nodeType":"ElementaryTypeName","src":"13323:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1798,"mutability":"mutable","name":"amount","nameLocation":"13348:6:10","nodeType":"VariableDeclaration","scope":1803,"src":"13340:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1797,"name":"uint256","nodeType":"ElementaryTypeName","src":"13340:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13307:48:10"},"returnParameters":{"id":1802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"success","nameLocation":"13379:7:10","nodeType":"VariableDeclaration","scope":1803,"src":"13374:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1800,"name":"bool","nodeType":"ElementaryTypeName","src":"13374:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13373:14:10"},"scope":1966,"src":"13291:97:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1804,"nodeType":"StructuredDocumentation","src":"13615:251:10","text":" @notice Indicates whether a pool is paused.\n @dev If a pool is paused, all non-Recovery Mode state-changing operations will revert.\n @param pool The pool to be checked\n @return poolPaused True if the pool is paused"},"functionSelector":"6c9bc732","id":1811,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolPaused","nameLocation":"13880:12:10","nodeType":"FunctionDefinition","parameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"pool","nameLocation":"13901:4:10","nodeType":"VariableDeclaration","scope":1811,"src":"13893:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1805,"name":"address","nodeType":"ElementaryTypeName","src":"13893:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13892:14:10"},"returnParameters":{"id":1810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1809,"mutability":"mutable","name":"poolPaused","nameLocation":"13935:10:10","nodeType":"VariableDeclaration","scope":1811,"src":"13930:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1808,"name":"bool","nodeType":"ElementaryTypeName","src":"13930:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13929:17:10"},"scope":1966,"src":"13871:76:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1812,"nodeType":"StructuredDocumentation","src":"13953:648:10","text":" @notice Returns the paused status, and end times of the Pool's pause window and buffer period.\n @dev Note that even when set to a paused state, the pool will automatically unpause at the end of\n the buffer period. Balancer timestamps are 32 bits.\n @param pool The pool whose data is requested\n @return poolPaused True if the Pool is paused\n @return poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\n @return poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\n @return pauseManager The pause manager, or the zero address"},"functionSelector":"15e32046","id":1825,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolPausedState","nameLocation":"14615:18:10","nodeType":"FunctionDefinition","parameters":{"id":1815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1814,"mutability":"mutable","name":"pool","nameLocation":"14651:4:10","nodeType":"VariableDeclaration","scope":1825,"src":"14643:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1813,"name":"address","nodeType":"ElementaryTypeName","src":"14643:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14633:28:10"},"returnParameters":{"id":1824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"poolPaused","nameLocation":"14714:10:10","nodeType":"VariableDeclaration","scope":1825,"src":"14709:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1816,"name":"bool","nodeType":"ElementaryTypeName","src":"14709:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1819,"mutability":"mutable","name":"poolPauseWindowEndTime","nameLocation":"14733:22:10","nodeType":"VariableDeclaration","scope":1825,"src":"14726:29:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1818,"name":"uint32","nodeType":"ElementaryTypeName","src":"14726:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1821,"mutability":"mutable","name":"poolBufferPeriodEndTime","nameLocation":"14764:23:10","nodeType":"VariableDeclaration","scope":1825,"src":"14757:30:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1820,"name":"uint32","nodeType":"ElementaryTypeName","src":"14757:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1823,"mutability":"mutable","name":"pauseManager","nameLocation":"14797:12:10","nodeType":"VariableDeclaration","scope":1825,"src":"14789:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1822,"name":"address","nodeType":"ElementaryTypeName","src":"14789:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14708:102:10"},"scope":1966,"src":"14606:205:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1826,"nodeType":"StructuredDocumentation","src":"15039:332:10","text":" @notice Checks if the wrapped token has an initialized buffer in the Vault.\n @dev An initialized buffer should have an asset registered in the Vault.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return isBufferInitialized True if the ERC4626 buffer is initialized"},"functionSelector":"6844846b","id":1834,"implemented":false,"kind":"function","modifiers":[],"name":"isERC4626BufferInitialized","nameLocation":"15385:26:10","nodeType":"FunctionDefinition","parameters":{"id":1830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"mutability":"mutable","name":"wrappedToken","nameLocation":"15421:12:10","nodeType":"VariableDeclaration","scope":1834,"src":"15412:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1828,"nodeType":"UserDefinedTypeName","pathNode":{"id":1827,"name":"IERC4626","nameLocations":["15412:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"15412:8:10"},"referencedDeclaration":6576,"src":"15412:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"15411:23:10"},"returnParameters":{"id":1833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1832,"mutability":"mutable","name":"isBufferInitialized","nameLocation":"15463:19:10","nodeType":"VariableDeclaration","scope":1834,"src":"15458:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1831,"name":"bool","nodeType":"ElementaryTypeName","src":"15458:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15457:26:10"},"scope":1966,"src":"15376:108:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1835,"nodeType":"StructuredDocumentation","src":"15490:477:10","text":" @notice Gets the registered asset for a given buffer.\n @dev To avoid malicious wrappers (e.g., that might potentially change their asset after deployment), routers\n should never call `wrapper.asset()` directly, at least without checking it against the asset registered with\n the Vault on initialization.\n @param wrappedToken The wrapped token specifying the buffer\n @return asset The underlying asset of the wrapped token"},"functionSelector":"4afbaf5a","id":1843,"implemented":false,"kind":"function","modifiers":[],"name":"getERC4626BufferAsset","nameLocation":"15981:21:10","nodeType":"FunctionDefinition","parameters":{"id":1839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1838,"mutability":"mutable","name":"wrappedToken","nameLocation":"16012:12:10","nodeType":"VariableDeclaration","scope":1843,"src":"16003:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":1837,"nodeType":"UserDefinedTypeName","pathNode":{"id":1836,"name":"IERC4626","nameLocations":["16003:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"16003:8:10"},"referencedDeclaration":6576,"src":"16003:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"16002:23:10"},"returnParameters":{"id":1842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1841,"mutability":"mutable","name":"asset","nameLocation":"16057:5:10","nodeType":"VariableDeclaration","scope":1843,"src":"16049:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1840,"name":"address","nodeType":"ElementaryTypeName","src":"16049:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16048:15:10"},"scope":1966,"src":"15972:92:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1844,"nodeType":"StructuredDocumentation","src":"16288:379:10","text":" @notice Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\n @param pool The address of the pool for which aggregate fees have been collected\n @param token The address of the token in which fees have been accumulated\n @return swapFeeAmount The total amount of fees accumulated in the specified token"},"functionSelector":"85e0b999","id":1854,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregateSwapFeeAmount","nameLocation":"16681:25:10","nodeType":"FunctionDefinition","parameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1846,"mutability":"mutable","name":"pool","nameLocation":"16715:4:10","nodeType":"VariableDeclaration","scope":1854,"src":"16707:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1845,"name":"address","nodeType":"ElementaryTypeName","src":"16707:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1849,"mutability":"mutable","name":"token","nameLocation":"16728:5:10","nodeType":"VariableDeclaration","scope":1854,"src":"16721:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1848,"nodeType":"UserDefinedTypeName","pathNode":{"id":1847,"name":"IERC20","nameLocations":["16721:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"16721:6:10"},"referencedDeclaration":6654,"src":"16721:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"16706:28:10"},"returnParameters":{"id":1853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1852,"mutability":"mutable","name":"swapFeeAmount","nameLocation":"16766:13:10","nodeType":"VariableDeclaration","scope":1854,"src":"16758:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1851,"name":"uint256","nodeType":"ElementaryTypeName","src":"16758:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16757:23:10"},"scope":1966,"src":"16672:109:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1855,"nodeType":"StructuredDocumentation","src":"16787:381:10","text":" @notice Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\n @param pool The address of the pool for which aggregate fees have been collected\n @param token The address of the token in which fees have been accumulated\n @return yieldFeeAmount The total amount of fees accumulated in the specified token"},"functionSelector":"00fdfa13","id":1865,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregateYieldFeeAmount","nameLocation":"17182:26:10","nodeType":"FunctionDefinition","parameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1857,"mutability":"mutable","name":"pool","nameLocation":"17217:4:10","nodeType":"VariableDeclaration","scope":1865,"src":"17209:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1856,"name":"address","nodeType":"ElementaryTypeName","src":"17209:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1860,"mutability":"mutable","name":"token","nameLocation":"17230:5:10","nodeType":"VariableDeclaration","scope":1865,"src":"17223:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1859,"nodeType":"UserDefinedTypeName","pathNode":{"id":1858,"name":"IERC20","nameLocations":["17223:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"17223:6:10"},"referencedDeclaration":6654,"src":"17223:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"17208:28:10"},"returnParameters":{"id":1864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1863,"mutability":"mutable","name":"yieldFeeAmount","nameLocation":"17268:14:10","nodeType":"VariableDeclaration","scope":1865,"src":"17260:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1862,"name":"uint256","nodeType":"ElementaryTypeName","src":"17260:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17259:24:10"},"scope":1966,"src":"17173:111:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1866,"nodeType":"StructuredDocumentation","src":"17290:271:10","text":" @notice Fetches the static swap fee percentage for a given pool.\n @param pool The address of the pool whose static swap fee percentage is being queried\n @return swapFeePercentage The current static swap fee percentage for the specified pool"},"functionSelector":"b45090f9","id":1873,"implemented":false,"kind":"function","modifiers":[],"name":"getStaticSwapFeePercentage","nameLocation":"17575:26:10","nodeType":"FunctionDefinition","parameters":{"id":1869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1868,"mutability":"mutable","name":"pool","nameLocation":"17610:4:10","nodeType":"VariableDeclaration","scope":1873,"src":"17602:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1867,"name":"address","nodeType":"ElementaryTypeName","src":"17602:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17601:14:10"},"returnParameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1871,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"17647:17:10","nodeType":"VariableDeclaration","scope":1873,"src":"17639:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"17639:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17638:27:10"},"scope":1966,"src":"17566:100:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1874,"nodeType":"StructuredDocumentation","src":"17672:286:10","text":" @notice Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\n @param pool The address of the pool whose roles are being queried\n @return roleAccounts A struct containing the role accounts for the pool (or 0 if unassigned)"},"functionSelector":"e9ddeb26","id":1882,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolRoleAccounts","nameLocation":"17972:19:10","nodeType":"FunctionDefinition","parameters":{"id":1877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"pool","nameLocation":"18000:4:10","nodeType":"VariableDeclaration","scope":1882,"src":"17992:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1875,"name":"address","nodeType":"ElementaryTypeName","src":"17992:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17991:14:10"},"returnParameters":{"id":1881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1880,"mutability":"mutable","name":"roleAccounts","nameLocation":"18053:12:10","nodeType":"VariableDeclaration","scope":1882,"src":"18029:36:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2217_memory_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":1879,"nodeType":"UserDefinedTypeName","pathNode":{"id":1878,"name":"PoolRoleAccounts","nameLocations":["18029:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":2217,"src":"18029:16:10"},"referencedDeclaration":2217,"src":"18029:16:10","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2217_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"}],"src":"18028:38:10"},"scope":1966,"src":"17963:104:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1883,"nodeType":"StructuredDocumentation","src":"18073:363:10","text":" @notice Query the current dynamic swap fee percentage of a pool, given a set of swap parameters.\n @dev Reverts if the hook doesn't return the success flag set to `true`.\n @param pool The pool\n @param swapParams The swap parameters used to compute the fee\n @return dynamicSwapFeePercentage The dynamic swap fee percentage"},"functionSelector":"4d472bdd","id":1893,"implemented":false,"kind":"function","modifiers":[],"name":"computeDynamicSwapFeePercentage","nameLocation":"18450:31:10","nodeType":"FunctionDefinition","parameters":{"id":1889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1885,"mutability":"mutable","name":"pool","nameLocation":"18499:4:10","nodeType":"VariableDeclaration","scope":1893,"src":"18491:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1884,"name":"address","nodeType":"ElementaryTypeName","src":"18491:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1888,"mutability":"mutable","name":"swapParams","nameLocation":"18535:10:10","nodeType":"VariableDeclaration","scope":1893,"src":"18513:32:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2312_memory_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":1887,"nodeType":"UserDefinedTypeName","pathNode":{"id":1886,"name":"PoolSwapParams","nameLocations":["18513:14:10"],"nodeType":"IdentifierPath","referencedDeclaration":2312,"src":"18513:14:10"},"referencedDeclaration":2312,"src":"18513:14:10","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$2312_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"}],"src":"18481:70:10"},"returnParameters":{"id":1892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1891,"mutability":"mutable","name":"dynamicSwapFeePercentage","nameLocation":"18583:24:10","nodeType":"VariableDeclaration","scope":1893,"src":"18575:32:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1890,"name":"uint256","nodeType":"ElementaryTypeName","src":"18575:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18574:34:10"},"scope":1966,"src":"18441:168:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1894,"nodeType":"StructuredDocumentation","src":"18615:145:10","text":" @notice Returns the Protocol Fee Controller address.\n @return protocolFeeController Address of the ProtocolFeeController"},"functionSelector":"85f2dbd4","id":1900,"implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeeController","nameLocation":"18774:24:10","nodeType":"FunctionDefinition","parameters":{"id":1895,"nodeType":"ParameterList","parameters":[],"src":"18798:2:10"},"returnParameters":{"id":1899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1898,"mutability":"mutable","name":"protocolFeeController","nameLocation":"18847:21:10","nodeType":"VariableDeclaration","scope":1900,"src":"18824:44:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"},"typeName":{"id":1897,"nodeType":"UserDefinedTypeName","pathNode":{"id":1896,"name":"IProtocolFeeController","nameLocations":["18824:22:10"],"nodeType":"IdentifierPath","referencedDeclaration":613,"src":"18824:22:10"},"referencedDeclaration":613,"src":"18824:22:10","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"src":"18823:46:10"},"scope":1966,"src":"18765:105:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1901,"nodeType":"StructuredDocumentation","src":"19098:296:10","text":" @notice Checks whether a pool is in Recovery Mode.\n @dev Recovery Mode enables a safe proportional withdrawal path, with no external calls.\n @param pool Address of the pool to check\n @return inRecoveryMode True if the pool is in Recovery Mode, false otherwise"},"functionSelector":"be7d628a","id":1908,"implemented":false,"kind":"function","modifiers":[],"name":"isPoolInRecoveryMode","nameLocation":"19408:20:10","nodeType":"FunctionDefinition","parameters":{"id":1904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"mutability":"mutable","name":"pool","nameLocation":"19437:4:10","nodeType":"VariableDeclaration","scope":1908,"src":"19429:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1902,"name":"address","nodeType":"ElementaryTypeName","src":"19429:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19428:14:10"},"returnParameters":{"id":1907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1906,"mutability":"mutable","name":"inRecoveryMode","nameLocation":"19471:14:10","nodeType":"VariableDeclaration","scope":1908,"src":"19466:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1905,"name":"bool","nodeType":"ElementaryTypeName","src":"19466:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"19465:21:10"},"scope":1966,"src":"19399:88:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1909,"nodeType":"StructuredDocumentation","src":"19493:679:10","text":" @notice Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out.\n The request is implemented by the Vault without any interaction with the pool, ensuring that\n it works the same for all pools, and cannot be disabled by a new pool type.\n @param pool Address of the pool\n @param from Address of user to burn pool tokens from\n @param exactBptAmountIn Input pool token amount\n @param minAmountsOut Minimum amounts of tokens to be received, sorted in token registration order\n @return amountsOut Actual calculated amounts of output tokens, sorted in token registration order"},"functionSelector":"a07d6040","id":1924,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityRecovery","nameLocation":"20186:23:10","nodeType":"FunctionDefinition","parameters":{"id":1919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1911,"mutability":"mutable","name":"pool","nameLocation":"20227:4:10","nodeType":"VariableDeclaration","scope":1924,"src":"20219:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1910,"name":"address","nodeType":"ElementaryTypeName","src":"20219:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1913,"mutability":"mutable","name":"from","nameLocation":"20249:4:10","nodeType":"VariableDeclaration","scope":1924,"src":"20241:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1912,"name":"address","nodeType":"ElementaryTypeName","src":"20241:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1915,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"20271:16:10","nodeType":"VariableDeclaration","scope":1924,"src":"20263:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1914,"name":"uint256","nodeType":"ElementaryTypeName","src":"20263:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1918,"mutability":"mutable","name":"minAmountsOut","nameLocation":"20314:13:10","nodeType":"VariableDeclaration","scope":1924,"src":"20297:30:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1916,"name":"uint256","nodeType":"ElementaryTypeName","src":"20297:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1917,"nodeType":"ArrayTypeName","src":"20297:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"20209:124:10"},"returnParameters":{"id":1923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1922,"mutability":"mutable","name":"amountsOut","nameLocation":"20369:10:10","nodeType":"VariableDeclaration","scope":1924,"src":"20352:27:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1920,"name":"uint256","nodeType":"ElementaryTypeName","src":"20352:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1921,"nodeType":"ArrayTypeName","src":"20352:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"20351:29:10"},"scope":1966,"src":"20177:204:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1925,"nodeType":"StructuredDocumentation","src":"20602:699:10","text":" @notice Performs a callback on msg.sender with arguments provided in `data`.\n @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\n anything else will revert.\n Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier.\n Allows the external calling of a function via the Vault contract to\n access Vault's functions guarded by `onlyWhenUnlocked`.\n `transient` modifier ensuring balances changes within the Vault are settled.\n @param data Contains function signature and args to be passed to the msg.sender\n @return result Resulting data from the call"},"functionSelector":"edfa3568","id":1932,"implemented":false,"kind":"function","modifiers":[],"name":"quote","nameLocation":"21315:5:10","nodeType":"FunctionDefinition","parameters":{"id":1928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1927,"mutability":"mutable","name":"data","nameLocation":"21336:4:10","nodeType":"VariableDeclaration","scope":1932,"src":"21321:19:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1926,"name":"bytes","nodeType":"ElementaryTypeName","src":"21321:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21320:21:10"},"returnParameters":{"id":1931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1930,"mutability":"mutable","name":"result","nameLocation":"21373:6:10","nodeType":"VariableDeclaration","scope":1932,"src":"21360:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1929,"name":"bytes","nodeType":"ElementaryTypeName","src":"21360:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21359:21:10"},"scope":1966,"src":"21306:75:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1933,"nodeType":"StructuredDocumentation","src":"21387:731:10","text":" @notice Performs a callback on msg.sender with arguments provided in `data`.\n @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\n anything else will revert.\n Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier.\n Allows the external calling of a function via the Vault contract to\n access Vault's functions guarded by `onlyWhenUnlocked`.\n `transient` modifier ensuring balances changes within the Vault are settled.\n This call always reverts, returning the result in the revert reason.\n @param data Contains function signature and args to be passed to the msg.sender"},"functionSelector":"757d64b3","id":1938,"implemented":false,"kind":"function","modifiers":[],"name":"quoteAndRevert","nameLocation":"22132:14:10","nodeType":"FunctionDefinition","parameters":{"id":1936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1935,"mutability":"mutable","name":"data","nameLocation":"22162:4:10","nodeType":"VariableDeclaration","scope":1938,"src":"22147:19:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1934,"name":"bytes","nodeType":"ElementaryTypeName","src":"22147:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"22146:21:10"},"returnParameters":{"id":1937,"nodeType":"ParameterList","parameters":[],"src":"22176:0:10"},"scope":1966,"src":"22123:54:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1939,"nodeType":"StructuredDocumentation","src":"22183:239:10","text":" @notice Returns true if queries are disabled on the Vault.\n @dev If true, queries might either be disabled temporarily or permanently.\n @return queryDisabled True if query functionality is reversibly disabled"},"functionSelector":"b4aef0ab","id":1944,"implemented":false,"kind":"function","modifiers":[],"name":"isQueryDisabled","nameLocation":"22436:15:10","nodeType":"FunctionDefinition","parameters":{"id":1940,"nodeType":"ParameterList","parameters":[],"src":"22451:2:10"},"returnParameters":{"id":1943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1942,"mutability":"mutable","name":"queryDisabled","nameLocation":"22482:13:10","nodeType":"VariableDeclaration","scope":1944,"src":"22477:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1941,"name":"bool","nodeType":"ElementaryTypeName","src":"22477:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"22476:20:10"},"scope":1966,"src":"22427:70:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1945,"nodeType":"StructuredDocumentation","src":"22503:302:10","text":" @notice Returns true if queries are disabled permanently; false if they are enabled.\n @dev This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\n @return queryDisabledPermanently True if query functionality is permanently disabled"},"functionSelector":"13ef8a5d","id":1950,"implemented":false,"kind":"function","modifiers":[],"name":"isQueryDisabledPermanently","nameLocation":"22819:26:10","nodeType":"FunctionDefinition","parameters":{"id":1946,"nodeType":"ParameterList","parameters":[],"src":"22845:2:10"},"returnParameters":{"id":1949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1948,"mutability":"mutable","name":"queryDisabledPermanently","nameLocation":"22876:24:10","nodeType":"VariableDeclaration","scope":1950,"src":"22871:29:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1947,"name":"bool","nodeType":"ElementaryTypeName","src":"22871:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"22870:31:10"},"scope":1966,"src":"22810:92:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1951,"nodeType":"StructuredDocumentation","src":"22908:162:10","text":" @notice Pools can use this event to emit event data from the Vault.\n @param eventKey Event key\n @param eventData Encoded event data"},"functionSelector":"c8088247","id":1958,"implemented":false,"kind":"function","modifiers":[],"name":"emitAuxiliaryEvent","nameLocation":"23084:18:10","nodeType":"FunctionDefinition","parameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1953,"mutability":"mutable","name":"eventKey","nameLocation":"23111:8:10","nodeType":"VariableDeclaration","scope":1958,"src":"23103:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1952,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23103:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1955,"mutability":"mutable","name":"eventData","nameLocation":"23136:9:10","nodeType":"VariableDeclaration","scope":1958,"src":"23121:24:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1954,"name":"bytes","nodeType":"ElementaryTypeName","src":"23121:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"23102:44:10"},"returnParameters":{"id":1957,"nodeType":"ParameterList","parameters":[],"src":"23155:0:10"},"scope":1966,"src":"23075:81:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1959,"nodeType":"StructuredDocumentation","src":"23380:284:10","text":" @notice Returns the Authorizer address.\n @dev The authorizer holds the permissions granted by governance. It is set on Vault deployment,\n and can be changed through a permissioned call.\n @return authorizer Address of the authorizer contract"},"functionSelector":"aaabadc5","id":1965,"implemented":false,"kind":"function","modifiers":[],"name":"getAuthorizer","nameLocation":"23678:13:10","nodeType":"FunctionDefinition","parameters":{"id":1960,"nodeType":"ParameterList","parameters":[],"src":"23691:2:10"},"returnParameters":{"id":1964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"authorizer","nameLocation":"23729:10:10","nodeType":"VariableDeclaration","scope":1965,"src":"23717:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"},"typeName":{"id":1962,"nodeType":"UserDefinedTypeName","pathNode":{"id":1961,"name":"IAuthorizer","nameLocations":["23717:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":73,"src":"23717:11:10"},"referencedDeclaration":73,"src":"23717:11:10","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"23716:24:10"},"scope":1966,"src":"23669:72:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1967,"src":"767:22976:10","usedErrors":[],"usedEvents":[]}],"src":"46:23698:10"},"id":10},"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol","exportedSymbols":{"AddLiquidityKind":[2347],"AddLiquidityParams":[2363],"AfterSwapParams":[2341],"BufferWrapOrUnwrapParams":[2402],"FEE_BITLENGTH":[2405],"FEE_SCALING_FACTOR":[2408],"HookFlags":[2167],"HooksConfig":[2191],"IERC20":[6654],"IERC4626":[6576],"IRateProvider":[57],"IVaultMain":[2102],"LiquidityManagement":[2120],"MAX_FEE_PERCENTAGE":[2411],"PoolConfig":[2145],"PoolConfigBits":[2122],"PoolData":[2269],"PoolRoleAccounts":[2217],"PoolSwapParams":[2312],"RemoveLiquidityKind":[2368],"RemoveLiquidityParams":[2384],"Rounding":[2272],"SwapKind":[2275],"SwapState":[2201],"TokenConfig":[2234],"TokenInfo":[2244],"TokenType":[2221],"VaultState":[2209],"VaultSwapParams":[2294],"WrappingDirection":[2387]},"id":2103,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1968,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:11"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":1970,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2103,"sourceUnit":6655,"src":"72:72:11","symbolAliases":[{"foreign":{"id":1969,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6654,"src":"81:6:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","id":1971,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2103,"sourceUnit":2412,"src":"146:26:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVaultMain","contractDependencies":[],"contractKind":"interface","documentation":{"id":1972,"nodeType":"StructuredDocumentation","src":"174:232:11","text":" @notice Interface for functions defined on the main Vault contract.\n @dev These are generally \"critical path\" functions (swap, add/remove liquidity) that are in the main contract\n for technical or performance reasons."},"fullyImplemented":false,"id":2102,"linearizedBaseContracts":[2102],"name":"IVaultMain","nameLocation":"417:10:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1973,"nodeType":"StructuredDocumentation","src":"656:431:11","text":" @notice Creates a context for a sequence of operations (i.e., \"unlocks\" the Vault).\n @dev Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`,\n meaning all balances for the caller have to be settled at the end.\n @param data Contains function signature and args to be passed to the msg.sender\n @return result Resulting data from the call"},"functionSelector":"48c89491","id":1980,"implemented":false,"kind":"function","modifiers":[],"name":"unlock","nameLocation":"1101:6:11","nodeType":"FunctionDefinition","parameters":{"id":1976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1975,"mutability":"mutable","name":"data","nameLocation":"1123:4:11","nodeType":"VariableDeclaration","scope":1980,"src":"1108:19:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1974,"name":"bytes","nodeType":"ElementaryTypeName","src":"1108:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1107:21:11"},"returnParameters":{"id":1979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1978,"mutability":"mutable","name":"result","nameLocation":"1160:6:11","nodeType":"VariableDeclaration","scope":1980,"src":"1147:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1977,"name":"bytes","nodeType":"ElementaryTypeName","src":"1147:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1146:21:11"},"scope":2102,"src":"1092:76:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1981,"nodeType":"StructuredDocumentation","src":"1174:1291:11","text":" @notice Settles deltas for a token; must be successful for the current lock to be released.\n @dev Protects the caller against leftover dust in the Vault for the token being settled. The caller\n should know in advance how many tokens were paid to the Vault, so it can provide it as a hint to discard any\n excess in the Vault balance.\n If the given hint is equal to or higher than the difference in reserves, the difference in reserves is given as\n credit to the caller. If it's higher, the caller sent fewer tokens than expected, so settlement would fail.\n If the given hint is lower than the difference in reserves, the hint is given as credit to the caller.\n In this case, the excess would be absorbed by the Vault (and reflected correctly in the reserves), but would\n not affect settlement.\n The credit supplied by the Vault can be calculated as `min(reserveDifference, amountHint)`, where the reserve\n difference equals current balance of the token minus existing reserves of the token when the function is called.\n @param token Address of the token\n @param amountHint Amount paid as reported by the caller\n @return credit Credit received in return of the payment"},"functionSelector":"15afd409","id":1991,"implemented":false,"kind":"function","modifiers":[],"name":"settle","nameLocation":"2479:6:11","nodeType":"FunctionDefinition","parameters":{"id":1987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1984,"mutability":"mutable","name":"token","nameLocation":"2493:5:11","nodeType":"VariableDeclaration","scope":1991,"src":"2486:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1983,"nodeType":"UserDefinedTypeName","pathNode":{"id":1982,"name":"IERC20","nameLocations":["2486:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"2486:6:11"},"referencedDeclaration":6654,"src":"2486:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1986,"mutability":"mutable","name":"amountHint","nameLocation":"2508:10:11","nodeType":"VariableDeclaration","scope":1991,"src":"2500:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1985,"name":"uint256","nodeType":"ElementaryTypeName","src":"2500:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2485:34:11"},"returnParameters":{"id":1990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1989,"mutability":"mutable","name":"credit","nameLocation":"2546:6:11","nodeType":"VariableDeclaration","scope":1991,"src":"2538:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1988,"name":"uint256","nodeType":"ElementaryTypeName","src":"2538:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2537:16:11"},"scope":2102,"src":"2470:84:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1992,"nodeType":"StructuredDocumentation","src":"2560:315:11","text":" @notice Sends tokens to a recipient.\n @dev There is no inverse operation for this function. Transfer funds to the Vault and call `settle` to cancel\n debts.\n @param token Address of the token\n @param to Recipient address\n @param amount Amount of tokens to send"},"functionSelector":"ae639329","id":2002,"implemented":false,"kind":"function","modifiers":[],"name":"sendTo","nameLocation":"2889:6:11","nodeType":"FunctionDefinition","parameters":{"id":2000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1995,"mutability":"mutable","name":"token","nameLocation":"2903:5:11","nodeType":"VariableDeclaration","scope":2002,"src":"2896:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":1994,"nodeType":"UserDefinedTypeName","pathNode":{"id":1993,"name":"IERC20","nameLocations":["2896:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"2896:6:11"},"referencedDeclaration":6654,"src":"2896:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1997,"mutability":"mutable","name":"to","nameLocation":"2918:2:11","nodeType":"VariableDeclaration","scope":2002,"src":"2910:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1996,"name":"address","nodeType":"ElementaryTypeName","src":"2910:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1999,"mutability":"mutable","name":"amount","nameLocation":"2930:6:11","nodeType":"VariableDeclaration","scope":2002,"src":"2922:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1998,"name":"uint256","nodeType":"ElementaryTypeName","src":"2922:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2895:42:11"},"returnParameters":{"id":2001,"nodeType":"ParameterList","parameters":[],"src":"2946:0:11"},"scope":2102,"src":"2880:67:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2003,"nodeType":"StructuredDocumentation","src":"3161:412:11","text":" @notice Swaps tokens based on provided parameters.\n @dev All parameters are given in raw token decimal encoding.\n @param vaultSwapParams Parameters for the swap (see above for struct definition)\n @return amountCalculatedRaw Calculated swap amount\n @return amountInRaw Amount of input tokens for the swap\n @return amountOutRaw Amount of output tokens from the swap"},"functionSelector":"2bfb780c","id":2015,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"3587:4:11","nodeType":"FunctionDefinition","parameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"vaultSwapParams","nameLocation":"3624:15:11","nodeType":"VariableDeclaration","scope":2015,"src":"3601:38:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_VaultSwapParams_$2294_memory_ptr","typeString":"struct VaultSwapParams"},"typeName":{"id":2005,"nodeType":"UserDefinedTypeName","pathNode":{"id":2004,"name":"VaultSwapParams","nameLocations":["3601:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":2294,"src":"3601:15:11"},"referencedDeclaration":2294,"src":"3601:15:11","typeDescriptions":{"typeIdentifier":"t_struct$_VaultSwapParams_$2294_storage_ptr","typeString":"struct VaultSwapParams"}},"visibility":"internal"}],"src":"3591:54:11"},"returnParameters":{"id":2014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2009,"mutability":"mutable","name":"amountCalculatedRaw","nameLocation":"3672:19:11","nodeType":"VariableDeclaration","scope":2015,"src":"3664:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2008,"name":"uint256","nodeType":"ElementaryTypeName","src":"3664:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2011,"mutability":"mutable","name":"amountInRaw","nameLocation":"3701:11:11","nodeType":"VariableDeclaration","scope":2015,"src":"3693:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2010,"name":"uint256","nodeType":"ElementaryTypeName","src":"3693:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2013,"mutability":"mutable","name":"amountOutRaw","nameLocation":"3722:12:11","nodeType":"VariableDeclaration","scope":2015,"src":"3714:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2012,"name":"uint256","nodeType":"ElementaryTypeName","src":"3714:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3663:72:11"},"scope":2102,"src":"3578:158:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2016,"nodeType":"StructuredDocumentation","src":"3954:523:11","text":" @notice Adds liquidity to a pool.\n @dev Caution should be exercised when adding liquidity because the Vault has the capability\n to transfer tokens from any user, given that it holds all allowances.\n @param params Parameters for the add liquidity (see above for struct definition)\n @return amountsIn Actual amounts of input tokens\n @return bptAmountOut Output pool token amount\n @return returnData Arbitrary (optional) data with an encoded response from the pool"},"functionSelector":"4af29ec4","id":2029,"implemented":false,"kind":"function","modifiers":[],"name":"addLiquidity","nameLocation":"4491:12:11","nodeType":"FunctionDefinition","parameters":{"id":2020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2019,"mutability":"mutable","name":"params","nameLocation":"4539:6:11","nodeType":"VariableDeclaration","scope":2029,"src":"4513:32:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_AddLiquidityParams_$2363_memory_ptr","typeString":"struct AddLiquidityParams"},"typeName":{"id":2018,"nodeType":"UserDefinedTypeName","pathNode":{"id":2017,"name":"AddLiquidityParams","nameLocations":["4513:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":2363,"src":"4513:18:11"},"referencedDeclaration":2363,"src":"4513:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_AddLiquidityParams_$2363_storage_ptr","typeString":"struct AddLiquidityParams"}},"visibility":"internal"}],"src":"4503:48:11"},"returnParameters":{"id":2028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2023,"mutability":"mutable","name":"amountsIn","nameLocation":"4587:9:11","nodeType":"VariableDeclaration","scope":2029,"src":"4570:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2021,"name":"uint256","nodeType":"ElementaryTypeName","src":"4570:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2022,"nodeType":"ArrayTypeName","src":"4570:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2025,"mutability":"mutable","name":"bptAmountOut","nameLocation":"4606:12:11","nodeType":"VariableDeclaration","scope":2029,"src":"4598:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2024,"name":"uint256","nodeType":"ElementaryTypeName","src":"4598:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2027,"mutability":"mutable","name":"returnData","nameLocation":"4633:10:11","nodeType":"VariableDeclaration","scope":2029,"src":"4620:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2026,"name":"bytes","nodeType":"ElementaryTypeName","src":"4620:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4569:75:11"},"scope":2102,"src":"4482:163:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2030,"nodeType":"StructuredDocumentation","src":"4864:644:11","text":" @notice Removes liquidity from a pool.\n @dev Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user.\n Untrusted routers require prior approval from the user. This is the only function allowed to call\n _queryModeBalanceIncrease (and only in a query context).\n @param params Parameters for the remove liquidity (see above for struct definition)\n @return bptAmountIn Actual amount of BPT burned\n @return amountsOut Actual amounts of output tokens\n @return returnData Arbitrary (optional) data with an encoded response from the pool"},"functionSelector":"21457897","id":2043,"implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidity","nameLocation":"5522:15:11","nodeType":"FunctionDefinition","parameters":{"id":2034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2033,"mutability":"mutable","name":"params","nameLocation":"5576:6:11","nodeType":"VariableDeclaration","scope":2043,"src":"5547:35:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RemoveLiquidityParams_$2384_memory_ptr","typeString":"struct RemoveLiquidityParams"},"typeName":{"id":2032,"nodeType":"UserDefinedTypeName","pathNode":{"id":2031,"name":"RemoveLiquidityParams","nameLocations":["5547:21:11"],"nodeType":"IdentifierPath","referencedDeclaration":2384,"src":"5547:21:11"},"referencedDeclaration":2384,"src":"5547:21:11","typeDescriptions":{"typeIdentifier":"t_struct$_RemoveLiquidityParams_$2384_storage_ptr","typeString":"struct RemoveLiquidityParams"}},"visibility":"internal"}],"src":"5537:51:11"},"returnParameters":{"id":2042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2036,"mutability":"mutable","name":"bptAmountIn","nameLocation":"5615:11:11","nodeType":"VariableDeclaration","scope":2043,"src":"5607:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2035,"name":"uint256","nodeType":"ElementaryTypeName","src":"5607:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2039,"mutability":"mutable","name":"amountsOut","nameLocation":"5645:10:11","nodeType":"VariableDeclaration","scope":2043,"src":"5628:27:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2037,"name":"uint256","nodeType":"ElementaryTypeName","src":"5628:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2038,"nodeType":"ArrayTypeName","src":"5628:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2041,"mutability":"mutable","name":"returnData","nameLocation":"5670:10:11","nodeType":"VariableDeclaration","scope":2043,"src":"5657:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2040,"name":"bytes","nodeType":"ElementaryTypeName","src":"5657:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5606:75:11"},"scope":2102,"src":"5513:169:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2044,"nodeType":"StructuredDocumentation","src":"5912:385:11","text":" @notice Gets the index of a token in a given pool.\n @dev Reverts if the pool is not registered, or if the token does not belong to the pool.\n @param pool Address of the pool\n @param token Address of the token\n @return tokenCount Number of tokens in the pool\n @return index Index corresponding to the given token in the pool's token list"},"functionSelector":"c9c1661b","id":2056,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenCountAndIndexOfToken","nameLocation":"6311:32:11","nodeType":"FunctionDefinition","parameters":{"id":2050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2046,"mutability":"mutable","name":"pool","nameLocation":"6361:4:11","nodeType":"VariableDeclaration","scope":2056,"src":"6353:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2045,"name":"address","nodeType":"ElementaryTypeName","src":"6353:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2049,"mutability":"mutable","name":"token","nameLocation":"6382:5:11","nodeType":"VariableDeclaration","scope":2056,"src":"6375:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":2048,"nodeType":"UserDefinedTypeName","pathNode":{"id":2047,"name":"IERC20","nameLocations":["6375:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"6375:6:11"},"referencedDeclaration":6654,"src":"6375:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"6343:50:11"},"returnParameters":{"id":2055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2052,"mutability":"mutable","name":"tokenCount","nameLocation":"6425:10:11","nodeType":"VariableDeclaration","scope":2056,"src":"6417:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2051,"name":"uint256","nodeType":"ElementaryTypeName","src":"6417:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2054,"mutability":"mutable","name":"index","nameLocation":"6445:5:11","nodeType":"VariableDeclaration","scope":2056,"src":"6437:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2053,"name":"uint256","nodeType":"ElementaryTypeName","src":"6437:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6416:35:11"},"scope":2102,"src":"6302:150:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2057,"nodeType":"StructuredDocumentation","src":"6683:460:11","text":" @notice Transfers pool token from owner to a recipient.\n @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n the pool contract, so msg.sender is used as the token address.\n @param owner Address of the owner\n @param to Address of the recipient\n @param amount Amount of tokens to transfer\n @return success True if successful, false otherwise"},"functionSelector":"beabacc8","id":2068,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"7157:8:11","nodeType":"FunctionDefinition","parameters":{"id":2064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2059,"mutability":"mutable","name":"owner","nameLocation":"7174:5:11","nodeType":"VariableDeclaration","scope":2068,"src":"7166:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2058,"name":"address","nodeType":"ElementaryTypeName","src":"7166:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2061,"mutability":"mutable","name":"to","nameLocation":"7189:2:11","nodeType":"VariableDeclaration","scope":2068,"src":"7181:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2060,"name":"address","nodeType":"ElementaryTypeName","src":"7181:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2063,"mutability":"mutable","name":"amount","nameLocation":"7201:6:11","nodeType":"VariableDeclaration","scope":2068,"src":"7193:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2062,"name":"uint256","nodeType":"ElementaryTypeName","src":"7193:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7165:43:11"},"returnParameters":{"id":2067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2066,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2068,"src":"7227:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2065,"name":"bool","nodeType":"ElementaryTypeName","src":"7227:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7226:6:11"},"scope":2102,"src":"7148:85:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2069,"nodeType":"StructuredDocumentation","src":"7239:544:11","text":" @notice Transfers pool token from a sender to a recipient using an allowance.\n @dev Notice that the pool token address is not included in the params. This function is exclusively called by\n the pool contract, so msg.sender is used as the token address.\n @param spender Address allowed to perform the transfer\n @param from Address of the sender\n @param to Address of the recipient\n @param amount Amount of tokens to transfer\n @return success True if successful, false otherwise"},"functionSelector":"15dacbea","id":2082,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"7797:12:11","nodeType":"FunctionDefinition","parameters":{"id":2078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2071,"mutability":"mutable","name":"spender","nameLocation":"7818:7:11","nodeType":"VariableDeclaration","scope":2082,"src":"7810:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2070,"name":"address","nodeType":"ElementaryTypeName","src":"7810:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2073,"mutability":"mutable","name":"from","nameLocation":"7835:4:11","nodeType":"VariableDeclaration","scope":2082,"src":"7827:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2072,"name":"address","nodeType":"ElementaryTypeName","src":"7827:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2075,"mutability":"mutable","name":"to","nameLocation":"7849:2:11","nodeType":"VariableDeclaration","scope":2082,"src":"7841:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2074,"name":"address","nodeType":"ElementaryTypeName","src":"7841:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2077,"mutability":"mutable","name":"amount","nameLocation":"7861:6:11","nodeType":"VariableDeclaration","scope":2082,"src":"7853:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2076,"name":"uint256","nodeType":"ElementaryTypeName","src":"7853:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7809:59:11"},"returnParameters":{"id":2081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2080,"mutability":"mutable","name":"success","nameLocation":"7892:7:11","nodeType":"VariableDeclaration","scope":2082,"src":"7887:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2079,"name":"bool","nodeType":"ElementaryTypeName","src":"7887:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7886:14:11"},"scope":2102,"src":"7788:113:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2083,"nodeType":"StructuredDocumentation","src":"8128:575:11","text":" @notice Wraps/unwraps tokens based on the parameters provided.\n @dev All parameters are given in raw token decimal encoding. It requires the buffer to be initialized,\n and uses the internal wrapped token buffer when it has enough liquidity to avoid external calls.\n @param params Parameters for the wrap/unwrap operation (see struct definition)\n @return amountCalculatedRaw Calculated swap amount\n @return amountInRaw Amount of input tokens for the swap\n @return amountOutRaw Amount of output tokens from the swap"},"functionSelector":"43583be5","id":2095,"implemented":false,"kind":"function","modifiers":[],"name":"erc4626BufferWrapOrUnwrap","nameLocation":"8717:25:11","nodeType":"FunctionDefinition","parameters":{"id":2087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2086,"mutability":"mutable","name":"params","nameLocation":"8784:6:11","nodeType":"VariableDeclaration","scope":2095,"src":"8752:38:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_BufferWrapOrUnwrapParams_$2402_memory_ptr","typeString":"struct BufferWrapOrUnwrapParams"},"typeName":{"id":2085,"nodeType":"UserDefinedTypeName","pathNode":{"id":2084,"name":"BufferWrapOrUnwrapParams","nameLocations":["8752:24:11"],"nodeType":"IdentifierPath","referencedDeclaration":2402,"src":"8752:24:11"},"referencedDeclaration":2402,"src":"8752:24:11","typeDescriptions":{"typeIdentifier":"t_struct$_BufferWrapOrUnwrapParams_$2402_storage_ptr","typeString":"struct BufferWrapOrUnwrapParams"}},"visibility":"internal"}],"src":"8742:54:11"},"returnParameters":{"id":2094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2089,"mutability":"mutable","name":"amountCalculatedRaw","nameLocation":"8823:19:11","nodeType":"VariableDeclaration","scope":2095,"src":"8815:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2088,"name":"uint256","nodeType":"ElementaryTypeName","src":"8815:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2091,"mutability":"mutable","name":"amountInRaw","nameLocation":"8852:11:11","nodeType":"VariableDeclaration","scope":2095,"src":"8844:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2090,"name":"uint256","nodeType":"ElementaryTypeName","src":"8844:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2093,"mutability":"mutable","name":"amountOutRaw","nameLocation":"8873:12:11","nodeType":"VariableDeclaration","scope":2095,"src":"8865:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2092,"name":"uint256","nodeType":"ElementaryTypeName","src":"8865:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8814:72:11"},"scope":2102,"src":"8708:179:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2096,"nodeType":"StructuredDocumentation","src":"9115:345:11","text":" @notice Returns the VaultExtension contract address.\n @dev Function is in the main Vault contract. The VaultExtension handles less critical or frequently used\n functions, since delegate calls through the Vault are more expensive than direct calls.\n @return vaultExtension Address of the VaultExtension"},"functionSelector":"b9a8effa","id":2101,"implemented":false,"kind":"function","modifiers":[],"name":"getVaultExtension","nameLocation":"9474:17:11","nodeType":"FunctionDefinition","parameters":{"id":2097,"nodeType":"ParameterList","parameters":[],"src":"9491:2:11"},"returnParameters":{"id":2100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2099,"mutability":"mutable","name":"vaultExtension","nameLocation":"9525:14:11","nodeType":"VariableDeclaration","scope":2101,"src":"9517:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2098,"name":"address","nodeType":"ElementaryTypeName","src":"9517:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9516:24:11"},"scope":2102,"src":"9465:76:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2103,"src":"407:9136:11","usedErrors":[],"usedEvents":[]}],"src":"46:9498:11"},"id":11},"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol":{"ast":{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","exportedSymbols":{"AddLiquidityKind":[2347],"AddLiquidityParams":[2363],"AfterSwapParams":[2341],"BufferWrapOrUnwrapParams":[2402],"FEE_BITLENGTH":[2405],"FEE_SCALING_FACTOR":[2408],"HookFlags":[2167],"HooksConfig":[2191],"IERC20":[6654],"IERC4626":[6576],"IRateProvider":[57],"LiquidityManagement":[2120],"MAX_FEE_PERCENTAGE":[2411],"PoolConfig":[2145],"PoolConfigBits":[2122],"PoolData":[2269],"PoolRoleAccounts":[2217],"PoolSwapParams":[2312],"RemoveLiquidityKind":[2368],"RemoveLiquidityParams":[2384],"Rounding":[2272],"SwapKind":[2275],"SwapState":[2201],"TokenConfig":[2234],"TokenInfo":[2244],"TokenType":[2221],"VaultState":[2209],"VaultSwapParams":[2294],"WrappingDirection":[2387]},"id":2412,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2104,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2106,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2412,"sourceUnit":6655,"src":"72:72:12","symbolAliases":[{"foreign":{"id":2105,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6654,"src":"81:6:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","id":2108,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2412,"sourceUnit":6577,"src":"145:75:12","symbolAliases":[{"foreign":{"id":2107,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6576,"src":"154:8:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol","file":"../solidity-utils/helpers/IRateProvider.sol","id":2110,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2412,"sourceUnit":58,"src":"222:76:12","symbolAliases":[{"foreign":{"id":2109,"name":"IRateProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"231:13:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"LiquidityManagement","documentation":{"id":2111,"nodeType":"StructuredDocumentation","src":"300:472:12","text":" @notice Represents a pool's liquidity management configuration.\n @param disableUnbalancedLiquidity If set, liquidity can only be added or removed proportionally\n @param enableAddLiquidityCustom If set, the pool has implemented `onAddLiquidityCustom`\n @param enableRemoveLiquidityCustom If set, the pool has implemented `onRemoveLiquidityCustom`\n @param enableDonation If set, the pool will not revert if liquidity is added with AddLiquidityKind.DONATION"},"id":2120,"members":[{"constant":false,"id":2113,"mutability":"mutable","name":"disableUnbalancedLiquidity","nameLocation":"811:26:12","nodeType":"VariableDeclaration","scope":2120,"src":"806:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2112,"name":"bool","nodeType":"ElementaryTypeName","src":"806:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2115,"mutability":"mutable","name":"enableAddLiquidityCustom","nameLocation":"848:24:12","nodeType":"VariableDeclaration","scope":2120,"src":"843:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2114,"name":"bool","nodeType":"ElementaryTypeName","src":"843:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2117,"mutability":"mutable","name":"enableRemoveLiquidityCustom","nameLocation":"883:27:12","nodeType":"VariableDeclaration","scope":2120,"src":"878:32:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2116,"name":"bool","nodeType":"ElementaryTypeName","src":"878:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2119,"mutability":"mutable","name":"enableDonation","nameLocation":"921:14:12","nodeType":"VariableDeclaration","scope":2120,"src":"916:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2118,"name":"bool","nodeType":"ElementaryTypeName","src":"916:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"LiquidityManagement","nameLocation":"780:19:12","nodeType":"StructDefinition","scope":2412,"src":"773:165:12","visibility":"public"},{"canonicalName":"PoolConfigBits","id":2122,"name":"PoolConfigBits","nameLocation":"1015:14:12","nodeType":"UserDefinedValueTypeDefinition","src":"1010:31:12","underlyingType":{"id":2121,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1033:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"canonicalName":"PoolConfig","documentation":{"id":2123,"nodeType":"StructuredDocumentation","src":"1043:1034:12","text":" @notice Represents a pool's configuration (hooks configuration are separated in another struct).\n @param liquidityManagement Flags related to adding/removing liquidity\n @param staticSwapFeePercentage The pool's native swap fee\n @param aggregateSwapFeePercentage The total swap fee charged, including protocol and pool creator components\n @param aggregateYieldFeePercentage The total swap fee charged, including protocol and pool creator components\n @param tokenDecimalDiffs Compressed storage of the token decimals of each pool token\n @param pauseWindowEndTime Timestamp after which the pool cannot be paused\n @param isPoolRegistered If true, the pool has been registered with the Vault\n @param isPoolInitialized If true, the pool has been initialized with liquidity, and is available for trading\n @param isPoolPaused If true, the pool has been paused (by governance or the pauseManager)\n @param isPoolInRecoveryMode If true, the pool has been placed in recovery mode, enabling recovery mode withdrawals"},"id":2145,"members":[{"constant":false,"id":2126,"mutability":"mutable","name":"liquidityManagement","nameLocation":"2122:19:12","nodeType":"VariableDeclaration","scope":2145,"src":"2102:39:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2120_storage_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":2125,"nodeType":"UserDefinedTypeName","pathNode":{"id":2124,"name":"LiquidityManagement","nameLocations":["2102:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":2120,"src":"2102:19:12"},"referencedDeclaration":2120,"src":"2102:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$2120_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"},{"constant":false,"id":2128,"mutability":"mutable","name":"staticSwapFeePercentage","nameLocation":"2155:23:12","nodeType":"VariableDeclaration","scope":2145,"src":"2147:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2127,"name":"uint256","nodeType":"ElementaryTypeName","src":"2147:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2130,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"2192:26:12","nodeType":"VariableDeclaration","scope":2145,"src":"2184:34:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2129,"name":"uint256","nodeType":"ElementaryTypeName","src":"2184:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2132,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"2232:27:12","nodeType":"VariableDeclaration","scope":2145,"src":"2224:35:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2131,"name":"uint256","nodeType":"ElementaryTypeName","src":"2224:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2134,"mutability":"mutable","name":"tokenDecimalDiffs","nameLocation":"2272:17:12","nodeType":"VariableDeclaration","scope":2145,"src":"2265:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":2133,"name":"uint40","nodeType":"ElementaryTypeName","src":"2265:6:12","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"},{"constant":false,"id":2136,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"2302:18:12","nodeType":"VariableDeclaration","scope":2145,"src":"2295:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2135,"name":"uint32","nodeType":"ElementaryTypeName","src":"2295:6:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2138,"mutability":"mutable","name":"isPoolRegistered","nameLocation":"2331:16:12","nodeType":"VariableDeclaration","scope":2145,"src":"2326:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2137,"name":"bool","nodeType":"ElementaryTypeName","src":"2326:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2140,"mutability":"mutable","name":"isPoolInitialized","nameLocation":"2358:17:12","nodeType":"VariableDeclaration","scope":2145,"src":"2353:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2139,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2142,"mutability":"mutable","name":"isPoolPaused","nameLocation":"2386:12:12","nodeType":"VariableDeclaration","scope":2145,"src":"2381:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2141,"name":"bool","nodeType":"ElementaryTypeName","src":"2381:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2144,"mutability":"mutable","name":"isPoolInRecoveryMode","nameLocation":"2409:20:12","nodeType":"VariableDeclaration","scope":2145,"src":"2404:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2143,"name":"bool","nodeType":"ElementaryTypeName","src":"2404:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"PoolConfig","nameLocation":"2085:10:12","nodeType":"StructDefinition","scope":2412,"src":"2078:354:12","visibility":"public"},{"canonicalName":"HookFlags","documentation":{"id":2146,"nodeType":"StructuredDocumentation","src":"2434:352:12","text":" @notice The flag portion of the `HooksConfig`.\n @dev `enableHookAdjustedAmounts` must be true for all contracts that modify the `amountCalculated`\n in after hooks. Otherwise, the Vault will ignore any \"hookAdjusted\" amounts. Setting any \"shouldCall\"\n flags to true will cause the Vault to call the corresponding hook during operations."},"id":2167,"members":[{"constant":false,"id":2148,"mutability":"mutable","name":"enableHookAdjustedAmounts","nameLocation":"2815:25:12","nodeType":"VariableDeclaration","scope":2167,"src":"2810:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2147,"name":"bool","nodeType":"ElementaryTypeName","src":"2810:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2150,"mutability":"mutable","name":"shouldCallBeforeInitialize","nameLocation":"2851:26:12","nodeType":"VariableDeclaration","scope":2167,"src":"2846:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2149,"name":"bool","nodeType":"ElementaryTypeName","src":"2846:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2152,"mutability":"mutable","name":"shouldCallAfterInitialize","nameLocation":"2888:25:12","nodeType":"VariableDeclaration","scope":2167,"src":"2883:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2151,"name":"bool","nodeType":"ElementaryTypeName","src":"2883:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2154,"mutability":"mutable","name":"shouldCallComputeDynamicSwapFee","nameLocation":"2924:31:12","nodeType":"VariableDeclaration","scope":2167,"src":"2919:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2153,"name":"bool","nodeType":"ElementaryTypeName","src":"2919:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2156,"mutability":"mutable","name":"shouldCallBeforeSwap","nameLocation":"2966:20:12","nodeType":"VariableDeclaration","scope":2167,"src":"2961:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2155,"name":"bool","nodeType":"ElementaryTypeName","src":"2961:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2158,"mutability":"mutable","name":"shouldCallAfterSwap","nameLocation":"2997:19:12","nodeType":"VariableDeclaration","scope":2167,"src":"2992:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2157,"name":"bool","nodeType":"ElementaryTypeName","src":"2992:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2160,"mutability":"mutable","name":"shouldCallBeforeAddLiquidity","nameLocation":"3027:28:12","nodeType":"VariableDeclaration","scope":2167,"src":"3022:33:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2159,"name":"bool","nodeType":"ElementaryTypeName","src":"3022:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2162,"mutability":"mutable","name":"shouldCallAfterAddLiquidity","nameLocation":"3066:27:12","nodeType":"VariableDeclaration","scope":2167,"src":"3061:32:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2161,"name":"bool","nodeType":"ElementaryTypeName","src":"3061:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2164,"mutability":"mutable","name":"shouldCallBeforeRemoveLiquidity","nameLocation":"3104:31:12","nodeType":"VariableDeclaration","scope":2167,"src":"3099:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2163,"name":"bool","nodeType":"ElementaryTypeName","src":"3099:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2166,"mutability":"mutable","name":"shouldCallAfterRemoveLiquidity","nameLocation":"3146:30:12","nodeType":"VariableDeclaration","scope":2167,"src":"3141:35:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2165,"name":"bool","nodeType":"ElementaryTypeName","src":"3141:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"HookFlags","nameLocation":"2794:9:12","nodeType":"StructDefinition","scope":2412,"src":"2787:392:12","visibility":"public"},{"canonicalName":"HooksConfig","documentation":{"id":2168,"nodeType":"StructuredDocumentation","src":"3181:101:12","text":"@notice Represents a hook contract configuration for a pool (HookFlags + hooksContract address)."},"id":2191,"members":[{"constant":false,"id":2170,"mutability":"mutable","name":"enableHookAdjustedAmounts","nameLocation":"3312:25:12","nodeType":"VariableDeclaration","scope":2191,"src":"3307:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2169,"name":"bool","nodeType":"ElementaryTypeName","src":"3307:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2172,"mutability":"mutable","name":"shouldCallBeforeInitialize","nameLocation":"3348:26:12","nodeType":"VariableDeclaration","scope":2191,"src":"3343:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2171,"name":"bool","nodeType":"ElementaryTypeName","src":"3343:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2174,"mutability":"mutable","name":"shouldCallAfterInitialize","nameLocation":"3385:25:12","nodeType":"VariableDeclaration","scope":2191,"src":"3380:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2173,"name":"bool","nodeType":"ElementaryTypeName","src":"3380:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2176,"mutability":"mutable","name":"shouldCallComputeDynamicSwapFee","nameLocation":"3421:31:12","nodeType":"VariableDeclaration","scope":2191,"src":"3416:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2175,"name":"bool","nodeType":"ElementaryTypeName","src":"3416:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2178,"mutability":"mutable","name":"shouldCallBeforeSwap","nameLocation":"3463:20:12","nodeType":"VariableDeclaration","scope":2191,"src":"3458:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2177,"name":"bool","nodeType":"ElementaryTypeName","src":"3458:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2180,"mutability":"mutable","name":"shouldCallAfterSwap","nameLocation":"3494:19:12","nodeType":"VariableDeclaration","scope":2191,"src":"3489:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2179,"name":"bool","nodeType":"ElementaryTypeName","src":"3489:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2182,"mutability":"mutable","name":"shouldCallBeforeAddLiquidity","nameLocation":"3524:28:12","nodeType":"VariableDeclaration","scope":2191,"src":"3519:33:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2181,"name":"bool","nodeType":"ElementaryTypeName","src":"3519:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2184,"mutability":"mutable","name":"shouldCallAfterAddLiquidity","nameLocation":"3563:27:12","nodeType":"VariableDeclaration","scope":2191,"src":"3558:32:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2183,"name":"bool","nodeType":"ElementaryTypeName","src":"3558:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2186,"mutability":"mutable","name":"shouldCallBeforeRemoveLiquidity","nameLocation":"3601:31:12","nodeType":"VariableDeclaration","scope":2191,"src":"3596:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2185,"name":"bool","nodeType":"ElementaryTypeName","src":"3596:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2188,"mutability":"mutable","name":"shouldCallAfterRemoveLiquidity","nameLocation":"3643:30:12","nodeType":"VariableDeclaration","scope":2191,"src":"3638:35:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2187,"name":"bool","nodeType":"ElementaryTypeName","src":"3638:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2190,"mutability":"mutable","name":"hooksContract","nameLocation":"3687:13:12","nodeType":"VariableDeclaration","scope":2191,"src":"3679:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2189,"name":"address","nodeType":"ElementaryTypeName","src":"3679:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"HooksConfig","nameLocation":"3289:11:12","nodeType":"StructDefinition","scope":2412,"src":"3282:421:12","visibility":"public"},{"canonicalName":"SwapState","documentation":{"id":2192,"nodeType":"StructuredDocumentation","src":"3705:364:12","text":" @notice Represents temporary state used during a swap operation.\n @param indexIn The zero-based index of tokenIn\n @param indexOut The zero-based index of tokenOut\n @param amountGivenScaled18 The amountGiven (i.e., tokenIn for ExactIn), adjusted for token decimals\n @param swapFeePercentage The swap fee to be applied (might be static or dynamic)"},"id":2201,"members":[{"constant":false,"id":2194,"mutability":"mutable","name":"indexIn","nameLocation":"4101:7:12","nodeType":"VariableDeclaration","scope":2201,"src":"4093:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2193,"name":"uint256","nodeType":"ElementaryTypeName","src":"4093:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2196,"mutability":"mutable","name":"indexOut","nameLocation":"4122:8:12","nodeType":"VariableDeclaration","scope":2201,"src":"4114:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2195,"name":"uint256","nodeType":"ElementaryTypeName","src":"4114:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2198,"mutability":"mutable","name":"amountGivenScaled18","nameLocation":"4144:19:12","nodeType":"VariableDeclaration","scope":2201,"src":"4136:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2197,"name":"uint256","nodeType":"ElementaryTypeName","src":"4136:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2200,"mutability":"mutable","name":"swapFeePercentage","nameLocation":"4177:17:12","nodeType":"VariableDeclaration","scope":2201,"src":"4169:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2199,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"SwapState","nameLocation":"4077:9:12","nodeType":"StructDefinition","scope":2412,"src":"4070:127:12","visibility":"public"},{"canonicalName":"VaultState","documentation":{"id":2202,"nodeType":"StructuredDocumentation","src":"4199:381:12","text":" @notice Represents the Vault's configuration.\n @param isQueryDisabled If set to true, disables query functionality of the Vault. Can be modified by governance\n @param isVaultPaused If set to true, swaps and add/remove liquidity operations are halted\n @param areBuffersPaused If set to true, the Vault wrap/unwrap primitives associated with buffers will be disabled"},"id":2209,"members":[{"constant":false,"id":2204,"mutability":"mutable","name":"isQueryDisabled","nameLocation":"4610:15:12","nodeType":"VariableDeclaration","scope":2209,"src":"4605:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2203,"name":"bool","nodeType":"ElementaryTypeName","src":"4605:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2206,"mutability":"mutable","name":"isVaultPaused","nameLocation":"4636:13:12","nodeType":"VariableDeclaration","scope":2209,"src":"4631:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2205,"name":"bool","nodeType":"ElementaryTypeName","src":"4631:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2208,"mutability":"mutable","name":"areBuffersPaused","nameLocation":"4660:16:12","nodeType":"VariableDeclaration","scope":2209,"src":"4655:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2207,"name":"bool","nodeType":"ElementaryTypeName","src":"4655:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"VaultState","nameLocation":"4588:10:12","nodeType":"StructDefinition","scope":2412,"src":"4581:98:12","visibility":"public"},{"canonicalName":"PoolRoleAccounts","documentation":{"id":2210,"nodeType":"StructuredDocumentation","src":"4681:461:12","text":" @notice Represents the accounts holding certain roles for a given pool. This is passed in on pool registration.\n @param pauseManager Account empowered to pause/unpause the pool (note that governance can always pause a pool)\n @param swapFeeManager Account empowered to set static swap fees for a pool (or 0 to delegate to governance)\n @param poolCreator Account empowered to set the pool creator fee (or 0 if all fees go to the protocol and LPs)"},"id":2217,"members":[{"constant":false,"id":2212,"mutability":"mutable","name":"pauseManager","nameLocation":"5181:12:12","nodeType":"VariableDeclaration","scope":2217,"src":"5173:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2211,"name":"address","nodeType":"ElementaryTypeName","src":"5173:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2214,"mutability":"mutable","name":"swapFeeManager","nameLocation":"5207:14:12","nodeType":"VariableDeclaration","scope":2217,"src":"5199:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2213,"name":"address","nodeType":"ElementaryTypeName","src":"5199:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2216,"mutability":"mutable","name":"poolCreator","nameLocation":"5235:11:12","nodeType":"VariableDeclaration","scope":2217,"src":"5227:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2215,"name":"address","nodeType":"ElementaryTypeName","src":"5227:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"PoolRoleAccounts","nameLocation":"5150:16:12","nodeType":"StructDefinition","scope":2412,"src":"5143:106:12","visibility":"public"},{"canonicalName":"TokenType","documentation":{"id":2218,"nodeType":"StructuredDocumentation","src":"9245:1024:12","text":" @notice Token types supported by the Vault.\n @dev In general, pools may contain any combination of these tokens.\n STANDARD tokens (e.g., BAL, WETH) have no rate provider.\n WITH_RATE tokens (e.g., wstETH) require a rate provider. These may be tokens like wstETH, which need to be wrapped\n because the underlying stETH token is rebasing, and such tokens are unsupported by the Vault. They may also be\n tokens like sEUR, which track an underlying asset, but are not yield-bearing. Finally, this encompasses\n yield-bearing ERC4626 tokens, which can be used to facilitate swaps without requiring wrapping or unwrapping\n in most cases. The `paysYieldFees` flag can be used to indicate whether a token is yield-bearing (e.g., waDAI),\n not yield-bearing (e.g., sEUR), or yield-bearing but exempt from fees (e.g., in certain nested pools, where\n yield fees are charged elsewhere).\n NB: STANDARD must always be the first enum element, so that newly initialized data structures default to Standard."},"id":2221,"members":[{"id":2219,"name":"STANDARD","nameLocation":"10291:8:12","nodeType":"EnumValue","src":"10291:8:12"},{"id":2220,"name":"WITH_RATE","nameLocation":"10305:9:12","nodeType":"EnumValue","src":"10305:9:12"}],"name":"TokenType","nameLocation":"10275:9:12","nodeType":"EnumDefinition","src":"10270:46:12"},{"canonicalName":"TokenConfig","documentation":{"id":2222,"nodeType":"StructuredDocumentation","src":"10318:915:12","text":" @notice Encapsulate the data required for the Vault to support a token of the given type.\n @dev For STANDARD tokens, the rate provider address must be 0, and paysYieldFees must be false. All WITH_RATE tokens\n need a rate provider, and may or may not be yield-bearing.\n At registration time, it is useful to include the token address along with the token parameters in the structure\n passed to `registerPool`, as the alternative would be parallel arrays, which would be error prone and require\n validation checks. `TokenConfig` is only used for registration, and is never put into storage (see `TokenInfo`).\n @param token The token address\n @param tokenType The token type (see the enum for supported types)\n @param rateProvider The rate provider for a token (see further documentation above)\n @param paysYieldFees Flag indicating whether yield fees should be charged on this token"},"id":2234,"members":[{"constant":false,"id":2225,"mutability":"mutable","name":"token","nameLocation":"11266:5:12","nodeType":"VariableDeclaration","scope":2234,"src":"11259:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":2224,"nodeType":"UserDefinedTypeName","pathNode":{"id":2223,"name":"IERC20","nameLocations":["11259:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"11259:6:12"},"referencedDeclaration":6654,"src":"11259:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2228,"mutability":"mutable","name":"tokenType","nameLocation":"11287:9:12","nodeType":"VariableDeclaration","scope":2234,"src":"11277:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2221","typeString":"enum TokenType"},"typeName":{"id":2227,"nodeType":"UserDefinedTypeName","pathNode":{"id":2226,"name":"TokenType","nameLocations":["11277:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":2221,"src":"11277:9:12"},"referencedDeclaration":2221,"src":"11277:9:12","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2221","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":2231,"mutability":"mutable","name":"rateProvider","nameLocation":"11316:12:12","nodeType":"VariableDeclaration","scope":2234,"src":"11302:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRateProvider_$57","typeString":"contract IRateProvider"},"typeName":{"id":2230,"nodeType":"UserDefinedTypeName","pathNode":{"id":2229,"name":"IRateProvider","nameLocations":["11302:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"11302:13:12"},"referencedDeclaration":57,"src":"11302:13:12","typeDescriptions":{"typeIdentifier":"t_contract$_IRateProvider_$57","typeString":"contract IRateProvider"}},"visibility":"internal"},{"constant":false,"id":2233,"mutability":"mutable","name":"paysYieldFees","nameLocation":"11339:13:12","nodeType":"VariableDeclaration","scope":2234,"src":"11334:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2232,"name":"bool","nodeType":"ElementaryTypeName","src":"11334:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"TokenConfig","nameLocation":"11241:11:12","nodeType":"StructDefinition","scope":2412,"src":"11234:121:12","visibility":"public"},{"canonicalName":"TokenInfo","documentation":{"id":2235,"nodeType":"StructuredDocumentation","src":"11357:592:12","text":" @notice This data structure is stored in `_poolTokenInfo`, a nested mapping from pool -> (token -> TokenInfo).\n @dev Since the token is already the key of the nested mapping, it would be redundant (and an extra SLOAD) to store\n it again in the struct. When we construct PoolData, the tokens are separated into their own array.\n @param tokenType The token type (see the enum for supported types)\n @param rateProvider The rate provider for a token (see further documentation above)\n @param paysYieldFees Flag indicating whether yield fees should be charged on this token"},"id":2244,"members":[{"constant":false,"id":2238,"mutability":"mutable","name":"tokenType","nameLocation":"11983:9:12","nodeType":"VariableDeclaration","scope":2244,"src":"11973:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2221","typeString":"enum TokenType"},"typeName":{"id":2237,"nodeType":"UserDefinedTypeName","pathNode":{"id":2236,"name":"TokenType","nameLocations":["11973:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":2221,"src":"11973:9:12"},"referencedDeclaration":2221,"src":"11973:9:12","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2221","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":2241,"mutability":"mutable","name":"rateProvider","nameLocation":"12012:12:12","nodeType":"VariableDeclaration","scope":2244,"src":"11998:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRateProvider_$57","typeString":"contract IRateProvider"},"typeName":{"id":2240,"nodeType":"UserDefinedTypeName","pathNode":{"id":2239,"name":"IRateProvider","nameLocations":["11998:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"11998:13:12"},"referencedDeclaration":57,"src":"11998:13:12","typeDescriptions":{"typeIdentifier":"t_contract$_IRateProvider_$57","typeString":"contract IRateProvider"}},"visibility":"internal"},{"constant":false,"id":2243,"mutability":"mutable","name":"paysYieldFees","nameLocation":"12035:13:12","nodeType":"VariableDeclaration","scope":2244,"src":"12030:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2242,"name":"bool","nodeType":"ElementaryTypeName","src":"12030:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"TokenInfo","nameLocation":"11957:9:12","nodeType":"StructDefinition","scope":2412,"src":"11950:101:12","visibility":"public"},{"canonicalName":"PoolData","documentation":{"id":2245,"nodeType":"StructuredDocumentation","src":"12053:761:12","text":" @notice Data structure used to represent the current pool state in memory\n @param poolConfigBits Custom type to store the entire configuration of the pool.\n @param tokens Pool tokens, sorted in token registration order\n @param tokenInfo Configuration data for each token, sorted in token registration order\n @param balancesRaw Token balances in native decimals\n @param balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates\n @param tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\n @param decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n calculations. It is 1e18 (FP 1) for 18-decimal tokens"},"id":2269,"members":[{"constant":false,"id":2248,"mutability":"mutable","name":"poolConfigBits","nameLocation":"12852:14:12","nodeType":"VariableDeclaration","scope":2269,"src":"12837:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_PoolConfigBits_$2122","typeString":"PoolConfigBits"},"typeName":{"id":2247,"nodeType":"UserDefinedTypeName","pathNode":{"id":2246,"name":"PoolConfigBits","nameLocations":["12837:14:12"],"nodeType":"IdentifierPath","referencedDeclaration":2122,"src":"12837:14:12"},"referencedDeclaration":2122,"src":"12837:14:12","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_PoolConfigBits_$2122","typeString":"PoolConfigBits"}},"visibility":"internal"},{"constant":false,"id":2252,"mutability":"mutable","name":"tokens","nameLocation":"12881:6:12","nodeType":"VariableDeclaration","scope":2269,"src":"12872:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_storage_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":2250,"nodeType":"UserDefinedTypeName","pathNode":{"id":2249,"name":"IERC20","nameLocations":["12872:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"12872:6:12"},"referencedDeclaration":6654,"src":"12872:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":2251,"nodeType":"ArrayTypeName","src":"12872:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":2256,"mutability":"mutable","name":"tokenInfo","nameLocation":"12905:9:12","nodeType":"VariableDeclaration","scope":2269,"src":"12893:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2244_storage_$dyn_storage_ptr","typeString":"struct TokenInfo[]"},"typeName":{"baseType":{"id":2254,"nodeType":"UserDefinedTypeName","pathNode":{"id":2253,"name":"TokenInfo","nameLocations":["12893:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":2244,"src":"12893:9:12"},"referencedDeclaration":2244,"src":"12893:9:12","typeDescriptions":{"typeIdentifier":"t_struct$_TokenInfo_$2244_storage_ptr","typeString":"struct TokenInfo"}},"id":2255,"nodeType":"ArrayTypeName","src":"12893:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$2244_storage_$dyn_storage_ptr","typeString":"struct TokenInfo[]"}},"visibility":"internal"},{"constant":false,"id":2259,"mutability":"mutable","name":"balancesRaw","nameLocation":"12930:11:12","nodeType":"VariableDeclaration","scope":2269,"src":"12920:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2257,"name":"uint256","nodeType":"ElementaryTypeName","src":"12920:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2258,"nodeType":"ArrayTypeName","src":"12920:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2262,"mutability":"mutable","name":"balancesLiveScaled18","nameLocation":"12957:20:12","nodeType":"VariableDeclaration","scope":2269,"src":"12947:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2260,"name":"uint256","nodeType":"ElementaryTypeName","src":"12947:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2261,"nodeType":"ArrayTypeName","src":"12947:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2265,"mutability":"mutable","name":"tokenRates","nameLocation":"12993:10:12","nodeType":"VariableDeclaration","scope":2269,"src":"12983:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2263,"name":"uint256","nodeType":"ElementaryTypeName","src":"12983:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2264,"nodeType":"ArrayTypeName","src":"12983:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2268,"mutability":"mutable","name":"decimalScalingFactors","nameLocation":"13019:21:12","nodeType":"VariableDeclaration","scope":2269,"src":"13009:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2266,"name":"uint256","nodeType":"ElementaryTypeName","src":"13009:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2267,"nodeType":"ArrayTypeName","src":"13009:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"name":"PoolData","nameLocation":"12822:8:12","nodeType":"StructDefinition","scope":2412,"src":"12815:228:12","visibility":"public"},{"canonicalName":"Rounding","id":2272,"members":[{"id":2270,"name":"ROUND_UP","nameLocation":"13065:8:12","nodeType":"EnumValue","src":"13065:8:12"},{"id":2271,"name":"ROUND_DOWN","nameLocation":"13079:10:12","nodeType":"EnumValue","src":"13079:10:12"}],"name":"Rounding","nameLocation":"13050:8:12","nodeType":"EnumDefinition","src":"13045:46:12"},{"canonicalName":"SwapKind","id":2275,"members":[{"id":2273,"name":"EXACT_IN","nameLocation":"13318:8:12","nodeType":"EnumValue","src":"13318:8:12"},{"id":2274,"name":"EXACT_OUT","nameLocation":"13332:9:12","nodeType":"EnumValue","src":"13332:9:12"}],"name":"SwapKind","nameLocation":"13303:8:12","nodeType":"EnumDefinition","src":"13298:45:12"},{"canonicalName":"VaultSwapParams","documentation":{"id":2276,"nodeType":"StructuredDocumentation","src":"14089:558:12","text":" @notice Data passed into primary Vault `swap` operations.\n @param kind Type of swap (Exact In or Exact Out)\n @param pool The pool with the tokens being swapped\n @param tokenIn The token entering the Vault (balance increases)\n @param tokenOut The token leaving the Vault (balance decreases)\n @param amountGivenRaw Amount specified for tokenIn or tokenOut (depending on the type of swap)\n @param limitRaw Minimum or maximum value of the calculated amount (depending on the type of swap)\n @param userData Additional (optional) user data"},"id":2294,"members":[{"constant":false,"id":2279,"mutability":"mutable","name":"kind","nameLocation":"14686:4:12","nodeType":"VariableDeclaration","scope":2294,"src":"14677:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2275","typeString":"enum SwapKind"},"typeName":{"id":2278,"nodeType":"UserDefinedTypeName","pathNode":{"id":2277,"name":"SwapKind","nameLocations":["14677:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2275,"src":"14677:8:12"},"referencedDeclaration":2275,"src":"14677:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2275","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":2281,"mutability":"mutable","name":"pool","nameLocation":"14704:4:12","nodeType":"VariableDeclaration","scope":2294,"src":"14696:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2280,"name":"address","nodeType":"ElementaryTypeName","src":"14696:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2284,"mutability":"mutable","name":"tokenIn","nameLocation":"14721:7:12","nodeType":"VariableDeclaration","scope":2294,"src":"14714:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":2283,"nodeType":"UserDefinedTypeName","pathNode":{"id":2282,"name":"IERC20","nameLocations":["14714:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"14714:6:12"},"referencedDeclaration":6654,"src":"14714:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2287,"mutability":"mutable","name":"tokenOut","nameLocation":"14741:8:12","nodeType":"VariableDeclaration","scope":2294,"src":"14734:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":2286,"nodeType":"UserDefinedTypeName","pathNode":{"id":2285,"name":"IERC20","nameLocations":["14734:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"14734:6:12"},"referencedDeclaration":6654,"src":"14734:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2289,"mutability":"mutable","name":"amountGivenRaw","nameLocation":"14763:14:12","nodeType":"VariableDeclaration","scope":2294,"src":"14755:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2288,"name":"uint256","nodeType":"ElementaryTypeName","src":"14755:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2291,"mutability":"mutable","name":"limitRaw","nameLocation":"14791:8:12","nodeType":"VariableDeclaration","scope":2294,"src":"14783:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2290,"name":"uint256","nodeType":"ElementaryTypeName","src":"14783:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2293,"mutability":"mutable","name":"userData","nameLocation":"14811:8:12","nodeType":"VariableDeclaration","scope":2294,"src":"14805:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2292,"name":"bytes","nodeType":"ElementaryTypeName","src":"14805:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"VaultSwapParams","nameLocation":"14655:15:12","nodeType":"StructDefinition","scope":2412,"src":"14648:174:12","visibility":"public"},{"canonicalName":"PoolSwapParams","documentation":{"id":2295,"nodeType":"StructuredDocumentation","src":"14824:530:12","text":" @notice Data for a swap operation, used by contracts implementing `IBasePool`.\n @param kind Type of swap (exact in or exact out)\n @param amountGivenScaled18 Amount given based on kind of the swap (e.g., tokenIn for EXACT_IN)\n @param balancesScaled18 Current pool balances\n @param indexIn Index of tokenIn\n @param indexOut Index of tokenOut\n @param router The address (usually a router contract) that initiated a swap operation on the Vault\n @param userData Additional (optional) data required for the swap"},"id":2312,"members":[{"constant":false,"id":2298,"mutability":"mutable","name":"kind","nameLocation":"15392:4:12","nodeType":"VariableDeclaration","scope":2312,"src":"15383:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2275","typeString":"enum SwapKind"},"typeName":{"id":2297,"nodeType":"UserDefinedTypeName","pathNode":{"id":2296,"name":"SwapKind","nameLocations":["15383:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2275,"src":"15383:8:12"},"referencedDeclaration":2275,"src":"15383:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2275","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":2300,"mutability":"mutable","name":"amountGivenScaled18","nameLocation":"15410:19:12","nodeType":"VariableDeclaration","scope":2312,"src":"15402:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2299,"name":"uint256","nodeType":"ElementaryTypeName","src":"15402:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2303,"mutability":"mutable","name":"balancesScaled18","nameLocation":"15445:16:12","nodeType":"VariableDeclaration","scope":2312,"src":"15435:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2301,"name":"uint256","nodeType":"ElementaryTypeName","src":"15435:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2302,"nodeType":"ArrayTypeName","src":"15435:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2305,"mutability":"mutable","name":"indexIn","nameLocation":"15475:7:12","nodeType":"VariableDeclaration","scope":2312,"src":"15467:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2304,"name":"uint256","nodeType":"ElementaryTypeName","src":"15467:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2307,"mutability":"mutable","name":"indexOut","nameLocation":"15496:8:12","nodeType":"VariableDeclaration","scope":2312,"src":"15488:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2306,"name":"uint256","nodeType":"ElementaryTypeName","src":"15488:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2309,"mutability":"mutable","name":"router","nameLocation":"15518:6:12","nodeType":"VariableDeclaration","scope":2312,"src":"15510:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2308,"name":"address","nodeType":"ElementaryTypeName","src":"15510:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2311,"mutability":"mutable","name":"userData","nameLocation":"15536:8:12","nodeType":"VariableDeclaration","scope":2312,"src":"15530:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2310,"name":"bytes","nodeType":"ElementaryTypeName","src":"15530:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"PoolSwapParams","nameLocation":"15362:14:12","nodeType":"StructDefinition","scope":2412,"src":"15355:192:12","visibility":"public"},{"canonicalName":"AfterSwapParams","documentation":{"id":2313,"nodeType":"StructuredDocumentation","src":"15549:813:12","text":" @notice Data for the hook after a swap operation.\n @param kind Type of swap (exact in or exact out)\n @param tokenIn Token to be swapped from\n @param tokenOut Token to be swapped to\n @param amountInScaled18 Amount of tokenIn (entering the Vault)\n @param amountOutScaled18 Amount of tokenOut (leaving the Vault)\n @param tokenInBalanceScaled18 Updated (after swap) balance of tokenIn\n @param tokenOutBalanceScaled18 Updated (after swap) balance of tokenOut\n @param amountCalculatedScaled18 Token amount calculated by the swap\n @param amountCalculatedRaw Token amount calculated by the swap\n @param router The address (usually a router contract) that initiated a swap operation on the Vault\n @param pool Pool address\n @param userData Additional (optional) data required for the swap"},"id":2341,"members":[{"constant":false,"id":2316,"mutability":"mutable","name":"kind","nameLocation":"16401:4:12","nodeType":"VariableDeclaration","scope":2341,"src":"16392:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2275","typeString":"enum SwapKind"},"typeName":{"id":2315,"nodeType":"UserDefinedTypeName","pathNode":{"id":2314,"name":"SwapKind","nameLocations":["16392:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2275,"src":"16392:8:12"},"referencedDeclaration":2275,"src":"16392:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2275","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":2319,"mutability":"mutable","name":"tokenIn","nameLocation":"16418:7:12","nodeType":"VariableDeclaration","scope":2341,"src":"16411:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":2318,"nodeType":"UserDefinedTypeName","pathNode":{"id":2317,"name":"IERC20","nameLocations":["16411:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"16411:6:12"},"referencedDeclaration":6654,"src":"16411:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2322,"mutability":"mutable","name":"tokenOut","nameLocation":"16438:8:12","nodeType":"VariableDeclaration","scope":2341,"src":"16431:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":2321,"nodeType":"UserDefinedTypeName","pathNode":{"id":2320,"name":"IERC20","nameLocations":["16431:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"16431:6:12"},"referencedDeclaration":6654,"src":"16431:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2324,"mutability":"mutable","name":"amountInScaled18","nameLocation":"16460:16:12","nodeType":"VariableDeclaration","scope":2341,"src":"16452:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2323,"name":"uint256","nodeType":"ElementaryTypeName","src":"16452:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2326,"mutability":"mutable","name":"amountOutScaled18","nameLocation":"16490:17:12","nodeType":"VariableDeclaration","scope":2341,"src":"16482:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2325,"name":"uint256","nodeType":"ElementaryTypeName","src":"16482:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2328,"mutability":"mutable","name":"tokenInBalanceScaled18","nameLocation":"16521:22:12","nodeType":"VariableDeclaration","scope":2341,"src":"16513:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2327,"name":"uint256","nodeType":"ElementaryTypeName","src":"16513:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2330,"mutability":"mutable","name":"tokenOutBalanceScaled18","nameLocation":"16557:23:12","nodeType":"VariableDeclaration","scope":2341,"src":"16549:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2329,"name":"uint256","nodeType":"ElementaryTypeName","src":"16549:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2332,"mutability":"mutable","name":"amountCalculatedScaled18","nameLocation":"16594:24:12","nodeType":"VariableDeclaration","scope":2341,"src":"16586:32:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2331,"name":"uint256","nodeType":"ElementaryTypeName","src":"16586:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2334,"mutability":"mutable","name":"amountCalculatedRaw","nameLocation":"16632:19:12","nodeType":"VariableDeclaration","scope":2341,"src":"16624:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2333,"name":"uint256","nodeType":"ElementaryTypeName","src":"16624:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2336,"mutability":"mutable","name":"router","nameLocation":"16665:6:12","nodeType":"VariableDeclaration","scope":2341,"src":"16657:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2335,"name":"address","nodeType":"ElementaryTypeName","src":"16657:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2338,"mutability":"mutable","name":"pool","nameLocation":"16685:4:12","nodeType":"VariableDeclaration","scope":2341,"src":"16677:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2337,"name":"address","nodeType":"ElementaryTypeName","src":"16677:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2340,"mutability":"mutable","name":"userData","nameLocation":"16701:8:12","nodeType":"VariableDeclaration","scope":2341,"src":"16695:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2339,"name":"bytes","nodeType":"ElementaryTypeName","src":"16695:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"AfterSwapParams","nameLocation":"16370:15:12","nodeType":"StructDefinition","scope":2412,"src":"16363:349:12","visibility":"public"},{"canonicalName":"AddLiquidityKind","id":2347,"members":[{"id":2342,"name":"PROPORTIONAL","nameLocation":"16951:12:12","nodeType":"EnumValue","src":"16951:12:12"},{"id":2343,"name":"UNBALANCED","nameLocation":"16969:10:12","nodeType":"EnumValue","src":"16969:10:12"},{"id":2344,"name":"SINGLE_TOKEN_EXACT_OUT","nameLocation":"16985:22:12","nodeType":"EnumValue","src":"16985:22:12"},{"id":2345,"name":"DONATION","nameLocation":"17013:8:12","nodeType":"EnumValue","src":"17013:8:12"},{"id":2346,"name":"CUSTOM","nameLocation":"17027:6:12","nodeType":"EnumValue","src":"17027:6:12"}],"name":"AddLiquidityKind","nameLocation":"16928:16:12","nodeType":"EnumDefinition","src":"16923:112:12"},{"canonicalName":"AddLiquidityParams","documentation":{"id":2348,"nodeType":"StructuredDocumentation","src":"17037:320:12","text":" @notice Data for an add liquidity operation.\n @param pool Address of the pool\n @param to Address of user to mint to\n @param maxAmountsIn Maximum amounts of input tokens\n @param minBptAmountOut Minimum amount of output pool tokens\n @param kind Add liquidity kind\n @param userData Optional user data"},"id":2363,"members":[{"constant":false,"id":2350,"mutability":"mutable","name":"pool","nameLocation":"17398:4:12","nodeType":"VariableDeclaration","scope":2363,"src":"17390:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2349,"name":"address","nodeType":"ElementaryTypeName","src":"17390:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2352,"mutability":"mutable","name":"to","nameLocation":"17416:2:12","nodeType":"VariableDeclaration","scope":2363,"src":"17408:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2351,"name":"address","nodeType":"ElementaryTypeName","src":"17408:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2355,"mutability":"mutable","name":"maxAmountsIn","nameLocation":"17434:12:12","nodeType":"VariableDeclaration","scope":2363,"src":"17424:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2353,"name":"uint256","nodeType":"ElementaryTypeName","src":"17424:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2354,"nodeType":"ArrayTypeName","src":"17424:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2357,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"17460:15:12","nodeType":"VariableDeclaration","scope":2363,"src":"17452:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2356,"name":"uint256","nodeType":"ElementaryTypeName","src":"17452:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2360,"mutability":"mutable","name":"kind","nameLocation":"17498:4:12","nodeType":"VariableDeclaration","scope":2363,"src":"17481:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2347","typeString":"enum AddLiquidityKind"},"typeName":{"id":2359,"nodeType":"UserDefinedTypeName","pathNode":{"id":2358,"name":"AddLiquidityKind","nameLocations":["17481:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":2347,"src":"17481:16:12"},"referencedDeclaration":2347,"src":"17481:16:12","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$2347","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":2362,"mutability":"mutable","name":"userData","nameLocation":"17514:8:12","nodeType":"VariableDeclaration","scope":2363,"src":"17508:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2361,"name":"bytes","nodeType":"ElementaryTypeName","src":"17508:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"AddLiquidityParams","nameLocation":"17365:18:12","nodeType":"StructDefinition","scope":2412,"src":"17358:167:12","visibility":"public"},{"canonicalName":"RemoveLiquidityKind","id":2368,"members":[{"id":2364,"name":"PROPORTIONAL","nameLocation":"17770:12:12","nodeType":"EnumValue","src":"17770:12:12"},{"id":2365,"name":"SINGLE_TOKEN_EXACT_IN","nameLocation":"17788:21:12","nodeType":"EnumValue","src":"17788:21:12"},{"id":2366,"name":"SINGLE_TOKEN_EXACT_OUT","nameLocation":"17815:22:12","nodeType":"EnumValue","src":"17815:22:12"},{"id":2367,"name":"CUSTOM","nameLocation":"17843:6:12","nodeType":"EnumValue","src":"17843:6:12"}],"name":"RemoveLiquidityKind","nameLocation":"17744:19:12","nodeType":"EnumDefinition","src":"17739:112:12"},{"canonicalName":"RemoveLiquidityParams","documentation":{"id":2369,"nodeType":"StructuredDocumentation","src":"17853:330:12","text":" @notice Data for an remove liquidity operation.\n @param pool Address of the pool\n @param from Address of user to burn from\n @param maxBptAmountIn Maximum amount of input pool tokens\n @param minAmountsOut Minimum amounts of output tokens\n @param kind Remove liquidity kind\n @param userData Optional user data"},"id":2384,"members":[{"constant":false,"id":2371,"mutability":"mutable","name":"pool","nameLocation":"18227:4:12","nodeType":"VariableDeclaration","scope":2384,"src":"18219:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2370,"name":"address","nodeType":"ElementaryTypeName","src":"18219:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2373,"mutability":"mutable","name":"from","nameLocation":"18245:4:12","nodeType":"VariableDeclaration","scope":2384,"src":"18237:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2372,"name":"address","nodeType":"ElementaryTypeName","src":"18237:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2375,"mutability":"mutable","name":"maxBptAmountIn","nameLocation":"18263:14:12","nodeType":"VariableDeclaration","scope":2384,"src":"18255:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2374,"name":"uint256","nodeType":"ElementaryTypeName","src":"18255:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2378,"mutability":"mutable","name":"minAmountsOut","nameLocation":"18293:13:12","nodeType":"VariableDeclaration","scope":2384,"src":"18283:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2376,"name":"uint256","nodeType":"ElementaryTypeName","src":"18283:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2377,"nodeType":"ArrayTypeName","src":"18283:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2381,"mutability":"mutable","name":"kind","nameLocation":"18332:4:12","nodeType":"VariableDeclaration","scope":2384,"src":"18312:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2368","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":2380,"nodeType":"UserDefinedTypeName","pathNode":{"id":2379,"name":"RemoveLiquidityKind","nameLocations":["18312:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":2368,"src":"18312:19:12"},"referencedDeclaration":2368,"src":"18312:19:12","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$2368","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":2383,"mutability":"mutable","name":"userData","nameLocation":"18348:8:12","nodeType":"VariableDeclaration","scope":2384,"src":"18342:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2382,"name":"bytes","nodeType":"ElementaryTypeName","src":"18342:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"RemoveLiquidityParams","nameLocation":"18191:21:12","nodeType":"StructDefinition","scope":2412,"src":"18184:175:12","visibility":"public"},{"canonicalName":"WrappingDirection","id":2387,"members":[{"id":2385,"name":"WRAP","nameLocation":"18602:4:12","nodeType":"EnumValue","src":"18602:4:12"},{"id":2386,"name":"UNWRAP","nameLocation":"18612:6:12","nodeType":"EnumValue","src":"18612:6:12"}],"name":"WrappingDirection","nameLocation":"18578:17:12","nodeType":"EnumDefinition","src":"18573:47:12"},{"canonicalName":"BufferWrapOrUnwrapParams","documentation":{"id":2388,"nodeType":"StructuredDocumentation","src":"18622:499:12","text":" @notice Data for a wrap/unwrap operation.\n @param kind Type of swap (Exact In or Exact Out)\n @param direction Direction of the wrapping operation (Wrap or Unwrap)\n @param wrappedToken Wrapped token, compatible with interface ERC4626\n @param amountGivenRaw Amount specified for tokenIn or tokenOut (depends on the type of swap and wrapping direction)\n @param limitRaw Minimum or maximum amount specified for the other token (depends on the type of swap and wrapping\n direction)"},"id":2402,"members":[{"constant":false,"id":2391,"mutability":"mutable","name":"kind","nameLocation":"19169:4:12","nodeType":"VariableDeclaration","scope":2402,"src":"19160:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2275","typeString":"enum SwapKind"},"typeName":{"id":2390,"nodeType":"UserDefinedTypeName","pathNode":{"id":2389,"name":"SwapKind","nameLocations":["19160:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2275,"src":"19160:8:12"},"referencedDeclaration":2275,"src":"19160:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$2275","typeString":"enum SwapKind"}},"visibility":"internal"},{"constant":false,"id":2394,"mutability":"mutable","name":"direction","nameLocation":"19197:9:12","nodeType":"VariableDeclaration","scope":2402,"src":"19179:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_WrappingDirection_$2387","typeString":"enum WrappingDirection"},"typeName":{"id":2393,"nodeType":"UserDefinedTypeName","pathNode":{"id":2392,"name":"WrappingDirection","nameLocations":["19179:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2387,"src":"19179:17:12"},"referencedDeclaration":2387,"src":"19179:17:12","typeDescriptions":{"typeIdentifier":"t_enum$_WrappingDirection_$2387","typeString":"enum WrappingDirection"}},"visibility":"internal"},{"constant":false,"id":2397,"mutability":"mutable","name":"wrappedToken","nameLocation":"19221:12:12","nodeType":"VariableDeclaration","scope":2402,"src":"19212:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"},"typeName":{"id":2396,"nodeType":"UserDefinedTypeName","pathNode":{"id":2395,"name":"IERC4626","nameLocations":["19212:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":6576,"src":"19212:8:12"},"referencedDeclaration":6576,"src":"19212:8:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$6576","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":2399,"mutability":"mutable","name":"amountGivenRaw","nameLocation":"19247:14:12","nodeType":"VariableDeclaration","scope":2402,"src":"19239:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2398,"name":"uint256","nodeType":"ElementaryTypeName","src":"19239:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2401,"mutability":"mutable","name":"limitRaw","nameLocation":"19275:8:12","nodeType":"VariableDeclaration","scope":2402,"src":"19267:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2400,"name":"uint256","nodeType":"ElementaryTypeName","src":"19267:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"BufferWrapOrUnwrapParams","nameLocation":"19129:24:12","nodeType":"StructDefinition","scope":2412,"src":"19122:164:12","visibility":"public"},{"constant":true,"id":2405,"mutability":"constant","name":"FEE_BITLENGTH","nameLocation":"19611:13:12","nodeType":"VariableDeclaration","scope":2412,"src":"19594:35:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2403,"name":"uint256","nodeType":"ElementaryTypeName","src":"19594:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3234","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19627:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"visibility":"internal"},{"constant":true,"id":2408,"mutability":"constant","name":"FEE_SCALING_FACTOR","nameLocation":"19648:18:12","nodeType":"VariableDeclaration","scope":2412,"src":"19631:42:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2406,"name":"uint256","nodeType":"ElementaryTypeName","src":"19631:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653131","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19669:4:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000000_by_1","typeString":"int_const 100000000000"},"value":"1e11"},"visibility":"internal"},{"constant":true,"id":2411,"mutability":"constant","name":"MAX_FEE_PERCENTAGE","nameLocation":"19896:18:12","nodeType":"VariableDeclaration","scope":2412,"src":"19879:48:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2409,"name":"uint256","nodeType":"ElementaryTypeName","src":"19879:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"39392e39393939653136","id":2410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19917:10:12","typeDescriptions":{"typeIdentifier":"t_rational_999999000000000000_by_1","typeString":"int_const 999999000000000000"},"value":"99.9999e16"},"visibility":"internal"}],"src":"46:19895:12"},"id":12},"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol":{"ast":{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol","exportedSymbols":{"Authentication":[2491],"IAuthentication":[47]},"id":2492,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2413,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:13"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","file":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","id":2415,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2492,"sourceUnit":48,"src":"72:116:13","symbolAliases":[{"foreign":{"id":2414,"name":"IAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"81:15:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2417,"name":"IAuthentication","nameLocations":["625:15:13"],"nodeType":"IdentifierPath","referencedDeclaration":47,"src":"625:15:13"},"id":2418,"nodeType":"InheritanceSpecifier","src":"625:15:13"}],"canonicalName":"Authentication","contractDependencies":[],"contractKind":"contract","documentation":{"id":2416,"nodeType":"StructuredDocumentation","src":"190:398:13","text":" @notice Building block for performing access control on external functions.\n @dev This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be\n applied to external functions to make them only callable by authorized accounts.\n Derived contracts must implement the `_canPerform` function, which holds the actual access control logic."},"fullyImplemented":false,"id":2491,"linearizedBaseContracts":[2491,47],"name":"Authentication","nameLocation":"607:14:13","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2420,"mutability":"immutable","name":"_actionIdDisambiguator","nameLocation":"673:22:13","nodeType":"VariableDeclaration","scope":2491,"src":"647:48:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"647:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":2430,"nodeType":"Block","src":"1337:63:13","statements":[{"expression":{"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2426,"name":"_actionIdDisambiguator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"1347:22:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2427,"name":"actionIdDisambiguator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"1372:21:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1347:46:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2429,"nodeType":"ExpressionStatement","src":"1347:46:13"}]},"documentation":{"id":2421,"nodeType":"StructuredDocumentation","src":"702:587:13","text":" @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\n multi-contract systems.\n There are two main uses for it:\n  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\n    unique. The contract's own address is a good option.\n  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\n    shared by the entire family (and no other contract) should be used instead."},"id":2431,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2423,"mutability":"mutable","name":"actionIdDisambiguator","nameLocation":"1314:21:13","nodeType":"VariableDeclaration","scope":2431,"src":"1306:29:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2422,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1306:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1305:31:13"},"returnParameters":{"id":2425,"nodeType":"ParameterList","parameters":[],"src":"1337:0:13"},"scope":2491,"src":"1294:106:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2438,"nodeType":"Block","src":"1549:49:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2434,"name":"_authenticateCaller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"1559:19:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1559:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2436,"nodeType":"ExpressionStatement","src":"1559:21:13"},{"id":2437,"nodeType":"PlaceholderStatement","src":"1590:1:13"}]},"documentation":{"id":2432,"nodeType":"StructuredDocumentation","src":"1406:114:13","text":"@dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions."},"id":2439,"name":"authenticate","nameLocation":"1534:12:13","nodeType":"ModifierDefinition","parameters":{"id":2433,"nodeType":"ParameterList","parameters":[],"src":"1546:2:13"},"src":"1525:73:13","virtual":false,"visibility":"internal"},{"body":{"id":2461,"nodeType":"Block","src":"1733:156:13","statements":[{"assignments":[2444],"declarations":[{"constant":false,"id":2444,"mutability":"mutable","name":"actionId","nameLocation":"1751:8:13","nodeType":"VariableDeclaration","scope":2461,"src":"1743:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1743:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2449,"initialValue":{"arguments":[{"expression":{"id":2446,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1774:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1778:3:13","memberName":"sig","nodeType":"MemberAccess","src":"1774:7:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":2445,"name":"getActionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"1762:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bytes32_$","typeString":"function (bytes4) view returns (bytes32)"}},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1762:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1743:39:13"},{"condition":{"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1797:34:13","subExpression":{"arguments":[{"id":2451,"name":"actionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"1810:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2452,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1820:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1824:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1820:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2450,"name":"_canPerform","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"1798:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1798:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2460,"nodeType":"IfStatement","src":"1793:90:13","trueBody":{"id":2459,"nodeType":"Block","src":"1833:50:13","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2456,"name":"SenderNotAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1854:16:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1854:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2458,"nodeType":"RevertStatement","src":"1847:25:13"}]}}]},"documentation":{"id":2440,"nodeType":"StructuredDocumentation","src":"1604:79:13","text":"@dev Reverts unless the caller is allowed to call the entry point function."},"id":2462,"implemented":true,"kind":"function","modifiers":[],"name":"_authenticateCaller","nameLocation":"1697:19:13","nodeType":"FunctionDefinition","parameters":{"id":2441,"nodeType":"ParameterList","parameters":[],"src":"1716:2:13"},"returnParameters":{"id":2442,"nodeType":"ParameterList","parameters":[],"src":"1733:0:13"},"scope":2491,"src":"1688:201:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[46],"body":{"id":2479,"nodeType":"Block","src":"2008:353:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":2474,"name":"_actionIdDisambiguator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"2320:22:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2475,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"2344:8:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2472,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2303:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2307:12:13","memberName":"encodePacked","nodeType":"MemberAccess","src":"2303:16:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2303:50:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2471,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2293:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2293:61:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2470,"id":2478,"nodeType":"Return","src":"2286:68:13"}]},"documentation":{"id":2463,"nodeType":"StructuredDocumentation","src":"1895:31:13","text":"@inheritdoc IAuthentication"},"functionSelector":"851c1bb3","id":2480,"implemented":true,"kind":"function","modifiers":[],"name":"getActionId","nameLocation":"1940:11:13","nodeType":"FunctionDefinition","overrides":{"id":2467,"nodeType":"OverrideSpecifier","overrides":[],"src":"1981:8:13"},"parameters":{"id":2466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2465,"mutability":"mutable","name":"selector","nameLocation":"1959:8:13","nodeType":"VariableDeclaration","scope":2480,"src":"1952:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2464,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1952:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1951:17:13"},"returnParameters":{"id":2470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2480,"src":"1999:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2468,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1999:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1998:9:13"},"scope":2491,"src":"1931:430:13","stateMutability":"view","virtual":false,"visibility":"public"},{"documentation":{"id":2481,"nodeType":"StructuredDocumentation","src":"2367:304:13","text":" @dev Derived contracts must implement this function to perform the actual access control logic.\n @param actionId The action identifier associated with an external function\n @param user The account performing the action\n @return success True if the action is permitted"},"id":2490,"implemented":false,"kind":"function","modifiers":[],"name":"_canPerform","nameLocation":"2685:11:13","nodeType":"FunctionDefinition","parameters":{"id":2486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2483,"mutability":"mutable","name":"actionId","nameLocation":"2705:8:13","nodeType":"VariableDeclaration","scope":2490,"src":"2697:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2482,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2697:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2485,"mutability":"mutable","name":"user","nameLocation":"2723:4:13","nodeType":"VariableDeclaration","scope":2490,"src":"2715:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2484,"name":"address","nodeType":"ElementaryTypeName","src":"2715:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2696:32:13"},"returnParameters":{"id":2489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2490,"src":"2760:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2487,"name":"bool","nodeType":"ElementaryTypeName","src":"2760:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2759:6:13"},"scope":2491,"src":"2676:90:13","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2492,"src":"589:2179:13","usedErrors":[38],"usedEvents":[]}],"src":"46:2723:13"},"id":13},"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol":{"ast":{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol","exportedSymbols":{"FixedPoint":[2790],"LogExpMath":[4146]},"id":2791,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2493,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:14"},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol","file":"./LogExpMath.sol","id":2495,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2791,"sourceUnit":4147,"src":"72:46:14","symbolAliases":[{"foreign":{"id":2494,"name":"LogExpMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"81:10:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"FixedPoint","contractDependencies":[],"contractKind":"library","documentation":{"id":2496,"nodeType":"StructuredDocumentation","src":"120:119:14","text":"@notice Support 18-decimal fixed point arithmetic. All Vault calculations use this for high and uniform precision."},"fullyImplemented":true,"id":2790,"linearizedBaseContracts":[2790],"name":"FixedPoint","nameLocation":"247:10:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2497,"nodeType":"StructuredDocumentation","src":"264:39:14","text":"@notice Attempted division by zero."},"errorSelector":"0a0c22c7","id":2499,"name":"ZeroDivision","nameLocation":"314:12:14","nodeType":"ErrorDefinition","parameters":{"id":2498,"nodeType":"ParameterList","parameters":[],"src":"326:2:14"},"src":"308:21:14"},{"constant":true,"id":2502,"mutability":"constant","name":"ONE","nameLocation":"459:3:14","nodeType":"VariableDeclaration","scope":2790,"src":"433:36:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2500,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653138","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"465:4:14","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"visibility":"internal"},{"constant":true,"id":2507,"mutability":"constant","name":"TWO","nameLocation":"522:3:14","nodeType":"VariableDeclaration","scope":2790,"src":"496:39:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2503,"name":"uint256","nodeType":"ElementaryTypeName","src":"496:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"528:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2505,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"532:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"528:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":true,"id":2512,"mutability":"constant","name":"FOUR","nameLocation":"567:4:14","nodeType":"VariableDeclaration","scope":2790,"src":"541:40:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2508,"name":"uint256","nodeType":"ElementaryTypeName","src":"541:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"34","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"574:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2510,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"578:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"574:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":true,"id":2515,"mutability":"constant","name":"MAX_POW_RELATIVE_ERROR","nameLocation":"613:22:14","nodeType":"VariableDeclaration","scope":2790,"src":"587:56:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2513,"name":"uint256","nodeType":"ElementaryTypeName","src":"587:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130303030","id":2514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"638:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"visibility":"internal"},{"body":{"id":2534,"nodeType":"Block","src":"733:148:14","statements":[{"assignments":[2525],"declarations":[{"constant":false,"id":2525,"mutability":"mutable","name":"product","nameLocation":"828:7:14","nodeType":"VariableDeclaration","scope":2534,"src":"820:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2524,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2529,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2526,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"838:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2527,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"842:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"838:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"820:23:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2530,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"861:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2531,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"871:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"861:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2523,"id":2533,"nodeType":"Return","src":"854:20:14"}]},"id":2535,"implemented":true,"kind":"function","modifiers":[],"name":"mulDown","nameLocation":"671:7:14","nodeType":"FunctionDefinition","parameters":{"id":2520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2517,"mutability":"mutable","name":"a","nameLocation":"687:1:14","nodeType":"VariableDeclaration","scope":2535,"src":"679:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2516,"name":"uint256","nodeType":"ElementaryTypeName","src":"679:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2519,"mutability":"mutable","name":"b","nameLocation":"698:1:14","nodeType":"VariableDeclaration","scope":2535,"src":"690:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2518,"name":"uint256","nodeType":"ElementaryTypeName","src":"690:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"678:22:14"},"returnParameters":{"id":2523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2535,"src":"724:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2521,"name":"uint256","nodeType":"ElementaryTypeName","src":"724:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"723:9:14"},"scope":2790,"src":"662:219:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2551,"nodeType":"Block","src":"963:351:14","statements":[{"assignments":[2545],"declarations":[{"constant":false,"id":2545,"mutability":"mutable","name":"product","nameLocation":"1058:7:14","nodeType":"VariableDeclaration","scope":2551,"src":"1050:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2544,"name":"uint256","nodeType":"ElementaryTypeName","src":"1050:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2549,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2546,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"1068:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2547,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"1072:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1068:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1050:23:14"},{"AST":{"nativeSrc":"1211:97:14","nodeType":"YulBlock","src":"1211:97:14","statements":[{"nativeSrc":"1225:73:14","nodeType":"YulAssignment","src":"1225:73:14","value":{"arguments":[{"arguments":[{"arguments":[{"name":"product","nativeSrc":"1253:7:14","nodeType":"YulIdentifier","src":"1253:7:14"}],"functionName":{"name":"iszero","nativeSrc":"1246:6:14","nodeType":"YulIdentifier","src":"1246:6:14"},"nativeSrc":"1246:15:14","nodeType":"YulFunctionCall","src":"1246:15:14"}],"functionName":{"name":"iszero","nativeSrc":"1239:6:14","nodeType":"YulIdentifier","src":"1239:6:14"},"nativeSrc":"1239:23:14","nodeType":"YulFunctionCall","src":"1239:23:14"},{"arguments":[{"arguments":[{"arguments":[{"name":"product","nativeSrc":"1276:7:14","nodeType":"YulIdentifier","src":"1276:7:14"},{"kind":"number","nativeSrc":"1285:1:14","nodeType":"YulLiteral","src":"1285:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1272:3:14","nodeType":"YulIdentifier","src":"1272:3:14"},"nativeSrc":"1272:15:14","nodeType":"YulFunctionCall","src":"1272:15:14"},{"name":"ONE","nativeSrc":"1289:3:14","nodeType":"YulIdentifier","src":"1289:3:14"}],"functionName":{"name":"div","nativeSrc":"1268:3:14","nodeType":"YulIdentifier","src":"1268:3:14"},"nativeSrc":"1268:25:14","nodeType":"YulFunctionCall","src":"1268:25:14"},{"kind":"number","nativeSrc":"1295:1:14","nodeType":"YulLiteral","src":"1295:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"1264:3:14","nodeType":"YulIdentifier","src":"1264:3:14"},"nativeSrc":"1264:33:14","nodeType":"YulFunctionCall","src":"1264:33:14"}],"functionName":{"name":"mul","nativeSrc":"1235:3:14","nodeType":"YulIdentifier","src":"1235:3:14"},"nativeSrc":"1235:63:14","nodeType":"YulFunctionCall","src":"1235:63:14"},"variableNames":[{"name":"result","nativeSrc":"1225:6:14","nodeType":"YulIdentifier","src":"1225:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":2502,"isOffset":false,"isSlot":false,"src":"1289:3:14","valueSize":1},{"declaration":2545,"isOffset":false,"isSlot":false,"src":"1253:7:14","valueSize":1},{"declaration":2545,"isOffset":false,"isSlot":false,"src":"1276:7:14","valueSize":1},{"declaration":2542,"isOffset":false,"isSlot":false,"src":"1225:6:14","valueSize":1}],"flags":["memory-safe"],"id":2550,"nodeType":"InlineAssembly","src":"1186:122:14"}]},"id":2552,"implemented":true,"kind":"function","modifiers":[],"name":"mulUp","nameLocation":"896:5:14","nodeType":"FunctionDefinition","parameters":{"id":2540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2537,"mutability":"mutable","name":"a","nameLocation":"910:1:14","nodeType":"VariableDeclaration","scope":2552,"src":"902:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2536,"name":"uint256","nodeType":"ElementaryTypeName","src":"902:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2539,"mutability":"mutable","name":"b","nameLocation":"921:1:14","nodeType":"VariableDeclaration","scope":2552,"src":"913:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2538,"name":"uint256","nodeType":"ElementaryTypeName","src":"913:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"901:22:14"},"returnParameters":{"id":2543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"mutability":"mutable","name":"result","nameLocation":"955:6:14","nodeType":"VariableDeclaration","scope":2552,"src":"947:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2541,"name":"uint256","nodeType":"ElementaryTypeName","src":"947:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"946:16:14"},"scope":2790,"src":"887:427:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2571,"nodeType":"Block","src":"1391:254:14","statements":[{"assignments":[2562],"declarations":[{"constant":false,"id":2562,"mutability":"mutable","name":"aInflated","nameLocation":"1499:9:14","nodeType":"VariableDeclaration","scope":2571,"src":"1491:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2561,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2566,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2563,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"1511:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2564,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"1515:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1511:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1491:27:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2567,"name":"aInflated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"1625:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2568,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"1637:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1625:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2560,"id":2570,"nodeType":"Return","src":"1618:20:14"}]},"id":2572,"implemented":true,"kind":"function","modifiers":[],"name":"divDown","nameLocation":"1329:7:14","nodeType":"FunctionDefinition","parameters":{"id":2557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2554,"mutability":"mutable","name":"a","nameLocation":"1345:1:14","nodeType":"VariableDeclaration","scope":2572,"src":"1337:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2553,"name":"uint256","nodeType":"ElementaryTypeName","src":"1337:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2556,"mutability":"mutable","name":"b","nameLocation":"1356:1:14","nodeType":"VariableDeclaration","scope":2572,"src":"1348:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2555,"name":"uint256","nodeType":"ElementaryTypeName","src":"1348:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1336:22:14"},"returnParameters":{"id":2560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2572,"src":"1382:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2558,"name":"uint256","nodeType":"ElementaryTypeName","src":"1382:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1381:9:14"},"scope":2790,"src":"1320:325:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2587,"nodeType":"Block","src":"1727:43:14","statements":[{"expression":{"arguments":[{"id":2582,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"1753:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2583,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"1756:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2584,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"1761:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2581,"name":"mulDivUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"1744:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1744:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2580,"id":2586,"nodeType":"Return","src":"1737:26:14"}]},"id":2588,"implemented":true,"kind":"function","modifiers":[],"name":"divUp","nameLocation":"1660:5:14","nodeType":"FunctionDefinition","parameters":{"id":2577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2574,"mutability":"mutable","name":"a","nameLocation":"1674:1:14","nodeType":"VariableDeclaration","scope":2588,"src":"1666:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2573,"name":"uint256","nodeType":"ElementaryTypeName","src":"1666:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2576,"mutability":"mutable","name":"b","nameLocation":"1685:1:14","nodeType":"VariableDeclaration","scope":2588,"src":"1677:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2575,"name":"uint256","nodeType":"ElementaryTypeName","src":"1677:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1665:22:14"},"returnParameters":{"id":2580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2579,"mutability":"mutable","name":"result","nameLocation":"1719:6:14","nodeType":"VariableDeclaration","scope":2588,"src":"1711:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2578,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1710:16:14"},"scope":2790,"src":"1651:119:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2615,"nodeType":"Block","src":"1912:774:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2600,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"2004:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2009:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2004:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2607,"nodeType":"IfStatement","src":"2000:58:14","trueBody":{"id":2606,"nodeType":"Block","src":"2012:46:14","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2603,"name":"ZeroDivision","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"2033:12:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2033:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2605,"nodeType":"RevertStatement","src":"2026:21:14"}]}},{"assignments":[2609],"declarations":[{"constant":false,"id":2609,"mutability":"mutable","name":"product","nameLocation":"2143:7:14","nodeType":"VariableDeclaration","scope":2615,"src":"2135:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2608,"name":"uint256","nodeType":"ElementaryTypeName","src":"2135:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2613,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2610,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2591,"src":"2153:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2611,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"2157:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2135:23:14"},{"AST":{"nativeSrc":"2585:95:14","nodeType":"YulBlock","src":"2585:95:14","statements":[{"nativeSrc":"2599:71:14","nodeType":"YulAssignment","src":"2599:71:14","value":{"arguments":[{"arguments":[{"arguments":[{"name":"product","nativeSrc":"2627:7:14","nodeType":"YulIdentifier","src":"2627:7:14"}],"functionName":{"name":"iszero","nativeSrc":"2620:6:14","nodeType":"YulIdentifier","src":"2620:6:14"},"nativeSrc":"2620:15:14","nodeType":"YulFunctionCall","src":"2620:15:14"}],"functionName":{"name":"iszero","nativeSrc":"2613:6:14","nodeType":"YulIdentifier","src":"2613:6:14"},"nativeSrc":"2613:23:14","nodeType":"YulFunctionCall","src":"2613:23:14"},{"arguments":[{"arguments":[{"arguments":[{"name":"product","nativeSrc":"2650:7:14","nodeType":"YulIdentifier","src":"2650:7:14"},{"kind":"number","nativeSrc":"2659:1:14","nodeType":"YulLiteral","src":"2659:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"2646:3:14","nodeType":"YulIdentifier","src":"2646:3:14"},"nativeSrc":"2646:15:14","nodeType":"YulFunctionCall","src":"2646:15:14"},{"name":"c","nativeSrc":"2663:1:14","nodeType":"YulIdentifier","src":"2663:1:14"}],"functionName":{"name":"div","nativeSrc":"2642:3:14","nodeType":"YulIdentifier","src":"2642:3:14"},"nativeSrc":"2642:23:14","nodeType":"YulFunctionCall","src":"2642:23:14"},{"kind":"number","nativeSrc":"2667:1:14","nodeType":"YulLiteral","src":"2667:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2638:3:14","nodeType":"YulIdentifier","src":"2638:3:14"},"nativeSrc":"2638:31:14","nodeType":"YulFunctionCall","src":"2638:31:14"}],"functionName":{"name":"mul","nativeSrc":"2609:3:14","nodeType":"YulIdentifier","src":"2609:3:14"},"nativeSrc":"2609:61:14","nodeType":"YulFunctionCall","src":"2609:61:14"},"variableNames":[{"name":"result","nativeSrc":"2599:6:14","nodeType":"YulIdentifier","src":"2599:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":2595,"isOffset":false,"isSlot":false,"src":"2663:1:14","valueSize":1},{"declaration":2609,"isOffset":false,"isSlot":false,"src":"2627:7:14","valueSize":1},{"declaration":2609,"isOffset":false,"isSlot":false,"src":"2650:7:14","valueSize":1},{"declaration":2598,"isOffset":false,"isSlot":false,"src":"2599:6:14","valueSize":1}],"flags":["memory-safe"],"id":2614,"nodeType":"InlineAssembly","src":"2560:120:14"}]},"documentation":{"id":2589,"nodeType":"StructuredDocumentation","src":"1776:41:14","text":"@dev Return (a * b) / c, rounding up."},"id":2616,"implemented":true,"kind":"function","modifiers":[],"name":"mulDivUp","nameLocation":"1831:8:14","nodeType":"FunctionDefinition","parameters":{"id":2596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2591,"mutability":"mutable","name":"a","nameLocation":"1848:1:14","nodeType":"VariableDeclaration","scope":2616,"src":"1840:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2590,"name":"uint256","nodeType":"ElementaryTypeName","src":"1840:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2593,"mutability":"mutable","name":"b","nameLocation":"1859:1:14","nodeType":"VariableDeclaration","scope":2616,"src":"1851:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2592,"name":"uint256","nodeType":"ElementaryTypeName","src":"1851:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2595,"mutability":"mutable","name":"c","nameLocation":"1870:1:14","nodeType":"VariableDeclaration","scope":2616,"src":"1862:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2594,"name":"uint256","nodeType":"ElementaryTypeName","src":"1862:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1839:33:14"},"returnParameters":{"id":2599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2598,"mutability":"mutable","name":"result","nameLocation":"1904:6:14","nodeType":"VariableDeclaration","scope":2616,"src":"1896:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2597,"name":"uint256","nodeType":"ElementaryTypeName","src":"1896:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1895:16:14"},"scope":2790,"src":"1822:864:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2635,"nodeType":"Block","src":"3159:345:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2626,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2621,"src":"3251:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3256:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3251:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2633,"nodeType":"IfStatement","src":"3247:58:14","trueBody":{"id":2632,"nodeType":"Block","src":"3259:46:14","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2629,"name":"ZeroDivision","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"3280:12:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3280:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2631,"nodeType":"RevertStatement","src":"3273:21:14"}]}},{"AST":{"nativeSrc":"3415:83:14","nodeType":"YulBlock","src":"3415:83:14","statements":[{"nativeSrc":"3429:59:14","nodeType":"YulAssignment","src":"3429:59:14","value":{"arguments":[{"arguments":[{"arguments":[{"name":"a","nativeSrc":"3457:1:14","nodeType":"YulIdentifier","src":"3457:1:14"}],"functionName":{"name":"iszero","nativeSrc":"3450:6:14","nodeType":"YulIdentifier","src":"3450:6:14"},"nativeSrc":"3450:9:14","nodeType":"YulFunctionCall","src":"3450:9:14"}],"functionName":{"name":"iszero","nativeSrc":"3443:6:14","nodeType":"YulIdentifier","src":"3443:6:14"},"nativeSrc":"3443:17:14","nodeType":"YulFunctionCall","src":"3443:17:14"},{"arguments":[{"kind":"number","nativeSrc":"3466:1:14","nodeType":"YulLiteral","src":"3466:1:14","type":"","value":"1"},{"arguments":[{"arguments":[{"name":"a","nativeSrc":"3477:1:14","nodeType":"YulIdentifier","src":"3477:1:14"},{"kind":"number","nativeSrc":"3480:1:14","nodeType":"YulLiteral","src":"3480:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"3473:3:14","nodeType":"YulIdentifier","src":"3473:3:14"},"nativeSrc":"3473:9:14","nodeType":"YulFunctionCall","src":"3473:9:14"},{"name":"b","nativeSrc":"3484:1:14","nodeType":"YulIdentifier","src":"3484:1:14"}],"functionName":{"name":"div","nativeSrc":"3469:3:14","nodeType":"YulIdentifier","src":"3469:3:14"},"nativeSrc":"3469:17:14","nodeType":"YulFunctionCall","src":"3469:17:14"}],"functionName":{"name":"add","nativeSrc":"3462:3:14","nodeType":"YulIdentifier","src":"3462:3:14"},"nativeSrc":"3462:25:14","nodeType":"YulFunctionCall","src":"3462:25:14"}],"functionName":{"name":"mul","nativeSrc":"3439:3:14","nodeType":"YulIdentifier","src":"3439:3:14"},"nativeSrc":"3439:49:14","nodeType":"YulFunctionCall","src":"3439:49:14"},"variableNames":[{"name":"result","nativeSrc":"3429:6:14","nodeType":"YulIdentifier","src":"3429:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":2619,"isOffset":false,"isSlot":false,"src":"3457:1:14","valueSize":1},{"declaration":2619,"isOffset":false,"isSlot":false,"src":"3477:1:14","valueSize":1},{"declaration":2621,"isOffset":false,"isSlot":false,"src":"3484:1:14","valueSize":1},{"declaration":2624,"isOffset":false,"isSlot":false,"src":"3429:6:14","valueSize":1}],"flags":["memory-safe"],"id":2634,"nodeType":"InlineAssembly","src":"3390:108:14"}]},"documentation":{"id":2617,"nodeType":"StructuredDocumentation","src":"2692:383:14","text":" @dev Version of divUp when the input is raw (i.e., already \"inflated\"). For instance,\n invariant * invariant (36 decimals) vs. invariant.mulDown(invariant) (18 decimal FP).\n This can occur in calculations with many successive multiplications and divisions, and\n we want to minimize the number of operations by avoiding unnecessary scaling by ONE."},"id":2636,"implemented":true,"kind":"function","modifiers":[],"name":"divUpRaw","nameLocation":"3089:8:14","nodeType":"FunctionDefinition","parameters":{"id":2622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2619,"mutability":"mutable","name":"a","nameLocation":"3106:1:14","nodeType":"VariableDeclaration","scope":2636,"src":"3098:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2618,"name":"uint256","nodeType":"ElementaryTypeName","src":"3098:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2621,"mutability":"mutable","name":"b","nameLocation":"3117:1:14","nodeType":"VariableDeclaration","scope":2636,"src":"3109:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2620,"name":"uint256","nodeType":"ElementaryTypeName","src":"3109:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3097:22:14"},"returnParameters":{"id":2625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2624,"mutability":"mutable","name":"result","nameLocation":"3151:6:14","nodeType":"VariableDeclaration","scope":2636,"src":"3143:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2623,"name":"uint256","nodeType":"ElementaryTypeName","src":"3143:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3142:16:14"},"scope":2790,"src":"3080:424:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2711,"nodeType":"Block","src":"3807:723:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2646,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"3975:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2647,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"3980:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3975:8:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2652,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"4028:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2653,"name":"TWO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2507,"src":"4033:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4028:8:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2661,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"4093:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2662,"name":"FOUR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"4098:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4093:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2707,"nodeType":"Block","src":"4209:315:14","statements":[{"assignments":[2678],"declarations":[{"constant":false,"id":2678,"mutability":"mutable","name":"raw","nameLocation":"4231:3:14","nodeType":"VariableDeclaration","scope":2707,"src":"4223:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2677,"name":"uint256","nodeType":"ElementaryTypeName","src":"4223:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2684,"initialValue":{"arguments":[{"id":2681,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"4252:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2682,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"4255:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2679,"name":"LogExpMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"4237:10:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LogExpMath_$4146_$","typeString":"type(library LogExpMath)"}},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4248:3:14","memberName":"pow","nodeType":"MemberAccess","referencedDeclaration":3049,"src":"4237:14:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4237:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4223:34:14"},{"assignments":[2686],"declarations":[{"constant":false,"id":2686,"mutability":"mutable","name":"maxError","nameLocation":"4279:8:14","nodeType":"VariableDeclaration","scope":2707,"src":"4271:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2685,"name":"uint256","nodeType":"ElementaryTypeName","src":"4271:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2693,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2688,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"4296:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2689,"name":"MAX_POW_RELATIVE_ERROR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"4301:22:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2687,"name":"mulUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2552,"src":"4290:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4290:34:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4327:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4290:38:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4271:57:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2694,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"4347:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2695,"name":"maxError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"4353:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4347:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2705,"nodeType":"Block","src":"4410:104:14","statements":[{"id":2704,"nodeType":"UncheckedBlock","src":"4428:72:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2700,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"4467:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2701,"name":"maxError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"4473:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2645,"id":2703,"nodeType":"Return","src":"4460:21:14"}]}]},"id":2706,"nodeType":"IfStatement","src":"4343:171:14","trueBody":{"id":2699,"nodeType":"Block","src":"4363:41:14","statements":[{"expression":{"hexValue":"30","id":2697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4388:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2645,"id":2698,"nodeType":"Return","src":"4381:8:14"}]}}]},"id":2708,"nodeType":"IfStatement","src":"4089:435:14","trueBody":{"id":2676,"nodeType":"Block","src":"4104:99:14","statements":[{"assignments":[2665],"declarations":[{"constant":false,"id":2665,"mutability":"mutable","name":"square","nameLocation":"4126:6:14","nodeType":"VariableDeclaration","scope":2676,"src":"4118:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2664,"name":"uint256","nodeType":"ElementaryTypeName","src":"4118:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2670,"initialValue":{"arguments":[{"id":2667,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"4143:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2668,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"4146:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2666,"name":"mulDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"4135:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4135:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4118:30:14"},{"expression":{"arguments":[{"id":2672,"name":"square","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"4177:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2673,"name":"square","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"4185:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2671,"name":"mulDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"4169:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4169:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2645,"id":2675,"nodeType":"Return","src":"4162:30:14"}]}},"id":2709,"nodeType":"IfStatement","src":"4024:500:14","trueBody":{"id":2660,"nodeType":"Block","src":"4038:45:14","statements":[{"expression":{"arguments":[{"id":2656,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"4067:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2657,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"4070:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2655,"name":"mulDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"4059:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2645,"id":2659,"nodeType":"Return","src":"4052:20:14"}]}},"id":2710,"nodeType":"IfStatement","src":"3971:553:14","trueBody":{"id":2651,"nodeType":"Block","src":"3985:33:14","statements":[{"expression":{"id":2649,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"4006:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2645,"id":2650,"nodeType":"Return","src":"3999:8:14"}]}}]},"documentation":{"id":2637,"nodeType":"StructuredDocumentation","src":"3510:221:14","text":" @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\n the true value (that is, the error function expected - actual is always positive)."},"id":2712,"implemented":true,"kind":"function","modifiers":[],"name":"powDown","nameLocation":"3745:7:14","nodeType":"FunctionDefinition","parameters":{"id":2642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2639,"mutability":"mutable","name":"x","nameLocation":"3761:1:14","nodeType":"VariableDeclaration","scope":2712,"src":"3753:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2638,"name":"uint256","nodeType":"ElementaryTypeName","src":"3753:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2641,"mutability":"mutable","name":"y","nameLocation":"3772:1:14","nodeType":"VariableDeclaration","scope":2712,"src":"3764:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2640,"name":"uint256","nodeType":"ElementaryTypeName","src":"3764:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3752:22:14"},"returnParameters":{"id":2645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2644,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2712,"src":"3798:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2643,"name":"uint256","nodeType":"ElementaryTypeName","src":"3798:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3797:9:14"},"scope":2790,"src":"3736:794:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2778,"nodeType":"Block","src":"4829:568:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2722,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"4997:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2723,"name":"ONE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"5002:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4997:8:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2728,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"5050:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2729,"name":"TWO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2507,"src":"5055:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5050:8:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2737,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"5113:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2738,"name":"FOUR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"5118:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5113:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2774,"nodeType":"Block","src":"5225:166:14","statements":[{"assignments":[2754],"declarations":[{"constant":false,"id":2754,"mutability":"mutable","name":"raw","nameLocation":"5247:3:14","nodeType":"VariableDeclaration","scope":2774,"src":"5239:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2753,"name":"uint256","nodeType":"ElementaryTypeName","src":"5239:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2760,"initialValue":{"arguments":[{"id":2757,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"5268:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2758,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"5271:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2755,"name":"LogExpMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"5253:10:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LogExpMath_$4146_$","typeString":"type(library LogExpMath)"}},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5264:3:14","memberName":"pow","nodeType":"MemberAccess","referencedDeclaration":3049,"src":"5253:14:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5253:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5239:34:14"},{"assignments":[2762],"declarations":[{"constant":false,"id":2762,"mutability":"mutable","name":"maxError","nameLocation":"5295:8:14","nodeType":"VariableDeclaration","scope":2774,"src":"5287:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2761,"name":"uint256","nodeType":"ElementaryTypeName","src":"5287:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2769,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2764,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"5312:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2765,"name":"MAX_POW_RELATIVE_ERROR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"5317:22:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2763,"name":"mulUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2552,"src":"5306:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5306:34:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5343:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5306:38:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5287:57:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2770,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"5366:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2771,"name":"maxError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"5372:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5366:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2721,"id":2773,"nodeType":"Return","src":"5359:21:14"}]},"id":2775,"nodeType":"IfStatement","src":"5109:282:14","trueBody":{"id":2752,"nodeType":"Block","src":"5124:95:14","statements":[{"assignments":[2741],"declarations":[{"constant":false,"id":2741,"mutability":"mutable","name":"square","nameLocation":"5146:6:14","nodeType":"VariableDeclaration","scope":2752,"src":"5138:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2740,"name":"uint256","nodeType":"ElementaryTypeName","src":"5138:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2746,"initialValue":{"arguments":[{"id":2743,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"5161:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2744,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"5164:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2742,"name":"mulUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2552,"src":"5155:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5155:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5138:28:14"},{"expression":{"arguments":[{"id":2748,"name":"square","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"5193:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2749,"name":"square","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"5201:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2747,"name":"mulUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2552,"src":"5187:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5187:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2721,"id":2751,"nodeType":"Return","src":"5180:28:14"}]}},"id":2776,"nodeType":"IfStatement","src":"5046:345:14","trueBody":{"id":2736,"nodeType":"Block","src":"5060:43:14","statements":[{"expression":{"arguments":[{"id":2732,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"5087:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2733,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"5090:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2731,"name":"mulUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2552,"src":"5081:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5081:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2721,"id":2735,"nodeType":"Return","src":"5074:18:14"}]}},"id":2777,"nodeType":"IfStatement","src":"4993:398:14","trueBody":{"id":2727,"nodeType":"Block","src":"5007:33:14","statements":[{"expression":{"id":2725,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"5028:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2721,"id":2726,"nodeType":"Return","src":"5021:8:14"}]}}]},"documentation":{"id":2713,"nodeType":"StructuredDocumentation","src":"4536:219:14","text":" @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\n the true value (that is, the error function expected - actual is always negative)."},"id":2779,"implemented":true,"kind":"function","modifiers":[],"name":"powUp","nameLocation":"4769:5:14","nodeType":"FunctionDefinition","parameters":{"id":2718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2715,"mutability":"mutable","name":"x","nameLocation":"4783:1:14","nodeType":"VariableDeclaration","scope":2779,"src":"4775:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2714,"name":"uint256","nodeType":"ElementaryTypeName","src":"4775:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2717,"mutability":"mutable","name":"y","nameLocation":"4794:1:14","nodeType":"VariableDeclaration","scope":2779,"src":"4786:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2716,"name":"uint256","nodeType":"ElementaryTypeName","src":"4786:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4774:22:14"},"returnParameters":{"id":2721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2779,"src":"4820:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2719,"name":"uint256","nodeType":"ElementaryTypeName","src":"4820:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4819:9:14"},"scope":2790,"src":"4760:637:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2788,"nodeType":"Block","src":"5750:175:14","statements":[{"AST":{"nativeSrc":"5857:62:14","nodeType":"YulBlock","src":"5857:62:14","statements":[{"nativeSrc":"5871:38:14","nodeType":"YulAssignment","src":"5871:38:14","value":{"arguments":[{"arguments":[{"name":"x","nativeSrc":"5888:1:14","nodeType":"YulIdentifier","src":"5888:1:14"},{"name":"ONE","nativeSrc":"5891:3:14","nodeType":"YulIdentifier","src":"5891:3:14"}],"functionName":{"name":"lt","nativeSrc":"5885:2:14","nodeType":"YulIdentifier","src":"5885:2:14"},"nativeSrc":"5885:10:14","nodeType":"YulFunctionCall","src":"5885:10:14"},{"arguments":[{"name":"ONE","nativeSrc":"5901:3:14","nodeType":"YulIdentifier","src":"5901:3:14"},{"name":"x","nativeSrc":"5906:1:14","nodeType":"YulIdentifier","src":"5906:1:14"}],"functionName":{"name":"sub","nativeSrc":"5897:3:14","nodeType":"YulIdentifier","src":"5897:3:14"},"nativeSrc":"5897:11:14","nodeType":"YulFunctionCall","src":"5897:11:14"}],"functionName":{"name":"mul","nativeSrc":"5881:3:14","nodeType":"YulIdentifier","src":"5881:3:14"},"nativeSrc":"5881:28:14","nodeType":"YulFunctionCall","src":"5881:28:14"},"variableNames":[{"name":"result","nativeSrc":"5871:6:14","nodeType":"YulIdentifier","src":"5871:6:14"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":2502,"isOffset":false,"isSlot":false,"src":"5891:3:14","valueSize":1},{"declaration":2502,"isOffset":false,"isSlot":false,"src":"5901:3:14","valueSize":1},{"declaration":2785,"isOffset":false,"isSlot":false,"src":"5871:6:14","valueSize":1},{"declaration":2782,"isOffset":false,"isSlot":false,"src":"5888:1:14","valueSize":1},{"declaration":2782,"isOffset":false,"isSlot":false,"src":"5906:1:14","valueSize":1}],"flags":["memory-safe"],"id":2787,"nodeType":"InlineAssembly","src":"5832:87:14"}]},"documentation":{"id":2780,"nodeType":"StructuredDocumentation","src":"5403:272:14","text":" @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\n Useful when computing the complement for values with some level of relative error, as it strips this error and\n prevents intermediate negative values."},"id":2789,"implemented":true,"kind":"function","modifiers":[],"name":"complement","nameLocation":"5689:10:14","nodeType":"FunctionDefinition","parameters":{"id":2783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2782,"mutability":"mutable","name":"x","nameLocation":"5708:1:14","nodeType":"VariableDeclaration","scope":2789,"src":"5700:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2781,"name":"uint256","nodeType":"ElementaryTypeName","src":"5700:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5699:11:14"},"returnParameters":{"id":2786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2785,"mutability":"mutable","name":"result","nameLocation":"5742:6:14","nodeType":"VariableDeclaration","scope":2789,"src":"5734:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2784,"name":"uint256","nodeType":"ElementaryTypeName","src":"5734:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5733:16:14"},"scope":2790,"src":"5680:245:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2791,"src":"239:5688:14","usedErrors":[2499],"usedEvents":[]}],"src":"46:5882:14"},"id":14},"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol":{"ast":{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol","exportedSymbols":{"LogExpMath":[4146]},"id":4147,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2792,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"33:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"LogExpMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2793,"nodeType":"StructuredDocumentation","src":"79:515:15","text":" @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\n Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\n exponentiation and logarithm (where the base is Euler's number).\n All math operations are unchecked in order to save gas.\n @author Fernando Martinelli - @fernandomartinelli\n @author Sergio Yuhjtman     - @sergioyuhjtman\n @author Daniel Fernandez    - @dmf7z"},"fullyImplemented":true,"id":4146,"linearizedBaseContracts":[4146],"name":"LogExpMath","nameLocation":"603:10:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2794,"nodeType":"StructuredDocumentation","src":"620:79:15","text":"@notice This error is thrown when a base is not within an acceptable range."},"errorSelector":"022701e0","id":2796,"name":"BaseOutOfBounds","nameLocation":"710:15:15","nodeType":"ErrorDefinition","parameters":{"id":2795,"nodeType":"ParameterList","parameters":[],"src":"725:2:15"},"src":"704:24:15"},{"documentation":{"id":2797,"nodeType":"StructuredDocumentation","src":"734:83:15","text":"@notice This error is thrown when a exponent is not within an acceptable range."},"errorSelector":"d8317311","id":2799,"name":"ExponentOutOfBounds","nameLocation":"828:19:15","nodeType":"ErrorDefinition","parameters":{"id":2798,"nodeType":"ParameterList","parameters":[],"src":"847:2:15"},"src":"822:28:15"},{"documentation":{"id":2800,"nodeType":"StructuredDocumentation","src":"856:96:15","text":"@notice This error is thrown when the exponent * ln(base) is not within an acceptable range."},"errorSelector":"a2f9f7e3","id":2802,"name":"ProductOutOfBounds","nameLocation":"963:18:15","nodeType":"ErrorDefinition","parameters":{"id":2801,"nodeType":"ParameterList","parameters":[],"src":"981:2:15"},"src":"957:27:15"},{"documentation":{"id":2803,"nodeType":"StructuredDocumentation","src":"990:109:15","text":"@notice This error is thrown when an exponent used in the exp function is not within an acceptable range."},"errorSelector":"d4794efd","id":2805,"name":"InvalidExponent","nameLocation":"1110:15:15","nodeType":"ErrorDefinition","parameters":{"id":2804,"nodeType":"ParameterList","parameters":[],"src":"1125:2:15"},"src":"1104:24:15"},{"documentation":{"id":2806,"nodeType":"StructuredDocumentation","src":"1134:119:15","text":"@notice This error is thrown when a variable or result is not within the acceptable bounds defined in the function."},"errorSelector":"b4120f14","id":2808,"name":"OutOfBounds","nameLocation":"1264:11:15","nodeType":"ErrorDefinition","parameters":{"id":2807,"nodeType":"ParameterList","parameters":[],"src":"1275:2:15"},"src":"1258:20:15"},{"constant":true,"id":2811,"mutability":"constant","name":"ONE_18","nameLocation":"1555:6:15","nodeType":"VariableDeclaration","scope":4146,"src":"1539:29:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2809,"name":"int256","nodeType":"ElementaryTypeName","src":"1539:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"31653138","id":2810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1564:4:15","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"visibility":"internal"},{"constant":true,"id":2814,"mutability":"constant","name":"ONE_20","nameLocation":"1745:6:15","nodeType":"VariableDeclaration","scope":4146,"src":"1729:29:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2812,"name":"int256","nodeType":"ElementaryTypeName","src":"1729:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"31653230","id":2813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1754:4:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000_by_1","typeString":"int_const 100000000000000000000"},"value":"1e20"},"visibility":"internal"},{"constant":true,"id":2817,"mutability":"constant","name":"ONE_36","nameLocation":"1780:6:15","nodeType":"VariableDeclaration","scope":4146,"src":"1764:29:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2815,"name":"int256","nodeType":"ElementaryTypeName","src":"1764:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"31653336","id":2816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1789:4:15","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(29 digits omitted)...0000"},"value":"1e36"},"visibility":"internal"},{"constant":true,"id":2820,"mutability":"constant","name":"MAX_NATURAL_EXPONENT","nameLocation":"2326:20:15","nodeType":"VariableDeclaration","scope":4146,"src":"2310:45:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2818,"name":"int256","nodeType":"ElementaryTypeName","src":"2310:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313330653138","id":2819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:6:15","typeDescriptions":{"typeIdentifier":"t_rational_130000000000000000000_by_1","typeString":"int_const 130000000000000000000"},"value":"130e18"},"visibility":"internal"},{"constant":true,"id":2824,"mutability":"constant","name":"MIN_NATURAL_EXPONENT","nameLocation":"2377:20:15","nodeType":"VariableDeclaration","scope":4146,"src":"2361:45:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2821,"name":"int256","nodeType":"ElementaryTypeName","src":"2361:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"id":2823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2400:6:15","subExpression":{"hexValue":"3431653138","id":2822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2401:5:15","typeDescriptions":{"typeIdentifier":"t_rational_41000000000000000000_by_1","typeString":"int_const 41000000000000000000"},"value":"41e18"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_41000000000000000000_by_1","typeString":"int_const -41000000000000000000"}},"visibility":"internal"},{"constant":true,"id":2829,"mutability":"constant","name":"LN_36_LOWER_BOUND","nameLocation":"2573:17:15","nodeType":"VariableDeclaration","scope":4146,"src":"2557:49:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2825,"name":"int256","nodeType":"ElementaryTypeName","src":"2557:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2828,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":2826,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"2593:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31653137","id":2827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2602:4:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000_by_1","typeString":"int_const 100000000000000000"},"value":"1e17"},"src":"2593:13:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":true,"id":2834,"mutability":"constant","name":"LN_36_UPPER_BOUND","nameLocation":"2628:17:15","nodeType":"VariableDeclaration","scope":4146,"src":"2612:49:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2830,"name":"int256","nodeType":"ElementaryTypeName","src":"2612:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2833,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":2831,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"2648:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31653137","id":2832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2657:4:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000_by_1","typeString":"int_const 100000000000000000"},"value":"1e17"},"src":"2648:13:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":true,"id":2844,"mutability":"constant","name":"MILD_EXPONENT_BOUND","nameLocation":"2685:19:15","nodeType":"VariableDeclaration","scope":4146,"src":"2668:65:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2835,"name":"uint256","nodeType":"ElementaryTypeName","src":"2668:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_rational_28948022309329048855892746252171976963317496166410141009864396001978282409984_by_1","typeString":"int_const 2894...(69 digits omitted)...9984"},"id":2838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2707:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"323534","id":2837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2712:3:15","typeDescriptions":{"typeIdentifier":"t_rational_254_by_1","typeString":"int_const 254"},"value":"254"},"src":"2707:8:15","typeDescriptions":{"typeIdentifier":"t_rational_28948022309329048855892746252171976963317496166410141009864396001978282409984_by_1","typeString":"int_const 2894...(69 digits omitted)...9984"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[{"id":2841,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"2726:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2718:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2839,"name":"uint256","nodeType":"ElementaryTypeName","src":"2718:7:15","typeDescriptions":{}}},"id":2842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2718:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2707:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":true,"id":2847,"mutability":"constant","name":"x0","nameLocation":"2784:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"2768:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2845,"name":"int256","nodeType":"ElementaryTypeName","src":"2768:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313238303030303030303030303030303030303030","id":2846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2789:21:15","typeDescriptions":{"typeIdentifier":"t_rational_128000000000000000000_by_1","typeString":"int_const 128000000000000000000"},"value":"128000000000000000000"},"visibility":"internal"},{"constant":true,"id":2850,"mutability":"constant","name":"a0","nameLocation":"2840:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"2824:77:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2848,"name":"int256","nodeType":"ElementaryTypeName","src":"2824:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"3338383737303834303539393435393530393232323030303030303030303030303030303030303030303030303030303030303030303030","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2845:56:15","typeDescriptions":{"typeIdentifier":"t_rational_38877084059945950922200000000000000000000000000000000000_by_1","typeString":"int_const 3887...(48 digits omitted)...0000"},"value":"38877084059945950922200000000000000000000000000000000000"},"visibility":"internal"},{"constant":true,"id":2853,"mutability":"constant","name":"x1","nameLocation":"2948:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"2932:41:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2851,"name":"int256","nodeType":"ElementaryTypeName","src":"2932:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"3634303030303030303030303030303030303030","id":2852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2953:20:15","typeDescriptions":{"typeIdentifier":"t_rational_64000000000000000000_by_1","typeString":"int_const 64000000000000000000"},"value":"64000000000000000000"},"visibility":"internal"},{"constant":true,"id":2856,"mutability":"constant","name":"a1","nameLocation":"3003:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"2987:49:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2854,"name":"int256","nodeType":"ElementaryTypeName","src":"2987:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"36323335313439303830383131363136383832393130303030303030","id":2855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:28:15","typeDescriptions":{"typeIdentifier":"t_rational_6235149080811616882910000000_by_1","typeString":"int_const 6235149080811616882910000000"},"value":"6235149080811616882910000000"},"visibility":"internal"},{"constant":true,"id":2859,"mutability":"constant","name":"x2","nameLocation":"3112:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3096:43:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2857,"name":"int256","nodeType":"ElementaryTypeName","src":"3096:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"33323030303030303030303030303030303030303030","id":2858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3117:22:15","typeDescriptions":{"typeIdentifier":"t_rational_3200000000000000000000_by_1","typeString":"int_const 3200000000000000000000"},"value":"3200000000000000000000"},"visibility":"internal"},{"constant":true,"id":2862,"mutability":"constant","name":"a2","nameLocation":"3169:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3153:55:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2860,"name":"int256","nodeType":"ElementaryTypeName","src":"3153:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"37383936323936303138323638303639353136313030303030303030303030303030","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3174:34:15","typeDescriptions":{"typeIdentifier":"t_rational_7896296018268069516100000000000000_by_1","typeString":"int_const 7896...(26 digits omitted)...0000"},"value":"7896296018268069516100000000000000"},"visibility":"internal"},{"constant":true,"id":2865,"mutability":"constant","name":"x3","nameLocation":"3241:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3225:43:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2863,"name":"int256","nodeType":"ElementaryTypeName","src":"3225:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"31363030303030303030303030303030303030303030","id":2864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3246:22:15","typeDescriptions":{"typeIdentifier":"t_rational_1600000000000000000000_by_1","typeString":"int_const 1600000000000000000000"},"value":"1600000000000000000000"},"visibility":"internal"},{"constant":true,"id":2868,"mutability":"constant","name":"a3","nameLocation":"3298:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3282:48:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2866,"name":"int256","nodeType":"ElementaryTypeName","src":"3282:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"383838363131303532303530373837323633363736303030303030","id":2867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3303:27:15","typeDescriptions":{"typeIdentifier":"t_rational_888611052050787263676000000_by_1","typeString":"int_const 888611052050787263676000000"},"value":"888611052050787263676000000"},"visibility":"internal"},{"constant":true,"id":2871,"mutability":"constant","name":"x4","nameLocation":"3363:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3347:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2869,"name":"int256","nodeType":"ElementaryTypeName","src":"3347:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"383030303030303030303030303030303030303030","id":2870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3368:21:15","typeDescriptions":{"typeIdentifier":"t_rational_800000000000000000000_by_1","typeString":"int_const 800000000000000000000"},"value":"800000000000000000000"},"visibility":"internal"},{"constant":true,"id":2874,"mutability":"constant","name":"a4","nameLocation":"3419:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3403:45:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2872,"name":"int256","nodeType":"ElementaryTypeName","src":"3403:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"323938303935373938373034313732383237343734303030","id":2873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3424:24:15","typeDescriptions":{"typeIdentifier":"t_rational_298095798704172827474000_by_1","typeString":"int_const 298095798704172827474000"},"value":"298095798704172827474000"},"visibility":"internal"},{"constant":true,"id":2877,"mutability":"constant","name":"x5","nameLocation":"3481:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3465:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2875,"name":"int256","nodeType":"ElementaryTypeName","src":"3465:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"343030303030303030303030303030303030303030","id":2876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3486:21:15","typeDescriptions":{"typeIdentifier":"t_rational_400000000000000000000_by_1","typeString":"int_const 400000000000000000000"},"value":"400000000000000000000"},"visibility":"internal"},{"constant":true,"id":2880,"mutability":"constant","name":"a5","nameLocation":"3537:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3521:43:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2878,"name":"int256","nodeType":"ElementaryTypeName","src":"3521:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"35343539383135303033333134343233393037383130","id":2879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3542:22:15","typeDescriptions":{"typeIdentifier":"t_rational_5459815003314423907810_by_1","typeString":"int_const 5459815003314423907810"},"value":"5459815003314423907810"},"visibility":"internal"},{"constant":true,"id":2883,"mutability":"constant","name":"x6","nameLocation":"3597:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3581:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2881,"name":"int256","nodeType":"ElementaryTypeName","src":"3581:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"323030303030303030303030303030303030303030","id":2882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3602:21:15","typeDescriptions":{"typeIdentifier":"t_rational_200000000000000000000_by_1","typeString":"int_const 200000000000000000000"},"value":"200000000000000000000"},"visibility":"internal"},{"constant":true,"id":2886,"mutability":"constant","name":"a6","nameLocation":"3653:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3637:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2884,"name":"int256","nodeType":"ElementaryTypeName","src":"3637:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"373338393035363039383933303635303232373233","id":2885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3658:21:15","typeDescriptions":{"typeIdentifier":"t_rational_738905609893065022723_by_1","typeString":"int_const 738905609893065022723"},"value":"738905609893065022723"},"visibility":"internal"},{"constant":true,"id":2889,"mutability":"constant","name":"x7","nameLocation":"3712:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3696:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2887,"name":"int256","nodeType":"ElementaryTypeName","src":"3696:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313030303030303030303030303030303030303030","id":2888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3717:21:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000_by_1","typeString":"int_const 100000000000000000000"},"value":"100000000000000000000"},"visibility":"internal"},{"constant":true,"id":2892,"mutability":"constant","name":"a7","nameLocation":"3768:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3752:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2890,"name":"int256","nodeType":"ElementaryTypeName","src":"3752:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"323731383238313832383435393034353233353336","id":2891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3773:21:15","typeDescriptions":{"typeIdentifier":"t_rational_271828182845904523536_by_1","typeString":"int_const 271828182845904523536"},"value":"271828182845904523536"},"visibility":"internal"},{"constant":true,"id":2895,"mutability":"constant","name":"x8","nameLocation":"3827:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3811:41:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2893,"name":"int256","nodeType":"ElementaryTypeName","src":"3811:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"3530303030303030303030303030303030303030","id":2894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3832:20:15","typeDescriptions":{"typeIdentifier":"t_rational_50000000000000000000_by_1","typeString":"int_const 50000000000000000000"},"value":"50000000000000000000"},"visibility":"internal"},{"constant":true,"id":2898,"mutability":"constant","name":"a8","nameLocation":"3883:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3867:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2896,"name":"int256","nodeType":"ElementaryTypeName","src":"3867:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313634383732313237303730303132383134363835","id":2897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3888:21:15","typeDescriptions":{"typeIdentifier":"t_rational_164872127070012814685_by_1","typeString":"int_const 164872127070012814685"},"value":"164872127070012814685"},"visibility":"internal"},{"constant":true,"id":2901,"mutability":"constant","name":"x9","nameLocation":"3942:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3926:41:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2899,"name":"int256","nodeType":"ElementaryTypeName","src":"3926:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"3235303030303030303030303030303030303030","id":2900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3947:20:15","typeDescriptions":{"typeIdentifier":"t_rational_25000000000000000000_by_1","typeString":"int_const 25000000000000000000"},"value":"25000000000000000000"},"visibility":"internal"},{"constant":true,"id":2904,"mutability":"constant","name":"a9","nameLocation":"3998:2:15","nodeType":"VariableDeclaration","scope":4146,"src":"3982:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2902,"name":"int256","nodeType":"ElementaryTypeName","src":"3982:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313238343032353431363638373734313438343037","id":2903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4003:21:15","typeDescriptions":{"typeIdentifier":"t_rational_128402541668774148407_by_1","typeString":"int_const 128402541668774148407"},"value":"128402541668774148407"},"visibility":"internal"},{"constant":true,"id":2907,"mutability":"constant","name":"x10","nameLocation":"4057:3:15","nodeType":"VariableDeclaration","scope":4146,"src":"4041:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2905,"name":"int256","nodeType":"ElementaryTypeName","src":"4041:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"3132353030303030303030303030303030303030","id":2906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4063:20:15","typeDescriptions":{"typeIdentifier":"t_rational_12500000000000000000_by_1","typeString":"int_const 12500000000000000000"},"value":"12500000000000000000"},"visibility":"internal"},{"constant":true,"id":2910,"mutability":"constant","name":"a10","nameLocation":"4114:3:15","nodeType":"VariableDeclaration","scope":4146,"src":"4098:43:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2908,"name":"int256","nodeType":"ElementaryTypeName","src":"4098:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313133333134383435333036363832363331363833","id":2909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4120:21:15","typeDescriptions":{"typeIdentifier":"t_rational_113314845306682631683_by_1","typeString":"int_const 113314845306682631683"},"value":"113314845306682631683"},"visibility":"internal"},{"constant":true,"id":2913,"mutability":"constant","name":"x11","nameLocation":"4175:3:15","nodeType":"VariableDeclaration","scope":4146,"src":"4159:41:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2911,"name":"int256","nodeType":"ElementaryTypeName","src":"4159:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"36323530303030303030303030303030303030","id":2912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4181:19:15","typeDescriptions":{"typeIdentifier":"t_rational_6250000000000000000_by_1","typeString":"int_const 6250000000000000000"},"value":"6250000000000000000"},"visibility":"internal"},{"constant":true,"id":2916,"mutability":"constant","name":"a11","nameLocation":"4231:3:15","nodeType":"VariableDeclaration","scope":4146,"src":"4215:43:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2914,"name":"int256","nodeType":"ElementaryTypeName","src":"4215:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"hexValue":"313036343439343435383931373835393432393536","id":2915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4237:21:15","typeDescriptions":{"typeIdentifier":"t_rational_106449445891785942956_by_1","typeString":"int_const 106449445891785942956"},"value":"106449445891785942956"},"visibility":"internal"},{"body":{"id":3048,"nodeType":"Block","src":"4563:2233:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2926,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2921,"src":"4577:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4582:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4577:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2935,"nodeType":"IfStatement","src":"4573:131:15","trueBody":{"id":2934,"nodeType":"Block","src":"4585:119:15","statements":[{"expression":{"arguments":[{"id":2931,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"4686:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4678:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2929,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:15","typeDescriptions":{}}},"id":2932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4678:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2925,"id":2933,"nodeType":"Return","src":"4671:22:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2936,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"4718:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4723:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4718:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2942,"nodeType":"IfStatement","src":"4714:45:15","trueBody":{"id":2941,"nodeType":"Block","src":"4726:33:15","statements":[{"expression":{"hexValue":"30","id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4747:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2925,"id":2940,"nodeType":"Return","src":"4740:8:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2943,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"5133:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5138:3:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"5133:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5145:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5133:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2952,"nodeType":"IfStatement","src":"5129:68:15","trueBody":{"id":2951,"nodeType":"Block","src":"5148:49:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2948,"name":"BaseOutOfBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2796,"src":"5169:15:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5169:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2950,"nodeType":"RevertStatement","src":"5162:24:15"}]}},{"assignments":[2954],"declarations":[{"constant":false,"id":2954,"mutability":"mutable","name":"x_int256","nameLocation":"5213:8:15","nodeType":"VariableDeclaration","scope":3048,"src":"5206:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2953,"name":"int256","nodeType":"ElementaryTypeName","src":"5206:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2959,"initialValue":{"arguments":[{"id":2957,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"5231:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5224:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2955,"name":"int256","nodeType":"ElementaryTypeName","src":"5224:6:15","typeDescriptions":{}}},"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5224:9:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"5206:27:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2960,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2921,"src":"5591:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2961,"name":"MILD_EXPONENT_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"5596:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5591:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2967,"nodeType":"IfStatement","src":"5587:83:15","trueBody":{"id":2966,"nodeType":"Block","src":"5617:53:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2963,"name":"ExponentOutOfBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2799,"src":"5638:19:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5638:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2965,"nodeType":"RevertStatement","src":"5631:28:15"}]}},{"assignments":[2969],"declarations":[{"constant":false,"id":2969,"mutability":"mutable","name":"y_int256","nameLocation":"5686:8:15","nodeType":"VariableDeclaration","scope":3048,"src":"5679:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2968,"name":"int256","nodeType":"ElementaryTypeName","src":"5679:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2974,"initialValue":{"arguments":[{"id":2972,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2921,"src":"5704:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5697:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2970,"name":"int256","nodeType":"ElementaryTypeName","src":"5697:6:15","typeDescriptions":{}}},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5697:9:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"5679:27:15"},{"assignments":[2976],"declarations":[{"constant":false,"id":2976,"mutability":"mutable","name":"logx_times_y","nameLocation":"5724:12:15","nodeType":"VariableDeclaration","scope":3048,"src":"5717:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2975,"name":"int256","nodeType":"ElementaryTypeName","src":"5717:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2977,"nodeType":"VariableDeclarationStatement","src":"5717:19:15"},{"id":3026,"nodeType":"UncheckedBlock","src":"5746:790:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2978,"name":"LN_36_LOWER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"5774:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2979,"name":"x_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"5794:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"5774:28:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2981,"name":"x_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"5806:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2982,"name":"LN_36_UPPER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"5817:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"5806:28:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5774:60:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3020,"nodeType":"Block","src":"6418:72:15","statements":[{"expression":{"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3012,"name":"logx_times_y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"6436:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3014,"name":"x_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"6455:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3013,"name":"_ln","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3990,"src":"6451:3:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6451:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3016,"name":"y_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"6467:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6451:24:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6436:39:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3019,"nodeType":"ExpressionStatement","src":"6436:39:15"}]},"id":3021,"nodeType":"IfStatement","src":"5770:720:15","trueBody":{"id":3011,"nodeType":"Block","src":"5836:576:15","statements":[{"assignments":[2986],"declarations":[{"constant":false,"id":2986,"mutability":"mutable","name":"ln_36_x","nameLocation":"5861:7:15","nodeType":"VariableDeclaration","scope":3011,"src":"5854:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2985,"name":"int256","nodeType":"ElementaryTypeName","src":"5854:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2990,"initialValue":{"arguments":[{"id":2988,"name":"x_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"5878:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2987,"name":"_ln_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4145,"src":"5871:6:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5871:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"5854:33:15"},{"expression":{"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2991,"name":"logx_times_y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"6308:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2992,"name":"ln_36_x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"6325:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2993,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"6335:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6325:16:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2995,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6324:18:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2996,"name":"y_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"6345:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6324:29:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2998,"name":"ln_36_x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"6358:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2999,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"6368:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6358:16:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3001,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6357:18:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3002,"name":"y_int256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"6378:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6357:29:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3004,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6356:31:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3005,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"6390:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6356:40:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6324:72:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3008,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6323:74:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6308:89:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3010,"nodeType":"ExpressionStatement","src":"6308:89:15"}]}},{"expression":{"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3022,"name":"logx_times_y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"6503:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"id":3023,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"6519:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6503:22:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3025,"nodeType":"ExpressionStatement","src":"6503:22:15"}]},{"condition":{"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6613:79:15","subExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3027,"name":"MIN_NATURAL_EXPONENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"6615:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3028,"name":"logx_times_y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"6639:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6615:36:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3030,"name":"logx_times_y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"6655:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3031,"name":"MAX_NATURAL_EXPONENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"6671:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"6655:36:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6615:76:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3034,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6614:78:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3040,"nodeType":"IfStatement","src":"6609:137:15","trueBody":{"id":3039,"nodeType":"Block","src":"6694:52:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3036,"name":"ProductOutOfBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"6715:18:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6715:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3038,"nodeType":"RevertStatement","src":"6708:27:15"}]}},{"expression":{"arguments":[{"arguments":[{"id":3044,"name":"logx_times_y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"6775:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3043,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"6771:3:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6771:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6763:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3041,"name":"uint256","nodeType":"ElementaryTypeName","src":"6763:7:15","typeDescriptions":{}}},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6763:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2925,"id":3047,"nodeType":"Return","src":"6756:33:15"}]},"documentation":{"id":2917,"nodeType":"StructuredDocumentation","src":"4277:214:15","text":" @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\n Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`."},"id":3049,"implemented":true,"kind":"function","modifiers":[],"name":"pow","nameLocation":"4505:3:15","nodeType":"FunctionDefinition","parameters":{"id":2922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2919,"mutability":"mutable","name":"x","nameLocation":"4517:1:15","nodeType":"VariableDeclaration","scope":3049,"src":"4509:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2918,"name":"uint256","nodeType":"ElementaryTypeName","src":"4509:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2921,"mutability":"mutable","name":"y","nameLocation":"4528:1:15","nodeType":"VariableDeclaration","scope":3049,"src":"4520:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2920,"name":"uint256","nodeType":"ElementaryTypeName","src":"4520:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4508:22:15"},"returnParameters":{"id":2925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2924,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3049,"src":"4554:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2923,"name":"uint256","nodeType":"ElementaryTypeName","src":"4554:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4553:9:15"},"scope":4146,"src":"4496:2300:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3495,"nodeType":"Block","src":"7064:6082:15","statements":[{"condition":{"id":3065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7078:57:15","subExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3057,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"7080:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3058,"name":"MIN_NATURAL_EXPONENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"7085:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"7080:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3060,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"7109:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3061,"name":"MAX_NATURAL_EXPONENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"7114:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"7109:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7080:54:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3064,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7079:56:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3070,"nodeType":"IfStatement","src":"7074:112:15","trueBody":{"id":3069,"nodeType":"Block","src":"7137:49:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3066,"name":"InvalidExponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"7158:15:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7158:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3068,"nodeType":"RevertStatement","src":"7151:24:15"}]}},{"assignments":[3072],"declarations":[{"constant":false,"id":3072,"mutability":"mutable","name":"negativeExponent","nameLocation":"7277:16:15","nodeType":"VariableDeclaration","scope":3495,"src":"7272:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3071,"name":"bool","nodeType":"ElementaryTypeName","src":"7272:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3074,"initialValue":{"hexValue":"66616c7365","id":3073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7296:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"7272:29:15"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3075,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"7316:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7320:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7316:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3089,"nodeType":"IfStatement","src":"7312:417:15","trueBody":{"id":3088,"nodeType":"Block","src":"7323:406:15","statements":[{"id":3083,"nodeType":"UncheckedBlock","src":"7633:49:15","statements":[{"expression":{"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3078,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"7661:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"7665:2:15","subExpression":{"id":3079,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"7666:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"7661:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3082,"nodeType":"ExpressionStatement","src":"7661:6:15"}]},{"expression":{"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3084,"name":"negativeExponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"7695:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7714:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7695:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3087,"nodeType":"ExpressionStatement","src":"7695:23:15"}]}},{"assignments":[3091],"declarations":[{"constant":false,"id":3091,"mutability":"mutable","name":"firstAN","nameLocation":"9037:7:15","nodeType":"VariableDeclaration","scope":3495,"src":"9030:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3090,"name":"int256","nodeType":"ElementaryTypeName","src":"9030:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3092,"nodeType":"VariableDeclarationStatement","src":"9030:14:15"},{"id":3128,"nodeType":"UncheckedBlock","src":"9054:457:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3093,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"9082:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3094,"name":"x0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"9087:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9082:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3105,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"9171:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3106,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"9176:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9171:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3121,"nodeType":"Block","src":"9256:74:15","statements":[{"expression":{"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3117,"name":"firstAN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"9274:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":3118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9284:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9274:11:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3120,"nodeType":"ExpressionStatement","src":"9274:11:15"}]},"id":3122,"nodeType":"IfStatement","src":"9167:163:15","trueBody":{"id":3116,"nodeType":"Block","src":"9180:70:15","statements":[{"expression":{"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3108,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"9198:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3109,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"9203:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9198:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3111,"nodeType":"ExpressionStatement","src":"9198:7:15"},{"expression":{"id":3114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3112,"name":"firstAN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"9223:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3113,"name":"a1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"9233:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9223:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3115,"nodeType":"ExpressionStatement","src":"9223:12:15"}]}},"id":3123,"nodeType":"IfStatement","src":"9078:252:15","trueBody":{"id":3104,"nodeType":"Block","src":"9091:70:15","statements":[{"expression":{"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3096,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"9109:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3097,"name":"x0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"9114:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9109:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3099,"nodeType":"ExpressionStatement","src":"9109:7:15"},{"expression":{"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3100,"name":"firstAN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"9134:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3101,"name":"a0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"9144:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9134:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3103,"nodeType":"ExpressionStatement","src":"9134:12:15"}]}},{"expression":{"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3124,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"9492:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"313030","id":3125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9497:3:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"9492:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3127,"nodeType":"ExpressionStatement","src":"9492:8:15"}]},{"assignments":[3130],"declarations":[{"constant":false,"id":3130,"mutability":"mutable","name":"product","nameLocation":"9730:7:15","nodeType":"VariableDeclaration","scope":3495,"src":"9723:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3129,"name":"int256","nodeType":"ElementaryTypeName","src":"9723:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3132,"initialValue":{"id":3131,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"9740:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"9723:23:15"},{"id":3277,"nodeType":"UncheckedBlock","src":"9757:957:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3133,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"9785:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3134,"name":"x2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"9790:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9785:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3150,"nodeType":"IfStatement","src":"9781:104:15","trueBody":{"id":3149,"nodeType":"Block","src":"9794:91:15","statements":[{"expression":{"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3136,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"9812:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3137,"name":"x2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"9817:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9812:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3139,"nodeType":"ExpressionStatement","src":"9812:7:15"},{"expression":{"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3140,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"9837:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3141,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"9848:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3142,"name":"a2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"9858:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9848:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3144,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9847:14:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3145,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"9864:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9847:23:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9837:33:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3148,"nodeType":"ExpressionStatement","src":"9837:33:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3151,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"9902:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3152,"name":"x3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"9907:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9902:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3168,"nodeType":"IfStatement","src":"9898:104:15","trueBody":{"id":3167,"nodeType":"Block","src":"9911:91:15","statements":[{"expression":{"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3154,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"9929:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3155,"name":"x3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"9934:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9929:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3157,"nodeType":"ExpressionStatement","src":"9929:7:15"},{"expression":{"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3158,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"9954:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3159,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"9965:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3160,"name":"a3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"9975:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9965:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3162,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9964:14:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3163,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"9981:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9964:23:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"9954:33:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3166,"nodeType":"ExpressionStatement","src":"9954:33:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3169,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"10019:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3170,"name":"x4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"10024:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10019:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3186,"nodeType":"IfStatement","src":"10015:104:15","trueBody":{"id":3185,"nodeType":"Block","src":"10028:91:15","statements":[{"expression":{"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3172,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"10046:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3173,"name":"x4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"10051:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10046:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3175,"nodeType":"ExpressionStatement","src":"10046:7:15"},{"expression":{"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3176,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"10071:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3177,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"10082:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3178,"name":"a4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"10092:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10082:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3180,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10081:14:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3181,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10098:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10081:23:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10071:33:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3184,"nodeType":"ExpressionStatement","src":"10071:33:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3187,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"10136:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3188,"name":"x5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"10141:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10136:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3204,"nodeType":"IfStatement","src":"10132:104:15","trueBody":{"id":3203,"nodeType":"Block","src":"10145:91:15","statements":[{"expression":{"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3190,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"10163:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3191,"name":"x5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"10168:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10163:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3193,"nodeType":"ExpressionStatement","src":"10163:7:15"},{"expression":{"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3194,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"10188:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3195,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"10199:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3196,"name":"a5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"10209:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10199:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3198,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10198:14:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3199,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10215:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10198:23:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10188:33:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3202,"nodeType":"ExpressionStatement","src":"10188:33:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3205,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"10253:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3206,"name":"x6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"10258:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10253:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3222,"nodeType":"IfStatement","src":"10249:104:15","trueBody":{"id":3221,"nodeType":"Block","src":"10262:91:15","statements":[{"expression":{"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3208,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"10280:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3209,"name":"x6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"10285:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10280:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3211,"nodeType":"ExpressionStatement","src":"10280:7:15"},{"expression":{"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3212,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"10305:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3213,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"10316:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3214,"name":"a6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"10326:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10316:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3216,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10315:14:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3217,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10332:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10315:23:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10305:33:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3220,"nodeType":"ExpressionStatement","src":"10305:33:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3223,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"10370:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3224,"name":"x7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"10375:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10370:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3240,"nodeType":"IfStatement","src":"10366:104:15","trueBody":{"id":3239,"nodeType":"Block","src":"10379:91:15","statements":[{"expression":{"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3226,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"10397:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3227,"name":"x7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"10402:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10397:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3229,"nodeType":"ExpressionStatement","src":"10397:7:15"},{"expression":{"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3230,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"10422:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3231,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"10433:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3232,"name":"a7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"10443:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10433:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3234,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10432:14:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3235,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10449:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10432:23:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10422:33:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3238,"nodeType":"ExpressionStatement","src":"10422:33:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3241,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"10487:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3242,"name":"x8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2895,"src":"10492:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10487:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3258,"nodeType":"IfStatement","src":"10483:104:15","trueBody":{"id":3257,"nodeType":"Block","src":"10496:91:15","statements":[{"expression":{"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3244,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"10514:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3245,"name":"x8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2895,"src":"10519:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10514:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3247,"nodeType":"ExpressionStatement","src":"10514:7:15"},{"expression":{"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3248,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"10539:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3249,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"10550:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3250,"name":"a8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"10560:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10550:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3252,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10549:14:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3253,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10566:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10549:23:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10539:33:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3256,"nodeType":"ExpressionStatement","src":"10539:33:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3259,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"10604:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3260,"name":"x9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"10609:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10604:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3276,"nodeType":"IfStatement","src":"10600:104:15","trueBody":{"id":3275,"nodeType":"Block","src":"10613:91:15","statements":[{"expression":{"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3262,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"10631:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3263,"name":"x9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"10636:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10631:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3265,"nodeType":"ExpressionStatement","src":"10631:7:15"},{"expression":{"id":3273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3266,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"10656:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3267,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"10667:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3268,"name":"a9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"10677:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10667:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3270,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10666:14:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3271,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"10683:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10666:23:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"10656:33:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3274,"nodeType":"ExpressionStatement","src":"10656:33:15"}]}}]},{"assignments":[3279],"declarations":[{"constant":false,"id":3279,"mutability":"mutable","name":"seriesSum","nameLocation":"11025:9:15","nodeType":"VariableDeclaration","scope":3495,"src":"11018:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3278,"name":"int256","nodeType":"ElementaryTypeName","src":"11018:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3281,"initialValue":{"id":3280,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11037:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"11018:25:15"},{"assignments":[3283],"declarations":[{"constant":false,"id":3283,"mutability":"mutable","name":"term","nameLocation":"11115:4:15","nodeType":"VariableDeclaration","scope":3495,"src":"11108:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3282,"name":"int256","nodeType":"ElementaryTypeName","src":"11108:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3284,"nodeType":"VariableDeclarationStatement","src":"11108:11:15"},{"expression":{"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3285,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11228:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3286,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"11235:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11228:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3288,"nodeType":"ExpressionStatement","src":"11228:8:15"},{"id":3494,"nodeType":"UncheckedBlock","src":"11246:1894:15","statements":[{"expression":{"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3289,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"11270:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3290,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11283:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11270:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3292,"nodeType":"ExpressionStatement","src":"11270:17:15"},{"expression":{"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3293,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11536:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3294,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11545:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3295,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"11552:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11545:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3297,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11544:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3298,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11557:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11544:19:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3300,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11543:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11567:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11543:25:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11536:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3304,"nodeType":"ExpressionStatement","src":"11536:32:15"},{"expression":{"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3305,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"11582:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3306,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11595:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11582:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3308,"nodeType":"ExpressionStatement","src":"11582:17:15"},{"expression":{"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3309,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11614:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3310,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11623:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3311,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"11630:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11623:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3313,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11622:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3314,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11635:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11622:19:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3316,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11621:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"33","id":3317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11645:1:15","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"11621:25:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11614:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3320,"nodeType":"ExpressionStatement","src":"11614:32:15"},{"expression":{"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3321,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"11660:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3322,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11673:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11660:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3324,"nodeType":"ExpressionStatement","src":"11660:17:15"},{"expression":{"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3325,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11692:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3326,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11701:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3327,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"11708:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11701:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3329,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11700:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3330,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11713:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11700:19:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3332,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11699:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"34","id":3333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11723:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11699:25:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11692:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3336,"nodeType":"ExpressionStatement","src":"11692:32:15"},{"expression":{"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3337,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"11738:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3338,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11751:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11738:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3340,"nodeType":"ExpressionStatement","src":"11738:17:15"},{"expression":{"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3341,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11770:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3342,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11779:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3343,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"11786:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11779:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3345,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11778:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3346,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11791:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11778:19:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3348,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11777:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"35","id":3349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11801:1:15","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"11777:25:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11770:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3352,"nodeType":"ExpressionStatement","src":"11770:32:15"},{"expression":{"id":3355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3353,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"11816:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3354,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11829:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11816:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3356,"nodeType":"ExpressionStatement","src":"11816:17:15"},{"expression":{"id":3367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3357,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11848:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3358,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11857:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3359,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"11864:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11857:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3361,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11856:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3362,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11869:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11856:19:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3364,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11855:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"36","id":3365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11879:1:15","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"11855:25:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11848:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3368,"nodeType":"ExpressionStatement","src":"11848:32:15"},{"expression":{"id":3371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3369,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"11894:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3370,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11907:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11894:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3372,"nodeType":"ExpressionStatement","src":"11894:17:15"},{"expression":{"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3373,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11926:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3374,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11935:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3375,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"11942:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11935:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3377,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11934:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3378,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"11947:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11934:19:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3380,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11933:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"37","id":3381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:1:15","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"11933:25:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11926:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3384,"nodeType":"ExpressionStatement","src":"11926:32:15"},{"expression":{"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3385,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"11972:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3386,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"11985:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11972:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3388,"nodeType":"ExpressionStatement","src":"11972:17:15"},{"expression":{"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3389,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12004:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3390,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12013:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3391,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"12020:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12013:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3393,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12012:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3394,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"12025:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12012:19:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3396,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12011:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"38","id":3397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12035:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12011:25:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12004:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3400,"nodeType":"ExpressionStatement","src":"12004:32:15"},{"expression":{"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3401,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"12050:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3402,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12063:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12050:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3404,"nodeType":"ExpressionStatement","src":"12050:17:15"},{"expression":{"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3405,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12082:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3406,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12091:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3407,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"12098:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12091:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3409,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12090:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3410,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"12103:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12090:19:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3412,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12089:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"39","id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12113:1:15","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"src":"12089:25:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12082:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3416,"nodeType":"ExpressionStatement","src":"12082:32:15"},{"expression":{"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3417,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"12128:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3418,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12141:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12128:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3420,"nodeType":"ExpressionStatement","src":"12128:17:15"},{"expression":{"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3421,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12160:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3422,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12169:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3423,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"12176:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12169:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3425,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12168:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3426,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"12181:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12168:19:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3428,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12167:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130","id":3429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12191:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"12167:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12160:33:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3432,"nodeType":"ExpressionStatement","src":"12160:33:15"},{"expression":{"id":3435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3433,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"12207:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3434,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12220:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12207:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3436,"nodeType":"ExpressionStatement","src":"12207:17:15"},{"expression":{"id":3447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3437,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12239:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3438,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12248:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3439,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"12255:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12248:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3441,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12247:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3442,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"12260:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12247:19:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3444,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12246:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3131","id":3445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12270:2:15","typeDescriptions":{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},"value":"11"},"src":"12246:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12239:33:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3448,"nodeType":"ExpressionStatement","src":"12239:33:15"},{"expression":{"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3449,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"12286:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3450,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12299:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12286:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3452,"nodeType":"ExpressionStatement","src":"12286:17:15"},{"expression":{"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3453,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12318:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3454,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12327:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3455,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"12334:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12327:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3457,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12326:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3458,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"12339:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12326:19:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3460,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12325:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3132","id":3461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12349:2:15","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"12325:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12318:33:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3464,"nodeType":"ExpressionStatement","src":"12318:33:15"},{"expression":{"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3465,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"12365:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3466,"name":"term","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"12378:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12365:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3468,"nodeType":"ExpressionStatement","src":"12365:17:15"},{"assignments":[3470],"declarations":[{"constant":false,"id":3470,"mutability":"mutable","name":"result","nameLocation":"12914:6:15","nodeType":"VariableDeclaration","scope":3494,"src":"12907:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3469,"name":"int256","nodeType":"ElementaryTypeName","src":"12907:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3483,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3471,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"12926:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3472,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"12936:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12926:19:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3474,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12925:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3475,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"12949:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12925:30:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3477,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12924:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3478,"name":"firstAN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"12959:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12924:42:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3480,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12923:44:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":3481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12970:3:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"12923:50:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"12907:66:15"},{"expression":{"condition":{"id":3484,"name":"negativeExponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"13075:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3491,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"13123:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13075:54:15","trueExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":3485,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"13095:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3486,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"13104:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13095:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3488,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"13094:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3489,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"13114:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13094:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3056,"id":3493,"nodeType":"Return","src":"13068:61:15"}]}]},"documentation":{"id":3050,"nodeType":"StructuredDocumentation","src":"6802:203:15","text":" @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\n Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`."},"id":3496,"implemented":true,"kind":"function","modifiers":[],"name":"exp","nameLocation":"7019:3:15","nodeType":"FunctionDefinition","parameters":{"id":3053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3052,"mutability":"mutable","name":"x","nameLocation":"7030:1:15","nodeType":"VariableDeclaration","scope":3496,"src":"7023:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3051,"name":"int256","nodeType":"ElementaryTypeName","src":"7023:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7022:10:15"},"returnParameters":{"id":3056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3496,"src":"7056:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3054,"name":"int256","nodeType":"ElementaryTypeName","src":"7056:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7055:8:15"},"scope":4146,"src":"7010:6136:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3569,"nodeType":"Block","src":"13315:861:15","statements":[{"assignments":[3507],"declarations":[{"constant":false,"id":3507,"mutability":"mutable","name":"logBase","nameLocation":"13552:7:15","nodeType":"VariableDeclaration","scope":3569,"src":"13545:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3506,"name":"int256","nodeType":"ElementaryTypeName","src":"13545:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3508,"nodeType":"VariableDeclarationStatement","src":"13545:14:15"},{"id":3533,"nodeType":"UncheckedBlock","src":"13569:214:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3509,"name":"LN_36_LOWER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"13597:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3510,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"13617:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13597:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3512,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"13625:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3513,"name":"LN_36_UPPER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"13632:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13625:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13597:52:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3531,"nodeType":"Block","src":"13712:61:15","statements":[{"expression":{"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3523,"name":"logBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"13730:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3525,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"13744:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3524,"name":"_ln","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3990,"src":"13740:3:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13740:9:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3527,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"13752:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13740:18:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13730:28:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3530,"nodeType":"ExpressionStatement","src":"13730:28:15"}]},"id":3532,"nodeType":"IfStatement","src":"13593:180:15","trueBody":{"id":3522,"nodeType":"Block","src":"13651:55:15","statements":[{"expression":{"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3516,"name":"logBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"13669:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3518,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"13686:4:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3517,"name":"_ln_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4145,"src":"13679:6:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13679:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13669:22:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3521,"nodeType":"ExpressionStatement","src":"13669:22:15"}]}}]},{"assignments":[3535],"declarations":[{"constant":false,"id":3535,"mutability":"mutable","name":"logArg","nameLocation":"13800:6:15","nodeType":"VariableDeclaration","scope":3569,"src":"13793:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3534,"name":"int256","nodeType":"ElementaryTypeName","src":"13793:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3536,"nodeType":"VariableDeclarationStatement","src":"13793:13:15"},{"id":3568,"nodeType":"UncheckedBlock","src":"13816:354:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3537,"name":"LN_36_LOWER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"13844:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3538,"name":"arg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"13864:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13844:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3540,"name":"arg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"13871:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3541,"name":"LN_36_UPPER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"13877:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13871:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13844:50:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3559,"nodeType":"Block","src":"13955:59:15","statements":[{"expression":{"id":3557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3551,"name":"logArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"13973:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3553,"name":"arg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"13986:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3552,"name":"_ln","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3990,"src":"13982:3:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":3554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13982:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3555,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"13993:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13982:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13973:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3558,"nodeType":"ExpressionStatement","src":"13973:26:15"}]},"id":3560,"nodeType":"IfStatement","src":"13840:174:15","trueBody":{"id":3550,"nodeType":"Block","src":"13896:53:15","statements":[{"expression":{"id":3548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3544,"name":"logArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"13914:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3546,"name":"arg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"13930:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3545,"name":"_ln_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4145,"src":"13923:6:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13923:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13914:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3549,"nodeType":"ExpressionStatement","src":"13914:20:15"}]}},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3561,"name":"logArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"14133:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3562,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"14142:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14133:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3564,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14132:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3565,"name":"logBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"14152:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14132:27:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3505,"id":3567,"nodeType":"Return","src":"14125:34:15"}]}]},"documentation":{"id":3497,"nodeType":"StructuredDocumentation","src":"13152:89:15","text":"@dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument."},"id":3570,"implemented":true,"kind":"function","modifiers":[],"name":"log","nameLocation":"13255:3:15","nodeType":"FunctionDefinition","parameters":{"id":3502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3499,"mutability":"mutable","name":"arg","nameLocation":"13266:3:15","nodeType":"VariableDeclaration","scope":3570,"src":"13259:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3498,"name":"int256","nodeType":"ElementaryTypeName","src":"13259:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3501,"mutability":"mutable","name":"base","nameLocation":"13278:4:15","nodeType":"VariableDeclaration","scope":3570,"src":"13271:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3500,"name":"int256","nodeType":"ElementaryTypeName","src":"13271:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"13258:25:15"},"returnParameters":{"id":3505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3504,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3570,"src":"13307:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3503,"name":"int256","nodeType":"ElementaryTypeName","src":"13307:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"13306:8:15"},"scope":4146,"src":"13246:930:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3607,"nodeType":"Block","src":"14319:353:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3578,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3573,"src":"14416:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30","id":3579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14421:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14416:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3585,"nodeType":"IfStatement","src":"14412:57:15","trueBody":{"id":3584,"nodeType":"Block","src":"14424:45:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3581,"name":"OutOfBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"14445:11:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14445:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3583,"nodeType":"RevertStatement","src":"14438:20:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3586,"name":"LN_36_LOWER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"14482:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3587,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3573,"src":"14502:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14482:21:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3589,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3573,"src":"14507:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3590,"name":"LN_36_UPPER_BOUND","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"14511:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14507:21:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14482:46:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3605,"nodeType":"Block","src":"14628:38:15","statements":[{"expression":{"arguments":[{"id":3602,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3573,"src":"14653:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3601,"name":"_ln","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3990,"src":"14649:3:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14649:6:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3577,"id":3604,"nodeType":"Return","src":"14642:13:15"}]},"id":3606,"nodeType":"IfStatement","src":"14478:188:15","trueBody":{"id":3600,"nodeType":"Block","src":"14530:92:15","statements":[{"id":3599,"nodeType":"UncheckedBlock","src":"14544:68:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3594,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3573,"src":"14586:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3593,"name":"_ln_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4145,"src":"14579:6:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_int256_$","typeString":"function (int256) pure returns (int256)"}},"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14579:9:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3596,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"14591:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14579:18:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3577,"id":3598,"nodeType":"Return","src":"14572:25:15"}]}]}}]},"documentation":{"id":3571,"nodeType":"StructuredDocumentation","src":"14182:79:15","text":"@dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument."},"id":3608,"implemented":true,"kind":"function","modifiers":[],"name":"ln","nameLocation":"14275:2:15","nodeType":"FunctionDefinition","parameters":{"id":3574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3573,"mutability":"mutable","name":"a","nameLocation":"14285:1:15","nodeType":"VariableDeclaration","scope":3608,"src":"14278:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3572,"name":"int256","nodeType":"ElementaryTypeName","src":"14278:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"14277:10:15"},"returnParameters":{"id":3577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3576,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3608,"src":"14311:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3575,"name":"int256","nodeType":"ElementaryTypeName","src":"14311:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"14310:8:15"},"scope":4146,"src":"14266:406:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3989,"nodeType":"Block","src":"14824:5531:15","statements":[{"assignments":[3617],"declarations":[{"constant":false,"id":3617,"mutability":"mutable","name":"negativeExponent","nameLocation":"14915:16:15","nodeType":"VariableDeclaration","scope":3989,"src":"14910:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3616,"name":"bool","nodeType":"ElementaryTypeName","src":"14910:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3619,"initialValue":{"hexValue":"66616c7365","id":3618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14934:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"14910:29:15"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3620,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"14954:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3621,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"14958:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"14954:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3638,"nodeType":"IfStatement","src":"14950:381:15","trueBody":{"id":3637,"nodeType":"Block","src":"14966:365:15","statements":[{"id":3632,"nodeType":"UncheckedBlock","src":"15216:68:15","statements":[{"expression":{"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3623,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"15244:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":3624,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"15249:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3625,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"15258:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"15249:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3627,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"15248:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3628,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"15268:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"15248:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"15244:25:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3631,"nodeType":"ExpressionStatement","src":"15244:25:15"}]},{"expression":{"id":3635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3633,"name":"negativeExponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3617,"src":"15297:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15316:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"15297:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3636,"nodeType":"ExpressionStatement","src":"15297:23:15"}]}},{"assignments":[3640],"declarations":[{"constant":false,"id":3640,"mutability":"mutable","name":"sum","nameLocation":"16663:3:15","nodeType":"VariableDeclaration","scope":3989,"src":"16656:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3639,"name":"int256","nodeType":"ElementaryTypeName","src":"16656:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3642,"initialValue":{"hexValue":"30","id":3641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16669:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"16656:14:15"},{"id":3861,"nodeType":"UncheckedBlock","src":"16680:1674:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3643,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"16708:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":3644,"name":"a0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"16713:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3645,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"16718:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16713:11:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16708:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3657,"nodeType":"IfStatement","src":"16704:126:15","trueBody":{"id":3656,"nodeType":"Block","src":"16726:104:15","statements":[{"expression":{"id":3650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3648,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"16744:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"id":3649,"name":"a0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"16749:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16744:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3651,"nodeType":"ExpressionStatement","src":"16744:7:15"},{"expression":{"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3652,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"16806:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3653,"name":"x0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"16813:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16806:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3655,"nodeType":"ExpressionStatement","src":"16806:9:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3658,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"16848:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":3659,"name":"a1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"16853:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3660,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"16858:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16853:11:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16848:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3672,"nodeType":"IfStatement","src":"16844:126:15","trueBody":{"id":3671,"nodeType":"Block","src":"16866:104:15","statements":[{"expression":{"id":3665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3663,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"16884:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"id":3664,"name":"a1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"16889:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16884:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3666,"nodeType":"ExpressionStatement","src":"16884:7:15"},{"expression":{"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3667,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"16946:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3668,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"16953:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16946:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3670,"nodeType":"ExpressionStatement","src":"16946:9:15"}]}},{"expression":{"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3673,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"17109:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"313030","id":3674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17116:3:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"17109:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3676,"nodeType":"ExpressionStatement","src":"17109:10:15"},{"expression":{"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3677,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17133:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"313030","id":3678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17138:3:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"17133:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3680,"nodeType":"ExpressionStatement","src":"17133:8:15"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3681,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17276:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3682,"name":"a2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"17281:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17276:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3698,"nodeType":"IfStatement","src":"17272:94:15","trueBody":{"id":3697,"nodeType":"Block","src":"17285:81:15","statements":[{"expression":{"id":3691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3684,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17303:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3685,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17308:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3686,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"17312:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17308:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3688,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17307:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3689,"name":"a2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"17322:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17307:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17303:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3692,"nodeType":"ExpressionStatement","src":"17303:21:15"},{"expression":{"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3693,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"17342:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3694,"name":"x2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2859,"src":"17349:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17342:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3696,"nodeType":"ExpressionStatement","src":"17342:9:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3699,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17384:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3700,"name":"a3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"17389:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17384:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3716,"nodeType":"IfStatement","src":"17380:94:15","trueBody":{"id":3715,"nodeType":"Block","src":"17393:81:15","statements":[{"expression":{"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3702,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17411:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3703,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17416:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3704,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"17420:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17416:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3706,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17415:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3707,"name":"a3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"17430:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17415:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17411:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3710,"nodeType":"ExpressionStatement","src":"17411:21:15"},{"expression":{"id":3713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3711,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"17450:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3712,"name":"x3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"17457:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17450:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3714,"nodeType":"ExpressionStatement","src":"17450:9:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3717,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17492:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3718,"name":"a4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"17497:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17492:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3734,"nodeType":"IfStatement","src":"17488:94:15","trueBody":{"id":3733,"nodeType":"Block","src":"17501:81:15","statements":[{"expression":{"id":3727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3720,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17519:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3721,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17524:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3722,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"17528:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17524:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3724,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17523:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3725,"name":"a4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2874,"src":"17538:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17523:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17519:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3728,"nodeType":"ExpressionStatement","src":"17519:21:15"},{"expression":{"id":3731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3729,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"17558:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3730,"name":"x4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"17565:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17558:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3732,"nodeType":"ExpressionStatement","src":"17558:9:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3735,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17600:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3736,"name":"a5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"17605:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17600:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3752,"nodeType":"IfStatement","src":"17596:94:15","trueBody":{"id":3751,"nodeType":"Block","src":"17609:81:15","statements":[{"expression":{"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3738,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17627:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3739,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17632:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3740,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"17636:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17632:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3742,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17631:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3743,"name":"a5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"17646:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17631:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17627:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3746,"nodeType":"ExpressionStatement","src":"17627:21:15"},{"expression":{"id":3749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3747,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"17666:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3748,"name":"x5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"17673:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17666:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3750,"nodeType":"ExpressionStatement","src":"17666:9:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3753,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17708:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3754,"name":"a6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"17713:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17708:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3770,"nodeType":"IfStatement","src":"17704:94:15","trueBody":{"id":3769,"nodeType":"Block","src":"17717:81:15","statements":[{"expression":{"id":3763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3756,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17735:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3757,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17740:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3758,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"17744:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17740:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3760,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17739:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3761,"name":"a6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"17754:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17739:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17735:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3764,"nodeType":"ExpressionStatement","src":"17735:21:15"},{"expression":{"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3765,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"17774:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3766,"name":"x6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"17781:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17774:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3768,"nodeType":"ExpressionStatement","src":"17774:9:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3771,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17816:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3772,"name":"a7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"17821:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17816:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3788,"nodeType":"IfStatement","src":"17812:94:15","trueBody":{"id":3787,"nodeType":"Block","src":"17825:81:15","statements":[{"expression":{"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3774,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17843:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3775,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17848:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3776,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"17852:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17848:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3778,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17847:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3779,"name":"a7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"17862:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17847:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17843:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3782,"nodeType":"ExpressionStatement","src":"17843:21:15"},{"expression":{"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3783,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"17882:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3784,"name":"x7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"17889:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17882:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3786,"nodeType":"ExpressionStatement","src":"17882:9:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3789,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17924:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3790,"name":"a8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"17929:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17924:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3806,"nodeType":"IfStatement","src":"17920:94:15","trueBody":{"id":3805,"nodeType":"Block","src":"17933:81:15","statements":[{"expression":{"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3792,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17951:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3793,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"17956:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3794,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"17960:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17956:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3796,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17955:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3797,"name":"a8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"17970:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17955:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17951:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3800,"nodeType":"ExpressionStatement","src":"17951:21:15"},{"expression":{"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3801,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"17990:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3802,"name":"x8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2895,"src":"17997:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17990:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3804,"nodeType":"ExpressionStatement","src":"17990:9:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3807,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"18032:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3808,"name":"a9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"18037:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18032:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3824,"nodeType":"IfStatement","src":"18028:94:15","trueBody":{"id":3823,"nodeType":"Block","src":"18041:81:15","statements":[{"expression":{"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3810,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"18059:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3811,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"18064:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3812,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"18068:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18064:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3814,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18063:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3815,"name":"a9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"18078:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18063:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18059:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3818,"nodeType":"ExpressionStatement","src":"18059:21:15"},{"expression":{"id":3821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3819,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"18098:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3820,"name":"x9","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"18105:2:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18098:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3822,"nodeType":"ExpressionStatement","src":"18098:9:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3825,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"18140:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3826,"name":"a10","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"18145:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18140:8:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3842,"nodeType":"IfStatement","src":"18136:97:15","trueBody":{"id":3841,"nodeType":"Block","src":"18150:83:15","statements":[{"expression":{"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3828,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"18168:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3829,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"18173:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3830,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"18177:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18173:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3832,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18172:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3833,"name":"a10","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"18187:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18172:18:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18168:22:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3836,"nodeType":"ExpressionStatement","src":"18168:22:15"},{"expression":{"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3837,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"18208:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3838,"name":"x10","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2907,"src":"18215:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18208:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3840,"nodeType":"ExpressionStatement","src":"18208:10:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3843,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"18251:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3844,"name":"a11","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"18256:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18251:8:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3860,"nodeType":"IfStatement","src":"18247:97:15","trueBody":{"id":3859,"nodeType":"Block","src":"18261:83:15","statements":[{"expression":{"id":3853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3846,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"18279:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3847,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"18284:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3848,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"18288:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18284:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3850,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18283:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3851,"name":"a11","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"18298:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18283:18:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18279:22:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3854,"nodeType":"ExpressionStatement","src":"18279:22:15"},{"expression":{"id":3857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3855,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"18319:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3856,"name":"x11","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2913,"src":"18326:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18319:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3858,"nodeType":"ExpressionStatement","src":"18319:10:15"}]}}]},{"id":3988,"nodeType":"UncheckedBlock","src":"18856:1493:15","statements":[{"assignments":[3863],"declarations":[{"constant":false,"id":3863,"mutability":"mutable","name":"z","nameLocation":"18887:1:15","nodeType":"VariableDeclaration","scope":3988,"src":"18880:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3862,"name":"int256","nodeType":"ElementaryTypeName","src":"18880:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3876,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3864,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"18893:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3865,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"18897:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18893:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3867,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18892:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3868,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"18907:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18892:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3870,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18891:23:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3871,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"18918:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3872,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"18922:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18918:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3874,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18917:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18891:38:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"18880:49:15"},{"assignments":[3878],"declarations":[{"constant":false,"id":3878,"mutability":"mutable","name":"z_squared","nameLocation":"18950:9:15","nodeType":"VariableDeclaration","scope":3988,"src":"18943:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3877,"name":"int256","nodeType":"ElementaryTypeName","src":"18943:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3885,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3879,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"18963:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3880,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"18967:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18963:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3882,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18962:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3883,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"18972:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18962:16:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"18943:35:15"},{"assignments":[3887],"declarations":[{"constant":false,"id":3887,"mutability":"mutable","name":"num","nameLocation":"19074:3:15","nodeType":"VariableDeclaration","scope":3988,"src":"19067:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3886,"name":"int256","nodeType":"ElementaryTypeName","src":"19067:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3889,"initialValue":{"id":3888,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"19080:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"19067:14:15"},{"assignments":[3891],"declarations":[{"constant":false,"id":3891,"mutability":"mutable","name":"seriesSum","nameLocation":"19210:9:15","nodeType":"VariableDeclaration","scope":3988,"src":"19203:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3890,"name":"int256","nodeType":"ElementaryTypeName","src":"19203:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3893,"initialValue":{"id":3892,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19222:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"19203:22:15"},{"expression":{"id":3901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3894,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19304:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3895,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19311:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3896,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"19317:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19311:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3898,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19310:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3899,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"19330:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19310:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19304:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3902,"nodeType":"ExpressionStatement","src":"19304:32:15"},{"expression":{"id":3907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3903,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"19350:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3904,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19363:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"33","id":3905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19369:1:15","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"19363:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19350:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3908,"nodeType":"ExpressionStatement","src":"19350:20:15"},{"expression":{"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3909,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19385:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3910,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19392:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3911,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"19398:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19392:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3913,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19391:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3914,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"19411:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19391:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19385:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3917,"nodeType":"ExpressionStatement","src":"19385:32:15"},{"expression":{"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3918,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"19431:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3919,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19444:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"35","id":3920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19450:1:15","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"19444:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19431:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3923,"nodeType":"ExpressionStatement","src":"19431:20:15"},{"expression":{"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3924,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19466:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3925,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19473:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3926,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"19479:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19473:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3928,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19472:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3929,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"19492:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19472:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19466:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3932,"nodeType":"ExpressionStatement","src":"19466:32:15"},{"expression":{"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3933,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"19512:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3934,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19525:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"37","id":3935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19531:1:15","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"19525:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19512:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3938,"nodeType":"ExpressionStatement","src":"19512:20:15"},{"expression":{"id":3946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3939,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19547:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3940,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19554:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3941,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"19560:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19554:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3943,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19553:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3944,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"19573:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19553:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19547:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3947,"nodeType":"ExpressionStatement","src":"19547:32:15"},{"expression":{"id":3952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3948,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"19593:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3949,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19606:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"39","id":3950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19612:1:15","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"src":"19606:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19593:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3953,"nodeType":"ExpressionStatement","src":"19593:20:15"},{"expression":{"id":3961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3954,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19628:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3955,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19635:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3956,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"19641:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19635:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3958,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19634:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3959,"name":"ONE_20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"19654:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19634:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19628:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3962,"nodeType":"ExpressionStatement","src":"19628:32:15"},{"expression":{"id":3967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3963,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"19674:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3964,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"19687:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3131","id":3965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19693:2:15","typeDescriptions":{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},"value":"11"},"src":"19687:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19674:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3968,"nodeType":"ExpressionStatement","src":"19674:21:15"},{"expression":{"id":3971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3969,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"19866:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"32","id":3970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19879:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"19866:14:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3972,"nodeType":"ExpressionStatement","src":"19866:14:15"},{"assignments":[3974],"declarations":[{"constant":false,"id":3974,"mutability":"mutable","name":"result","nameLocation":"20169:6:15","nodeType":"VariableDeclaration","scope":3988,"src":"20162:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3973,"name":"int256","nodeType":"ElementaryTypeName","src":"20162:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3981,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3975,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"20179:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3976,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"20185:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20179:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20178:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":3979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20198:3:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"20178:23:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"20162:39:15"},{"expression":{"condition":{"id":3982,"name":"negativeExponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3617,"src":"20303:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3985,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3974,"src":"20332:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"20303:35:15","trueExpression":{"id":3984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"20322:7:15","subExpression":{"id":3983,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3974,"src":"20323:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3615,"id":3987,"nodeType":"Return","src":"20296:42:15"}]}]},"documentation":{"id":3609,"nodeType":"StructuredDocumentation","src":"14678:88:15","text":"@dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument."},"id":3990,"implemented":true,"kind":"function","modifiers":[],"name":"_ln","nameLocation":"14780:3:15","nodeType":"FunctionDefinition","parameters":{"id":3612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3611,"mutability":"mutable","name":"a","nameLocation":"14791:1:15","nodeType":"VariableDeclaration","scope":3990,"src":"14784:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3610,"name":"int256","nodeType":"ElementaryTypeName","src":"14784:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"14783:10:15"},"returnParameters":{"id":3615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3990,"src":"14816:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3613,"name":"int256","nodeType":"ElementaryTypeName","src":"14816:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"14815:8:15"},"scope":4146,"src":"14771:5584:15","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":4144,"nodeType":"Block","src":"20678:1804:15","statements":[{"id":4143,"nodeType":"UncheckedBlock","src":"20892:1584:15","statements":[{"expression":{"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3998,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3993,"src":"20916:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"id":3999,"name":"ONE_18","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"20921:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20916:11:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4001,"nodeType":"ExpressionStatement","src":"20916:11:15"},{"assignments":[4003],"declarations":[{"constant":false,"id":4003,"mutability":"mutable","name":"z","nameLocation":"21315:1:15","nodeType":"VariableDeclaration","scope":4143,"src":"21308:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4002,"name":"int256","nodeType":"ElementaryTypeName","src":"21308:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4016,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4004,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3993,"src":"21321:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4005,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"21325:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21321:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4007,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21320:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4008,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"21335:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21320:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4010,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21319:23:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4011,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3993,"src":"21346:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4012,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"21350:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21346:10:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4014,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21345:12:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21319:38:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"21308:49:15"},{"assignments":[4018],"declarations":[{"constant":false,"id":4018,"mutability":"mutable","name":"z_squared","nameLocation":"21378:9:15","nodeType":"VariableDeclaration","scope":4143,"src":"21371:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4017,"name":"int256","nodeType":"ElementaryTypeName","src":"21371:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4025,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4019,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"21391:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4020,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"21395:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21391:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4022,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21390:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4023,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"21400:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21390:16:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"21371:35:15"},{"assignments":[4027],"declarations":[{"constant":false,"id":4027,"mutability":"mutable","name":"num","nameLocation":"21502:3:15","nodeType":"VariableDeclaration","scope":4143,"src":"21495:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4026,"name":"int256","nodeType":"ElementaryTypeName","src":"21495:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4029,"initialValue":{"id":4028,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"21508:1:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"21495:14:15"},{"assignments":[4031],"declarations":[{"constant":false,"id":4031,"mutability":"mutable","name":"seriesSum","nameLocation":"21638:9:15","nodeType":"VariableDeclaration","scope":4143,"src":"21631:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4030,"name":"int256","nodeType":"ElementaryTypeName","src":"21631:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4033,"initialValue":{"id":4032,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"21650:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"21631:22:15"},{"expression":{"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4034,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"21732:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4035,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"21739:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4036,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"21745:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21739:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4038,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21738:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4039,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"21758:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21738:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21732:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4042,"nodeType":"ExpressionStatement","src":"21732:32:15"},{"expression":{"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4043,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"21778:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4044,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"21791:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"33","id":4045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21797:1:15","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"21791:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21778:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4048,"nodeType":"ExpressionStatement","src":"21778:20:15"},{"expression":{"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4049,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"21813:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4050,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"21820:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4051,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"21826:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21820:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4053,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21819:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4054,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"21839:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21819:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21813:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4057,"nodeType":"ExpressionStatement","src":"21813:32:15"},{"expression":{"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4058,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"21859:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4059,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"21872:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"35","id":4060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21878:1:15","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"21872:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21859:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4063,"nodeType":"ExpressionStatement","src":"21859:20:15"},{"expression":{"id":4071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4064,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"21894:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4065,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"21901:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4066,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"21907:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21901:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4068,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21900:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4069,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"21920:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21900:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21894:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4072,"nodeType":"ExpressionStatement","src":"21894:32:15"},{"expression":{"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4073,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"21940:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4074,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"21953:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"37","id":4075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21959:1:15","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"21953:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21940:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4078,"nodeType":"ExpressionStatement","src":"21940:20:15"},{"expression":{"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4079,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"21975:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4080,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"21982:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4081,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"21988:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21982:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4083,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21981:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4084,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"22001:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21981:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21975:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4087,"nodeType":"ExpressionStatement","src":"21975:32:15"},{"expression":{"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4088,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"22021:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4089,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"22034:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"39","id":4090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22040:1:15","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"src":"22034:7:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22021:20:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4093,"nodeType":"ExpressionStatement","src":"22021:20:15"},{"expression":{"id":4101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4094,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"22056:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4095,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"22063:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4096,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"22069:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22063:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4098,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22062:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4099,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"22082:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22062:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22056:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4102,"nodeType":"ExpressionStatement","src":"22056:32:15"},{"expression":{"id":4107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4103,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"22102:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4104,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"22115:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3131","id":4105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22121:2:15","typeDescriptions":{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},"value":"11"},"src":"22115:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22102:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4108,"nodeType":"ExpressionStatement","src":"22102:21:15"},{"expression":{"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4109,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"22138:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4110,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"22145:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4111,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"22151:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22145:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4113,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22144:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4114,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"22164:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22144:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22138:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4117,"nodeType":"ExpressionStatement","src":"22138:32:15"},{"expression":{"id":4122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4118,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"22184:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4119,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"22197:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3133","id":4120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22203:2:15","typeDescriptions":{"typeIdentifier":"t_rational_13_by_1","typeString":"int_const 13"},"value":"13"},"src":"22197:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22184:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4123,"nodeType":"ExpressionStatement","src":"22184:21:15"},{"expression":{"id":4131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4124,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"22220:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4125,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"22227:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4126,"name":"z_squared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"22233:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22227:15:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4128,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22226:17:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4129,"name":"ONE_36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"22246:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22226:26:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22220:32:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4132,"nodeType":"ExpressionStatement","src":"22220:32:15"},{"expression":{"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4133,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"22266:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4134,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"22279:3:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3135","id":4135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22285:2:15","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"15"},"src":"22279:8:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22266:21:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4138,"nodeType":"ExpressionStatement","src":"22266:21:15"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4139,"name":"seriesSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"22452:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":4140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22464:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"22452:13:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3997,"id":4142,"nodeType":"Return","src":"22445:20:15"}]}]},"documentation":{"id":3991,"nodeType":"StructuredDocumentation","src":"20361:256:15","text":" @dev Internal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\n for x close to one.\n Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND."},"id":4145,"implemented":true,"kind":"function","modifiers":[],"name":"_ln_36","nameLocation":"20631:6:15","nodeType":"FunctionDefinition","parameters":{"id":3994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3993,"mutability":"mutable","name":"x","nameLocation":"20645:1:15","nodeType":"VariableDeclaration","scope":4145,"src":"20638:8:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3992,"name":"int256","nodeType":"ElementaryTypeName","src":"20638:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20637:10:15"},"returnParameters":{"id":3997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4145,"src":"20670:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3995,"name":"int256","nodeType":"ElementaryTypeName","src":"20670:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20669:8:15"},"scope":4146,"src":"20622:1860:15","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":4147,"src":"595:21889:15","usedErrors":[2796,2799,2802,2805,2808],"usedEvents":[]}],"src":"33:22452:15"},"id":15},"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol":{"ast":{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol","exportedSymbols":{"ReentrancyGuardTransient":[4215],"StorageSlotExtension":[4428]},"id":4216,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4148,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"33:24:16"},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol","file":"./StorageSlotExtension.sol","id":4150,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4216,"sourceUnit":4429,"src":"59:66:16","symbolAliases":[{"foreign":{"id":4149,"name":"StorageSlotExtension","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4428,"src":"68:20:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuardTransient","contractDependencies":[],"contractKind":"contract","documentation":{"id":4151,"nodeType":"StructuredDocumentation","src":"127:155:16","text":" @notice Variant of {ReentrancyGuard} that uses transient storage.\n @dev NOTE: This variant only works on networks where EIP-1153 is available."},"fullyImplemented":true,"id":4215,"linearizedBaseContracts":[4215],"name":"ReentrancyGuardTransient","nameLocation":"301:24:16","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4153,"libraryName":{"id":4152,"name":"StorageSlotExtension","nameLocations":["338:20:16"],"nodeType":"IdentifierPath","referencedDeclaration":4428,"src":"338:20:16"},"nodeType":"UsingForDirective","src":"332:33:16"},{"constant":true,"id":4156,"mutability":"constant","name":"_REENTRANCY_GUARD_STORAGE","nameLocation":"515:25:16","nodeType":"VariableDeclaration","scope":4215,"src":"490:127:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4154,"name":"bytes32","nodeType":"ElementaryTypeName","src":"490:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307839623737396231373432326430646639323232333031386233326234643166613436653037313732336436383137653234383664303033626563633535663030","id":4155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"551:66:16","typeDescriptions":{"typeIdentifier":"t_rational_70319816728846589445362000750570655803700195216363692647688146666176345628416_by_1","typeString":"int_const 7031...(69 digits omitted)...8416"},"value":"0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00"},"visibility":"private"},{"documentation":{"id":4157,"nodeType":"StructuredDocumentation","src":"624:40:16","text":"@notice Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":4159,"name":"ReentrancyGuardReentrantCall","nameLocation":"675:28:16","nodeType":"ErrorDefinition","parameters":{"id":4158,"nodeType":"ParameterList","parameters":[],"src":"703:2:16"},"src":"669:37:16"},{"body":{"id":4169,"nodeType":"Block","src":"1107:79:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4162,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"1117:19:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1117:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4164,"nodeType":"ExpressionStatement","src":"1117:21:16"},{"id":4165,"nodeType":"PlaceholderStatement","src":"1148:1:16"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4166,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"1159:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1159:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4168,"nodeType":"ExpressionStatement","src":"1159:20:16"}]},"documentation":{"id":4160,"nodeType":"StructuredDocumentation","src":"712:366:16","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":4170,"name":"nonReentrant","nameLocation":"1092:12:16","nodeType":"ModifierDefinition","parameters":{"id":4161,"nodeType":"ParameterList","parameters":[],"src":"1104:2:16"},"src":"1083:103:16","virtual":false,"visibility":"internal"},{"body":{"id":4188,"nodeType":"Block","src":"1231:310:16","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":4173,"name":"_reentrancyGuardEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4214,"src":"1320:23:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":4174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1320:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4179,"nodeType":"IfStatement","src":"1316:93:16","trueBody":{"id":4178,"nodeType":"Block","src":"1347:62:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4175,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"1368:28:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1368:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4177,"nodeType":"RevertStatement","src":"1361:37:16"}]}},{"expression":{"arguments":[{"hexValue":"74727565","id":4185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1529:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4180,"name":"_REENTRANCY_GUARD_STORAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"1484:25:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1510:9:16","memberName":"asBoolean","nodeType":"MemberAccess","referencedDeclaration":4266,"src":"1484:35:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_userDefinedValueType$_BooleanSlotType_$4251_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.BooleanSlotType)"}},"id":4183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1484:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$4251","typeString":"StorageSlotExtension.BooleanSlotType"}},"id":4184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1522:6:16","memberName":"tstore","nodeType":"MemberAccess","referencedDeclaration":4361,"src":"1484:44:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_userDefinedValueType$_BooleanSlotType_$4251_$_t_bool_$returns$__$attached_to$_t_userDefinedValueType$_BooleanSlotType_$4251_$","typeString":"function (StorageSlotExtension.BooleanSlotType,bool)"}},"id":4186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1484:50:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4187,"nodeType":"ExpressionStatement","src":"1484:50:16"}]},"id":4189,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"1201:19:16","nodeType":"FunctionDefinition","parameters":{"id":4171,"nodeType":"ParameterList","parameters":[],"src":"1220:2:16"},"returnParameters":{"id":4172,"nodeType":"ParameterList","parameters":[],"src":"1231:0:16"},"scope":4215,"src":"1192:349:16","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4200,"nodeType":"Block","src":"1585:68:16","statements":[{"expression":{"arguments":[{"hexValue":"66616c7365","id":4197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1640:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4192,"name":"_REENTRANCY_GUARD_STORAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"1595:25:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1621:9:16","memberName":"asBoolean","nodeType":"MemberAccess","referencedDeclaration":4266,"src":"1595:35:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_userDefinedValueType$_BooleanSlotType_$4251_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.BooleanSlotType)"}},"id":4195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$4251","typeString":"StorageSlotExtension.BooleanSlotType"}},"id":4196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1633:6:16","memberName":"tstore","nodeType":"MemberAccess","referencedDeclaration":4361,"src":"1595:44:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_userDefinedValueType$_BooleanSlotType_$4251_$_t_bool_$returns$__$attached_to$_t_userDefinedValueType$_BooleanSlotType_$4251_$","typeString":"function (StorageSlotExtension.BooleanSlotType,bool)"}},"id":4198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:51:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4199,"nodeType":"ExpressionStatement","src":"1595:51:16"}]},"id":4201,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"1556:18:16","nodeType":"FunctionDefinition","parameters":{"id":4190,"nodeType":"ParameterList","parameters":[],"src":"1574:2:16"},"returnParameters":{"id":4191,"nodeType":"ParameterList","parameters":[],"src":"1585:0:16"},"scope":4215,"src":"1547:106:16","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4213,"nodeType":"Block","src":"1896:69:16","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4207,"name":"_REENTRANCY_GUARD_STORAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"1913:25:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1939:9:16","memberName":"asBoolean","nodeType":"MemberAccess","referencedDeclaration":4266,"src":"1913:35:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_userDefinedValueType$_BooleanSlotType_$4251_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.BooleanSlotType)"}},"id":4209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1913:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$4251","typeString":"StorageSlotExtension.BooleanSlotType"}},"id":4210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1951:5:16","memberName":"tload","nodeType":"MemberAccess","referencedDeclaration":4350,"src":"1913:43:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_BooleanSlotType_$4251_$returns$_t_bool_$attached_to$_t_userDefinedValueType$_BooleanSlotType_$4251_$","typeString":"function (StorageSlotExtension.BooleanSlotType) view returns (bool)"}},"id":4211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1913:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4206,"id":4212,"nodeType":"Return","src":"1906:52:16"}]},"documentation":{"id":4202,"nodeType":"StructuredDocumentation","src":"1659:168:16","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":4214,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"1841:23:16","nodeType":"FunctionDefinition","parameters":{"id":4203,"nodeType":"ParameterList","parameters":[],"src":"1864:2:16"},"returnParameters":{"id":4206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4214,"src":"1890:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4204,"name":"bool","nodeType":"ElementaryTypeName","src":"1890:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1889:6:16"},"scope":4215,"src":"1832:133:16","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4216,"src":"283:1684:16","usedErrors":[4159],"usedEvents":[]}],"src":"33:1935:16"},"id":16},"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol":{"ast":{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol","exportedSymbols":{"StorageSlotExtension":[4428]},"id":4429,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4217,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"33:24:17"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotExtension","contractDependencies":[],"contractKind":"library","documentation":{"id":4218,"nodeType":"StructuredDocumentation","src":"59:218:17","text":" @notice Library for reading and writing primitive types to specific storage slots. Based on OpenZeppelin; just adding support for int256.\n @dev TIP: Consider using this library along with {SlotDerivation}."},"fullyImplemented":true,"id":4428,"linearizedBaseContracts":[4428],"name":"StorageSlotExtension","nameLocation":"286:20:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlotExtension.Int256Slot","id":4221,"members":[{"constant":false,"id":4220,"mutability":"mutable","name":"value","nameLocation":"348:5:17","nodeType":"VariableDeclaration","scope":4221,"src":"341:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4219,"name":"int256","nodeType":"ElementaryTypeName","src":"341:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"name":"Int256Slot","nameLocation":"320:10:17","nodeType":"StructDefinition","scope":4428,"src":"313:47:17","visibility":"public"},{"body":{"id":4231,"nodeType":"Block","src":"524:106:17","statements":[{"AST":{"nativeSrc":"586:38:17","nodeType":"YulBlock","src":"586:38:17","statements":[{"nativeSrc":"600:14:17","nodeType":"YulAssignment","src":"600:14:17","value":{"name":"slot","nativeSrc":"610:4:17","nodeType":"YulIdentifier","src":"610:4:17"},"variableNames":[{"name":"r.slot","nativeSrc":"600:6:17","nodeType":"YulIdentifier","src":"600:6:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":4228,"isOffset":false,"isSlot":true,"src":"600:6:17","suffix":"slot","valueSize":1},{"declaration":4224,"isOffset":false,"isSlot":false,"src":"610:4:17","valueSize":1}],"id":4230,"nodeType":"InlineAssembly","src":"577:47:17"}]},"documentation":{"id":4222,"nodeType":"StructuredDocumentation","src":"366:71:17","text":"@dev Returns an `Int256Slot` with member `value` located at `slot`."},"id":4232,"implemented":true,"kind":"function","modifiers":[],"name":"getInt256Slot","nameLocation":"451:13:17","nodeType":"FunctionDefinition","parameters":{"id":4225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4224,"mutability":"mutable","name":"slot","nameLocation":"473:4:17","nodeType":"VariableDeclaration","scope":4232,"src":"465:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4223,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"464:14:17"},"returnParameters":{"id":4229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4228,"mutability":"mutable","name":"r","nameLocation":"521:1:17","nodeType":"VariableDeclaration","scope":4232,"src":"502:20:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$4221_storage_ptr","typeString":"struct StorageSlotExtension.Int256Slot"},"typeName":{"id":4227,"nodeType":"UserDefinedTypeName","pathNode":{"id":4226,"name":"Int256Slot","nameLocations":["502:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":4221,"src":"502:10:17"},"referencedDeclaration":4221,"src":"502:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$4221_storage_ptr","typeString":"struct StorageSlotExtension.Int256Slot"}},"visibility":"internal"}],"src":"501:22:17"},"scope":4428,"src":"442:188:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"canonicalName":"StorageSlotExtension.AddressSlotType","id":4234,"name":"AddressSlotType","nameLocation":"709:15:17","nodeType":"UserDefinedValueTypeDefinition","src":"704:32:17","underlyingType":{"id":4233,"name":"bytes32","nodeType":"ElementaryTypeName","src":"728:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":4248,"nodeType":"Block","src":"873:50:17","statements":[{"expression":{"arguments":[{"id":4245,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4237,"src":"911:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4243,"name":"AddressSlotType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4234,"src":"890:15:17","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_AddressSlotType_$4234_$","typeString":"type(StorageSlotExtension.AddressSlotType)"}},"id":4244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"906:4:17","memberName":"wrap","nodeType":"MemberAccess","src":"890:20:17","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_AddressSlotType_$4234_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.AddressSlotType)"}},"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"890:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$4234","typeString":"StorageSlotExtension.AddressSlotType"}},"functionReturnParameters":4242,"id":4247,"nodeType":"Return","src":"883:33:17"}]},"documentation":{"id":4235,"nodeType":"StructuredDocumentation","src":"742:53:17","text":"@dev Cast an arbitrary slot to a AddressSlotType."},"id":4249,"implemented":true,"kind":"function","modifiers":[],"name":"asAddress","nameLocation":"809:9:17","nodeType":"FunctionDefinition","parameters":{"id":4238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4237,"mutability":"mutable","name":"slot","nameLocation":"827:4:17","nodeType":"VariableDeclaration","scope":4249,"src":"819:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4236,"name":"bytes32","nodeType":"ElementaryTypeName","src":"819:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"818:14:17"},"returnParameters":{"id":4242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4241,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4249,"src":"856:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$4234","typeString":"StorageSlotExtension.AddressSlotType"},"typeName":{"id":4240,"nodeType":"UserDefinedTypeName","pathNode":{"id":4239,"name":"AddressSlotType","nameLocations":["856:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":4234,"src":"856:15:17"},"referencedDeclaration":4234,"src":"856:15:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$4234","typeString":"StorageSlotExtension.AddressSlotType"}},"visibility":"internal"}],"src":"855:17:17"},"scope":4428,"src":"800:123:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"canonicalName":"StorageSlotExtension.BooleanSlotType","id":4251,"name":"BooleanSlotType","nameLocation":"1001:15:17","nodeType":"UserDefinedValueTypeDefinition","src":"996:32:17","underlyingType":{"id":4250,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1020:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":4265,"nodeType":"Block","src":"1165:50:17","statements":[{"expression":{"arguments":[{"id":4262,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4254,"src":"1203:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4260,"name":"BooleanSlotType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4251,"src":"1182:15:17","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_BooleanSlotType_$4251_$","typeString":"type(StorageSlotExtension.BooleanSlotType)"}},"id":4261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1198:4:17","memberName":"wrap","nodeType":"MemberAccess","src":"1182:20:17","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_BooleanSlotType_$4251_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.BooleanSlotType)"}},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1182:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$4251","typeString":"StorageSlotExtension.BooleanSlotType"}},"functionReturnParameters":4259,"id":4264,"nodeType":"Return","src":"1175:33:17"}]},"documentation":{"id":4252,"nodeType":"StructuredDocumentation","src":"1034:53:17","text":"@dev Cast an arbitrary slot to a BooleanSlotType."},"id":4266,"implemented":true,"kind":"function","modifiers":[],"name":"asBoolean","nameLocation":"1101:9:17","nodeType":"FunctionDefinition","parameters":{"id":4255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4254,"mutability":"mutable","name":"slot","nameLocation":"1119:4:17","nodeType":"VariableDeclaration","scope":4266,"src":"1111:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1111:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1110:14:17"},"returnParameters":{"id":4259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4258,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4266,"src":"1148:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$4251","typeString":"StorageSlotExtension.BooleanSlotType"},"typeName":{"id":4257,"nodeType":"UserDefinedTypeName","pathNode":{"id":4256,"name":"BooleanSlotType","nameLocations":["1148:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":4251,"src":"1148:15:17"},"referencedDeclaration":4251,"src":"1148:15:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$4251","typeString":"StorageSlotExtension.BooleanSlotType"}},"visibility":"internal"}],"src":"1147:17:17"},"scope":4428,"src":"1092:123:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"canonicalName":"StorageSlotExtension.Bytes32SlotType","id":4268,"name":"Bytes32SlotType","nameLocation":"1293:15:17","nodeType":"UserDefinedValueTypeDefinition","src":"1288:32:17","underlyingType":{"id":4267,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1312:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":4282,"nodeType":"Block","src":"1457:50:17","statements":[{"expression":{"arguments":[{"id":4279,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4271,"src":"1495:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4277,"name":"Bytes32SlotType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"1474:15:17","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Bytes32SlotType_$4268_$","typeString":"type(StorageSlotExtension.Bytes32SlotType)"}},"id":4278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1490:4:17","memberName":"wrap","nodeType":"MemberAccess","src":"1474:20:17","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_Bytes32SlotType_$4268_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.Bytes32SlotType)"}},"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1474:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$4268","typeString":"StorageSlotExtension.Bytes32SlotType"}},"functionReturnParameters":4276,"id":4281,"nodeType":"Return","src":"1467:33:17"}]},"documentation":{"id":4269,"nodeType":"StructuredDocumentation","src":"1326:53:17","text":"@dev Cast an arbitrary slot to a Bytes32SlotType."},"id":4283,"implemented":true,"kind":"function","modifiers":[],"name":"asBytes32","nameLocation":"1393:9:17","nodeType":"FunctionDefinition","parameters":{"id":4272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4271,"mutability":"mutable","name":"slot","nameLocation":"1411:4:17","nodeType":"VariableDeclaration","scope":4283,"src":"1403:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1403:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1402:14:17"},"returnParameters":{"id":4276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4275,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4283,"src":"1440:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$4268","typeString":"StorageSlotExtension.Bytes32SlotType"},"typeName":{"id":4274,"nodeType":"UserDefinedTypeName","pathNode":{"id":4273,"name":"Bytes32SlotType","nameLocations":["1440:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":4268,"src":"1440:15:17"},"referencedDeclaration":4268,"src":"1440:15:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$4268","typeString":"StorageSlotExtension.Bytes32SlotType"}},"visibility":"internal"}],"src":"1439:17:17"},"scope":4428,"src":"1384:123:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"canonicalName":"StorageSlotExtension.Uint256SlotType","id":4285,"name":"Uint256SlotType","nameLocation":"1585:15:17","nodeType":"UserDefinedValueTypeDefinition","src":"1580:32:17","underlyingType":{"id":4284,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1604:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":4299,"nodeType":"Block","src":"1749:50:17","statements":[{"expression":{"arguments":[{"id":4296,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"1787:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4294,"name":"Uint256SlotType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"1766:15:17","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Uint256SlotType_$4285_$","typeString":"type(StorageSlotExtension.Uint256SlotType)"}},"id":4295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1782:4:17","memberName":"wrap","nodeType":"MemberAccess","src":"1766:20:17","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_Uint256SlotType_$4285_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.Uint256SlotType)"}},"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1766:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$4285","typeString":"StorageSlotExtension.Uint256SlotType"}},"functionReturnParameters":4293,"id":4298,"nodeType":"Return","src":"1759:33:17"}]},"documentation":{"id":4286,"nodeType":"StructuredDocumentation","src":"1618:53:17","text":"@dev Cast an arbitrary slot to a Uint256SlotType."},"id":4300,"implemented":true,"kind":"function","modifiers":[],"name":"asUint256","nameLocation":"1685:9:17","nodeType":"FunctionDefinition","parameters":{"id":4289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4288,"mutability":"mutable","name":"slot","nameLocation":"1703:4:17","nodeType":"VariableDeclaration","scope":4300,"src":"1695:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4287,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1695:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1694:14:17"},"returnParameters":{"id":4293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4300,"src":"1732:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$4285","typeString":"StorageSlotExtension.Uint256SlotType"},"typeName":{"id":4291,"nodeType":"UserDefinedTypeName","pathNode":{"id":4290,"name":"Uint256SlotType","nameLocations":["1732:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":4285,"src":"1732:15:17"},"referencedDeclaration":4285,"src":"1732:15:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$4285","typeString":"StorageSlotExtension.Uint256SlotType"}},"visibility":"internal"}],"src":"1731:17:17"},"scope":4428,"src":"1676:123:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"canonicalName":"StorageSlotExtension.Int256SlotType","id":4302,"name":"Int256SlotType","nameLocation":"1877:14:17","nodeType":"UserDefinedValueTypeDefinition","src":"1872:31:17","underlyingType":{"id":4301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1895:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":4316,"nodeType":"Block","src":"2038:49:17","statements":[{"expression":{"arguments":[{"id":4313,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4305,"src":"2075:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4311,"name":"Int256SlotType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4302,"src":"2055:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Int256SlotType_$4302_$","typeString":"type(StorageSlotExtension.Int256SlotType)"}},"id":4312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2070:4:17","memberName":"wrap","nodeType":"MemberAccess","src":"2055:19:17","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_Int256SlotType_$4302_$","typeString":"function (bytes32) pure returns (StorageSlotExtension.Int256SlotType)"}},"id":4314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2055:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$4302","typeString":"StorageSlotExtension.Int256SlotType"}},"functionReturnParameters":4310,"id":4315,"nodeType":"Return","src":"2048:32:17"}]},"documentation":{"id":4303,"nodeType":"StructuredDocumentation","src":"1909:53:17","text":"@dev Cast an arbitrary slot to an Int256SlotType."},"id":4317,"implemented":true,"kind":"function","modifiers":[],"name":"asInt256","nameLocation":"1976:8:17","nodeType":"FunctionDefinition","parameters":{"id":4306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4305,"mutability":"mutable","name":"slot","nameLocation":"1993:4:17","nodeType":"VariableDeclaration","scope":4317,"src":"1985:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4304,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1985:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1984:14:17"},"returnParameters":{"id":4310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4317,"src":"2022:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$4302","typeString":"StorageSlotExtension.Int256SlotType"},"typeName":{"id":4308,"nodeType":"UserDefinedTypeName","pathNode":{"id":4307,"name":"Int256SlotType","nameLocations":["2022:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":4302,"src":"2022:14:17"},"referencedDeclaration":4302,"src":"2022:14:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$4302","typeString":"StorageSlotExtension.Int256SlotType"}},"visibility":"internal"}],"src":"2021:16:17"},"scope":4428,"src":"1967:120:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4327,"nodeType":"Block","src":"2242:112:17","statements":[{"AST":{"nativeSrc":"2304:44:17","nodeType":"YulBlock","src":"2304:44:17","statements":[{"nativeSrc":"2318:20:17","nodeType":"YulAssignment","src":"2318:20:17","value":{"arguments":[{"name":"slot","nativeSrc":"2333:4:17","nodeType":"YulIdentifier","src":"2333:4:17"}],"functionName":{"name":"tload","nativeSrc":"2327:5:17","nodeType":"YulIdentifier","src":"2327:5:17"},"nativeSrc":"2327:11:17","nodeType":"YulFunctionCall","src":"2327:11:17"},"variableNames":[{"name":"value","nativeSrc":"2318:5:17","nodeType":"YulIdentifier","src":"2318:5:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":4321,"isOffset":false,"isSlot":false,"src":"2333:4:17","valueSize":1},{"declaration":4324,"isOffset":false,"isSlot":false,"src":"2318:5:17","valueSize":1}],"id":4326,"nodeType":"InlineAssembly","src":"2295:53:17"}]},"documentation":{"id":4318,"nodeType":"StructuredDocumentation","src":"2093:69:17","text":"@dev Load the value held at location `slot` in transient storage."},"id":4328,"implemented":true,"kind":"function","modifiers":[],"name":"tload","nameLocation":"2176:5:17","nodeType":"FunctionDefinition","parameters":{"id":4322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4321,"mutability":"mutable","name":"slot","nameLocation":"2198:4:17","nodeType":"VariableDeclaration","scope":4328,"src":"2182:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$4234","typeString":"StorageSlotExtension.AddressSlotType"},"typeName":{"id":4320,"nodeType":"UserDefinedTypeName","pathNode":{"id":4319,"name":"AddressSlotType","nameLocations":["2182:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":4234,"src":"2182:15:17"},"referencedDeclaration":4234,"src":"2182:15:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$4234","typeString":"StorageSlotExtension.AddressSlotType"}},"visibility":"internal"}],"src":"2181:22:17"},"returnParameters":{"id":4325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4324,"mutability":"mutable","name":"value","nameLocation":"2235:5:17","nodeType":"VariableDeclaration","scope":4328,"src":"2227:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4323,"name":"address","nodeType":"ElementaryTypeName","src":"2227:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2226:15:17"},"scope":4428,"src":"2167:187:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4338,"nodeType":"Block","src":"2490:111:17","statements":[{"AST":{"nativeSrc":"2552:43:17","nodeType":"YulBlock","src":"2552:43:17","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"2573:4:17","nodeType":"YulIdentifier","src":"2573:4:17"},{"name":"value","nativeSrc":"2579:5:17","nodeType":"YulIdentifier","src":"2579:5:17"}],"functionName":{"name":"tstore","nativeSrc":"2566:6:17","nodeType":"YulIdentifier","src":"2566:6:17"},"nativeSrc":"2566:19:17","nodeType":"YulFunctionCall","src":"2566:19:17"},"nativeSrc":"2566:19:17","nodeType":"YulExpressionStatement","src":"2566:19:17"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":4332,"isOffset":false,"isSlot":false,"src":"2573:4:17","valueSize":1},{"declaration":4334,"isOffset":false,"isSlot":false,"src":"2579:5:17","valueSize":1}],"id":4337,"nodeType":"InlineAssembly","src":"2543:52:17"}]},"documentation":{"id":4329,"nodeType":"StructuredDocumentation","src":"2360:63:17","text":"@dev Store `value` at location `slot` in transient storage."},"id":4339,"implemented":true,"kind":"function","modifiers":[],"name":"tstore","nameLocation":"2437:6:17","nodeType":"FunctionDefinition","parameters":{"id":4335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4332,"mutability":"mutable","name":"slot","nameLocation":"2460:4:17","nodeType":"VariableDeclaration","scope":4339,"src":"2444:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$4234","typeString":"StorageSlotExtension.AddressSlotType"},"typeName":{"id":4331,"nodeType":"UserDefinedTypeName","pathNode":{"id":4330,"name":"AddressSlotType","nameLocations":["2444:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":4234,"src":"2444:15:17"},"referencedDeclaration":4234,"src":"2444:15:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_AddressSlotType_$4234","typeString":"StorageSlotExtension.AddressSlotType"}},"visibility":"internal"},{"constant":false,"id":4334,"mutability":"mutable","name":"value","nameLocation":"2474:5:17","nodeType":"VariableDeclaration","scope":4339,"src":"2466:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4333,"name":"address","nodeType":"ElementaryTypeName","src":"2466:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2443:37:17"},"returnParameters":{"id":4336,"nodeType":"ParameterList","parameters":[],"src":"2490:0:17"},"scope":4428,"src":"2428:173:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4349,"nodeType":"Block","src":"2753:112:17","statements":[{"AST":{"nativeSrc":"2815:44:17","nodeType":"YulBlock","src":"2815:44:17","statements":[{"nativeSrc":"2829:20:17","nodeType":"YulAssignment","src":"2829:20:17","value":{"arguments":[{"name":"slot","nativeSrc":"2844:4:17","nodeType":"YulIdentifier","src":"2844:4:17"}],"functionName":{"name":"tload","nativeSrc":"2838:5:17","nodeType":"YulIdentifier","src":"2838:5:17"},"nativeSrc":"2838:11:17","nodeType":"YulFunctionCall","src":"2838:11:17"},"variableNames":[{"name":"value","nativeSrc":"2829:5:17","nodeType":"YulIdentifier","src":"2829:5:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":4343,"isOffset":false,"isSlot":false,"src":"2844:4:17","valueSize":1},{"declaration":4346,"isOffset":false,"isSlot":false,"src":"2829:5:17","valueSize":1}],"id":4348,"nodeType":"InlineAssembly","src":"2806:53:17"}]},"documentation":{"id":4340,"nodeType":"StructuredDocumentation","src":"2607:69:17","text":"@dev Load the value held at location `slot` in transient storage."},"id":4350,"implemented":true,"kind":"function","modifiers":[],"name":"tload","nameLocation":"2690:5:17","nodeType":"FunctionDefinition","parameters":{"id":4344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4343,"mutability":"mutable","name":"slot","nameLocation":"2712:4:17","nodeType":"VariableDeclaration","scope":4350,"src":"2696:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$4251","typeString":"StorageSlotExtension.BooleanSlotType"},"typeName":{"id":4342,"nodeType":"UserDefinedTypeName","pathNode":{"id":4341,"name":"BooleanSlotType","nameLocations":["2696:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":4251,"src":"2696:15:17"},"referencedDeclaration":4251,"src":"2696:15:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$4251","typeString":"StorageSlotExtension.BooleanSlotType"}},"visibility":"internal"}],"src":"2695:22:17"},"returnParameters":{"id":4347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4346,"mutability":"mutable","name":"value","nameLocation":"2746:5:17","nodeType":"VariableDeclaration","scope":4350,"src":"2741:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4345,"name":"bool","nodeType":"ElementaryTypeName","src":"2741:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2740:12:17"},"scope":4428,"src":"2681:184:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4360,"nodeType":"Block","src":"2998:111:17","statements":[{"AST":{"nativeSrc":"3060:43:17","nodeType":"YulBlock","src":"3060:43:17","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"3081:4:17","nodeType":"YulIdentifier","src":"3081:4:17"},{"name":"value","nativeSrc":"3087:5:17","nodeType":"YulIdentifier","src":"3087:5:17"}],"functionName":{"name":"tstore","nativeSrc":"3074:6:17","nodeType":"YulIdentifier","src":"3074:6:17"},"nativeSrc":"3074:19:17","nodeType":"YulFunctionCall","src":"3074:19:17"},"nativeSrc":"3074:19:17","nodeType":"YulExpressionStatement","src":"3074:19:17"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":4354,"isOffset":false,"isSlot":false,"src":"3081:4:17","valueSize":1},{"declaration":4356,"isOffset":false,"isSlot":false,"src":"3087:5:17","valueSize":1}],"id":4359,"nodeType":"InlineAssembly","src":"3051:52:17"}]},"documentation":{"id":4351,"nodeType":"StructuredDocumentation","src":"2871:63:17","text":"@dev Store `value` at location `slot` in transient storage."},"id":4361,"implemented":true,"kind":"function","modifiers":[],"name":"tstore","nameLocation":"2948:6:17","nodeType":"FunctionDefinition","parameters":{"id":4357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4354,"mutability":"mutable","name":"slot","nameLocation":"2971:4:17","nodeType":"VariableDeclaration","scope":4361,"src":"2955:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$4251","typeString":"StorageSlotExtension.BooleanSlotType"},"typeName":{"id":4353,"nodeType":"UserDefinedTypeName","pathNode":{"id":4352,"name":"BooleanSlotType","nameLocations":["2955:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":4251,"src":"2955:15:17"},"referencedDeclaration":4251,"src":"2955:15:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BooleanSlotType_$4251","typeString":"StorageSlotExtension.BooleanSlotType"}},"visibility":"internal"},{"constant":false,"id":4356,"mutability":"mutable","name":"value","nameLocation":"2982:5:17","nodeType":"VariableDeclaration","scope":4361,"src":"2977:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4355,"name":"bool","nodeType":"ElementaryTypeName","src":"2977:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2954:34:17"},"returnParameters":{"id":4358,"nodeType":"ParameterList","parameters":[],"src":"2998:0:17"},"scope":4428,"src":"2939:170:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4371,"nodeType":"Block","src":"3264:112:17","statements":[{"AST":{"nativeSrc":"3326:44:17","nodeType":"YulBlock","src":"3326:44:17","statements":[{"nativeSrc":"3340:20:17","nodeType":"YulAssignment","src":"3340:20:17","value":{"arguments":[{"name":"slot","nativeSrc":"3355:4:17","nodeType":"YulIdentifier","src":"3355:4:17"}],"functionName":{"name":"tload","nativeSrc":"3349:5:17","nodeType":"YulIdentifier","src":"3349:5:17"},"nativeSrc":"3349:11:17","nodeType":"YulFunctionCall","src":"3349:11:17"},"variableNames":[{"name":"value","nativeSrc":"3340:5:17","nodeType":"YulIdentifier","src":"3340:5:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":4365,"isOffset":false,"isSlot":false,"src":"3355:4:17","valueSize":1},{"declaration":4368,"isOffset":false,"isSlot":false,"src":"3340:5:17","valueSize":1}],"id":4370,"nodeType":"InlineAssembly","src":"3317:53:17"}]},"documentation":{"id":4362,"nodeType":"StructuredDocumentation","src":"3115:69:17","text":"@dev Load the value held at location `slot` in transient storage."},"id":4372,"implemented":true,"kind":"function","modifiers":[],"name":"tload","nameLocation":"3198:5:17","nodeType":"FunctionDefinition","parameters":{"id":4366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4365,"mutability":"mutable","name":"slot","nameLocation":"3220:4:17","nodeType":"VariableDeclaration","scope":4372,"src":"3204:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$4268","typeString":"StorageSlotExtension.Bytes32SlotType"},"typeName":{"id":4364,"nodeType":"UserDefinedTypeName","pathNode":{"id":4363,"name":"Bytes32SlotType","nameLocations":["3204:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":4268,"src":"3204:15:17"},"referencedDeclaration":4268,"src":"3204:15:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$4268","typeString":"StorageSlotExtension.Bytes32SlotType"}},"visibility":"internal"}],"src":"3203:22:17"},"returnParameters":{"id":4369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4368,"mutability":"mutable","name":"value","nameLocation":"3257:5:17","nodeType":"VariableDeclaration","scope":4372,"src":"3249:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3249:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3248:15:17"},"scope":4428,"src":"3189:187:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4382,"nodeType":"Block","src":"3512:111:17","statements":[{"AST":{"nativeSrc":"3574:43:17","nodeType":"YulBlock","src":"3574:43:17","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"3595:4:17","nodeType":"YulIdentifier","src":"3595:4:17"},{"name":"value","nativeSrc":"3601:5:17","nodeType":"YulIdentifier","src":"3601:5:17"}],"functionName":{"name":"tstore","nativeSrc":"3588:6:17","nodeType":"YulIdentifier","src":"3588:6:17"},"nativeSrc":"3588:19:17","nodeType":"YulFunctionCall","src":"3588:19:17"},"nativeSrc":"3588:19:17","nodeType":"YulExpressionStatement","src":"3588:19:17"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":4376,"isOffset":false,"isSlot":false,"src":"3595:4:17","valueSize":1},{"declaration":4378,"isOffset":false,"isSlot":false,"src":"3601:5:17","valueSize":1}],"id":4381,"nodeType":"InlineAssembly","src":"3565:52:17"}]},"documentation":{"id":4373,"nodeType":"StructuredDocumentation","src":"3382:63:17","text":"@dev Store `value` at location `slot` in transient storage."},"id":4383,"implemented":true,"kind":"function","modifiers":[],"name":"tstore","nameLocation":"3459:6:17","nodeType":"FunctionDefinition","parameters":{"id":4379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4376,"mutability":"mutable","name":"slot","nameLocation":"3482:4:17","nodeType":"VariableDeclaration","scope":4383,"src":"3466:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$4268","typeString":"StorageSlotExtension.Bytes32SlotType"},"typeName":{"id":4375,"nodeType":"UserDefinedTypeName","pathNode":{"id":4374,"name":"Bytes32SlotType","nameLocations":["3466:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":4268,"src":"3466:15:17"},"referencedDeclaration":4268,"src":"3466:15:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Bytes32SlotType_$4268","typeString":"StorageSlotExtension.Bytes32SlotType"}},"visibility":"internal"},{"constant":false,"id":4378,"mutability":"mutable","name":"value","nameLocation":"3496:5:17","nodeType":"VariableDeclaration","scope":4383,"src":"3488:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3488:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3465:37:17"},"returnParameters":{"id":4380,"nodeType":"ParameterList","parameters":[],"src":"3512:0:17"},"scope":4428,"src":"3450:173:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4393,"nodeType":"Block","src":"3778:112:17","statements":[{"AST":{"nativeSrc":"3840:44:17","nodeType":"YulBlock","src":"3840:44:17","statements":[{"nativeSrc":"3854:20:17","nodeType":"YulAssignment","src":"3854:20:17","value":{"arguments":[{"name":"slot","nativeSrc":"3869:4:17","nodeType":"YulIdentifier","src":"3869:4:17"}],"functionName":{"name":"tload","nativeSrc":"3863:5:17","nodeType":"YulIdentifier","src":"3863:5:17"},"nativeSrc":"3863:11:17","nodeType":"YulFunctionCall","src":"3863:11:17"},"variableNames":[{"name":"value","nativeSrc":"3854:5:17","nodeType":"YulIdentifier","src":"3854:5:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":4387,"isOffset":false,"isSlot":false,"src":"3869:4:17","valueSize":1},{"declaration":4390,"isOffset":false,"isSlot":false,"src":"3854:5:17","valueSize":1}],"id":4392,"nodeType":"InlineAssembly","src":"3831:53:17"}]},"documentation":{"id":4384,"nodeType":"StructuredDocumentation","src":"3629:69:17","text":"@dev Load the value held at location `slot` in transient storage."},"id":4394,"implemented":true,"kind":"function","modifiers":[],"name":"tload","nameLocation":"3712:5:17","nodeType":"FunctionDefinition","parameters":{"id":4388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4387,"mutability":"mutable","name":"slot","nameLocation":"3734:4:17","nodeType":"VariableDeclaration","scope":4394,"src":"3718:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$4285","typeString":"StorageSlotExtension.Uint256SlotType"},"typeName":{"id":4386,"nodeType":"UserDefinedTypeName","pathNode":{"id":4385,"name":"Uint256SlotType","nameLocations":["3718:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":4285,"src":"3718:15:17"},"referencedDeclaration":4285,"src":"3718:15:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$4285","typeString":"StorageSlotExtension.Uint256SlotType"}},"visibility":"internal"}],"src":"3717:22:17"},"returnParameters":{"id":4391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4390,"mutability":"mutable","name":"value","nameLocation":"3771:5:17","nodeType":"VariableDeclaration","scope":4394,"src":"3763:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4389,"name":"uint256","nodeType":"ElementaryTypeName","src":"3763:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3762:15:17"},"scope":4428,"src":"3703:187:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4404,"nodeType":"Block","src":"4026:111:17","statements":[{"AST":{"nativeSrc":"4088:43:17","nodeType":"YulBlock","src":"4088:43:17","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"4109:4:17","nodeType":"YulIdentifier","src":"4109:4:17"},{"name":"value","nativeSrc":"4115:5:17","nodeType":"YulIdentifier","src":"4115:5:17"}],"functionName":{"name":"tstore","nativeSrc":"4102:6:17","nodeType":"YulIdentifier","src":"4102:6:17"},"nativeSrc":"4102:19:17","nodeType":"YulFunctionCall","src":"4102:19:17"},"nativeSrc":"4102:19:17","nodeType":"YulExpressionStatement","src":"4102:19:17"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":4398,"isOffset":false,"isSlot":false,"src":"4109:4:17","valueSize":1},{"declaration":4400,"isOffset":false,"isSlot":false,"src":"4115:5:17","valueSize":1}],"id":4403,"nodeType":"InlineAssembly","src":"4079:52:17"}]},"documentation":{"id":4395,"nodeType":"StructuredDocumentation","src":"3896:63:17","text":"@dev Store `value` at location `slot` in transient storage."},"id":4405,"implemented":true,"kind":"function","modifiers":[],"name":"tstore","nameLocation":"3973:6:17","nodeType":"FunctionDefinition","parameters":{"id":4401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4398,"mutability":"mutable","name":"slot","nameLocation":"3996:4:17","nodeType":"VariableDeclaration","scope":4405,"src":"3980:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$4285","typeString":"StorageSlotExtension.Uint256SlotType"},"typeName":{"id":4397,"nodeType":"UserDefinedTypeName","pathNode":{"id":4396,"name":"Uint256SlotType","nameLocations":["3980:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":4285,"src":"3980:15:17"},"referencedDeclaration":4285,"src":"3980:15:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Uint256SlotType_$4285","typeString":"StorageSlotExtension.Uint256SlotType"}},"visibility":"internal"},{"constant":false,"id":4400,"mutability":"mutable","name":"value","nameLocation":"4010:5:17","nodeType":"VariableDeclaration","scope":4405,"src":"4002:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4399,"name":"uint256","nodeType":"ElementaryTypeName","src":"4002:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3979:37:17"},"returnParameters":{"id":4402,"nodeType":"ParameterList","parameters":[],"src":"4026:0:17"},"scope":4428,"src":"3964:173:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4415,"nodeType":"Block","src":"4290:112:17","statements":[{"AST":{"nativeSrc":"4352:44:17","nodeType":"YulBlock","src":"4352:44:17","statements":[{"nativeSrc":"4366:20:17","nodeType":"YulAssignment","src":"4366:20:17","value":{"arguments":[{"name":"slot","nativeSrc":"4381:4:17","nodeType":"YulIdentifier","src":"4381:4:17"}],"functionName":{"name":"tload","nativeSrc":"4375:5:17","nodeType":"YulIdentifier","src":"4375:5:17"},"nativeSrc":"4375:11:17","nodeType":"YulFunctionCall","src":"4375:11:17"},"variableNames":[{"name":"value","nativeSrc":"4366:5:17","nodeType":"YulIdentifier","src":"4366:5:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":4409,"isOffset":false,"isSlot":false,"src":"4381:4:17","valueSize":1},{"declaration":4412,"isOffset":false,"isSlot":false,"src":"4366:5:17","valueSize":1}],"id":4414,"nodeType":"InlineAssembly","src":"4343:53:17"}]},"documentation":{"id":4406,"nodeType":"StructuredDocumentation","src":"4143:69:17","text":"@dev Load the value held at location `slot` in transient storage."},"id":4416,"implemented":true,"kind":"function","modifiers":[],"name":"tload","nameLocation":"4226:5:17","nodeType":"FunctionDefinition","parameters":{"id":4410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4409,"mutability":"mutable","name":"slot","nameLocation":"4247:4:17","nodeType":"VariableDeclaration","scope":4416,"src":"4232:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$4302","typeString":"StorageSlotExtension.Int256SlotType"},"typeName":{"id":4408,"nodeType":"UserDefinedTypeName","pathNode":{"id":4407,"name":"Int256SlotType","nameLocations":["4232:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":4302,"src":"4232:14:17"},"referencedDeclaration":4302,"src":"4232:14:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$4302","typeString":"StorageSlotExtension.Int256SlotType"}},"visibility":"internal"}],"src":"4231:21:17"},"returnParameters":{"id":4413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4412,"mutability":"mutable","name":"value","nameLocation":"4283:5:17","nodeType":"VariableDeclaration","scope":4416,"src":"4276:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4411,"name":"int256","nodeType":"ElementaryTypeName","src":"4276:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4275:14:17"},"scope":4428,"src":"4217:185:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4426,"nodeType":"Block","src":"4536:111:17","statements":[{"AST":{"nativeSrc":"4598:43:17","nodeType":"YulBlock","src":"4598:43:17","statements":[{"expression":{"arguments":[{"name":"slot","nativeSrc":"4619:4:17","nodeType":"YulIdentifier","src":"4619:4:17"},{"name":"value","nativeSrc":"4625:5:17","nodeType":"YulIdentifier","src":"4625:5:17"}],"functionName":{"name":"tstore","nativeSrc":"4612:6:17","nodeType":"YulIdentifier","src":"4612:6:17"},"nativeSrc":"4612:19:17","nodeType":"YulFunctionCall","src":"4612:19:17"},"nativeSrc":"4612:19:17","nodeType":"YulExpressionStatement","src":"4612:19:17"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":4420,"isOffset":false,"isSlot":false,"src":"4619:4:17","valueSize":1},{"declaration":4422,"isOffset":false,"isSlot":false,"src":"4625:5:17","valueSize":1}],"id":4425,"nodeType":"InlineAssembly","src":"4589:52:17"}]},"documentation":{"id":4417,"nodeType":"StructuredDocumentation","src":"4408:63:17","text":"@dev Store `value` at location `slot` in transient storage."},"id":4427,"implemented":true,"kind":"function","modifiers":[],"name":"tstore","nameLocation":"4485:6:17","nodeType":"FunctionDefinition","parameters":{"id":4423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4420,"mutability":"mutable","name":"slot","nameLocation":"4507:4:17","nodeType":"VariableDeclaration","scope":4427,"src":"4492:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$4302","typeString":"StorageSlotExtension.Int256SlotType"},"typeName":{"id":4419,"nodeType":"UserDefinedTypeName","pathNode":{"id":4418,"name":"Int256SlotType","nameLocations":["4492:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":4302,"src":"4492:14:17"},"referencedDeclaration":4302,"src":"4492:14:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Int256SlotType_$4302","typeString":"StorageSlotExtension.Int256SlotType"}},"visibility":"internal"},{"constant":false,"id":4422,"mutability":"mutable","name":"value","nameLocation":"4520:5:17","nodeType":"VariableDeclaration","scope":4427,"src":"4513:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4421,"name":"int256","nodeType":"ElementaryTypeName","src":"4513:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4491:35:17"},"returnParameters":{"id":4424,"nodeType":"ParameterList","parameters":[],"src":"4536:0:17"},"scope":4428,"src":"4476:171:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":4429,"src":"278:4371:17","usedErrors":[],"usedEvents":[]}],"src":"33:4617:17"},"id":17},"@balancer-labs/v3-vault/contracts/CommonAuthentication.sol":{"ast":{"absolutePath":"@balancer-labs/v3-vault/contracts/CommonAuthentication.sol","exportedSymbols":{"Authentication":[2491],"CommonAuthentication":[4603],"IVault":[651]},"id":4604,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4430,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:18"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","id":4432,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4604,"sourceUnit":652,"src":"72:81:18","symbolAliases":[{"foreign":{"id":4431,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"81:6:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol","file":"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol","id":4434,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4604,"sourceUnit":2492,"src":"154:103:18","symbolAliases":[{"foreign":{"id":4433,"name":"Authentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"163:14:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4436,"name":"Authentication","nameLocations":["390:14:18"],"nodeType":"IdentifierPath","referencedDeclaration":2491,"src":"390:14:18"},"id":4437,"nodeType":"InheritanceSpecifier","src":"390:14:18"}],"canonicalName":"CommonAuthentication","contractDependencies":[],"contractKind":"contract","documentation":{"id":4435,"nodeType":"StructuredDocumentation","src":"259:89:18","text":"@dev Base contract for performing access control on external functions within pools."},"fullyImplemented":true,"id":4603,"linearizedBaseContracts":[4603,2491,47],"name":"CommonAuthentication","nameLocation":"366:20:18","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4440,"mutability":"immutable","name":"_vault","nameLocation":"436:6:18","nodeType":"VariableDeclaration","scope":4603,"src":"411:31:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":4439,"nodeType":"UserDefinedTypeName","pathNode":{"id":4438,"name":"IVault","nameLocations":["411:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"411:6:18"},"referencedDeclaration":651,"src":"411:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"private"},{"body":{"id":4459,"nodeType":"Block","src":"600:161:18","statements":[{"assignments":[4446],"declarations":[{"constant":false,"id":4446,"mutability":"mutable","name":"roleAddress","nameLocation":"618:11:18","nodeType":"VariableDeclaration","scope":4459,"src":"610:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4445,"name":"address","nodeType":"ElementaryTypeName","src":"610:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4452,"initialValue":{"expression":{"arguments":[{"id":4449,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4443,"src":"659:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4447,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4440,"src":"632:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":4448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"639:19:18","memberName":"getPoolRoleAccounts","nodeType":"MemberAccess","referencedDeclaration":1882,"src":"632:26:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_struct$_PoolRoleAccounts_$2217_memory_ptr_$","typeString":"function (address) view external returns (struct PoolRoleAccounts memory)"}},"id":4450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"632:32:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2217_memory_ptr","typeString":"struct PoolRoleAccounts memory"}},"id":4451,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"665:14:18","memberName":"swapFeeManager","nodeType":"MemberAccess","referencedDeclaration":2214,"src":"632:47:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"610:69:18"},{"expression":{"arguments":[{"id":4454,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4443,"src":"725:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4455,"name":"roleAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"731:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4453,"name":"_ensureAuthenticatedByExclusiveRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4571,"src":"689:35:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) view"}},"id":4456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"689:54:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4457,"nodeType":"ExpressionStatement","src":"689:54:18"},{"id":4458,"nodeType":"PlaceholderStatement","src":"753:1:18"}]},"documentation":{"id":4441,"nodeType":"StructuredDocumentation","src":"449:92:18","text":"@notice Caller must be the swapFeeManager, if defined. Otherwise, default to governance."},"id":4460,"name":"onlySwapFeeManagerOrGovernance","nameLocation":"555:30:18","nodeType":"ModifierDefinition","parameters":{"id":4444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4443,"mutability":"mutable","name":"pool","nameLocation":"594:4:18","nodeType":"VariableDeclaration","scope":4460,"src":"586:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4442,"name":"address","nodeType":"ElementaryTypeName","src":"586:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"585:14:18"},"src":"546:215:18","virtual":false,"visibility":"internal"},{"body":{"id":4475,"nodeType":"Block","src":"862:31:18","statements":[{"expression":{"id":4473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4471,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4440,"src":"872:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4472,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4463,"src":"881:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"src":"872:14:18","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":4474,"nodeType":"ExpressionStatement","src":"872:14:18"}]},"id":4476,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4468,"name":"actionIdDisambiguator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4465,"src":"839:21:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4469,"kind":"baseConstructorSpecifier","modifierName":{"id":4467,"name":"Authentication","nameLocations":["824:14:18"],"nodeType":"IdentifierPath","referencedDeclaration":2491,"src":"824:14:18"},"nodeType":"ModifierInvocation","src":"824:37:18"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4463,"mutability":"mutable","name":"vault","nameLocation":"786:5:18","nodeType":"VariableDeclaration","scope":4476,"src":"779:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":4462,"nodeType":"UserDefinedTypeName","pathNode":{"id":4461,"name":"IVault","nameLocations":["779:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"779:6:18"},"referencedDeclaration":651,"src":"779:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"},{"constant":false,"id":4465,"mutability":"mutable","name":"actionIdDisambiguator","nameLocation":"801:21:18","nodeType":"VariableDeclaration","scope":4476,"src":"793:29:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4464,"name":"bytes32","nodeType":"ElementaryTypeName","src":"793:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"778:45:18"},"returnParameters":{"id":4470,"nodeType":"ParameterList","parameters":[],"src":"862:0:18"},"scope":4603,"src":"767:126:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4484,"nodeType":"Block","src":"951:30:18","statements":[{"expression":{"id":4482,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4440,"src":"968:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"functionReturnParameters":4481,"id":4483,"nodeType":"Return","src":"961:13:18"}]},"id":4485,"implemented":true,"kind":"function","modifiers":[],"name":"_getVault","nameLocation":"908:9:18","nodeType":"FunctionDefinition","parameters":{"id":4477,"nodeType":"ParameterList","parameters":[],"src":"917:2:18"},"returnParameters":{"id":4481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4485,"src":"943:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":4479,"nodeType":"UserDefinedTypeName","pathNode":{"id":4478,"name":"IVault","nameLocations":["943:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"943:6:18"},"referencedDeclaration":651,"src":"943:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"}],"src":"942:8:18"},"scope":4603,"src":"899:82:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[2490],"body":{"id":4507,"nodeType":"Block","src":"1163:88:18","statements":[{"expression":{"arguments":[{"id":4499,"name":"actionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4487,"src":"1214:8:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4500,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"1224:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4503,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1238:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_CommonAuthentication_$4603","typeString":"contract CommonAuthentication"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CommonAuthentication_$4603","typeString":"contract CommonAuthentication"}],"id":4502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4501,"name":"address","nodeType":"ElementaryTypeName","src":"1230:7:18","typeDescriptions":{}}},"id":4504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4495,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4440,"src":"1180:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":4496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1187:13:18","memberName":"getAuthorizer","nodeType":"MemberAccess","referencedDeclaration":1965,"src":"1180:20:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IAuthorizer_$73_$","typeString":"function () view external returns (contract IAuthorizer)"}},"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1180:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"}},"id":4498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1203:10:18","memberName":"canPerform","nodeType":"MemberAccess","referencedDeclaration":72,"src":"1180:33:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address,address) view external returns (bool)"}},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1180:64:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4494,"id":4506,"nodeType":"Return","src":"1173:71:18"}]},"id":4508,"implemented":true,"kind":"function","modifiers":[],"name":"_canPerform","nameLocation":"1081:11:18","nodeType":"FunctionDefinition","overrides":{"id":4491,"nodeType":"OverrideSpecifier","overrides":[],"src":"1139:8:18"},"parameters":{"id":4490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4487,"mutability":"mutable","name":"actionId","nameLocation":"1101:8:18","nodeType":"VariableDeclaration","scope":4508,"src":"1093:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4486,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1093:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4489,"mutability":"mutable","name":"user","nameLocation":"1119:4:18","nodeType":"VariableDeclaration","scope":4508,"src":"1111:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4488,"name":"address","nodeType":"ElementaryTypeName","src":"1111:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1092:32:18"},"returnParameters":{"id":4494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4493,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4508,"src":"1157:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4492,"name":"bool","nodeType":"ElementaryTypeName","src":"1157:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1156:6:18"},"scope":4603,"src":"1072:179:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4528,"nodeType":"Block","src":"1357:83:18","statements":[{"expression":{"arguments":[{"id":4523,"name":"actionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"1408:8:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4524,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4512,"src":"1418:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4525,"name":"where","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"1427:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4519,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4440,"src":"1374:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":4520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1381:13:18","memberName":"getAuthorizer","nodeType":"MemberAccess","referencedDeclaration":1965,"src":"1374:20:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IAuthorizer_$73_$","typeString":"function () view external returns (contract IAuthorizer)"}},"id":4521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"}},"id":4522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1397:10:18","memberName":"canPerform","nodeType":"MemberAccess","referencedDeclaration":72,"src":"1374:33:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address,address) view external returns (bool)"}},"id":4526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:59:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4518,"id":4527,"nodeType":"Return","src":"1367:66:18"}]},"id":4529,"implemented":true,"kind":"function","modifiers":[],"name":"_canPerform","nameLocation":"1266:11:18","nodeType":"FunctionDefinition","parameters":{"id":4515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4510,"mutability":"mutable","name":"actionId","nameLocation":"1286:8:18","nodeType":"VariableDeclaration","scope":4529,"src":"1278:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4509,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1278:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4512,"mutability":"mutable","name":"account","nameLocation":"1304:7:18","nodeType":"VariableDeclaration","scope":4529,"src":"1296:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4511,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4514,"mutability":"mutable","name":"where","nameLocation":"1321:5:18","nodeType":"VariableDeclaration","scope":4529,"src":"1313:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4513,"name":"address","nodeType":"ElementaryTypeName","src":"1313:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1277:50:18"},"returnParameters":{"id":4518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4529,"src":"1351:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4516,"name":"bool","nodeType":"ElementaryTypeName","src":"1351:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1350:6:18"},"scope":4603,"src":"1257:183:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4570,"nodeType":"Block","src":"1647:339:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4537,"name":"roleAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"1661:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1684:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4539,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1676:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4538,"name":"address","nodeType":"ElementaryTypeName","src":"1676:7:18","typeDescriptions":{}}},"id":4541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1676:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1661:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4560,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1903:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1907:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1903:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4562,"name":"roleAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"1917:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1903:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4568,"nodeType":"IfStatement","src":"1899:81:18","trueBody":{"id":4567,"nodeType":"Block","src":"1930:50:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4564,"name":"SenderNotAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1951:16:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1951:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4566,"nodeType":"RevertStatement","src":"1944:25:18"}]}},"id":4569,"nodeType":"IfStatement","src":"1657:323:18","trueBody":{"id":4559,"nodeType":"Block","src":"1688:205:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"expression":{"id":4545,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1786:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1790:3:18","memberName":"sig","nodeType":"MemberAccess","src":"1786:7:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":4544,"name":"getActionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"1774:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bytes32_$","typeString":"function (bytes4) view returns (bytes32)"}},"id":4547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1774:20:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4548,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1796:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1800:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1796:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4550,"name":"where","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4532,"src":"1808:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4543,"name":"_canPerform","nodeType":"Identifier","overloadedDeclarations":[4508,4529],"referencedDeclaration":4529,"src":"1762:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address,address) view returns (bool)"}},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1762:52:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":4552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1818:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1762:61:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4558,"nodeType":"IfStatement","src":"1758:125:18","trueBody":{"id":4557,"nodeType":"Block","src":"1825:58:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4554,"name":"SenderNotAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1850:16:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1850:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4556,"nodeType":"RevertStatement","src":"1843:25:18"}]}}]}}]},"documentation":{"id":4530,"nodeType":"StructuredDocumentation","src":"1446:101:18","text":"@dev Ensure the sender is the roleAccount, or default to governance if roleAccount is address(0)."},"id":4571,"implemented":true,"kind":"function","modifiers":[],"name":"_ensureAuthenticatedByExclusiveRole","nameLocation":"1561:35:18","nodeType":"FunctionDefinition","parameters":{"id":4535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4532,"mutability":"mutable","name":"where","nameLocation":"1605:5:18","nodeType":"VariableDeclaration","scope":4571,"src":"1597:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4531,"name":"address","nodeType":"ElementaryTypeName","src":"1597:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4534,"mutability":"mutable","name":"roleAccount","nameLocation":"1620:11:18","nodeType":"VariableDeclaration","scope":4571,"src":"1612:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4533,"name":"address","nodeType":"ElementaryTypeName","src":"1612:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1596:36:18"},"returnParameters":{"id":4536,"nodeType":"ParameterList","parameters":[],"src":"1647:0:18"},"scope":4603,"src":"1552:434:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4601,"nodeType":"Block","src":"2185:352:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4579,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2288:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2292:6:18","memberName":"sender","nodeType":"MemberAccess","src":"2288:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4581,"name":"roleAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"2302:11:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2288:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4600,"nodeType":"IfStatement","src":"2284:180:18","trueBody":{"id":4599,"nodeType":"Block","src":"2315:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"expression":{"id":4585,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2357:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2361:3:18","memberName":"sig","nodeType":"MemberAccess","src":"2357:7:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":4584,"name":"getActionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"2345:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bytes32_$","typeString":"function (bytes4) view returns (bytes32)"}},"id":4587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2345:20:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4588,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2367:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2371:6:18","memberName":"sender","nodeType":"MemberAccess","src":"2367:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4590,"name":"where","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"2379:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4583,"name":"_canPerform","nodeType":"Identifier","overloadedDeclarations":[4508,4529],"referencedDeclaration":4529,"src":"2333:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address,address) view returns (bool)"}},"id":4591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2333:52:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":4592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2389:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2333:61:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4598,"nodeType":"IfStatement","src":"2329:125:18","trueBody":{"id":4597,"nodeType":"Block","src":"2396:58:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4594,"name":"SenderNotAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"2421:16:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2421:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4596,"nodeType":"RevertStatement","src":"2414:25:18"}]}}]}}]},"documentation":{"id":4572,"nodeType":"StructuredDocumentation","src":"1992:102:18","text":"@dev Ensure the sender is either the role manager, or is authorized by governance (non-exclusive)."},"id":4602,"implemented":true,"kind":"function","modifiers":[],"name":"_ensureAuthenticatedByRole","nameLocation":"2108:26:18","nodeType":"FunctionDefinition","parameters":{"id":4577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4574,"mutability":"mutable","name":"where","nameLocation":"2143:5:18","nodeType":"VariableDeclaration","scope":4602,"src":"2135:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4573,"name":"address","nodeType":"ElementaryTypeName","src":"2135:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4576,"mutability":"mutable","name":"roleAccount","nameLocation":"2158:11:18","nodeType":"VariableDeclaration","scope":4602,"src":"2150:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4575,"name":"address","nodeType":"ElementaryTypeName","src":"2150:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2134:36:18"},"returnParameters":{"id":4578,"nodeType":"ParameterList","parameters":[],"src":"2185:0:18"},"scope":4603,"src":"2099:438:18","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4604,"src":"348:2191:18","usedErrors":[38],"usedEvents":[]}],"src":"46:2494:18"},"id":18},"@balancer-labs/v3-vault/contracts/ProtocolFeeController.sol":{"ast":{"absolutePath":"@balancer-labs/v3-vault/contracts/ProtocolFeeController.sol","exportedSymbols":{"FEE_SCALING_FACTOR":[2408],"FixedPoint":[2790],"IERC20":[6654],"IProtocolFeeController":[613],"IVault":[651],"IVaultErrors":[1308],"MAX_FEE_PERCENTAGE":[2411],"PoolRoleAccounts":[2217],"ProtocolFeeController":[6298],"ReentrancyGuardTransient":[4215],"SafeCast":[9014],"SafeERC20":[7006],"SingletonAuthentication":[6357],"VaultGuard":[6406]},"id":6299,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4605,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:19"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":4607,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6299,"sourceUnit":7007,"src":"72:84:19","symbolAliases":[{"foreign":{"id":4606,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7006,"src":"81:9:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"@openzeppelin/contracts/utils/math/SafeCast.sol","id":4609,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6299,"sourceUnit":9015,"src":"157:75:19","symbolAliases":[{"foreign":{"id":4608,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9014,"src":"166:8:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":4611,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6299,"sourceUnit":6655,"src":"233:72:19","symbolAliases":[{"foreign":{"id":4610,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6654,"src":"242:6:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","id":4613,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6299,"sourceUnit":614,"src":"307:113:19","symbolAliases":[{"foreign":{"id":4612,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"316:22:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol","id":4615,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6299,"sourceUnit":1309,"src":"421:93:19","symbolAliases":[{"foreign":{"id":4614,"name":"IVaultErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"430:12:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","id":4617,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6299,"sourceUnit":652,"src":"515:81:19","symbolAliases":[{"foreign":{"id":4616,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"524:6:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","id":4621,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6299,"sourceUnit":2412,"src":"597:147:19","symbolAliases":[{"foreign":{"id":4618,"name":"FEE_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"610:18:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":4619,"name":"MAX_FEE_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2411,"src":"634:18:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":4620,"name":"PoolRoleAccounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"658:16:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol","file":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol","id":4623,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6299,"sourceUnit":4216,"src":"746:132:19","symbolAliases":[{"foreign":{"id":4622,"name":"ReentrancyGuardTransient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4215,"src":"759:24:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol","file":"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol","id":4625,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6299,"sourceUnit":2791,"src":"879:92:19","symbolAliases":[{"foreign":{"id":4624,"name":"FixedPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2790,"src":"888:10:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol","file":"./SingletonAuthentication.sol","id":4627,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6299,"sourceUnit":6358,"src":"973:72:19","symbolAliases":[{"foreign":{"id":4626,"name":"SingletonAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6357,"src":"982:23:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-vault/contracts/VaultGuard.sol","file":"./VaultGuard.sol","id":4629,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6299,"sourceUnit":6407,"src":"1046:46:19","symbolAliases":[{"foreign":{"id":4628,"name":"VaultGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6406,"src":"1055:10:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4631,"name":"IProtocolFeeController","nameLocations":["3158:22:19"],"nodeType":"IdentifierPath","referencedDeclaration":613,"src":"3158:22:19"},"id":4632,"nodeType":"InheritanceSpecifier","src":"3158:22:19"},{"baseName":{"id":4633,"name":"SingletonAuthentication","nameLocations":["3186:23:19"],"nodeType":"IdentifierPath","referencedDeclaration":6357,"src":"3186:23:19"},"id":4634,"nodeType":"InheritanceSpecifier","src":"3186:23:19"},{"baseName":{"id":4635,"name":"ReentrancyGuardTransient","nameLocations":["3215:24:19"],"nodeType":"IdentifierPath","referencedDeclaration":4215,"src":"3215:24:19"},"id":4636,"nodeType":"InheritanceSpecifier","src":"3215:24:19"},{"baseName":{"id":4637,"name":"VaultGuard","nameLocations":["3245:10:19"],"nodeType":"IdentifierPath","referencedDeclaration":6406,"src":"3245:10:19"},"id":4638,"nodeType":"InheritanceSpecifier","src":"3245:10:19"}],"canonicalName":"ProtocolFeeController","contractDependencies":[],"contractKind":"contract","documentation":{"id":4630,"nodeType":"StructuredDocumentation","src":"1094:2025:19","text":" @notice Helper contract to manage protocol and creator fees outside the Vault.\n @dev This contract stores global default protocol swap and yield fees, and also tracks the values of those fees\n for each pool (the `PoolFeeConfig` described below). Protocol fees can always be overwritten by governance, but\n pool creator fees are controlled by the registered poolCreator (see `PoolRoleAccounts`).\n The Vault stores a single aggregate percentage for swap and yield fees; only this `ProtocolFeeController` knows\n the component fee percentages, and how to compute the aggregate from the components. This is done for performance\n reasons, to minimize gas on the critical path, as this way the Vault simply applies a single \"cut\", and stores the\n fee amounts separately from the pool balances.\n The pool creator fees are \"net\" protocol fees, meaning the protocol fee is taken first, and the pool creator fee\n percentage is applied to the remainder. Essentially, the protocol is paid first, then the remainder is divided\n between the pool creator and the LPs.\n There is a permissionless function (`collectAggregateFees`) that transfers these tokens from the Vault to this\n contract, and distributes them between the protocol and pool creator, after which they can be withdrawn at any\n time by governance and the pool creator, respectively.\n Protocol fees can be zero in some cases (e.g., the token is registered as exempt), and pool creator fees are zero\n if there is no creator role address defined. Protocol fees are capped at a maximum percentage (50%); pool creator\n fees are computed \"net\" protocol fees, so they can be any value from 0 to 100%. Any combination is possible.\n A protocol-fee-exempt pool with a 100% pool creator fee would send all fees to the creator. If there is no pool\n creator, a pool with a 50% protocol fee would divide the fees evenly between the protocol and LPs.\n This contract is deployed with the Vault, but can be changed by governance."},"fullyImplemented":true,"id":6298,"linearizedBaseContracts":[6298,6406,4215,6357,4603,2491,47,613],"name":"ProtocolFeeController","nameLocation":"3129:21:19","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4641,"libraryName":{"id":4639,"name":"FixedPoint","nameLocations":["3268:10:19"],"nodeType":"IdentifierPath","referencedDeclaration":2790,"src":"3268:10:19"},"nodeType":"UsingForDirective","src":"3262:29:19","typeName":{"id":4640,"name":"uint256","nodeType":"ElementaryTypeName","src":"3283:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"global":false,"id":4645,"libraryName":{"id":4642,"name":"SafeERC20","nameLocations":["3302:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":7006,"src":"3302:9:19"},"nodeType":"UsingForDirective","src":"3296:27:19","typeName":{"id":4644,"nodeType":"UserDefinedTypeName","pathNode":{"id":4643,"name":"IERC20","nameLocations":["3316:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"3316:6:19"},"referencedDeclaration":6654,"src":"3316:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}}},{"global":false,"id":4647,"libraryName":{"id":4646,"name":"SafeCast","nameLocations":["3334:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":9014,"src":"3334:8:19"},"nodeType":"UsingForDirective","src":"3328:21:19"},{"canonicalName":"ProtocolFeeController.ProtocolFeeType","id":4650,"members":[{"id":4648,"name":"SWAP","nameLocation":"3386:4:19","nodeType":"EnumValue","src":"3386:4:19"},{"id":4649,"name":"YIELD","nameLocation":"3400:5:19","nodeType":"EnumValue","src":"3400:5:19"}],"name":"ProtocolFeeType","nameLocation":"3360:15:19","nodeType":"EnumDefinition","src":"3355:56:19"},{"canonicalName":"ProtocolFeeController.PoolFeeConfig","documentation":{"id":4651,"nodeType":"StructuredDocumentation","src":"3417:1063:19","text":" @notice Fee configuration stored in the swap and yield fee mappings.\n @dev Instead of storing only the fee in the mapping, also store a flag to indicate whether the fee has been\n set by governance through a permissioned call. (The fee is stored in 64-bits, so that the struct fits\n within a single slot.)\n We know the percentage is an 18-decimal FP value, which only takes 60 bits, so it's guaranteed to fit,\n and we can do simple casts to truncate the high bits without needed SafeCast.\n We want to enable permissionless updates for pools, so that it is less onerous to update potentially\n hundreds of pools if the global protocol fees change. However, we don't want to overwrite pools that\n have had their fee percentages manually set by the DAO (i.e., after off-chain negotiation and agreement).\n @param feePercentage The raw swap or yield fee percentage\n @param isOverride When set, this fee is controlled by governance, and cannot be changed permissionlessly"},"id":4656,"members":[{"constant":false,"id":4653,"mutability":"mutable","name":"feePercentage","nameLocation":"4523:13:19","nodeType":"VariableDeclaration","scope":4656,"src":"4516:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4652,"name":"uint64","nodeType":"ElementaryTypeName","src":"4516:6:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4655,"mutability":"mutable","name":"isOverride","nameLocation":"4551:10:19","nodeType":"VariableDeclaration","scope":4656,"src":"4546:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4654,"name":"bool","nodeType":"ElementaryTypeName","src":"4546:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"PoolFeeConfig","nameLocation":"4492:13:19","nodeType":"StructDefinition","scope":6298,"src":"4485:83:19","visibility":"public"},{"constant":true,"functionSelector":"2772d156","id":4659,"mutability":"constant","name":"MAX_PROTOCOL_SWAP_FEE_PERCENTAGE","nameLocation":"4685:32:19","nodeType":"VariableDeclaration","scope":6298,"src":"4661:64:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4657,"name":"uint256","nodeType":"ElementaryTypeName","src":"4661:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3530653136","id":4658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4720:5:19","typeDescriptions":{"typeIdentifier":"t_rational_500000000000000000_by_1","typeString":"int_const 500000000000000000"},"value":"50e16"},"visibility":"public"},{"constant":true,"functionSelector":"5e32e4e8","id":4662,"mutability":"constant","name":"MAX_PROTOCOL_YIELD_FEE_PERCENTAGE","nameLocation":"4809:33:19","nodeType":"VariableDeclaration","scope":6298,"src":"4785:65:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4660,"name":"uint256","nodeType":"ElementaryTypeName","src":"4785:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3530653136","id":4661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4845:5:19","typeDescriptions":{"typeIdentifier":"t_rational_500000000000000000_by_1","typeString":"int_const 500000000000000000"},"value":"50e16"},"visibility":"public"},{"constant":true,"functionSelector":"2e1d388d","id":4665,"mutability":"constant","name":"MAX_CREATOR_FEE_PERCENTAGE","nameLocation":"4946:26:19","nodeType":"VariableDeclaration","scope":6298,"src":"4922:62:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4663,"name":"uint256","nodeType":"ElementaryTypeName","src":"4922:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"39392e393939653136","id":4664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4975:9:19","typeDescriptions":{"typeIdentifier":"t_rational_999990000000000000_by_1","typeString":"int_const 999990000000000000"},"value":"99.999e16"},"visibility":"public"},{"constant":false,"id":4667,"mutability":"mutable","name":"_globalProtocolSwapFeePercentage","nameLocation":"5051:32:19","nodeType":"VariableDeclaration","scope":6298,"src":"5035:48:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4666,"name":"uint256","nodeType":"ElementaryTypeName","src":"5035:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4669,"mutability":"mutable","name":"_globalProtocolYieldFeePercentage","nameLocation":"5140:33:19","nodeType":"VariableDeclaration","scope":6298,"src":"5124:49:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4668,"name":"uint256","nodeType":"ElementaryTypeName","src":"5124:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4674,"mutability":"mutable","name":"_poolProtocolSwapFeePercentages","nameLocation":"5356:31:19","nodeType":"VariableDeclaration","scope":6298,"src":"5294:93:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig)"},"typeName":{"id":4673,"keyName":"pool","keyNameLocation":"5310:4:19","keyType":{"id":4670,"name":"address","nodeType":"ElementaryTypeName","src":"5302:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"5294:52:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig)"},"valueName":"swapFeeConfig","valueNameLocation":"5332:13:19","valueType":{"id":4672,"nodeType":"UserDefinedTypeName","pathNode":{"id":4671,"name":"PoolFeeConfig","nameLocations":["5318:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":4656,"src":"5318:13:19"},"referencedDeclaration":4656,"src":"5318:13:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig"}}},"visibility":"internal"},{"constant":false,"id":4679,"mutability":"mutable","name":"_poolProtocolYieldFeePercentages","nameLocation":"5572:32:19","nodeType":"VariableDeclaration","scope":6298,"src":"5509:95:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig)"},"typeName":{"id":4678,"keyName":"pool","keyNameLocation":"5525:4:19","keyType":{"id":4675,"name":"address","nodeType":"ElementaryTypeName","src":"5517:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"5509:53:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig)"},"valueName":"yieldFeeConfig","valueNameLocation":"5547:14:19","valueType":{"id":4677,"nodeType":"UserDefinedTypeName","pathNode":{"id":4676,"name":"PoolFeeConfig","nameLocations":["5533:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":4656,"src":"5533:13:19"},"referencedDeclaration":4656,"src":"5533:13:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig"}}},"visibility":"internal"},{"constant":false,"id":4683,"mutability":"mutable","name":"_registeredPools","nameLocation":"5777:16:19","nodeType":"VariableDeclaration","scope":6298,"src":"5725:68:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4682,"keyName":"pool","keyNameLocation":"5741:4:19","keyType":{"id":4680,"name":"address","nodeType":"ElementaryTypeName","src":"5733:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"5725:42:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"isRegistered","valueNameLocation":"5754:12:19","valueType":{"id":4681,"name":"bool","nodeType":"ElementaryTypeName","src":"5749:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":4687,"mutability":"mutable","name":"_poolCreatorSwapFeePercentages","nameLocation":"5917:30:19","nodeType":"VariableDeclaration","scope":6298,"src":"5856:91:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4686,"keyName":"pool","keyNameLocation":"5872:4:19","keyType":{"id":4684,"name":"address","nodeType":"ElementaryTypeName","src":"5864:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"5856:51:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"poolCreatorSwapFee","valueNameLocation":"5888:18:19","valueType":{"id":4685,"name":"uint256","nodeType":"ElementaryTypeName","src":"5880:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":4691,"mutability":"mutable","name":"_poolCreatorYieldFeePercentages","nameLocation":"6073:31:19","nodeType":"VariableDeclaration","scope":6298,"src":"6011:93:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4690,"keyName":"pool","keyNameLocation":"6027:4:19","keyType":{"id":4688,"name":"address","nodeType":"ElementaryTypeName","src":"6019:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"6011:52:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"poolCreatorYieldFee","valueNameLocation":"6043:19:19","valueType":{"id":4689,"name":"uint256","nodeType":"ElementaryTypeName","src":"6035:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":4698,"mutability":"mutable","name":"_protocolFeeAmounts","nameLocation":"6290:19:19","nodeType":"VariableDeclaration","scope":6298,"src":"6209:100:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"},"typeName":{"id":4697,"keyName":"pool","keyNameLocation":"6225:4:19","keyType":{"id":4692,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"6209:71:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4696,"keyName":"poolToken","keyNameLocation":"6248:9:19","keyType":{"id":4694,"nodeType":"UserDefinedTypeName","pathNode":{"id":4693,"name":"IERC20","nameLocations":["6241:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"6241:6:19"},"referencedDeclaration":6654,"src":"6241:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"6233:46:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"},"valueName":"feeAmount","valueNameLocation":"6269:9:19","valueType":{"id":4695,"name":"uint256","nodeType":"ElementaryTypeName","src":"6261:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"},{"constant":false,"id":4705,"mutability":"mutable","name":"_poolCreatorFeeAmounts","nameLocation":"6505:22:19","nodeType":"VariableDeclaration","scope":6298,"src":"6424:103:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"},"typeName":{"id":4704,"keyName":"pool","keyNameLocation":"6440:4:19","keyType":{"id":4699,"name":"address","nodeType":"ElementaryTypeName","src":"6432:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"6424:71:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4703,"keyName":"poolToken","keyNameLocation":"6463:9:19","keyType":{"id":4701,"nodeType":"UserDefinedTypeName","pathNode":{"id":4700,"name":"IERC20","nameLocations":["6456:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"6456:6:19"},"referencedDeclaration":6654,"src":"6456:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"6448:46:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"},"valueName":"feeAmount","valueNameLocation":"6484:9:19","valueType":{"id":4702,"name":"uint256","nodeType":"ElementaryTypeName","src":"6476:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"},{"documentation":{"id":4706,"nodeType":"StructuredDocumentation","src":"6534:279:19","text":" @notice Prevent pool data from being registered more than once.\n @dev This can happen if there is an error in the migration, or if governance somehow grants permission to\n `migratePool`, which should never happen.\n @param pool The pool"},"errorSelector":"db771c80","id":4710,"name":"PoolAlreadyRegistered","nameLocation":"6824:21:19","nodeType":"ErrorDefinition","parameters":{"id":4709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4708,"mutability":"mutable","name":"pool","nameLocation":"6854:4:19","nodeType":"VariableDeclaration","scope":4710,"src":"6846:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4707,"name":"address","nodeType":"ElementaryTypeName","src":"6846:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6845:14:19"},"src":"6818:42:19"},{"documentation":{"id":4711,"nodeType":"StructuredDocumentation","src":"6866:53:19","text":"@notice Migration source cannot be this contract."},"errorSelector":"b82fd5bf","id":4713,"name":"InvalidMigrationSource","nameLocation":"6930:22:19","nodeType":"ErrorDefinition","parameters":{"id":4712,"nodeType":"ParameterList","parameters":[],"src":"6952:2:19"},"src":"6924:31:19"},{"body":{"id":4722,"nodeType":"Block","src":"7051:60:19","statements":[{"expression":{"arguments":[{"id":4718,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4715,"src":"7088:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4717,"name":"_ensureCallerIsPoolCreator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5519,"src":"7061:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$__$","typeString":"function (address) view"}},"id":4719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7061:32:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4720,"nodeType":"ExpressionStatement","src":"7061:32:19"},{"id":4721,"nodeType":"PlaceholderStatement","src":"7103:1:19"}]},"id":4723,"name":"onlyPoolCreator","nameLocation":"7021:15:19","nodeType":"ModifierDefinition","parameters":{"id":4716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4715,"mutability":"mutable","name":"pool","nameLocation":"7045:4:19","nodeType":"VariableDeclaration","scope":4723,"src":"7037:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4714,"name":"address","nodeType":"ElementaryTypeName","src":"7037:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7036:14:19"},"src":"7012:99:19","virtual":false,"visibility":"internal"},{"body":{"id":4740,"nodeType":"Block","src":"7234:207:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4727,"name":"newSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4725,"src":"7248:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4728,"name":"MAX_PROTOCOL_SWAP_FEE_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"7271:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7248:55:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4734,"nodeType":"IfStatement","src":"7244:127:19","trueBody":{"id":4733,"nodeType":"Block","src":"7305:66:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4730,"name":"ProtocolSwapFeePercentageTooHigh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"7326:32:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7326:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4732,"nodeType":"RevertStatement","src":"7319:41:19"}]}},{"expression":{"arguments":[{"id":4736,"name":"newSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4725,"src":"7402:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4735,"name":"_ensureValidPrecision","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6297,"src":"7380:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7380:43:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4738,"nodeType":"ExpressionStatement","src":"7380:43:19"},{"id":4739,"nodeType":"PlaceholderStatement","src":"7433:1:19"}]},"id":4741,"name":"withValidSwapFee","nameLocation":"7187:16:19","nodeType":"ModifierDefinition","parameters":{"id":4726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4725,"mutability":"mutable","name":"newSwapFeePercentage","nameLocation":"7212:20:19","nodeType":"VariableDeclaration","scope":4741,"src":"7204:28:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4724,"name":"uint256","nodeType":"ElementaryTypeName","src":"7204:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7203:30:19"},"src":"7178:263:19","virtual":false,"visibility":"internal"},{"body":{"id":4758,"nodeType":"Block","src":"7567:211:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4745,"name":"newYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4743,"src":"7581:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4746,"name":"MAX_PROTOCOL_YIELD_FEE_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"7605:33:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:57:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4752,"nodeType":"IfStatement","src":"7577:130:19","trueBody":{"id":4751,"nodeType":"Block","src":"7640:67:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4748,"name":"ProtocolYieldFeePercentageTooHigh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"7661:33:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7661:35:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4750,"nodeType":"RevertStatement","src":"7654:42:19"}]}},{"expression":{"arguments":[{"id":4754,"name":"newYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4743,"src":"7738:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4753,"name":"_ensureValidPrecision","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6297,"src":"7716:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":4755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7716:44:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4756,"nodeType":"ExpressionStatement","src":"7716:44:19"},{"id":4757,"nodeType":"PlaceholderStatement","src":"7770:1:19"}]},"id":4759,"name":"withValidYieldFee","nameLocation":"7518:17:19","nodeType":"ModifierDefinition","parameters":{"id":4744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4743,"mutability":"mutable","name":"newYieldFeePercentage","nameLocation":"7544:21:19","nodeType":"VariableDeclaration","scope":4759,"src":"7536:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4742,"name":"uint256","nodeType":"ElementaryTypeName","src":"7536:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7535:31:19"},"src":"7509:269:19","virtual":false,"visibility":"internal"},{"body":{"id":4772,"nodeType":"Block","src":"7854:154:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4763,"name":"newPoolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4761,"src":"7868:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4764,"name":"MAX_CREATOR_FEE_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4665,"src":"7898:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7868:56:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4770,"nodeType":"IfStatement","src":"7864:127:19","trueBody":{"id":4769,"nodeType":"Block","src":"7926:65:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4766,"name":"PoolCreatorFeePercentageTooHigh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"7947:31:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7947:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4768,"nodeType":"RevertStatement","src":"7940:40:19"}]}},{"id":4771,"nodeType":"PlaceholderStatement","src":"8000:1:19"}]},"id":4773,"name":"withValidPoolCreatorFee","nameLocation":"7793:23:19","nodeType":"ModifierDefinition","parameters":{"id":4762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4761,"mutability":"mutable","name":"newPoolCreatorFeePercentage","nameLocation":"7825:27:19","nodeType":"VariableDeclaration","scope":4773,"src":"7817:35:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4760,"name":"uint256","nodeType":"ElementaryTypeName","src":"7817:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7816:37:19"},"src":"7784:224:19","virtual":false,"visibility":"internal"},{"body":{"id":4782,"nodeType":"Block","src":"8145:54:19","statements":[{"expression":{"arguments":[{"id":4778,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4775,"src":"8176:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4777,"name":"collectAggregateFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4836,"src":"8155:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8155:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4780,"nodeType":"ExpressionStatement","src":"8155:26:19"},{"id":4781,"nodeType":"PlaceholderStatement","src":"8191:1:19"}]},"id":4783,"name":"withLatestFees","nameLocation":"8116:14:19","nodeType":"ModifierDefinition","parameters":{"id":4776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4775,"mutability":"mutable","name":"pool","nameLocation":"8139:4:19","nodeType":"VariableDeclaration","scope":4783,"src":"8131:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4774,"name":"address","nodeType":"ElementaryTypeName","src":"8131:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8130:14:19"},"src":"8107:92:19","virtual":false,"visibility":"internal"},{"body":{"id":4807,"nodeType":"Block","src":"8394:163:19","statements":[{"expression":{"arguments":[{"id":4800,"name":"initialGlobalSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"8440:30:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4799,"name":"_setGlobalProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5788,"src":"8404:35:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8404:67:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4802,"nodeType":"ExpressionStatement","src":"8404:67:19"},{"expression":{"arguments":[{"id":4804,"name":"initialGlobalYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4790,"src":"8518:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4803,"name":"_setGlobalProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5818,"src":"8481:36:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8481:69:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4806,"nodeType":"ExpressionStatement","src":"8481:69:19"}]},"id":4808,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4793,"name":"vault_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"8367:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}}],"id":4794,"kind":"baseConstructorSpecifier","modifierName":{"id":4792,"name":"SingletonAuthentication","nameLocations":["8343:23:19"],"nodeType":"IdentifierPath","referencedDeclaration":6357,"src":"8343:23:19"},"nodeType":"ModifierInvocation","src":"8343:31:19"},{"arguments":[{"id":4796,"name":"vault_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"8386:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}}],"id":4797,"kind":"baseConstructorSpecifier","modifierName":{"id":4795,"name":"VaultGuard","nameLocations":["8375:10:19"],"nodeType":"IdentifierPath","referencedDeclaration":6406,"src":"8375:10:19"},"nodeType":"ModifierInvocation","src":"8375:18:19"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4786,"mutability":"mutable","name":"vault_","nameLocation":"8233:6:19","nodeType":"VariableDeclaration","scope":4808,"src":"8226:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":4785,"nodeType":"UserDefinedTypeName","pathNode":{"id":4784,"name":"IVault","nameLocations":["8226:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"8226:6:19"},"referencedDeclaration":651,"src":"8226:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"},{"constant":false,"id":4788,"mutability":"mutable","name":"initialGlobalSwapFeePercentage","nameLocation":"8257:30:19","nodeType":"VariableDeclaration","scope":4808,"src":"8249:38:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4787,"name":"uint256","nodeType":"ElementaryTypeName","src":"8249:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4790,"mutability":"mutable","name":"initialGlobalYieldFeePercentage","nameLocation":"8305:31:19","nodeType":"VariableDeclaration","scope":4808,"src":"8297:39:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4789,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8216:126:19"},"returnParameters":{"id":4798,"nodeType":"ParameterList","parameters":[],"src":"8394:0:19"},"scope":6298,"src":"8205:352:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[419],"body":{"id":4817,"nodeType":"Block","src":"8654:30:19","statements":[{"expression":{"id":4815,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"8671:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"functionReturnParameters":4814,"id":4816,"nodeType":"Return","src":"8664:13:19"}]},"documentation":{"id":4809,"nodeType":"StructuredDocumentation","src":"8563:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"fbfa77cf","id":4818,"implemented":true,"kind":"function","modifiers":[],"name":"vault","nameLocation":"8615:5:19","nodeType":"FunctionDefinition","parameters":{"id":4810,"nodeType":"ParameterList","parameters":[],"src":"8620:2:19"},"returnParameters":{"id":4814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4813,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4818,"src":"8646:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":4812,"nodeType":"UserDefinedTypeName","pathNode":{"id":4811,"name":"IVault","nameLocations":["8646:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"8646:6:19"},"referencedDeclaration":651,"src":"8646:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"}],"src":"8645:8:19"},"scope":6298,"src":"8606:78:19","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[425],"body":{"id":4835,"nodeType":"Block","src":"8784:100:19","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4829,"name":"ProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6298,"src":"8823:21:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProtocolFeeController_$6298_$","typeString":"type(contract ProtocolFeeController)"}},"id":4830,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8845:24:19","memberName":"collectAggregateFeesHook","nodeType":"MemberAccess","referencedDeclaration":4864,"src":"8823:46:19","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$returns$__$","typeString":"function ProtocolFeeController.collectAggregateFeesHook(address)"}},{"id":4831,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"8871:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$returns$__$","typeString":"function ProtocolFeeController.collectAggregateFeesHook(address)"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4827,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8808:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4828,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8812:10:19","memberName":"encodeCall","nodeType":"MemberAccess","src":"8808:14:19","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8808:68:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4824,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"8794:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":4826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8801:6:19","memberName":"unlock","nodeType":"MemberAccess","referencedDeclaration":1980,"src":"8794:13:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) external returns (bytes memory)"}},"id":4833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8794:83:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4834,"nodeType":"ExpressionStatement","src":"8794:83:19"}]},"documentation":{"id":4819,"nodeType":"StructuredDocumentation","src":"8690:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"8f4ab9ca","id":4836,"implemented":true,"kind":"function","modifiers":[],"name":"collectAggregateFees","nameLocation":"8742:20:19","nodeType":"FunctionDefinition","parameters":{"id":4822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4821,"mutability":"mutable","name":"pool","nameLocation":"8771:4:19","nodeType":"VariableDeclaration","scope":4836,"src":"8763:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4820,"name":"address","nodeType":"ElementaryTypeName","src":"8763:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8762:14:19"},"returnParameters":{"id":4823,"nodeType":"ParameterList","parameters":[],"src":"8784:0:19"},"scope":6298,"src":"8733:151:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4863,"nodeType":"Block","src":"9267:186:19","statements":[{"assignments":[4848,4851],"declarations":[{"constant":false,"id":4848,"mutability":"mutable","name":"totalSwapFees","nameLocation":"9295:13:19","nodeType":"VariableDeclaration","scope":4863,"src":"9278:30:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4846,"name":"uint256","nodeType":"ElementaryTypeName","src":"9278:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4847,"nodeType":"ArrayTypeName","src":"9278:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4851,"mutability":"mutable","name":"totalYieldFees","nameLocation":"9327:14:19","nodeType":"VariableDeclaration","scope":4863,"src":"9310:31:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4849,"name":"uint256","nodeType":"ElementaryTypeName","src":"9310:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4850,"nodeType":"ArrayTypeName","src":"9310:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4856,"initialValue":{"arguments":[{"id":4854,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4839,"src":"9373:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4852,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"9345:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":4853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9352:20:19","memberName":"collectAggregateFees","nodeType":"MemberAccess","referencedDeclaration":779,"src":"9345:27:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address) external returns (uint256[] memory,uint256[] memory)"}},"id":4855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9345:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(uint256[] memory,uint256[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"9277:101:19"},{"expression":{"arguments":[{"id":4858,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4839,"src":"9410:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4859,"name":"totalSwapFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"9416:13:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4860,"name":"totalYieldFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4851,"src":"9431:14:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":4857,"name":"_receiveAggregateFees","nodeType":"Identifier","overloadedDeclarations":[4891,5095],"referencedDeclaration":4891,"src":"9388:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory)"}},"id":4861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9388:58:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4862,"nodeType":"ExpressionStatement","src":"9388:58:19"}]},"documentation":{"id":4837,"nodeType":"StructuredDocumentation","src":"8890:305:19","text":" @dev Copy and zero out the `aggregateFeeAmounts` collected in the Vault accounting, supplying credit\n for each token. Then have the Vault transfer tokens to this contract, debiting each token for the amount\n transferred so that the transaction settles when the hook returns."},"functionSelector":"fa399f2a","id":4864,"implemented":true,"kind":"function","modifiers":[{"id":4842,"kind":"modifierInvocation","modifierName":{"id":4841,"name":"onlyVault","nameLocations":["9257:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":6385,"src":"9257:9:19"},"nodeType":"ModifierInvocation","src":"9257:9:19"}],"name":"collectAggregateFeesHook","nameLocation":"9209:24:19","nodeType":"FunctionDefinition","parameters":{"id":4840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4839,"mutability":"mutable","name":"pool","nameLocation":"9242:4:19","nodeType":"VariableDeclaration","scope":4864,"src":"9234:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4838,"name":"address","nodeType":"ElementaryTypeName","src":"9234:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9233:14:19"},"returnParameters":{"id":4843,"nodeType":"ParameterList","parameters":[],"src":"9267:0:19"},"scope":6298,"src":"9200:253:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4890,"nodeType":"Block","src":"10544:159:19","statements":[{"expression":{"arguments":[{"id":4877,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4867,"src":"10576:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4878,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"10582:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":4879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10598:4:19","memberName":"SWAP","nodeType":"MemberAccess","referencedDeclaration":4648,"src":"10582:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},{"id":4880,"name":"swapFeeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"10604:14:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":4876,"name":"_receiveAggregateFees","nodeType":"Identifier","overloadedDeclarations":[4891,5095],"referencedDeclaration":5095,"src":"10554:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_enum$_ProtocolFeeType_$4650_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,enum ProtocolFeeController.ProtocolFeeType,uint256[] memory)"}},"id":4881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10554:65:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4882,"nodeType":"ExpressionStatement","src":"10554:65:19"},{"expression":{"arguments":[{"id":4884,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4867,"src":"10651:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4885,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"10657:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":4886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10673:5:19","memberName":"YIELD","nodeType":"MemberAccess","referencedDeclaration":4649,"src":"10657:21:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},{"id":4887,"name":"yieldFeeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"10680:15:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":4883,"name":"_receiveAggregateFees","nodeType":"Identifier","overloadedDeclarations":[4891,5095],"referencedDeclaration":5095,"src":"10629:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_enum$_ProtocolFeeType_$4650_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,enum ProtocolFeeController.ProtocolFeeType,uint256[] memory)"}},"id":4888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10629:67:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4889,"nodeType":"ExpressionStatement","src":"10629:67:19"}]},"documentation":{"id":4865,"nodeType":"StructuredDocumentation","src":"9459:929:19","text":" @notice Settle fee credits from the Vault.\n @dev This must be called after calling `collectAggregateFees` in the Vault. Note that since charging protocol\n fees (i.e., distributing tokens between pool and fee balances) occurs in the Vault, but fee collection\n happens in the ProtocolFeeController, the swap fees reported here may encompass multiple operations. The Vault\n differentiates between swap and yield fees (since they can have different percentage values); the Controller\n combines swap and yield fees, then allocates the total between the protocol and pool creator.\n @param pool The address of the pool on which the swap fees were charged\n @param swapFeeAmounts An array with the total swap fees collected, sorted in token registration order\n @param yieldFeeAmounts An array with the total yield fees collected, sorted in token registration order"},"id":4891,"implemented":true,"kind":"function","modifiers":[],"name":"_receiveAggregateFees","nameLocation":"10402:21:19","nodeType":"FunctionDefinition","parameters":{"id":4874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4867,"mutability":"mutable","name":"pool","nameLocation":"10441:4:19","nodeType":"VariableDeclaration","scope":4891,"src":"10433:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4866,"name":"address","nodeType":"ElementaryTypeName","src":"10433:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4870,"mutability":"mutable","name":"swapFeeAmounts","nameLocation":"10472:14:19","nodeType":"VariableDeclaration","scope":4891,"src":"10455:31:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4868,"name":"uint256","nodeType":"ElementaryTypeName","src":"10455:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4869,"nodeType":"ArrayTypeName","src":"10455:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4873,"mutability":"mutable","name":"yieldFeeAmounts","nameLocation":"10513:15:19","nodeType":"VariableDeclaration","scope":4891,"src":"10496:32:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4871,"name":"uint256","nodeType":"ElementaryTypeName","src":"10496:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4872,"nodeType":"ArrayTypeName","src":"10496:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10423:111:19"},"returnParameters":{"id":4875,"nodeType":"ParameterList","parameters":[],"src":"10544:0:19"},"scope":6298,"src":"10393:310:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5094,"nodeType":"Block","src":"10816:2992:19","statements":[{"assignments":[4903],"declarations":[{"constant":false,"id":4903,"mutability":"mutable","name":"protocolFeePercentage","nameLocation":"11056:21:19","nodeType":"VariableDeclaration","scope":5094,"src":"11048:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4902,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4917,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"},"id":4907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4904,"name":"feeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"11080:7:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4905,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"11091:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":4906,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11107:4:19","memberName":"SWAP","nodeType":"MemberAccess","referencedDeclaration":4648,"src":"11091:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"src":"11080:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"baseExpression":{"id":4912,"name":"_poolProtocolYieldFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4679,"src":"11192:32:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":4914,"indexExpression":{"id":4913,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"11225:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11192:38:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"id":4915,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11231:13:19","memberName":"feePercentage","nodeType":"MemberAccess","referencedDeclaration":4653,"src":"11192:52:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":4916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11080:164:19","trueExpression":{"expression":{"baseExpression":{"id":4908,"name":"_poolProtocolSwapFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"11126:31:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":4910,"indexExpression":{"id":4909,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"11158:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11126:37:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"id":4911,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11164:13:19","memberName":"feePercentage","nodeType":"MemberAccess","referencedDeclaration":4653,"src":"11126:51:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"11048:196:19"},{"assignments":[4919],"declarations":[{"constant":false,"id":4919,"mutability":"mutable","name":"poolCreatorFeePercentage","nameLocation":"11263:24:19","nodeType":"VariableDeclaration","scope":5094,"src":"11255:32:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4918,"name":"uint256","nodeType":"ElementaryTypeName","src":"11255:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4931,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"},"id":4923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4920,"name":"feeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"11290:7:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4921,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"11301:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":4922,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11317:4:19","memberName":"SWAP","nodeType":"MemberAccess","referencedDeclaration":4648,"src":"11301:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"src":"11290:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":4927,"name":"_poolCreatorYieldFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4691,"src":"11387:31:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4929,"indexExpression":{"id":4928,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"11419:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11387:37:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11290:134:19","trueExpression":{"baseExpression":{"id":4924,"name":"_poolCreatorSwapFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4687,"src":"11336:30:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4926,"indexExpression":{"id":4925,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"11367:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11336:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11255:169:19"},{"assignments":[4933],"declarations":[{"constant":false,"id":4933,"mutability":"mutable","name":"aggregateFeePercentage","nameLocation":"11443:22:19","nodeType":"VariableDeclaration","scope":5094,"src":"11435:30:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4932,"name":"uint256","nodeType":"ElementaryTypeName","src":"11435:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4934,"nodeType":"VariableDeclarationStatement","src":"11435:30:19"},{"assignments":[4936],"declarations":[{"constant":false,"id":4936,"mutability":"mutable","name":"needToSplitFees","nameLocation":"11481:15:19","nodeType":"VariableDeclaration","scope":5094,"src":"11476:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4935,"name":"bool","nodeType":"ElementaryTypeName","src":"11476:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4944,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4937,"name":"poolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4919,"src":"11499:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11526:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11499:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4940,"name":"protocolFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4903,"src":"11531:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11555:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11531:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11499:57:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"11476:80:19"},{"condition":{"id":4945,"name":"needToSplitFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4936,"src":"11570:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4954,"nodeType":"IfStatement","src":"11566:199:19","trueBody":{"id":4953,"nodeType":"Block","src":"11587:178:19","statements":[{"expression":{"id":4951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4946,"name":"aggregateFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"11650:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4948,"name":"protocolFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4903,"src":"11706:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4949,"name":"poolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4919,"src":"11729:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4947,"name":"_computeAggregateFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5483,"src":"11675:30:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11675:79:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11650:104:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4952,"nodeType":"ExpressionStatement","src":"11650:104:19"}]}},{"assignments":[4959,4961],"declarations":[{"constant":false,"id":4959,"mutability":"mutable","name":"poolTokens","nameLocation":"11792:10:19","nodeType":"VariableDeclaration","scope":5094,"src":"11776:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":4957,"nodeType":"UserDefinedTypeName","pathNode":{"id":4956,"name":"IERC20","nameLocations":["11776:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"11776:6:19"},"referencedDeclaration":6654,"src":"11776:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":4958,"nodeType":"ArrayTypeName","src":"11776:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":4961,"mutability":"mutable","name":"numTokens","nameLocation":"11812:9:19","nodeType":"VariableDeclaration","scope":5094,"src":"11804:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4960,"name":"uint256","nodeType":"ElementaryTypeName","src":"11804:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4965,"initialValue":{"arguments":[{"id":4963,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"11848:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4962,"name":"_getPoolTokensAndCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5543,"src":"11825:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr_$_t_uint256_$","typeString":"function (address) view returns (contract IERC20[] memory,uint256)"}},"id":4964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11825:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(contract IERC20[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"11775:78:19"},{"body":{"id":5092,"nodeType":"Block","src":"11903:1899:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4976,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"11921:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4978,"indexExpression":{"id":4977,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"11932:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11921:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11937:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11921:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5091,"nodeType":"IfStatement","src":"11917:1875:19","trueBody":{"id":5090,"nodeType":"Block","src":"11940:1852:19","statements":[{"assignments":[4983],"declarations":[{"constant":false,"id":4983,"mutability":"mutable","name":"token","nameLocation":"11965:5:19","nodeType":"VariableDeclaration","scope":5090,"src":"11958:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":4982,"nodeType":"UserDefinedTypeName","pathNode":{"id":4981,"name":"IERC20","nameLocations":["11958:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"11958:6:19"},"referencedDeclaration":6654,"src":"11958:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"id":4987,"initialValue":{"baseExpression":{"id":4984,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4959,"src":"11973:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":4986,"indexExpression":{"id":4985,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"11984:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11973:13:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"11958:28:19"},{"expression":{"arguments":[{"id":4991,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"12019:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},{"arguments":[{"id":4994,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12034:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeController_$6298","typeString":"contract ProtocolFeeController"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeController_$6298","typeString":"contract ProtocolFeeController"}],"id":4993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12026:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4992,"name":"address","nodeType":"ElementaryTypeName","src":"12026:7:19","typeDescriptions":{}}},"id":4995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12026:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":4996,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"12041:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4998,"indexExpression":{"id":4997,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"12052:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12041:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4988,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"12005:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12012:6:19","memberName":"sendTo","nodeType":"MemberAccess","referencedDeclaration":2002,"src":"12005:13:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_contract$_IERC20_$6654_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256) external"}},"id":4999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12005:50:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5000,"nodeType":"ExpressionStatement","src":"12005:50:19"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"},"id":5004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5001,"name":"feeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"12234:7:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5002,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"12245:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":5003,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12261:4:19","memberName":"SWAP","nodeType":"MemberAccess","referencedDeclaration":4648,"src":"12245:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"src":"12234:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5022,"nodeType":"Block","src":"12371:99:19","statements":[{"eventCall":{"arguments":[{"id":5015,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"12424:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5016,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"12430:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},{"baseExpression":{"id":5017,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"12437:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5019,"indexExpression":{"id":5018,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"12448:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12437:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5014,"name":"ProtocolYieldFeeCollected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"12398:25:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_contract$_IERC20_$6654_$_t_uint256_$returns$__$","typeString":"function (address,contract IERC20,uint256)"}},"id":5020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12398:53:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5021,"nodeType":"EmitStatement","src":"12393:58:19"}]},"id":5023,"nodeType":"IfStatement","src":"12230:240:19","trueBody":{"id":5013,"nodeType":"Block","src":"12267:98:19","statements":[{"eventCall":{"arguments":[{"id":5006,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"12319:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5007,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"12325:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},{"baseExpression":{"id":5008,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"12332:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5010,"indexExpression":{"id":5009,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"12343:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12332:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5005,"name":"ProtocolSwapFeeCollected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"12294:24:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_contract$_IERC20_$6654_$_t_uint256_$returns$__$","typeString":"function (address,contract IERC20,uint256)"}},"id":5011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12294:52:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5012,"nodeType":"EmitStatement","src":"12289:57:19"}]}},{"condition":{"id":5024,"name":"needToSplitFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4936,"src":"12492:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5088,"nodeType":"Block","src":"13422:356:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5062,"name":"poolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4919,"src":"13524:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13552:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13524:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5086,"nodeType":"Block","src":"13659:101:19","statements":[{"expression":{"id":5084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5076,"name":"_poolCreatorFeeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"13685:22:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"}},"id":5079,"indexExpression":{"id":5077,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"13708:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13685:28:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":5080,"indexExpression":{"id":5078,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"13714:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13685:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":5081,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"13724:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5083,"indexExpression":{"id":5082,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"13735:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13724:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13685:52:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5085,"nodeType":"ExpressionStatement","src":"13685:52:19"}]},"id":5087,"nodeType":"IfStatement","src":"13520:240:19","trueBody":{"id":5075,"nodeType":"Block","src":"13555:98:19","statements":[{"expression":{"id":5073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5065,"name":"_protocolFeeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4698,"src":"13581:19:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"}},"id":5068,"indexExpression":{"id":5066,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"13601:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13581:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":5069,"indexExpression":{"id":5067,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"13607:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13581:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":5070,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"13617:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5072,"indexExpression":{"id":5071,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"13628:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13617:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13581:49:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5074,"nodeType":"ExpressionStatement","src":"13581:49:19"}]}}]},"id":5089,"nodeType":"IfStatement","src":"12488:1290:19","trueBody":{"id":5061,"nodeType":"Block","src":"12509:907:19","statements":[{"assignments":[5026],"declarations":[{"constant":false,"id":5026,"mutability":"mutable","name":"totalFeeAmountRaw","nameLocation":"13074:17:19","nodeType":"VariableDeclaration","scope":5061,"src":"13066:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5025,"name":"uint256","nodeType":"ElementaryTypeName","src":"13066:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5033,"initialValue":{"arguments":[{"id":5031,"name":"aggregateFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4933,"src":"13114:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":5027,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"13094:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5029,"indexExpression":{"id":5028,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"13105:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13094:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13108:5:19","memberName":"divUp","nodeType":"MemberAccess","referencedDeclaration":2588,"src":"13094:19:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13094:43:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13066:71:19"},{"assignments":[5035],"declarations":[{"constant":false,"id":5035,"mutability":"mutable","name":"protocolPortion","nameLocation":"13167:15:19","nodeType":"VariableDeclaration","scope":5061,"src":"13159:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5034,"name":"uint256","nodeType":"ElementaryTypeName","src":"13159:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5040,"initialValue":{"arguments":[{"id":5038,"name":"protocolFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4903,"src":"13209:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5036,"name":"totalFeeAmountRaw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"13185:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13203:5:19","memberName":"mulUp","nodeType":"MemberAccess","referencedDeclaration":2552,"src":"13185:23:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13185:46:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13159:72:19"},{"expression":{"id":5047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5041,"name":"_protocolFeeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4698,"src":"13254:19:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"}},"id":5044,"indexExpression":{"id":5042,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"13274:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13254:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":5045,"indexExpression":{"id":5043,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"13280:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13254:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5046,"name":"protocolPortion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5035,"src":"13290:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13254:51:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5048,"nodeType":"ExpressionStatement","src":"13254:51:19"},{"expression":{"id":5059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5049,"name":"_poolCreatorFeeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"13327:22:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"}},"id":5052,"indexExpression":{"id":5050,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"13350:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13327:28:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":5053,"indexExpression":{"id":5051,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"13356:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13327:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5054,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"13366:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5056,"indexExpression":{"id":5055,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"13377:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13366:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5057,"name":"protocolPortion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5035,"src":"13382:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13366:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13327:70:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5060,"nodeType":"ExpressionStatement","src":"13327:70:19"}]}}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4970,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"11883:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4971,"name":"numTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4961,"src":"11887:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11883:13:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5093,"initializationExpression":{"assignments":[4967],"declarations":[{"constant":false,"id":4967,"mutability":"mutable","name":"i","nameLocation":"11876:1:19","nodeType":"VariableDeclaration","scope":5093,"src":"11868:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4966,"name":"uint256","nodeType":"ElementaryTypeName","src":"11868:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4969,"initialValue":{"hexValue":"30","id":4968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11880:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11868:13:19"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":4974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"11898:3:19","subExpression":{"id":4973,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"11900:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4975,"nodeType":"ExpressionStatement","src":"11898:3:19"},"nodeType":"ForStatement","src":"11863:1939:19"}]},"id":5095,"implemented":true,"kind":"function","modifiers":[],"name":"_receiveAggregateFees","nameLocation":"10718:21:19","nodeType":"FunctionDefinition","parameters":{"id":4900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4893,"mutability":"mutable","name":"pool","nameLocation":"10748:4:19","nodeType":"VariableDeclaration","scope":5095,"src":"10740:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4892,"name":"address","nodeType":"ElementaryTypeName","src":"10740:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4896,"mutability":"mutable","name":"feeType","nameLocation":"10770:7:19","nodeType":"VariableDeclaration","scope":5095,"src":"10754:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"},"typeName":{"id":4895,"nodeType":"UserDefinedTypeName","pathNode":{"id":4894,"name":"ProtocolFeeType","nameLocations":["10754:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":4650,"src":"10754:15:19"},"referencedDeclaration":4650,"src":"10754:15:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"visibility":"internal"},{"constant":false,"id":4899,"mutability":"mutable","name":"feeAmounts","nameLocation":"10796:10:19","nodeType":"VariableDeclaration","scope":5095,"src":"10779:27:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4897,"name":"uint256","nodeType":"ElementaryTypeName","src":"10779:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4898,"nodeType":"ArrayTypeName","src":"10779:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10739:68:19"},"returnParameters":{"id":4901,"nodeType":"ParameterList","parameters":[],"src":"10816:0:19"},"scope":6298,"src":"10709:3099:19","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"baseFunctions":[431],"body":{"id":5103,"nodeType":"Block","src":"13935:56:19","statements":[{"expression":{"id":5101,"name":"_globalProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"13952:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5100,"id":5102,"nodeType":"Return","src":"13945:39:19"}]},"documentation":{"id":5096,"nodeType":"StructuredDocumentation","src":"13814:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"7869ee18","id":5104,"implemented":true,"kind":"function","modifiers":[],"name":"getGlobalProtocolSwapFeePercentage","nameLocation":"13866:34:19","nodeType":"FunctionDefinition","parameters":{"id":5097,"nodeType":"ParameterList","parameters":[],"src":"13900:2:19"},"returnParameters":{"id":5100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5099,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5104,"src":"13926:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5098,"name":"uint256","nodeType":"ElementaryTypeName","src":"13926:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13925:9:19"},"scope":6298,"src":"13857:134:19","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[437],"body":{"id":5112,"nodeType":"Block","src":"14119:57:19","statements":[{"expression":{"id":5110,"name":"_globalProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"14136:33:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5109,"id":5111,"nodeType":"Return","src":"14129:40:19"}]},"documentation":{"id":5105,"nodeType":"StructuredDocumentation","src":"13997:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"55fb76af","id":5113,"implemented":true,"kind":"function","modifiers":[],"name":"getGlobalProtocolYieldFeePercentage","nameLocation":"14049:35:19","nodeType":"FunctionDefinition","parameters":{"id":5106,"nodeType":"ParameterList","parameters":[],"src":"14084:2:19"},"returnParameters":{"id":5109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5113,"src":"14110:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5107,"name":"uint256","nodeType":"ElementaryTypeName","src":"14110:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14109:9:19"},"scope":6298,"src":"14040:136:19","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[445],"body":{"id":5125,"nodeType":"Block","src":"14294:46:19","statements":[{"expression":{"baseExpression":{"id":5121,"name":"_registeredPools","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"14311:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5123,"indexExpression":{"id":5122,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"14328:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14311:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5120,"id":5124,"nodeType":"Return","src":"14304:29:19"}]},"documentation":{"id":5114,"nodeType":"StructuredDocumentation","src":"14182:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"c673bdaf","id":5126,"implemented":true,"kind":"function","modifiers":[],"name":"isPoolRegistered","nameLocation":"14234:16:19","nodeType":"FunctionDefinition","parameters":{"id":5117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5116,"mutability":"mutable","name":"pool","nameLocation":"14259:4:19","nodeType":"VariableDeclaration","scope":5126,"src":"14251:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5115,"name":"address","nodeType":"ElementaryTypeName","src":"14251:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14250:14:19"},"returnParameters":{"id":5120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5126,"src":"14288:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5118,"name":"bool","nodeType":"ElementaryTypeName","src":"14288:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14287:6:19"},"scope":6298,"src":"14225:115:19","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[455],"body":{"id":5149,"nodeType":"Block","src":"14477:143:19","statements":[{"assignments":[5138],"declarations":[{"constant":false,"id":5138,"mutability":"mutable","name":"config","nameLocation":"14508:6:19","nodeType":"VariableDeclaration","scope":5149,"src":"14487:27:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig"},"typeName":{"id":5137,"nodeType":"UserDefinedTypeName","pathNode":{"id":5136,"name":"PoolFeeConfig","nameLocations":["14487:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":4656,"src":"14487:13:19"},"referencedDeclaration":4656,"src":"14487:13:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig"}},"visibility":"internal"}],"id":5142,"initialValue":{"baseExpression":{"id":5139,"name":"_poolProtocolSwapFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"14517:31:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":5141,"indexExpression":{"id":5140,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5129,"src":"14549:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14517:37:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"nodeType":"VariableDeclarationStatement","src":"14487:67:19"},{"expression":{"components":[{"expression":{"id":5143,"name":"config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5138,"src":"14573:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"id":5144,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14580:13:19","memberName":"feePercentage","nodeType":"MemberAccess","referencedDeclaration":4653,"src":"14573:20:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"expression":{"id":5145,"name":"config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5138,"src":"14595:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"id":5146,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14602:10:19","memberName":"isOverride","nodeType":"MemberAccess","referencedDeclaration":4655,"src":"14595:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5147,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14572:41:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_bool_$","typeString":"tuple(uint64,bool)"}},"functionReturnParameters":5135,"id":5148,"nodeType":"Return","src":"14565:48:19"}]},"documentation":{"id":5127,"nodeType":"StructuredDocumentation","src":"14346:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"5c15a0b4","id":5150,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolProtocolSwapFeeInfo","nameLocation":"14398:26:19","nodeType":"FunctionDefinition","parameters":{"id":5130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5129,"mutability":"mutable","name":"pool","nameLocation":"14433:4:19","nodeType":"VariableDeclaration","scope":5150,"src":"14425:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5128,"name":"address","nodeType":"ElementaryTypeName","src":"14425:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14424:14:19"},"returnParameters":{"id":5135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5150,"src":"14462:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5131,"name":"uint256","nodeType":"ElementaryTypeName","src":"14462:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5150,"src":"14471:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5133,"name":"bool","nodeType":"ElementaryTypeName","src":"14471:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14461:15:19"},"scope":6298,"src":"14389:231:19","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[465],"body":{"id":5173,"nodeType":"Block","src":"14758:144:19","statements":[{"assignments":[5162],"declarations":[{"constant":false,"id":5162,"mutability":"mutable","name":"config","nameLocation":"14789:6:19","nodeType":"VariableDeclaration","scope":5173,"src":"14768:27:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig"},"typeName":{"id":5161,"nodeType":"UserDefinedTypeName","pathNode":{"id":5160,"name":"PoolFeeConfig","nameLocations":["14768:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":4656,"src":"14768:13:19"},"referencedDeclaration":4656,"src":"14768:13:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig"}},"visibility":"internal"}],"id":5166,"initialValue":{"baseExpression":{"id":5163,"name":"_poolProtocolYieldFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4679,"src":"14798:32:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":5165,"indexExpression":{"id":5164,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5153,"src":"14831:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14798:38:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"nodeType":"VariableDeclarationStatement","src":"14768:68:19"},{"expression":{"components":[{"expression":{"id":5167,"name":"config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5162,"src":"14855:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"id":5168,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14862:13:19","memberName":"feePercentage","nodeType":"MemberAccess","referencedDeclaration":4653,"src":"14855:20:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"expression":{"id":5169,"name":"config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5162,"src":"14877:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"id":5170,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14884:10:19","memberName":"isOverride","nodeType":"MemberAccess","referencedDeclaration":4655,"src":"14877:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5171,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14854:41:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_bool_$","typeString":"tuple(uint64,bool)"}},"functionReturnParameters":5159,"id":5172,"nodeType":"Return","src":"14847:48:19"}]},"documentation":{"id":5151,"nodeType":"StructuredDocumentation","src":"14626:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"7a2b97dc","id":5174,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolProtocolYieldFeeInfo","nameLocation":"14678:27:19","nodeType":"FunctionDefinition","parameters":{"id":5154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5153,"mutability":"mutable","name":"pool","nameLocation":"14714:4:19","nodeType":"VariableDeclaration","scope":5174,"src":"14706:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5152,"name":"address","nodeType":"ElementaryTypeName","src":"14706:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14705:14:19"},"returnParameters":{"id":5159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5156,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5174,"src":"14743:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5155,"name":"uint256","nodeType":"ElementaryTypeName","src":"14743:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5174,"src":"14752:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5157,"name":"bool","nodeType":"ElementaryTypeName","src":"14752:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14742:15:19"},"scope":6298,"src":"14669:233:19","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[473],"body":{"id":5186,"nodeType":"Block","src":"15038:60:19","statements":[{"expression":{"baseExpression":{"id":5182,"name":"_poolCreatorSwapFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4687,"src":"15055:30:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5184,"indexExpression":{"id":5183,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5177,"src":"15086:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15055:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5181,"id":5185,"nodeType":"Return","src":"15048:43:19"}]},"documentation":{"id":5175,"nodeType":"StructuredDocumentation","src":"14908:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"0b8e059b","id":5187,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolCreatorSwapFeePercentage","nameLocation":"14960:31:19","nodeType":"FunctionDefinition","parameters":{"id":5178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5177,"mutability":"mutable","name":"pool","nameLocation":"15000:4:19","nodeType":"VariableDeclaration","scope":5187,"src":"14992:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5176,"name":"address","nodeType":"ElementaryTypeName","src":"14992:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14991:14:19"},"returnParameters":{"id":5181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5187,"src":"15029:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5179,"name":"uint256","nodeType":"ElementaryTypeName","src":"15029:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15028:9:19"},"scope":6298,"src":"14951:147:19","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[481],"body":{"id":5199,"nodeType":"Block","src":"15235:61:19","statements":[{"expression":{"baseExpression":{"id":5195,"name":"_poolCreatorYieldFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4691,"src":"15252:31:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5197,"indexExpression":{"id":5196,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5190,"src":"15284:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15252:37:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5194,"id":5198,"nodeType":"Return","src":"15245:44:19"}]},"documentation":{"id":5188,"nodeType":"StructuredDocumentation","src":"15104:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"0252aab5","id":5200,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolCreatorYieldFeePercentage","nameLocation":"15156:32:19","nodeType":"FunctionDefinition","parameters":{"id":5191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5190,"mutability":"mutable","name":"pool","nameLocation":"15197:4:19","nodeType":"VariableDeclaration","scope":5200,"src":"15189:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5189,"name":"address","nodeType":"ElementaryTypeName","src":"15189:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15188:14:19"},"returnParameters":{"id":5194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5193,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5200,"src":"15226:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5192,"name":"uint256","nodeType":"ElementaryTypeName","src":"15226:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15225:9:19"},"scope":6298,"src":"15147:149:19","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[490],"body":{"id":5252,"nodeType":"Block","src":"15442:273:19","statements":[{"assignments":[5213,5215],"declarations":[{"constant":false,"id":5213,"mutability":"mutable","name":"poolTokens","nameLocation":"15469:10:19","nodeType":"VariableDeclaration","scope":5252,"src":"15453:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":5211,"nodeType":"UserDefinedTypeName","pathNode":{"id":5210,"name":"IERC20","nameLocations":["15453:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"15453:6:19"},"referencedDeclaration":6654,"src":"15453:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":5212,"nodeType":"ArrayTypeName","src":"15453:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":5215,"mutability":"mutable","name":"numTokens","nameLocation":"15489:9:19","nodeType":"VariableDeclaration","scope":5252,"src":"15481:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5214,"name":"uint256","nodeType":"ElementaryTypeName","src":"15481:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5219,"initialValue":{"arguments":[{"id":5217,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"15525:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5216,"name":"_getPoolTokensAndCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5543,"src":"15502:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr_$_t_uint256_$","typeString":"function (address) view returns (contract IERC20[] memory,uint256)"}},"id":5218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15502:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(contract IERC20[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"15452:78:19"},{"expression":{"id":5226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5220,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"15541:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5224,"name":"numTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5215,"src":"15568:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5223,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"15554:13:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":5221,"name":"uint256","nodeType":"ElementaryTypeName","src":"15558:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5222,"nodeType":"ArrayTypeName","src":"15558:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":5225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15554:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"15541:37:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5227,"nodeType":"ExpressionStatement","src":"15541:37:19"},{"body":{"id":5250,"nodeType":"Block","src":"15628:81:19","statements":[{"expression":{"id":5248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5238,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"15642:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5240,"indexExpression":{"id":5239,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5229,"src":"15653:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15642:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"baseExpression":{"id":5241,"name":"_protocolFeeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4698,"src":"15658:19:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"}},"id":5243,"indexExpression":{"id":5242,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"15678:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15658:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":5247,"indexExpression":{"baseExpression":{"id":5244,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5213,"src":"15684:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":5246,"indexExpression":{"id":5245,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5229,"src":"15695:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15684:13:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15658:40:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15642:56:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5249,"nodeType":"ExpressionStatement","src":"15642:56:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5232,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5229,"src":"15608:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5233,"name":"numTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5215,"src":"15612:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15608:13:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5251,"initializationExpression":{"assignments":[5229],"declarations":[{"constant":false,"id":5229,"mutability":"mutable","name":"i","nameLocation":"15601:1:19","nodeType":"VariableDeclaration","scope":5251,"src":"15593:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5228,"name":"uint256","nodeType":"ElementaryTypeName","src":"15593:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5231,"initialValue":{"hexValue":"30","id":5230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15605:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"15593:13:19"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":5236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"15623:3:19","subExpression":{"id":5235,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5229,"src":"15625:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5237,"nodeType":"ExpressionStatement","src":"15623:3:19"},"nodeType":"ForStatement","src":"15588:121:19"}]},"documentation":{"id":5201,"nodeType":"StructuredDocumentation","src":"15302:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"8df44c54","id":5253,"implemented":true,"kind":"function","modifiers":[],"name":"getProtocolFeeAmounts","nameLocation":"15354:21:19","nodeType":"FunctionDefinition","parameters":{"id":5204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5203,"mutability":"mutable","name":"pool","nameLocation":"15384:4:19","nodeType":"VariableDeclaration","scope":5253,"src":"15376:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5202,"name":"address","nodeType":"ElementaryTypeName","src":"15376:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15375:14:19"},"returnParameters":{"id":5208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5207,"mutability":"mutable","name":"feeAmounts","nameLocation":"15430:10:19","nodeType":"VariableDeclaration","scope":5253,"src":"15413:27:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5205,"name":"uint256","nodeType":"ElementaryTypeName","src":"15413:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5206,"nodeType":"ArrayTypeName","src":"15413:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"15412:29:19"},"scope":6298,"src":"15345:370:19","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[499],"body":{"id":5305,"nodeType":"Block","src":"15864:276:19","statements":[{"assignments":[5266,5268],"declarations":[{"constant":false,"id":5266,"mutability":"mutable","name":"poolTokens","nameLocation":"15891:10:19","nodeType":"VariableDeclaration","scope":5305,"src":"15875:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":5264,"nodeType":"UserDefinedTypeName","pathNode":{"id":5263,"name":"IERC20","nameLocations":["15875:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"15875:6:19"},"referencedDeclaration":6654,"src":"15875:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":5265,"nodeType":"ArrayTypeName","src":"15875:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":5268,"mutability":"mutable","name":"numTokens","nameLocation":"15911:9:19","nodeType":"VariableDeclaration","scope":5305,"src":"15903:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5267,"name":"uint256","nodeType":"ElementaryTypeName","src":"15903:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5272,"initialValue":{"arguments":[{"id":5270,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5256,"src":"15947:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5269,"name":"_getPoolTokensAndCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5543,"src":"15924:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr_$_t_uint256_$","typeString":"function (address) view returns (contract IERC20[] memory,uint256)"}},"id":5271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15924:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(contract IERC20[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"15874:78:19"},{"expression":{"id":5279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5273,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"15963:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5277,"name":"numTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"15990:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"15976:13:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":5274,"name":"uint256","nodeType":"ElementaryTypeName","src":"15980:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5275,"nodeType":"ArrayTypeName","src":"15980:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15976:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"15963:37:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5280,"nodeType":"ExpressionStatement","src":"15963:37:19"},{"body":{"id":5303,"nodeType":"Block","src":"16050:84:19","statements":[{"expression":{"id":5301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5291,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"16064:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5293,"indexExpression":{"id":5292,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5282,"src":"16075:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16064:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"baseExpression":{"id":5294,"name":"_poolCreatorFeeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"16080:22:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"}},"id":5296,"indexExpression":{"id":5295,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5256,"src":"16103:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16080:28:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":5300,"indexExpression":{"baseExpression":{"id":5297,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"16109:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":5299,"indexExpression":{"id":5298,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5282,"src":"16120:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16109:13:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16080:43:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16064:59:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5302,"nodeType":"ExpressionStatement","src":"16064:59:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5285,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5282,"src":"16030:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5286,"name":"numTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"16034:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16030:13:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5304,"initializationExpression":{"assignments":[5282],"declarations":[{"constant":false,"id":5282,"mutability":"mutable","name":"i","nameLocation":"16023:1:19","nodeType":"VariableDeclaration","scope":5304,"src":"16015:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5281,"name":"uint256","nodeType":"ElementaryTypeName","src":"16015:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5284,"initialValue":{"hexValue":"30","id":5283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16027:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"16015:13:19"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":5289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"16045:3:19","subExpression":{"id":5288,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5282,"src":"16047:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5290,"nodeType":"ExpressionStatement","src":"16045:3:19"},"nodeType":"ForStatement","src":"16010:124:19"}]},"documentation":{"id":5254,"nodeType":"StructuredDocumentation","src":"15721:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"9e95f3fd","id":5306,"implemented":true,"kind":"function","modifiers":[],"name":"getPoolCreatorFeeAmounts","nameLocation":"15773:24:19","nodeType":"FunctionDefinition","parameters":{"id":5257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5256,"mutability":"mutable","name":"pool","nameLocation":"15806:4:19","nodeType":"VariableDeclaration","scope":5306,"src":"15798:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5255,"name":"address","nodeType":"ElementaryTypeName","src":"15798:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15797:14:19"},"returnParameters":{"id":5261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5260,"mutability":"mutable","name":"feeAmounts","nameLocation":"15852:10:19","nodeType":"VariableDeclaration","scope":5306,"src":"15835:27:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5258,"name":"uint256","nodeType":"ElementaryTypeName","src":"15835:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5259,"nodeType":"ArrayTypeName","src":"15835:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"15834:29:19"},"scope":6298,"src":"15764:376:19","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[509],"body":{"id":5321,"nodeType":"Block","src":"16347:103:19","statements":[{"expression":{"arguments":[{"id":5317,"name":"protocolFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"16395:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5318,"name":"poolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5311,"src":"16418:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5316,"name":"_computeAggregateFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5483,"src":"16364:30:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16364:79:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5315,"id":5320,"nodeType":"Return","src":"16357:86:19"}]},"documentation":{"id":5307,"nodeType":"StructuredDocumentation","src":"16146:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"0ddd60c6","id":5322,"implemented":true,"kind":"function","modifiers":[],"name":"computeAggregateFeePercentage","nameLocation":"16198:29:19","nodeType":"FunctionDefinition","parameters":{"id":5312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5309,"mutability":"mutable","name":"protocolFeePercentage","nameLocation":"16245:21:19","nodeType":"VariableDeclaration","scope":5322,"src":"16237:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5308,"name":"uint256","nodeType":"ElementaryTypeName","src":"16237:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5311,"mutability":"mutable","name":"poolCreatorFeePercentage","nameLocation":"16284:24:19","nodeType":"VariableDeclaration","scope":5322,"src":"16276:32:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5310,"name":"uint256","nodeType":"ElementaryTypeName","src":"16276:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16227:87:19"},"returnParameters":{"id":5315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5322,"src":"16338:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5313,"name":"uint256","nodeType":"ElementaryTypeName","src":"16338:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16337:9:19"},"scope":6298,"src":"16189:261:19","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[515],"body":{"id":5359,"nodeType":"Block","src":"16584:347:19","statements":[{"assignments":[5333],"declarations":[{"constant":false,"id":5333,"mutability":"mutable","name":"feeConfig","nameLocation":"16615:9:19","nodeType":"VariableDeclaration","scope":5359,"src":"16594:30:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig"},"typeName":{"id":5332,"nodeType":"UserDefinedTypeName","pathNode":{"id":5331,"name":"PoolFeeConfig","nameLocations":["16594:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":4656,"src":"16594:13:19"},"referencedDeclaration":4656,"src":"16594:13:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig"}},"visibility":"internal"}],"id":5337,"initialValue":{"baseExpression":{"id":5334,"name":"_poolProtocolSwapFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"16627:31:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":5336,"indexExpression":{"id":5335,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5325,"src":"16659:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16627:37:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"nodeType":"VariableDeclarationStatement","src":"16594:70:19"},{"assignments":[5339],"declarations":[{"constant":false,"id":5339,"mutability":"mutable","name":"globalProtocolSwapFee","nameLocation":"16682:21:19","nodeType":"VariableDeclaration","scope":5359,"src":"16674:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5338,"name":"uint256","nodeType":"ElementaryTypeName","src":"16674:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5341,"initialValue":{"id":5340,"name":"_globalProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"16706:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16674:64:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5342,"name":"feeConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5333,"src":"16753:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"id":5343,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16763:10:19","memberName":"isOverride","nodeType":"MemberAccess","referencedDeclaration":4655,"src":"16753:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":5344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16777:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"16753:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5346,"name":"globalProtocolSwapFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5339,"src":"16786:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5347,"name":"feeConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5333,"src":"16811:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"id":5348,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16821:13:19","memberName":"feePercentage","nodeType":"MemberAccess","referencedDeclaration":4653,"src":"16811:23:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"16786:48:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16753:81:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5358,"nodeType":"IfStatement","src":"16749:176:19","trueBody":{"id":5357,"nodeType":"Block","src":"16836:89:19","statements":[{"expression":{"arguments":[{"id":5352,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5325,"src":"16879:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5353,"name":"globalProtocolSwapFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5339,"src":"16885:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":5354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16908:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5351,"name":"_updatePoolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6238,"src":"16850:28:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,uint256,bool)"}},"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16850:64:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5356,"nodeType":"ExpressionStatement","src":"16850:64:19"}]}}]},"documentation":{"id":5323,"nodeType":"StructuredDocumentation","src":"16456:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"71ecc8fb","id":5360,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5328,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5325,"src":"16578:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5329,"kind":"modifierInvocation","modifierName":{"id":5327,"name":"withLatestFees","nameLocations":["16563:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":4783,"src":"16563:14:19"},"nodeType":"ModifierInvocation","src":"16563:20:19"}],"name":"updateProtocolSwapFeePercentage","nameLocation":"16508:31:19","nodeType":"FunctionDefinition","parameters":{"id":5326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5325,"mutability":"mutable","name":"pool","nameLocation":"16548:4:19","nodeType":"VariableDeclaration","scope":5360,"src":"16540:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5324,"name":"address","nodeType":"ElementaryTypeName","src":"16540:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16539:14:19"},"returnParameters":{"id":5330,"nodeType":"ParameterList","parameters":[],"src":"16584:0:19"},"scope":6298,"src":"16499:432:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[521],"body":{"id":5397,"nodeType":"Block","src":"17066:353:19","statements":[{"assignments":[5371],"declarations":[{"constant":false,"id":5371,"mutability":"mutable","name":"feeConfig","nameLocation":"17097:9:19","nodeType":"VariableDeclaration","scope":5397,"src":"17076:30:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig"},"typeName":{"id":5370,"nodeType":"UserDefinedTypeName","pathNode":{"id":5369,"name":"PoolFeeConfig","nameLocations":["17076:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":4656,"src":"17076:13:19"},"referencedDeclaration":4656,"src":"17076:13:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig"}},"visibility":"internal"}],"id":5375,"initialValue":{"baseExpression":{"id":5372,"name":"_poolProtocolYieldFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4679,"src":"17109:32:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":5374,"indexExpression":{"id":5373,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5363,"src":"17142:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17109:38:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"nodeType":"VariableDeclarationStatement","src":"17076:71:19"},{"assignments":[5377],"declarations":[{"constant":false,"id":5377,"mutability":"mutable","name":"globalProtocolYieldFee","nameLocation":"17165:22:19","nodeType":"VariableDeclaration","scope":5397,"src":"17157:30:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5376,"name":"uint256","nodeType":"ElementaryTypeName","src":"17157:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5379,"initialValue":{"id":5378,"name":"_globalProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"17190:33:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17157:66:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5380,"name":"feeConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5371,"src":"17238:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"id":5381,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17248:10:19","memberName":"isOverride","nodeType":"MemberAccess","referencedDeclaration":4655,"src":"17238:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":5382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17262:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"17238:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5384,"name":"globalProtocolYieldFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"17271:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5385,"name":"feeConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5371,"src":"17297:9:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"id":5386,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17307:13:19","memberName":"feePercentage","nodeType":"MemberAccess","referencedDeclaration":4653,"src":"17297:23:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"17271:49:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17238:82:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5396,"nodeType":"IfStatement","src":"17234:179:19","trueBody":{"id":5395,"nodeType":"Block","src":"17322:91:19","statements":[{"expression":{"arguments":[{"id":5390,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5363,"src":"17366:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5391,"name":"globalProtocolYieldFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"17372:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":5392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17396:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5389,"name":"_updatePoolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6276,"src":"17336:29:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,uint256,bool)"}},"id":5393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17336:66:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5394,"nodeType":"ExpressionStatement","src":"17336:66:19"}]}}]},"documentation":{"id":5361,"nodeType":"StructuredDocumentation","src":"16937:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"71447ea8","id":5398,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5366,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5363,"src":"17060:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5367,"kind":"modifierInvocation","modifierName":{"id":5365,"name":"withLatestFees","nameLocations":["17045:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":4783,"src":"17045:14:19"},"nodeType":"ModifierInvocation","src":"17045:20:19"}],"name":"updateProtocolYieldFeePercentage","nameLocation":"16989:32:19","nodeType":"FunctionDefinition","parameters":{"id":5364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5363,"mutability":"mutable","name":"pool","nameLocation":"17030:4:19","nodeType":"VariableDeclaration","scope":5398,"src":"17022:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5362,"name":"address","nodeType":"ElementaryTypeName","src":"17022:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17021:14:19"},"returnParameters":{"id":5368,"nodeType":"ParameterList","parameters":[],"src":"17066:0:19"},"scope":6298,"src":"16980:439:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5452,"nodeType":"Block","src":"17532:594:19","statements":[{"assignments":[5409],"declarations":[{"constant":false,"id":5409,"mutability":"mutable","name":"protocolFeePercentage","nameLocation":"17550:21:19","nodeType":"VariableDeclaration","scope":5452,"src":"17542:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5408,"name":"uint256","nodeType":"ElementaryTypeName","src":"17542:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5410,"nodeType":"VariableDeclarationStatement","src":"17542:29:19"},{"assignments":[5412],"declarations":[{"constant":false,"id":5412,"mutability":"mutable","name":"poolCreatorFeePercentage","nameLocation":"17589:24:19","nodeType":"VariableDeclaration","scope":5452,"src":"17581:32:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5411,"name":"uint256","nodeType":"ElementaryTypeName","src":"17581:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5413,"nodeType":"VariableDeclarationStatement","src":"17581:32:19"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"},"id":5417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5414,"name":"feeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5403,"src":"17628:7:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5415,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"17639:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":5416,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17655:4:19","memberName":"SWAP","nodeType":"MemberAccess","referencedDeclaration":4648,"src":"17639:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"src":"17628:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5445,"nodeType":"Block","src":"17844:179:19","statements":[{"expression":{"id":5437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5432,"name":"protocolFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5409,"src":"17858:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":5433,"name":"_poolProtocolYieldFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4679,"src":"17882:32:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":5435,"indexExpression":{"id":5434,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5400,"src":"17915:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17882:38:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"id":5436,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17921:13:19","memberName":"feePercentage","nodeType":"MemberAccess","referencedDeclaration":4653,"src":"17882:52:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"17858:76:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5438,"nodeType":"ExpressionStatement","src":"17858:76:19"},{"expression":{"id":5443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5439,"name":"poolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5412,"src":"17948:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5440,"name":"_poolCreatorYieldFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4691,"src":"17975:31:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5442,"indexExpression":{"id":5441,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5400,"src":"18007:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17975:37:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17948:64:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5444,"nodeType":"ExpressionStatement","src":"17948:64:19"}]},"id":5446,"nodeType":"IfStatement","src":"17624:399:19","trueBody":{"id":5431,"nodeType":"Block","src":"17661:177:19","statements":[{"expression":{"id":5423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5418,"name":"protocolFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5409,"src":"17675:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":5419,"name":"_poolProtocolSwapFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"17699:31:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":5421,"indexExpression":{"id":5420,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5400,"src":"17731:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17699:37:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"id":5422,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17737:13:19","memberName":"feePercentage","nodeType":"MemberAccess","referencedDeclaration":4653,"src":"17699:51:19","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"17675:75:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5424,"nodeType":"ExpressionStatement","src":"17675:75:19"},{"expression":{"id":5429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5425,"name":"poolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5412,"src":"17764:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5426,"name":"_poolCreatorSwapFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4687,"src":"17791:30:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5428,"indexExpression":{"id":5427,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5400,"src":"17822:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17791:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17764:63:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5430,"nodeType":"ExpressionStatement","src":"17764:63:19"}]}},{"expression":{"arguments":[{"id":5448,"name":"protocolFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5409,"src":"18071:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5449,"name":"poolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5412,"src":"18094:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5447,"name":"_computeAggregateFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5483,"src":"18040:30:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18040:79:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5407,"id":5451,"nodeType":"Return","src":"18033:86:19"}]},"id":5453,"implemented":true,"kind":"function","modifiers":[],"name":"_getAggregateFeePercentage","nameLocation":"17434:26:19","nodeType":"FunctionDefinition","parameters":{"id":5404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5400,"mutability":"mutable","name":"pool","nameLocation":"17469:4:19","nodeType":"VariableDeclaration","scope":5453,"src":"17461:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5399,"name":"address","nodeType":"ElementaryTypeName","src":"17461:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5403,"mutability":"mutable","name":"feeType","nameLocation":"17491:7:19","nodeType":"VariableDeclaration","scope":5453,"src":"17475:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"},"typeName":{"id":5402,"nodeType":"UserDefinedTypeName","pathNode":{"id":5401,"name":"ProtocolFeeType","nameLocations":["17475:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":4650,"src":"17475:15:19"},"referencedDeclaration":4650,"src":"17475:15:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"visibility":"internal"}],"src":"17460:39:19"},"returnParameters":{"id":5407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5406,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5453,"src":"17523:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5405,"name":"uint256","nodeType":"ElementaryTypeName","src":"17523:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17522:9:19"},"scope":6298,"src":"17425:701:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5482,"nodeType":"Block","src":"18314:882:19","statements":[{"expression":{"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5462,"name":"aggregateFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5460,"src":"18324:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5463,"name":"protocolFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5455,"src":"18361:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"id":5468,"name":"poolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5457,"src":"18440:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5464,"name":"protocolFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5455,"src":"18397:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18419:10:19","memberName":"complement","nodeType":"MemberAccess","referencedDeclaration":2789,"src":"18397:32:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18397:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18432:7:19","memberName":"mulDown","nodeType":"MemberAccess","referencedDeclaration":2535,"src":"18397:42:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18397:68:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18361:104:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18324:141:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5472,"nodeType":"ExpressionStatement","src":"18324:141:19"},{"expression":{"id":5480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5473,"name":"aggregateFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5460,"src":"19098:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5474,"name":"aggregateFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5460,"src":"19124:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5475,"name":"FEE_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"19149:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19124:43:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5477,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19123:45:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5478,"name":"FEE_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"19171:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19123:66:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19098:91:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5481,"nodeType":"ExpressionStatement","src":"19098:91:19"}]},"id":5483,"implemented":true,"kind":"function","modifiers":[],"name":"_computeAggregateFeePercentage","nameLocation":"18141:30:19","nodeType":"FunctionDefinition","parameters":{"id":5458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5455,"mutability":"mutable","name":"protocolFeePercentage","nameLocation":"18189:21:19","nodeType":"VariableDeclaration","scope":5483,"src":"18181:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5454,"name":"uint256","nodeType":"ElementaryTypeName","src":"18181:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5457,"mutability":"mutable","name":"poolCreatorFeePercentage","nameLocation":"18228:24:19","nodeType":"VariableDeclaration","scope":5483,"src":"18220:32:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5456,"name":"uint256","nodeType":"ElementaryTypeName","src":"18220:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18171:87:19"},"returnParameters":{"id":5461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5460,"mutability":"mutable","name":"aggregateFeePercentage","nameLocation":"18290:22:19","nodeType":"VariableDeclaration","scope":5483,"src":"18282:30:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5459,"name":"uint256","nodeType":"ElementaryTypeName","src":"18282:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18281:32:19"},"scope":6298,"src":"18132:1064:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5518,"nodeType":"Block","src":"19266:276:19","statements":[{"assignments":[5489],"declarations":[{"constant":false,"id":5489,"mutability":"mutable","name":"poolCreator","nameLocation":"19284:11:19","nodeType":"VariableDeclaration","scope":5518,"src":"19276:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5488,"name":"address","nodeType":"ElementaryTypeName","src":"19276:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5493,"initialValue":{"arguments":[{"id":5491,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5485,"src":"19314:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5490,"name":"_getPoolCreator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5562,"src":"19298:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_address_$","typeString":"function (address) view returns (address)"}},"id":5492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19298:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"19276:43:19"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5494,"name":"poolCreator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5489,"src":"19334:11:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19357:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19349:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5495,"name":"address","nodeType":"ElementaryTypeName","src":"19349:7:19","typeDescriptions":{}}},"id":5498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19349:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"19334:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5505,"nodeType":"IfStatement","src":"19330:93:19","trueBody":{"id":5504,"nodeType":"Block","src":"19361:62:19","statements":[{"errorCall":{"arguments":[{"id":5501,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5485,"src":"19407:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5500,"name":"PoolCreatorNotRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"19382:24:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":5502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19382:30:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5503,"nodeType":"RevertStatement","src":"19375:37:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5506,"name":"poolCreator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5489,"src":"19437:11:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5507,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"19452:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19456:6:19","memberName":"sender","nodeType":"MemberAccess","src":"19452:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"19437:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5517,"nodeType":"IfStatement","src":"19433:103:19","trueBody":{"id":5516,"nodeType":"Block","src":"19464:72:19","statements":[{"errorCall":{"arguments":[{"expression":{"id":5511,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"19508:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19512:6:19","memberName":"sender","nodeType":"MemberAccess","src":"19508:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5513,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5485,"src":"19520:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5510,"name":"CallerIsNotPoolCreator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"19485:22:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$","typeString":"function (address,address) pure returns (error)"}},"id":5514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19485:40:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5515,"nodeType":"RevertStatement","src":"19478:47:19"}]}}]},"id":5519,"implemented":true,"kind":"function","modifiers":[],"name":"_ensureCallerIsPoolCreator","nameLocation":"19211:26:19","nodeType":"FunctionDefinition","parameters":{"id":5486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5485,"mutability":"mutable","name":"pool","nameLocation":"19246:4:19","nodeType":"VariableDeclaration","scope":5519,"src":"19238:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5484,"name":"address","nodeType":"ElementaryTypeName","src":"19238:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19237:14:19"},"returnParameters":{"id":5487,"nodeType":"ParameterList","parameters":[],"src":"19266:0:19"},"scope":6298,"src":"19202:340:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5542,"nodeType":"Block","src":"19660:87:19","statements":[{"expression":{"id":5535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5530,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5526,"src":"19670:6:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5533,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5521,"src":"19700:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5531,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"19679:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":5532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19686:13:19","memberName":"getPoolTokens","nodeType":"MemberAccess","referencedDeclaration":1685,"src":"19679:20:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr_$","typeString":"function (address) view external returns (contract IERC20[] memory)"}},"id":5534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19679:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"src":"19670:35:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":5536,"nodeType":"ExpressionStatement","src":"19670:35:19"},{"expression":{"id":5540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5537,"name":"numTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5528,"src":"19715:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5538,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5526,"src":"19727:6:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":5539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19734:6:19","memberName":"length","nodeType":"MemberAccess","src":"19727:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19715:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5541,"nodeType":"ExpressionStatement","src":"19715:25:19"}]},"id":5543,"implemented":true,"kind":"function","modifiers":[],"name":"_getPoolTokensAndCount","nameLocation":"19557:22:19","nodeType":"FunctionDefinition","parameters":{"id":5522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5521,"mutability":"mutable","name":"pool","nameLocation":"19588:4:19","nodeType":"VariableDeclaration","scope":5543,"src":"19580:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5520,"name":"address","nodeType":"ElementaryTypeName","src":"19580:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19579:14:19"},"returnParameters":{"id":5529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5526,"mutability":"mutable","name":"tokens","nameLocation":"19633:6:19","nodeType":"VariableDeclaration","scope":5543,"src":"19617:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":5524,"nodeType":"UserDefinedTypeName","pathNode":{"id":5523,"name":"IERC20","nameLocations":["19617:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"19617:6:19"},"referencedDeclaration":6654,"src":"19617:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":5525,"nodeType":"ArrayTypeName","src":"19617:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":5528,"mutability":"mutable","name":"numTokens","nameLocation":"19649:9:19","nodeType":"VariableDeclaration","scope":5543,"src":"19641:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5527,"name":"uint256","nodeType":"ElementaryTypeName","src":"19641:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19616:43:19"},"scope":6298,"src":"19548:199:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5561,"nodeType":"Block","src":"19884:130:19","statements":[{"assignments":[5552],"declarations":[{"constant":false,"id":5552,"mutability":"mutable","name":"roleAccounts","nameLocation":"19918:12:19","nodeType":"VariableDeclaration","scope":5561,"src":"19894:36:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2217_memory_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":5551,"nodeType":"UserDefinedTypeName","pathNode":{"id":5550,"name":"PoolRoleAccounts","nameLocations":["19894:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":2217,"src":"19894:16:19"},"referencedDeclaration":2217,"src":"19894:16:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2217_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"}],"id":5557,"initialValue":{"arguments":[{"id":5555,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5545,"src":"19960:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5553,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"19933:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":5554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19940:19:19","memberName":"getPoolRoleAccounts","nodeType":"MemberAccess","referencedDeclaration":1882,"src":"19933:26:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_struct$_PoolRoleAccounts_$2217_memory_ptr_$","typeString":"function (address) view external returns (struct PoolRoleAccounts memory)"}},"id":5556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19933:32:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2217_memory_ptr","typeString":"struct PoolRoleAccounts memory"}},"nodeType":"VariableDeclarationStatement","src":"19894:71:19"},{"expression":{"expression":{"id":5558,"name":"roleAccounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5552,"src":"19983:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$2217_memory_ptr","typeString":"struct PoolRoleAccounts memory"}},"id":5559,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19996:11:19","memberName":"poolCreator","nodeType":"MemberAccess","referencedDeclaration":2216,"src":"19983:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5549,"id":5560,"nodeType":"Return","src":"19976:31:19"}]},"id":5562,"implemented":true,"kind":"function","modifiers":[],"name":"_getPoolCreator","nameLocation":"19822:15:19","nodeType":"FunctionDefinition","parameters":{"id":5546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5545,"mutability":"mutable","name":"pool","nameLocation":"19846:4:19","nodeType":"VariableDeclaration","scope":5562,"src":"19838:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5544,"name":"address","nodeType":"ElementaryTypeName","src":"19838:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19837:14:19"},"returnParameters":{"id":5549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5548,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5562,"src":"19875:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5547,"name":"address","nodeType":"ElementaryTypeName","src":"19875:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19874:9:19"},"scope":6298,"src":"19813:201:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5680,"nodeType":"Block","src":"21225:2076:19","statements":[{"assignments":[5570],"declarations":[{"constant":false,"id":5570,"mutability":"mutable","name":"oldFeeController","nameLocation":"21258:16:19","nodeType":"VariableDeclaration","scope":5680,"src":"21235:39:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"},"typeName":{"id":5569,"nodeType":"UserDefinedTypeName","pathNode":{"id":5568,"name":"IProtocolFeeController","nameLocations":["21235:22:19"],"nodeType":"IdentifierPath","referencedDeclaration":613,"src":"21235:22:19"},"referencedDeclaration":613,"src":"21235:22:19","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"id":5574,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5571,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"21277:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":5572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21284:24:19","memberName":"getProtocolFeeController","nodeType":"MemberAccess","referencedDeclaration":1900,"src":"21277:31:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IProtocolFeeController_$613_$","typeString":"function () view external returns (contract IProtocolFeeController)"}},"id":5573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21277:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"nodeType":"VariableDeclarationStatement","src":"21235:75:19"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5577,"name":"oldFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5570,"src":"21333:16:19","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}],"id":5576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21325:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5575,"name":"address","nodeType":"ElementaryTypeName","src":"21325:7:19","typeDescriptions":{}}},"id":5578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21325:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":5581,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"21362:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeController_$6298","typeString":"contract ProtocolFeeController"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeController_$6298","typeString":"contract ProtocolFeeController"}],"id":5580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21354:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5579,"name":"address","nodeType":"ElementaryTypeName","src":"21354:7:19","typeDescriptions":{}}},"id":5582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21354:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"21325:42:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5588,"nodeType":"IfStatement","src":"21321:104:19","trueBody":{"id":5587,"nodeType":"Block","src":"21369:56:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5584,"name":"InvalidMigrationSource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"21390:22:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":5585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21390:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5586,"nodeType":"RevertStatement","src":"21383:31:19"}]}},{"condition":{"baseExpression":{"id":5589,"name":"_registeredPools","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"21439:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5591,"indexExpression":{"id":5590,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"21456:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21439:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5597,"nodeType":"IfStatement","src":"21435:87:19","trueBody":{"id":5596,"nodeType":"Block","src":"21463:59:19","statements":[{"errorCall":{"arguments":[{"id":5593,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"21506:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5592,"name":"PoolAlreadyRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"21484:21:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":5594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21484:27:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":5595,"nodeType":"RevertStatement","src":"21477:34:19"}]}},{"expression":{"id":5602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5598,"name":"_registeredPools","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"21532:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5600,"indexExpression":{"id":5599,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"21549:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21532:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"21557:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"21532:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5603,"nodeType":"ExpressionStatement","src":"21532:29:19"},{"assignments":[5605,5607],"declarations":[{"constant":false,"id":5605,"mutability":"mutable","name":"protocolSwapFeePercentage","nameLocation":"21581:25:19","nodeType":"VariableDeclaration","scope":5680,"src":"21573:33:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5604,"name":"uint256","nodeType":"ElementaryTypeName","src":"21573:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5607,"mutability":"mutable","name":"swapFeeIsOverride","nameLocation":"21613:17:19","nodeType":"VariableDeclaration","scope":5680,"src":"21608:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5606,"name":"bool","nodeType":"ElementaryTypeName","src":"21608:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5612,"initialValue":{"arguments":[{"id":5610,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"21678:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5608,"name":"oldFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5570,"src":"21634:16:19","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"id":5609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21651:26:19","memberName":"getPoolProtocolSwapFeeInfo","nodeType":"MemberAccess","referencedDeclaration":455,"src":"21634:43:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$_t_bool_$","typeString":"function (address) view external returns (uint256,bool)"}},"id":5611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21634:49:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_bool_$","typeString":"tuple(uint256,bool)"}},"nodeType":"VariableDeclarationStatement","src":"21572:111:19"},{"expression":{"id":5622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5613,"name":"_poolProtocolSwapFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"21693:31:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":5615,"indexExpression":{"id":5614,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"21725:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21693:37:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5617,"name":"protocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5605,"src":"21776:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21802:8:19","memberName":"toUint64","nodeType":"MemberAccess","referencedDeclaration":7958,"src":"21776:34:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint64_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint64)"}},"id":5619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21776:36:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":5620,"name":"swapFeeIsOverride","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5607,"src":"21838:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5616,"name":"PoolFeeConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"21733:13:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PoolFeeConfig_$4656_storage_ptr_$","typeString":"type(struct ProtocolFeeController.PoolFeeConfig storage pointer)"}},"id":5621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["21761:13:19","21826:10:19"],"names":["feePercentage","isOverride"],"nodeType":"FunctionCall","src":"21733:133:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"src":"21693:173:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"id":5623,"nodeType":"ExpressionStatement","src":"21693:173:19"},{"assignments":[5625,5627],"declarations":[{"constant":false,"id":5625,"mutability":"mutable","name":"protocolYieldFeePercentage","nameLocation":"21886:26:19","nodeType":"VariableDeclaration","scope":5680,"src":"21878:34:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5624,"name":"uint256","nodeType":"ElementaryTypeName","src":"21878:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5627,"mutability":"mutable","name":"yieldFeeIsOverride","nameLocation":"21919:18:19","nodeType":"VariableDeclaration","scope":5680,"src":"21914:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5626,"name":"bool","nodeType":"ElementaryTypeName","src":"21914:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5632,"initialValue":{"arguments":[{"id":5630,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"21999:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5628,"name":"oldFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5570,"src":"21941:16:19","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"id":5629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21958:27:19","memberName":"getPoolProtocolYieldFeeInfo","nodeType":"MemberAccess","referencedDeclaration":465,"src":"21941:44:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$_t_bool_$","typeString":"function (address) view external returns (uint256,bool)"}},"id":5631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21941:72:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_bool_$","typeString":"tuple(uint256,bool)"}},"nodeType":"VariableDeclarationStatement","src":"21877:136:19"},{"expression":{"id":5642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5633,"name":"_poolProtocolYieldFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4679,"src":"22023:32:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":5635,"indexExpression":{"id":5634,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"22056:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"22023:38:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5637,"name":"protocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"22107:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22134:8:19","memberName":"toUint64","nodeType":"MemberAccess","referencedDeclaration":7958,"src":"22107:35:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint64_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint64)"}},"id":5639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22107:37:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":5640,"name":"yieldFeeIsOverride","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5627,"src":"22170:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5636,"name":"PoolFeeConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"22064:13:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PoolFeeConfig_$4656_storage_ptr_$","typeString":"type(struct ProtocolFeeController.PoolFeeConfig storage pointer)"}},"id":5641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["22092:13:19","22158:10:19"],"names":["feePercentage","isOverride"],"nodeType":"FunctionCall","src":"22064:135:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"src":"22023:176:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"id":5643,"nodeType":"ExpressionStatement","src":"22023:176:19"},{"clauses":[{"block":{"id":5657,"nodeType":"Block","src":"22833:92:19","statements":[{"expression":{"id":5655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5651,"name":"_poolCreatorSwapFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4687,"src":"22847:30:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5653,"indexExpression":{"id":5652,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"22878:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"22847:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5654,"name":"poolCreatorSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5649,"src":"22886:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22847:67:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5656,"nodeType":"ExpressionStatement","src":"22847:67:19"}]},"errorName":"","id":5658,"nodeType":"TryCatchClause","parameters":{"id":5650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5649,"mutability":"mutable","name":"poolCreatorSwapFeePercentage","nameLocation":"22803:28:19","nodeType":"VariableDeclaration","scope":5658,"src":"22795:36:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5648,"name":"uint256","nodeType":"ElementaryTypeName","src":"22795:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22794:38:19"},"src":"22786:139:19"},{"block":{"id":5659,"nodeType":"Block","src":"22932:72:19","statements":[]},"errorName":"","id":5660,"nodeType":"TryCatchClause","src":"22926:78:19"}],"externalCall":{"arguments":[{"id":5646,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"22780:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5644,"name":"oldFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5570,"src":"22731:16:19","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"id":5645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22748:31:19","memberName":"getPoolCreatorSwapFeePercentage","nodeType":"MemberAccess","referencedDeclaration":473,"src":"22731:48:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22731:54:19","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5661,"nodeType":"TryStatement","src":"22727:277:19"},{"clauses":[{"block":{"id":5675,"nodeType":"Block","src":"23122:94:19","statements":[{"expression":{"id":5673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5669,"name":"_poolCreatorYieldFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4691,"src":"23136:31:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5671,"indexExpression":{"id":5670,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"23168:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23136:37:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5672,"name":"poolCreatorYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5667,"src":"23176:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23136:69:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5674,"nodeType":"ExpressionStatement","src":"23136:69:19"}]},"errorName":"","id":5676,"nodeType":"TryCatchClause","parameters":{"id":5668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5667,"mutability":"mutable","name":"poolCreatorYieldFeePercentage","nameLocation":"23091:29:19","nodeType":"VariableDeclaration","scope":5676,"src":"23083:37:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5666,"name":"uint256","nodeType":"ElementaryTypeName","src":"23083:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23082:39:19"},"src":"23074:142:19"},{"block":{"id":5677,"nodeType":"Block","src":"23223:72:19","statements":[]},"errorName":"","id":5678,"nodeType":"TryCatchClause","src":"23217:78:19"}],"externalCall":{"arguments":[{"id":5664,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5565,"src":"23068:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5662,"name":"oldFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5570,"src":"23018:16:19","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"id":5663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23035:32:19","memberName":"getPoolCreatorYieldFeePercentage","nodeType":"MemberAccess","referencedDeclaration":481,"src":"23018:49:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23018:55:19","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5679,"nodeType":"TryStatement","src":"23014:281:19"}]},"documentation":{"id":5563,"nodeType":"StructuredDocumentation","src":"20231:945:19","text":" @notice Not exposed in the interface, this enables migration of hidden pool state.\n @dev Permission should NEVER be granted to this function outside of a migration contract. It is necessary to\n permit migration of the `ProtocolFeeController` with all state (in particular, protocol fee overrides and pool\n creator fees) that cannot be written outside of the `registerPool` function called by the Vault during pool\n deployment.\n Even if governance were to grant permission to call this function, the `_registeredPools` latch keeps it safe,\n guaranteeing that it is impossible to use this function to change anything after registration. A pool can only\n be registered / configured once - either copied to a new controller in the migration context, or added normally\n through the Vault calling `registerPool`.\n @param pool The address of the pool to be migrated"},"functionSelector":"0874327f","id":5681,"implemented":true,"kind":"function","modifiers":[],"name":"migratePool","nameLocation":"21190:11:19","nodeType":"FunctionDefinition","parameters":{"id":5566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5565,"mutability":"mutable","name":"pool","nameLocation":"21210:4:19","nodeType":"VariableDeclaration","scope":5681,"src":"21202:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5564,"name":"address","nodeType":"ElementaryTypeName","src":"21202:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21201:14:19"},"returnParameters":{"id":5567,"nodeType":"ParameterList","parameters":[],"src":"21225:0:19"},"scope":6298,"src":"21181:2120:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[535],"body":{"id":5757,"nodeType":"Block","src":"23780:1540:19","statements":[{"expression":{"id":5701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5697,"name":"_registeredPools","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"23790:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5699,"indexExpression":{"id":5698,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"23807:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23790:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"23815:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"23790:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5702,"nodeType":"ExpressionStatement","src":"23790:29:19"},{"expression":{"id":5708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5703,"name":"aggregateSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5693,"src":"23919:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":5704,"name":"protocolFeeExempt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5688,"src":"23948:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5706,"name":"_globalProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"23972:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23948:56:19","trueExpression":{"hexValue":"30","id":5705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23968:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23919:85:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5709,"nodeType":"ExpressionStatement","src":"23919:85:19"},{"expression":{"id":5715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5710,"name":"aggregateYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5695,"src":"24014:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"id":5711,"name":"protocolFeeExempt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5688,"src":"24044:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5713,"name":"_globalProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"24068:33:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"24044:57:19","trueExpression":{"hexValue":"30","id":5712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24064:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24014:87:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5716,"nodeType":"ExpressionStatement","src":"24014:87:19"},{"expression":{"id":5726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5717,"name":"_poolProtocolSwapFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"24549:31:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":5719,"indexExpression":{"id":5718,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"24581:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"24549:37:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5721,"name":"aggregateSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5693,"src":"24632:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24659:8:19","memberName":"toUint64","nodeType":"MemberAccess","referencedDeclaration":7958,"src":"24632:35:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint64_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint64)"}},"id":5723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24632:37:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":5724,"name":"protocolFeeExempt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5688,"src":"24695:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5720,"name":"PoolFeeConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"24589:13:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PoolFeeConfig_$4656_storage_ptr_$","typeString":"type(struct ProtocolFeeController.PoolFeeConfig storage pointer)"}},"id":5725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["24617:13:19","24683:10:19"],"names":["feePercentage","isOverride"],"nodeType":"FunctionCall","src":"24589:134:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"src":"24549:174:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"id":5727,"nodeType":"ExpressionStatement","src":"24549:174:19"},{"expression":{"id":5737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5728,"name":"_poolProtocolYieldFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4679,"src":"24733:32:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":5730,"indexExpression":{"id":5729,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"24766:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"24733:38:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5732,"name":"aggregateYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5695,"src":"24817:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24845:8:19","memberName":"toUint64","nodeType":"MemberAccess","referencedDeclaration":7958,"src":"24817:36:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint64_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint64)"}},"id":5734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24817:38:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":5735,"name":"protocolFeeExempt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5688,"src":"24881:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5731,"name":"PoolFeeConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"24774:13:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PoolFeeConfig_$4656_storage_ptr_$","typeString":"type(struct ProtocolFeeController.PoolFeeConfig storage pointer)"}},"id":5736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["24802:13:19","24869:10:19"],"names":["feePercentage","isOverride"],"nodeType":"FunctionCall","src":"24774:135:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"src":"24733:176:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"id":5738,"nodeType":"ExpressionStatement","src":"24733:176:19"},{"eventCall":{"arguments":[{"id":5740,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"25069:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5741,"name":"aggregateSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5693,"src":"25075:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5742,"name":"protocolFeeExempt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5688,"src":"25103:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5739,"name":"InitialPoolAggregateSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"25031:37:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,uint256,bool)"}},"id":5743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25031:90:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5744,"nodeType":"EmitStatement","src":"25026:95:19"},{"eventCall":{"arguments":[{"id":5746,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"25175:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5747,"name":"aggregateYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5695,"src":"25181:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5748,"name":"protocolFeeExempt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5688,"src":"25210:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5745,"name":"InitialPoolAggregateYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"25136:38:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,uint256,bool)"}},"id":5749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25136:92:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5750,"nodeType":"EmitStatement","src":"25131:97:19"},{"eventCall":{"arguments":[{"id":5752,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"25276:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5753,"name":"poolCreator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5686,"src":"25282:11:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5754,"name":"protocolFeeExempt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5688,"src":"25295:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5751,"name":"PoolRegisteredWithFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"25244:31:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":5755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25244:69:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5756,"nodeType":"EmitStatement","src":"25239:74:19"}]},"documentation":{"id":5682,"nodeType":"StructuredDocumentation","src":"23525:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"77ff76e7","id":5758,"implemented":true,"kind":"function","modifiers":[{"id":5691,"kind":"modifierInvocation","modifierName":{"id":5690,"name":"onlyVault","nameLocations":["23688:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":6385,"src":"23688:9:19"},"nodeType":"ModifierInvocation","src":"23688:9:19"}],"name":"registerPool","nameLocation":"23577:12:19","nodeType":"FunctionDefinition","parameters":{"id":5689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5684,"mutability":"mutable","name":"pool","nameLocation":"23607:4:19","nodeType":"VariableDeclaration","scope":5758,"src":"23599:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5683,"name":"address","nodeType":"ElementaryTypeName","src":"23599:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5686,"mutability":"mutable","name":"poolCreator","nameLocation":"23629:11:19","nodeType":"VariableDeclaration","scope":5758,"src":"23621:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5685,"name":"address","nodeType":"ElementaryTypeName","src":"23621:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5688,"mutability":"mutable","name":"protocolFeeExempt","nameLocation":"23655:17:19","nodeType":"VariableDeclaration","scope":5758,"src":"23650:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5687,"name":"bool","nodeType":"ElementaryTypeName","src":"23650:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"23589:89:19"},"returnParameters":{"id":5696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5693,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"23715:26:19","nodeType":"VariableDeclaration","scope":5758,"src":"23707:34:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5692,"name":"uint256","nodeType":"ElementaryTypeName","src":"23707:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5695,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"23751:27:19","nodeType":"VariableDeclaration","scope":5758,"src":"23743:35:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5694,"name":"uint256","nodeType":"ElementaryTypeName","src":"23743:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23706:73:19"},"scope":6298,"src":"23568:1752:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[541],"body":{"id":5770,"nodeType":"Block","src":"25473:82:19","statements":[{"expression":{"arguments":[{"id":5767,"name":"newProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5761,"src":"25519:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5766,"name":"_setGlobalProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5788,"src":"25483:35:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25483:65:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5769,"nodeType":"ExpressionStatement","src":"25483:65:19"}]},"documentation":{"id":5759,"nodeType":"StructuredDocumentation","src":"25326:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"8a3c5c69","id":5771,"implemented":true,"kind":"function","modifiers":[{"id":5764,"kind":"modifierInvocation","modifierName":{"id":5763,"name":"authenticate","nameLocations":["25460:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":2439,"src":"25460:12:19"},"nodeType":"ModifierInvocation","src":"25460:12:19"}],"name":"setGlobalProtocolSwapFeePercentage","nameLocation":"25378:34:19","nodeType":"FunctionDefinition","parameters":{"id":5762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5761,"mutability":"mutable","name":"newProtocolSwapFeePercentage","nameLocation":"25421:28:19","nodeType":"VariableDeclaration","scope":5771,"src":"25413:36:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5760,"name":"uint256","nodeType":"ElementaryTypeName","src":"25413:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25412:38:19"},"returnParameters":{"id":5765,"nodeType":"ParameterList","parameters":[],"src":"25473:0:19"},"scope":6298,"src":"25369:186:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5787,"nodeType":"Block","src":"25714:164:19","statements":[{"expression":{"id":5781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5779,"name":"_globalProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"25724:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5780,"name":"newProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5773,"src":"25759:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25724:63:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5782,"nodeType":"ExpressionStatement","src":"25724:63:19"},{"eventCall":{"arguments":[{"id":5784,"name":"newProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5773,"src":"25842:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5783,"name":"GlobalProtocolSwapFeePercentageChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"25803:38:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25803:68:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5786,"nodeType":"EmitStatement","src":"25798:73:19"}]},"id":5788,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5776,"name":"newProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5773,"src":"25684:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5777,"kind":"modifierInvocation","modifierName":{"id":5775,"name":"withValidSwapFee","nameLocations":["25667:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":4741,"src":"25667:16:19"},"nodeType":"ModifierInvocation","src":"25667:46:19"}],"name":"_setGlobalProtocolSwapFeePercentage","nameLocation":"25570:35:19","nodeType":"FunctionDefinition","parameters":{"id":5774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5773,"mutability":"mutable","name":"newProtocolSwapFeePercentage","nameLocation":"25623:28:19","nodeType":"VariableDeclaration","scope":5788,"src":"25615:36:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5772,"name":"uint256","nodeType":"ElementaryTypeName","src":"25615:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25605:52:19"},"returnParameters":{"id":5778,"nodeType":"ParameterList","parameters":[],"src":"25714:0:19"},"scope":6298,"src":"25561:317:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[547],"body":{"id":5800,"nodeType":"Block","src":"26033:84:19","statements":[{"expression":{"arguments":[{"id":5797,"name":"newProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5791,"src":"26080:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5796,"name":"_setGlobalProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5818,"src":"26043:36:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26043:67:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5799,"nodeType":"ExpressionStatement","src":"26043:67:19"}]},"documentation":{"id":5789,"nodeType":"StructuredDocumentation","src":"25884:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"a93df2a4","id":5801,"implemented":true,"kind":"function","modifiers":[{"id":5794,"kind":"modifierInvocation","modifierName":{"id":5793,"name":"authenticate","nameLocations":["26020:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":2439,"src":"26020:12:19"},"nodeType":"ModifierInvocation","src":"26020:12:19"}],"name":"setGlobalProtocolYieldFeePercentage","nameLocation":"25936:35:19","nodeType":"FunctionDefinition","parameters":{"id":5792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5791,"mutability":"mutable","name":"newProtocolYieldFeePercentage","nameLocation":"25980:29:19","nodeType":"VariableDeclaration","scope":5801,"src":"25972:37:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5790,"name":"uint256","nodeType":"ElementaryTypeName","src":"25972:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25971:39:19"},"returnParameters":{"id":5795,"nodeType":"ParameterList","parameters":[],"src":"26033:0:19"},"scope":6298,"src":"25927:190:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5817,"nodeType":"Block","src":"26280:168:19","statements":[{"expression":{"id":5811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5809,"name":"_globalProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"26290:33:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5810,"name":"newProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5803,"src":"26326:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26290:65:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5812,"nodeType":"ExpressionStatement","src":"26290:65:19"},{"eventCall":{"arguments":[{"id":5814,"name":"newProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5803,"src":"26411:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5813,"name":"GlobalProtocolYieldFeePercentageChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"26371:39:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26371:70:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5816,"nodeType":"EmitStatement","src":"26366:75:19"}]},"id":5818,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5806,"name":"newProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5803,"src":"26249:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5807,"kind":"modifierInvocation","modifierName":{"id":5805,"name":"withValidYieldFee","nameLocations":["26231:17:19"],"nodeType":"IdentifierPath","referencedDeclaration":4759,"src":"26231:17:19"},"nodeType":"ModifierInvocation","src":"26231:48:19"}],"name":"_setGlobalProtocolYieldFeePercentage","nameLocation":"26132:36:19","nodeType":"FunctionDefinition","parameters":{"id":5804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5803,"mutability":"mutable","name":"newProtocolYieldFeePercentage","nameLocation":"26186:29:19","nodeType":"VariableDeclaration","scope":5818,"src":"26178:37:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5802,"name":"uint256","nodeType":"ElementaryTypeName","src":"26178:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26168:53:19"},"returnParameters":{"id":5808,"nodeType":"ParameterList","parameters":[],"src":"26280:0:19"},"scope":6298,"src":"26123:325:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[555],"body":{"id":5840,"nodeType":"Block","src":"26699:87:19","statements":[{"expression":{"arguments":[{"id":5835,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5821,"src":"26738:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5836,"name":"newProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5823,"src":"26744:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":5837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"26774:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5834,"name":"_updatePoolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6238,"src":"26709:28:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,uint256,bool)"}},"id":5838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26709:70:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5839,"nodeType":"ExpressionStatement","src":"26709:70:19"}]},"documentation":{"id":5819,"nodeType":"StructuredDocumentation","src":"26454:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"fd267f39","id":5841,"implemented":true,"kind":"function","modifiers":[{"id":5826,"kind":"modifierInvocation","modifierName":{"id":5825,"name":"authenticate","nameLocations":["26618:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":2439,"src":"26618:12:19"},"nodeType":"ModifierInvocation","src":"26618:12:19"},{"arguments":[{"id":5828,"name":"newProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5823,"src":"26648:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5829,"kind":"modifierInvocation","modifierName":{"id":5827,"name":"withValidSwapFee","nameLocations":["26631:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":4741,"src":"26631:16:19"},"nodeType":"ModifierInvocation","src":"26631:46:19"},{"arguments":[{"id":5831,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5821,"src":"26693:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5832,"kind":"modifierInvocation","modifierName":{"id":5830,"name":"withLatestFees","nameLocations":["26678:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":4783,"src":"26678:14:19"},"nodeType":"ModifierInvocation","src":"26678:20:19"}],"name":"setProtocolSwapFeePercentage","nameLocation":"26506:28:19","nodeType":"FunctionDefinition","parameters":{"id":5824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5821,"mutability":"mutable","name":"pool","nameLocation":"26552:4:19","nodeType":"VariableDeclaration","scope":5841,"src":"26544:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5820,"name":"address","nodeType":"ElementaryTypeName","src":"26544:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5823,"mutability":"mutable","name":"newProtocolSwapFeePercentage","nameLocation":"26574:28:19","nodeType":"VariableDeclaration","scope":5841,"src":"26566:36:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5822,"name":"uint256","nodeType":"ElementaryTypeName","src":"26566:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26534:74:19"},"returnParameters":{"id":5833,"nodeType":"ParameterList","parameters":[],"src":"26699:0:19"},"scope":6298,"src":"26497:289:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[563],"body":{"id":5863,"nodeType":"Block","src":"27041:89:19","statements":[{"expression":{"arguments":[{"id":5858,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5844,"src":"27081:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5859,"name":"newProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5846,"src":"27087:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":5860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"27118:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5857,"name":"_updatePoolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6276,"src":"27051:29:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,uint256,bool)"}},"id":5861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27051:72:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5862,"nodeType":"ExpressionStatement","src":"27051:72:19"}]},"documentation":{"id":5842,"nodeType":"StructuredDocumentation","src":"26792:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"abaa3356","id":5864,"implemented":true,"kind":"function","modifiers":[{"id":5849,"kind":"modifierInvocation","modifierName":{"id":5848,"name":"authenticate","nameLocations":["26958:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":2439,"src":"26958:12:19"},"nodeType":"ModifierInvocation","src":"26958:12:19"},{"arguments":[{"id":5851,"name":"newProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5846,"src":"26989:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5852,"kind":"modifierInvocation","modifierName":{"id":5850,"name":"withValidYieldFee","nameLocations":["26971:17:19"],"nodeType":"IdentifierPath","referencedDeclaration":4759,"src":"26971:17:19"},"nodeType":"ModifierInvocation","src":"26971:48:19"},{"arguments":[{"id":5854,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5844,"src":"27035:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5855,"kind":"modifierInvocation","modifierName":{"id":5853,"name":"withLatestFees","nameLocations":["27020:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":4783,"src":"27020:14:19"},"nodeType":"ModifierInvocation","src":"27020:20:19"}],"name":"setProtocolYieldFeePercentage","nameLocation":"26844:29:19","nodeType":"FunctionDefinition","parameters":{"id":5847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5844,"mutability":"mutable","name":"pool","nameLocation":"26891:4:19","nodeType":"VariableDeclaration","scope":5864,"src":"26883:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5843,"name":"address","nodeType":"ElementaryTypeName","src":"26883:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5846,"mutability":"mutable","name":"newProtocolYieldFeePercentage","nameLocation":"26913:29:19","nodeType":"VariableDeclaration","scope":5864,"src":"26905:37:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5845,"name":"uint256","nodeType":"ElementaryTypeName","src":"26905:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26873:75:19"},"returnParameters":{"id":5856,"nodeType":"ParameterList","parameters":[],"src":"27041:0:19"},"scope":6298,"src":"26835:295:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[571],"body":{"id":5888,"nodeType":"Block","src":"27400:103:19","statements":[{"expression":{"arguments":[{"id":5882,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5867,"src":"27439:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5883,"name":"poolCreatorSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"27445:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5884,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"27475:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":5885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"27491:4:19","memberName":"SWAP","nodeType":"MemberAccess","referencedDeclaration":4648,"src":"27475:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}],"id":5881,"name":"_setPoolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5976,"src":"27410:28:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_enum$_ProtocolFeeType_$4650_$returns$__$","typeString":"function (address,uint256,enum ProtocolFeeController.ProtocolFeeType)"}},"id":5886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27410:86:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5887,"nodeType":"ExpressionStatement","src":"27410:86:19"}]},"documentation":{"id":5865,"nodeType":"StructuredDocumentation","src":"27136:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"1377c16c","id":5889,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5872,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5867,"src":"27319:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5873,"kind":"modifierInvocation","modifierName":{"id":5871,"name":"onlyPoolCreator","nameLocations":["27303:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":4723,"src":"27303:15:19"},"nodeType":"ModifierInvocation","src":"27303:21:19"},{"arguments":[{"id":5875,"name":"poolCreatorSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"27349:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5876,"kind":"modifierInvocation","modifierName":{"id":5874,"name":"withValidPoolCreatorFee","nameLocations":["27325:23:19"],"nodeType":"IdentifierPath","referencedDeclaration":4773,"src":"27325:23:19"},"nodeType":"ModifierInvocation","src":"27325:53:19"},{"arguments":[{"id":5878,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5867,"src":"27394:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5879,"kind":"modifierInvocation","modifierName":{"id":5877,"name":"withLatestFees","nameLocations":["27379:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":4783,"src":"27379:14:19"},"nodeType":"ModifierInvocation","src":"27379:20:19"}],"name":"setPoolCreatorSwapFeePercentage","nameLocation":"27188:31:19","nodeType":"FunctionDefinition","parameters":{"id":5870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5867,"mutability":"mutable","name":"pool","nameLocation":"27237:4:19","nodeType":"VariableDeclaration","scope":5889,"src":"27229:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5866,"name":"address","nodeType":"ElementaryTypeName","src":"27229:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5869,"mutability":"mutable","name":"poolCreatorSwapFeePercentage","nameLocation":"27259:28:19","nodeType":"VariableDeclaration","scope":5889,"src":"27251:36:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5868,"name":"uint256","nodeType":"ElementaryTypeName","src":"27251:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27219:74:19"},"returnParameters":{"id":5880,"nodeType":"ParameterList","parameters":[],"src":"27400:0:19"},"scope":6298,"src":"27179:324:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[579],"body":{"id":5913,"nodeType":"Block","src":"27776:105:19","statements":[{"expression":{"arguments":[{"id":5907,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5892,"src":"27815:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5908,"name":"poolCreatorYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5894,"src":"27821:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5909,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"27852:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":5910,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"27868:5:19","memberName":"YIELD","nodeType":"MemberAccess","referencedDeclaration":4649,"src":"27852:21:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}],"id":5906,"name":"_setPoolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5976,"src":"27786:28:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_enum$_ProtocolFeeType_$4650_$returns$__$","typeString":"function (address,uint256,enum ProtocolFeeController.ProtocolFeeType)"}},"id":5911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27786:88:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5912,"nodeType":"ExpressionStatement","src":"27786:88:19"}]},"documentation":{"id":5890,"nodeType":"StructuredDocumentation","src":"27509:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"3af52712","id":5914,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5897,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5892,"src":"27694:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5898,"kind":"modifierInvocation","modifierName":{"id":5896,"name":"onlyPoolCreator","nameLocations":["27678:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":4723,"src":"27678:15:19"},"nodeType":"ModifierInvocation","src":"27678:21:19"},{"arguments":[{"id":5900,"name":"poolCreatorYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5894,"src":"27724:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5901,"kind":"modifierInvocation","modifierName":{"id":5899,"name":"withValidPoolCreatorFee","nameLocations":["27700:23:19"],"nodeType":"IdentifierPath","referencedDeclaration":4773,"src":"27700:23:19"},"nodeType":"ModifierInvocation","src":"27700:54:19"},{"arguments":[{"id":5903,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5892,"src":"27770:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5904,"kind":"modifierInvocation","modifierName":{"id":5902,"name":"withLatestFees","nameLocations":["27755:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":4783,"src":"27755:14:19"},"nodeType":"ModifierInvocation","src":"27755:20:19"}],"name":"setPoolCreatorYieldFeePercentage","nameLocation":"27561:32:19","nodeType":"FunctionDefinition","parameters":{"id":5895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5892,"mutability":"mutable","name":"pool","nameLocation":"27611:4:19","nodeType":"VariableDeclaration","scope":5914,"src":"27603:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5891,"name":"address","nodeType":"ElementaryTypeName","src":"27603:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5894,"mutability":"mutable","name":"poolCreatorYieldFeePercentage","nameLocation":"27633:29:19","nodeType":"VariableDeclaration","scope":5914,"src":"27625:37:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5893,"name":"uint256","nodeType":"ElementaryTypeName","src":"27625:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27593:75:19"},"returnParameters":{"id":5905,"nodeType":"ParameterList","parameters":[],"src":"27776:0:19"},"scope":6298,"src":"27552:329:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5975,"nodeType":"Block","src":"28037:900:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"},"id":5927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5924,"name":"feeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5921,"src":"28133:7:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5925,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"28144:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":5926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"28160:4:19","memberName":"SWAP","nodeType":"MemberAccess","referencedDeclaration":4648,"src":"28144:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"src":"28133:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5973,"nodeType":"Block","src":"28549:382:19","statements":[{"expression":{"id":5955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5951,"name":"_poolCreatorYieldFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4691,"src":"28563:31:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5953,"indexExpression":{"id":5952,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"28595:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"28563:37:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5954,"name":"poolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5918,"src":"28603:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28563:64:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5956,"nodeType":"ExpressionStatement","src":"28563:64:19"},{"expression":{"arguments":[{"id":5960,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"28770:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":5962,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"28803:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5963,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"28809:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":5964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"28825:5:19","memberName":"YIELD","nodeType":"MemberAccess","referencedDeclaration":4649,"src":"28809:21:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}],"id":5961,"name":"_getAggregateFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5453,"src":"28776:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_enum$_ProtocolFeeType_$4650_$returns$_t_uint256_$","typeString":"function (address,enum ProtocolFeeController.ProtocolFeeType) view returns (uint256)"}},"id":5965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28776:55:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5957,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"28729:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":5959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28736:33:19","memberName":"updateAggregateYieldFeePercentage","nodeType":"MemberAccess","referencedDeclaration":795,"src":"28729:40:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":5966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28729:103:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5967,"nodeType":"ExpressionStatement","src":"28729:103:19"},{"eventCall":{"arguments":[{"id":5969,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"28889:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5970,"name":"poolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5918,"src":"28895:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5968,"name":"PoolCreatorYieldFeePercentageChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"28852:36:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28852:68:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5972,"nodeType":"EmitStatement","src":"28847:73:19"}]},"id":5974,"nodeType":"IfStatement","src":"28129:802:19","trueBody":{"id":5950,"nodeType":"Block","src":"28166:377:19","statements":[{"expression":{"id":5932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5928,"name":"_poolCreatorSwapFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4687,"src":"28180:30:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5930,"indexExpression":{"id":5929,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"28211:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"28180:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5931,"name":"poolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5918,"src":"28219:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28180:63:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5933,"nodeType":"ExpressionStatement","src":"28180:63:19"},{"expression":{"arguments":[{"id":5937,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"28384:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":5939,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"28417:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5940,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"28423:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":5941,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"28439:4:19","memberName":"SWAP","nodeType":"MemberAccess","referencedDeclaration":4648,"src":"28423:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}],"id":5938,"name":"_getAggregateFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5453,"src":"28390:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_enum$_ProtocolFeeType_$4650_$returns$_t_uint256_$","typeString":"function (address,enum ProtocolFeeController.ProtocolFeeType) view returns (uint256)"}},"id":5942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28390:54:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5934,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"28344:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":5936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28351:32:19","memberName":"updateAggregateSwapFeePercentage","nodeType":"MemberAccess","referencedDeclaration":787,"src":"28344:39:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":5943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28344:101:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5944,"nodeType":"ExpressionStatement","src":"28344:101:19"},{"eventCall":{"arguments":[{"id":5946,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"28501:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5947,"name":"poolCreatorFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5918,"src":"28507:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5945,"name":"PoolCreatorSwapFeePercentageChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"28465:35:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28465:67:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5949,"nodeType":"EmitStatement","src":"28460:72:19"}]}}]},"id":5976,"implemented":true,"kind":"function","modifiers":[],"name":"_setPoolCreatorFeePercentage","nameLocation":"27896:28:19","nodeType":"FunctionDefinition","parameters":{"id":5922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5916,"mutability":"mutable","name":"pool","nameLocation":"27942:4:19","nodeType":"VariableDeclaration","scope":5976,"src":"27934:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5915,"name":"address","nodeType":"ElementaryTypeName","src":"27934:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5918,"mutability":"mutable","name":"poolCreatorFeePercentage","nameLocation":"27964:24:19","nodeType":"VariableDeclaration","scope":5976,"src":"27956:32:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5917,"name":"uint256","nodeType":"ElementaryTypeName","src":"27956:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5921,"mutability":"mutable","name":"feeType","nameLocation":"28014:7:19","nodeType":"VariableDeclaration","scope":5976,"src":"27998:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"},"typeName":{"id":5920,"nodeType":"UserDefinedTypeName","pathNode":{"id":5919,"name":"ProtocolFeeType","nameLocations":["27998:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":4650,"src":"27998:15:19"},"referencedDeclaration":4650,"src":"27998:15:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}},"visibility":"internal"}],"src":"27924:103:19"},"returnParameters":{"id":5923,"nodeType":"ParameterList","parameters":[],"src":"28037:0:19"},"scope":6298,"src":"27887:1050:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[587],"body":{"id":6022,"nodeType":"Block","src":"29071:258:19","statements":[{"assignments":[5990,5992],"declarations":[{"constant":false,"id":5990,"mutability":"mutable","name":"poolTokens","nameLocation":"29098:10:19","nodeType":"VariableDeclaration","scope":6022,"src":"29082:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":5988,"nodeType":"UserDefinedTypeName","pathNode":{"id":5987,"name":"IERC20","nameLocations":["29082:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"29082:6:19"},"referencedDeclaration":6654,"src":"29082:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":5989,"nodeType":"ArrayTypeName","src":"29082:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":5992,"mutability":"mutable","name":"numTokens","nameLocation":"29118:9:19","nodeType":"VariableDeclaration","scope":6022,"src":"29110:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5991,"name":"uint256","nodeType":"ElementaryTypeName","src":"29110:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5996,"initialValue":{"arguments":[{"id":5994,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"29154:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5993,"name":"_getPoolTokensAndCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5543,"src":"29131:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr_$_t_uint256_$","typeString":"function (address) view returns (contract IERC20[] memory,uint256)"}},"id":5995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29131:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(contract IERC20[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"29081:78:19"},{"body":{"id":6020,"nodeType":"Block","src":"29210:113:19","statements":[{"assignments":[6009],"declarations":[{"constant":false,"id":6009,"mutability":"mutable","name":"token","nameLocation":"29231:5:19","nodeType":"VariableDeclaration","scope":6020,"src":"29224:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":6008,"nodeType":"UserDefinedTypeName","pathNode":{"id":6007,"name":"IERC20","nameLocations":["29224:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"29224:6:19"},"referencedDeclaration":6654,"src":"29224:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"id":6013,"initialValue":{"baseExpression":{"id":6010,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5990,"src":"29239:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":6012,"indexExpression":{"id":6011,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5998,"src":"29250:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29239:13:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"29224:28:19"},{"expression":{"arguments":[{"id":6015,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"29289:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6016,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"29295:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6017,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6009,"src":"29306:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}],"id":6014,"name":"_withdrawProtocolFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6096,"src":"29267:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_contract$_IERC20_$6654_$returns$__$","typeString":"function (address,address,contract IERC20)"}},"id":6018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29267:45:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6019,"nodeType":"ExpressionStatement","src":"29267:45:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6001,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5998,"src":"29190:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6002,"name":"numTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5992,"src":"29194:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29190:13:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6021,"initializationExpression":{"assignments":[5998],"declarations":[{"constant":false,"id":5998,"mutability":"mutable","name":"i","nameLocation":"29183:1:19","nodeType":"VariableDeclaration","scope":6021,"src":"29175:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5997,"name":"uint256","nodeType":"ElementaryTypeName","src":"29175:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6000,"initialValue":{"hexValue":"30","id":5999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29187:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"29175:13:19"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":6005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"29205:3:19","subExpression":{"id":6004,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5998,"src":"29207:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6006,"nodeType":"ExpressionStatement","src":"29205:3:19"},"nodeType":"ForStatement","src":"29170:153:19"}]},"documentation":{"id":5977,"nodeType":"StructuredDocumentation","src":"28943:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"cf7b287f","id":6023,"implemented":true,"kind":"function","modifiers":[{"id":5984,"kind":"modifierInvocation","modifierName":{"id":5983,"name":"authenticate","nameLocations":["29058:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":2439,"src":"29058:12:19"},"nodeType":"ModifierInvocation","src":"29058:12:19"}],"name":"withdrawProtocolFees","nameLocation":"28995:20:19","nodeType":"FunctionDefinition","parameters":{"id":5982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5979,"mutability":"mutable","name":"pool","nameLocation":"29024:4:19","nodeType":"VariableDeclaration","scope":6023,"src":"29016:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5978,"name":"address","nodeType":"ElementaryTypeName","src":"29016:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5981,"mutability":"mutable","name":"recipient","nameLocation":"29038:9:19","nodeType":"VariableDeclaration","scope":6023,"src":"29030:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5980,"name":"address","nodeType":"ElementaryTypeName","src":"29030:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"29015:33:19"},"returnParameters":{"id":5985,"nodeType":"ParameterList","parameters":[],"src":"29071:0:19"},"scope":6298,"src":"28986:343:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[598],"body":{"id":6049,"nodeType":"Block","src":"29485:217:19","statements":[{"expression":{"arguments":[{"id":6039,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6026,"src":"29628:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6040,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6031,"src":"29634:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}],"expression":{"id":6036,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"29588:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":6038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29595:32:19","memberName":"getPoolTokenCountAndIndexOfToken","nodeType":"MemberAccess","referencedDeclaration":2056,"src":"29588:39:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_contract$_IERC20_$6654_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,contract IERC20) view external returns (uint256,uint256)"}},"id":6041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29588:52:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":6042,"nodeType":"ExpressionStatement","src":"29588:52:19"},{"expression":{"arguments":[{"id":6044,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6026,"src":"29672:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6045,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6028,"src":"29678:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6046,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6031,"src":"29689:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}],"id":6043,"name":"_withdrawProtocolFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6096,"src":"29650:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_contract$_IERC20_$6654_$returns$__$","typeString":"function (address,address,contract IERC20)"}},"id":6047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29650:45:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6048,"nodeType":"ExpressionStatement","src":"29650:45:19"}]},"documentation":{"id":6024,"nodeType":"StructuredDocumentation","src":"29335:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"b53a70b2","id":6050,"implemented":true,"kind":"function","modifiers":[{"id":6034,"kind":"modifierInvocation","modifierName":{"id":6033,"name":"authenticate","nameLocations":["29472:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":2439,"src":"29472:12:19"},"nodeType":"ModifierInvocation","src":"29472:12:19"}],"name":"withdrawProtocolFeesForToken","nameLocation":"29387:28:19","nodeType":"FunctionDefinition","parameters":{"id":6032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6026,"mutability":"mutable","name":"pool","nameLocation":"29424:4:19","nodeType":"VariableDeclaration","scope":6050,"src":"29416:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6025,"name":"address","nodeType":"ElementaryTypeName","src":"29416:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6028,"mutability":"mutable","name":"recipient","nameLocation":"29438:9:19","nodeType":"VariableDeclaration","scope":6050,"src":"29430:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6027,"name":"address","nodeType":"ElementaryTypeName","src":"29430:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6031,"mutability":"mutable","name":"token","nameLocation":"29456:5:19","nodeType":"VariableDeclaration","scope":6050,"src":"29449:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":6030,"nodeType":"UserDefinedTypeName","pathNode":{"id":6029,"name":"IERC20","nameLocations":["29449:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"29449:6:19"},"referencedDeclaration":6654,"src":"29449:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"29415:47:19"},"returnParameters":{"id":6035,"nodeType":"ParameterList","parameters":[],"src":"29485:0:19"},"scope":6298,"src":"29378:324:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6095,"nodeType":"Block","src":"29795:316:19","statements":[{"assignments":[6061],"declarations":[{"constant":false,"id":6061,"mutability":"mutable","name":"amountToWithdraw","nameLocation":"29813:16:19","nodeType":"VariableDeclaration","scope":6095,"src":"29805:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6060,"name":"uint256","nodeType":"ElementaryTypeName","src":"29805:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6067,"initialValue":{"baseExpression":{"baseExpression":{"id":6062,"name":"_protocolFeeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4698,"src":"29832:19:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"}},"id":6064,"indexExpression":{"id":6063,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6052,"src":"29852:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29832:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6066,"indexExpression":{"id":6065,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"29858:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29832:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"29805:59:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6068,"name":"amountToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6061,"src":"29878:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29897:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"29878:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6094,"nodeType":"IfStatement","src":"29874:231:19","trueBody":{"id":6093,"nodeType":"Block","src":"29900:205:19","statements":[{"expression":{"id":6077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6071,"name":"_protocolFeeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4698,"src":"29914:19:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"}},"id":6074,"indexExpression":{"id":6072,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6052,"src":"29934:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29914:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6075,"indexExpression":{"id":6073,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"29940:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"29914:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":6076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29949:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"29914:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6078,"nodeType":"ExpressionStatement","src":"29914:36:19"},{"expression":{"arguments":[{"id":6082,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6054,"src":"29983:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6083,"name":"amountToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6061,"src":"29994:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6079,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"29964:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":6081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29970:12:19","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":6766,"src":"29964:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6654_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$6654_$","typeString":"function (contract IERC20,address,uint256)"}},"id":6084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29964:47:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6085,"nodeType":"ExpressionStatement","src":"29964:47:19"},{"eventCall":{"arguments":[{"id":6087,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6052,"src":"30053:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6088,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"30059:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},{"id":6089,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6054,"src":"30066:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6090,"name":"amountToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6061,"src":"30077:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6086,"name":"ProtocolFeesWithdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"30031:21:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_contract$_IERC20_$6654_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,contract IERC20,address,uint256)"}},"id":6091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30031:63:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6092,"nodeType":"EmitStatement","src":"30026:68:19"}]}}]},"id":6096,"implemented":true,"kind":"function","modifiers":[],"name":"_withdrawProtocolFees","nameLocation":"29717:21:19","nodeType":"FunctionDefinition","parameters":{"id":6058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6052,"mutability":"mutable","name":"pool","nameLocation":"29747:4:19","nodeType":"VariableDeclaration","scope":6096,"src":"29739:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6051,"name":"address","nodeType":"ElementaryTypeName","src":"29739:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6054,"mutability":"mutable","name":"recipient","nameLocation":"29761:9:19","nodeType":"VariableDeclaration","scope":6096,"src":"29753:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6053,"name":"address","nodeType":"ElementaryTypeName","src":"29753:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6057,"mutability":"mutable","name":"token","nameLocation":"29779:5:19","nodeType":"VariableDeclaration","scope":6096,"src":"29772:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":6056,"nodeType":"UserDefinedTypeName","pathNode":{"id":6055,"name":"IERC20","nameLocations":["29772:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"29772:6:19"},"referencedDeclaration":6654,"src":"29772:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"29738:47:19"},"returnParameters":{"id":6059,"nodeType":"ParameterList","parameters":[],"src":"29795:0:19"},"scope":6298,"src":"29708:403:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[606],"body":{"id":6112,"nodeType":"Block","src":"30257:58:19","statements":[{"expression":{"arguments":[{"id":6108,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6099,"src":"30292:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6109,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6101,"src":"30298:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6107,"name":"_withdrawPoolCreatorFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"30267:24:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":6110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30267:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6111,"nodeType":"ExpressionStatement","src":"30267:41:19"}]},"documentation":{"id":6097,"nodeType":"StructuredDocumentation","src":"30117:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"f7061445","id":6113,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6104,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6099,"src":"30251:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6105,"kind":"modifierInvocation","modifierName":{"id":6103,"name":"onlyPoolCreator","nameLocations":["30235:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":4723,"src":"30235:15:19"},"nodeType":"ModifierInvocation","src":"30235:21:19"}],"name":"withdrawPoolCreatorFees","nameLocation":"30169:23:19","nodeType":"FunctionDefinition","parameters":{"id":6102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6099,"mutability":"mutable","name":"pool","nameLocation":"30201:4:19","nodeType":"VariableDeclaration","scope":6113,"src":"30193:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6098,"name":"address","nodeType":"ElementaryTypeName","src":"30193:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6101,"mutability":"mutable","name":"recipient","nameLocation":"30215:9:19","nodeType":"VariableDeclaration","scope":6113,"src":"30207:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6100,"name":"address","nodeType":"ElementaryTypeName","src":"30207:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"30192:33:19"},"returnParameters":{"id":6106,"nodeType":"ParameterList","parameters":[],"src":"30257:0:19"},"scope":6298,"src":"30160:155:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[612],"body":{"id":6126,"nodeType":"Block","src":"30420:70:19","statements":[{"expression":{"arguments":[{"id":6120,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6116,"src":"30455:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6122,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6116,"src":"30477:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6121,"name":"_getPoolCreator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5562,"src":"30461:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_address_$","typeString":"function (address) view returns (address)"}},"id":6123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30461:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6119,"name":"_withdrawPoolCreatorFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"30430:24:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":6124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30430:53:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6125,"nodeType":"ExpressionStatement","src":"30430:53:19"}]},"documentation":{"id":6114,"nodeType":"StructuredDocumentation","src":"30321:38:19","text":"@inheritdoc IProtocolFeeController"},"functionSelector":"52f125f0","id":6127,"implemented":true,"kind":"function","modifiers":[],"name":"withdrawPoolCreatorFees","nameLocation":"30373:23:19","nodeType":"FunctionDefinition","parameters":{"id":6117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6116,"mutability":"mutable","name":"pool","nameLocation":"30405:4:19","nodeType":"VariableDeclaration","scope":6127,"src":"30397:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6115,"name":"address","nodeType":"ElementaryTypeName","src":"30397:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"30396:14:19"},"returnParameters":{"id":6118,"nodeType":"ParameterList","parameters":[],"src":"30420:0:19"},"scope":6298,"src":"30364:126:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6199,"nodeType":"Block","src":"30571:541:19","statements":[{"assignments":[6138,6140],"declarations":[{"constant":false,"id":6138,"mutability":"mutable","name":"poolTokens","nameLocation":"30598:10:19","nodeType":"VariableDeclaration","scope":6199,"src":"30582:26:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":6136,"nodeType":"UserDefinedTypeName","pathNode":{"id":6135,"name":"IERC20","nameLocations":["30582:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"30582:6:19"},"referencedDeclaration":6654,"src":"30582:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":6137,"nodeType":"ArrayTypeName","src":"30582:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":6140,"mutability":"mutable","name":"numTokens","nameLocation":"30618:9:19","nodeType":"VariableDeclaration","scope":6199,"src":"30610:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6139,"name":"uint256","nodeType":"ElementaryTypeName","src":"30610:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6144,"initialValue":{"arguments":[{"id":6142,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6129,"src":"30654:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6141,"name":"_getPoolTokensAndCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5543,"src":"30631:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr_$_t_uint256_$","typeString":"function (address) view returns (contract IERC20[] memory,uint256)"}},"id":6143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30631:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(contract IERC20[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"30581:78:19"},{"body":{"id":6197,"nodeType":"Block","src":"30710:396:19","statements":[{"assignments":[6157],"declarations":[{"constant":false,"id":6157,"mutability":"mutable","name":"token","nameLocation":"30731:5:19","nodeType":"VariableDeclaration","scope":6197,"src":"30724:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":6156,"nodeType":"UserDefinedTypeName","pathNode":{"id":6155,"name":"IERC20","nameLocations":["30724:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"30724:6:19"},"referencedDeclaration":6654,"src":"30724:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"}],"id":6161,"initialValue":{"baseExpression":{"id":6158,"name":"poolTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6138,"src":"30739:10:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6654_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":6160,"indexExpression":{"id":6159,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6146,"src":"30750:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30739:13:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"30724:28:19"},{"assignments":[6163],"declarations":[{"constant":false,"id":6163,"mutability":"mutable","name":"amountToWithdraw","nameLocation":"30775:16:19","nodeType":"VariableDeclaration","scope":6197,"src":"30767:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6162,"name":"uint256","nodeType":"ElementaryTypeName","src":"30767:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6169,"initialValue":{"baseExpression":{"baseExpression":{"id":6164,"name":"_poolCreatorFeeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"30794:22:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"}},"id":6166,"indexExpression":{"id":6165,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6129,"src":"30817:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30794:28:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6168,"indexExpression":{"id":6167,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6157,"src":"30823:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30794:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"30767:62:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6170,"name":"amountToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6163,"src":"30847:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30866:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"30847:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6196,"nodeType":"IfStatement","src":"30843:253:19","trueBody":{"id":6195,"nodeType":"Block","src":"30869:227:19","statements":[{"expression":{"id":6179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6173,"name":"_poolCreatorFeeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"30887:22:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$_$","typeString":"mapping(address => mapping(contract IERC20 => uint256))"}},"id":6176,"indexExpression":{"id":6174,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6129,"src":"30910:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30887:28:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$6654_$_t_uint256_$","typeString":"mapping(contract IERC20 => uint256)"}},"id":6177,"indexExpression":{"id":6175,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6157,"src":"30916:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"30887:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":6178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30925:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"30887:39:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6180,"nodeType":"ExpressionStatement","src":"30887:39:19"},{"expression":{"arguments":[{"id":6184,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6131,"src":"30963:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6185,"name":"amountToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6163,"src":"30974:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6181,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6157,"src":"30944:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":6183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30950:12:19","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":6766,"src":"30944:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6654_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$6654_$","typeString":"function (contract IERC20,address,uint256)"}},"id":6186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30944:47:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6187,"nodeType":"ExpressionStatement","src":"30944:47:19"},{"eventCall":{"arguments":[{"id":6189,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6129,"src":"31040:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6190,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6157,"src":"31046:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},{"id":6191,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6131,"src":"31053:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6192,"name":"amountToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6163,"src":"31064:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6188,"name":"PoolCreatorFeesWithdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"31015:24:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_contract$_IERC20_$6654_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,contract IERC20,address,uint256)"}},"id":6193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31015:66:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6194,"nodeType":"EmitStatement","src":"31010:71:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6149,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6146,"src":"30690:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6150,"name":"numTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6140,"src":"30694:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30690:13:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6198,"initializationExpression":{"assignments":[6146],"declarations":[{"constant":false,"id":6146,"mutability":"mutable","name":"i","nameLocation":"30683:1:19","nodeType":"VariableDeclaration","scope":6198,"src":"30675:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6145,"name":"uint256","nodeType":"ElementaryTypeName","src":"30675:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6148,"initialValue":{"hexValue":"30","id":6147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30687:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"30675:13:19"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":6153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"30705:3:19","subExpression":{"id":6152,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6146,"src":"30707:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6154,"nodeType":"ExpressionStatement","src":"30705:3:19"},"nodeType":"ForStatement","src":"30670:436:19"}]},"id":6200,"implemented":true,"kind":"function","modifiers":[],"name":"_withdrawPoolCreatorFees","nameLocation":"30505:24:19","nodeType":"FunctionDefinition","parameters":{"id":6132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6129,"mutability":"mutable","name":"pool","nameLocation":"30538:4:19","nodeType":"VariableDeclaration","scope":6200,"src":"30530:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6128,"name":"address","nodeType":"ElementaryTypeName","src":"30530:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6131,"mutability":"mutable","name":"recipient","nameLocation":"30552:9:19","nodeType":"VariableDeclaration","scope":6200,"src":"30544:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6130,"name":"address","nodeType":"ElementaryTypeName","src":"30544:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"30529:33:19"},"returnParameters":{"id":6133,"nodeType":"ParameterList","parameters":[],"src":"30571:0:19"},"scope":6298,"src":"30496:616:19","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":6237,"nodeType":"Block","src":"31352:771:19","statements":[{"expression":{"id":6219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6210,"name":"_poolProtocolSwapFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4674,"src":"31667:31:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":6212,"indexExpression":{"id":6211,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6203,"src":"31699:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"31667:37:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6214,"name":"newProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6205,"src":"31750:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31779:8:19","memberName":"toUint64","nodeType":"MemberAccess","referencedDeclaration":7958,"src":"31750:37:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint64_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint64)"}},"id":6216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31750:39:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":6217,"name":"isOverride","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"31815:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6213,"name":"PoolFeeConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"31707:13:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PoolFeeConfig_$4656_storage_ptr_$","typeString":"type(struct ProtocolFeeController.PoolFeeConfig storage pointer)"}},"id":6218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["31735:13:19","31803:10:19"],"names":["feePercentage","isOverride"],"nodeType":"FunctionCall","src":"31707:129:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"src":"31667:169:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"id":6220,"nodeType":"ExpressionStatement","src":"31667:169:19"},{"expression":{"arguments":[{"id":6224,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6203,"src":"31971:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6226,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6203,"src":"32004:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6227,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"32010:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":6228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"32026:4:19","memberName":"SWAP","nodeType":"MemberAccess","referencedDeclaration":4648,"src":"32010:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}],"id":6225,"name":"_getAggregateFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5453,"src":"31977:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_enum$_ProtocolFeeType_$4650_$returns$_t_uint256_$","typeString":"function (address,enum ProtocolFeeController.ProtocolFeeType) view returns (uint256)"}},"id":6229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31977:54:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6221,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"31931:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":6223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31938:32:19","memberName":"updateAggregateSwapFeePercentage","nodeType":"MemberAccess","referencedDeclaration":787,"src":"31931:39:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":6230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31931:101:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6231,"nodeType":"ExpressionStatement","src":"31931:101:19"},{"eventCall":{"arguments":[{"id":6233,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6203,"src":"32081:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6234,"name":"newProtocolSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6205,"src":"32087:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6232,"name":"ProtocolSwapFeePercentageChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"32048:32:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32048:68:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6236,"nodeType":"EmitStatement","src":"32043:73:19"}]},"documentation":{"id":6201,"nodeType":"StructuredDocumentation","src":"31118:114:19","text":"@dev Common code shared between set/update. `isOverride` will be true if governance is setting the percentage."},"id":6238,"implemented":true,"kind":"function","modifiers":[],"name":"_updatePoolSwapFeePercentage","nameLocation":"31246:28:19","nodeType":"FunctionDefinition","parameters":{"id":6208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6203,"mutability":"mutable","name":"pool","nameLocation":"31283:4:19","nodeType":"VariableDeclaration","scope":6238,"src":"31275:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6202,"name":"address","nodeType":"ElementaryTypeName","src":"31275:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6205,"mutability":"mutable","name":"newProtocolSwapFeePercentage","nameLocation":"31297:28:19","nodeType":"VariableDeclaration","scope":6238,"src":"31289:36:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6204,"name":"uint256","nodeType":"ElementaryTypeName","src":"31289:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6207,"mutability":"mutable","name":"isOverride","nameLocation":"31332:10:19","nodeType":"VariableDeclaration","scope":6238,"src":"31327:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6206,"name":"bool","nodeType":"ElementaryTypeName","src":"31327:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"31274:69:19"},"returnParameters":{"id":6209,"nodeType":"ParameterList","parameters":[],"src":"31352:0:19"},"scope":6298,"src":"31237:886:19","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":6275,"nodeType":"Block","src":"32395:767:19","statements":[{"expression":{"id":6257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6248,"name":"_poolProtocolYieldFeePercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4679,"src":"32699:32:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PoolFeeConfig_$4656_storage_$","typeString":"mapping(address => struct ProtocolFeeController.PoolFeeConfig storage ref)"}},"id":6250,"indexExpression":{"id":6249,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6241,"src":"32732:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"32699:38:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6252,"name":"newProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6243,"src":"32783:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"32813:8:19","memberName":"toUint64","nodeType":"MemberAccess","referencedDeclaration":7958,"src":"32783:38:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint64_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint64)"}},"id":6254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32783:40:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":6255,"name":"isOverride","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"32849:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6251,"name":"PoolFeeConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"32740:13:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PoolFeeConfig_$4656_storage_ptr_$","typeString":"type(struct ProtocolFeeController.PoolFeeConfig storage pointer)"}},"id":6256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["32768:13:19","32837:10:19"],"names":["feePercentage","isOverride"],"nodeType":"FunctionCall","src":"32740:130:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_memory_ptr","typeString":"struct ProtocolFeeController.PoolFeeConfig memory"}},"src":"32699:171:19","typeDescriptions":{"typeIdentifier":"t_struct$_PoolFeeConfig_$4656_storage","typeString":"struct ProtocolFeeController.PoolFeeConfig storage ref"}},"id":6258,"nodeType":"ExpressionStatement","src":"32699:171:19"},{"expression":{"arguments":[{"id":6262,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6241,"src":"33007:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6264,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6241,"src":"33040:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6265,"name":"ProtocolFeeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"33046:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ProtocolFeeType_$4650_$","typeString":"type(enum ProtocolFeeController.ProtocolFeeType)"}},"id":6266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"33062:5:19","memberName":"YIELD","nodeType":"MemberAccess","referencedDeclaration":4649,"src":"33046:21:19","typeDescriptions":{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_ProtocolFeeType_$4650","typeString":"enum ProtocolFeeController.ProtocolFeeType"}],"id":6263,"name":"_getAggregateFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5453,"src":"33013:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_enum$_ProtocolFeeType_$4650_$returns$_t_uint256_$","typeString":"function (address,enum ProtocolFeeController.ProtocolFeeType) view returns (uint256)"}},"id":6267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33013:55:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6259,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"32966:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":6261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"32973:33:19","memberName":"updateAggregateYieldFeePercentage","nodeType":"MemberAccess","referencedDeclaration":795,"src":"32966:40:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":6268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32966:103:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6269,"nodeType":"ExpressionStatement","src":"32966:103:19"},{"eventCall":{"arguments":[{"id":6271,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6241,"src":"33119:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6272,"name":"newProtocolYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6243,"src":"33125:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6270,"name":"ProtocolYieldFeePercentageChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"33085:33:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33085:70:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6274,"nodeType":"EmitStatement","src":"33080:75:19"}]},"documentation":{"id":6239,"nodeType":"StructuredDocumentation","src":"32129:114:19","text":"@dev Common code shared between set/update. `isOverride` will be true if governance is setting the percentage."},"id":6276,"implemented":true,"kind":"function","modifiers":[],"name":"_updatePoolYieldFeePercentage","nameLocation":"32257:29:19","nodeType":"FunctionDefinition","parameters":{"id":6246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6241,"mutability":"mutable","name":"pool","nameLocation":"32304:4:19","nodeType":"VariableDeclaration","scope":6276,"src":"32296:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6240,"name":"address","nodeType":"ElementaryTypeName","src":"32296:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6243,"mutability":"mutable","name":"newProtocolYieldFeePercentage","nameLocation":"32326:29:19","nodeType":"VariableDeclaration","scope":6276,"src":"32318:37:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6242,"name":"uint256","nodeType":"ElementaryTypeName","src":"32318:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6245,"mutability":"mutable","name":"isOverride","nameLocation":"32370:10:19","nodeType":"VariableDeclaration","scope":6276,"src":"32365:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6244,"name":"bool","nodeType":"ElementaryTypeName","src":"32365:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"32286:100:19"},"returnParameters":{"id":6247,"nodeType":"ParameterList","parameters":[],"src":"32395:0:19"},"scope":6298,"src":"32248:914:19","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":6296,"nodeType":"Block","src":"33235:682:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6281,"name":"feePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6278,"src":"33770:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":6282,"name":"FEE_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"33786:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33770:34:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6284,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"33769:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":6285,"name":"FEE_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"33808:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33769:57:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6287,"name":"feePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6278,"src":"33830:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33769:74:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6295,"nodeType":"IfStatement","src":"33765:146:19","trueBody":{"id":6294,"nodeType":"Block","src":"33845:66:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6289,"name":"IVaultErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"33866:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IVaultErrors_$1308_$","typeString":"type(contract IVaultErrors)"}},"id":6291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"33879:19:19","memberName":"FeePrecisionTooHigh","nodeType":"MemberAccess","referencedDeclaration":1156,"src":"33866:32:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":6292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33866:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6293,"nodeType":"RevertStatement","src":"33859:41:19"}]}}]},"id":6297,"implemented":true,"kind":"function","modifiers":[],"name":"_ensureValidPrecision","nameLocation":"33177:21:19","nodeType":"FunctionDefinition","parameters":{"id":6279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6278,"mutability":"mutable","name":"feePercentage","nameLocation":"33207:13:19","nodeType":"VariableDeclaration","scope":6297,"src":"33199:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6277,"name":"uint256","nodeType":"ElementaryTypeName","src":"33199:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33198:23:19"},"returnParameters":{"id":6280,"nodeType":"ParameterList","parameters":[],"src":"33235:0:19"},"scope":6298,"src":"33168:749:19","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":6299,"src":"3120:30799:19","usedErrors":[38,394,397,402,409,412,1156,1180,2499,4159,4710,4713,6733,7014,7019,7022,7269],"usedEvents":[287,292,299,306,313,320,330,340,352,364,373,382,391]}],"src":"46:33874:19"},"id":19},"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol":{"ast":{"absolutePath":"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol","exportedSymbols":{"CommonAuthentication":[4603],"IAuthorizer":[73],"IVault":[651],"SingletonAuthentication":[6357]},"id":6358,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":6300,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:20"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol","id":6302,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6358,"sourceUnit":74,"src":"72:91:20","symbolAliases":[{"foreign":{"id":6301,"name":"IAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"81:11:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","id":6304,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6358,"sourceUnit":652,"src":"164:81:20","symbolAliases":[{"foreign":{"id":6303,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"173:6:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-vault/contracts/CommonAuthentication.sol","file":"./CommonAuthentication.sol","id":6306,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6358,"sourceUnit":4604,"src":"247:66:20","symbolAliases":[{"foreign":{"id":6305,"name":"CommonAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4603,"src":"256:20:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":6308,"name":"CommonAuthentication","nameLocations":["735:20:20"],"nodeType":"IdentifierPath","referencedDeclaration":4603,"src":"735:20:20"},"id":6309,"nodeType":"InheritanceSpecifier","src":"735:20:20"}],"canonicalName":"SingletonAuthentication","contractDependencies":[],"contractKind":"contract","documentation":{"id":6307,"nodeType":"StructuredDocumentation","src":"315:374:20","text":" @notice Base contract suitable for Singleton contracts (e.g., pool factories) that have permissioned functions.\n @dev The disambiguator is the contract's own address. This is used in the construction of actionIds for permissioned\n functions, to avoid conflicts when multiple contracts (or multiple versions of the same contract) use the same\n function name."},"fullyImplemented":true,"id":6357,"linearizedBaseContracts":[6357,4603,2491,47],"name":"SingletonAuthentication","nameLocation":"708:23:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":6331,"nodeType":"Block","src":"932:64:20","statements":[]},"id":6332,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":6315,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6312,"src":"883:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"id":6324,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"922:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_SingletonAuthentication_$6357","typeString":"contract SingletonAuthentication"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SingletonAuthentication_$6357","typeString":"contract SingletonAuthentication"}],"id":6323,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"914:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6322,"name":"address","nodeType":"ElementaryTypeName","src":"914:7:20","typeDescriptions":{}}},"id":6325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"914:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"906:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6320,"name":"uint160","nodeType":"ElementaryTypeName","src":"906:7:20","typeDescriptions":{}}},"id":6326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"906:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"898:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6318,"name":"uint256","nodeType":"ElementaryTypeName","src":"898:7:20","typeDescriptions":{}}},"id":6327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"898:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"890:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6316,"name":"bytes32","nodeType":"ElementaryTypeName","src":"890:7:20","typeDescriptions":{}}},"id":6328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"890:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6329,"kind":"baseConstructorSpecifier","modifierName":{"id":6314,"name":"CommonAuthentication","nameLocations":["862:20:20"],"nodeType":"IdentifierPath","referencedDeclaration":4603,"src":"862:20:20"},"nodeType":"ModifierInvocation","src":"862:69:20"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6312,"mutability":"mutable","name":"vault","nameLocation":"855:5:20","nodeType":"VariableDeclaration","scope":6332,"src":"848:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":6311,"nodeType":"UserDefinedTypeName","pathNode":{"id":6310,"name":"IVault","nameLocations":["848:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"848:6:20"},"referencedDeclaration":651,"src":"848:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"}],"src":"847:14:20"},"returnParameters":{"id":6330,"nodeType":"ParameterList","parameters":[],"src":"932:0:20"},"scope":6357,"src":"836:160:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6342,"nodeType":"Block","src":"1176:35:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6339,"name":"_getVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4485,"src":"1193:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IVault_$651_$","typeString":"function () view returns (contract IVault)"}},"id":6340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1193:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"functionReturnParameters":6338,"id":6341,"nodeType":"Return","src":"1186:18:20"}]},"documentation":{"id":6333,"nodeType":"StructuredDocumentation","src":"1002:120:20","text":" @notice Get the address of the Balancer Vault.\n @return vault An interface pointer to the Vault"},"functionSelector":"8d928af8","id":6343,"implemented":true,"kind":"function","modifiers":[],"name":"getVault","nameLocation":"1136:8:20","nodeType":"FunctionDefinition","parameters":{"id":6334,"nodeType":"ParameterList","parameters":[],"src":"1144:2:20"},"returnParameters":{"id":6338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6343,"src":"1168:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":6336,"nodeType":"UserDefinedTypeName","pathNode":{"id":6335,"name":"IVault","nameLocations":["1168:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"1168:6:20"},"referencedDeclaration":651,"src":"1168:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"}],"src":"1167:8:20"},"scope":6357,"src":"1127:84:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":6355,"nodeType":"Block","src":"1407:50:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6350,"name":"getVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6343,"src":"1424:8:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IVault_$651_$","typeString":"function () view returns (contract IVault)"}},"id":6351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1424:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":6352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1435:13:20","memberName":"getAuthorizer","nodeType":"MemberAccess","referencedDeclaration":1965,"src":"1424:24:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IAuthorizer_$73_$","typeString":"function () view external returns (contract IAuthorizer)"}},"id":6353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1424:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"}},"functionReturnParameters":6349,"id":6354,"nodeType":"Return","src":"1417:33:20"}]},"documentation":{"id":6344,"nodeType":"StructuredDocumentation","src":"1217:126:20","text":" @notice Get the address of the Authorizer.\n @return authorizer An interface pointer to the Authorizer"},"functionSelector":"aaabadc5","id":6356,"implemented":true,"kind":"function","modifiers":[],"name":"getAuthorizer","nameLocation":"1357:13:20","nodeType":"FunctionDefinition","parameters":{"id":6345,"nodeType":"ParameterList","parameters":[],"src":"1370:2:20"},"returnParameters":{"id":6349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6356,"src":"1394:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"},"typeName":{"id":6347,"nodeType":"UserDefinedTypeName","pathNode":{"id":6346,"name":"IAuthorizer","nameLocations":["1394:11:20"],"nodeType":"IdentifierPath","referencedDeclaration":73,"src":"1394:11:20"},"referencedDeclaration":73,"src":"1394:11:20","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"1393:13:20"},"scope":6357,"src":"1348:109:20","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":6358,"src":"690:769:20","usedErrors":[38],"usedEvents":[]}],"src":"46:1414:20"},"id":20},"@balancer-labs/v3-vault/contracts/VaultGuard.sol":{"ast":{"absolutePath":"@balancer-labs/v3-vault/contracts/VaultGuard.sol","exportedSymbols":{"IVault":[651],"IVaultErrors":[1308],"VaultGuard":[6406]},"id":6407,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":6359,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:21"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol","id":6361,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6407,"sourceUnit":1309,"src":"72:93:21","symbolAliases":[{"foreign":{"id":6360,"name":"IVaultErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"81:12:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","id":6363,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6407,"sourceUnit":652,"src":"166:81:21","symbolAliases":[{"foreign":{"id":6362,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"175:6:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"VaultGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":6364,"nodeType":"StructuredDocumentation","src":"249:59:21","text":"@notice Contract that shares the modifier `onlyVault`."},"fullyImplemented":true,"id":6406,"linearizedBaseContracts":[6406],"name":"VaultGuard","nameLocation":"317:10:21","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":6367,"mutability":"immutable","name":"_vault","nameLocation":"360:6:21","nodeType":"VariableDeclaration","scope":6406,"src":"334:32:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":6366,"nodeType":"UserDefinedTypeName","pathNode":{"id":6365,"name":"IVault","nameLocations":["334:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"334:6:21"},"referencedDeclaration":651,"src":"334:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"},{"body":{"id":6377,"nodeType":"Block","src":"399:31:21","statements":[{"expression":{"id":6375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6373,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"409:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6374,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6370,"src":"418:5:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"src":"409:14:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":6376,"nodeType":"ExpressionStatement","src":"409:14:21"}]},"id":6378,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6370,"mutability":"mutable","name":"vault","nameLocation":"392:5:21","nodeType":"VariableDeclaration","scope":6378,"src":"385:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":6369,"nodeType":"UserDefinedTypeName","pathNode":{"id":6368,"name":"IVault","nameLocations":["385:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"385:6:21"},"referencedDeclaration":651,"src":"385:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"}],"src":"384:14:21"},"returnParameters":{"id":6372,"nodeType":"ParameterList","parameters":[],"src":"399:0:21"},"scope":6406,"src":"373:57:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6384,"nodeType":"Block","src":"457:46:21","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6380,"name":"_ensureOnlyVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6405,"src":"467:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":6381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"467:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6382,"nodeType":"ExpressionStatement","src":"467:18:21"},{"id":6383,"nodeType":"PlaceholderStatement","src":"495:1:21"}]},"id":6385,"name":"onlyVault","nameLocation":"445:9:21","nodeType":"ModifierDefinition","parameters":{"id":6379,"nodeType":"ParameterList","parameters":[],"src":"454:2:21"},"src":"436:67:21","virtual":false,"visibility":"internal"},{"body":{"id":6404,"nodeType":"Block","src":"550:124:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6388,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"564:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"568:6:21","memberName":"sender","nodeType":"MemberAccess","src":"564:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":6392,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"586:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}],"id":6391,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"578:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6390,"name":"address","nodeType":"ElementaryTypeName","src":"578:7:21","typeDescriptions":{}}},"id":6393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"578:15:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"564:29:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6403,"nodeType":"IfStatement","src":"560:108:21","trueBody":{"id":6402,"nodeType":"Block","src":"595:73:21","statements":[{"errorCall":{"arguments":[{"expression":{"id":6398,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"646:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"650:6:21","memberName":"sender","nodeType":"MemberAccess","src":"646:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6395,"name":"IVaultErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"616:12:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IVaultErrors_$1308_$","typeString":"type(contract IVaultErrors)"}},"id":6397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"629:16:21","memberName":"SenderIsNotVault","nodeType":"MemberAccess","referencedDeclaration":1180,"src":"616:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"616:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6401,"nodeType":"RevertStatement","src":"609:48:21"}]}}]},"id":6405,"implemented":true,"kind":"function","modifiers":[],"name":"_ensureOnlyVault","nameLocation":"518:16:21","nodeType":"FunctionDefinition","parameters":{"id":6386,"nodeType":"ParameterList","parameters":[],"src":"534:2:21"},"returnParameters":{"id":6387,"nodeType":"ParameterList","parameters":[],"src":"550:0:21"},"scope":6406,"src":"509:165:21","stateMutability":"view","virtual":false,"visibility":"private"}],"scope":6407,"src":"308:368:21","usedErrors":[],"usedEvents":[]}],"src":"46:631:21"},"id":21},"@openzeppelin/contracts/interfaces/IERC4626.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","exportedSymbols":{"IERC20":[6654],"IERC20Metadata":[6680],"IERC4626":[6576]},"id":6577,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6408,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:22"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":6410,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6577,"sourceUnit":6655,"src":"133:49:22","symbolAliases":[{"foreign":{"id":6409,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6654,"src":"141:6:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"../token/ERC20/extensions/IERC20Metadata.sol","id":6412,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6577,"sourceUnit":6681,"src":"183:76:22","symbolAliases":[{"foreign":{"id":6411,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6680,"src":"191:14:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6414,"name":"IERC20","nameLocations":["420:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"420:6:22"},"id":6415,"nodeType":"InheritanceSpecifier","src":"420:6:22"},{"baseName":{"id":6416,"name":"IERC20Metadata","nameLocations":["428:14:22"],"nodeType":"IdentifierPath","referencedDeclaration":6680,"src":"428:14:22"},"id":6417,"nodeType":"InheritanceSpecifier","src":"428:14:22"}],"canonicalName":"IERC4626","contractDependencies":[],"contractKind":"interface","documentation":{"id":6413,"nodeType":"StructuredDocumentation","src":"261:136:22","text":" @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n https://eips.ethereum.org/EIPS/eip-4626[ERC-4626]."},"fullyImplemented":false,"id":6576,"linearizedBaseContracts":[6576,6680,6654],"name":"IERC4626","nameLocation":"408:8:22","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"dcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7","id":6427,"name":"Deposit","nameLocation":"455:7:22","nodeType":"EventDefinition","parameters":{"id":6426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6419,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"479:6:22","nodeType":"VariableDeclaration","scope":6427,"src":"463:22:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6418,"name":"address","nodeType":"ElementaryTypeName","src":"463:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6421,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"503:5:22","nodeType":"VariableDeclaration","scope":6427,"src":"487:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6420,"name":"address","nodeType":"ElementaryTypeName","src":"487:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6423,"indexed":false,"mutability":"mutable","name":"assets","nameLocation":"518:6:22","nodeType":"VariableDeclaration","scope":6427,"src":"510:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6422,"name":"uint256","nodeType":"ElementaryTypeName","src":"510:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6425,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"534:6:22","nodeType":"VariableDeclaration","scope":6427,"src":"526:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6424,"name":"uint256","nodeType":"ElementaryTypeName","src":"526:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"462:79:22"},"src":"449:93:22"},{"anonymous":false,"eventSelector":"fbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db","id":6439,"name":"Withdraw","nameLocation":"554:8:22","nodeType":"EventDefinition","parameters":{"id":6438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6429,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"588:6:22","nodeType":"VariableDeclaration","scope":6439,"src":"572:22:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6428,"name":"address","nodeType":"ElementaryTypeName","src":"572:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6431,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"620:8:22","nodeType":"VariableDeclaration","scope":6439,"src":"604:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6430,"name":"address","nodeType":"ElementaryTypeName","src":"604:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6433,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"654:5:22","nodeType":"VariableDeclaration","scope":6439,"src":"638:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6432,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6435,"indexed":false,"mutability":"mutable","name":"assets","nameLocation":"677:6:22","nodeType":"VariableDeclaration","scope":6439,"src":"669:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6434,"name":"uint256","nodeType":"ElementaryTypeName","src":"669:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6437,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"701:6:22","nodeType":"VariableDeclaration","scope":6439,"src":"693:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6436,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"562:151:22"},"src":"548:166:22"},{"documentation":{"id":6440,"nodeType":"StructuredDocumentation","src":"720:207:22","text":" @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n - MUST be an ERC-20 token contract.\n - MUST NOT revert."},"functionSelector":"38d52e0f","id":6445,"implemented":false,"kind":"function","modifiers":[],"name":"asset","nameLocation":"941:5:22","nodeType":"FunctionDefinition","parameters":{"id":6441,"nodeType":"ParameterList","parameters":[],"src":"946:2:22"},"returnParameters":{"id":6444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6443,"mutability":"mutable","name":"assetTokenAddress","nameLocation":"980:17:22","nodeType":"VariableDeclaration","scope":6445,"src":"972:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6442,"name":"address","nodeType":"ElementaryTypeName","src":"972:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"971:27:22"},"scope":6576,"src":"932:67:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6446,"nodeType":"StructuredDocumentation","src":"1005:286:22","text":" @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n - SHOULD include any compounding that occurs from yield.\n - MUST be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT revert."},"functionSelector":"01e1d114","id":6451,"implemented":false,"kind":"function","modifiers":[],"name":"totalAssets","nameLocation":"1305:11:22","nodeType":"FunctionDefinition","parameters":{"id":6447,"nodeType":"ParameterList","parameters":[],"src":"1316:2:22"},"returnParameters":{"id":6450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6449,"mutability":"mutable","name":"totalManagedAssets","nameLocation":"1350:18:22","nodeType":"VariableDeclaration","scope":6451,"src":"1342:26:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6448,"name":"uint256","nodeType":"ElementaryTypeName","src":"1342:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1341:28:22"},"scope":6576,"src":"1296:74:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6452,"nodeType":"StructuredDocumentation","src":"1376:720:22","text":" @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."},"functionSelector":"c6e6f592","id":6459,"implemented":false,"kind":"function","modifiers":[],"name":"convertToShares","nameLocation":"2110:15:22","nodeType":"FunctionDefinition","parameters":{"id":6455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6454,"mutability":"mutable","name":"assets","nameLocation":"2134:6:22","nodeType":"VariableDeclaration","scope":6459,"src":"2126:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6453,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2125:16:22"},"returnParameters":{"id":6458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6457,"mutability":"mutable","name":"shares","nameLocation":"2173:6:22","nodeType":"VariableDeclaration","scope":6459,"src":"2165:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6456,"name":"uint256","nodeType":"ElementaryTypeName","src":"2165:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2164:16:22"},"scope":6576,"src":"2101:80:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6460,"nodeType":"StructuredDocumentation","src":"2187:720:22","text":" @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."},"functionSelector":"07a2d13a","id":6467,"implemented":false,"kind":"function","modifiers":[],"name":"convertToAssets","nameLocation":"2921:15:22","nodeType":"FunctionDefinition","parameters":{"id":6463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6462,"mutability":"mutable","name":"shares","nameLocation":"2945:6:22","nodeType":"VariableDeclaration","scope":6467,"src":"2937:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6461,"name":"uint256","nodeType":"ElementaryTypeName","src":"2937:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2936:16:22"},"returnParameters":{"id":6466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6465,"mutability":"mutable","name":"assets","nameLocation":"2984:6:22","nodeType":"VariableDeclaration","scope":6467,"src":"2976:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6464,"name":"uint256","nodeType":"ElementaryTypeName","src":"2976:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2975:16:22"},"scope":6576,"src":"2912:80:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6468,"nodeType":"StructuredDocumentation","src":"2998:386:22","text":" @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n through a deposit call.\n - MUST return a limited value if receiver is subject to some deposit limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n - MUST NOT revert."},"functionSelector":"402d267d","id":6475,"implemented":false,"kind":"function","modifiers":[],"name":"maxDeposit","nameLocation":"3398:10:22","nodeType":"FunctionDefinition","parameters":{"id":6471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6470,"mutability":"mutable","name":"receiver","nameLocation":"3417:8:22","nodeType":"VariableDeclaration","scope":6475,"src":"3409:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6469,"name":"address","nodeType":"ElementaryTypeName","src":"3409:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3408:18:22"},"returnParameters":{"id":6474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6473,"mutability":"mutable","name":"maxAssets","nameLocation":"3458:9:22","nodeType":"VariableDeclaration","scope":6475,"src":"3450:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6472,"name":"uint256","nodeType":"ElementaryTypeName","src":"3450:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3449:19:22"},"scope":6576,"src":"3389:80:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6476,"nodeType":"StructuredDocumentation","src":"3475:1012:22","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n current on-chain conditions.\n - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n   in the same transaction.\n - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."},"functionSelector":"ef8b30f7","id":6483,"implemented":false,"kind":"function","modifiers":[],"name":"previewDeposit","nameLocation":"4501:14:22","nodeType":"FunctionDefinition","parameters":{"id":6479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6478,"mutability":"mutable","name":"assets","nameLocation":"4524:6:22","nodeType":"VariableDeclaration","scope":6483,"src":"4516:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6477,"name":"uint256","nodeType":"ElementaryTypeName","src":"4516:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4515:16:22"},"returnParameters":{"id":6482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6481,"mutability":"mutable","name":"shares","nameLocation":"4563:6:22","nodeType":"VariableDeclaration","scope":6483,"src":"4555:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6480,"name":"uint256","nodeType":"ElementaryTypeName","src":"4555:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4554:16:22"},"scope":6576,"src":"4492:79:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6484,"nodeType":"StructuredDocumentation","src":"4577:651:22","text":" @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   deposit execution, and are accounted for during deposit.\n - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."},"functionSelector":"6e553f65","id":6493,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"5242:7:22","nodeType":"FunctionDefinition","parameters":{"id":6489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6486,"mutability":"mutable","name":"assets","nameLocation":"5258:6:22","nodeType":"VariableDeclaration","scope":6493,"src":"5250:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6485,"name":"uint256","nodeType":"ElementaryTypeName","src":"5250:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6488,"mutability":"mutable","name":"receiver","nameLocation":"5274:8:22","nodeType":"VariableDeclaration","scope":6493,"src":"5266:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6487,"name":"address","nodeType":"ElementaryTypeName","src":"5266:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5249:34:22"},"returnParameters":{"id":6492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6491,"mutability":"mutable","name":"shares","nameLocation":"5310:6:22","nodeType":"VariableDeclaration","scope":6493,"src":"5302:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6490,"name":"uint256","nodeType":"ElementaryTypeName","src":"5302:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5301:16:22"},"scope":6576,"src":"5233:85:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":6494,"nodeType":"StructuredDocumentation","src":"5324:341:22","text":" @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n - MUST return a limited value if receiver is subject to some mint limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n - MUST NOT revert."},"functionSelector":"c63d75b6","id":6501,"implemented":false,"kind":"function","modifiers":[],"name":"maxMint","nameLocation":"5679:7:22","nodeType":"FunctionDefinition","parameters":{"id":6497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6496,"mutability":"mutable","name":"receiver","nameLocation":"5695:8:22","nodeType":"VariableDeclaration","scope":6501,"src":"5687:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6495,"name":"address","nodeType":"ElementaryTypeName","src":"5687:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5686:18:22"},"returnParameters":{"id":6500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6499,"mutability":"mutable","name":"maxShares","nameLocation":"5736:9:22","nodeType":"VariableDeclaration","scope":6501,"src":"5728:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6498,"name":"uint256","nodeType":"ElementaryTypeName","src":"5728:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5727:19:22"},"scope":6576,"src":"5670:77:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6502,"nodeType":"StructuredDocumentation","src":"5753:984:22","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n   same transaction.\n - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n   would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by minting."},"functionSelector":"b3d7f6b9","id":6509,"implemented":false,"kind":"function","modifiers":[],"name":"previewMint","nameLocation":"6751:11:22","nodeType":"FunctionDefinition","parameters":{"id":6505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6504,"mutability":"mutable","name":"shares","nameLocation":"6771:6:22","nodeType":"VariableDeclaration","scope":6509,"src":"6763:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6503,"name":"uint256","nodeType":"ElementaryTypeName","src":"6763:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6762:16:22"},"returnParameters":{"id":6508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6507,"mutability":"mutable","name":"assets","nameLocation":"6810:6:22","nodeType":"VariableDeclaration","scope":6509,"src":"6802:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6506,"name":"uint256","nodeType":"ElementaryTypeName","src":"6802:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6801:16:22"},"scope":6576,"src":"6742:76:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6510,"nodeType":"StructuredDocumentation","src":"6824:642:22","text":" @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n   execution, and are accounted for during mint.\n - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."},"functionSelector":"94bf804d","id":6519,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"7480:4:22","nodeType":"FunctionDefinition","parameters":{"id":6515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6512,"mutability":"mutable","name":"shares","nameLocation":"7493:6:22","nodeType":"VariableDeclaration","scope":6519,"src":"7485:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6511,"name":"uint256","nodeType":"ElementaryTypeName","src":"7485:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6514,"mutability":"mutable","name":"receiver","nameLocation":"7509:8:22","nodeType":"VariableDeclaration","scope":6519,"src":"7501:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6513,"name":"address","nodeType":"ElementaryTypeName","src":"7501:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7484:34:22"},"returnParameters":{"id":6518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6517,"mutability":"mutable","name":"assets","nameLocation":"7545:6:22","nodeType":"VariableDeclaration","scope":6519,"src":"7537:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6516,"name":"uint256","nodeType":"ElementaryTypeName","src":"7537:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7536:16:22"},"scope":6576,"src":"7471:82:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":6520,"nodeType":"StructuredDocumentation","src":"7559:293:22","text":" @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n Vault, through a withdraw call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST NOT revert."},"functionSelector":"ce96cb77","id":6527,"implemented":false,"kind":"function","modifiers":[],"name":"maxWithdraw","nameLocation":"7866:11:22","nodeType":"FunctionDefinition","parameters":{"id":6523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6522,"mutability":"mutable","name":"owner","nameLocation":"7886:5:22","nodeType":"VariableDeclaration","scope":6527,"src":"7878:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6521,"name":"address","nodeType":"ElementaryTypeName","src":"7878:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7877:15:22"},"returnParameters":{"id":6526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6525,"mutability":"mutable","name":"maxAssets","nameLocation":"7924:9:22","nodeType":"VariableDeclaration","scope":6527,"src":"7916:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6524,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7915:19:22"},"scope":6576,"src":"7857:78:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6528,"nodeType":"StructuredDocumentation","src":"7941:1034:22","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n given current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n   called\n   in the same transaction.\n - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."},"functionSelector":"0a28a477","id":6535,"implemented":false,"kind":"function","modifiers":[],"name":"previewWithdraw","nameLocation":"8989:15:22","nodeType":"FunctionDefinition","parameters":{"id":6531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6530,"mutability":"mutable","name":"assets","nameLocation":"9013:6:22","nodeType":"VariableDeclaration","scope":6535,"src":"9005:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6529,"name":"uint256","nodeType":"ElementaryTypeName","src":"9005:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9004:16:22"},"returnParameters":{"id":6534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6533,"mutability":"mutable","name":"shares","nameLocation":"9052:6:22","nodeType":"VariableDeclaration","scope":6535,"src":"9044:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6532,"name":"uint256","nodeType":"ElementaryTypeName","src":"9044:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9043:16:22"},"scope":6576,"src":"8980:80:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6536,"nodeType":"StructuredDocumentation","src":"9066:670:22","text":" @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   withdraw execution, and are accounted for during withdraw.\n - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."},"functionSelector":"b460af94","id":6547,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"9750:8:22","nodeType":"FunctionDefinition","parameters":{"id":6543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6538,"mutability":"mutable","name":"assets","nameLocation":"9767:6:22","nodeType":"VariableDeclaration","scope":6547,"src":"9759:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6537,"name":"uint256","nodeType":"ElementaryTypeName","src":"9759:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6540,"mutability":"mutable","name":"receiver","nameLocation":"9783:8:22","nodeType":"VariableDeclaration","scope":6547,"src":"9775:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6539,"name":"address","nodeType":"ElementaryTypeName","src":"9775:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6542,"mutability":"mutable","name":"owner","nameLocation":"9801:5:22","nodeType":"VariableDeclaration","scope":6547,"src":"9793:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6541,"name":"address","nodeType":"ElementaryTypeName","src":"9793:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9758:49:22"},"returnParameters":{"id":6546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6545,"mutability":"mutable","name":"shares","nameLocation":"9834:6:22","nodeType":"VariableDeclaration","scope":6547,"src":"9826:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6544,"name":"uint256","nodeType":"ElementaryTypeName","src":"9826:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9825:16:22"},"scope":6576,"src":"9741:101:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":6548,"nodeType":"StructuredDocumentation","src":"9848:381:22","text":" @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n through a redeem call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n - MUST NOT revert."},"functionSelector":"d905777e","id":6555,"implemented":false,"kind":"function","modifiers":[],"name":"maxRedeem","nameLocation":"10243:9:22","nodeType":"FunctionDefinition","parameters":{"id":6551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6550,"mutability":"mutable","name":"owner","nameLocation":"10261:5:22","nodeType":"VariableDeclaration","scope":6555,"src":"10253:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6549,"name":"address","nodeType":"ElementaryTypeName","src":"10253:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10252:15:22"},"returnParameters":{"id":6554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6553,"mutability":"mutable","name":"maxShares","nameLocation":"10299:9:22","nodeType":"VariableDeclaration","scope":6555,"src":"10291:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6552,"name":"uint256","nodeType":"ElementaryTypeName","src":"10291:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10290:19:22"},"scope":6576,"src":"10234:76:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6556,"nodeType":"StructuredDocumentation","src":"10316:1010:22","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n given current on-chain conditions.\n - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n   same transaction.\n - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n   redemption would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by redeeming."},"functionSelector":"4cdad506","id":6563,"implemented":false,"kind":"function","modifiers":[],"name":"previewRedeem","nameLocation":"11340:13:22","nodeType":"FunctionDefinition","parameters":{"id":6559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6558,"mutability":"mutable","name":"shares","nameLocation":"11362:6:22","nodeType":"VariableDeclaration","scope":6563,"src":"11354:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6557,"name":"uint256","nodeType":"ElementaryTypeName","src":"11354:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11353:16:22"},"returnParameters":{"id":6562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6561,"mutability":"mutable","name":"assets","nameLocation":"11401:6:22","nodeType":"VariableDeclaration","scope":6563,"src":"11393:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6560,"name":"uint256","nodeType":"ElementaryTypeName","src":"11393:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11392:16:22"},"scope":6576,"src":"11331:78:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6564,"nodeType":"StructuredDocumentation","src":"11415:661:22","text":" @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   redeem execution, and are accounted for during redeem.\n - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."},"functionSelector":"ba087652","id":6575,"implemented":false,"kind":"function","modifiers":[],"name":"redeem","nameLocation":"12090:6:22","nodeType":"FunctionDefinition","parameters":{"id":6571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6566,"mutability":"mutable","name":"shares","nameLocation":"12105:6:22","nodeType":"VariableDeclaration","scope":6575,"src":"12097:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6565,"name":"uint256","nodeType":"ElementaryTypeName","src":"12097:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6568,"mutability":"mutable","name":"receiver","nameLocation":"12121:8:22","nodeType":"VariableDeclaration","scope":6575,"src":"12113:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6567,"name":"address","nodeType":"ElementaryTypeName","src":"12113:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6570,"mutability":"mutable","name":"owner","nameLocation":"12139:5:22","nodeType":"VariableDeclaration","scope":6575,"src":"12131:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6569,"name":"address","nodeType":"ElementaryTypeName","src":"12131:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12096:49:22"},"returnParameters":{"id":6574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6573,"mutability":"mutable","name":"assets","nameLocation":"12172:6:22","nodeType":"VariableDeclaration","scope":6575,"src":"12164:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6572,"name":"uint256","nodeType":"ElementaryTypeName","src":"12164:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12163:16:22"},"scope":6576,"src":"12081:99:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6577,"src":"398:11784:22","usedErrors":[],"usedEvents":[6427,6439,6588,6597]}],"src":"107:12076:22"},"id":22},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[6654]},"id":6655,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6578,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":6579,"nodeType":"StructuredDocumentation","src":"132:70:23","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":6654,"linearizedBaseContracts":[6654],"name":"IERC20","nameLocation":"213:6:23","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":6580,"nodeType":"StructuredDocumentation","src":"226:158:23","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":6588,"name":"Transfer","nameLocation":"395:8:23","nodeType":"EventDefinition","parameters":{"id":6587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6582,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"420:4:23","nodeType":"VariableDeclaration","scope":6588,"src":"404:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6581,"name":"address","nodeType":"ElementaryTypeName","src":"404:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6584,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"442:2:23","nodeType":"VariableDeclaration","scope":6588,"src":"426:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6583,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6586,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"454:5:23","nodeType":"VariableDeclaration","scope":6588,"src":"446:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6585,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"403:57:23"},"src":"389:72:23"},{"anonymous":false,"documentation":{"id":6589,"nodeType":"StructuredDocumentation","src":"467:148:23","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":6597,"name":"Approval","nameLocation":"626:8:23","nodeType":"EventDefinition","parameters":{"id":6596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6591,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"651:5:23","nodeType":"VariableDeclaration","scope":6597,"src":"635:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6590,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6593,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"674:7:23","nodeType":"VariableDeclaration","scope":6597,"src":"658:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6592,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6595,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"691:5:23","nodeType":"VariableDeclaration","scope":6597,"src":"683:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6594,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"634:63:23"},"src":"620:78:23"},{"documentation":{"id":6598,"nodeType":"StructuredDocumentation","src":"704:65:23","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":6603,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:23","nodeType":"FunctionDefinition","parameters":{"id":6599,"nodeType":"ParameterList","parameters":[],"src":"794:2:23"},"returnParameters":{"id":6602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6601,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6603,"src":"820:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6600,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:23"},"scope":6654,"src":"774:55:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6604,"nodeType":"StructuredDocumentation","src":"835:71:23","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":6611,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"920:9:23","nodeType":"FunctionDefinition","parameters":{"id":6607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6606,"mutability":"mutable","name":"account","nameLocation":"938:7:23","nodeType":"VariableDeclaration","scope":6611,"src":"930:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6605,"name":"address","nodeType":"ElementaryTypeName","src":"930:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"929:17:23"},"returnParameters":{"id":6610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6611,"src":"970:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6608,"name":"uint256","nodeType":"ElementaryTypeName","src":"970:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"969:9:23"},"scope":6654,"src":"911:68:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6612,"nodeType":"StructuredDocumentation","src":"985:213:23","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":6621,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1212:8:23","nodeType":"FunctionDefinition","parameters":{"id":6617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6614,"mutability":"mutable","name":"to","nameLocation":"1229:2:23","nodeType":"VariableDeclaration","scope":6621,"src":"1221:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6613,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6616,"mutability":"mutable","name":"value","nameLocation":"1241:5:23","nodeType":"VariableDeclaration","scope":6621,"src":"1233:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6615,"name":"uint256","nodeType":"ElementaryTypeName","src":"1233:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:27:23"},"returnParameters":{"id":6620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6621,"src":"1266:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6618,"name":"bool","nodeType":"ElementaryTypeName","src":"1266:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1265:6:23"},"scope":6654,"src":"1203:69:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":6622,"nodeType":"StructuredDocumentation","src":"1278:264:23","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":6631,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1556:9:23","nodeType":"FunctionDefinition","parameters":{"id":6627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6624,"mutability":"mutable","name":"owner","nameLocation":"1574:5:23","nodeType":"VariableDeclaration","scope":6631,"src":"1566:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6623,"name":"address","nodeType":"ElementaryTypeName","src":"1566:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6626,"mutability":"mutable","name":"spender","nameLocation":"1589:7:23","nodeType":"VariableDeclaration","scope":6631,"src":"1581:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6625,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1565:32:23"},"returnParameters":{"id":6630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6631,"src":"1621:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6628,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1620:9:23"},"scope":6654,"src":"1547:83:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6632,"nodeType":"StructuredDocumentation","src":"1636:667:23","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":6641,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2317:7:23","nodeType":"FunctionDefinition","parameters":{"id":6637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6634,"mutability":"mutable","name":"spender","nameLocation":"2333:7:23","nodeType":"VariableDeclaration","scope":6641,"src":"2325:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6633,"name":"address","nodeType":"ElementaryTypeName","src":"2325:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6636,"mutability":"mutable","name":"value","nameLocation":"2350:5:23","nodeType":"VariableDeclaration","scope":6641,"src":"2342:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6635,"name":"uint256","nodeType":"ElementaryTypeName","src":"2342:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2324:32:23"},"returnParameters":{"id":6640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6639,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6641,"src":"2375:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6638,"name":"bool","nodeType":"ElementaryTypeName","src":"2375:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2374:6:23"},"scope":6654,"src":"2308:73:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":6642,"nodeType":"StructuredDocumentation","src":"2387:297:23","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":6653,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2698:12:23","nodeType":"FunctionDefinition","parameters":{"id":6649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6644,"mutability":"mutable","name":"from","nameLocation":"2719:4:23","nodeType":"VariableDeclaration","scope":6653,"src":"2711:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6643,"name":"address","nodeType":"ElementaryTypeName","src":"2711:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6646,"mutability":"mutable","name":"to","nameLocation":"2733:2:23","nodeType":"VariableDeclaration","scope":6653,"src":"2725:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6645,"name":"address","nodeType":"ElementaryTypeName","src":"2725:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6648,"mutability":"mutable","name":"value","nameLocation":"2745:5:23","nodeType":"VariableDeclaration","scope":6653,"src":"2737:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6647,"name":"uint256","nodeType":"ElementaryTypeName","src":"2737:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2710:41:23"},"returnParameters":{"id":6652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6653,"src":"2770:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6650,"name":"bool","nodeType":"ElementaryTypeName","src":"2770:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2769:6:23"},"scope":6654,"src":"2689:87:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6655,"src":"203:2575:23","usedErrors":[],"usedEvents":[6588,6597]}],"src":"106:2673:23"},"id":23},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[6654],"IERC20Metadata":[6680]},"id":6681,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6656,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"125:24:24"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":6658,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6681,"sourceUnit":6655,"src":"151:37:24","symbolAliases":[{"foreign":{"id":6657,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6654,"src":"159:6:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6660,"name":"IERC20","nameLocations":["305:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"305:6:24"},"id":6661,"nodeType":"InheritanceSpecifier","src":"305:6:24"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":6659,"nodeType":"StructuredDocumentation","src":"190:86:24","text":" @dev Interface for the optional metadata functions from the ERC20 standard."},"fullyImplemented":false,"id":6680,"linearizedBaseContracts":[6680,6654],"name":"IERC20Metadata","nameLocation":"287:14:24","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":6662,"nodeType":"StructuredDocumentation","src":"318:54:24","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":6667,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:24","nodeType":"FunctionDefinition","parameters":{"id":6663,"nodeType":"ParameterList","parameters":[],"src":"390:2:24"},"returnParameters":{"id":6666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6667,"src":"416:13:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6664,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:24"},"scope":6680,"src":"377:54:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6668,"nodeType":"StructuredDocumentation","src":"437:56:24","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":6673,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:24","nodeType":"FunctionDefinition","parameters":{"id":6669,"nodeType":"ParameterList","parameters":[],"src":"513:2:24"},"returnParameters":{"id":6672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6671,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6673,"src":"539:13:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6670,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:24"},"scope":6680,"src":"498:56:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6674,"nodeType":"StructuredDocumentation","src":"560:65:24","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":6679,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:24","nodeType":"FunctionDefinition","parameters":{"id":6675,"nodeType":"ParameterList","parameters":[],"src":"647:2:24"},"returnParameters":{"id":6678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6677,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6679,"src":"673:5:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6676,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:24"},"scope":6680,"src":"630:50:24","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6681,"src":"277:405:24","usedErrors":[],"usedEvents":[6588,6597]}],"src":"125:558:24"},"id":24},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[6716]},"id":6717,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6682,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"123:24:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":6683,"nodeType":"StructuredDocumentation","src":"149:1963:25","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."},"fullyImplemented":false,"id":6716,"linearizedBaseContracts":[6716],"name":"IERC20Permit","nameLocation":"2123:12:25","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":6684,"nodeType":"StructuredDocumentation","src":"2142:850:25","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."},"functionSelector":"d505accf","id":6701,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"3006:6:25","nodeType":"FunctionDefinition","parameters":{"id":6699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6686,"mutability":"mutable","name":"owner","nameLocation":"3030:5:25","nodeType":"VariableDeclaration","scope":6701,"src":"3022:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6685,"name":"address","nodeType":"ElementaryTypeName","src":"3022:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6688,"mutability":"mutable","name":"spender","nameLocation":"3053:7:25","nodeType":"VariableDeclaration","scope":6701,"src":"3045:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6687,"name":"address","nodeType":"ElementaryTypeName","src":"3045:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6690,"mutability":"mutable","name":"value","nameLocation":"3078:5:25","nodeType":"VariableDeclaration","scope":6701,"src":"3070:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6689,"name":"uint256","nodeType":"ElementaryTypeName","src":"3070:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6692,"mutability":"mutable","name":"deadline","nameLocation":"3101:8:25","nodeType":"VariableDeclaration","scope":6701,"src":"3093:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6691,"name":"uint256","nodeType":"ElementaryTypeName","src":"3093:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6694,"mutability":"mutable","name":"v","nameLocation":"3125:1:25","nodeType":"VariableDeclaration","scope":6701,"src":"3119:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6693,"name":"uint8","nodeType":"ElementaryTypeName","src":"3119:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":6696,"mutability":"mutable","name":"r","nameLocation":"3144:1:25","nodeType":"VariableDeclaration","scope":6701,"src":"3136:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6695,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3136:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6698,"mutability":"mutable","name":"s","nameLocation":"3163:1:25","nodeType":"VariableDeclaration","scope":6701,"src":"3155:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6697,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3155:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3012:158:25"},"returnParameters":{"id":6700,"nodeType":"ParameterList","parameters":[],"src":"3179:0:25"},"scope":6716,"src":"2997:183:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":6702,"nodeType":"StructuredDocumentation","src":"3186:294:25","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":6709,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3494:6:25","nodeType":"FunctionDefinition","parameters":{"id":6705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6704,"mutability":"mutable","name":"owner","nameLocation":"3509:5:25","nodeType":"VariableDeclaration","scope":6709,"src":"3501:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6703,"name":"address","nodeType":"ElementaryTypeName","src":"3501:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3500:15:25"},"returnParameters":{"id":6708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6709,"src":"3539:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6706,"name":"uint256","nodeType":"ElementaryTypeName","src":"3539:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3538:9:25"},"scope":6716,"src":"3485:63:25","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":6710,"nodeType":"StructuredDocumentation","src":"3554:128:25","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":6715,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3749:16:25","nodeType":"FunctionDefinition","parameters":{"id":6711,"nodeType":"ParameterList","parameters":[],"src":"3765:2:25"},"returnParameters":{"id":6714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6715,"src":"3791:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6712,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3791:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3790:9:25"},"scope":6716,"src":"3740:60:25","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6717,"src":"2113:1689:25","usedErrors":[],"usedEvents":[]}],"src":"123:3680:25"},"id":25},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[7259],"IERC20":[6654],"IERC20Permit":[6716],"SafeERC20":[7006]},"id":7007,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6718,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:26"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":6720,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7007,"sourceUnit":6655,"src":"141:37:26","symbolAliases":[{"foreign":{"id":6719,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6654,"src":"149:6:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":6722,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7007,"sourceUnit":6717,"src":"179:60:26","symbolAliases":[{"foreign":{"id":6721,"name":"IERC20Permit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6716,"src":"187:12:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":6724,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7007,"sourceUnit":7260,"src":"240:51:26","symbolAliases":[{"foreign":{"id":6723,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7259,"src":"248:7:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":6725,"nodeType":"StructuredDocumentation","src":"293:457:26","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":7006,"linearizedBaseContracts":[7006],"name":"SafeERC20","nameLocation":"759:9:26","nodeType":"ContractDefinition","nodes":[{"global":false,"id":6728,"libraryName":{"id":6726,"name":"Address","nameLocations":["781:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":7259,"src":"781:7:26"},"nodeType":"UsingForDirective","src":"775:26:26","typeName":{"id":6727,"name":"address","nodeType":"ElementaryTypeName","src":"793:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"documentation":{"id":6729,"nodeType":"StructuredDocumentation","src":"807:64:26","text":" @dev An operation with an ERC20 token failed."},"errorSelector":"5274afe7","id":6733,"name":"SafeERC20FailedOperation","nameLocation":"882:24:26","nodeType":"ErrorDefinition","parameters":{"id":6732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6731,"mutability":"mutable","name":"token","nameLocation":"915:5:26","nodeType":"VariableDeclaration","scope":6733,"src":"907:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6730,"name":"address","nodeType":"ElementaryTypeName","src":"907:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"906:15:26"},"src":"876:46:26"},{"documentation":{"id":6734,"nodeType":"StructuredDocumentation","src":"928:71:26","text":" @dev Indicates a failed `decreaseAllowance` request."},"errorSelector":"e570110f","id":6742,"name":"SafeERC20FailedDecreaseAllowance","nameLocation":"1010:32:26","nodeType":"ErrorDefinition","parameters":{"id":6741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6736,"mutability":"mutable","name":"spender","nameLocation":"1051:7:26","nodeType":"VariableDeclaration","scope":6742,"src":"1043:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6735,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6738,"mutability":"mutable","name":"currentAllowance","nameLocation":"1068:16:26","nodeType":"VariableDeclaration","scope":6742,"src":"1060:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6737,"name":"uint256","nodeType":"ElementaryTypeName","src":"1060:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6740,"mutability":"mutable","name":"requestedDecrease","nameLocation":"1094:17:26","nodeType":"VariableDeclaration","scope":6742,"src":"1086:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6739,"name":"uint256","nodeType":"ElementaryTypeName","src":"1086:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1042:70:26"},"src":"1004:109:26"},{"body":{"id":6765,"nodeType":"Block","src":"1375:88:26","statements":[{"expression":{"arguments":[{"id":6754,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6746,"src":"1405:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":6757,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6746,"src":"1427:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":6758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1433:8:26","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":6621,"src":"1427:14:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":6759,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6748,"src":"1444:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6760,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6750,"src":"1448:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6761,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1443:11:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":6755,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1412:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1416:10:26","memberName":"encodeCall","nodeType":"MemberAccess","src":"1412:14:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1412:43:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6753,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6956,"src":"1385:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6654_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":6763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:71:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6764,"nodeType":"ExpressionStatement","src":"1385:71:26"}]},"documentation":{"id":6743,"nodeType":"StructuredDocumentation","src":"1119:179:26","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":6766,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1312:12:26","nodeType":"FunctionDefinition","parameters":{"id":6751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6746,"mutability":"mutable","name":"token","nameLocation":"1332:5:26","nodeType":"VariableDeclaration","scope":6766,"src":"1325:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":6745,"nodeType":"UserDefinedTypeName","pathNode":{"id":6744,"name":"IERC20","nameLocations":["1325:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"1325:6:26"},"referencedDeclaration":6654,"src":"1325:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6748,"mutability":"mutable","name":"to","nameLocation":"1347:2:26","nodeType":"VariableDeclaration","scope":6766,"src":"1339:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6747,"name":"address","nodeType":"ElementaryTypeName","src":"1339:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6750,"mutability":"mutable","name":"value","nameLocation":"1359:5:26","nodeType":"VariableDeclaration","scope":6766,"src":"1351:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6749,"name":"uint256","nodeType":"ElementaryTypeName","src":"1351:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1324:41:26"},"returnParameters":{"id":6752,"nodeType":"ParameterList","parameters":[],"src":"1375:0:26"},"scope":7006,"src":"1303:160:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6792,"nodeType":"Block","src":"1792:98:26","statements":[{"expression":{"arguments":[{"id":6780,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6770,"src":"1822:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":6783,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6770,"src":"1844:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":6784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1850:12:26","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":6653,"src":"1844:18:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},{"components":[{"id":6785,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6772,"src":"1865:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6786,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6774,"src":"1871:2:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6776,"src":"1875:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6788,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1864:17:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}],"expression":{"id":6781,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1829:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1833:10:26","memberName":"encodeCall","nodeType":"MemberAccess","src":"1829:14:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1829:53:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6779,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6956,"src":"1802:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6654_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":6790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1802:81:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6791,"nodeType":"ExpressionStatement","src":"1802:81:26"}]},"documentation":{"id":6767,"nodeType":"StructuredDocumentation","src":"1469:228:26","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":6793,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1711:16:26","nodeType":"FunctionDefinition","parameters":{"id":6777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6770,"mutability":"mutable","name":"token","nameLocation":"1735:5:26","nodeType":"VariableDeclaration","scope":6793,"src":"1728:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":6769,"nodeType":"UserDefinedTypeName","pathNode":{"id":6768,"name":"IERC20","nameLocations":["1728:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"1728:6:26"},"referencedDeclaration":6654,"src":"1728:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6772,"mutability":"mutable","name":"from","nameLocation":"1750:4:26","nodeType":"VariableDeclaration","scope":6793,"src":"1742:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6771,"name":"address","nodeType":"ElementaryTypeName","src":"1742:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6774,"mutability":"mutable","name":"to","nameLocation":"1764:2:26","nodeType":"VariableDeclaration","scope":6793,"src":"1756:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6773,"name":"address","nodeType":"ElementaryTypeName","src":"1756:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6776,"mutability":"mutable","name":"value","nameLocation":"1776:5:26","nodeType":"VariableDeclaration","scope":6793,"src":"1768:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6775,"name":"uint256","nodeType":"ElementaryTypeName","src":"1768:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1727:55:26"},"returnParameters":{"id":6778,"nodeType":"ParameterList","parameters":[],"src":"1792:0:26"},"scope":7006,"src":"1702:188:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6823,"nodeType":"Block","src":"2167:139:26","statements":[{"assignments":[6805],"declarations":[{"constant":false,"id":6805,"mutability":"mutable","name":"oldAllowance","nameLocation":"2185:12:26","nodeType":"VariableDeclaration","scope":6823,"src":"2177:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6804,"name":"uint256","nodeType":"ElementaryTypeName","src":"2177:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6814,"initialValue":{"arguments":[{"arguments":[{"id":6810,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2224:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$7006","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$7006","typeString":"library SafeERC20"}],"id":6809,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2216:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6808,"name":"address","nodeType":"ElementaryTypeName","src":"2216:7:26","typeDescriptions":{}}},"id":6811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2216:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6812,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6799,"src":"2231:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6806,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6797,"src":"2200:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":6807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2206:9:26","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":6631,"src":"2200:15:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":6813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2200:39:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2177:62:26"},{"expression":{"arguments":[{"id":6816,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6797,"src":"2262:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},{"id":6817,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6799,"src":"2269:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6818,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6805,"src":"2278:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6819,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6801,"src":"2293:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2278:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6815,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6914,"src":"2249:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6654_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":6821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2249:50:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6822,"nodeType":"ExpressionStatement","src":"2249:50:26"}]},"documentation":{"id":6794,"nodeType":"StructuredDocumentation","src":"1896:180:26","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":6824,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2090:21:26","nodeType":"FunctionDefinition","parameters":{"id":6802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6797,"mutability":"mutable","name":"token","nameLocation":"2119:5:26","nodeType":"VariableDeclaration","scope":6824,"src":"2112:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":6796,"nodeType":"UserDefinedTypeName","pathNode":{"id":6795,"name":"IERC20","nameLocations":["2112:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"2112:6:26"},"referencedDeclaration":6654,"src":"2112:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6799,"mutability":"mutable","name":"spender","nameLocation":"2134:7:26","nodeType":"VariableDeclaration","scope":6824,"src":"2126:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6798,"name":"address","nodeType":"ElementaryTypeName","src":"2126:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6801,"mutability":"mutable","name":"value","nameLocation":"2151:5:26","nodeType":"VariableDeclaration","scope":6824,"src":"2143:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6800,"name":"uint256","nodeType":"ElementaryTypeName","src":"2143:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2111:46:26"},"returnParameters":{"id":6803,"nodeType":"ParameterList","parameters":[],"src":"2167:0:26"},"scope":7006,"src":"2081:225:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6866,"nodeType":"Block","src":"2607:370:26","statements":[{"id":6865,"nodeType":"UncheckedBlock","src":"2617:354:26","statements":[{"assignments":[6836],"declarations":[{"constant":false,"id":6836,"mutability":"mutable","name":"currentAllowance","nameLocation":"2649:16:26","nodeType":"VariableDeclaration","scope":6865,"src":"2641:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6835,"name":"uint256","nodeType":"ElementaryTypeName","src":"2641:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6845,"initialValue":{"arguments":[{"arguments":[{"id":6841,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2692:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$7006","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$7006","typeString":"library SafeERC20"}],"id":6840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2684:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6839,"name":"address","nodeType":"ElementaryTypeName","src":"2684:7:26","typeDescriptions":{}}},"id":6842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2684:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6843,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6830,"src":"2699:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6837,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6828,"src":"2668:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":6838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2674:9:26","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":6631,"src":"2668:15:26","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":6844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:39:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2641:66:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6846,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6836,"src":"2725:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6847,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6832,"src":"2744:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2725:36:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6856,"nodeType":"IfStatement","src":"2721:160:26","trueBody":{"id":6855,"nodeType":"Block","src":"2763:118:26","statements":[{"errorCall":{"arguments":[{"id":6850,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6830,"src":"2821:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6851,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6836,"src":"2830:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6852,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6832,"src":"2848:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6849,"name":"SafeERC20FailedDecreaseAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6742,"src":"2788:32:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256,uint256) pure returns (error)"}},"id":6853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2788:78:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6854,"nodeType":"RevertStatement","src":"2781:85:26"}]}},{"expression":{"arguments":[{"id":6858,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6828,"src":"2907:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},{"id":6859,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6830,"src":"2914:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6860,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6836,"src":"2923:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":6861,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6832,"src":"2942:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2923:36:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6857,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6914,"src":"2894:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6654_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":6863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2894:66:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6864,"nodeType":"ExpressionStatement","src":"2894:66:26"}]}]},"documentation":{"id":6825,"nodeType":"StructuredDocumentation","src":"2312:192:26","text":" @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful."},"id":6867,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2518:21:26","nodeType":"FunctionDefinition","parameters":{"id":6833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6828,"mutability":"mutable","name":"token","nameLocation":"2547:5:26","nodeType":"VariableDeclaration","scope":6867,"src":"2540:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":6827,"nodeType":"UserDefinedTypeName","pathNode":{"id":6826,"name":"IERC20","nameLocations":["2540:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"2540:6:26"},"referencedDeclaration":6654,"src":"2540:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6830,"mutability":"mutable","name":"spender","nameLocation":"2562:7:26","nodeType":"VariableDeclaration","scope":6867,"src":"2554:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6829,"name":"address","nodeType":"ElementaryTypeName","src":"2554:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6832,"mutability":"mutable","name":"requestedDecrease","nameLocation":"2579:17:26","nodeType":"VariableDeclaration","scope":6867,"src":"2571:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6831,"name":"uint256","nodeType":"ElementaryTypeName","src":"2571:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2539:58:26"},"returnParameters":{"id":6834,"nodeType":"ParameterList","parameters":[],"src":"2607:0:26"},"scope":7006,"src":"2509:468:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6913,"nodeType":"Block","src":"3373:303:26","statements":[{"assignments":[6879],"declarations":[{"constant":false,"id":6879,"mutability":"mutable","name":"approvalCall","nameLocation":"3396:12:26","nodeType":"VariableDeclaration","scope":6913,"src":"3383:25:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6878,"name":"bytes","nodeType":"ElementaryTypeName","src":"3383:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6888,"initialValue":{"arguments":[{"expression":{"id":6882,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6871,"src":"3426:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":6883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3432:7:26","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":6641,"src":"3426:13:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":6884,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6873,"src":"3442:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6885,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6875,"src":"3451:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6886,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3441:16:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":6880,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3411:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6881,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3415:10:26","memberName":"encodeCall","nodeType":"MemberAccess","src":"3411:14:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3411:47:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3383:75:26"},{"condition":{"id":6893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3473:45:26","subExpression":{"arguments":[{"id":6890,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6871,"src":"3498:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},{"id":6891,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6879,"src":"3505:12:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6889,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7005,"src":"3474:23:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6654_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":6892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3474:44:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6912,"nodeType":"IfStatement","src":"3469:201:26","trueBody":{"id":6911,"nodeType":"Block","src":"3520:150:26","statements":[{"expression":{"arguments":[{"id":6895,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6871,"src":"3554:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":6898,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6871,"src":"3576:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"id":6899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3582:7:26","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":6641,"src":"3576:13:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":6900,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6873,"src":"3592:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":6901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3601:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":6902,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3591:12:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}],"expression":{"id":6896,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3561:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3565:10:26","memberName":"encodeCall","nodeType":"MemberAccess","src":"3561:14:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3561:43:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6894,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6956,"src":"3534:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6654_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":6904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3534:71:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6905,"nodeType":"ExpressionStatement","src":"3534:71:26"},{"expression":{"arguments":[{"id":6907,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6871,"src":"3639:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},{"id":6908,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6879,"src":"3646:12:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6906,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6956,"src":"3619:19:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$6654_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":6909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3619:40:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6910,"nodeType":"ExpressionStatement","src":"3619:40:26"}]}}]},"documentation":{"id":6868,"nodeType":"StructuredDocumentation","src":"2983:308:26","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":6914,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3305:12:26","nodeType":"FunctionDefinition","parameters":{"id":6876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6871,"mutability":"mutable","name":"token","nameLocation":"3325:5:26","nodeType":"VariableDeclaration","scope":6914,"src":"3318:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":6870,"nodeType":"UserDefinedTypeName","pathNode":{"id":6869,"name":"IERC20","nameLocations":["3318:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"3318:6:26"},"referencedDeclaration":6654,"src":"3318:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6873,"mutability":"mutable","name":"spender","nameLocation":"3340:7:26","nodeType":"VariableDeclaration","scope":6914,"src":"3332:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6872,"name":"address","nodeType":"ElementaryTypeName","src":"3332:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6875,"mutability":"mutable","name":"value","nameLocation":"3357:5:26","nodeType":"VariableDeclaration","scope":6914,"src":"3349:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6874,"name":"uint256","nodeType":"ElementaryTypeName","src":"3349:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3317:46:26"},"returnParameters":{"id":6877,"nodeType":"ParameterList","parameters":[],"src":"3373:0:26"},"scope":7006,"src":"3296:380:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6955,"nodeType":"Block","src":"4129:559:26","statements":[{"assignments":[6924],"declarations":[{"constant":false,"id":6924,"mutability":"mutable","name":"returndata","nameLocation":"4491:10:26","nodeType":"VariableDeclaration","scope":6955,"src":"4478:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6923,"name":"bytes","nodeType":"ElementaryTypeName","src":"4478:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6932,"initialValue":{"arguments":[{"id":6930,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6920,"src":"4532:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":6927,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6918,"src":"4512:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}],"id":6926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4504:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6925,"name":"address","nodeType":"ElementaryTypeName","src":"4504:7:26","typeDescriptions":{}}},"id":6928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4504:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4519:12:26","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":7080,"src":"4504:27:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":6931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4504:33:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4478:59:26"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6933,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6924,"src":"4551:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4562:6:26","memberName":"length","nodeType":"MemberAccess","src":"4551:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":6935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4572:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4551:22:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":6944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4577:31:26","subExpression":{"arguments":[{"id":6939,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6924,"src":"4589:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":6941,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4602:4:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":6940,"name":"bool","nodeType":"ElementaryTypeName","src":"4602:4:26","typeDescriptions":{}}}],"id":6942,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4601:6:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":6937,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4578:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4582:6:26","memberName":"decode","nodeType":"MemberAccess","src":"4578:10:26","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4578:30:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4551:57:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6954,"nodeType":"IfStatement","src":"4547:135:26","trueBody":{"id":6953,"nodeType":"Block","src":"4610:72:26","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":6949,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6918,"src":"4664:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}],"id":6948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4656:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6947,"name":"address","nodeType":"ElementaryTypeName","src":"4656:7:26","typeDescriptions":{}}},"id":6950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4656:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6946,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6733,"src":"4631:24:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":6951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4631:40:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":6952,"nodeType":"RevertStatement","src":"4624:47:26"}]}}]},"documentation":{"id":6915,"nodeType":"StructuredDocumentation","src":"3682:372:26","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":6956,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"4068:19:26","nodeType":"FunctionDefinition","parameters":{"id":6921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6918,"mutability":"mutable","name":"token","nameLocation":"4095:5:26","nodeType":"VariableDeclaration","scope":6956,"src":"4088:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":6917,"nodeType":"UserDefinedTypeName","pathNode":{"id":6916,"name":"IERC20","nameLocations":["4088:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"4088:6:26"},"referencedDeclaration":6654,"src":"4088:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6920,"mutability":"mutable","name":"data","nameLocation":"4115:4:26","nodeType":"VariableDeclaration","scope":6956,"src":"4102:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6919,"name":"bytes","nodeType":"ElementaryTypeName","src":"4102:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4087:33:26"},"returnParameters":{"id":6922,"nodeType":"ParameterList","parameters":[],"src":"4129:0:26"},"scope":7006,"src":"4059:629:26","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":7004,"nodeType":"Block","src":"5278:489:26","statements":[{"assignments":[6968,6970],"declarations":[{"constant":false,"id":6968,"mutability":"mutable","name":"success","nameLocation":"5579:7:26","nodeType":"VariableDeclaration","scope":7004,"src":"5574:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6967,"name":"bool","nodeType":"ElementaryTypeName","src":"5574:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6970,"mutability":"mutable","name":"returndata","nameLocation":"5601:10:26","nodeType":"VariableDeclaration","scope":7004,"src":"5588:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6969,"name":"bytes","nodeType":"ElementaryTypeName","src":"5588:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6978,"initialValue":{"arguments":[{"id":6976,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6962,"src":"5635:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":6973,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6960,"src":"5623:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}],"id":6972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5615:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6971,"name":"address","nodeType":"ElementaryTypeName","src":"5615:7:26","typeDescriptions":{}}},"id":6974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5615:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5630:4:26","memberName":"call","nodeType":"MemberAccess","src":"5615:19:26","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5615:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5573:67:26"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6979,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6968,"src":"5657:7:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6980,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6970,"src":"5669:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5680:6:26","memberName":"length","nodeType":"MemberAccess","src":"5669:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5690:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5669:22:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":6986,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6970,"src":"5706:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":6988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5719:4:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":6987,"name":"bool","nodeType":"ElementaryTypeName","src":"5719:4:26","typeDescriptions":{}}}],"id":6989,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5718:6:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":6984,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5695:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5699:6:26","memberName":"decode","nodeType":"MemberAccess","src":"5695:10:26","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":6990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5695:30:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5669:56:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":6992,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5668:58:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5657:69:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":6996,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6960,"src":"5738:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}],"id":6995,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5730:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6994,"name":"address","nodeType":"ElementaryTypeName","src":"5730:7:26","typeDescriptions":{}}},"id":6997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5730:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5745:4:26","memberName":"code","nodeType":"MemberAccess","src":"5730:19:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5750:6:26","memberName":"length","nodeType":"MemberAccess","src":"5730:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5759:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5730:30:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5657:103:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6966,"id":7003,"nodeType":"Return","src":"5650:110:26"}]},"documentation":{"id":6957,"nodeType":"StructuredDocumentation","src":"4694:490:26","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":7005,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"5198:23:26","nodeType":"FunctionDefinition","parameters":{"id":6963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6960,"mutability":"mutable","name":"token","nameLocation":"5229:5:26","nodeType":"VariableDeclaration","scope":7005,"src":"5222:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"},"typeName":{"id":6959,"nodeType":"UserDefinedTypeName","pathNode":{"id":6958,"name":"IERC20","nameLocations":["5222:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":6654,"src":"5222:6:26"},"referencedDeclaration":6654,"src":"5222:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6654","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6962,"mutability":"mutable","name":"data","nameLocation":"5249:4:26","nodeType":"VariableDeclaration","scope":7005,"src":"5236:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6961,"name":"bytes","nodeType":"ElementaryTypeName","src":"5236:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5221:33:26"},"returnParameters":{"id":6966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7005,"src":"5272:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6964,"name":"bool","nodeType":"ElementaryTypeName","src":"5272:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5271:6:26"},"scope":7006,"src":"5189:578:26","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":7007,"src":"751:5018:26","usedErrors":[6733,6742],"usedEvents":[]}],"src":"115:5655:26"},"id":26},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[7259]},"id":7260,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7008,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:27"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":7009,"nodeType":"StructuredDocumentation","src":"127:67:27","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":7259,"linearizedBaseContracts":[7259],"name":"Address","nameLocation":"203:7:27","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":7010,"nodeType":"StructuredDocumentation","src":"217:94:27","text":" @dev The ETH balance of the account is not enough to perform the operation."},"errorSelector":"cd786059","id":7014,"name":"AddressInsufficientBalance","nameLocation":"322:26:27","nodeType":"ErrorDefinition","parameters":{"id":7013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7012,"mutability":"mutable","name":"account","nameLocation":"357:7:27","nodeType":"VariableDeclaration","scope":7014,"src":"349:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7011,"name":"address","nodeType":"ElementaryTypeName","src":"349:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"348:17:27"},"src":"316:50:27"},{"documentation":{"id":7015,"nodeType":"StructuredDocumentation","src":"372:75:27","text":" @dev There's no code at `target` (it is not a contract)."},"errorSelector":"9996b315","id":7019,"name":"AddressEmptyCode","nameLocation":"458:16:27","nodeType":"ErrorDefinition","parameters":{"id":7018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7017,"mutability":"mutable","name":"target","nameLocation":"483:6:27","nodeType":"VariableDeclaration","scope":7019,"src":"475:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7016,"name":"address","nodeType":"ElementaryTypeName","src":"475:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"474:16:27"},"src":"452:39:27"},{"documentation":{"id":7020,"nodeType":"StructuredDocumentation","src":"497:89:27","text":" @dev A call to an address target failed. The target may have reverted."},"errorSelector":"1425ea42","id":7022,"name":"FailedInnerCall","nameLocation":"597:15:27","nodeType":"ErrorDefinition","parameters":{"id":7021,"nodeType":"ParameterList","parameters":[],"src":"612:2:27"},"src":"591:24:27"},{"body":{"id":7062,"nodeType":"Block","src":"1602:260:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":7032,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1624:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$7259","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$7259","typeString":"library Address"}],"id":7031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1616:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7030,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:27","typeDescriptions":{}}},"id":7033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1616:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1630:7:27","memberName":"balance","nodeType":"MemberAccess","src":"1616:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":7035,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7027,"src":"1640:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1616:30:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7045,"nodeType":"IfStatement","src":"1612:109:27","trueBody":{"id":7044,"nodeType":"Block","src":"1648:73:27","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":7040,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1704:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$7259","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$7259","typeString":"library Address"}],"id":7039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1696:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7038,"name":"address","nodeType":"ElementaryTypeName","src":"1696:7:27","typeDescriptions":{}}},"id":7041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1696:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7037,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7014,"src":"1669:26:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":7042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1669:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7043,"nodeType":"RevertStatement","src":"1662:48:27"}]}},{"assignments":[7047,null],"declarations":[{"constant":false,"id":7047,"mutability":"mutable","name":"success","nameLocation":"1737:7:27","nodeType":"VariableDeclaration","scope":7062,"src":"1732:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7046,"name":"bool","nodeType":"ElementaryTypeName","src":"1732:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":7054,"initialValue":{"arguments":[{"hexValue":"","id":7052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1780:2:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":7048,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7025,"src":"1750:9:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":7049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1760:4:27","memberName":"call","nodeType":"MemberAccess","src":"1750:14:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":7051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":7050,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7027,"src":"1772:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1750:29:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":7053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1750:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1731:52:27"},{"condition":{"id":7056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1797:8:27","subExpression":{"id":7055,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7047,"src":"1798:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7061,"nodeType":"IfStatement","src":"1793:63:27","trueBody":{"id":7060,"nodeType":"Block","src":"1807:49:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":7057,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7022,"src":"1828:15:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":7058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:17:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7059,"nodeType":"RevertStatement","src":"1821:24:27"}]}}]},"documentation":{"id":7023,"nodeType":"StructuredDocumentation","src":"621:905:27","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":7063,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"1540:9:27","nodeType":"FunctionDefinition","parameters":{"id":7028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7025,"mutability":"mutable","name":"recipient","nameLocation":"1566:9:27","nodeType":"VariableDeclaration","scope":7063,"src":"1550:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":7024,"name":"address","nodeType":"ElementaryTypeName","src":"1550:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":7027,"mutability":"mutable","name":"amount","nameLocation":"1585:6:27","nodeType":"VariableDeclaration","scope":7063,"src":"1577:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7026,"name":"uint256","nodeType":"ElementaryTypeName","src":"1577:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1549:43:27"},"returnParameters":{"id":7029,"nodeType":"ParameterList","parameters":[],"src":"1602:0:27"},"scope":7259,"src":"1531:331:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7079,"nodeType":"Block","src":"2794:62:27","statements":[{"expression":{"arguments":[{"id":7074,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7066,"src":"2833:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7075,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7068,"src":"2841:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":7076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2847:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":7073,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7126,"src":"2811:21:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":7077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2811:38:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":7072,"id":7078,"nodeType":"Return","src":"2804:45:27"}]},"documentation":{"id":7064,"nodeType":"StructuredDocumentation","src":"1868:832:27","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."},"id":7080,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"2714:12:27","nodeType":"FunctionDefinition","parameters":{"id":7069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7066,"mutability":"mutable","name":"target","nameLocation":"2735:6:27","nodeType":"VariableDeclaration","scope":7080,"src":"2727:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7065,"name":"address","nodeType":"ElementaryTypeName","src":"2727:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7068,"mutability":"mutable","name":"data","nameLocation":"2756:4:27","nodeType":"VariableDeclaration","scope":7080,"src":"2743:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7067,"name":"bytes","nodeType":"ElementaryTypeName","src":"2743:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2726:35:27"},"returnParameters":{"id":7072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7071,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7080,"src":"2780:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7070,"name":"bytes","nodeType":"ElementaryTypeName","src":"2780:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2779:14:27"},"scope":7259,"src":"2705:151:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7125,"nodeType":"Block","src":"3293:279:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":7094,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3315:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$7259","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$7259","typeString":"library Address"}],"id":7093,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3307:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7092,"name":"address","nodeType":"ElementaryTypeName","src":"3307:7:27","typeDescriptions":{}}},"id":7095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3321:7:27","memberName":"balance","nodeType":"MemberAccess","src":"3307:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":7097,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7087,"src":"3331:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3307:29:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7107,"nodeType":"IfStatement","src":"3303:108:27","trueBody":{"id":7106,"nodeType":"Block","src":"3338:73:27","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":7102,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3394:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$7259","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$7259","typeString":"library Address"}],"id":7101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3386:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7100,"name":"address","nodeType":"ElementaryTypeName","src":"3386:7:27","typeDescriptions":{}}},"id":7103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3386:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7099,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7014,"src":"3359:26:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":7104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7105,"nodeType":"RevertStatement","src":"3352:48:27"}]}},{"assignments":[7109,7111],"declarations":[{"constant":false,"id":7109,"mutability":"mutable","name":"success","nameLocation":"3426:7:27","nodeType":"VariableDeclaration","scope":7125,"src":"3421:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7108,"name":"bool","nodeType":"ElementaryTypeName","src":"3421:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":7111,"mutability":"mutable","name":"returndata","nameLocation":"3448:10:27","nodeType":"VariableDeclaration","scope":7125,"src":"3435:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7110,"name":"bytes","nodeType":"ElementaryTypeName","src":"3435:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":7118,"initialValue":{"arguments":[{"id":7116,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7085,"src":"3488:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7112,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7083,"src":"3462:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3469:4:27","memberName":"call","nodeType":"MemberAccess","src":"3462:11:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":7115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":7114,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7087,"src":"3481:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3462:25:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":7117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3462:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3420:73:27"},{"expression":{"arguments":[{"id":7120,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7083,"src":"3537:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7121,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7109,"src":"3545:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":7122,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7111,"src":"3554:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7119,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7218,"src":"3510:26:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":7123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3510:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":7091,"id":7124,"nodeType":"Return","src":"3503:62:27"}]},"documentation":{"id":7081,"nodeType":"StructuredDocumentation","src":"2862:313:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."},"id":7126,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"3189:21:27","nodeType":"FunctionDefinition","parameters":{"id":7088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7083,"mutability":"mutable","name":"target","nameLocation":"3219:6:27","nodeType":"VariableDeclaration","scope":7126,"src":"3211:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7082,"name":"address","nodeType":"ElementaryTypeName","src":"3211:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7085,"mutability":"mutable","name":"data","nameLocation":"3240:4:27","nodeType":"VariableDeclaration","scope":7126,"src":"3227:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7084,"name":"bytes","nodeType":"ElementaryTypeName","src":"3227:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":7087,"mutability":"mutable","name":"value","nameLocation":"3254:5:27","nodeType":"VariableDeclaration","scope":7126,"src":"3246:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7086,"name":"uint256","nodeType":"ElementaryTypeName","src":"3246:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3210:50:27"},"returnParameters":{"id":7091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7090,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7126,"src":"3279:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7089,"name":"bytes","nodeType":"ElementaryTypeName","src":"3279:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3278:14:27"},"scope":7259,"src":"3180:392:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7151,"nodeType":"Block","src":"3811:154:27","statements":[{"assignments":[7137,7139],"declarations":[{"constant":false,"id":7137,"mutability":"mutable","name":"success","nameLocation":"3827:7:27","nodeType":"VariableDeclaration","scope":7151,"src":"3822:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7136,"name":"bool","nodeType":"ElementaryTypeName","src":"3822:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":7139,"mutability":"mutable","name":"returndata","nameLocation":"3849:10:27","nodeType":"VariableDeclaration","scope":7151,"src":"3836:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7138,"name":"bytes","nodeType":"ElementaryTypeName","src":"3836:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":7144,"initialValue":{"arguments":[{"id":7142,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7131,"src":"3881:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7140,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7129,"src":"3863:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3870:10:27","memberName":"staticcall","nodeType":"MemberAccess","src":"3863:17:27","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":7143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3863:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3821:65:27"},{"expression":{"arguments":[{"id":7146,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7129,"src":"3930:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7147,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7137,"src":"3938:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":7148,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7139,"src":"3947:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7145,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7218,"src":"3903:26:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":7149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3903:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":7135,"id":7150,"nodeType":"Return","src":"3896:62:27"}]},"documentation":{"id":7127,"nodeType":"StructuredDocumentation","src":"3578:128:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."},"id":7152,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"3720:18:27","nodeType":"FunctionDefinition","parameters":{"id":7132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7129,"mutability":"mutable","name":"target","nameLocation":"3747:6:27","nodeType":"VariableDeclaration","scope":7152,"src":"3739:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7128,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7131,"mutability":"mutable","name":"data","nameLocation":"3768:4:27","nodeType":"VariableDeclaration","scope":7152,"src":"3755:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7130,"name":"bytes","nodeType":"ElementaryTypeName","src":"3755:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3738:35:27"},"returnParameters":{"id":7135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7152,"src":"3797:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7133,"name":"bytes","nodeType":"ElementaryTypeName","src":"3797:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3796:14:27"},"scope":7259,"src":"3711:254:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7177,"nodeType":"Block","src":"4203:156:27","statements":[{"assignments":[7163,7165],"declarations":[{"constant":false,"id":7163,"mutability":"mutable","name":"success","nameLocation":"4219:7:27","nodeType":"VariableDeclaration","scope":7177,"src":"4214:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7162,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":7165,"mutability":"mutable","name":"returndata","nameLocation":"4241:10:27","nodeType":"VariableDeclaration","scope":7177,"src":"4228:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7164,"name":"bytes","nodeType":"ElementaryTypeName","src":"4228:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":7170,"initialValue":{"arguments":[{"id":7168,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7157,"src":"4275:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7166,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7155,"src":"4255:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4262:12:27","memberName":"delegatecall","nodeType":"MemberAccess","src":"4255:19:27","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":7169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4255:25:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4213:67:27"},{"expression":{"arguments":[{"id":7172,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7155,"src":"4324:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7173,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7163,"src":"4332:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":7174,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7165,"src":"4341:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7171,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7218,"src":"4297:26:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":7175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":7161,"id":7176,"nodeType":"Return","src":"4290:62:27"}]},"documentation":{"id":7153,"nodeType":"StructuredDocumentation","src":"3971:130:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."},"id":7178,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"4115:20:27","nodeType":"FunctionDefinition","parameters":{"id":7158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7155,"mutability":"mutable","name":"target","nameLocation":"4144:6:27","nodeType":"VariableDeclaration","scope":7178,"src":"4136:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7154,"name":"address","nodeType":"ElementaryTypeName","src":"4136:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7157,"mutability":"mutable","name":"data","nameLocation":"4165:4:27","nodeType":"VariableDeclaration","scope":7178,"src":"4152:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7156,"name":"bytes","nodeType":"ElementaryTypeName","src":"4152:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4135:35:27"},"returnParameters":{"id":7161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7178,"src":"4189:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7159,"name":"bytes","nodeType":"ElementaryTypeName","src":"4189:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4188:14:27"},"scope":7259,"src":"4106:253:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7217,"nodeType":"Block","src":"4783:424:27","statements":[{"condition":{"id":7191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4797:8:27","subExpression":{"id":7190,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7183,"src":"4798:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7215,"nodeType":"Block","src":"4857:344:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7197,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7185,"src":"5045:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":7198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5056:6:27","memberName":"length","nodeType":"MemberAccess","src":"5045:17:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5066:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5045:22:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":7201,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7181,"src":"5071:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5078:4:27","memberName":"code","nodeType":"MemberAccess","src":"5071:11:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":7203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5083:6:27","memberName":"length","nodeType":"MemberAccess","src":"5071:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5093:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5071:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5045:49:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7212,"nodeType":"IfStatement","src":"5041:119:27","trueBody":{"id":7211,"nodeType":"Block","src":"5096:64:27","statements":[{"errorCall":{"arguments":[{"id":7208,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7181,"src":"5138:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7207,"name":"AddressEmptyCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7019,"src":"5121:16:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":7209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5121:24:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7210,"nodeType":"RevertStatement","src":"5114:31:27"}]}},{"expression":{"id":7213,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7185,"src":"5180:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":7189,"id":7214,"nodeType":"Return","src":"5173:17:27"}]},"id":7216,"nodeType":"IfStatement","src":"4793:408:27","trueBody":{"id":7196,"nodeType":"Block","src":"4807:44:27","statements":[{"expression":{"arguments":[{"id":7193,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7185,"src":"4829:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7192,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7258,"src":"4821:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":7194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4821:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7195,"nodeType":"ExpressionStatement","src":"4821:19:27"}]}}]},"documentation":{"id":7179,"nodeType":"StructuredDocumentation","src":"4365:255:27","text":" @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."},"id":7218,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"4634:26:27","nodeType":"FunctionDefinition","parameters":{"id":7186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7181,"mutability":"mutable","name":"target","nameLocation":"4678:6:27","nodeType":"VariableDeclaration","scope":7218,"src":"4670:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7180,"name":"address","nodeType":"ElementaryTypeName","src":"4670:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7183,"mutability":"mutable","name":"success","nameLocation":"4699:7:27","nodeType":"VariableDeclaration","scope":7218,"src":"4694:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7182,"name":"bool","nodeType":"ElementaryTypeName","src":"4694:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":7185,"mutability":"mutable","name":"returndata","nameLocation":"4729:10:27","nodeType":"VariableDeclaration","scope":7218,"src":"4716:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7184,"name":"bytes","nodeType":"ElementaryTypeName","src":"4716:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4660:85:27"},"returnParameters":{"id":7189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7218,"src":"4769:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7187,"name":"bytes","nodeType":"ElementaryTypeName","src":"4769:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4768:14:27"},"scope":7259,"src":"4625:582:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7239,"nodeType":"Block","src":"5509:122:27","statements":[{"condition":{"id":7229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5523:8:27","subExpression":{"id":7228,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7221,"src":"5524:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7237,"nodeType":"Block","src":"5583:42:27","statements":[{"expression":{"id":7235,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7223,"src":"5604:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":7227,"id":7236,"nodeType":"Return","src":"5597:17:27"}]},"id":7238,"nodeType":"IfStatement","src":"5519:106:27","trueBody":{"id":7234,"nodeType":"Block","src":"5533:44:27","statements":[{"expression":{"arguments":[{"id":7231,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7223,"src":"5555:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7230,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7258,"src":"5547:7:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":7232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5547:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7233,"nodeType":"ExpressionStatement","src":"5547:19:27"}]}}]},"documentation":{"id":7219,"nodeType":"StructuredDocumentation","src":"5213:189:27","text":" @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."},"id":7240,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"5416:16:27","nodeType":"FunctionDefinition","parameters":{"id":7224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7221,"mutability":"mutable","name":"success","nameLocation":"5438:7:27","nodeType":"VariableDeclaration","scope":7240,"src":"5433:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7220,"name":"bool","nodeType":"ElementaryTypeName","src":"5433:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":7223,"mutability":"mutable","name":"returndata","nameLocation":"5460:10:27","nodeType":"VariableDeclaration","scope":7240,"src":"5447:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7222,"name":"bytes","nodeType":"ElementaryTypeName","src":"5447:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5432:39:27"},"returnParameters":{"id":7227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7226,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7240,"src":"5495:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7225,"name":"bytes","nodeType":"ElementaryTypeName","src":"5495:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5494:14:27"},"scope":7259,"src":"5407:224:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7257,"nodeType":"Block","src":"5798:461:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7246,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7243,"src":"5874:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":7247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5885:6:27","memberName":"length","nodeType":"MemberAccess","src":"5874:17:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5894:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5874:21:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7255,"nodeType":"Block","src":"6204:49:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":7252,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7022,"src":"6225:15:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":7253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:17:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7254,"nodeType":"RevertStatement","src":"6218:24:27"}]},"id":7256,"nodeType":"IfStatement","src":"5870:383:27","trueBody":{"id":7251,"nodeType":"Block","src":"5897:301:27","statements":[{"AST":{"nativeSrc":"6055:133:27","nodeType":"YulBlock","src":"6055:133:27","statements":[{"nativeSrc":"6073:40:27","nodeType":"YulVariableDeclaration","src":"6073:40:27","value":{"arguments":[{"name":"returndata","nativeSrc":"6102:10:27","nodeType":"YulIdentifier","src":"6102:10:27"}],"functionName":{"name":"mload","nativeSrc":"6096:5:27","nodeType":"YulIdentifier","src":"6096:5:27"},"nativeSrc":"6096:17:27","nodeType":"YulFunctionCall","src":"6096:17:27"},"variables":[{"name":"returndata_size","nativeSrc":"6077:15:27","nodeType":"YulTypedName","src":"6077:15:27","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6141:2:27","nodeType":"YulLiteral","src":"6141:2:27","type":"","value":"32"},{"name":"returndata","nativeSrc":"6145:10:27","nodeType":"YulIdentifier","src":"6145:10:27"}],"functionName":{"name":"add","nativeSrc":"6137:3:27","nodeType":"YulIdentifier","src":"6137:3:27"},"nativeSrc":"6137:19:27","nodeType":"YulFunctionCall","src":"6137:19:27"},{"name":"returndata_size","nativeSrc":"6158:15:27","nodeType":"YulIdentifier","src":"6158:15:27"}],"functionName":{"name":"revert","nativeSrc":"6130:6:27","nodeType":"YulIdentifier","src":"6130:6:27"},"nativeSrc":"6130:44:27","nodeType":"YulFunctionCall","src":"6130:44:27"},"nativeSrc":"6130:44:27","nodeType":"YulExpressionStatement","src":"6130:44:27"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":7243,"isOffset":false,"isSlot":false,"src":"6102:10:27","valueSize":1},{"declaration":7243,"isOffset":false,"isSlot":false,"src":"6145:10:27","valueSize":1}],"id":7250,"nodeType":"InlineAssembly","src":"6046:142:27"}]}}]},"documentation":{"id":7241,"nodeType":"StructuredDocumentation","src":"5637:101:27","text":" @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."},"id":7258,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"5752:7:27","nodeType":"FunctionDefinition","parameters":{"id":7244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7243,"mutability":"mutable","name":"returndata","nameLocation":"5773:10:27","nodeType":"VariableDeclaration","scope":7258,"src":"5760:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7242,"name":"bytes","nodeType":"ElementaryTypeName","src":"5760:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5759:25:27"},"returnParameters":{"id":7245,"nodeType":"ParameterList","parameters":[],"src":"5798:0:27"},"scope":7259,"src":"5743:516:27","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":7260,"src":"195:6066:27","usedErrors":[7014,7019,7022],"usedEvents":[]}],"src":"101:6161:27"},"id":27},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","exportedSymbols":{"SafeCast":[9014]},"id":9015,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7261,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"192:24:28"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeCast","contractDependencies":[],"contractKind":"library","documentation":{"id":7262,"nodeType":"StructuredDocumentation","src":"218:545:28","text":" @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n checks.\n Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n easily result in undesired exploitation or bugs, since developers usually\n assume that overflows raise errors. `SafeCast` restores this intuition by\n reverting the transaction when such an operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":9014,"linearizedBaseContracts":[9014],"name":"SafeCast","nameLocation":"772:8:28","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":7263,"nodeType":"StructuredDocumentation","src":"787:68:28","text":" @dev Value doesn't fit in an uint of `bits` size."},"errorSelector":"6dfcc650","id":7269,"name":"SafeCastOverflowedUintDowncast","nameLocation":"866:30:28","nodeType":"ErrorDefinition","parameters":{"id":7268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7265,"mutability":"mutable","name":"bits","nameLocation":"903:4:28","nodeType":"VariableDeclaration","scope":7269,"src":"897:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7264,"name":"uint8","nodeType":"ElementaryTypeName","src":"897:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7267,"mutability":"mutable","name":"value","nameLocation":"917:5:28","nodeType":"VariableDeclaration","scope":7269,"src":"909:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7266,"name":"uint256","nodeType":"ElementaryTypeName","src":"909:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"896:27:28"},"src":"860:64:28"},{"documentation":{"id":7270,"nodeType":"StructuredDocumentation","src":"930:75:28","text":" @dev An int value doesn't fit in an uint of `bits` size."},"errorSelector":"a8ce4432","id":7274,"name":"SafeCastOverflowedIntToUint","nameLocation":"1016:27:28","nodeType":"ErrorDefinition","parameters":{"id":7273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7272,"mutability":"mutable","name":"value","nameLocation":"1051:5:28","nodeType":"VariableDeclaration","scope":7274,"src":"1044:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7271,"name":"int256","nodeType":"ElementaryTypeName","src":"1044:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1043:14:28"},"src":"1010:48:28"},{"documentation":{"id":7275,"nodeType":"StructuredDocumentation","src":"1064:67:28","text":" @dev Value doesn't fit in an int of `bits` size."},"errorSelector":"327269a7","id":7281,"name":"SafeCastOverflowedIntDowncast","nameLocation":"1142:29:28","nodeType":"ErrorDefinition","parameters":{"id":7280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7277,"mutability":"mutable","name":"bits","nameLocation":"1178:4:28","nodeType":"VariableDeclaration","scope":7281,"src":"1172:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7276,"name":"uint8","nodeType":"ElementaryTypeName","src":"1172:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7279,"mutability":"mutable","name":"value","nameLocation":"1191:5:28","nodeType":"VariableDeclaration","scope":7281,"src":"1184:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7278,"name":"int256","nodeType":"ElementaryTypeName","src":"1184:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1171:26:28"},"src":"1136:62:28"},{"documentation":{"id":7282,"nodeType":"StructuredDocumentation","src":"1204:75:28","text":" @dev An uint value doesn't fit in an int of `bits` size."},"errorSelector":"24775e06","id":7286,"name":"SafeCastOverflowedUintToInt","nameLocation":"1290:27:28","nodeType":"ErrorDefinition","parameters":{"id":7285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7284,"mutability":"mutable","name":"value","nameLocation":"1326:5:28","nodeType":"VariableDeclaration","scope":7286,"src":"1318:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7283,"name":"uint256","nodeType":"ElementaryTypeName","src":"1318:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1317:15:28"},"src":"1284:49:28"},{"body":{"id":7313,"nodeType":"Block","src":"1690:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7289,"src":"1704:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1717:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":7296,"name":"uint248","nodeType":"ElementaryTypeName","src":"1717:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"}],"id":7295,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1712:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1712:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint248","typeString":"type(uint248)"}},"id":7299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1726:3:28","memberName":"max","nodeType":"MemberAccess","src":"1712:17:28","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"src":"1704:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7307,"nodeType":"IfStatement","src":"1700:105:28","trueBody":{"id":7306,"nodeType":"Block","src":"1731:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":7302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:3:28","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":7303,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7289,"src":"1788:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7301,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"1752:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1752:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7305,"nodeType":"RevertStatement","src":"1745:49:28"}]}},{"expression":{"arguments":[{"id":7310,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7289,"src":"1829:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1821:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":7308,"name":"uint248","nodeType":"ElementaryTypeName","src":"1821:7:28","typeDescriptions":{}}},"id":7311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1821:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"functionReturnParameters":7293,"id":7312,"nodeType":"Return","src":"1814:21:28"}]},"documentation":{"id":7287,"nodeType":"StructuredDocumentation","src":"1339:280:28","text":" @dev Returns the downcasted uint248 from uint256, reverting on\n overflow (when the input is greater than largest uint248).\n Counterpart to Solidity's `uint248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":7314,"implemented":true,"kind":"function","modifiers":[],"name":"toUint248","nameLocation":"1633:9:28","nodeType":"FunctionDefinition","parameters":{"id":7290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7289,"mutability":"mutable","name":"value","nameLocation":"1651:5:28","nodeType":"VariableDeclaration","scope":7314,"src":"1643:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7288,"name":"uint256","nodeType":"ElementaryTypeName","src":"1643:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1642:15:28"},"returnParameters":{"id":7293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7314,"src":"1681:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"},"typeName":{"id":7291,"name":"uint248","nodeType":"ElementaryTypeName","src":"1681:7:28","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"visibility":"internal"}],"src":"1680:9:28"},"scope":9014,"src":"1624:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7341,"nodeType":"Block","src":"2199:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7317,"src":"2213:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2226:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":7324,"name":"uint240","nodeType":"ElementaryTypeName","src":"2226:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"}],"id":7323,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2221:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2221:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint240","typeString":"type(uint240)"}},"id":7327,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2235:3:28","memberName":"max","nodeType":"MemberAccess","src":"2221:17:28","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"src":"2213:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7335,"nodeType":"IfStatement","src":"2209:105:28","trueBody":{"id":7334,"nodeType":"Block","src":"2240:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":7330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2292:3:28","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":7331,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7317,"src":"2297:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7329,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"2261:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2261:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7333,"nodeType":"RevertStatement","src":"2254:49:28"}]}},{"expression":{"arguments":[{"id":7338,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7317,"src":"2338:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2330:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":7336,"name":"uint240","nodeType":"ElementaryTypeName","src":"2330:7:28","typeDescriptions":{}}},"id":7339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2330:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"functionReturnParameters":7321,"id":7340,"nodeType":"Return","src":"2323:21:28"}]},"documentation":{"id":7315,"nodeType":"StructuredDocumentation","src":"1848:280:28","text":" @dev Returns the downcasted uint240 from uint256, reverting on\n overflow (when the input is greater than largest uint240).\n Counterpart to Solidity's `uint240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":7342,"implemented":true,"kind":"function","modifiers":[],"name":"toUint240","nameLocation":"2142:9:28","nodeType":"FunctionDefinition","parameters":{"id":7318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7317,"mutability":"mutable","name":"value","nameLocation":"2160:5:28","nodeType":"VariableDeclaration","scope":7342,"src":"2152:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7316,"name":"uint256","nodeType":"ElementaryTypeName","src":"2152:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2151:15:28"},"returnParameters":{"id":7321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7320,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7342,"src":"2190:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"},"typeName":{"id":7319,"name":"uint240","nodeType":"ElementaryTypeName","src":"2190:7:28","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"visibility":"internal"}],"src":"2189:9:28"},"scope":9014,"src":"2133:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7369,"nodeType":"Block","src":"2708:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7345,"src":"2722:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2735:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":7352,"name":"uint232","nodeType":"ElementaryTypeName","src":"2735:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"}],"id":7351,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2730:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2730:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint232","typeString":"type(uint232)"}},"id":7355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2744:3:28","memberName":"max","nodeType":"MemberAccess","src":"2730:17:28","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"src":"2722:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7363,"nodeType":"IfStatement","src":"2718:105:28","trueBody":{"id":7362,"nodeType":"Block","src":"2749:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":7358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2801:3:28","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":7359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7345,"src":"2806:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7357,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"2770:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2770:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7361,"nodeType":"RevertStatement","src":"2763:49:28"}]}},{"expression":{"arguments":[{"id":7366,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7345,"src":"2847:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7365,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2839:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":7364,"name":"uint232","nodeType":"ElementaryTypeName","src":"2839:7:28","typeDescriptions":{}}},"id":7367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2839:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"functionReturnParameters":7349,"id":7368,"nodeType":"Return","src":"2832:21:28"}]},"documentation":{"id":7343,"nodeType":"StructuredDocumentation","src":"2357:280:28","text":" @dev Returns the downcasted uint232 from uint256, reverting on\n overflow (when the input is greater than largest uint232).\n Counterpart to Solidity's `uint232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":7370,"implemented":true,"kind":"function","modifiers":[],"name":"toUint232","nameLocation":"2651:9:28","nodeType":"FunctionDefinition","parameters":{"id":7346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7345,"mutability":"mutable","name":"value","nameLocation":"2669:5:28","nodeType":"VariableDeclaration","scope":7370,"src":"2661:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7344,"name":"uint256","nodeType":"ElementaryTypeName","src":"2661:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2660:15:28"},"returnParameters":{"id":7349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7370,"src":"2699:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"},"typeName":{"id":7347,"name":"uint232","nodeType":"ElementaryTypeName","src":"2699:7:28","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"visibility":"internal"}],"src":"2698:9:28"},"scope":9014,"src":"2642:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7397,"nodeType":"Block","src":"3217:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7373,"src":"3231:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7381,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3244:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":7380,"name":"uint224","nodeType":"ElementaryTypeName","src":"3244:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"}],"id":7379,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3239:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3239:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint224","typeString":"type(uint224)"}},"id":7383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3253:3:28","memberName":"max","nodeType":"MemberAccess","src":"3239:17:28","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"3231:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7391,"nodeType":"IfStatement","src":"3227:105:28","trueBody":{"id":7390,"nodeType":"Block","src":"3258:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":7386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3310:3:28","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":7387,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7373,"src":"3315:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7385,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"3279:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3279:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7389,"nodeType":"RevertStatement","src":"3272:49:28"}]}},{"expression":{"arguments":[{"id":7394,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7373,"src":"3356:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3348:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":7392,"name":"uint224","nodeType":"ElementaryTypeName","src":"3348:7:28","typeDescriptions":{}}},"id":7395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3348:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":7377,"id":7396,"nodeType":"Return","src":"3341:21:28"}]},"documentation":{"id":7371,"nodeType":"StructuredDocumentation","src":"2866:280:28","text":" @dev Returns the downcasted uint224 from uint256, reverting on\n overflow (when the input is greater than largest uint224).\n Counterpart to Solidity's `uint224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":7398,"implemented":true,"kind":"function","modifiers":[],"name":"toUint224","nameLocation":"3160:9:28","nodeType":"FunctionDefinition","parameters":{"id":7374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7373,"mutability":"mutable","name":"value","nameLocation":"3178:5:28","nodeType":"VariableDeclaration","scope":7398,"src":"3170:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7372,"name":"uint256","nodeType":"ElementaryTypeName","src":"3170:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3169:15:28"},"returnParameters":{"id":7377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7398,"src":"3208:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":7375,"name":"uint224","nodeType":"ElementaryTypeName","src":"3208:7:28","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"3207:9:28"},"scope":9014,"src":"3151:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7425,"nodeType":"Block","src":"3726:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7401,"src":"3740:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3753:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":7408,"name":"uint216","nodeType":"ElementaryTypeName","src":"3753:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"}],"id":7407,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3748:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3748:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint216","typeString":"type(uint216)"}},"id":7411,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3762:3:28","memberName":"max","nodeType":"MemberAccess","src":"3748:17:28","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"src":"3740:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7419,"nodeType":"IfStatement","src":"3736:105:28","trueBody":{"id":7418,"nodeType":"Block","src":"3767:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":7414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3819:3:28","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":7415,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7401,"src":"3824:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7413,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"3788:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3788:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7417,"nodeType":"RevertStatement","src":"3781:49:28"}]}},{"expression":{"arguments":[{"id":7422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7401,"src":"3865:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3857:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":7420,"name":"uint216","nodeType":"ElementaryTypeName","src":"3857:7:28","typeDescriptions":{}}},"id":7423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3857:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"functionReturnParameters":7405,"id":7424,"nodeType":"Return","src":"3850:21:28"}]},"documentation":{"id":7399,"nodeType":"StructuredDocumentation","src":"3375:280:28","text":" @dev Returns the downcasted uint216 from uint256, reverting on\n overflow (when the input is greater than largest uint216).\n Counterpart to Solidity's `uint216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":7426,"implemented":true,"kind":"function","modifiers":[],"name":"toUint216","nameLocation":"3669:9:28","nodeType":"FunctionDefinition","parameters":{"id":7402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7401,"mutability":"mutable","name":"value","nameLocation":"3687:5:28","nodeType":"VariableDeclaration","scope":7426,"src":"3679:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7400,"name":"uint256","nodeType":"ElementaryTypeName","src":"3679:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3678:15:28"},"returnParameters":{"id":7405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7426,"src":"3717:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"},"typeName":{"id":7403,"name":"uint216","nodeType":"ElementaryTypeName","src":"3717:7:28","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"visibility":"internal"}],"src":"3716:9:28"},"scope":9014,"src":"3660:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7453,"nodeType":"Block","src":"4235:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7434,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7429,"src":"4249:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7437,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4262:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":7436,"name":"uint208","nodeType":"ElementaryTypeName","src":"4262:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":7435,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4257:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4257:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":7439,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4271:3:28","memberName":"max","nodeType":"MemberAccess","src":"4257:17:28","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"4249:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7447,"nodeType":"IfStatement","src":"4245:105:28","trueBody":{"id":7446,"nodeType":"Block","src":"4276:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":7442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4328:3:28","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":7443,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7429,"src":"4333:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7441,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"4297:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7445,"nodeType":"RevertStatement","src":"4290:49:28"}]}},{"expression":{"arguments":[{"id":7450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7429,"src":"4374:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4366:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":7448,"name":"uint208","nodeType":"ElementaryTypeName","src":"4366:7:28","typeDescriptions":{}}},"id":7451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4366:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":7433,"id":7452,"nodeType":"Return","src":"4359:21:28"}]},"documentation":{"id":7427,"nodeType":"StructuredDocumentation","src":"3884:280:28","text":" @dev Returns the downcasted uint208 from uint256, reverting on\n overflow (when the input is greater than largest uint208).\n Counterpart to Solidity's `uint208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":7454,"implemented":true,"kind":"function","modifiers":[],"name":"toUint208","nameLocation":"4178:9:28","nodeType":"FunctionDefinition","parameters":{"id":7430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7429,"mutability":"mutable","name":"value","nameLocation":"4196:5:28","nodeType":"VariableDeclaration","scope":7454,"src":"4188:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7428,"name":"uint256","nodeType":"ElementaryTypeName","src":"4188:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4187:15:28"},"returnParameters":{"id":7433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7454,"src":"4226:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":7431,"name":"uint208","nodeType":"ElementaryTypeName","src":"4226:7:28","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"4225:9:28"},"scope":9014,"src":"4169:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7481,"nodeType":"Block","src":"4744:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7462,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7457,"src":"4758:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7465,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4771:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":7464,"name":"uint200","nodeType":"ElementaryTypeName","src":"4771:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"}],"id":7463,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4766:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4766:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint200","typeString":"type(uint200)"}},"id":7467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4780:3:28","memberName":"max","nodeType":"MemberAccess","src":"4766:17:28","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"src":"4758:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7475,"nodeType":"IfStatement","src":"4754:105:28","trueBody":{"id":7474,"nodeType":"Block","src":"4785:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":7470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4837:3:28","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":7471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7457,"src":"4842:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7469,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"4806:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7473,"nodeType":"RevertStatement","src":"4799:49:28"}]}},{"expression":{"arguments":[{"id":7478,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7457,"src":"4883:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4875:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":7476,"name":"uint200","nodeType":"ElementaryTypeName","src":"4875:7:28","typeDescriptions":{}}},"id":7479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4875:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"functionReturnParameters":7461,"id":7480,"nodeType":"Return","src":"4868:21:28"}]},"documentation":{"id":7455,"nodeType":"StructuredDocumentation","src":"4393:280:28","text":" @dev Returns the downcasted uint200 from uint256, reverting on\n overflow (when the input is greater than largest uint200).\n Counterpart to Solidity's `uint200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":7482,"implemented":true,"kind":"function","modifiers":[],"name":"toUint200","nameLocation":"4687:9:28","nodeType":"FunctionDefinition","parameters":{"id":7458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7457,"mutability":"mutable","name":"value","nameLocation":"4705:5:28","nodeType":"VariableDeclaration","scope":7482,"src":"4697:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7456,"name":"uint256","nodeType":"ElementaryTypeName","src":"4697:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4696:15:28"},"returnParameters":{"id":7461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7482,"src":"4735:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"},"typeName":{"id":7459,"name":"uint200","nodeType":"ElementaryTypeName","src":"4735:7:28","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"visibility":"internal"}],"src":"4734:9:28"},"scope":9014,"src":"4678:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7509,"nodeType":"Block","src":"5253:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7485,"src":"5267:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5280:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":7492,"name":"uint192","nodeType":"ElementaryTypeName","src":"5280:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"}],"id":7491,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5275:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5275:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint192","typeString":"type(uint192)"}},"id":7495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5289:3:28","memberName":"max","nodeType":"MemberAccess","src":"5275:17:28","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"5267:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7503,"nodeType":"IfStatement","src":"5263:105:28","trueBody":{"id":7502,"nodeType":"Block","src":"5294:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":7498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5346:3:28","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":7499,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7485,"src":"5351:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7497,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"5315:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5315:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7501,"nodeType":"RevertStatement","src":"5308:49:28"}]}},{"expression":{"arguments":[{"id":7506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7485,"src":"5392:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5384:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":7504,"name":"uint192","nodeType":"ElementaryTypeName","src":"5384:7:28","typeDescriptions":{}}},"id":7507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5384:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"functionReturnParameters":7489,"id":7508,"nodeType":"Return","src":"5377:21:28"}]},"documentation":{"id":7483,"nodeType":"StructuredDocumentation","src":"4902:280:28","text":" @dev Returns the downcasted uint192 from uint256, reverting on\n overflow (when the input is greater than largest uint192).\n Counterpart to Solidity's `uint192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":7510,"implemented":true,"kind":"function","modifiers":[],"name":"toUint192","nameLocation":"5196:9:28","nodeType":"FunctionDefinition","parameters":{"id":7486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7485,"mutability":"mutable","name":"value","nameLocation":"5214:5:28","nodeType":"VariableDeclaration","scope":7510,"src":"5206:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7484,"name":"uint256","nodeType":"ElementaryTypeName","src":"5206:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5205:15:28"},"returnParameters":{"id":7489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7510,"src":"5244:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":7487,"name":"uint192","nodeType":"ElementaryTypeName","src":"5244:7:28","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"5243:9:28"},"scope":9014,"src":"5187:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7537,"nodeType":"Block","src":"5762:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7518,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7513,"src":"5776:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7521,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5789:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":7520,"name":"uint184","nodeType":"ElementaryTypeName","src":"5789:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"}],"id":7519,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5784:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint184","typeString":"type(uint184)"}},"id":7523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5798:3:28","memberName":"max","nodeType":"MemberAccess","src":"5784:17:28","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"src":"5776:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7531,"nodeType":"IfStatement","src":"5772:105:28","trueBody":{"id":7530,"nodeType":"Block","src":"5803:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":7526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5855:3:28","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":7527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7513,"src":"5860:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7525,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"5824:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5824:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7529,"nodeType":"RevertStatement","src":"5817:49:28"}]}},{"expression":{"arguments":[{"id":7534,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7513,"src":"5901:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5893:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":7532,"name":"uint184","nodeType":"ElementaryTypeName","src":"5893:7:28","typeDescriptions":{}}},"id":7535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5893:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"functionReturnParameters":7517,"id":7536,"nodeType":"Return","src":"5886:21:28"}]},"documentation":{"id":7511,"nodeType":"StructuredDocumentation","src":"5411:280:28","text":" @dev Returns the downcasted uint184 from uint256, reverting on\n overflow (when the input is greater than largest uint184).\n Counterpart to Solidity's `uint184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":7538,"implemented":true,"kind":"function","modifiers":[],"name":"toUint184","nameLocation":"5705:9:28","nodeType":"FunctionDefinition","parameters":{"id":7514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7513,"mutability":"mutable","name":"value","nameLocation":"5723:5:28","nodeType":"VariableDeclaration","scope":7538,"src":"5715:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7512,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5714:15:28"},"returnParameters":{"id":7517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7538,"src":"5753:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"},"typeName":{"id":7515,"name":"uint184","nodeType":"ElementaryTypeName","src":"5753:7:28","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"visibility":"internal"}],"src":"5752:9:28"},"scope":9014,"src":"5696:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7565,"nodeType":"Block","src":"6271:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7541,"src":"6285:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6298:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":7548,"name":"uint176","nodeType":"ElementaryTypeName","src":"6298:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"}],"id":7547,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6293:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6293:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint176","typeString":"type(uint176)"}},"id":7551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6307:3:28","memberName":"max","nodeType":"MemberAccess","src":"6293:17:28","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"src":"6285:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7559,"nodeType":"IfStatement","src":"6281:105:28","trueBody":{"id":7558,"nodeType":"Block","src":"6312:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":7554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6364:3:28","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":7555,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7541,"src":"6369:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7553,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"6333:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6333:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7557,"nodeType":"RevertStatement","src":"6326:49:28"}]}},{"expression":{"arguments":[{"id":7562,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7541,"src":"6410:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6402:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":7560,"name":"uint176","nodeType":"ElementaryTypeName","src":"6402:7:28","typeDescriptions":{}}},"id":7563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6402:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"functionReturnParameters":7545,"id":7564,"nodeType":"Return","src":"6395:21:28"}]},"documentation":{"id":7539,"nodeType":"StructuredDocumentation","src":"5920:280:28","text":" @dev Returns the downcasted uint176 from uint256, reverting on\n overflow (when the input is greater than largest uint176).\n Counterpart to Solidity's `uint176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":7566,"implemented":true,"kind":"function","modifiers":[],"name":"toUint176","nameLocation":"6214:9:28","nodeType":"FunctionDefinition","parameters":{"id":7542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7541,"mutability":"mutable","name":"value","nameLocation":"6232:5:28","nodeType":"VariableDeclaration","scope":7566,"src":"6224:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7540,"name":"uint256","nodeType":"ElementaryTypeName","src":"6224:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6223:15:28"},"returnParameters":{"id":7545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7544,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7566,"src":"6262:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"},"typeName":{"id":7543,"name":"uint176","nodeType":"ElementaryTypeName","src":"6262:7:28","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"visibility":"internal"}],"src":"6261:9:28"},"scope":9014,"src":"6205:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7593,"nodeType":"Block","src":"6780:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7574,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7569,"src":"6794:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6807:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":7576,"name":"uint168","nodeType":"ElementaryTypeName","src":"6807:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"}],"id":7575,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6802:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6802:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint168","typeString":"type(uint168)"}},"id":7579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6816:3:28","memberName":"max","nodeType":"MemberAccess","src":"6802:17:28","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"src":"6794:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7587,"nodeType":"IfStatement","src":"6790:105:28","trueBody":{"id":7586,"nodeType":"Block","src":"6821:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":7582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6873:3:28","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":7583,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7569,"src":"6878:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7581,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"6842:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6842:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7585,"nodeType":"RevertStatement","src":"6835:49:28"}]}},{"expression":{"arguments":[{"id":7590,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7569,"src":"6919:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7589,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":7588,"name":"uint168","nodeType":"ElementaryTypeName","src":"6911:7:28","typeDescriptions":{}}},"id":7591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"functionReturnParameters":7573,"id":7592,"nodeType":"Return","src":"6904:21:28"}]},"documentation":{"id":7567,"nodeType":"StructuredDocumentation","src":"6429:280:28","text":" @dev Returns the downcasted uint168 from uint256, reverting on\n overflow (when the input is greater than largest uint168).\n Counterpart to Solidity's `uint168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":7594,"implemented":true,"kind":"function","modifiers":[],"name":"toUint168","nameLocation":"6723:9:28","nodeType":"FunctionDefinition","parameters":{"id":7570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7569,"mutability":"mutable","name":"value","nameLocation":"6741:5:28","nodeType":"VariableDeclaration","scope":7594,"src":"6733:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7568,"name":"uint256","nodeType":"ElementaryTypeName","src":"6733:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6732:15:28"},"returnParameters":{"id":7573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7594,"src":"6771:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"},"typeName":{"id":7571,"name":"uint168","nodeType":"ElementaryTypeName","src":"6771:7:28","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"visibility":"internal"}],"src":"6770:9:28"},"scope":9014,"src":"6714:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7621,"nodeType":"Block","src":"7289:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7602,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7597,"src":"7303:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7316:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":7604,"name":"uint160","nodeType":"ElementaryTypeName","src":"7316:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":7603,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7311:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7311:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":7607,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7325:3:28","memberName":"max","nodeType":"MemberAccess","src":"7311:17:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7303:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7615,"nodeType":"IfStatement","src":"7299:105:28","trueBody":{"id":7614,"nodeType":"Block","src":"7330:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":7610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7382:3:28","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":7611,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7597,"src":"7387:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7609,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"7351:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7351:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7613,"nodeType":"RevertStatement","src":"7344:49:28"}]}},{"expression":{"arguments":[{"id":7618,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7597,"src":"7428:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7420:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":7616,"name":"uint160","nodeType":"ElementaryTypeName","src":"7420:7:28","typeDescriptions":{}}},"id":7619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7420:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":7601,"id":7620,"nodeType":"Return","src":"7413:21:28"}]},"documentation":{"id":7595,"nodeType":"StructuredDocumentation","src":"6938:280:28","text":" @dev Returns the downcasted uint160 from uint256, reverting on\n overflow (when the input is greater than largest uint160).\n Counterpart to Solidity's `uint160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":7622,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nameLocation":"7232:9:28","nodeType":"FunctionDefinition","parameters":{"id":7598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7597,"mutability":"mutable","name":"value","nameLocation":"7250:5:28","nodeType":"VariableDeclaration","scope":7622,"src":"7242:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7596,"name":"uint256","nodeType":"ElementaryTypeName","src":"7242:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7241:15:28"},"returnParameters":{"id":7601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7600,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7622,"src":"7280:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":7599,"name":"uint160","nodeType":"ElementaryTypeName","src":"7280:7:28","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"7279:9:28"},"scope":9014,"src":"7223:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7649,"nodeType":"Block","src":"7798:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7625,"src":"7812:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7825:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":7632,"name":"uint152","nodeType":"ElementaryTypeName","src":"7825:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"}],"id":7631,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7820:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7820:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint152","typeString":"type(uint152)"}},"id":7635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7834:3:28","memberName":"max","nodeType":"MemberAccess","src":"7820:17:28","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"src":"7812:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7643,"nodeType":"IfStatement","src":"7808:105:28","trueBody":{"id":7642,"nodeType":"Block","src":"7839:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":7638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7891:3:28","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":7639,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7625,"src":"7896:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7637,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"7860:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7860:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7641,"nodeType":"RevertStatement","src":"7853:49:28"}]}},{"expression":{"arguments":[{"id":7646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7625,"src":"7937:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7929:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":7644,"name":"uint152","nodeType":"ElementaryTypeName","src":"7929:7:28","typeDescriptions":{}}},"id":7647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7929:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"functionReturnParameters":7629,"id":7648,"nodeType":"Return","src":"7922:21:28"}]},"documentation":{"id":7623,"nodeType":"StructuredDocumentation","src":"7447:280:28","text":" @dev Returns the downcasted uint152 from uint256, reverting on\n overflow (when the input is greater than largest uint152).\n Counterpart to Solidity's `uint152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":7650,"implemented":true,"kind":"function","modifiers":[],"name":"toUint152","nameLocation":"7741:9:28","nodeType":"FunctionDefinition","parameters":{"id":7626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7625,"mutability":"mutable","name":"value","nameLocation":"7759:5:28","nodeType":"VariableDeclaration","scope":7650,"src":"7751:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7624,"name":"uint256","nodeType":"ElementaryTypeName","src":"7751:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7750:15:28"},"returnParameters":{"id":7629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7628,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7650,"src":"7789:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"},"typeName":{"id":7627,"name":"uint152","nodeType":"ElementaryTypeName","src":"7789:7:28","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"visibility":"internal"}],"src":"7788:9:28"},"scope":9014,"src":"7732:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7677,"nodeType":"Block","src":"8307:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7658,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7653,"src":"8321:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8334:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":7660,"name":"uint144","nodeType":"ElementaryTypeName","src":"8334:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"}],"id":7659,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8329:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8329:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint144","typeString":"type(uint144)"}},"id":7663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8343:3:28","memberName":"max","nodeType":"MemberAccess","src":"8329:17:28","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"src":"8321:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7671,"nodeType":"IfStatement","src":"8317:105:28","trueBody":{"id":7670,"nodeType":"Block","src":"8348:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":7666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8400:3:28","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":7667,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7653,"src":"8405:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7665,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"8369:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8369:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7669,"nodeType":"RevertStatement","src":"8362:49:28"}]}},{"expression":{"arguments":[{"id":7674,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7653,"src":"8446:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7673,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8438:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":7672,"name":"uint144","nodeType":"ElementaryTypeName","src":"8438:7:28","typeDescriptions":{}}},"id":7675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8438:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"functionReturnParameters":7657,"id":7676,"nodeType":"Return","src":"8431:21:28"}]},"documentation":{"id":7651,"nodeType":"StructuredDocumentation","src":"7956:280:28","text":" @dev Returns the downcasted uint144 from uint256, reverting on\n overflow (when the input is greater than largest uint144).\n Counterpart to Solidity's `uint144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":7678,"implemented":true,"kind":"function","modifiers":[],"name":"toUint144","nameLocation":"8250:9:28","nodeType":"FunctionDefinition","parameters":{"id":7654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7653,"mutability":"mutable","name":"value","nameLocation":"8268:5:28","nodeType":"VariableDeclaration","scope":7678,"src":"8260:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7652,"name":"uint256","nodeType":"ElementaryTypeName","src":"8260:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8259:15:28"},"returnParameters":{"id":7657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7678,"src":"8298:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"},"typeName":{"id":7655,"name":"uint144","nodeType":"ElementaryTypeName","src":"8298:7:28","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"visibility":"internal"}],"src":"8297:9:28"},"scope":9014,"src":"8241:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7705,"nodeType":"Block","src":"8816:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7686,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7681,"src":"8830:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8843:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":7688,"name":"uint136","nodeType":"ElementaryTypeName","src":"8843:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"}],"id":7687,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8838:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8838:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint136","typeString":"type(uint136)"}},"id":7691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8852:3:28","memberName":"max","nodeType":"MemberAccess","src":"8838:17:28","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"src":"8830:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7699,"nodeType":"IfStatement","src":"8826:105:28","trueBody":{"id":7698,"nodeType":"Block","src":"8857:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":7694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8909:3:28","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":7695,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7681,"src":"8914:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7693,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"8878:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8878:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7697,"nodeType":"RevertStatement","src":"8871:49:28"}]}},{"expression":{"arguments":[{"id":7702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7681,"src":"8955:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8947:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":7700,"name":"uint136","nodeType":"ElementaryTypeName","src":"8947:7:28","typeDescriptions":{}}},"id":7703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8947:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"functionReturnParameters":7685,"id":7704,"nodeType":"Return","src":"8940:21:28"}]},"documentation":{"id":7679,"nodeType":"StructuredDocumentation","src":"8465:280:28","text":" @dev Returns the downcasted uint136 from uint256, reverting on\n overflow (when the input is greater than largest uint136).\n Counterpart to Solidity's `uint136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":7706,"implemented":true,"kind":"function","modifiers":[],"name":"toUint136","nameLocation":"8759:9:28","nodeType":"FunctionDefinition","parameters":{"id":7682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7681,"mutability":"mutable","name":"value","nameLocation":"8777:5:28","nodeType":"VariableDeclaration","scope":7706,"src":"8769:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7680,"name":"uint256","nodeType":"ElementaryTypeName","src":"8769:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8768:15:28"},"returnParameters":{"id":7685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7684,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7706,"src":"8807:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"},"typeName":{"id":7683,"name":"uint136","nodeType":"ElementaryTypeName","src":"8807:7:28","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"visibility":"internal"}],"src":"8806:9:28"},"scope":9014,"src":"8750:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7733,"nodeType":"Block","src":"9325:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7714,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7709,"src":"9339:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9352:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":7716,"name":"uint128","nodeType":"ElementaryTypeName","src":"9352:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":7715,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9347:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9347:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":7719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9361:3:28","memberName":"max","nodeType":"MemberAccess","src":"9347:17:28","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9339:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7727,"nodeType":"IfStatement","src":"9335:105:28","trueBody":{"id":7726,"nodeType":"Block","src":"9366:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":7722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9418:3:28","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":7723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7709,"src":"9423:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7721,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"9387:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9387:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7725,"nodeType":"RevertStatement","src":"9380:49:28"}]}},{"expression":{"arguments":[{"id":7730,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7709,"src":"9464:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9456:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":7728,"name":"uint128","nodeType":"ElementaryTypeName","src":"9456:7:28","typeDescriptions":{}}},"id":7731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9456:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":7713,"id":7732,"nodeType":"Return","src":"9449:21:28"}]},"documentation":{"id":7707,"nodeType":"StructuredDocumentation","src":"8974:280:28","text":" @dev Returns the downcasted uint128 from uint256, reverting on\n overflow (when the input is greater than largest uint128).\n Counterpart to Solidity's `uint128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":7734,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"9268:9:28","nodeType":"FunctionDefinition","parameters":{"id":7710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7709,"mutability":"mutable","name":"value","nameLocation":"9286:5:28","nodeType":"VariableDeclaration","scope":7734,"src":"9278:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7708,"name":"uint256","nodeType":"ElementaryTypeName","src":"9278:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9277:15:28"},"returnParameters":{"id":7713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7734,"src":"9316:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":7711,"name":"uint128","nodeType":"ElementaryTypeName","src":"9316:7:28","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9315:9:28"},"scope":9014,"src":"9259:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7761,"nodeType":"Block","src":"9834:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7742,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7737,"src":"9848:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9861:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":7744,"name":"uint120","nodeType":"ElementaryTypeName","src":"9861:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"}],"id":7743,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9856:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9856:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint120","typeString":"type(uint120)"}},"id":7747,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9870:3:28","memberName":"max","nodeType":"MemberAccess","src":"9856:17:28","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"src":"9848:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7755,"nodeType":"IfStatement","src":"9844:105:28","trueBody":{"id":7754,"nodeType":"Block","src":"9875:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":7750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9927:3:28","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":7751,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7737,"src":"9932:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7749,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"9896:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9896:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7753,"nodeType":"RevertStatement","src":"9889:49:28"}]}},{"expression":{"arguments":[{"id":7758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7737,"src":"9973:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9965:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":7756,"name":"uint120","nodeType":"ElementaryTypeName","src":"9965:7:28","typeDescriptions":{}}},"id":7759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9965:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"functionReturnParameters":7741,"id":7760,"nodeType":"Return","src":"9958:21:28"}]},"documentation":{"id":7735,"nodeType":"StructuredDocumentation","src":"9483:280:28","text":" @dev Returns the downcasted uint120 from uint256, reverting on\n overflow (when the input is greater than largest uint120).\n Counterpart to Solidity's `uint120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":7762,"implemented":true,"kind":"function","modifiers":[],"name":"toUint120","nameLocation":"9777:9:28","nodeType":"FunctionDefinition","parameters":{"id":7738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7737,"mutability":"mutable","name":"value","nameLocation":"9795:5:28","nodeType":"VariableDeclaration","scope":7762,"src":"9787:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7736,"name":"uint256","nodeType":"ElementaryTypeName","src":"9787:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9786:15:28"},"returnParameters":{"id":7741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7762,"src":"9825:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":7739,"name":"uint120","nodeType":"ElementaryTypeName","src":"9825:7:28","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"9824:9:28"},"scope":9014,"src":"9768:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7789,"nodeType":"Block","src":"10343:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7765,"src":"10357:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10370:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":7772,"name":"uint112","nodeType":"ElementaryTypeName","src":"10370:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"}],"id":7771,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10365:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10365:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint112","typeString":"type(uint112)"}},"id":7775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10379:3:28","memberName":"max","nodeType":"MemberAccess","src":"10365:17:28","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"10357:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7783,"nodeType":"IfStatement","src":"10353:105:28","trueBody":{"id":7782,"nodeType":"Block","src":"10384:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":7778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10436:3:28","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":7779,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7765,"src":"10441:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7777,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"10405:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10405:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7781,"nodeType":"RevertStatement","src":"10398:49:28"}]}},{"expression":{"arguments":[{"id":7786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7765,"src":"10482:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":7784,"name":"uint112","nodeType":"ElementaryTypeName","src":"10474:7:28","typeDescriptions":{}}},"id":7787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10474:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"functionReturnParameters":7769,"id":7788,"nodeType":"Return","src":"10467:21:28"}]},"documentation":{"id":7763,"nodeType":"StructuredDocumentation","src":"9992:280:28","text":" @dev Returns the downcasted uint112 from uint256, reverting on\n overflow (when the input is greater than largest uint112).\n Counterpart to Solidity's `uint112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":7790,"implemented":true,"kind":"function","modifiers":[],"name":"toUint112","nameLocation":"10286:9:28","nodeType":"FunctionDefinition","parameters":{"id":7766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7765,"mutability":"mutable","name":"value","nameLocation":"10304:5:28","nodeType":"VariableDeclaration","scope":7790,"src":"10296:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7764,"name":"uint256","nodeType":"ElementaryTypeName","src":"10296:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10295:15:28"},"returnParameters":{"id":7769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7768,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7790,"src":"10334:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":7767,"name":"uint112","nodeType":"ElementaryTypeName","src":"10334:7:28","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"10333:9:28"},"scope":9014,"src":"10277:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7817,"nodeType":"Block","src":"10852:152:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7798,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7793,"src":"10866:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10879:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":7800,"name":"uint104","nodeType":"ElementaryTypeName","src":"10879:7:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"}],"id":7799,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10874:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10874:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint104","typeString":"type(uint104)"}},"id":7803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10888:3:28","memberName":"max","nodeType":"MemberAccess","src":"10874:17:28","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"src":"10866:25:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7811,"nodeType":"IfStatement","src":"10862:105:28","trueBody":{"id":7810,"nodeType":"Block","src":"10893:74:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":7806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10945:3:28","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":7807,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7793,"src":"10950:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7805,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"10914:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10914:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7809,"nodeType":"RevertStatement","src":"10907:49:28"}]}},{"expression":{"arguments":[{"id":7814,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7793,"src":"10991:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10983:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":7812,"name":"uint104","nodeType":"ElementaryTypeName","src":"10983:7:28","typeDescriptions":{}}},"id":7815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10983:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"functionReturnParameters":7797,"id":7816,"nodeType":"Return","src":"10976:21:28"}]},"documentation":{"id":7791,"nodeType":"StructuredDocumentation","src":"10501:280:28","text":" @dev Returns the downcasted uint104 from uint256, reverting on\n overflow (when the input is greater than largest uint104).\n Counterpart to Solidity's `uint104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":7818,"implemented":true,"kind":"function","modifiers":[],"name":"toUint104","nameLocation":"10795:9:28","nodeType":"FunctionDefinition","parameters":{"id":7794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7793,"mutability":"mutable","name":"value","nameLocation":"10813:5:28","nodeType":"VariableDeclaration","scope":7818,"src":"10805:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7792,"name":"uint256","nodeType":"ElementaryTypeName","src":"10805:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10804:15:28"},"returnParameters":{"id":7797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7818,"src":"10843:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"},"typeName":{"id":7795,"name":"uint104","nodeType":"ElementaryTypeName","src":"10843:7:28","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"visibility":"internal"}],"src":"10842:9:28"},"scope":9014,"src":"10786:218:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7845,"nodeType":"Block","src":"11355:149:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7821,"src":"11369:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11382:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":7828,"name":"uint96","nodeType":"ElementaryTypeName","src":"11382:6:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":7827,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11377:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11377:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":7831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11390:3:28","memberName":"max","nodeType":"MemberAccess","src":"11377:16:28","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11369:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7839,"nodeType":"IfStatement","src":"11365:103:28","trueBody":{"id":7838,"nodeType":"Block","src":"11395:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":7834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11447:2:28","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":7835,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7821,"src":"11451:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7833,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"11416:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11416:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7837,"nodeType":"RevertStatement","src":"11409:48:28"}]}},{"expression":{"arguments":[{"id":7842,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7821,"src":"11491:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11484:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":7840,"name":"uint96","nodeType":"ElementaryTypeName","src":"11484:6:28","typeDescriptions":{}}},"id":7843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11484:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":7825,"id":7844,"nodeType":"Return","src":"11477:20:28"}]},"documentation":{"id":7819,"nodeType":"StructuredDocumentation","src":"11010:276:28","text":" @dev Returns the downcasted uint96 from uint256, reverting on\n overflow (when the input is greater than largest uint96).\n Counterpart to Solidity's `uint96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":7846,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"11300:8:28","nodeType":"FunctionDefinition","parameters":{"id":7822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7821,"mutability":"mutable","name":"value","nameLocation":"11317:5:28","nodeType":"VariableDeclaration","scope":7846,"src":"11309:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7820,"name":"uint256","nodeType":"ElementaryTypeName","src":"11309:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11308:15:28"},"returnParameters":{"id":7825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7824,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7846,"src":"11347:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7823,"name":"uint96","nodeType":"ElementaryTypeName","src":"11347:6:28","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11346:8:28"},"scope":9014,"src":"11291:213:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7873,"nodeType":"Block","src":"11855:149:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7854,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7849,"src":"11869:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11882:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":7856,"name":"uint88","nodeType":"ElementaryTypeName","src":"11882:6:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":7855,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11877:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11877:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":7859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11890:3:28","memberName":"max","nodeType":"MemberAccess","src":"11877:16:28","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"src":"11869:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7867,"nodeType":"IfStatement","src":"11865:103:28","trueBody":{"id":7866,"nodeType":"Block","src":"11895:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":7862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11947:2:28","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":7863,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7849,"src":"11951:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7861,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"11916:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11916:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7865,"nodeType":"RevertStatement","src":"11909:48:28"}]}},{"expression":{"arguments":[{"id":7870,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7849,"src":"11991:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7869,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11984:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":7868,"name":"uint88","nodeType":"ElementaryTypeName","src":"11984:6:28","typeDescriptions":{}}},"id":7871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11984:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"functionReturnParameters":7853,"id":7872,"nodeType":"Return","src":"11977:20:28"}]},"documentation":{"id":7847,"nodeType":"StructuredDocumentation","src":"11510:276:28","text":" @dev Returns the downcasted uint88 from uint256, reverting on\n overflow (when the input is greater than largest uint88).\n Counterpart to Solidity's `uint88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":7874,"implemented":true,"kind":"function","modifiers":[],"name":"toUint88","nameLocation":"11800:8:28","nodeType":"FunctionDefinition","parameters":{"id":7850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7849,"mutability":"mutable","name":"value","nameLocation":"11817:5:28","nodeType":"VariableDeclaration","scope":7874,"src":"11809:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7848,"name":"uint256","nodeType":"ElementaryTypeName","src":"11809:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11808:15:28"},"returnParameters":{"id":7853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7874,"src":"11847:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"},"typeName":{"id":7851,"name":"uint88","nodeType":"ElementaryTypeName","src":"11847:6:28","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"}],"src":"11846:8:28"},"scope":9014,"src":"11791:213:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7901,"nodeType":"Block","src":"12355:149:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7882,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7877,"src":"12369:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12382:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":7884,"name":"uint80","nodeType":"ElementaryTypeName","src":"12382:6:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"}],"id":7883,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12377:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12377:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint80","typeString":"type(uint80)"}},"id":7887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12390:3:28","memberName":"max","nodeType":"MemberAccess","src":"12377:16:28","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"src":"12369:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7895,"nodeType":"IfStatement","src":"12365:103:28","trueBody":{"id":7894,"nodeType":"Block","src":"12395:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":7890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12447:2:28","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":7891,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7877,"src":"12451:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7889,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"12416:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12416:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7893,"nodeType":"RevertStatement","src":"12409:48:28"}]}},{"expression":{"arguments":[{"id":7898,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7877,"src":"12491:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12484:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":7896,"name":"uint80","nodeType":"ElementaryTypeName","src":"12484:6:28","typeDescriptions":{}}},"id":7899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12484:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"functionReturnParameters":7881,"id":7900,"nodeType":"Return","src":"12477:20:28"}]},"documentation":{"id":7875,"nodeType":"StructuredDocumentation","src":"12010:276:28","text":" @dev Returns the downcasted uint80 from uint256, reverting on\n overflow (when the input is greater than largest uint80).\n Counterpart to Solidity's `uint80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":7902,"implemented":true,"kind":"function","modifiers":[],"name":"toUint80","nameLocation":"12300:8:28","nodeType":"FunctionDefinition","parameters":{"id":7878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7877,"mutability":"mutable","name":"value","nameLocation":"12317:5:28","nodeType":"VariableDeclaration","scope":7902,"src":"12309:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7876,"name":"uint256","nodeType":"ElementaryTypeName","src":"12309:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12308:15:28"},"returnParameters":{"id":7881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7902,"src":"12347:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":7879,"name":"uint80","nodeType":"ElementaryTypeName","src":"12347:6:28","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"12346:8:28"},"scope":9014,"src":"12291:213:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7929,"nodeType":"Block","src":"12855:149:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7910,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7905,"src":"12869:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12882:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":7912,"name":"uint72","nodeType":"ElementaryTypeName","src":"12882:6:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"}],"id":7911,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12877:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12877:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint72","typeString":"type(uint72)"}},"id":7915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12890:3:28","memberName":"max","nodeType":"MemberAccess","src":"12877:16:28","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"src":"12869:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7923,"nodeType":"IfStatement","src":"12865:103:28","trueBody":{"id":7922,"nodeType":"Block","src":"12895:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":7918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12947:2:28","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":7919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7905,"src":"12951:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7917,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"12916:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12916:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7921,"nodeType":"RevertStatement","src":"12909:48:28"}]}},{"expression":{"arguments":[{"id":7926,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7905,"src":"12991:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7925,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12984:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":7924,"name":"uint72","nodeType":"ElementaryTypeName","src":"12984:6:28","typeDescriptions":{}}},"id":7927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12984:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"functionReturnParameters":7909,"id":7928,"nodeType":"Return","src":"12977:20:28"}]},"documentation":{"id":7903,"nodeType":"StructuredDocumentation","src":"12510:276:28","text":" @dev Returns the downcasted uint72 from uint256, reverting on\n overflow (when the input is greater than largest uint72).\n Counterpart to Solidity's `uint72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":7930,"implemented":true,"kind":"function","modifiers":[],"name":"toUint72","nameLocation":"12800:8:28","nodeType":"FunctionDefinition","parameters":{"id":7906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7905,"mutability":"mutable","name":"value","nameLocation":"12817:5:28","nodeType":"VariableDeclaration","scope":7930,"src":"12809:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7904,"name":"uint256","nodeType":"ElementaryTypeName","src":"12809:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12808:15:28"},"returnParameters":{"id":7909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7930,"src":"12847:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":7907,"name":"uint72","nodeType":"ElementaryTypeName","src":"12847:6:28","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"12846:8:28"},"scope":9014,"src":"12791:213:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7957,"nodeType":"Block","src":"13355:149:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7933,"src":"13369:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7941,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13382:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":7940,"name":"uint64","nodeType":"ElementaryTypeName","src":"13382:6:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":7939,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13377:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13377:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":7943,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13390:3:28","memberName":"max","nodeType":"MemberAccess","src":"13377:16:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13369:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7951,"nodeType":"IfStatement","src":"13365:103:28","trueBody":{"id":7950,"nodeType":"Block","src":"13395:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":7946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13447:2:28","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":7947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7933,"src":"13451:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7945,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"13416:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7949,"nodeType":"RevertStatement","src":"13409:48:28"}]}},{"expression":{"arguments":[{"id":7954,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7933,"src":"13491:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7953,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13484:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":7952,"name":"uint64","nodeType":"ElementaryTypeName","src":"13484:6:28","typeDescriptions":{}}},"id":7955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13484:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":7937,"id":7956,"nodeType":"Return","src":"13477:20:28"}]},"documentation":{"id":7931,"nodeType":"StructuredDocumentation","src":"13010:276:28","text":" @dev Returns the downcasted uint64 from uint256, reverting on\n overflow (when the input is greater than largest uint64).\n Counterpart to Solidity's `uint64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":7958,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13300:8:28","nodeType":"FunctionDefinition","parameters":{"id":7934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7933,"mutability":"mutable","name":"value","nameLocation":"13317:5:28","nodeType":"VariableDeclaration","scope":7958,"src":"13309:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7932,"name":"uint256","nodeType":"ElementaryTypeName","src":"13309:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13308:15:28"},"returnParameters":{"id":7937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7958,"src":"13347:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":7935,"name":"uint64","nodeType":"ElementaryTypeName","src":"13347:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13346:8:28"},"scope":9014,"src":"13291:213:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7985,"nodeType":"Block","src":"13855:149:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7966,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7961,"src":"13869:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13882:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":7968,"name":"uint56","nodeType":"ElementaryTypeName","src":"13882:6:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":7967,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13877:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13877:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":7971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13890:3:28","memberName":"max","nodeType":"MemberAccess","src":"13877:16:28","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"13869:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7979,"nodeType":"IfStatement","src":"13865:103:28","trueBody":{"id":7978,"nodeType":"Block","src":"13895:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":7974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13947:2:28","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":7975,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7961,"src":"13951:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7973,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"13916:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":7976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13916:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":7977,"nodeType":"RevertStatement","src":"13909:48:28"}]}},{"expression":{"arguments":[{"id":7982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7961,"src":"13991:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13984:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":7980,"name":"uint56","nodeType":"ElementaryTypeName","src":"13984:6:28","typeDescriptions":{}}},"id":7983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13984:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"functionReturnParameters":7965,"id":7984,"nodeType":"Return","src":"13977:20:28"}]},"documentation":{"id":7959,"nodeType":"StructuredDocumentation","src":"13510:276:28","text":" @dev Returns the downcasted uint56 from uint256, reverting on\n overflow (when the input is greater than largest uint56).\n Counterpart to Solidity's `uint56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":7986,"implemented":true,"kind":"function","modifiers":[],"name":"toUint56","nameLocation":"13800:8:28","nodeType":"FunctionDefinition","parameters":{"id":7962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7961,"mutability":"mutable","name":"value","nameLocation":"13817:5:28","nodeType":"VariableDeclaration","scope":7986,"src":"13809:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7960,"name":"uint256","nodeType":"ElementaryTypeName","src":"13809:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13808:15:28"},"returnParameters":{"id":7965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7964,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7986,"src":"13847:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"},"typeName":{"id":7963,"name":"uint56","nodeType":"ElementaryTypeName","src":"13847:6:28","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"visibility":"internal"}],"src":"13846:8:28"},"scope":9014,"src":"13791:213:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8013,"nodeType":"Block","src":"14355:149:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7994,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7989,"src":"14369:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":7997,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14382:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":7996,"name":"uint48","nodeType":"ElementaryTypeName","src":"14382:6:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":7995,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14377:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":7998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14377:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":7999,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14390:3:28","memberName":"max","nodeType":"MemberAccess","src":"14377:16:28","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"14369:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8007,"nodeType":"IfStatement","src":"14365:103:28","trueBody":{"id":8006,"nodeType":"Block","src":"14395:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":8002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14447:2:28","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":8003,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7989,"src":"14451:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8001,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"14416:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":8004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14416:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8005,"nodeType":"RevertStatement","src":"14409:48:28"}]}},{"expression":{"arguments":[{"id":8010,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7989,"src":"14491:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14484:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":8008,"name":"uint48","nodeType":"ElementaryTypeName","src":"14484:6:28","typeDescriptions":{}}},"id":8011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14484:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":7993,"id":8012,"nodeType":"Return","src":"14477:20:28"}]},"documentation":{"id":7987,"nodeType":"StructuredDocumentation","src":"14010:276:28","text":" @dev Returns the downcasted uint48 from uint256, reverting on\n overflow (when the input is greater than largest uint48).\n Counterpart to Solidity's `uint48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":8014,"implemented":true,"kind":"function","modifiers":[],"name":"toUint48","nameLocation":"14300:8:28","nodeType":"FunctionDefinition","parameters":{"id":7990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7989,"mutability":"mutable","name":"value","nameLocation":"14317:5:28","nodeType":"VariableDeclaration","scope":8014,"src":"14309:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7988,"name":"uint256","nodeType":"ElementaryTypeName","src":"14309:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14308:15:28"},"returnParameters":{"id":7993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7992,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8014,"src":"14347:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":7991,"name":"uint48","nodeType":"ElementaryTypeName","src":"14347:6:28","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14346:8:28"},"scope":9014,"src":"14291:213:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8041,"nodeType":"Block","src":"14855:149:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8022,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8017,"src":"14869:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":8025,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14882:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":8024,"name":"uint40","nodeType":"ElementaryTypeName","src":"14882:6:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":8023,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14877:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":8026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14877:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":8027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14890:3:28","memberName":"max","nodeType":"MemberAccess","src":"14877:16:28","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"14869:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8035,"nodeType":"IfStatement","src":"14865:103:28","trueBody":{"id":8034,"nodeType":"Block","src":"14895:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":8030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14947:2:28","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":8031,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8017,"src":"14951:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8029,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"14916:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":8032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14916:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8033,"nodeType":"RevertStatement","src":"14909:48:28"}]}},{"expression":{"arguments":[{"id":8038,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8017,"src":"14991:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8037,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14984:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":8036,"name":"uint40","nodeType":"ElementaryTypeName","src":"14984:6:28","typeDescriptions":{}}},"id":8039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14984:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"functionReturnParameters":8021,"id":8040,"nodeType":"Return","src":"14977:20:28"}]},"documentation":{"id":8015,"nodeType":"StructuredDocumentation","src":"14510:276:28","text":" @dev Returns the downcasted uint40 from uint256, reverting on\n overflow (when the input is greater than largest uint40).\n Counterpart to Solidity's `uint40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":8042,"implemented":true,"kind":"function","modifiers":[],"name":"toUint40","nameLocation":"14800:8:28","nodeType":"FunctionDefinition","parameters":{"id":8018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8017,"mutability":"mutable","name":"value","nameLocation":"14817:5:28","nodeType":"VariableDeclaration","scope":8042,"src":"14809:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8016,"name":"uint256","nodeType":"ElementaryTypeName","src":"14809:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14808:15:28"},"returnParameters":{"id":8021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8020,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8042,"src":"14847:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":8019,"name":"uint40","nodeType":"ElementaryTypeName","src":"14847:6:28","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"}],"src":"14846:8:28"},"scope":9014,"src":"14791:213:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8069,"nodeType":"Block","src":"15355:149:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8050,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8045,"src":"15369:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":8053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15382:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":8052,"name":"uint32","nodeType":"ElementaryTypeName","src":"15382:6:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":8051,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15377:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":8054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15377:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":8055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15390:3:28","memberName":"max","nodeType":"MemberAccess","src":"15377:16:28","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"15369:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8063,"nodeType":"IfStatement","src":"15365:103:28","trueBody":{"id":8062,"nodeType":"Block","src":"15395:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":8058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15447:2:28","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":8059,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8045,"src":"15451:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8057,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"15416:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":8060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15416:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8061,"nodeType":"RevertStatement","src":"15409:48:28"}]}},{"expression":{"arguments":[{"id":8066,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8045,"src":"15491:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15484:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":8064,"name":"uint32","nodeType":"ElementaryTypeName","src":"15484:6:28","typeDescriptions":{}}},"id":8067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15484:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":8049,"id":8068,"nodeType":"Return","src":"15477:20:28"}]},"documentation":{"id":8043,"nodeType":"StructuredDocumentation","src":"15010:276:28","text":" @dev Returns the downcasted uint32 from uint256, reverting on\n overflow (when the input is greater than largest uint32).\n Counterpart to Solidity's `uint32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":8070,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"15300:8:28","nodeType":"FunctionDefinition","parameters":{"id":8046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8045,"mutability":"mutable","name":"value","nameLocation":"15317:5:28","nodeType":"VariableDeclaration","scope":8070,"src":"15309:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8044,"name":"uint256","nodeType":"ElementaryTypeName","src":"15309:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15308:15:28"},"returnParameters":{"id":8049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8048,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8070,"src":"15347:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":8047,"name":"uint32","nodeType":"ElementaryTypeName","src":"15347:6:28","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15346:8:28"},"scope":9014,"src":"15291:213:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8097,"nodeType":"Block","src":"15855:149:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8078,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8073,"src":"15869:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":8081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15882:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":8080,"name":"uint24","nodeType":"ElementaryTypeName","src":"15882:6:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"}],"id":8079,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15877:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":8082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15877:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint24","typeString":"type(uint24)"}},"id":8083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15890:3:28","memberName":"max","nodeType":"MemberAccess","src":"15877:16:28","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"15869:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8091,"nodeType":"IfStatement","src":"15865:103:28","trueBody":{"id":8090,"nodeType":"Block","src":"15895:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":8086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15947:2:28","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":8087,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8073,"src":"15951:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8085,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"15916:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":8088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15916:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8089,"nodeType":"RevertStatement","src":"15909:48:28"}]}},{"expression":{"arguments":[{"id":8094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8073,"src":"15991:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8093,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15984:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":8092,"name":"uint24","nodeType":"ElementaryTypeName","src":"15984:6:28","typeDescriptions":{}}},"id":8095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15984:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":8077,"id":8096,"nodeType":"Return","src":"15977:20:28"}]},"documentation":{"id":8071,"nodeType":"StructuredDocumentation","src":"15510:276:28","text":" @dev Returns the downcasted uint24 from uint256, reverting on\n overflow (when the input is greater than largest uint24).\n Counterpart to Solidity's `uint24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":8098,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nameLocation":"15800:8:28","nodeType":"FunctionDefinition","parameters":{"id":8074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8073,"mutability":"mutable","name":"value","nameLocation":"15817:5:28","nodeType":"VariableDeclaration","scope":8098,"src":"15809:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8072,"name":"uint256","nodeType":"ElementaryTypeName","src":"15809:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15808:15:28"},"returnParameters":{"id":8077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8076,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8098,"src":"15847:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":8075,"name":"uint24","nodeType":"ElementaryTypeName","src":"15847:6:28","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"15846:8:28"},"scope":9014,"src":"15791:213:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8125,"nodeType":"Block","src":"16355:149:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8106,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8101,"src":"16369:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":8109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16382:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":8108,"name":"uint16","nodeType":"ElementaryTypeName","src":"16382:6:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":8107,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16377:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":8110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16377:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":8111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16390:3:28","memberName":"max","nodeType":"MemberAccess","src":"16377:16:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"16369:24:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8119,"nodeType":"IfStatement","src":"16365:103:28","trueBody":{"id":8118,"nodeType":"Block","src":"16395:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":8114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16447:2:28","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":8115,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8101,"src":"16451:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8113,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"16416:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":8116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16416:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8117,"nodeType":"RevertStatement","src":"16409:48:28"}]}},{"expression":{"arguments":[{"id":8122,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8101,"src":"16491:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16484:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":8120,"name":"uint16","nodeType":"ElementaryTypeName","src":"16484:6:28","typeDescriptions":{}}},"id":8123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16484:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":8105,"id":8124,"nodeType":"Return","src":"16477:20:28"}]},"documentation":{"id":8099,"nodeType":"StructuredDocumentation","src":"16010:276:28","text":" @dev Returns the downcasted uint16 from uint256, reverting on\n overflow (when the input is greater than largest uint16).\n Counterpart to Solidity's `uint16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":8126,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"16300:8:28","nodeType":"FunctionDefinition","parameters":{"id":8102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8101,"mutability":"mutable","name":"value","nameLocation":"16317:5:28","nodeType":"VariableDeclaration","scope":8126,"src":"16309:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8100,"name":"uint256","nodeType":"ElementaryTypeName","src":"16309:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16308:15:28"},"returnParameters":{"id":8105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8126,"src":"16347:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":8103,"name":"uint16","nodeType":"ElementaryTypeName","src":"16347:6:28","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"16346:8:28"},"scope":9014,"src":"16291:213:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8153,"nodeType":"Block","src":"16849:146:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8134,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8129,"src":"16863:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":8137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16876:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":8136,"name":"uint8","nodeType":"ElementaryTypeName","src":"16876:5:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":8135,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16871:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":8138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16871:11:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":8139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16883:3:28","memberName":"max","nodeType":"MemberAccess","src":"16871:15:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"16863:23:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8147,"nodeType":"IfStatement","src":"16859:101:28","trueBody":{"id":8146,"nodeType":"Block","src":"16888:72:28","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":8142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16940:1:28","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":8143,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8129,"src":"16943:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8141,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7269,"src":"16909:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":8144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16909:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8145,"nodeType":"RevertStatement","src":"16902:47:28"}]}},{"expression":{"arguments":[{"id":8150,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8129,"src":"16982:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16976:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":8148,"name":"uint8","nodeType":"ElementaryTypeName","src":"16976:5:28","typeDescriptions":{}}},"id":8151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16976:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":8133,"id":8152,"nodeType":"Return","src":"16969:19:28"}]},"documentation":{"id":8127,"nodeType":"StructuredDocumentation","src":"16510:272:28","text":" @dev Returns the downcasted uint8 from uint256, reverting on\n overflow (when the input is greater than largest uint8).\n Counterpart to Solidity's `uint8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":8154,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"16796:7:28","nodeType":"FunctionDefinition","parameters":{"id":8130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8129,"mutability":"mutable","name":"value","nameLocation":"16812:5:28","nodeType":"VariableDeclaration","scope":8154,"src":"16804:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8128,"name":"uint256","nodeType":"ElementaryTypeName","src":"16804:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16803:15:28"},"returnParameters":{"id":8133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8154,"src":"16842:5:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":8131,"name":"uint8","nodeType":"ElementaryTypeName","src":"16842:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16841:7:28"},"scope":9014,"src":"16787:208:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8176,"nodeType":"Block","src":"17231:128:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8162,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8157,"src":"17245:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":8163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17253:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17245:9:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8170,"nodeType":"IfStatement","src":"17241:81:28","trueBody":{"id":8169,"nodeType":"Block","src":"17256:66:28","statements":[{"errorCall":{"arguments":[{"id":8166,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8157,"src":"17305:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8165,"name":"SafeCastOverflowedIntToUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7274,"src":"17277:27:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_int256_$returns$_t_error_$","typeString":"function (int256) pure returns (error)"}},"id":8167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17277:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8168,"nodeType":"RevertStatement","src":"17270:41:28"}]}},{"expression":{"arguments":[{"id":8173,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8157,"src":"17346:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17338:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":8171,"name":"uint256","nodeType":"ElementaryTypeName","src":"17338:7:28","typeDescriptions":{}}},"id":8174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17338:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8161,"id":8175,"nodeType":"Return","src":"17331:21:28"}]},"documentation":{"id":8155,"nodeType":"StructuredDocumentation","src":"17001:160:28","text":" @dev Converts a signed int256 into an unsigned uint256.\n Requirements:\n - input must be greater than or equal to 0."},"id":8177,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"17175:9:28","nodeType":"FunctionDefinition","parameters":{"id":8158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8157,"mutability":"mutable","name":"value","nameLocation":"17192:5:28","nodeType":"VariableDeclaration","scope":8177,"src":"17185:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8156,"name":"int256","nodeType":"ElementaryTypeName","src":"17185:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17184:14:28"},"returnParameters":{"id":8161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8177,"src":"17222:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8159,"name":"uint256","nodeType":"ElementaryTypeName","src":"17222:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17221:9:28"},"scope":9014,"src":"17166:193:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8202,"nodeType":"Block","src":"17756:150:28","statements":[{"expression":{"id":8190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8185,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8183,"src":"17766:10:28","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8188,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8180,"src":"17786:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17779:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":8186,"name":"int248","nodeType":"ElementaryTypeName","src":"17779:6:28","typeDescriptions":{}}},"id":8189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17779:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"17766:26:28","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"id":8191,"nodeType":"ExpressionStatement","src":"17766:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8192,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8183,"src":"17806:10:28","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8193,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8180,"src":"17820:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17806:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8201,"nodeType":"IfStatement","src":"17802:98:28","trueBody":{"id":8200,"nodeType":"Block","src":"17827:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":8196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17878:3:28","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":8197,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8180,"src":"17883:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8195,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"17848:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17848:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8199,"nodeType":"RevertStatement","src":"17841:48:28"}]}}]},"documentation":{"id":8178,"nodeType":"StructuredDocumentation","src":"17365:312:28","text":" @dev Returns the downcasted int248 from int256, reverting on\n overflow (when the input is less than smallest int248 or\n greater than largest int248).\n Counterpart to Solidity's `int248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":8203,"implemented":true,"kind":"function","modifiers":[],"name":"toInt248","nameLocation":"17691:8:28","nodeType":"FunctionDefinition","parameters":{"id":8181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8180,"mutability":"mutable","name":"value","nameLocation":"17707:5:28","nodeType":"VariableDeclaration","scope":8203,"src":"17700:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8179,"name":"int256","nodeType":"ElementaryTypeName","src":"17700:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17699:14:28"},"returnParameters":{"id":8184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8183,"mutability":"mutable","name":"downcasted","nameLocation":"17744:10:28","nodeType":"VariableDeclaration","scope":8203,"src":"17737:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"},"typeName":{"id":8182,"name":"int248","nodeType":"ElementaryTypeName","src":"17737:6:28","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"visibility":"internal"}],"src":"17736:19:28"},"scope":9014,"src":"17682:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8228,"nodeType":"Block","src":"18303:150:28","statements":[{"expression":{"id":8216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8211,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8209,"src":"18313:10:28","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8206,"src":"18333:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18326:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":8212,"name":"int240","nodeType":"ElementaryTypeName","src":"18326:6:28","typeDescriptions":{}}},"id":8215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18326:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18313:26:28","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"id":8217,"nodeType":"ExpressionStatement","src":"18313:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8218,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8209,"src":"18353:10:28","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8219,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8206,"src":"18367:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18353:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8227,"nodeType":"IfStatement","src":"18349:98:28","trueBody":{"id":8226,"nodeType":"Block","src":"18374:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":8222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18425:3:28","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":8223,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8206,"src":"18430:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8221,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"18395:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18395:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8225,"nodeType":"RevertStatement","src":"18388:48:28"}]}}]},"documentation":{"id":8204,"nodeType":"StructuredDocumentation","src":"17912:312:28","text":" @dev Returns the downcasted int240 from int256, reverting on\n overflow (when the input is less than smallest int240 or\n greater than largest int240).\n Counterpart to Solidity's `int240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":8229,"implemented":true,"kind":"function","modifiers":[],"name":"toInt240","nameLocation":"18238:8:28","nodeType":"FunctionDefinition","parameters":{"id":8207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8206,"mutability":"mutable","name":"value","nameLocation":"18254:5:28","nodeType":"VariableDeclaration","scope":8229,"src":"18247:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8205,"name":"int256","nodeType":"ElementaryTypeName","src":"18247:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18246:14:28"},"returnParameters":{"id":8210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8209,"mutability":"mutable","name":"downcasted","nameLocation":"18291:10:28","nodeType":"VariableDeclaration","scope":8229,"src":"18284:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"},"typeName":{"id":8208,"name":"int240","nodeType":"ElementaryTypeName","src":"18284:6:28","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"visibility":"internal"}],"src":"18283:19:28"},"scope":9014,"src":"18229:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8254,"nodeType":"Block","src":"18850:150:28","statements":[{"expression":{"id":8242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8237,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8235,"src":"18860:10:28","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8240,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8232,"src":"18880:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18873:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":8238,"name":"int232","nodeType":"ElementaryTypeName","src":"18873:6:28","typeDescriptions":{}}},"id":8241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18873:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"18860:26:28","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"id":8243,"nodeType":"ExpressionStatement","src":"18860:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8244,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8235,"src":"18900:10:28","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8245,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8232,"src":"18914:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18900:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8253,"nodeType":"IfStatement","src":"18896:98:28","trueBody":{"id":8252,"nodeType":"Block","src":"18921:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":8248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18972:3:28","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":8249,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8232,"src":"18977:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8247,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"18942:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18942:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8251,"nodeType":"RevertStatement","src":"18935:48:28"}]}}]},"documentation":{"id":8230,"nodeType":"StructuredDocumentation","src":"18459:312:28","text":" @dev Returns the downcasted int232 from int256, reverting on\n overflow (when the input is less than smallest int232 or\n greater than largest int232).\n Counterpart to Solidity's `int232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":8255,"implemented":true,"kind":"function","modifiers":[],"name":"toInt232","nameLocation":"18785:8:28","nodeType":"FunctionDefinition","parameters":{"id":8233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8232,"mutability":"mutable","name":"value","nameLocation":"18801:5:28","nodeType":"VariableDeclaration","scope":8255,"src":"18794:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8231,"name":"int256","nodeType":"ElementaryTypeName","src":"18794:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18793:14:28"},"returnParameters":{"id":8236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8235,"mutability":"mutable","name":"downcasted","nameLocation":"18838:10:28","nodeType":"VariableDeclaration","scope":8255,"src":"18831:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"},"typeName":{"id":8234,"name":"int232","nodeType":"ElementaryTypeName","src":"18831:6:28","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"visibility":"internal"}],"src":"18830:19:28"},"scope":9014,"src":"18776:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8280,"nodeType":"Block","src":"19397:150:28","statements":[{"expression":{"id":8268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8263,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8261,"src":"19407:10:28","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8266,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8258,"src":"19427:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19420:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":8264,"name":"int224","nodeType":"ElementaryTypeName","src":"19420:6:28","typeDescriptions":{}}},"id":8267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19420:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"19407:26:28","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"id":8269,"nodeType":"ExpressionStatement","src":"19407:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8270,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8261,"src":"19447:10:28","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8271,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8258,"src":"19461:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19447:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8279,"nodeType":"IfStatement","src":"19443:98:28","trueBody":{"id":8278,"nodeType":"Block","src":"19468:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":8274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19519:3:28","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":8275,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8258,"src":"19524:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8273,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"19489:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19489:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8277,"nodeType":"RevertStatement","src":"19482:48:28"}]}}]},"documentation":{"id":8256,"nodeType":"StructuredDocumentation","src":"19006:312:28","text":" @dev Returns the downcasted int224 from int256, reverting on\n overflow (when the input is less than smallest int224 or\n greater than largest int224).\n Counterpart to Solidity's `int224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":8281,"implemented":true,"kind":"function","modifiers":[],"name":"toInt224","nameLocation":"19332:8:28","nodeType":"FunctionDefinition","parameters":{"id":8259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8258,"mutability":"mutable","name":"value","nameLocation":"19348:5:28","nodeType":"VariableDeclaration","scope":8281,"src":"19341:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8257,"name":"int256","nodeType":"ElementaryTypeName","src":"19341:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19340:14:28"},"returnParameters":{"id":8262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8261,"mutability":"mutable","name":"downcasted","nameLocation":"19385:10:28","nodeType":"VariableDeclaration","scope":8281,"src":"19378:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"},"typeName":{"id":8260,"name":"int224","nodeType":"ElementaryTypeName","src":"19378:6:28","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"visibility":"internal"}],"src":"19377:19:28"},"scope":9014,"src":"19323:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8306,"nodeType":"Block","src":"19944:150:28","statements":[{"expression":{"id":8294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8289,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8287,"src":"19954:10:28","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8292,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8284,"src":"19974:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19967:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":8290,"name":"int216","nodeType":"ElementaryTypeName","src":"19967:6:28","typeDescriptions":{}}},"id":8293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19967:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"19954:26:28","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"id":8295,"nodeType":"ExpressionStatement","src":"19954:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8296,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8287,"src":"19994:10:28","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8297,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8284,"src":"20008:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19994:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8305,"nodeType":"IfStatement","src":"19990:98:28","trueBody":{"id":8304,"nodeType":"Block","src":"20015:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":8300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20066:3:28","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":8301,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8284,"src":"20071:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8299,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"20036:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20036:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8303,"nodeType":"RevertStatement","src":"20029:48:28"}]}}]},"documentation":{"id":8282,"nodeType":"StructuredDocumentation","src":"19553:312:28","text":" @dev Returns the downcasted int216 from int256, reverting on\n overflow (when the input is less than smallest int216 or\n greater than largest int216).\n Counterpart to Solidity's `int216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":8307,"implemented":true,"kind":"function","modifiers":[],"name":"toInt216","nameLocation":"19879:8:28","nodeType":"FunctionDefinition","parameters":{"id":8285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8284,"mutability":"mutable","name":"value","nameLocation":"19895:5:28","nodeType":"VariableDeclaration","scope":8307,"src":"19888:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8283,"name":"int256","nodeType":"ElementaryTypeName","src":"19888:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19887:14:28"},"returnParameters":{"id":8288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8287,"mutability":"mutable","name":"downcasted","nameLocation":"19932:10:28","nodeType":"VariableDeclaration","scope":8307,"src":"19925:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"},"typeName":{"id":8286,"name":"int216","nodeType":"ElementaryTypeName","src":"19925:6:28","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"visibility":"internal"}],"src":"19924:19:28"},"scope":9014,"src":"19870:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8332,"nodeType":"Block","src":"20491:150:28","statements":[{"expression":{"id":8320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8315,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8313,"src":"20501:10:28","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8318,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8310,"src":"20521:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20514:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":8316,"name":"int208","nodeType":"ElementaryTypeName","src":"20514:6:28","typeDescriptions":{}}},"id":8319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20514:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"20501:26:28","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"id":8321,"nodeType":"ExpressionStatement","src":"20501:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8322,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8313,"src":"20541:10:28","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8310,"src":"20555:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20541:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8331,"nodeType":"IfStatement","src":"20537:98:28","trueBody":{"id":8330,"nodeType":"Block","src":"20562:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":8326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20613:3:28","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":8327,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8310,"src":"20618:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8325,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"20583:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20583:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8329,"nodeType":"RevertStatement","src":"20576:48:28"}]}}]},"documentation":{"id":8308,"nodeType":"StructuredDocumentation","src":"20100:312:28","text":" @dev Returns the downcasted int208 from int256, reverting on\n overflow (when the input is less than smallest int208 or\n greater than largest int208).\n Counterpart to Solidity's `int208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":8333,"implemented":true,"kind":"function","modifiers":[],"name":"toInt208","nameLocation":"20426:8:28","nodeType":"FunctionDefinition","parameters":{"id":8311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8310,"mutability":"mutable","name":"value","nameLocation":"20442:5:28","nodeType":"VariableDeclaration","scope":8333,"src":"20435:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8309,"name":"int256","nodeType":"ElementaryTypeName","src":"20435:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20434:14:28"},"returnParameters":{"id":8314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8313,"mutability":"mutable","name":"downcasted","nameLocation":"20479:10:28","nodeType":"VariableDeclaration","scope":8333,"src":"20472:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"},"typeName":{"id":8312,"name":"int208","nodeType":"ElementaryTypeName","src":"20472:6:28","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"visibility":"internal"}],"src":"20471:19:28"},"scope":9014,"src":"20417:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8358,"nodeType":"Block","src":"21038:150:28","statements":[{"expression":{"id":8346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8341,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8339,"src":"21048:10:28","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8344,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8336,"src":"21068:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8343,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21061:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":8342,"name":"int200","nodeType":"ElementaryTypeName","src":"21061:6:28","typeDescriptions":{}}},"id":8345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21061:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21048:26:28","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"id":8347,"nodeType":"ExpressionStatement","src":"21048:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8348,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8339,"src":"21088:10:28","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8349,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8336,"src":"21102:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21088:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8357,"nodeType":"IfStatement","src":"21084:98:28","trueBody":{"id":8356,"nodeType":"Block","src":"21109:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":8352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21160:3:28","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":8353,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8336,"src":"21165:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8351,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"21130:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21130:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8355,"nodeType":"RevertStatement","src":"21123:48:28"}]}}]},"documentation":{"id":8334,"nodeType":"StructuredDocumentation","src":"20647:312:28","text":" @dev Returns the downcasted int200 from int256, reverting on\n overflow (when the input is less than smallest int200 or\n greater than largest int200).\n Counterpart to Solidity's `int200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":8359,"implemented":true,"kind":"function","modifiers":[],"name":"toInt200","nameLocation":"20973:8:28","nodeType":"FunctionDefinition","parameters":{"id":8337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8336,"mutability":"mutable","name":"value","nameLocation":"20989:5:28","nodeType":"VariableDeclaration","scope":8359,"src":"20982:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8335,"name":"int256","nodeType":"ElementaryTypeName","src":"20982:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20981:14:28"},"returnParameters":{"id":8340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8339,"mutability":"mutable","name":"downcasted","nameLocation":"21026:10:28","nodeType":"VariableDeclaration","scope":8359,"src":"21019:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"},"typeName":{"id":8338,"name":"int200","nodeType":"ElementaryTypeName","src":"21019:6:28","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"visibility":"internal"}],"src":"21018:19:28"},"scope":9014,"src":"20964:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8384,"nodeType":"Block","src":"21585:150:28","statements":[{"expression":{"id":8372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8367,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8365,"src":"21595:10:28","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8370,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8362,"src":"21615:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21608:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":8368,"name":"int192","nodeType":"ElementaryTypeName","src":"21608:6:28","typeDescriptions":{}}},"id":8371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21608:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"21595:26:28","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"id":8373,"nodeType":"ExpressionStatement","src":"21595:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8374,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8365,"src":"21635:10:28","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8375,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8362,"src":"21649:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21635:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8383,"nodeType":"IfStatement","src":"21631:98:28","trueBody":{"id":8382,"nodeType":"Block","src":"21656:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":8378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21707:3:28","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":8379,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8362,"src":"21712:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8377,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"21677:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21677:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8381,"nodeType":"RevertStatement","src":"21670:48:28"}]}}]},"documentation":{"id":8360,"nodeType":"StructuredDocumentation","src":"21194:312:28","text":" @dev Returns the downcasted int192 from int256, reverting on\n overflow (when the input is less than smallest int192 or\n greater than largest int192).\n Counterpart to Solidity's `int192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":8385,"implemented":true,"kind":"function","modifiers":[],"name":"toInt192","nameLocation":"21520:8:28","nodeType":"FunctionDefinition","parameters":{"id":8363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8362,"mutability":"mutable","name":"value","nameLocation":"21536:5:28","nodeType":"VariableDeclaration","scope":8385,"src":"21529:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8361,"name":"int256","nodeType":"ElementaryTypeName","src":"21529:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21528:14:28"},"returnParameters":{"id":8366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8365,"mutability":"mutable","name":"downcasted","nameLocation":"21573:10:28","nodeType":"VariableDeclaration","scope":8385,"src":"21566:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"},"typeName":{"id":8364,"name":"int192","nodeType":"ElementaryTypeName","src":"21566:6:28","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"visibility":"internal"}],"src":"21565:19:28"},"scope":9014,"src":"21511:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8410,"nodeType":"Block","src":"22132:150:28","statements":[{"expression":{"id":8398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8393,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8391,"src":"22142:10:28","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8396,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8388,"src":"22162:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22155:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":8394,"name":"int184","nodeType":"ElementaryTypeName","src":"22155:6:28","typeDescriptions":{}}},"id":8397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22155:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22142:26:28","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"id":8399,"nodeType":"ExpressionStatement","src":"22142:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8400,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8391,"src":"22182:10:28","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8401,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8388,"src":"22196:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22182:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8409,"nodeType":"IfStatement","src":"22178:98:28","trueBody":{"id":8408,"nodeType":"Block","src":"22203:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":8404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22254:3:28","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":8405,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8388,"src":"22259:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8403,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"22224:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22224:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8407,"nodeType":"RevertStatement","src":"22217:48:28"}]}}]},"documentation":{"id":8386,"nodeType":"StructuredDocumentation","src":"21741:312:28","text":" @dev Returns the downcasted int184 from int256, reverting on\n overflow (when the input is less than smallest int184 or\n greater than largest int184).\n Counterpart to Solidity's `int184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":8411,"implemented":true,"kind":"function","modifiers":[],"name":"toInt184","nameLocation":"22067:8:28","nodeType":"FunctionDefinition","parameters":{"id":8389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8388,"mutability":"mutable","name":"value","nameLocation":"22083:5:28","nodeType":"VariableDeclaration","scope":8411,"src":"22076:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8387,"name":"int256","nodeType":"ElementaryTypeName","src":"22076:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22075:14:28"},"returnParameters":{"id":8392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8391,"mutability":"mutable","name":"downcasted","nameLocation":"22120:10:28","nodeType":"VariableDeclaration","scope":8411,"src":"22113:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"},"typeName":{"id":8390,"name":"int184","nodeType":"ElementaryTypeName","src":"22113:6:28","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"visibility":"internal"}],"src":"22112:19:28"},"scope":9014,"src":"22058:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8436,"nodeType":"Block","src":"22679:150:28","statements":[{"expression":{"id":8424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8419,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8417,"src":"22689:10:28","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8414,"src":"22709:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22702:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":8420,"name":"int176","nodeType":"ElementaryTypeName","src":"22702:6:28","typeDescriptions":{}}},"id":8423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22702:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"22689:26:28","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"id":8425,"nodeType":"ExpressionStatement","src":"22689:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8426,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8417,"src":"22729:10:28","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8414,"src":"22743:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22729:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8435,"nodeType":"IfStatement","src":"22725:98:28","trueBody":{"id":8434,"nodeType":"Block","src":"22750:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":8430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22801:3:28","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":8431,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8414,"src":"22806:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8429,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"22771:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22771:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8433,"nodeType":"RevertStatement","src":"22764:48:28"}]}}]},"documentation":{"id":8412,"nodeType":"StructuredDocumentation","src":"22288:312:28","text":" @dev Returns the downcasted int176 from int256, reverting on\n overflow (when the input is less than smallest int176 or\n greater than largest int176).\n Counterpart to Solidity's `int176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":8437,"implemented":true,"kind":"function","modifiers":[],"name":"toInt176","nameLocation":"22614:8:28","nodeType":"FunctionDefinition","parameters":{"id":8415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8414,"mutability":"mutable","name":"value","nameLocation":"22630:5:28","nodeType":"VariableDeclaration","scope":8437,"src":"22623:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8413,"name":"int256","nodeType":"ElementaryTypeName","src":"22623:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22622:14:28"},"returnParameters":{"id":8418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8417,"mutability":"mutable","name":"downcasted","nameLocation":"22667:10:28","nodeType":"VariableDeclaration","scope":8437,"src":"22660:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"},"typeName":{"id":8416,"name":"int176","nodeType":"ElementaryTypeName","src":"22660:6:28","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"visibility":"internal"}],"src":"22659:19:28"},"scope":9014,"src":"22605:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8462,"nodeType":"Block","src":"23226:150:28","statements":[{"expression":{"id":8450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8445,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8443,"src":"23236:10:28","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8448,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8440,"src":"23256:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23249:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":8446,"name":"int168","nodeType":"ElementaryTypeName","src":"23249:6:28","typeDescriptions":{}}},"id":8449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23249:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"23236:26:28","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"id":8451,"nodeType":"ExpressionStatement","src":"23236:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8452,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8443,"src":"23276:10:28","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8453,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8440,"src":"23290:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23276:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8461,"nodeType":"IfStatement","src":"23272:98:28","trueBody":{"id":8460,"nodeType":"Block","src":"23297:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":8456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23348:3:28","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":8457,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8440,"src":"23353:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8455,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"23318:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23318:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8459,"nodeType":"RevertStatement","src":"23311:48:28"}]}}]},"documentation":{"id":8438,"nodeType":"StructuredDocumentation","src":"22835:312:28","text":" @dev Returns the downcasted int168 from int256, reverting on\n overflow (when the input is less than smallest int168 or\n greater than largest int168).\n Counterpart to Solidity's `int168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":8463,"implemented":true,"kind":"function","modifiers":[],"name":"toInt168","nameLocation":"23161:8:28","nodeType":"FunctionDefinition","parameters":{"id":8441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8440,"mutability":"mutable","name":"value","nameLocation":"23177:5:28","nodeType":"VariableDeclaration","scope":8463,"src":"23170:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8439,"name":"int256","nodeType":"ElementaryTypeName","src":"23170:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23169:14:28"},"returnParameters":{"id":8444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8443,"mutability":"mutable","name":"downcasted","nameLocation":"23214:10:28","nodeType":"VariableDeclaration","scope":8463,"src":"23207:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"},"typeName":{"id":8442,"name":"int168","nodeType":"ElementaryTypeName","src":"23207:6:28","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"visibility":"internal"}],"src":"23206:19:28"},"scope":9014,"src":"23152:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8488,"nodeType":"Block","src":"23773:150:28","statements":[{"expression":{"id":8476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8471,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8469,"src":"23783:10:28","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8474,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8466,"src":"23803:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23796:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":8472,"name":"int160","nodeType":"ElementaryTypeName","src":"23796:6:28","typeDescriptions":{}}},"id":8475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23796:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"23783:26:28","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"id":8477,"nodeType":"ExpressionStatement","src":"23783:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8478,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8469,"src":"23823:10:28","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8479,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8466,"src":"23837:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23823:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8487,"nodeType":"IfStatement","src":"23819:98:28","trueBody":{"id":8486,"nodeType":"Block","src":"23844:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":8482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23895:3:28","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":8483,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8466,"src":"23900:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8481,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"23865:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23865:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8485,"nodeType":"RevertStatement","src":"23858:48:28"}]}}]},"documentation":{"id":8464,"nodeType":"StructuredDocumentation","src":"23382:312:28","text":" @dev Returns the downcasted int160 from int256, reverting on\n overflow (when the input is less than smallest int160 or\n greater than largest int160).\n Counterpart to Solidity's `int160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":8489,"implemented":true,"kind":"function","modifiers":[],"name":"toInt160","nameLocation":"23708:8:28","nodeType":"FunctionDefinition","parameters":{"id":8467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8466,"mutability":"mutable","name":"value","nameLocation":"23724:5:28","nodeType":"VariableDeclaration","scope":8489,"src":"23717:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8465,"name":"int256","nodeType":"ElementaryTypeName","src":"23717:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23716:14:28"},"returnParameters":{"id":8470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8469,"mutability":"mutable","name":"downcasted","nameLocation":"23761:10:28","nodeType":"VariableDeclaration","scope":8489,"src":"23754:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"},"typeName":{"id":8468,"name":"int160","nodeType":"ElementaryTypeName","src":"23754:6:28","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"visibility":"internal"}],"src":"23753:19:28"},"scope":9014,"src":"23699:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8514,"nodeType":"Block","src":"24320:150:28","statements":[{"expression":{"id":8502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8497,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8495,"src":"24330:10:28","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8500,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8492,"src":"24350:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24343:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":8498,"name":"int152","nodeType":"ElementaryTypeName","src":"24343:6:28","typeDescriptions":{}}},"id":8501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24343:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"24330:26:28","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"id":8503,"nodeType":"ExpressionStatement","src":"24330:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8504,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8495,"src":"24370:10:28","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8505,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8492,"src":"24384:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24370:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8513,"nodeType":"IfStatement","src":"24366:98:28","trueBody":{"id":8512,"nodeType":"Block","src":"24391:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":8508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24442:3:28","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":8509,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8492,"src":"24447:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8507,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"24412:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24412:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8511,"nodeType":"RevertStatement","src":"24405:48:28"}]}}]},"documentation":{"id":8490,"nodeType":"StructuredDocumentation","src":"23929:312:28","text":" @dev Returns the downcasted int152 from int256, reverting on\n overflow (when the input is less than smallest int152 or\n greater than largest int152).\n Counterpart to Solidity's `int152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":8515,"implemented":true,"kind":"function","modifiers":[],"name":"toInt152","nameLocation":"24255:8:28","nodeType":"FunctionDefinition","parameters":{"id":8493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8492,"mutability":"mutable","name":"value","nameLocation":"24271:5:28","nodeType":"VariableDeclaration","scope":8515,"src":"24264:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8491,"name":"int256","nodeType":"ElementaryTypeName","src":"24264:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24263:14:28"},"returnParameters":{"id":8496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8495,"mutability":"mutable","name":"downcasted","nameLocation":"24308:10:28","nodeType":"VariableDeclaration","scope":8515,"src":"24301:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"},"typeName":{"id":8494,"name":"int152","nodeType":"ElementaryTypeName","src":"24301:6:28","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"visibility":"internal"}],"src":"24300:19:28"},"scope":9014,"src":"24246:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8540,"nodeType":"Block","src":"24867:150:28","statements":[{"expression":{"id":8528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8523,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8521,"src":"24877:10:28","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8526,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8518,"src":"24897:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24890:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":8524,"name":"int144","nodeType":"ElementaryTypeName","src":"24890:6:28","typeDescriptions":{}}},"id":8527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24890:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"24877:26:28","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"id":8529,"nodeType":"ExpressionStatement","src":"24877:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8530,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8521,"src":"24917:10:28","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8531,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8518,"src":"24931:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24917:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8539,"nodeType":"IfStatement","src":"24913:98:28","trueBody":{"id":8538,"nodeType":"Block","src":"24938:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":8534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24989:3:28","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":8535,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8518,"src":"24994:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8533,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"24959:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24959:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8537,"nodeType":"RevertStatement","src":"24952:48:28"}]}}]},"documentation":{"id":8516,"nodeType":"StructuredDocumentation","src":"24476:312:28","text":" @dev Returns the downcasted int144 from int256, reverting on\n overflow (when the input is less than smallest int144 or\n greater than largest int144).\n Counterpart to Solidity's `int144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":8541,"implemented":true,"kind":"function","modifiers":[],"name":"toInt144","nameLocation":"24802:8:28","nodeType":"FunctionDefinition","parameters":{"id":8519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8518,"mutability":"mutable","name":"value","nameLocation":"24818:5:28","nodeType":"VariableDeclaration","scope":8541,"src":"24811:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8517,"name":"int256","nodeType":"ElementaryTypeName","src":"24811:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24810:14:28"},"returnParameters":{"id":8522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8521,"mutability":"mutable","name":"downcasted","nameLocation":"24855:10:28","nodeType":"VariableDeclaration","scope":8541,"src":"24848:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"},"typeName":{"id":8520,"name":"int144","nodeType":"ElementaryTypeName","src":"24848:6:28","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"visibility":"internal"}],"src":"24847:19:28"},"scope":9014,"src":"24793:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8566,"nodeType":"Block","src":"25414:150:28","statements":[{"expression":{"id":8554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8549,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8547,"src":"25424:10:28","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8552,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8544,"src":"25444:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25437:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":8550,"name":"int136","nodeType":"ElementaryTypeName","src":"25437:6:28","typeDescriptions":{}}},"id":8553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25437:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"25424:26:28","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"id":8555,"nodeType":"ExpressionStatement","src":"25424:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8556,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8547,"src":"25464:10:28","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8557,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8544,"src":"25478:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25464:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8565,"nodeType":"IfStatement","src":"25460:98:28","trueBody":{"id":8564,"nodeType":"Block","src":"25485:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":8560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25536:3:28","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":8561,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8544,"src":"25541:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8559,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"25506:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25506:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8563,"nodeType":"RevertStatement","src":"25499:48:28"}]}}]},"documentation":{"id":8542,"nodeType":"StructuredDocumentation","src":"25023:312:28","text":" @dev Returns the downcasted int136 from int256, reverting on\n overflow (when the input is less than smallest int136 or\n greater than largest int136).\n Counterpart to Solidity's `int136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":8567,"implemented":true,"kind":"function","modifiers":[],"name":"toInt136","nameLocation":"25349:8:28","nodeType":"FunctionDefinition","parameters":{"id":8545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8544,"mutability":"mutable","name":"value","nameLocation":"25365:5:28","nodeType":"VariableDeclaration","scope":8567,"src":"25358:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8543,"name":"int256","nodeType":"ElementaryTypeName","src":"25358:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25357:14:28"},"returnParameters":{"id":8548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8547,"mutability":"mutable","name":"downcasted","nameLocation":"25402:10:28","nodeType":"VariableDeclaration","scope":8567,"src":"25395:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"},"typeName":{"id":8546,"name":"int136","nodeType":"ElementaryTypeName","src":"25395:6:28","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"visibility":"internal"}],"src":"25394:19:28"},"scope":9014,"src":"25340:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8592,"nodeType":"Block","src":"25961:150:28","statements":[{"expression":{"id":8580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8575,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8573,"src":"25971:10:28","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8578,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8570,"src":"25991:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25984:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":8576,"name":"int128","nodeType":"ElementaryTypeName","src":"25984:6:28","typeDescriptions":{}}},"id":8579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25984:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"25971:26:28","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":8581,"nodeType":"ExpressionStatement","src":"25971:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8582,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8573,"src":"26011:10:28","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8583,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8570,"src":"26025:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26011:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8591,"nodeType":"IfStatement","src":"26007:98:28","trueBody":{"id":8590,"nodeType":"Block","src":"26032:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":8586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26083:3:28","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":8587,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8570,"src":"26088:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8585,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"26053:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26053:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8589,"nodeType":"RevertStatement","src":"26046:48:28"}]}}]},"documentation":{"id":8568,"nodeType":"StructuredDocumentation","src":"25570:312:28","text":" @dev Returns the downcasted int128 from int256, reverting on\n overflow (when the input is less than smallest int128 or\n greater than largest int128).\n Counterpart to Solidity's `int128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":8593,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nameLocation":"25896:8:28","nodeType":"FunctionDefinition","parameters":{"id":8571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8570,"mutability":"mutable","name":"value","nameLocation":"25912:5:28","nodeType":"VariableDeclaration","scope":8593,"src":"25905:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8569,"name":"int256","nodeType":"ElementaryTypeName","src":"25905:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25904:14:28"},"returnParameters":{"id":8574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8573,"mutability":"mutable","name":"downcasted","nameLocation":"25949:10:28","nodeType":"VariableDeclaration","scope":8593,"src":"25942:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":8572,"name":"int128","nodeType":"ElementaryTypeName","src":"25942:6:28","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"25941:19:28"},"scope":9014,"src":"25887:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8618,"nodeType":"Block","src":"26508:150:28","statements":[{"expression":{"id":8606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8601,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8599,"src":"26518:10:28","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8604,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8596,"src":"26538:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8603,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26531:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":8602,"name":"int120","nodeType":"ElementaryTypeName","src":"26531:6:28","typeDescriptions":{}}},"id":8605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26531:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"26518:26:28","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"id":8607,"nodeType":"ExpressionStatement","src":"26518:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8608,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8599,"src":"26558:10:28","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8609,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8596,"src":"26572:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26558:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8617,"nodeType":"IfStatement","src":"26554:98:28","trueBody":{"id":8616,"nodeType":"Block","src":"26579:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":8612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26630:3:28","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":8613,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8596,"src":"26635:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8611,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"26600:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26600:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8615,"nodeType":"RevertStatement","src":"26593:48:28"}]}}]},"documentation":{"id":8594,"nodeType":"StructuredDocumentation","src":"26117:312:28","text":" @dev Returns the downcasted int120 from int256, reverting on\n overflow (when the input is less than smallest int120 or\n greater than largest int120).\n Counterpart to Solidity's `int120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":8619,"implemented":true,"kind":"function","modifiers":[],"name":"toInt120","nameLocation":"26443:8:28","nodeType":"FunctionDefinition","parameters":{"id":8597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8596,"mutability":"mutable","name":"value","nameLocation":"26459:5:28","nodeType":"VariableDeclaration","scope":8619,"src":"26452:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8595,"name":"int256","nodeType":"ElementaryTypeName","src":"26452:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26451:14:28"},"returnParameters":{"id":8600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8599,"mutability":"mutable","name":"downcasted","nameLocation":"26496:10:28","nodeType":"VariableDeclaration","scope":8619,"src":"26489:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"},"typeName":{"id":8598,"name":"int120","nodeType":"ElementaryTypeName","src":"26489:6:28","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"visibility":"internal"}],"src":"26488:19:28"},"scope":9014,"src":"26434:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8644,"nodeType":"Block","src":"27055:150:28","statements":[{"expression":{"id":8632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8627,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8625,"src":"27065:10:28","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8622,"src":"27085:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27078:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":8628,"name":"int112","nodeType":"ElementaryTypeName","src":"27078:6:28","typeDescriptions":{}}},"id":8631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27078:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27065:26:28","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"id":8633,"nodeType":"ExpressionStatement","src":"27065:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8634,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8625,"src":"27105:10:28","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8635,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8622,"src":"27119:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27105:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8643,"nodeType":"IfStatement","src":"27101:98:28","trueBody":{"id":8642,"nodeType":"Block","src":"27126:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":8638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27177:3:28","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":8639,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8622,"src":"27182:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8637,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"27147:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27147:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8641,"nodeType":"RevertStatement","src":"27140:48:28"}]}}]},"documentation":{"id":8620,"nodeType":"StructuredDocumentation","src":"26664:312:28","text":" @dev Returns the downcasted int112 from int256, reverting on\n overflow (when the input is less than smallest int112 or\n greater than largest int112).\n Counterpart to Solidity's `int112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":8645,"implemented":true,"kind":"function","modifiers":[],"name":"toInt112","nameLocation":"26990:8:28","nodeType":"FunctionDefinition","parameters":{"id":8623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8622,"mutability":"mutable","name":"value","nameLocation":"27006:5:28","nodeType":"VariableDeclaration","scope":8645,"src":"26999:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8621,"name":"int256","nodeType":"ElementaryTypeName","src":"26999:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26998:14:28"},"returnParameters":{"id":8626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8625,"mutability":"mutable","name":"downcasted","nameLocation":"27043:10:28","nodeType":"VariableDeclaration","scope":8645,"src":"27036:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"},"typeName":{"id":8624,"name":"int112","nodeType":"ElementaryTypeName","src":"27036:6:28","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"visibility":"internal"}],"src":"27035:19:28"},"scope":9014,"src":"26981:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8670,"nodeType":"Block","src":"27602:150:28","statements":[{"expression":{"id":8658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8653,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8651,"src":"27612:10:28","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8656,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8648,"src":"27632:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27625:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":8654,"name":"int104","nodeType":"ElementaryTypeName","src":"27625:6:28","typeDescriptions":{}}},"id":8657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27625:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"27612:26:28","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"id":8659,"nodeType":"ExpressionStatement","src":"27612:26:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8660,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8651,"src":"27652:10:28","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8661,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8648,"src":"27666:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27652:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8669,"nodeType":"IfStatement","src":"27648:98:28","trueBody":{"id":8668,"nodeType":"Block","src":"27673:73:28","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":8664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27724:3:28","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":8665,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8648,"src":"27729:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8663,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"27694:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27694:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8667,"nodeType":"RevertStatement","src":"27687:48:28"}]}}]},"documentation":{"id":8646,"nodeType":"StructuredDocumentation","src":"27211:312:28","text":" @dev Returns the downcasted int104 from int256, reverting on\n overflow (when the input is less than smallest int104 or\n greater than largest int104).\n Counterpart to Solidity's `int104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":8671,"implemented":true,"kind":"function","modifiers":[],"name":"toInt104","nameLocation":"27537:8:28","nodeType":"FunctionDefinition","parameters":{"id":8649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8648,"mutability":"mutable","name":"value","nameLocation":"27553:5:28","nodeType":"VariableDeclaration","scope":8671,"src":"27546:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8647,"name":"int256","nodeType":"ElementaryTypeName","src":"27546:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27545:14:28"},"returnParameters":{"id":8652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8651,"mutability":"mutable","name":"downcasted","nameLocation":"27590:10:28","nodeType":"VariableDeclaration","scope":8671,"src":"27583:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"},"typeName":{"id":8650,"name":"int104","nodeType":"ElementaryTypeName","src":"27583:6:28","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"visibility":"internal"}],"src":"27582:19:28"},"scope":9014,"src":"27528:224:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8696,"nodeType":"Block","src":"28142:148:28","statements":[{"expression":{"id":8684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8679,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8677,"src":"28152:10:28","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8682,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8674,"src":"28171:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8681,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28165:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":8680,"name":"int96","nodeType":"ElementaryTypeName","src":"28165:5:28","typeDescriptions":{}}},"id":8683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28165:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"28152:25:28","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"id":8685,"nodeType":"ExpressionStatement","src":"28152:25:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8686,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8677,"src":"28191:10:28","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8687,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8674,"src":"28205:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28191:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8695,"nodeType":"IfStatement","src":"28187:97:28","trueBody":{"id":8694,"nodeType":"Block","src":"28212:72:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":8690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28263:2:28","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":8691,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8674,"src":"28267:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8689,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"28233:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28233:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8693,"nodeType":"RevertStatement","src":"28226:47:28"}]}}]},"documentation":{"id":8672,"nodeType":"StructuredDocumentation","src":"27758:307:28","text":" @dev Returns the downcasted int96 from int256, reverting on\n overflow (when the input is less than smallest int96 or\n greater than largest int96).\n Counterpart to Solidity's `int96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":8697,"implemented":true,"kind":"function","modifiers":[],"name":"toInt96","nameLocation":"28079:7:28","nodeType":"FunctionDefinition","parameters":{"id":8675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8674,"mutability":"mutable","name":"value","nameLocation":"28094:5:28","nodeType":"VariableDeclaration","scope":8697,"src":"28087:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8673,"name":"int256","nodeType":"ElementaryTypeName","src":"28087:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28086:14:28"},"returnParameters":{"id":8678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8677,"mutability":"mutable","name":"downcasted","nameLocation":"28130:10:28","nodeType":"VariableDeclaration","scope":8697,"src":"28124:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"},"typeName":{"id":8676,"name":"int96","nodeType":"ElementaryTypeName","src":"28124:5:28","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"visibility":"internal"}],"src":"28123:18:28"},"scope":9014,"src":"28070:220:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8722,"nodeType":"Block","src":"28680:148:28","statements":[{"expression":{"id":8710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8705,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8703,"src":"28690:10:28","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8708,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8700,"src":"28709:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28703:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":8706,"name":"int88","nodeType":"ElementaryTypeName","src":"28703:5:28","typeDescriptions":{}}},"id":8709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28703:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"28690:25:28","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"id":8711,"nodeType":"ExpressionStatement","src":"28690:25:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8712,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8703,"src":"28729:10:28","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8700,"src":"28743:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28729:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8721,"nodeType":"IfStatement","src":"28725:97:28","trueBody":{"id":8720,"nodeType":"Block","src":"28750:72:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":8716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28801:2:28","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":8717,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8700,"src":"28805:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8715,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"28771:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28771:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8719,"nodeType":"RevertStatement","src":"28764:47:28"}]}}]},"documentation":{"id":8698,"nodeType":"StructuredDocumentation","src":"28296:307:28","text":" @dev Returns the downcasted int88 from int256, reverting on\n overflow (when the input is less than smallest int88 or\n greater than largest int88).\n Counterpart to Solidity's `int88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":8723,"implemented":true,"kind":"function","modifiers":[],"name":"toInt88","nameLocation":"28617:7:28","nodeType":"FunctionDefinition","parameters":{"id":8701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8700,"mutability":"mutable","name":"value","nameLocation":"28632:5:28","nodeType":"VariableDeclaration","scope":8723,"src":"28625:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8699,"name":"int256","nodeType":"ElementaryTypeName","src":"28625:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28624:14:28"},"returnParameters":{"id":8704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8703,"mutability":"mutable","name":"downcasted","nameLocation":"28668:10:28","nodeType":"VariableDeclaration","scope":8723,"src":"28662:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"},"typeName":{"id":8702,"name":"int88","nodeType":"ElementaryTypeName","src":"28662:5:28","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"visibility":"internal"}],"src":"28661:18:28"},"scope":9014,"src":"28608:220:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8748,"nodeType":"Block","src":"29218:148:28","statements":[{"expression":{"id":8736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8731,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8729,"src":"29228:10:28","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8734,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8726,"src":"29247:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29241:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":8732,"name":"int80","nodeType":"ElementaryTypeName","src":"29241:5:28","typeDescriptions":{}}},"id":8735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29241:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"29228:25:28","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"id":8737,"nodeType":"ExpressionStatement","src":"29228:25:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8738,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8729,"src":"29267:10:28","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8739,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8726,"src":"29281:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29267:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8747,"nodeType":"IfStatement","src":"29263:97:28","trueBody":{"id":8746,"nodeType":"Block","src":"29288:72:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":8742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29339:2:28","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":8743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8726,"src":"29343:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8741,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"29309:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29309:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8745,"nodeType":"RevertStatement","src":"29302:47:28"}]}}]},"documentation":{"id":8724,"nodeType":"StructuredDocumentation","src":"28834:307:28","text":" @dev Returns the downcasted int80 from int256, reverting on\n overflow (when the input is less than smallest int80 or\n greater than largest int80).\n Counterpart to Solidity's `int80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":8749,"implemented":true,"kind":"function","modifiers":[],"name":"toInt80","nameLocation":"29155:7:28","nodeType":"FunctionDefinition","parameters":{"id":8727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8726,"mutability":"mutable","name":"value","nameLocation":"29170:5:28","nodeType":"VariableDeclaration","scope":8749,"src":"29163:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8725,"name":"int256","nodeType":"ElementaryTypeName","src":"29163:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29162:14:28"},"returnParameters":{"id":8730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8729,"mutability":"mutable","name":"downcasted","nameLocation":"29206:10:28","nodeType":"VariableDeclaration","scope":8749,"src":"29200:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"},"typeName":{"id":8728,"name":"int80","nodeType":"ElementaryTypeName","src":"29200:5:28","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"visibility":"internal"}],"src":"29199:18:28"},"scope":9014,"src":"29146:220:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8774,"nodeType":"Block","src":"29756:148:28","statements":[{"expression":{"id":8762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8757,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8755,"src":"29766:10:28","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8760,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8752,"src":"29785:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8759,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29779:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":8758,"name":"int72","nodeType":"ElementaryTypeName","src":"29779:5:28","typeDescriptions":{}}},"id":8761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29779:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"29766:25:28","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"id":8763,"nodeType":"ExpressionStatement","src":"29766:25:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8764,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8755,"src":"29805:10:28","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8765,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8752,"src":"29819:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29805:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8773,"nodeType":"IfStatement","src":"29801:97:28","trueBody":{"id":8772,"nodeType":"Block","src":"29826:72:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":8768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29877:2:28","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":8769,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8752,"src":"29881:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8767,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"29847:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29847:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8771,"nodeType":"RevertStatement","src":"29840:47:28"}]}}]},"documentation":{"id":8750,"nodeType":"StructuredDocumentation","src":"29372:307:28","text":" @dev Returns the downcasted int72 from int256, reverting on\n overflow (when the input is less than smallest int72 or\n greater than largest int72).\n Counterpart to Solidity's `int72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":8775,"implemented":true,"kind":"function","modifiers":[],"name":"toInt72","nameLocation":"29693:7:28","nodeType":"FunctionDefinition","parameters":{"id":8753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8752,"mutability":"mutable","name":"value","nameLocation":"29708:5:28","nodeType":"VariableDeclaration","scope":8775,"src":"29701:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8751,"name":"int256","nodeType":"ElementaryTypeName","src":"29701:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29700:14:28"},"returnParameters":{"id":8756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8755,"mutability":"mutable","name":"downcasted","nameLocation":"29744:10:28","nodeType":"VariableDeclaration","scope":8775,"src":"29738:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"},"typeName":{"id":8754,"name":"int72","nodeType":"ElementaryTypeName","src":"29738:5:28","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"visibility":"internal"}],"src":"29737:18:28"},"scope":9014,"src":"29684:220:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8800,"nodeType":"Block","src":"30294:148:28","statements":[{"expression":{"id":8788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8783,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8781,"src":"30304:10:28","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8778,"src":"30323:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30317:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":8784,"name":"int64","nodeType":"ElementaryTypeName","src":"30317:5:28","typeDescriptions":{}}},"id":8787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30317:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"30304:25:28","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"id":8789,"nodeType":"ExpressionStatement","src":"30304:25:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8790,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8781,"src":"30343:10:28","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8791,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8778,"src":"30357:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30343:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8799,"nodeType":"IfStatement","src":"30339:97:28","trueBody":{"id":8798,"nodeType":"Block","src":"30364:72:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":8794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30415:2:28","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":8795,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8778,"src":"30419:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8793,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"30385:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30385:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8797,"nodeType":"RevertStatement","src":"30378:47:28"}]}}]},"documentation":{"id":8776,"nodeType":"StructuredDocumentation","src":"29910:307:28","text":" @dev Returns the downcasted int64 from int256, reverting on\n overflow (when the input is less than smallest int64 or\n greater than largest int64).\n Counterpart to Solidity's `int64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":8801,"implemented":true,"kind":"function","modifiers":[],"name":"toInt64","nameLocation":"30231:7:28","nodeType":"FunctionDefinition","parameters":{"id":8779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8778,"mutability":"mutable","name":"value","nameLocation":"30246:5:28","nodeType":"VariableDeclaration","scope":8801,"src":"30239:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8777,"name":"int256","nodeType":"ElementaryTypeName","src":"30239:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30238:14:28"},"returnParameters":{"id":8782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8781,"mutability":"mutable","name":"downcasted","nameLocation":"30282:10:28","nodeType":"VariableDeclaration","scope":8801,"src":"30276:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":8780,"name":"int64","nodeType":"ElementaryTypeName","src":"30276:5:28","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"30275:18:28"},"scope":9014,"src":"30222:220:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8826,"nodeType":"Block","src":"30832:148:28","statements":[{"expression":{"id":8814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8809,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8807,"src":"30842:10:28","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8812,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8804,"src":"30861:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8811,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30855:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":8810,"name":"int56","nodeType":"ElementaryTypeName","src":"30855:5:28","typeDescriptions":{}}},"id":8813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30855:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"30842:25:28","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":8815,"nodeType":"ExpressionStatement","src":"30842:25:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8816,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8807,"src":"30881:10:28","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8817,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8804,"src":"30895:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30881:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8825,"nodeType":"IfStatement","src":"30877:97:28","trueBody":{"id":8824,"nodeType":"Block","src":"30902:72:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":8820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30953:2:28","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":8821,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8804,"src":"30957:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8819,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"30923:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30923:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8823,"nodeType":"RevertStatement","src":"30916:47:28"}]}}]},"documentation":{"id":8802,"nodeType":"StructuredDocumentation","src":"30448:307:28","text":" @dev Returns the downcasted int56 from int256, reverting on\n overflow (when the input is less than smallest int56 or\n greater than largest int56).\n Counterpart to Solidity's `int56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":8827,"implemented":true,"kind":"function","modifiers":[],"name":"toInt56","nameLocation":"30769:7:28","nodeType":"FunctionDefinition","parameters":{"id":8805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8804,"mutability":"mutable","name":"value","nameLocation":"30784:5:28","nodeType":"VariableDeclaration","scope":8827,"src":"30777:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8803,"name":"int256","nodeType":"ElementaryTypeName","src":"30777:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30776:14:28"},"returnParameters":{"id":8808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8807,"mutability":"mutable","name":"downcasted","nameLocation":"30820:10:28","nodeType":"VariableDeclaration","scope":8827,"src":"30814:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":8806,"name":"int56","nodeType":"ElementaryTypeName","src":"30814:5:28","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"src":"30813:18:28"},"scope":9014,"src":"30760:220:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8852,"nodeType":"Block","src":"31370:148:28","statements":[{"expression":{"id":8840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8835,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8833,"src":"31380:10:28","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8838,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8830,"src":"31399:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31393:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":8836,"name":"int48","nodeType":"ElementaryTypeName","src":"31393:5:28","typeDescriptions":{}}},"id":8839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31393:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"31380:25:28","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"id":8841,"nodeType":"ExpressionStatement","src":"31380:25:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8842,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8833,"src":"31419:10:28","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8843,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8830,"src":"31433:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31419:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8851,"nodeType":"IfStatement","src":"31415:97:28","trueBody":{"id":8850,"nodeType":"Block","src":"31440:72:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":8846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31491:2:28","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":8847,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8830,"src":"31495:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8845,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"31461:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31461:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8849,"nodeType":"RevertStatement","src":"31454:47:28"}]}}]},"documentation":{"id":8828,"nodeType":"StructuredDocumentation","src":"30986:307:28","text":" @dev Returns the downcasted int48 from int256, reverting on\n overflow (when the input is less than smallest int48 or\n greater than largest int48).\n Counterpart to Solidity's `int48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":8853,"implemented":true,"kind":"function","modifiers":[],"name":"toInt48","nameLocation":"31307:7:28","nodeType":"FunctionDefinition","parameters":{"id":8831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8830,"mutability":"mutable","name":"value","nameLocation":"31322:5:28","nodeType":"VariableDeclaration","scope":8853,"src":"31315:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8829,"name":"int256","nodeType":"ElementaryTypeName","src":"31315:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31314:14:28"},"returnParameters":{"id":8834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8833,"mutability":"mutable","name":"downcasted","nameLocation":"31358:10:28","nodeType":"VariableDeclaration","scope":8853,"src":"31352:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"},"typeName":{"id":8832,"name":"int48","nodeType":"ElementaryTypeName","src":"31352:5:28","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"visibility":"internal"}],"src":"31351:18:28"},"scope":9014,"src":"31298:220:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8878,"nodeType":"Block","src":"31908:148:28","statements":[{"expression":{"id":8866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8861,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8859,"src":"31918:10:28","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8864,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8856,"src":"31937:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8863,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31931:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":8862,"name":"int40","nodeType":"ElementaryTypeName","src":"31931:5:28","typeDescriptions":{}}},"id":8865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31931:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"31918:25:28","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"id":8867,"nodeType":"ExpressionStatement","src":"31918:25:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8868,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8859,"src":"31957:10:28","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8869,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8856,"src":"31971:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31957:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8877,"nodeType":"IfStatement","src":"31953:97:28","trueBody":{"id":8876,"nodeType":"Block","src":"31978:72:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":8872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32029:2:28","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":8873,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8856,"src":"32033:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8871,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"31999:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31999:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8875,"nodeType":"RevertStatement","src":"31992:47:28"}]}}]},"documentation":{"id":8854,"nodeType":"StructuredDocumentation","src":"31524:307:28","text":" @dev Returns the downcasted int40 from int256, reverting on\n overflow (when the input is less than smallest int40 or\n greater than largest int40).\n Counterpart to Solidity's `int40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":8879,"implemented":true,"kind":"function","modifiers":[],"name":"toInt40","nameLocation":"31845:7:28","nodeType":"FunctionDefinition","parameters":{"id":8857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8856,"mutability":"mutable","name":"value","nameLocation":"31860:5:28","nodeType":"VariableDeclaration","scope":8879,"src":"31853:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8855,"name":"int256","nodeType":"ElementaryTypeName","src":"31853:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31852:14:28"},"returnParameters":{"id":8860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8859,"mutability":"mutable","name":"downcasted","nameLocation":"31896:10:28","nodeType":"VariableDeclaration","scope":8879,"src":"31890:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"},"typeName":{"id":8858,"name":"int40","nodeType":"ElementaryTypeName","src":"31890:5:28","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"visibility":"internal"}],"src":"31889:18:28"},"scope":9014,"src":"31836:220:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8904,"nodeType":"Block","src":"32446:148:28","statements":[{"expression":{"id":8892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8887,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8885,"src":"32456:10:28","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8890,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8882,"src":"32475:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32469:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":8888,"name":"int32","nodeType":"ElementaryTypeName","src":"32469:5:28","typeDescriptions":{}}},"id":8891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32469:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"32456:25:28","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":8893,"nodeType":"ExpressionStatement","src":"32456:25:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8894,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8885,"src":"32495:10:28","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8895,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8882,"src":"32509:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32495:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8903,"nodeType":"IfStatement","src":"32491:97:28","trueBody":{"id":8902,"nodeType":"Block","src":"32516:72:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":8898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32567:2:28","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":8899,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8882,"src":"32571:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8897,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"32537:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32537:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8901,"nodeType":"RevertStatement","src":"32530:47:28"}]}}]},"documentation":{"id":8880,"nodeType":"StructuredDocumentation","src":"32062:307:28","text":" @dev Returns the downcasted int32 from int256, reverting on\n overflow (when the input is less than smallest int32 or\n greater than largest int32).\n Counterpart to Solidity's `int32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":8905,"implemented":true,"kind":"function","modifiers":[],"name":"toInt32","nameLocation":"32383:7:28","nodeType":"FunctionDefinition","parameters":{"id":8883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8882,"mutability":"mutable","name":"value","nameLocation":"32398:5:28","nodeType":"VariableDeclaration","scope":8905,"src":"32391:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8881,"name":"int256","nodeType":"ElementaryTypeName","src":"32391:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32390:14:28"},"returnParameters":{"id":8886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8885,"mutability":"mutable","name":"downcasted","nameLocation":"32434:10:28","nodeType":"VariableDeclaration","scope":8905,"src":"32428:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":8884,"name":"int32","nodeType":"ElementaryTypeName","src":"32428:5:28","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"}],"src":"32427:18:28"},"scope":9014,"src":"32374:220:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8930,"nodeType":"Block","src":"32984:148:28","statements":[{"expression":{"id":8918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8913,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8911,"src":"32994:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8916,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8908,"src":"33013:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33007:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":8914,"name":"int24","nodeType":"ElementaryTypeName","src":"33007:5:28","typeDescriptions":{}}},"id":8917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33007:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"32994:25:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":8919,"nodeType":"ExpressionStatement","src":"32994:25:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8920,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8911,"src":"33033:10:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8921,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8908,"src":"33047:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33033:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8929,"nodeType":"IfStatement","src":"33029:97:28","trueBody":{"id":8928,"nodeType":"Block","src":"33054:72:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":8924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33105:2:28","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":8925,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8908,"src":"33109:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8923,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"33075:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33075:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8927,"nodeType":"RevertStatement","src":"33068:47:28"}]}}]},"documentation":{"id":8906,"nodeType":"StructuredDocumentation","src":"32600:307:28","text":" @dev Returns the downcasted int24 from int256, reverting on\n overflow (when the input is less than smallest int24 or\n greater than largest int24).\n Counterpart to Solidity's `int24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":8931,"implemented":true,"kind":"function","modifiers":[],"name":"toInt24","nameLocation":"32921:7:28","nodeType":"FunctionDefinition","parameters":{"id":8909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8908,"mutability":"mutable","name":"value","nameLocation":"32936:5:28","nodeType":"VariableDeclaration","scope":8931,"src":"32929:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8907,"name":"int256","nodeType":"ElementaryTypeName","src":"32929:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32928:14:28"},"returnParameters":{"id":8912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8911,"mutability":"mutable","name":"downcasted","nameLocation":"32972:10:28","nodeType":"VariableDeclaration","scope":8931,"src":"32966:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":8910,"name":"int24","nodeType":"ElementaryTypeName","src":"32966:5:28","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"32965:18:28"},"scope":9014,"src":"32912:220:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8956,"nodeType":"Block","src":"33522:148:28","statements":[{"expression":{"id":8944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8939,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8937,"src":"33532:10:28","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8942,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8934,"src":"33551:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8941,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33545:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":8940,"name":"int16","nodeType":"ElementaryTypeName","src":"33545:5:28","typeDescriptions":{}}},"id":8943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33545:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"33532:25:28","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":8945,"nodeType":"ExpressionStatement","src":"33532:25:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8946,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8937,"src":"33571:10:28","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8934,"src":"33585:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33571:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8955,"nodeType":"IfStatement","src":"33567:97:28","trueBody":{"id":8954,"nodeType":"Block","src":"33592:72:28","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":8950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33643:2:28","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":8951,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8934,"src":"33647:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8949,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"33613:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33613:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8953,"nodeType":"RevertStatement","src":"33606:47:28"}]}}]},"documentation":{"id":8932,"nodeType":"StructuredDocumentation","src":"33138:307:28","text":" @dev Returns the downcasted int16 from int256, reverting on\n overflow (when the input is less than smallest int16 or\n greater than largest int16).\n Counterpart to Solidity's `int16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":8957,"implemented":true,"kind":"function","modifiers":[],"name":"toInt16","nameLocation":"33459:7:28","nodeType":"FunctionDefinition","parameters":{"id":8935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8934,"mutability":"mutable","name":"value","nameLocation":"33474:5:28","nodeType":"VariableDeclaration","scope":8957,"src":"33467:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8933,"name":"int256","nodeType":"ElementaryTypeName","src":"33467:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33466:14:28"},"returnParameters":{"id":8938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8937,"mutability":"mutable","name":"downcasted","nameLocation":"33510:10:28","nodeType":"VariableDeclaration","scope":8957,"src":"33504:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":8936,"name":"int16","nodeType":"ElementaryTypeName","src":"33504:5:28","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"33503:18:28"},"scope":9014,"src":"33450:220:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":8982,"nodeType":"Block","src":"34053:146:28","statements":[{"expression":{"id":8970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8965,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8963,"src":"34063:10:28","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8968,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8960,"src":"34081:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34076:4:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":8966,"name":"int8","nodeType":"ElementaryTypeName","src":"34076:4:28","typeDescriptions":{}}},"id":8969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34076:11:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"34063:24:28","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"id":8971,"nodeType":"ExpressionStatement","src":"34063:24:28"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":8974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8972,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8963,"src":"34101:10:28","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8973,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8960,"src":"34115:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"34101:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8981,"nodeType":"IfStatement","src":"34097:96:28","trueBody":{"id":8980,"nodeType":"Block","src":"34122:71:28","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":8976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34173:1:28","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":8977,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8960,"src":"34176:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8975,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"34143:29:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":8978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34143:39:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8979,"nodeType":"RevertStatement","src":"34136:46:28"}]}}]},"documentation":{"id":8958,"nodeType":"StructuredDocumentation","src":"33676:302:28","text":" @dev Returns the downcasted int8 from int256, reverting on\n overflow (when the input is less than smallest int8 or\n greater than largest int8).\n Counterpart to Solidity's `int8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":8983,"implemented":true,"kind":"function","modifiers":[],"name":"toInt8","nameLocation":"33992:6:28","nodeType":"FunctionDefinition","parameters":{"id":8961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8960,"mutability":"mutable","name":"value","nameLocation":"34006:5:28","nodeType":"VariableDeclaration","scope":8983,"src":"33999:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8959,"name":"int256","nodeType":"ElementaryTypeName","src":"33999:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33998:14:28"},"returnParameters":{"id":8964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8963,"mutability":"mutable","name":"downcasted","nameLocation":"34041:10:28","nodeType":"VariableDeclaration","scope":8983,"src":"34036:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"},"typeName":{"id":8962,"name":"int8","nodeType":"ElementaryTypeName","src":"34036:4:28","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"visibility":"internal"}],"src":"34035:17:28"},"scope":9014,"src":"33983:216:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":9012,"nodeType":"Block","src":"34439:250:28","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8986,"src":"34552:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":8996,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34573:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":8995,"name":"int256","nodeType":"ElementaryTypeName","src":"34573:6:28","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":8994,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"34568:4:28","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":8997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34568:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":8998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34581:3:28","memberName":"max","nodeType":"MemberAccess","src":"34568:16:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":8993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34560:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":8992,"name":"uint256","nodeType":"ElementaryTypeName","src":"34560:7:28","typeDescriptions":{}}},"id":8999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34560:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34552:33:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9006,"nodeType":"IfStatement","src":"34548:105:28","trueBody":{"id":9005,"nodeType":"Block","src":"34587:66:28","statements":[{"errorCall":{"arguments":[{"id":9002,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8986,"src":"34636:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9001,"name":"SafeCastOverflowedUintToInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7286,"src":"34608:27:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":9003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34608:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9004,"nodeType":"RevertStatement","src":"34601:41:28"}]}},{"expression":{"arguments":[{"id":9009,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8986,"src":"34676:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34669:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":9007,"name":"int256","nodeType":"ElementaryTypeName","src":"34669:6:28","typeDescriptions":{}}},"id":9010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34669:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":8990,"id":9011,"nodeType":"Return","src":"34662:20:28"}]},"documentation":{"id":8984,"nodeType":"StructuredDocumentation","src":"34205:165:28","text":" @dev Converts an unsigned uint256 into a signed int256.\n Requirements:\n - input must be less than or equal to maxInt256."},"id":9013,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nameLocation":"34384:8:28","nodeType":"FunctionDefinition","parameters":{"id":8987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8986,"mutability":"mutable","name":"value","nameLocation":"34401:5:28","nodeType":"VariableDeclaration","scope":9013,"src":"34393:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8985,"name":"uint256","nodeType":"ElementaryTypeName","src":"34393:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34392:15:28"},"returnParameters":{"id":8990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8989,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9013,"src":"34431:6:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8988,"name":"int256","nodeType":"ElementaryTypeName","src":"34431:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34430:8:28"},"scope":9014,"src":"34375:314:28","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":9015,"src":"764:33927:28","usedErrors":[7269,7274,7281,7286],"usedEvents":[]}],"src":"192:34500:28"},"id":28},"contracts/ProtocolFeeControllerMigration.sol":{"ast":{"absolutePath":"contracts/ProtocolFeeControllerMigration.sol","exportedSymbols":{"IAuthentication":[47],"IBasicAuthorizer":[32],"IProtocolFeeController":[613],"IVault":[651],"IVaultAdmin":[941],"PoolConfig":[2145],"PoolRoleAccounts":[2217],"ProtocolFeeController":[6298],"ProtocolFeeControllerMigration":[9350],"ReentrancyGuardTransient":[4215],"SingletonAuthentication":[6357]},"id":9351,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":9016,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"46:24:29"},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","file":"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","id":9018,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9351,"sourceUnit":48,"src":"72:116:29","symbolAliases":[{"foreign":{"id":9017,"name":"IAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"81:15:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/governance-scripts/IBasicAuthorizer.sol","file":"@balancer-labs/v3-interfaces/contracts/governance-scripts/IBasicAuthorizer.sol","id":9020,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9351,"sourceUnit":33,"src":"189:114:29","symbolAliases":[{"foreign":{"id":9019,"name":"IBasicAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"198:16:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol","id":9022,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9351,"sourceUnit":614,"src":"304:113:29","symbolAliases":[{"foreign":{"id":9021,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"313:22:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","id":9025,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9351,"sourceUnit":2412,"src":"418:107:29","symbolAliases":[{"foreign":{"id":9023,"name":"PoolRoleAccounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"427:16:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":9024,"name":"PoolConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"445:10:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol","id":9027,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9351,"sourceUnit":942,"src":"526:91:29","symbolAliases":[{"foreign":{"id":9026,"name":"IVaultAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"535:11:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol","id":9029,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9351,"sourceUnit":652,"src":"618:81:29","symbolAliases":[{"foreign":{"id":9028,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"627:6:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol","file":"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol","id":9031,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9351,"sourceUnit":6358,"src":"701:104:29","symbolAliases":[{"foreign":{"id":9030,"name":"SingletonAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6357,"src":"710:23:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-vault/contracts/ProtocolFeeController.sol","file":"@balancer-labs/v3-vault/contracts/ProtocolFeeController.sol","id":9033,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9351,"sourceUnit":6299,"src":"806:100:29","symbolAliases":[{"foreign":{"id":9032,"name":"ProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6298,"src":"815:21:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol","file":"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol","id":9035,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":9351,"sourceUnit":4216,"src":"907:132:29","symbolAliases":[{"foreign":{"id":9034,"name":"ReentrancyGuardTransient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4215,"src":"920:24:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":9037,"name":"ReentrancyGuardTransient","nameLocations":["2325:24:29"],"nodeType":"IdentifierPath","referencedDeclaration":4215,"src":"2325:24:29"},"id":9038,"nodeType":"InheritanceSpecifier","src":"2325:24:29"},{"baseName":{"id":9039,"name":"SingletonAuthentication","nameLocations":["2351:23:29"],"nodeType":"IdentifierPath","referencedDeclaration":6357,"src":"2351:23:29"},"id":9040,"nodeType":"InheritanceSpecifier","src":"2351:23:29"}],"canonicalName":"ProtocolFeeControllerMigration","contractDependencies":[],"contractKind":"contract","documentation":{"id":9036,"nodeType":"StructuredDocumentation","src":"1041:1240:29","text":" @notice Migrate to a ProtocolFeeController with extra events and infrastructure for future migrations.\n @dev These events enable tracking pool protocol fees under all circumstances (in particular, when protocol fees are\n initially turned off).\n After deployment, call `migratePools` as many times as necessary. The list must be generated externally, as pools\n are not iterable on-chain. The batch interface allows an unlimited number of pools to be migrated; it's possible\n there might be too many to migrate in a single call.\n The first time `migratePools` is called, the contract will first copy the global (pool-independent data). This could\n be done in a separate stage, but we're trying to keep the contract simple, vs. duplicating the staging coordinator\n system of v2 just yet.\n When all pools have been migrated, call `finalizeMigration` to disable further migration, update the address in the\n Vault, and renounce all permissions. While `migratePools` is permissionless, this call must be permissioned to\n prevent premature termination in case multiple transactions are required to migrate all the pools.\n Associated with `20250221-protocol-fee-controller-migration` (fork test only)."},"fullyImplemented":true,"id":9350,"linearizedBaseContracts":[9350,6357,4603,2491,47,4215],"name":"ProtocolFeeControllerMigration","nameLocation":"2291:30:29","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"7ea3a964","id":9043,"mutability":"immutable","name":"oldFeeController","nameLocation":"2421:16:29","nodeType":"VariableDeclaration","scope":9350,"src":"2381:56:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"},"typeName":{"id":9042,"nodeType":"UserDefinedTypeName","pathNode":{"id":9041,"name":"IProtocolFeeController","nameLocations":["2381:22:29"],"nodeType":"IdentifierPath","referencedDeclaration":613,"src":"2381:22:29"},"referencedDeclaration":613,"src":"2381:22:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"visibility":"public"},{"constant":false,"functionSelector":"51da116d","id":9046,"mutability":"mutable","name":"newFeeController","nameLocation":"2473:16:29","nodeType":"VariableDeclaration","scope":9350,"src":"2443:46:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"},"typeName":{"id":9045,"nodeType":"UserDefinedTypeName","pathNode":{"id":9044,"name":"IProtocolFeeController","nameLocations":["2443:22:29"],"nodeType":"IdentifierPath","referencedDeclaration":613,"src":"2443:22:29"},"referencedDeclaration":613,"src":"2443:22:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"visibility":"public"},{"constant":false,"functionSelector":"fbfa77cf","id":9049,"mutability":"immutable","name":"vault","nameLocation":"2520:5:29","nodeType":"VariableDeclaration","scope":9350,"src":"2496:29:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":9048,"nodeType":"UserDefinedTypeName","pathNode":{"id":9047,"name":"IVault","nameLocations":["2496:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"2496:6:29"},"referencedDeclaration":651,"src":"2496:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"public"},{"constant":false,"id":9052,"mutability":"immutable","name":"_authorizer","nameLocation":"2631:11:29","nodeType":"VariableDeclaration","scope":9350,"src":"2595:47:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"},"typeName":{"id":9051,"nodeType":"UserDefinedTypeName","pathNode":{"id":9050,"name":"IBasicAuthorizer","nameLocations":["2595:16:29"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"2595:16:29"},"referencedDeclaration":32,"src":"2595:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"}},"visibility":"internal"},{"constant":false,"id":9054,"mutability":"mutable","name":"_finalized","nameLocation":"2746:10:29","nodeType":"VariableDeclaration","scope":9350,"src":"2732:24:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":9053,"name":"bool","nodeType":"ElementaryTypeName","src":"2732:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":9056,"mutability":"mutable","name":"_globalPercentagesMigrated","nameLocation":"2878:26:29","nodeType":"VariableDeclaration","scope":9350,"src":"2864:40:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":9055,"name":"bool","nodeType":"ElementaryTypeName","src":"2864:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"documentation":{"id":9057,"nodeType":"StructuredDocumentation","src":"2911:262:29","text":" @notice Attempt to deploy this contract with invalid parameters.\n @dev ProtocolFeeController contracts return the address of the Vault they were deployed with. Ensure that both\n the old and new controllers reference the same vault."},"errorSelector":"d6f1cb05","id":9059,"name":"InvalidFeeController","nameLocation":"3184:20:29","nodeType":"ErrorDefinition","parameters":{"id":9058,"nodeType":"ParameterList","parameters":[],"src":"3204:2:29"},"src":"3178:29:29"},{"documentation":{"id":9060,"nodeType":"StructuredDocumentation","src":"3213:49:29","text":"@notice Migration can only be performed once."},"errorSelector":"ca1c3cbc","id":9062,"name":"AlreadyMigrated","nameLocation":"3273:15:29","nodeType":"ErrorDefinition","parameters":{"id":9061,"nodeType":"ParameterList","parameters":[],"src":"3288:2:29"},"src":"3267:24:29"},{"body":{"id":9113,"nodeType":"Block","src":"3398:477:29","statements":[{"expression":{"id":9078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9074,"name":"oldFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9043,"src":"3408:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":9075,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9065,"src":"3427:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":9076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3434:24:29","memberName":"getProtocolFeeController","nodeType":"MemberAccess","referencedDeclaration":1900,"src":"3427:31:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IProtocolFeeController_$613_$","typeString":"function () view external returns (contract IProtocolFeeController)"}},"id":9077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3427:33:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"src":"3408:52:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"id":9079,"nodeType":"ExpressionStatement","src":"3408:52:29"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":9088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"id":9084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":9080,"name":"_newFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9068,"src":"3593:17:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"id":9081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3611:5:29","memberName":"vault","nodeType":"MemberAccess","referencedDeclaration":419,"src":"3593:23:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IVault_$651_$","typeString":"function () view external returns (contract IVault)"}},"id":9082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3593:25:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":9083,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9065,"src":"3622:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"src":"3593:35:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"},"id":9087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9085,"name":"_newFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9068,"src":"3632:17:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":9086,"name":"oldFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9043,"src":"3653:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"src":"3632:37:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3593:76:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9093,"nodeType":"IfStatement","src":"3589:136:29","trueBody":{"id":9092,"nodeType":"Block","src":"3671:54:29","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9089,"name":"InvalidFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9059,"src":"3692:20:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3692:22:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9091,"nodeType":"RevertStatement","src":"3685:29:29"}]}},{"expression":{"id":9096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9094,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9049,"src":"3735:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9095,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9065,"src":"3743:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"src":"3735:14:29","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":9097,"nodeType":"ExpressionStatement","src":"3735:14:29"},{"expression":{"id":9100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9098,"name":"newFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9046,"src":"3759:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9099,"name":"_newFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9068,"src":"3778:17:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"src":"3759:36:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"id":9101,"nodeType":"ExpressionStatement","src":"3759:36:29"},{"expression":{"id":9111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9102,"name":"_authorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9052,"src":"3806:11:29","typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":9106,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9049,"src":"3845:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":9107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3851:13:29","memberName":"getAuthorizer","nodeType":"MemberAccess","referencedDeclaration":1965,"src":"3845:19:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IAuthorizer_$73_$","typeString":"function () view external returns (contract IAuthorizer)"}},"id":9108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3845:21:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IAuthorizer_$73","typeString":"contract IAuthorizer"}],"id":9105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3837:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9104,"name":"address","nodeType":"ElementaryTypeName","src":"3837:7:29","typeDescriptions":{}}},"id":9109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:30:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9103,"name":"IBasicAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"3820:16:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBasicAuthorizer_$32_$","typeString":"type(contract IBasicAuthorizer)"}},"id":9110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3820:48:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"}},"src":"3806:62:29","typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"}},"id":9112,"nodeType":"ExpressionStatement","src":"3806:62:29"}]},"id":9114,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":9071,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9065,"src":"3390:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}}],"id":9072,"kind":"baseConstructorSpecifier","modifierName":{"id":9070,"name":"SingletonAuthentication","nameLocations":["3366:23:29"],"nodeType":"IdentifierPath","referencedDeclaration":6357,"src":"3366:23:29"},"nodeType":"ModifierInvocation","src":"3366:31:29"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":9069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9065,"mutability":"mutable","name":"_vault","nameLocation":"3316:6:29","nodeType":"VariableDeclaration","scope":9114,"src":"3309:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"},"typeName":{"id":9064,"nodeType":"UserDefinedTypeName","pathNode":{"id":9063,"name":"IVault","nameLocations":["3309:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":651,"src":"3309:6:29"},"referencedDeclaration":651,"src":"3309:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"visibility":"internal"},{"constant":false,"id":9068,"mutability":"mutable","name":"_newFeeController","nameLocation":"3347:17:29","nodeType":"VariableDeclaration","scope":9114,"src":"3324:40:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"},"typeName":{"id":9067,"nodeType":"UserDefinedTypeName","pathNode":{"id":9066,"name":"IProtocolFeeController","nameLocations":["3324:22:29"],"nodeType":"IdentifierPath","referencedDeclaration":613,"src":"3324:22:29"},"referencedDeclaration":613,"src":"3324:22:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"visibility":"internal"}],"src":"3308:57:29"},"returnParameters":{"id":9073,"nodeType":"ParameterList","parameters":[],"src":"3398:0:29"},"scope":9350,"src":"3297:578:29","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":9122,"nodeType":"Block","src":"4123:34:29","statements":[{"expression":{"id":9120,"name":"_finalized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9054,"src":"4140:10:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":9119,"id":9121,"nodeType":"Return","src":"4133:17:29"}]},"documentation":{"id":9115,"nodeType":"StructuredDocumentation","src":"3881:179:29","text":" @notice Check whether migration has been completed.\n @dev It can only be done once.\n @return isComplete True if `finalizeMigration` has been called."},"functionSelector":"d7128084","id":9123,"implemented":true,"kind":"function","modifiers":[],"name":"isMigrationComplete","nameLocation":"4074:19:29","nodeType":"FunctionDefinition","parameters":{"id":9116,"nodeType":"ParameterList","parameters":[],"src":"4093:2:29"},"returnParameters":{"id":9119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9118,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9123,"src":"4117:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":9117,"name":"bool","nodeType":"ElementaryTypeName","src":"4117:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4116:6:29"},"scope":9350,"src":"4065:92:29","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":9176,"nodeType":"Block","src":"4635:1023:29","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":9132,"name":"isMigrationComplete","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9123,"src":"4649:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":9133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4649:21:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9138,"nodeType":"IfStatement","src":"4645:76:29","trueBody":{"id":9137,"nodeType":"Block","src":"4672:49:29","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9134,"name":"AlreadyMigrated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9062,"src":"4693:15:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4693:17:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9136,"nodeType":"RevertStatement","src":"4686:24:29"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":9141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9139,"name":"_globalPercentagesMigrated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9056,"src":"4819:26:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":9140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4849:5:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4819:35:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9150,"nodeType":"IfStatement","src":"4815:141:29","trueBody":{"id":9149,"nodeType":"Block","src":"4856:100:29","statements":[{"expression":{"id":9144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9142,"name":"_globalPercentagesMigrated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9056,"src":"4870:26:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":9143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4899:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4870:33:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9145,"nodeType":"ExpressionStatement","src":"4870:33:29"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":9146,"name":"_migrateGlobalPercentages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9305,"src":"4918:25:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":9147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4918:27:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9148,"nodeType":"ExpressionStatement","src":"4918:27:29"}]}},{"body":{"id":9174,"nodeType":"Block","src":"5496:156:29","statements":[{"expression":{"arguments":[{"baseExpression":{"id":9169,"name":"pools","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9127,"src":"5632:5:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":9171,"indexExpression":{"id":9170,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9152,"src":"5638:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5632:8:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":9165,"name":"newFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9046,"src":"5601:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}],"id":9164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5593:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9163,"name":"address","nodeType":"ElementaryTypeName","src":"5593:7:29","typeDescriptions":{}}},"id":9166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5593:25:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9162,"name":"ProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6298,"src":"5571:21:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProtocolFeeController_$6298_$","typeString":"type(contract ProtocolFeeController)"}},"id":9167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5571:48:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeController_$6298","typeString":"contract ProtocolFeeController"}},"id":9168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5620:11:29","memberName":"migratePool","nodeType":"MemberAccess","referencedDeclaration":5681,"src":"5571:60:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":9172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5571:70:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9173,"nodeType":"ExpressionStatement","src":"5571:70:29"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9155,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9152,"src":"5473:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":9156,"name":"pools","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9127,"src":"5477:5:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":9157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5483:6:29","memberName":"length","nodeType":"MemberAccess","src":"5477:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5473:16:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9175,"initializationExpression":{"assignments":[9152],"declarations":[{"constant":false,"id":9152,"mutability":"mutable","name":"i","nameLocation":"5466:1:29","nodeType":"VariableDeclaration","scope":9175,"src":"5458:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9151,"name":"uint256","nodeType":"ElementaryTypeName","src":"5458:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9154,"initialValue":{"hexValue":"30","id":9153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5470:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5458:13:29"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":9160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5491:3:29","subExpression":{"id":9159,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9152,"src":"5493:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9161,"nodeType":"ExpressionStatement","src":"5491:3:29"},"nodeType":"ForStatement","src":"5453:199:29"}]},"documentation":{"id":9124,"nodeType":"StructuredDocumentation","src":"4163:391:29","text":" @notice Migrate pools from the old fee controller to the new one.\n @dev This can be called multiple times, if there are too many pools for a single transaction. Note that the\n first time this is called, it will migrate the global fee percentages, then proceed with the first set of pools.\n @param pools The set of pools to be migrated in this call"},"functionSelector":"b8350e27","id":9177,"implemented":true,"kind":"function","modifiers":[{"id":9130,"kind":"modifierInvocation","modifierName":{"id":9129,"name":"nonReentrant","nameLocations":["4622:12:29"],"nodeType":"IdentifierPath","referencedDeclaration":4170,"src":"4622:12:29"},"nodeType":"ModifierInvocation","src":"4622:12:29"}],"name":"migratePools","nameLocation":"4568:12:29","nodeType":"FunctionDefinition","parameters":{"id":9128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9127,"mutability":"mutable","name":"pools","nameLocation":"4598:5:29","nodeType":"VariableDeclaration","scope":9177,"src":"4581:22:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":9125,"name":"address","nodeType":"ElementaryTypeName","src":"4581:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":9126,"nodeType":"ArrayTypeName","src":"4581:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"4580:24:29"},"returnParameters":{"id":9131,"nodeType":"ParameterList","parameters":[],"src":"4635:0:29"},"scope":9350,"src":"4559:1099:29","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":9208,"nodeType":"Block","src":"5723:324:29","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":9182,"name":"isMigrationComplete","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9123,"src":"5737:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":9183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5737:21:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9188,"nodeType":"IfStatement","src":"5733:76:29","trueBody":{"id":9187,"nodeType":"Block","src":"5760:49:29","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9184,"name":"AlreadyMigrated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9062,"src":"5781:15:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5781:17:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9186,"nodeType":"RevertStatement","src":"5774:24:29"}]}},{"expression":{"id":9191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9189,"name":"_finalized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9054,"src":"5819:10:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":9190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5832:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5819:17:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9192,"nodeType":"ExpressionStatement","src":"5819:17:29"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":9193,"name":"_migrateFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9349,"src":"5898:21:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":9194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5898:23:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9195,"nodeType":"ExpressionStatement","src":"5898:23:29"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":9199,"name":"_authorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9052,"src":"5992:11:29","typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"}},"id":9200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6004:18:29","memberName":"DEFAULT_ADMIN_ROLE","nodeType":"MemberAccess","referencedDeclaration":10,"src":"5992:30:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":9201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5992:32:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":9204,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6034:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}],"id":9203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6026:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9202,"name":"address","nodeType":"ElementaryTypeName","src":"6026:7:29","typeDescriptions":{}}},"id":9205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6026:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":9196,"name":"_authorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9052,"src":"5967:11:29","typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"}},"id":9198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5979:12:29","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":31,"src":"5967:24:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) external"}},"id":9206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5967:73:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9207,"nodeType":"ExpressionStatement","src":"5967:73:29"}]},"functionSelector":"b78b6087","id":9209,"implemented":true,"kind":"function","modifiers":[{"id":9180,"kind":"modifierInvocation","modifierName":{"id":9179,"name":"authenticate","nameLocations":["5710:12:29"],"nodeType":"IdentifierPath","referencedDeclaration":2439,"src":"5710:12:29"},"nodeType":"ModifierInvocation","src":"5710:12:29"}],"name":"finalizeMigration","nameLocation":"5673:17:29","nodeType":"FunctionDefinition","parameters":{"id":9178,"nodeType":"ParameterList","parameters":[],"src":"5690:2:29"},"returnParameters":{"id":9181,"nodeType":"ParameterList","parameters":[],"src":"5723:0:29"},"scope":9350,"src":"5664:383:29","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":9304,"nodeType":"Block","src":"6099:1135:29","statements":[{"assignments":[9213],"declarations":[{"constant":false,"id":9213,"mutability":"mutable","name":"swapFeeRole","nameLocation":"6194:11:29","nodeType":"VariableDeclaration","scope":9304,"src":"6186:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":9212,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6186:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":9225,"initialValue":{"arguments":[{"expression":{"expression":{"id":9221,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"6276:22:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IProtocolFeeController_$613_$","typeString":"type(contract IProtocolFeeController)"}},"id":9222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6299:34:29","memberName":"setGlobalProtocolSwapFeePercentage","nodeType":"MemberAccess","referencedDeclaration":541,"src":"6276:57:29","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_uint256_$returns$__$","typeString":"function IProtocolFeeController.setGlobalProtocolSwapFeePercentage(uint256)"}},"id":9223,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6334:8:29","memberName":"selector","nodeType":"MemberAccess","src":"6276:66:29","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[{"arguments":[{"id":9217,"name":"newFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9046,"src":"6232:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}],"id":9216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6224:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9215,"name":"address","nodeType":"ElementaryTypeName","src":"6224:7:29","typeDescriptions":{}}},"id":9218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6224:25:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9214,"name":"IAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"6208:15:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAuthentication_$47_$","typeString":"type(contract IAuthentication)"}},"id":9219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6208:42:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthentication_$47","typeString":"contract IAuthentication"}},"id":9220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6251:11:29","memberName":"getActionId","nodeType":"MemberAccess","referencedDeclaration":46,"src":"6208:54:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes4_$returns$_t_bytes32_$","typeString":"function (bytes4) view external returns (bytes32)"}},"id":9224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6208:144:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6186:166:29"},{"assignments":[9227],"declarations":[{"constant":false,"id":9227,"mutability":"mutable","name":"yieldFeeRole","nameLocation":"6371:12:29","nodeType":"VariableDeclaration","scope":9304,"src":"6363:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":9226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6363:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":9239,"initialValue":{"arguments":[{"expression":{"expression":{"id":9235,"name":"IProtocolFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"6454:22:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IProtocolFeeController_$613_$","typeString":"type(contract IProtocolFeeController)"}},"id":9236,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6477:35:29","memberName":"setGlobalProtocolYieldFeePercentage","nodeType":"MemberAccess","referencedDeclaration":547,"src":"6454:58:29","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_uint256_$returns$__$","typeString":"function IProtocolFeeController.setGlobalProtocolYieldFeePercentage(uint256)"}},"id":9237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6513:8:29","memberName":"selector","nodeType":"MemberAccess","src":"6454:67:29","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[{"arguments":[{"id":9231,"name":"newFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9046,"src":"6410:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}],"id":9230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6402:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9229,"name":"address","nodeType":"ElementaryTypeName","src":"6402:7:29","typeDescriptions":{}}},"id":9232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6402:25:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9228,"name":"IAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"6386:15:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAuthentication_$47_$","typeString":"type(contract IAuthentication)"}},"id":9233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6386:42:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthentication_$47","typeString":"contract IAuthentication"}},"id":9234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6429:11:29","memberName":"getActionId","nodeType":"MemberAccess","referencedDeclaration":46,"src":"6386:54:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes4_$returns$_t_bytes32_$","typeString":"function (bytes4) view external returns (bytes32)"}},"id":9238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6386:145:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6363:168:29"},{"expression":{"arguments":[{"id":9243,"name":"swapFeeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9213,"src":"6564:11:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":9246,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6585:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}],"id":9245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6577:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9244,"name":"address","nodeType":"ElementaryTypeName","src":"6577:7:29","typeDescriptions":{}}},"id":9247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6577:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":9240,"name":"_authorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9052,"src":"6542:11:29","typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"}},"id":9242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6554:9:29","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":17,"src":"6542:21:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) external"}},"id":9248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6542:49:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9249,"nodeType":"ExpressionStatement","src":"6542:49:29"},{"expression":{"arguments":[{"id":9253,"name":"yieldFeeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9227,"src":"6623:12:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":9256,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6645:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}],"id":9255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6637:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9254,"name":"address","nodeType":"ElementaryTypeName","src":"6637:7:29","typeDescriptions":{}}},"id":9257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6637:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":9250,"name":"_authorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9052,"src":"6601:11:29","typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"}},"id":9252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6613:9:29","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":17,"src":"6601:21:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) external"}},"id":9258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6601:50:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9259,"nodeType":"ExpressionStatement","src":"6601:50:29"},{"assignments":[9261],"declarations":[{"constant":false,"id":9261,"mutability":"mutable","name":"globalSwapFeePercentage","nameLocation":"6717:23:29","nodeType":"VariableDeclaration","scope":9304,"src":"6709:31:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9260,"name":"uint256","nodeType":"ElementaryTypeName","src":"6709:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9265,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":9262,"name":"oldFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9043,"src":"6743:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"id":9263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6760:34:29","memberName":"getGlobalProtocolSwapFeePercentage","nodeType":"MemberAccess","referencedDeclaration":431,"src":"6743:51:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":9264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6743:53:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6709:87:29"},{"assignments":[9267],"declarations":[{"constant":false,"id":9267,"mutability":"mutable","name":"globalYieldFeePercentage","nameLocation":"6814:24:29","nodeType":"VariableDeclaration","scope":9304,"src":"6806:32:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9266,"name":"uint256","nodeType":"ElementaryTypeName","src":"6806:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9271,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":9268,"name":"oldFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9043,"src":"6841:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"id":9269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6858:35:29","memberName":"getGlobalProtocolYieldFeePercentage","nodeType":"MemberAccess","referencedDeclaration":437,"src":"6841:52:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":9270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6841:54:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6806:89:29"},{"expression":{"arguments":[{"id":9275,"name":"globalSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9261,"src":"6958:23:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":9272,"name":"newFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9046,"src":"6906:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"id":9274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6923:34:29","memberName":"setGlobalProtocolSwapFeePercentage","nodeType":"MemberAccess","referencedDeclaration":541,"src":"6906:51:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":9276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6906:76:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9277,"nodeType":"ExpressionStatement","src":"6906:76:29"},{"expression":{"arguments":[{"id":9281,"name":"globalYieldFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9267,"src":"7045:24:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":9278,"name":"newFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9046,"src":"6992:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}},"id":9280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7009:35:29","memberName":"setGlobalProtocolYieldFeePercentage","nodeType":"MemberAccess","referencedDeclaration":547,"src":"6992:52:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":9282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6992:78:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9283,"nodeType":"ExpressionStatement","src":"6992:78:29"},{"expression":{"arguments":[{"id":9287,"name":"swapFeeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9213,"src":"7137:11:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":9290,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7158:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}],"id":9289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7150:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9288,"name":"address","nodeType":"ElementaryTypeName","src":"7150:7:29","typeDescriptions":{}}},"id":9291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7150:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":9284,"name":"_authorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9052,"src":"7112:11:29","typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"}},"id":9286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7124:12:29","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":31,"src":"7112:24:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) external"}},"id":9292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7112:52:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9293,"nodeType":"ExpressionStatement","src":"7112:52:29"},{"expression":{"arguments":[{"id":9297,"name":"yieldFeeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9227,"src":"7199:12:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":9300,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7221:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}],"id":9299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7213:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9298,"name":"address","nodeType":"ElementaryTypeName","src":"7213:7:29","typeDescriptions":{}}},"id":9301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7213:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":9294,"name":"_authorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9052,"src":"7174:11:29","typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"}},"id":9296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7186:12:29","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":31,"src":"7174:24:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) external"}},"id":9302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7174:53:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9303,"nodeType":"ExpressionStatement","src":"7174:53:29"}]},"id":9305,"implemented":true,"kind":"function","modifiers":[],"name":"_migrateGlobalPercentages","nameLocation":"6062:25:29","nodeType":"FunctionDefinition","parameters":{"id":9210,"nodeType":"ParameterList","parameters":[],"src":"6087:2:29"},"returnParameters":{"id":9211,"nodeType":"ParameterList","parameters":[],"src":"6099:0:29"},"scope":9350,"src":"6053:1181:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":9348,"nodeType":"Block","src":"7282:360:29","statements":[{"assignments":[9309],"declarations":[{"constant":false,"id":9309,"mutability":"mutable","name":"setFeeControllerRole","nameLocation":"7300:20:29","nodeType":"VariableDeclaration","scope":9348,"src":"7292:28:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":9308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7292:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":9321,"initialValue":{"arguments":[{"expression":{"expression":{"id":9317,"name":"IVaultAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"7380:11:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IVaultAdmin_$941_$","typeString":"type(contract IVaultAdmin)"}},"id":9318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7392:24:29","memberName":"setProtocolFeeController","nodeType":"MemberAccess","referencedDeclaration":802,"src":"7380:36:29","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_contract$_IProtocolFeeController_$613_$returns$__$","typeString":"function IVaultAdmin.setProtocolFeeController(contract IProtocolFeeController)"}},"id":9319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7417:8:29","memberName":"selector","nodeType":"MemberAccess","src":"7380:45:29","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[{"arguments":[{"id":9313,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9049,"src":"7347:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}],"id":9312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7339:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9311,"name":"address","nodeType":"ElementaryTypeName","src":"7339:7:29","typeDescriptions":{}}},"id":9314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7339:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9310,"name":"IAuthentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"7323:15:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAuthentication_$47_$","typeString":"type(contract IAuthentication)"}},"id":9315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7323:31:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthentication_$47","typeString":"contract IAuthentication"}},"id":9316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7355:11:29","memberName":"getActionId","nodeType":"MemberAccess","referencedDeclaration":46,"src":"7323:43:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes4_$returns$_t_bytes32_$","typeString":"function (bytes4) view external returns (bytes32)"}},"id":9320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7323:112:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7292:143:29"},{"expression":{"arguments":[{"id":9325,"name":"setFeeControllerRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9309,"src":"7468:20:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":9328,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7498:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}],"id":9327,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7490:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9326,"name":"address","nodeType":"ElementaryTypeName","src":"7490:7:29","typeDescriptions":{}}},"id":9329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7490:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":9322,"name":"_authorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9052,"src":"7446:11:29","typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"}},"id":9324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7458:9:29","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":17,"src":"7446:21:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) external"}},"id":9330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7446:58:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9331,"nodeType":"ExpressionStatement","src":"7446:58:29"},{"expression":{"arguments":[{"id":9335,"name":"newFeeController","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9046,"src":"7546:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IProtocolFeeController_$613","typeString":"contract IProtocolFeeController"}],"expression":{"id":9332,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9049,"src":"7515:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$651","typeString":"contract IVault"}},"id":9334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7521:24:29","memberName":"setProtocolFeeController","nodeType":"MemberAccess","referencedDeclaration":802,"src":"7515:30:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_contract$_IProtocolFeeController_$613_$returns$__$","typeString":"function (contract IProtocolFeeController) external"}},"id":9336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7515:48:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9337,"nodeType":"ExpressionStatement","src":"7515:48:29"},{"expression":{"arguments":[{"id":9341,"name":"setFeeControllerRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9309,"src":"7599:20:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":9344,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7629:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeeControllerMigration_$9350","typeString":"contract ProtocolFeeControllerMigration"}],"id":9343,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7621:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9342,"name":"address","nodeType":"ElementaryTypeName","src":"7621:7:29","typeDescriptions":{}}},"id":9345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7621:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":9338,"name":"_authorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9052,"src":"7574:11:29","typeDescriptions":{"typeIdentifier":"t_contract$_IBasicAuthorizer_$32","typeString":"contract IBasicAuthorizer"}},"id":9340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7586:12:29","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":31,"src":"7574:24:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) external"}},"id":9346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7574:61:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9347,"nodeType":"ExpressionStatement","src":"7574:61:29"}]},"id":9349,"implemented":true,"kind":"function","modifiers":[],"name":"_migrateFeeController","nameLocation":"7249:21:29","nodeType":"FunctionDefinition","parameters":{"id":9306,"nodeType":"ParameterList","parameters":[],"src":"7270:2:29"},"returnParameters":{"id":9307,"nodeType":"ParameterList","parameters":[],"src":"7282:0:29"},"scope":9350,"src":"7240:402:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":9351,"src":"2282:5362:29","usedErrors":[38,4159,9059,9062],"usedEvents":[]}],"src":"46:7599:29"},"id":29}},"contracts":{"@balancer-labs/v3-interfaces/contracts/governance-scripts/IBasicAuthorizer.sol":{"IBasicAuthorizer":{"abi":[{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"actionId","type":"bytes32"},{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"where","type":"address"}],"name":"canPerform","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","canPerform(bytes32,address,address)":"9be2a884","grantRole(bytes32,address)":"2f2ff15d","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"}],\"name\":\"canPerform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"params\":{\"account\":\"Account trying to perform the action\",\"actionId\":\"Identifier for the action to be performed\",\"where\":\"Target contract for the action\"},\"returns\":{\"success\":\"True if the action is permitted\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"notice\":\"Returns true if `account` can perform the action described by `actionId` in the contract `where`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/governance-scripts/IBasicAuthorizer.sol\":\"IBasicAuthorizer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/governance-scripts/IBasicAuthorizer.sol\":{\"keccak256\":\"0x434eda908f66d99d967c2c2b233337227c331cd79655ec5b0ddcc76db7a20606\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b0b6c4bc095113dfbaeb9d9a6f9602f0f1a79b075c82d5ccccff7a1b67af1ce8\",\"dweb:/ipfs/QmaePfy8V5U9UFqkDtdTvPjJLmo1XEorPrC1fMVB35n86Y\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"IAuthentication":{"abi":[{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"actionId","type":"bytes32"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"actionId\":\"The computed actionId\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}]},\"kind\":\"user\",\"methods\":{\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"notice\":\"Simple interface for permissioned calling of external functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":\"IAuthentication\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"IRateProvider":{"abi":[{"inputs":[],"name":"getRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getRate()":"679aefce"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRate()\":{\"details\":\"The meaning of this rate depends on the context. Note that there may be an error associated with a token rate, and the caller might require a certain rounding direction to ensure correctness. This (legacy) interface does not take a rounding direction or return an error, so great care must be taken when interpreting and using rates in downstream computations.\",\"returns\":{\"rate\":\"The current token rate\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRate()\":{\"notice\":\"An 18 decimal fixed point number representing the exchange rate of one token to another related token.\"}},\"notice\":\"General interface for token exchange rates.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":\"IRateProvider\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol":{"IAuthorizer":{"abi":[{"inputs":[{"internalType":"bytes32","name":"actionId","type":"bytes32"},{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"where","type":"address"}],"name":"canPerform","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"canPerform(bytes32,address,address)":"9be2a884"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"}],\"name\":\"canPerform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"params\":{\"account\":\"Account trying to perform the action\",\"actionId\":\"Identifier for the action to be performed\",\"where\":\"Target contract for the action\"},\"returns\":{\"success\":\"True if the action is permitted\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"notice\":\"Returns true if `account` can perform the action described by `actionId` in the contract `where`.\"}},\"notice\":\"Interface to the Vault's permission system.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":\"IAuthorizer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol":{"IHooks":{"abi":[{"inputs":[],"name":"getHookFlags","outputs":[{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"}],"internalType":"struct HookFlags","name":"hookFlags","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256[]","name":"amountsInScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"amountsInRaw","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onAfterAddLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256[]","name":"hookAdjustedAmountsInRaw","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onAfterInitialize","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOutScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"amountsOutRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onAfterRemoveLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256[]","name":"hookAdjustedAmountsOutRaw","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountInScaled18","type":"uint256"},{"internalType":"uint256","name":"amountOutScaled18","type":"uint256"},{"internalType":"uint256","name":"tokenInBalanceScaled18","type":"uint256"},{"internalType":"uint256","name":"tokenOutBalanceScaled18","type":"uint256"},{"internalType":"uint256","name":"amountCalculatedScaled18","type":"uint256"},{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct AfterSwapParams","name":"params","type":"tuple"}],"name":"onAfterSwap","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256","name":"hookAdjustedAmountCalculatedRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256[]","name":"maxAmountsInScaled18","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onBeforeAddLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onBeforeInitialize","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOutScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"onBeforeRemoveLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"params","type":"tuple"},{"internalType":"address","name":"pool","type":"address"}],"name":"onBeforeSwap","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"params","type":"tuple"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"}],"name":"onComputeDynamicSwapFeePercentage","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256","name":"dynamicSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"factory","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"onRegister","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getHookFlags()":"d77153a7","onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)":"976907cc","onAfterInitialize(uint256[],uint256,bytes)":"38be241d","onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)":"2754888d","onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))":"18b6eb55","onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)":"45421ec7","onBeforeInitialize(uint256[],bytes)":"1c149e28","onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)":"ba5f9f40","onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)":"5211fa77","onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)":"a0e8f5ac","onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))":"0b89f182"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getHookFlags\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"}],\"internalType\":\"struct HookFlags\",\"name\":\"hookFlags\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onAfterAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"hookAdjustedAmountsInRaw\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onAfterInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onAfterRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"hookAdjustedAmountsOutRaw\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenInBalanceScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutBalanceScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCalculatedScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct AfterSwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"onAfterSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"hookAdjustedAmountCalculatedRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsInScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onBeforeAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onBeforeInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOutScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onBeforeRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"onBeforeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"onComputeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dynamicSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"onRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Hooks are functions invoked by the Vault at specific points in the flow of each operation. This guarantees that they are called in the correct order, and with the correct arguments. To maintain this security, these functions should only be called by the Vault. The recommended way to do this is to derive the hook contract from `BaseHooks`, then use the `onlyVault` modifier from `VaultGuard`. (See the examples in /pool-hooks.)\",\"kind\":\"dev\",\"methods\":{\"getHookFlags()\":{\"details\":\"The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero). `onRegister` is the only \\\"mandatory\\\" hook.\",\"returns\":{\"hookFlags\":\"Flags indicating which hooks the contract supports\"}},\"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)\":{\"details\":\"Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"amountsInRaw\":\"Actual amounts of tokens added, sorted in token registration order\",\"amountsInScaled18\":\"Actual amounts of tokens added, sorted in token registration order\",\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"bptAmountOut\":\"Amount of pool tokens minted\",\"kind\":\"The add liquidity operation type (e.g., proportional, custom)\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated an add liquidity operation on the Vault\",\"userData\":\"Additional (optional) data provided by the user\"},\"returns\":{\"hookAdjustedAmountsInRaw\":\"New amountsInRaw, potentially modified by the hook\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onAfterInitialize(uint256[],uint256,bytes)\":{\"details\":\"Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"bptAmountOut\":\"Amount of pool tokens minted during initialization\",\"exactAmountsIn\":\"Exact amounts of input tokens\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool accepts the initialization results\"}},\"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)\":{\"details\":\"Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"amountsOutRaw\":\"Actual amount of tokens to receive, sorted in token registration order\",\"amountsOutScaled18\":\"Scaled amount of tokens to receive, sorted in token registration order\",\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"bptAmountIn\":\"Amount of pool tokens to burn\",\"kind\":\"The type of remove liquidity operation (e.g., proportional, custom)\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated a remove liquidity operation on the Vault\",\"userData\":\"Additional (optional) data provided by the user\"},\"returns\":{\"hookAdjustedAmountsOutRaw\":\"New amountsOutRaw, potentially modified by the hook\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))\":{\"details\":\"Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see above for struct definition)\"},\"returns\":{\"hookAdjustedAmountCalculatedRaw\":\"New amount calculated, potentially modified by the hook\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"kind\":\"The add liquidity operation type (e.g., proportional, custom)\",\"maxAmountsInScaled18\":\"Maximum amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated an add liquidity operation on the Vault\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeInitialize(uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with initialization\"}},\"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"kind\":\"The type of remove liquidity operation (e.g., proportional, custom)\",\"maxBptAmountIn\":\"Maximum amount of input pool tokens\",\"minAmountsOutScaled18\":\"Minimum output amounts, sorted in token registration order\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated a remove liquidity operation on the Vault\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)\":{\"details\":\"Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see PoolSwapParams for struct definition)\",\"pool\":\"Pool address, used to get pool information from the Vault (poolData, token config, etc.)\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)\":{\"details\":\"Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see PoolSwapParams for struct definition)\",\"pool\":\"Pool address, used to get pool information from the Vault (poolData, token config, etc.)\",\"staticSwapFeePercentage\":\"18-decimal FP value of the static swap fee percentage, for reference\"},\"returns\":{\"dynamicSwapFeePercentage\":\"Value of the swap fee percentage, as an 18-decimal FP value\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))\":{\"details\":\"Returns true if registration was successful, and false to revert the pool registration. Make sure this function is properly implemented (e.g. check the factory, and check that the given pool is from the factory). The Vault address will be msg.sender.\",\"params\":{\"factory\":\"Address of the pool factory (contract deploying the pool)\",\"liquidityManagement\":\"Liquidity management flags indicating which functions are enabled\",\"pool\":\"Address of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"},\"returns\":{\"success\":\"True if the hook allowed the registration, false otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getHookFlags()\":{\"notice\":\"Return the set of hooks implemented by the contract.\"},\"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)\":{\"notice\":\"Hook to be executed after adding liquidity.\"},\"onAfterInitialize(uint256[],uint256,bytes)\":{\"notice\":\"Hook to be executed after pool initialization.\"},\"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"Hook to be executed after removing liquidity.\"},\"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))\":{\"notice\":\"Called after a swap to perform further actions once the balances have been updated by the swap.\"},\"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)\":{\"notice\":\"Hook to be executed before adding liquidity.\"},\"onBeforeInitialize(uint256[],bytes)\":{\"notice\":\"Hook executed before pool initialization.\"},\"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)\":{\"notice\":\"Hook to be executed before removing liquidity.\"},\"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)\":{\"notice\":\"Called before a swap to give the Pool an opportunity to perform actions.\"},\"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)\":{\"notice\":\"Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees.\"},\"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))\":{\"notice\":\"Hook executed when a pool is registered with a non-zero hooks contract.\"}},\"notice\":\"Interface for pool hooks.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":\"IHooks\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol":{"IProtocolFeeController":{"abi":[{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"pool","type":"address"}],"name":"CallerIsNotPoolCreator","type":"error"},{"inputs":[],"name":"PoolCreatorFeePercentageTooHigh","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolCreatorNotRegistered","type":"error"},{"inputs":[],"name":"ProtocolSwapFeePercentageTooHigh","type":"error"},{"inputs":[],"name":"ProtocolYieldFeePercentageTooHigh","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"GlobalProtocolSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"yieldFeePercentage","type":"uint256"}],"name":"GlobalProtocolYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"bool","name":"isProtocolFeeExempt","type":"bool"}],"name":"InitialPoolAggregateSwapFeePercentage","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"},{"indexed":false,"internalType":"bool","name":"isProtocolFeeExempt","type":"bool"}],"name":"InitialPoolAggregateYieldFeePercentage","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PoolCreatorFeesWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolCreatorSwapFeePercentage","type":"uint256"}],"name":"PoolCreatorSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolCreatorYieldFeePercentage","type":"uint256"}],"name":"PoolCreatorYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"poolCreator","type":"address"},{"indexed":false,"internalType":"bool","name":"protocolFeeExempt","type":"bool"}],"name":"PoolRegisteredWithFeeController","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ProtocolFeesWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ProtocolSwapFeeCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"ProtocolSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ProtocolYieldFeeCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"yieldFeePercentage","type":"uint256"}],"name":"ProtocolYieldFeePercentageChanged","type":"event"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"protocolFeePercentage","type":"uint256"},{"internalType":"uint256","name":"poolCreatorFeePercentage","type":"uint256"}],"name":"computeAggregateFeePercentage","outputs":[{"internalType":"uint256","name":"aggregateFeePercentage","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getGlobalProtocolSwapFeePercentage","outputs":[{"internalType":"uint256","name":"protocolSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGlobalProtocolYieldFeePercentage","outputs":[{"internalType":"uint256","name":"protocolYieldFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolCreatorFeeAmounts","outputs":[{"internalType":"uint256[]","name":"feeAmounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolCreatorSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolCreatorYieldFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolProtocolSwapFeeInfo","outputs":[{"internalType":"uint256","name":"protocolSwapFeePercentage","type":"uint256"},{"internalType":"bool","name":"isOverride","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolProtocolYieldFeeInfo","outputs":[{"internalType":"uint256","name":"protocolYieldFeePercentage","type":"uint256"},{"internalType":"bool","name":"isOverride","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getProtocolFeeAmounts","outputs":[{"internalType":"uint256[]","name":"feeAmounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"},{"internalType":"bool","name":"protocolFeeExempt","type":"bool"}],"name":"registerPool","outputs":[{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newProtocolSwapFeePercentage","type":"uint256"}],"name":"setGlobalProtocolSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newProtocolYieldFeePercentage","type":"uint256"}],"name":"setGlobalProtocolYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"poolCreatorSwapFeePercentage","type":"uint256"}],"name":"setPoolCreatorSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"poolCreatorYieldFeePercentage","type":"uint256"}],"name":"setPoolCreatorYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newProtocolSwapFeePercentage","type":"uint256"}],"name":"setProtocolSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newProtocolYieldFeePercentage","type":"uint256"}],"name":"setProtocolYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"updateProtocolSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"updateProtocolYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"withdrawPoolCreatorFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawPoolCreatorFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"withdrawProtocolFeesForToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"collectAggregateFees(address)":"8f4ab9ca","computeAggregateFeePercentage(uint256,uint256)":"0ddd60c6","getGlobalProtocolSwapFeePercentage()":"7869ee18","getGlobalProtocolYieldFeePercentage()":"55fb76af","getPoolCreatorFeeAmounts(address)":"9e95f3fd","getPoolCreatorSwapFeePercentage(address)":"0b8e059b","getPoolCreatorYieldFeePercentage(address)":"0252aab5","getPoolProtocolSwapFeeInfo(address)":"5c15a0b4","getPoolProtocolYieldFeeInfo(address)":"7a2b97dc","getProtocolFeeAmounts(address)":"8df44c54","isPoolRegistered(address)":"c673bdaf","registerPool(address,address,bool)":"77ff76e7","setGlobalProtocolSwapFeePercentage(uint256)":"8a3c5c69","setGlobalProtocolYieldFeePercentage(uint256)":"a93df2a4","setPoolCreatorSwapFeePercentage(address,uint256)":"1377c16c","setPoolCreatorYieldFeePercentage(address,uint256)":"3af52712","setProtocolSwapFeePercentage(address,uint256)":"fd267f39","setProtocolYieldFeePercentage(address,uint256)":"abaa3356","updateProtocolSwapFeePercentage(address)":"71ecc8fb","updateProtocolYieldFeePercentage(address)":"71447ea8","vault()":"fbfa77cf","withdrawPoolCreatorFees(address)":"52f125f0","withdrawPoolCreatorFees(address,address)":"f7061445","withdrawProtocolFees(address,address)":"cf7b287f","withdrawProtocolFeesForToken(address,address,address)":"b53a70b2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"CallerIsNotPoolCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolCreatorFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreatorNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolSwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolYieldFeePercentageTooHigh\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"GlobalProtocolSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"GlobalProtocolYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProtocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"InitialPoolAggregateSwapFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProtocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"InitialPoolAggregateYieldFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolCreatorFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolCreatorSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"PoolCreatorSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolCreatorYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"PoolCreatorYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"PoolRegisteredWithFeeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolSwapFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ProtocolSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolYieldFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ProtocolYieldFeePercentageChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolCreatorFeePercentage\",\"type\":\"uint256\"}],\"name\":\"computeAggregateFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aggregateFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalProtocolSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalProtocolYieldFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolYieldFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCreatorFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCreatorSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCreatorYieldFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolProtocolSwapFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOverride\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolProtocolYieldFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolYieldFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOverride\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getProtocolFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setGlobalProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setGlobalProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolCreatorSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setPoolCreatorSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolCreatorYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setPoolCreatorYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"updateProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"updateProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"withdrawPoolCreatorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawPoolCreatorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFeesForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CallerIsNotPoolCreator(address,address)\":[{\"params\":{\"caller\":\"The account attempting to withdraw pool creator fees\",\"pool\":\"The pool the caller tried to withdraw from\"}}],\"PoolCreatorNotRegistered(address)\":[{\"params\":{\"pool\":\"The pool with no creator\"}}],\"ProtocolSwapFeePercentageTooHigh()\":[{\"details\":\"Note that this is checked for both the global and pool-specific protocol swap fee percentages.\"}],\"ProtocolYieldFeePercentageTooHigh()\":[{\"details\":\"Note that this is checked for both the global and pool-specific protocol yield fee percentages.\"}]},\"events\":{\"GlobalProtocolSwapFeePercentageChanged(uint256)\":{\"params\":{\"swapFeePercentage\":\"The updated protocol swap fee percentage\"}},\"GlobalProtocolYieldFeePercentageChanged(uint256)\":{\"params\":{\"yieldFeePercentage\":\"The updated protocol yield fee percentage\"}},\"InitialPoolAggregateSwapFeePercentage(address,uint256,bool)\":{\"details\":\"If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will equal the current global swap fee percentage.\",\"params\":{\"aggregateSwapFeePercentage\":\"The initial aggregate swap fee percentage\",\"isProtocolFeeExempt\":\"True if the pool is exempt from taking protocol fees initially\",\"pool\":\"The pool being registered\"}},\"InitialPoolAggregateYieldFeePercentage(address,uint256,bool)\":{\"details\":\"If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will equal the current global yield fee percentage.\",\"params\":{\"aggregateYieldFeePercentage\":\"The initial aggregate yield fee percentage\",\"isProtocolFeeExempt\":\"True if the pool is exempt from taking protocol fees initially\",\"pool\":\"The pool being registered\"}},\"PoolCreatorFeesWithdrawn(address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the fee token that was withdrawn\",\"pool\":\"The pool from which pool creator fees are being withdrawn\",\"recipient\":\"The recipient of the funds (the pool creator if permissionless, or another account)\",\"token\":\"The token being withdrawn\"}},\"PoolCreatorSwapFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose pool creator swap fee will be changed\",\"poolCreatorSwapFeePercentage\":\"The new pool creator swap fee percentage for the pool\"}},\"PoolCreatorYieldFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose pool creator yield fee will be changed\",\"poolCreatorYieldFeePercentage\":\"The new pool creator yield fee percentage for the pool\"}},\"PoolRegisteredWithFeeController(address,address,bool)\":{\"details\":\"The `PoolRegistered` event includes the `roleAccounts` field, which also records the pool creator, but this simpler event is also provided for convenience. Though `InitialPoolAggregateSwapFeePercentage` and its yield fee counterpart also include the protocol fee exemption flag, we might as well include it here as well.\",\"params\":{\"pool\":\"The address of the pool being registered\",\"poolCreator\":\"The address of the pool creator (non-zero, or the event would not be emitted)\",\"protocolFeeExempt\":\"True if the pool is initially exempt from protocol fees\"}},\"ProtocolFeesWithdrawn(address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the fee token that was withdrawn\",\"pool\":\"The pool from which protocol fees are being withdrawn\",\"recipient\":\"The recipient of the funds\",\"token\":\"The token being withdrawn\"}},\"ProtocolSwapFeeCollected(address,address,uint256)\":{\"details\":\"Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs in the Vault, but fee collection happens in the ProtocolFeeController, the swap fees reported here may encompass multiple operations.\",\"params\":{\"amount\":\"The amount of the token collected in fees\",\"pool\":\"The pool on which the swap fee was charged\",\"token\":\"The token in which the swap fee was charged\"}},\"ProtocolSwapFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose protocol swap fee will be changed\",\"swapFeePercentage\":\"The updated protocol swap fee percentage\"}},\"ProtocolYieldFeeCollected(address,address,uint256)\":{\"details\":\"Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs in the Vault, but fee collection happens in the ProtocolFeeController, the yield fees reported here may encompass multiple operations.\",\"params\":{\"amount\":\"The amount of the token collected in fees\",\"pool\":\"The pool on which the yield fee was charged\",\"token\":\"The token in which the yield fee was charged\"}},\"ProtocolYieldFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose protocol yield fee will be changed\",\"yieldFeePercentage\":\"The updated protocol yield fee percentage\"}}},\"kind\":\"dev\",\"methods\":{\"collectAggregateFees(address)\":{\"params\":{\"pool\":\"The pool with aggregate fees\"}},\"computeAggregateFeePercentage(uint256,uint256)\":{\"details\":\"Not tied to any particular pool; this just performs the low-level \\\"additive fee\\\" calculation. Note that pool creator fees are calculated based on creatorAndLpFees, and not in totalFees. Since aggregate fees are stored in the Vault with 24-bit precision, this will truncate any values that require greater precision. It is expected that pool creators will negotiate with the DAO and agree on reasonable values for these fee components, but the truncation ensures it will not revert for any valid set of fee percentages. See example below: tokenOutAmount = 10000; poolSwapFeePct = 10%; protocolFeePct = 40%; creatorFeePct = 60% totalFees = tokenOutAmount * poolSwapFeePct = 10000 * 10% = 1000 protocolFees = totalFees * protocolFeePct = 1000 * 40% = 400 creatorAndLpFees = totalFees - protocolFees = 1000 - 400 = 600 creatorFees = creatorAndLpFees * creatorFeePct = 600 * 60% = 360 lpFees (will stay in the pool) = creatorAndLpFees - creatorFees = 600 - 360 = 240\",\"params\":{\"poolCreatorFeePercentage\":\"The pool creator portion of the aggregate fee percentage\",\"protocolFeePercentage\":\"The protocol portion of the aggregate fee percentage\"},\"returns\":{\"aggregateFeePercentage\":\"The computed aggregate percentage\"}},\"getGlobalProtocolSwapFeePercentage()\":{\"returns\":{\"protocolSwapFeePercentage\":\"The global protocol swap fee percentage\"}},\"getGlobalProtocolYieldFeePercentage()\":{\"returns\":{\"protocolYieldFeePercentage\":\"The global protocol yield fee percentage\"}},\"getPoolCreatorFeeAmounts(address)\":{\"details\":\"Includes both swap and yield fees.\",\"params\":{\"pool\":\"The address of the pool on which fees were collected\"},\"returns\":{\"feeAmounts\":\"The total amounts of each token available for withdrawal, sorted in token registration order\"}},\"getPoolCreatorSwapFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"_0\":\"poolCreatorSwapFeePercentage The pool creator swap fee component of the aggregate swap fee\"}},\"getPoolCreatorYieldFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"_0\":\"poolCreatorSwapFeePercentage The pool creator yield fee component of the aggregate yield fee\"}},\"getPoolProtocolSwapFeeInfo(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"isOverride\":\"True if the protocol fee has been overridden\",\"protocolSwapFeePercentage\":\"The protocol swap fee percentage for the given pool\"}},\"getPoolProtocolYieldFeeInfo(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"isOverride\":\"True if the protocol fee has been overridden\",\"protocolYieldFeePercentage\":\"The protocol yield fee percentage for the given pool\"}},\"getProtocolFeeAmounts(address)\":{\"details\":\"Includes both swap and yield fees.\",\"params\":{\"pool\":\"The address of the pool on which fees were collected\"},\"returns\":{\"feeAmounts\":\"The total amounts of each token available for withdrawal, sorted in token registration order\"}},\"isPoolRegistered(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"_0\":\"isRegistered True if the pool configuration has been set (e.g., through `registerPool`)\"}},\"registerPool(address,address,bool)\":{\"details\":\"This must be called from the Vault during pool registration. It will initialize the pool to the global protocol fee percentage values (or 0, if the `protocolFeeExempt` flags is set), and return the initial aggregate fee percentages, based on an initial pool creator fee of 0.\",\"params\":{\"pool\":\"The address of the pool being registered\",\"poolCreator\":\"The address of the pool creator (or 0 if there won't be a pool creator fee)\",\"protocolFeeExempt\":\"If true, the pool is initially exempt from protocol fees\"},\"returns\":{\"aggregateSwapFeePercentage\":\"The initial aggregate swap fee percentage\",\"aggregateYieldFeePercentage\":\"The initial aggregate yield fee percentage\"}},\"setGlobalProtocolSwapFeePercentage(uint256)\":{\"params\":{\"newProtocolSwapFeePercentage\":\"The new protocol swap fee percentage\"}},\"setGlobalProtocolYieldFeePercentage(uint256)\":{\"params\":{\"newProtocolYieldFeePercentage\":\"The new protocol yield fee percentage\"}},\"setPoolCreatorSwapFeePercentage(address,uint256)\":{\"details\":\"Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to the \\\"net\\\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\",\"params\":{\"pool\":\"The address of the pool for which the pool creator fee will be changed\",\"poolCreatorSwapFeePercentage\":\"The new pool creator swap fee percentage to apply to the pool\"}},\"setPoolCreatorYieldFeePercentage(address,uint256)\":{\"details\":\"Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to the \\\"net\\\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\",\"params\":{\"pool\":\"The address of the pool for which the pool creator fee will be changed\",\"poolCreatorYieldFeePercentage\":\"The new pool creator yield fee percentage to apply to the pool\"}},\"setProtocolSwapFeePercentage(address,uint256)\":{\"params\":{\"newProtocolSwapFeePercentage\":\"The new protocol swap fee percentage for the pool\",\"pool\":\"The address of the pool for which we are setting the protocol swap fee\"}},\"setProtocolYieldFeePercentage(address,uint256)\":{\"params\":{\"newProtocolYieldFeePercentage\":\"The new protocol yield fee percentage for the pool\",\"pool\":\"The address of the pool for which we are setting the protocol yield fee\"}},\"updateProtocolSwapFeePercentage(address)\":{\"details\":\"This is a permissionless call, and will set the pool's fee to the current global fee, if it is different from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\",\"params\":{\"pool\":\"The pool for which we are setting the protocol swap fee\"}},\"updateProtocolYieldFeePercentage(address)\":{\"details\":\"This is a permissionless call, and will set the pool's fee to the current global fee, if it is different from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\",\"params\":{\"pool\":\"The pool for which we are setting the protocol yield fee\"}},\"vault()\":{\"returns\":{\"_0\":\"vault The Vault address\"}},\"withdrawPoolCreatorFees(address)\":{\"details\":\"Sends swap and yield pool creator fees to the registered poolCreator. Since this is a known and immutable value, this function is permissionless.\",\"params\":{\"pool\":\"The pool on which fees were collected\"}},\"withdrawPoolCreatorFees(address,address)\":{\"details\":\"Sends swap and yield pool creator fees to the recipient.\",\"params\":{\"pool\":\"The pool on which fees were collected\",\"recipient\":\"Address to send the tokens\"}},\"withdrawProtocolFees(address,address)\":{\"details\":\"Sends swap and yield protocol fees to the recipient.\",\"params\":{\"pool\":\"The pool on which fees were collected\",\"recipient\":\"Address to send the tokens\"}},\"withdrawProtocolFeesForToken(address,address,address)\":{\"details\":\"Sends swap and yield protocol fees to the recipient.\",\"params\":{\"pool\":\"The pool on which fees were collected\",\"recipient\":\"Address to send the tokens\",\"token\":\"Token to withdraw\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"CallerIsNotPoolCreator(address,address)\":[{\"notice\":\"Error raised if the wrong account attempts to withdraw pool creator fees.\"}],\"PoolCreatorFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the pool creator swap or yield fee percentage exceeds the maximum allowed value.\"}],\"PoolCreatorNotRegistered(address)\":[{\"notice\":\"Error raised if there is no pool creator on a withdrawal attempt from the given pool.\"}],\"ProtocolSwapFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\"}],\"ProtocolYieldFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\"}]},\"events\":{\"GlobalProtocolSwapFeePercentageChanged(uint256)\":{\"notice\":\"Emitted when the protocol swap fee percentage is updated.\"},\"GlobalProtocolYieldFeePercentageChanged(uint256)\":{\"notice\":\"Emitted when the protocol yield fee percentage is updated.\"},\"InitialPoolAggregateSwapFeePercentage(address,uint256,bool)\":{\"notice\":\"Emitted on pool registration with the initial aggregate swap fee percentage, for off-chain processes.\"},\"InitialPoolAggregateYieldFeePercentage(address,uint256,bool)\":{\"notice\":\"Emitted on pool registration with the initial aggregate yield fee percentage, for off-chain processes.\"},\"PoolCreatorFeesWithdrawn(address,address,address,uint256)\":{\"notice\":\"Logs the withdrawal of pool creator fees in a specific token and amount.\"},\"PoolCreatorSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the pool creator swap fee percentage of a pool is updated.\"},\"PoolCreatorYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the pool creator yield fee percentage of a pool is updated.\"},\"PoolRegisteredWithFeeController(address,address,bool)\":{\"notice\":\"Emitted as a convenience during pool registration, more focused than the Vault's `PoolRegistered` event.\"},\"ProtocolFeesWithdrawn(address,address,address,uint256)\":{\"notice\":\"Logs the withdrawal of protocol fees in a specific token and amount.\"},\"ProtocolSwapFeeCollected(address,address,uint256)\":{\"notice\":\"Logs the collection of protocol swap fees in a specific token and amount.\"},\"ProtocolSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the protocol swap fee percentage is updated for a specific pool.\"},\"ProtocolYieldFeeCollected(address,address,uint256)\":{\"notice\":\"Logs the collection of protocol yield fees in a specific token and amount.\"},\"ProtocolYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the protocol yield fee percentage is updated for a specific pool.\"}},\"kind\":\"user\",\"methods\":{\"collectAggregateFees(address)\":{\"notice\":\"Collects aggregate fees from the Vault for a given pool.\"},\"computeAggregateFeePercentage(uint256,uint256)\":{\"notice\":\"Returns a calculated aggregate percentage from protocol and pool creator fee percentages.\"},\"getGlobalProtocolSwapFeePercentage()\":{\"notice\":\"Getter for the current global protocol swap fee.\"},\"getGlobalProtocolYieldFeePercentage()\":{\"notice\":\"Getter for the current global protocol yield fee.\"},\"getPoolCreatorFeeAmounts(address)\":{\"notice\":\"Returns the amount of each pool token allocated to the pool creator for withdrawal.\"},\"getPoolCreatorSwapFeePercentage(address)\":{\"notice\":\"Getter for the current pool creator swap fee percentage for a given pool.\"},\"getPoolCreatorYieldFeePercentage(address)\":{\"notice\":\"Getter for the current pool creator yield fee percentage for a given pool.\"},\"getPoolProtocolSwapFeeInfo(address)\":{\"notice\":\"Getter for the current protocol swap fee for a given pool.\"},\"getPoolProtocolYieldFeeInfo(address)\":{\"notice\":\"Getter for the current protocol yield fee for a given pool.\"},\"getProtocolFeeAmounts(address)\":{\"notice\":\"Returns the amount of each pool token allocated to the protocol for withdrawal.\"},\"isPoolRegistered(address)\":{\"notice\":\"Getter for pool registration flag.\"},\"registerPool(address,address,bool)\":{\"notice\":\"Add pool-specific entries to the protocol swap and yield percentages.\"},\"setGlobalProtocolSwapFeePercentage(uint256)\":{\"notice\":\"Set the global protocol swap fee percentage, used by standard pools.\"},\"setGlobalProtocolYieldFeePercentage(uint256)\":{\"notice\":\"Set the global protocol yield fee percentage, used by standard pools.\"},\"setPoolCreatorSwapFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new pool creator swap fee percentage to the specified pool.\"},\"setPoolCreatorYieldFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new pool creator yield fee percentage to the specified pool.\"},\"setProtocolSwapFeePercentage(address,uint256)\":{\"notice\":\"Override the protocol swap fee percentage for a specific pool.\"},\"setProtocolYieldFeePercentage(address,uint256)\":{\"notice\":\"Override the protocol yield fee percentage for a specific pool.\"},\"updateProtocolSwapFeePercentage(address)\":{\"notice\":\"Override the protocol swap fee percentage for a specific pool.\"},\"updateProtocolYieldFeePercentage(address)\":{\"notice\":\"Override the protocol yield fee percentage for a specific pool.\"},\"vault()\":{\"notice\":\"Get the address of the main Vault contract.\"},\"withdrawPoolCreatorFees(address)\":{\"notice\":\"Withdraw collected pool creator fees for a given pool.\"},\"withdrawPoolCreatorFees(address,address)\":{\"notice\":\"Withdraw collected pool creator fees for a given pool. This is a permissioned function.\"},\"withdrawProtocolFees(address,address)\":{\"notice\":\"Withdraw collected protocol fees for a given pool (all tokens). This is a permissioned function.\"},\"withdrawProtocolFeesForToken(address,address,address)\":{\"notice\":\"Withdraw collected protocol fees for a given pool and a given token. This is a permissioned function.\"}},\"notice\":\"Contract that handles protocol and pool creator fees for the Vault.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":\"IProtocolFeeController\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol":{"IVault":{"abi":[{"inputs":[],"name":"AfterAddLiquidityHookFailed","type":"error"},{"inputs":[],"name":"AfterInitializeHookFailed","type":"error"},{"inputs":[],"name":"AfterRemoveLiquidityHookFailed","type":"error"},{"inputs":[],"name":"AfterSwapHookFailed","type":"error"},{"inputs":[],"name":"AmountGivenZero","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"AmountInAboveMax","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"AmountOutBelowMin","type":"error"},{"inputs":[],"name":"BalanceNotSettled","type":"error"},{"inputs":[],"name":"BeforeAddLiquidityHookFailed","type":"error"},{"inputs":[],"name":"BeforeInitializeHookFailed","type":"error"},{"inputs":[],"name":"BeforeRemoveLiquidityHookFailed","type":"error"},{"inputs":[],"name":"BeforeSwapHookFailed","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"BptAmountInAboveMax","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"BptAmountOutBelowMin","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"BufferAlreadyInitialized","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"BufferNotInitialized","type":"error"},{"inputs":[],"name":"BufferSharesInvalidOwner","type":"error"},{"inputs":[],"name":"BufferSharesInvalidReceiver","type":"error"},{"inputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"}],"name":"BufferTotalSupplyTooLow","type":"error"},{"inputs":[],"name":"CannotReceiveEth","type":"error"},{"inputs":[],"name":"CannotSwapSameToken","type":"error"},{"inputs":[],"name":"DoesNotSupportAddLiquidityCustom","type":"error"},{"inputs":[],"name":"DoesNotSupportDonation","type":"error"},{"inputs":[],"name":"DoesNotSupportRemoveLiquidityCustom","type":"error"},{"inputs":[],"name":"DoesNotSupportUnbalancedLiquidity","type":"error"},{"inputs":[],"name":"DynamicSwapFeeHookFailed","type":"error"},{"inputs":[],"name":"FeePrecisionTooHigh","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"HookAdjustedAmountInAboveMax","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"HookAdjustedAmountOutBelowMin","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"HookAdjustedSwapLimit","type":"error"},{"inputs":[{"internalType":"address","name":"poolHooksContract","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"poolFactory","type":"address"}],"name":"HookRegistrationFailed","type":"error"},{"inputs":[],"name":"InvalidAddLiquidityKind","type":"error"},{"inputs":[],"name":"InvalidRemoveLiquidityKind","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[],"name":"InvalidTokenConfiguration","type":"error"},{"inputs":[],"name":"InvalidTokenDecimals","type":"error"},{"inputs":[],"name":"InvalidTokenType","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"InvalidUnderlyingToken","type":"error"},{"inputs":[{"internalType":"uint256","name":"issuedShares","type":"uint256"},{"internalType":"uint256","name":"minIssuedShares","type":"uint256"}],"name":"IssuedSharesBelowMin","type":"error"},{"inputs":[],"name":"MaxTokens","type":"error"},{"inputs":[],"name":"MinTokens","type":"error"},{"inputs":[],"name":"NotEnoughBufferShares","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"expectedUnderlyingAmount","type":"uint256"},{"internalType":"uint256","name":"actualUnderlyingAmount","type":"uint256"}],"name":"NotEnoughUnderlying","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"expectedWrappedAmount","type":"uint256"},{"internalType":"uint256","name":"actualWrappedAmount","type":"uint256"}],"name":"NotEnoughWrapped","type":"error"},{"inputs":[],"name":"NotVaultDelegateCall","type":"error"},{"inputs":[],"name":"PauseBufferPeriodDurationTooLarge","type":"error"},{"inputs":[],"name":"PercentageAboveMax","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyInitialized","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolInRecoveryMode","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotInRecoveryMode","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotInitialized","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotPaused","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolPauseWindowExpired","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolPaused","type":"error"},{"inputs":[],"name":"ProtocolFeesExceedTotalCollected","type":"error"},{"inputs":[],"name":"QueriesDisabled","type":"error"},{"inputs":[],"name":"QueriesDisabledPermanently","type":"error"},{"inputs":[],"name":"QuoteResultSpoofed","type":"error"},{"inputs":[],"name":"RouterNotTrusted","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderIsNotVault","type":"error"},{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[],"name":"SwapFeePercentageTooHigh","type":"error"},{"inputs":[],"name":"SwapFeePercentageTooLow","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"SwapLimit","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TokenAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TokenNotRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"expectedToken","type":"address"},{"internalType":"address","name":"actualToken","type":"address"}],"name":"TokensMismatch","type":"error"},{"inputs":[],"name":"TradeAmountTooSmall","type":"error"},{"inputs":[],"name":"VaultBuffersArePaused","type":"error"},{"inputs":[],"name":"VaultIsNotUnlocked","type":"error"},{"inputs":[],"name":"VaultNotPaused","type":"error"},{"inputs":[],"name":"VaultPauseWindowDurationTooLarge","type":"error"},{"inputs":[],"name":"VaultPauseWindowExpired","type":"error"},{"inputs":[],"name":"VaultPaused","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"WrapAmountTooSmall","type":"error"},{"inputs":[],"name":"WrongProtocolFeeControllerDeployment","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"underlyingToken","type":"address"}],"name":"WrongUnderlyingToken","type":"error"},{"inputs":[],"name":"WrongVaultAdminDeployment","type":"error"},{"inputs":[],"name":"WrongVaultExtensionDeployment","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"}],"name":"AggregateSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}],"name":"AggregateYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"AuthorizerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnedShares","type":"uint256"}],"name":"BufferSharesBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"issuedShares","type":"uint256"}],"name":"BufferSharesMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":true,"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"amountsAddedRaw","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"swapFeeAmountsRaw","type":"uint256[]"}],"name":"LiquidityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWrapped","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"LiquidityAddedToBuffer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":true,"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"amountsRemovedRaw","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"swapFeeAmountsRaw","type":"uint256[]"}],"name":"LiquidityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWrapped","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"LiquidityRemovedFromBuffer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"}],"name":"PoolInitialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"PoolPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"bool","name":"recoveryMode","type":"bool"}],"name":"PoolRecoveryModeStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"factory","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"indexed":false,"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"indexed":false,"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"},{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"indexed":false,"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"indexed":false,"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"PoolRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IProtocolFeeController","name":"newProtocolFeeController","type":"address"}],"name":"ProtocolFeeControllerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"SwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnedShares","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"withdrawnUnderlying","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"Unwrap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"bytes32","name":"eventKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"eventData","type":"bytes"}],"name":"VaultAuxiliary","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"VaultBuffersPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"VaultPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"VaultQueriesDisabled","type":"event"},{"anonymous":false,"inputs":[],"name":"VaultQueriesEnabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"depositedUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"mintedShares","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"Wrap","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct AddLiquidityParams","name":"params","type":"tuple"}],"name":"addLiquidity","outputs":[{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"maxAmountUnderlyingInRaw","type":"uint256"},{"internalType":"uint256","name":"maxAmountWrappedInRaw","type":"uint256"},{"internalType":"uint256","name":"exactSharesToIssue","type":"uint256"},{"internalType":"address","name":"sharesOwner","type":"address"}],"name":"addLiquidityToBuffer","outputs":[{"internalType":"uint256","name":"amountUnderlyingRaw","type":"uint256"},{"internalType":"uint256","name":"amountWrappedRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"tokenAllowance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"areBuffersPaused","outputs":[{"internalType":"bool","name":"buffersPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"tokenBalance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFees","outputs":[{"internalType":"uint256[]","name":"swapFeeAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"yieldFeeAmounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"swapParams","type":"tuple"}],"name":"computeDynamicSwapFeePercentage","outputs":[{"internalType":"uint256","name":"dynamicSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"disableQuery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"disableQueryPermanently","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"disableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"eventKey","type":"bytes32"},{"internalType":"bytes","name":"eventData","type":"bytes"}],"name":"emitAuxiliaryEvent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enableQuery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"enableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"enum WrappingDirection","name":"direction","type":"uint8"},{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"}],"internalType":"struct BufferWrapOrUnwrapParams","name":"params","type":"tuple"}],"name":"erc4626BufferWrapOrUnwrap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"actionId","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getAddLiquidityCalledFlag","outputs":[{"internalType":"bool","name":"liquidityAdded","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateSwapFeeAmount","outputs":[{"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateYieldFeeAmount","outputs":[{"internalType":"uint256","name":"yieldFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"authorizer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getBptRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferAsset","outputs":[{"internalType":"address","name":"underlyingToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferBalance","outputs":[{"internalType":"uint256","name":"underlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"wrappedBalanceRaw","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"bufferMinimumTotalSupply","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"liquidityOwner","type":"address"}],"name":"getBufferOwnerShares","outputs":[{"internalType":"uint256","name":"ownerShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodDuration","outputs":[{"internalType":"uint32","name":"bufferPeriodDuration","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodEndTime","outputs":[{"internalType":"uint32","name":"bufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferTotalShares","outputs":[{"internalType":"uint256","name":"bufferShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getCurrentLiveBalances","outputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getERC4626BufferAsset","outputs":[{"internalType":"address","name":"asset","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getHooksConfig","outputs":[{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaximumPoolTokens","outputs":[{"internalType":"uint256","name":"maxTokens","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getMinimumPoolTokens","outputs":[{"internalType":"uint256","name":"minTokens","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getMinimumTradeAmount","outputs":[{"internalType":"uint256","name":"minimumTradeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumWrapAmount","outputs":[{"internalType":"uint256","name":"minimumWrapAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonzeroDeltaCount","outputs":[{"internalType":"uint256","name":"nonzeroDeltaCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPauseWindowEndTime","outputs":[{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolConfig","outputs":[{"components":[{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"},{"internalType":"uint40","name":"tokenDecimalDiffs","type":"uint40"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"isPoolRegistered","type":"bool"},{"internalType":"bool","name":"isPoolInitialized","type":"bool"},{"internalType":"bool","name":"isPoolPaused","type":"bool"},{"internalType":"bool","name":"isPoolInRecoveryMode","type":"bool"}],"internalType":"struct PoolConfig","name":"poolConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolData","outputs":[{"components":[{"internalType":"PoolConfigBits","name":"poolConfigBits","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"},{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"}],"internalType":"struct PoolData","name":"poolData","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPoolMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"poolMinimumTotalSupply","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolPausedState","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"},{"internalType":"uint32","name":"poolPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"poolBufferPeriodEndTime","type":"uint32"},{"internalType":"address","name":"pauseManager","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolRoleAccounts","outputs":[{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getPoolTokenCountAndIndexOfToken","outputs":[{"internalType":"uint256","name":"tokenCount","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenInfo","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"lastBalancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenRates","outputs":[{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeeController","outputs":[{"internalType":"contract IProtocolFeeController","name":"protocolFeeController","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getReservesOf","outputs":[{"internalType":"uint256","name":"reserveAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getStaticSwapFeePercentage","outputs":[{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getTokenDelta","outputs":[{"internalType":"int256","name":"tokenDelta","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultAdmin","outputs":[{"internalType":"address","name":"vaultAdmin","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultExtension","outputs":[{"internalType":"address","name":"vaultExtension","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultPausedState","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"},{"internalType":"uint32","name":"vaultPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"vaultBufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"initialize","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"amountUnderlyingRaw","type":"uint256"},{"internalType":"uint256","name":"amountWrappedRaw","type":"uint256"},{"internalType":"uint256","name":"minIssuedShares","type":"uint256"},{"internalType":"address","name":"sharesOwner","type":"address"}],"name":"initializeBuffer","outputs":[{"internalType":"uint256","name":"issuedShares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"isERC4626BufferInitialized","outputs":[{"internalType":"bool","name":"isBufferInitialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInRecoveryMode","outputs":[{"internalType":"bool","name":"inRecoveryMode","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInitialized","outputs":[{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolPaused","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"registered","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabled","outputs":[{"internalType":"bool","name":"queryDisabled","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabledPermanently","outputs":[{"internalType":"bool","name":"queryDisabledPermanently","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isUnlocked","outputs":[{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isVaultPaused","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"pausePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseVaultBuffers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"quote","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"quoteAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"protocolFeeExempt","type":"bool"},{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"},{"internalType":"address","name":"poolHooksContract","type":"address"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"registerPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct RemoveLiquidityParams","name":"params","type":"tuple"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"sharesToRemove","type":"uint256"},{"internalType":"uint256","name":"minAmountUnderlyingOutRaw","type":"uint256"},{"internalType":"uint256","name":"minAmountWrappedOutRaw","type":"uint256"}],"name":"removeLiquidityFromBuffer","outputs":[{"internalType":"uint256","name":"removedUnderlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"removedWrappedBalanceRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"}],"name":"removeLiquidityRecovery","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"sendTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"setAuthorizer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IProtocolFeeController","name":"newProtocolFeeController","type":"address"}],"name":"setProtocolFeeController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"setStaticSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amountHint","type":"uint256"}],"name":"settle","outputs":[{"internalType":"uint256","name":"credit","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct VaultSwapParams","name":"vaultSwapParams","type":"tuple"}],"name":"swap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"tokenTotalSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"unlock","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"unpausePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseVaultBuffers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newAggregateSwapFeePercentage","type":"uint256"}],"name":"updateAggregateSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newAggregateYieldFeePercentage","type":"uint256"}],"name":"updateAggregateYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addLiquidity((address,address,uint256[],uint256,uint8,bytes))":"4af29ec4","addLiquidityToBuffer(address,uint256,uint256,uint256,address)":"e2a92b1a","allowance(address,address,address)":"927da105","approve(address,address,uint256)":"e1f21c67","areBuffersPaused()":"55cba7fe","balanceOf(address,address)":"f7888aec","collectAggregateFees(address)":"8f4ab9ca","computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))":"4d472bdd","disableQuery()":"de1a36a6","disableQueryPermanently()":"821440f2","disableRecoveryMode(address)":"bffb78b2","emitAuxiliaryEvent(bytes32,bytes)":"c8088247","enableQuery()":"e0d55605","enableRecoveryMode(address)":"dc3f574e","erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))":"43583be5","getActionId(bytes4)":"851c1bb3","getAddLiquidityCalledFlag(address)":"ace9b89b","getAggregateSwapFeeAmount(address,address)":"85e0b999","getAggregateYieldFeeAmount(address,address)":"00fdfa13","getAuthorizer()":"aaabadc5","getBptRate(address)":"4f037ee7","getBufferAsset(address)":"0387587d","getBufferBalance(address)":"4021fe0f","getBufferMinimumTotalSupply()":"26a8a991","getBufferOwnerShares(address,address)":"9385e39a","getBufferPeriodDuration()":"20c1fb7a","getBufferPeriodEndTime()":"cd51c12f","getBufferTotalShares(address)":"f2784e07","getCurrentLiveBalances(address)":"535cfd8a","getERC4626BufferAsset(address)":"4afbaf5a","getHooksConfig(address)":"ce8630d4","getMaximumPoolTokens()":"2e42f4d5","getMinimumPoolTokens()":"a8175b27","getMinimumTradeAmount()":"e2cb0ba0","getMinimumWrapAmount()":"53956aa2","getNonzeroDeltaCount()":"db817187","getPauseWindowEndTime()":"8a8d123a","getPoolConfig(address)":"f29486a1","getPoolData(address)":"13d21cdf","getPoolMinimumTotalSupply()":"d0965a6b","getPoolPausedState(address)":"15e32046","getPoolRoleAccounts(address)":"e9ddeb26","getPoolTokenCountAndIndexOfToken(address,address)":"c9c1661b","getPoolTokenInfo(address)":"67e0e076","getPoolTokenRates(address)":"7e361bde","getPoolTokens(address)":"ca4f2803","getProtocolFeeController()":"85f2dbd4","getReservesOf(address)":"96787092","getStaticSwapFeePercentage(address)":"b45090f9","getTokenDelta(address)":"9e825ff5","getVaultAdmin()":"1ba0ae45","getVaultExtension()":"b9a8effa","getVaultPausedState()":"85c8c015","initialize(address,address,address[],uint256[],uint256,bytes)":"ba8a2be0","initializeBuffer(address,uint256,uint256,uint256,address)":"653eb3b0","isERC4626BufferInitialized(address)":"6844846b","isPoolInRecoveryMode(address)":"be7d628a","isPoolInitialized(address)":"532cec7c","isPoolPaused(address)":"6c9bc732","isPoolRegistered(address)":"c673bdaf","isQueryDisabled()":"b4aef0ab","isQueryDisabledPermanently()":"13ef8a5d","isUnlocked()":"8380edb7","isVaultPaused()":"098401f5","pausePool(address)":"55aca1ec","pauseVault()":"9e0879c2","pauseVaultBuffers()":"e085c5a8","quote(bytes)":"edfa3568","quoteAndRevert(bytes)":"757d64b3","registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))":"eeec802f","removeLiquidity((address,address,uint256,uint256[],uint8,bytes))":"21457897","removeLiquidityFromBuffer(address,uint256,uint256,uint256)":"ebc7955c","removeLiquidityRecovery(address,address,uint256,uint256[])":"a07d6040","sendTo(address,address,uint256)":"ae639329","setAuthorizer(address)":"058a628f","setProtocolFeeController(address)":"2d771389","setStaticSwapFeePercentage(address,uint256)":"d15126ba","settle(address,uint256)":"15afd409","swap((uint8,address,address,address,uint256,uint256,bytes))":"2bfb780c","totalSupply(address)":"e4dc2aa4","transfer(address,address,uint256)":"beabacc8","transferFrom(address,address,address,uint256)":"15dacbea","unlock(bytes)":"48c89491","unpausePool(address)":"f21c38cd","unpauseVault()":"0b7562be","unpauseVaultBuffers()":"b9212b49","updateAggregateSwapFeePercentage(address,uint256)":"5e0b06f4","updateAggregateYieldFeePercentage(address,uint256)":"e253670a","vault()":"fbfa77cf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AfterAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountGivenZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"AmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"AmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"BptAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"BptAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"BufferAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"BufferNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BufferSharesInvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BufferSharesInvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"BufferTotalSupplyTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReceiveEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSwapSameToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportAddLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportDonation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportRemoveLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportUnbalancedLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DynamicSwapFeeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeePrecisionTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedSwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolHooksContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"HookRegistrationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRemoveLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"InvalidUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIssuedShares\",\"type\":\"uint256\"}],\"name\":\"IssuedSharesBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBufferShares\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedUnderlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualUnderlyingAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughUnderlying\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedWrappedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualWrappedAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughWrapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaultDelegateCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PauseBufferPeriodDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PercentageAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeesExceedTotalCollected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabledPermanently\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteResultSpoofed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterNotTrusted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualToken\",\"type\":\"address\"}],\"name\":\"TokensMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradeAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultBuffersArePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultIsNotUnlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"WrapAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongProtocolFeeControllerDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"WrongUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultAdminDeployment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultExtensionDeployment\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"AggregateSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"AggregateYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"}],\"name\":\"BufferSharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"}],\"name\":\"BufferSharesMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsAddedRaw\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmountsRaw\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"LiquidityAddedToBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsRemovedRaw\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmountsRaw\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"LiquidityRemovedFromBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PoolPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"recoveryMode\",\"type\":\"bool\"}],\"name\":\"PoolRecoveryModeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IProtocolFeeController\",\"name\":\"newProtocolFeeController\",\"type\":\"address\"}],\"name\":\"ProtocolFeeControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"Unwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"eventKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"VaultAuxiliary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultBuffersPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultQueriesDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultQueriesEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"Wrap\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountUnderlyingInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountWrappedInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactSharesToIssue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sharesOwner\",\"type\":\"address\"}],\"name\":\"addLiquidityToBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlyingRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWrappedRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areBuffersPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"buffersPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yieldFeeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"}],\"name\":\"computeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynamicSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQueryPermanently\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"disableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"emitAuxiliaryEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"enum WrappingDirection\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"}],\"internalType\":\"struct BufferWrapOrUnwrapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"erc4626BufferWrapOrUnwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAddLiquidityCalledFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"liquidityAdded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateSwapFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateYieldFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"authorizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBptRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityOwner\",\"type\":\"address\"}],\"name\":\"getBufferOwnerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ownerShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getCurrentLiveBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getERC4626BufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getHooksConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTradeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumWrapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumWrapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonzeroDeltaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonzeroDeltaCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseWindowEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"tokenDecimalDiffs\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPoolRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInRecoveryMode\",\"type\":\"bool\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"poolConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"PoolConfigBits\",\"name\":\"poolConfigBits\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"poolPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"poolBufferPeriodEndTime\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolRoleAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenCountAndIndexOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastBalancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeController\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"protocolFeeController\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStaticSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"tokenDelta\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultAdmin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultExtension\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vaultPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vaultBufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountUnderlyingRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWrappedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIssuedShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sharesOwner\",\"type\":\"address\"}],\"name\":\"initializeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"isERC4626BufferInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBufferInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inRecoveryMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabledPermanently\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabledPermanently\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVaultBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quoteAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"poolHooksContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesToRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountUnderlyingOutRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountWrappedOutRaw\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityFromBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"removedUnderlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedWrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"removeLiquidityRecovery\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"newProtocolFeeController\",\"type\":\"address\"}],\"name\":\"setProtocolFeeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setStaticSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountHint\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct VaultSwapParams\",\"name\":\"vaultSwapParams\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVaultBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAggregateSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateAggregateSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateAggregateYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AmountInAboveMax(address,uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total token amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\",\"tokenIn\":\"The incoming token\"}}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\",\"tokenOut\":\"The outgoing token\"}}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total BPT amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\"}}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\"}}],\"BufferAlreadyInitialized(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"BufferNotInitialized(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"BufferTotalSupplyTooLow(uint256)\":[{\"params\":{\"totalSupply\":\"The total supply value that was below the minimum\"}}],\"FeePrecisionTooHigh()\":[{\"details\":\"Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%). Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between the aggregate fee calculated here and that stored in the Vault.\"}],\"HookAdjustedAmountInAboveMax(address,uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total token amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\",\"tokenIn\":\"The incoming token\"}}],\"HookAdjustedAmountOutBelowMin(address,uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\",\"tokenOut\":\"The outgoing token\"}}],\"HookAdjustedSwapLimit(uint256,uint256)\":[{\"params\":{\"amount\":\"The total amount in or out\",\"limit\":\"The amount of the limit that has been exceeded\"}}],\"HookRegistrationFailed(address,address,address)\":[{\"params\":{\"pool\":\"Address of the rejected pool\",\"poolFactory\":\"Address of the pool factory\",\"poolHooksContract\":\"Address of the hook contract that rejected the pool registration\"}}],\"InvalidUnderlyingToken(address)\":[{\"details\":\"This should never happen, but a malicious wrapper contract might do this (e.g., in an attempt to re-initialize the buffer).\",\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"IssuedSharesBelowMin(uint256,uint256)\":[{\"details\":\"Shares issued during initialization are below the requested amount.\"}],\"NotEnoughUnderlying(address,uint256,uint256)\":[{\"details\":\"A wrap/unwrap operation consumed more or returned less underlying tokens than it should.\"}],\"NotEnoughWrapped(address,uint256,uint256)\":[{\"details\":\"A wrap/unwrap operation consumed more or returned less wrapped tokens than it should.\"}],\"NotVaultDelegateCall()\":[{\"details\":\"It can only be called by the Vault via delegatecall.\"}],\"PoolAlreadyInitialized(address)\":[{\"params\":{\"pool\":\"The already initialized pool\"}}],\"PoolAlreadyRegistered(address)\":[{\"params\":{\"pool\":\"The already registered pool\"}}],\"PoolInRecoveryMode(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInRecoveryMode(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInitialized(address)\":[{\"params\":{\"pool\":\"The uninitialized pool\"}}],\"PoolNotPaused(address)\":[{\"params\":{\"pool\":\"The unpaused pool\"}}],\"PoolNotRegistered(address)\":[{\"params\":{\"pool\":\"The unregistered pool\"}}],\"PoolPauseWindowExpired(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolPaused(address)\":[{\"params\":{\"pool\":\"The paused pool\"}}],\"ProtocolFeesExceedTotalCollected()\":[{\"details\":\"This occurs when the sum of the parts (aggregate swap or yield fee) is greater than the whole (total swap or yield fee). Also validated when the protocol fee controller updates aggregate fee percentages in the Vault.\"}],\"SenderIsNotVault(address)\":[{\"params\":{\"sender\":\"The account attempting to call a permissioned function\"}}],\"SwapFeePercentageTooHigh()\":[{\"details\":\"The Vault itself does not impose a universal minimum. Rather, it validates against the range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error if it is above the maximum value returned by the pool. Pools with dynamic fees do not check these limits.\"}],\"SwapFeePercentageTooLow()\":[{\"details\":\"The Vault itself does not impose a universal minimum. Rather, it validates against the range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error if it is below the minimum value returned by the pool. Pools with dynamic fees do not check these limits.\"}],\"SwapLimit(uint256,uint256)\":[{\"params\":{\"amount\":\"The total amount in or out\",\"limit\":\"The amount of the limit that has been exceeded\"}}],\"TokenAlreadyRegistered(address)\":[{\"params\":{\"token\":\"The duplicate token\"}}],\"TokenNotRegistered(address)\":[{\"params\":{\"token\":\"The unregistered token\"}}],\"TokensMismatch(address,address,address)\":[{\"params\":{\"actualToken\":\"The actual token found at that index\",\"expectedToken\":\"The correct token at a given index in the pool\",\"pool\":\"Address of the pool\"}}],\"WrapAmountTooSmall(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"WrongUnderlyingToken(address,address)\":[{\"details\":\"This should never happen, but a malicious wrapper contract might not return the correct address. Legitimate wrapper contracts should make the asset a constant or immutable value.\",\"params\":{\"underlyingToken\":\"The underlying token returned by `asset`\",\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}]},\"events\":{\"AggregateSwapFeePercentageChanged(address,uint256)\":{\"details\":\"The `ProtocolFeeController` will emit an event with the underlying change.\",\"params\":{\"aggregateSwapFeePercentage\":\"The new aggregate swap fee percentage\",\"pool\":\"The pool whose aggregate swap fee percentage changed\"}},\"AggregateYieldFeePercentageChanged(address,uint256)\":{\"details\":\"The `ProtocolFeeController` will emit an event with the underlying change.\",\"params\":{\"aggregateYieldFeePercentage\":\"The new aggregate yield fee percentage\",\"pool\":\"The pool whose aggregate yield fee percentage changed\"}},\"AuthorizerChanged(address)\":{\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"BufferSharesBurned(address,address,uint256)\":{\"details\":\"The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares` retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the \\\"totalSupply\\\" of a buffer.\",\"params\":{\"burnedShares\":\"The amount of \\\"internal BPT\\\" shares burned\",\"from\":\"The owner of the burned shares\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"BufferSharesMinted(address,address,uint256)\":{\"details\":\"The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares` retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the \\\"totalSupply\\\" of a buffer.\",\"params\":{\"issuedShares\":\"The amount of \\\"internal BPT\\\" shares created\",\"to\":\"The owner of the minted shares\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"LiquidityAdded(address,address,uint8,uint256,uint256[],uint256[])\":{\"params\":{\"amountsAddedRaw\":\"The amount of each token that was added, sorted in token registration order\",\"kind\":\"The add liquidity operation type (e.g., proportional, custom)\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool with liquidity added\",\"swapFeeAmountsRaw\":\"The total swap fees charged, sorted in token registration order\",\"totalSupply\":\"The total supply of the pool after the operation\"}},\"LiquidityAddedToBuffer(address,uint256,uint256,bytes32)\":{\"details\":\"The underlying token can be derived from the wrapped token, so it's not included here.\",\"params\":{\"amountUnderlying\":\"The amount of the underlying token that was deposited\",\"amountWrapped\":\"The amount of the wrapped token that was deposited\",\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"LiquidityRemoved(address,address,uint8,uint256,uint256[],uint256[])\":{\"params\":{\"amountsRemovedRaw\":\"The amount of each token that was removed, sorted in token registration order\",\"kind\":\"The remove liquidity operation type (e.g., proportional, custom)\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool with liquidity removed\",\"swapFeeAmountsRaw\":\"The total swap fees charged, sorted in token registration order\",\"totalSupply\":\"The total supply of the pool after the operation\"}},\"LiquidityRemovedFromBuffer(address,uint256,uint256,bytes32)\":{\"details\":\"The underlying token can be derived from the wrapped token, so it's not included here.\",\"params\":{\"amountUnderlying\":\"The amount of the underlying token that was withdrawn\",\"amountWrapped\":\"The amount of the wrapped token that was withdrawn\",\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"PoolInitialized(address)\":{\"params\":{\"pool\":\"The pool being initialized\"}},\"PoolPausedStateChanged(address,bool)\":{\"params\":{\"paused\":\"True if the pool was paused\",\"pool\":\"The pool that was just paused or unpaused\"}},\"PoolRecoveryModeStateChanged(address,bool)\":{\"params\":{\"pool\":\"The pool\",\"recoveryMode\":\"True if recovery mode was enabled\"}},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,uint32,(address,address,address),(bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),(bool,bool,bool,bool))\":{\"params\":{\"factory\":\"The factory creating the pool\",\"hooksConfig\":\"Flags indicating which hooks the pool supports and address of hooks contract\",\"liquidityManagement\":\"Supported liquidity management hook flags\",\"pauseWindowEndTime\":\"The pool's pause window end time\",\"pool\":\"The pool being registered\",\"roleAccounts\":\"Addresses the Vault will allow to change certain pool settings\",\"swapFeePercentage\":\"The static swap fee of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"ProtocolFeeControllerChanged(address)\":{\"params\":{\"newProtocolFeeController\":\"The address of the new protocol fee controller\"}},\"Swap(address,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"Number of tokenIn tokens\",\"amountOut\":\"Number of tokenOut tokens\",\"pool\":\"The pool with the tokens being swapped\",\"swapFeeAmount\":\"Swap fee amount paid\",\"swapFeePercentage\":\"Swap fee percentage applied (can differ if dynamic)\",\"tokenIn\":\"The token entering the Vault (balance increases)\",\"tokenOut\":\"The token leaving the Vault (balance decreases)\"}},\"SwapFeePercentageChanged(address,uint256)\":{\"params\":{\"swapFeePercentage\":\"The new swap fee percentage for the pool\"}},\"Unwrap(address,uint256,uint256,bytes32)\":{\"params\":{\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"burnedShares\":\"Number of shares (wrapped tokens) burned\",\"withdrawnUnderlying\":\"Number of underlying tokens withdrawn\",\"wrappedToken\":\"The wrapped token address\"}},\"VaultAuxiliary(address,bytes32,bytes)\":{\"params\":{\"eventData\":\"Encoded event data\",\"eventKey\":\"Event key\",\"pool\":\"Pool address\"}},\"VaultBuffersPausedStateChanged(bool)\":{\"details\":\"If buffers all paused, all buffer operations (i.e., all calls through the Router with `isBuffer` set to true) will revert.\",\"params\":{\"paused\":\"True if the Vault buffers were paused\"}},\"VaultPausedStateChanged(bool)\":{\"params\":{\"paused\":\"True if the Vault was paused\"}},\"Wrap(address,uint256,uint256,bytes32)\":{\"params\":{\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"depositedUnderlying\":\"Number of underlying tokens deposited\",\"mintedShares\":\"Number of shares (wrapped tokens) minted\",\"wrappedToken\":\"The wrapped token address\"}}},\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"details\":\"Caution should be exercised when adding liquidity because the Vault has the capability to transfer tokens from any user, given that it holds all allowances.\",\"params\":{\"params\":\"Parameters for the add liquidity (see above for struct definition)\"},\"returns\":{\"amountsIn\":\"Actual amounts of input tokens\",\"bptAmountOut\":\"Output pool token amount\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"addLiquidityToBuffer(address,uint256,uint256,uint256,address)\":{\"details\":\"The buffer needs to be initialized beforehand.\",\"params\":{\"exactSharesToIssue\":\"The value in underlying tokens that `sharesOwner` wants to add to the buffer, in underlying token decimals\",\"maxAmountUnderlyingInRaw\":\"Maximum amount of underlying tokens to add to the buffer. It is expressed in underlying token native decimals\",\"maxAmountWrappedInRaw\":\"Maximum amount of wrapped tokens to add to the buffer. It is expressed in wrapped token native decimals\",\"sharesOwner\":\"Address that will own the deposited liquidity. Only this address will be able to remove liquidity from the buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"amountUnderlyingRaw\":\"Amount of underlying tokens deposited into the buffer\",\"amountWrappedRaw\":\"Amount of wrapped tokens deposited into the buffer\"}},\"allowance(address,address,address)\":{\"params\":{\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\",\"token\":\"Address of the token\"},\"returns\":{\"tokenAllowance\":\"Amount of tokens the spender is allowed to spend\"}},\"approve(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to approve\",\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\"},\"returns\":{\"success\":\"True if successful, false otherwise\"}},\"areBuffersPaused()\":{\"details\":\"When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true) will revert. Pausing buffers is reversible. Note that ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they would likely be paused and unpaused together). Call `isVaultPaused` to check the pause state of the Vault.\",\"returns\":{\"buffersPaused\":\"True if the Vault buffers are paused\"}},\"balanceOf(address,address)\":{\"params\":{\"account\":\"Address of the account\",\"token\":\"Address of the token\"},\"returns\":{\"tokenBalance\":\"Token balance of the account\"}},\"collectAggregateFees(address)\":{\"details\":\"Fees are sent to the ProtocolFeeController address.\",\"params\":{\"pool\":\"The pool on which all aggregate fees should be collected\"},\"returns\":{\"swapFeeAmounts\":\"An array with the total swap fees collected, sorted in token registration order\",\"yieldFeeAmounts\":\"An array with the total yield fees collected, sorted in token registration order\"}},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"details\":\"Reverts if the hook doesn't return the success flag set to `true`.\",\"params\":{\"pool\":\"The pool\",\"swapParams\":\"The swap parameters used to compute the fee\"},\"returns\":{\"dynamicSwapFeePercentage\":\"The dynamic swap fee percentage\"}},\"disableQuery()\":{\"details\":\"The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2). This function can be acted upon as an emergency measure in ambiguous contexts where it's not 100% clear whether disabling queries is completely necessary; queries can still be re-enabled after this call.\"},\"disableQueryPermanently()\":{\"details\":\"Shall only be used when there is no doubt that queries pose a fundamental threat to the system.\"},\"disableRecoveryMode(address)\":{\"details\":\"This is a permissioned function. It re-syncs live balances (which could not be updated during Recovery Mode), forfeiting any yield fees that accrued while enabled. It makes external calls, and could potentially fail if there is an issue with any associated Rate Providers.\",\"params\":{\"pool\":\"The address of the pool\"}},\"emitAuxiliaryEvent(bytes32,bytes)\":{\"params\":{\"eventData\":\"Encoded event data\",\"eventKey\":\"Event key\"}},\"enableQuery()\":{\"details\":\"Only works if queries are not permanently disabled.\"},\"enableRecoveryMode(address)\":{\"details\":\"This is a permissioned function. It enables a safe proportional withdrawal, with no external calls. Since there are no external calls, ensuring that entering Recovery Mode cannot fail, we cannot compute and so must forfeit any yield fees between the last operation and enabling Recovery Mode. For the same reason, live balances cannot be updated while in Recovery Mode, as doing so might cause withdrawals to fail.\",\"params\":{\"pool\":\"The address of the pool\"}},\"erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))\":{\"details\":\"All parameters are given in raw token decimal encoding. It requires the buffer to be initialized, and uses the internal wrapped token buffer when it has enough liquidity to avoid external calls.\",\"params\":{\"params\":\"Parameters for the wrap/unwrap operation (see struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"actionId\":\"The computed actionId\"}},\"getAddLiquidityCalledFlag(address)\":{\"details\":\"Taxing remove liquidity proportional whenever liquidity was added in the same `unlock` call adds an extra layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional is the only standard way to exit a position without fees, and this flag is used to enable fees in that case. It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse than a simple swap for every pool type.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"liquidityAdded\":\"True if liquidity has been added to this pool in the current transaction Note that there is no `sessionId` argument; it always returns the value for the current (i.e., latest) session.\"}},\"getAggregateSwapFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"swapFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAggregateYieldFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"yieldFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAuthorizer()\":{\"details\":\"The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can be changed through a permissioned call.\",\"returns\":{\"authorizer\":\"Address of the authorizer contract\"}},\"getBptRate(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"rate\":\"BPT rate\"}},\"getBufferAsset(address)\":{\"details\":\"The asset can never change after buffer initialization.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingToken\":\"Address of the underlying token registered for the wrapper; `address(0)` if the buffer has not been initialized.\"}},\"getBufferBalance(address)\":{\"details\":\"All values are in native token decimals of the wrapped or underlying tokens.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingBalanceRaw\":\"Amount of underlying tokens deposited into the buffer, in native token decimals\",\"wrappedBalanceRaw\":\"Amount of wrapped tokens deposited into the buffer, in native token decimals\"}},\"getBufferMinimumTotalSupply()\":{\"details\":\"This prevents buffers from being completely drained. When the buffer is initialized, this minimum number of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal to the Vault, as buffers are not tokenized.\",\"returns\":{\"bufferMinimumTotalSupply\":\"The minimum total supply a buffer can have after initialization\"}},\"getBufferOwnerShares(address,address)\":{\"params\":{\"liquidityOwner\":\"Address of the user that owns liquidity in the wrapped token's buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"ownerShares\":\"Amount of shares allocated to the liquidity owner, in native underlying token decimals\"}},\"getBufferPeriodDuration()\":{\"details\":\"This value is immutable. It represents the period during which, if paused, the Vault will remain paused. This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer timestamps are 32 bits.\",\"returns\":{\"bufferPeriodDuration\":\"The length of the buffer period in seconds\"}},\"getBufferPeriodEndTime()\":{\"details\":\"This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer timestamps are 32 bits.\",\"returns\":{\"bufferPeriodEndTime\":\"The timestamp after which the Vault remains permanently unpaused\"}},\"getBufferTotalShares(address)\":{\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"bufferShares\":\"Amount of supply shares of the buffer, in native underlying token decimals\"}},\"getCurrentLiveBalances(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesLiveScaled18\":\"Token balances after paying yield fees, applying decimal scaling and rates\"}},\"getERC4626BufferAsset(address)\":{\"details\":\"To avoid malicious wrappers (e.g., that might potentially change their asset after deployment), routers should never call `wrapper.asset()` directly, at least without checking it against the asset registered with the Vault on initialization.\",\"params\":{\"wrappedToken\":\"The wrapped token specifying the buffer\"},\"returns\":{\"asset\":\"The underlying asset of the wrapped token\"}},\"getHooksConfig(address)\":{\"details\":\"The `HooksConfig` contains flags indicating which pool hooks are implemented.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"hooksConfig\":\"The hooks configuration as a `HooksConfig` struct\"}},\"getMaximumPoolTokens()\":{\"returns\":{\"maxTokens\":\"The maximum token count of a pool\"}},\"getMinimumPoolTokens()\":{\"details\":\"We expect the vast majority of pools to be 2-token.\",\"returns\":{\"minTokens\":\"The minimum token count of a pool\"}},\"getMinimumTradeAmount()\":{\"details\":\"This limit is applied to the 18-decimal \\\"upscaled\\\" amount in any operation (swap, add/remove liquidity).\",\"returns\":{\"minimumTradeAmount\":\"The minimum trade amount as an 18-decimal floating point number\"}},\"getMinimumWrapAmount()\":{\"details\":\"This limit is applied to the wrap operation amount, in native underlying token decimals.\",\"returns\":{\"minimumWrapAmount\":\"The minimum wrap amount in native underlying token decimals\"}},\"getNonzeroDeltaCount()\":{\"returns\":{\"nonzeroDeltaCount\":\"The current value of `_nonzeroDeltaCount`\"}},\"getPauseWindowEndTime()\":{\"details\":\"This value is immutable, and represents the timestamp after which the Vault can no longer be paused by governance. Balancer timestamps are 32 bits.\",\"returns\":{\"pauseWindowEndTime\":\"The timestamp when the Vault's pause window ends\"}},\"getPoolConfig(address)\":{\"details\":\"The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"poolConfig\":\"The pool configuration as a `PoolConfig` struct\"}},\"getPoolData(address)\":{\"details\":\"This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\",\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"poolData\":\"The `PoolData` result\"}},\"getPoolMinimumTotalSupply()\":{\"details\":\"This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\",\"returns\":{\"poolMinimumTotalSupply\":\"The minimum total supply a pool can have after initialization\"}},\"getPoolPausedState(address)\":{\"details\":\"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period. Balancer timestamps are 32 bits.\",\"params\":{\"pool\":\"The pool whose data is requested\"},\"returns\":{\"pauseManager\":\"The pause manager, or the zero address\",\"poolBufferPeriodEndTime\":\"The timestamp after which the Pool unpauses itself (if paused)\",\"poolPauseWindowEndTime\":\"The timestamp of the end of the Pool's pause window\",\"poolPaused\":\"True if the Pool is paused\"}},\"getPoolRoleAccounts(address)\":{\"params\":{\"pool\":\"The address of the pool whose roles are being queried\"},\"returns\":{\"roleAccounts\":\"A struct containing the role accounts for the pool (or 0 if unassigned)\"}},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"details\":\"Reverts if the pool is not registered, or if the token does not belong to the pool.\",\"params\":{\"pool\":\"Address of the pool\",\"token\":\"Address of the token\"},\"returns\":{\"index\":\"Index corresponding to the given token in the pool's token list\",\"tokenCount\":\"Number of tokens in the pool\"}},\"getPoolTokenInfo(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesRaw\":\"Current native decimal balances of the pool tokens, sorted in token registration order\",\"lastBalancesLiveScaled18\":\"Last saved live balances, sorted in token registration order\",\"tokenInfo\":\"Token info structs (type, rate provider, yield flag), sorted in token registration order\",\"tokens\":\"The pool tokens, sorted in registration order\"}},\"getPoolTokenRates(address)\":{\"details\":\"This function performs external calls if tokens are yield-bearing. All returned arrays are in token registration order.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"decimalScalingFactors\":\"Conversion factor used to adjust for token decimals for uniform precision in calculations. FP(1) for 18-decimal tokens\",\"tokenRates\":\"18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\"}},\"getPoolTokens(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"tokens\":\"List of tokens in the pool\"}},\"getProtocolFeeController()\":{\"returns\":{\"protocolFeeController\":\"Address of the ProtocolFeeController\"}},\"getReservesOf(address)\":{\"params\":{\"token\":\"The token for which to retrieve the reserve\"},\"returns\":{\"reserveAmount\":\"The amount of reserves for the given token\"}},\"getStaticSwapFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool whose static swap fee percentage is being queried\"},\"returns\":{\"swapFeePercentage\":\"The current static swap fee percentage for the specified pool\"}},\"getTokenDelta(address)\":{\"details\":\"This function allows reading the value from the `_tokenDeltas` mapping.\",\"params\":{\"token\":\"The token for which the delta is being fetched\"},\"returns\":{\"tokenDelta\":\"The delta of the specified token\"}},\"getVaultAdmin()\":{\"details\":\"The VaultAdmin contract mostly implements permissioned functions.\",\"returns\":{\"vaultAdmin\":\"The address of the Vault admin\"}},\"getVaultExtension()\":{\"details\":\"Function is in the main Vault contract. The VaultExtension handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls.\",\"returns\":{\"vaultExtension\":\"Address of the VaultExtension\"}},\"getVaultPausedState()\":{\"details\":\"Balancer timestamps are 32 bits.\",\"returns\":{\"vaultBufferPeriodEndTime\":\"The timestamp of the end of the Vault's buffer period\",\"vaultPauseWindowEndTime\":\"The timestamp of the end of the Vault's pause window\",\"vaultPaused\":\"True if the Vault is paused\"}},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Address of the pool to initialize\",\"to\":\"Address that will receive the output BPT\",\"tokens\":\"Tokens used to seed the pool (must match the registered tokens)\",\"userData\":\"Additional (optional) data required for adding initial liquidity\"},\"returns\":{\"bptAmountOut\":\"Output pool token amount\"}},\"initializeBuffer(address,uint256,uint256,uint256,address)\":{\"params\":{\"amountUnderlyingRaw\":\"Amount of underlying tokens that will be deposited into the buffer\",\"amountWrappedRaw\":\"Amount of wrapped tokens that will be deposited into the buffer\",\"minIssuedShares\":\"Minimum amount of shares to receive from the buffer, expressed in underlying token native decimals\",\"sharesOwner\":\"Address that will own the deposited liquidity. Only this address will be able to remove liquidity from the buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"issuedShares\":\"the amount of tokens sharesOwner has in the buffer, expressed in underlying token amounts. (it is the BPT of an internal ERC4626 buffer). It is expressed in underlying token native decimals.\"}},\"isERC4626BufferInitialized(address)\":{\"details\":\"An initialized buffer should have an asset registered in the Vault.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"isBufferInitialized\":\"True if the ERC4626 buffer is initialized\"}},\"isPoolInRecoveryMode(address)\":{\"details\":\"Recovery Mode enables a safe proportional withdrawal path, with no external calls.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"inRecoveryMode\":\"True if the pool is in Recovery Mode, false otherwise\"}},\"isPoolInitialized(address)\":{\"details\":\"An initialized pool can be considered registered as well.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"initialized\":\"True if the pool is initialized, false otherwise\"}},\"isPoolPaused(address)\":{\"details\":\"If a pool is paused, all non-Recovery Mode state-changing operations will revert.\",\"params\":{\"pool\":\"The pool to be checked\"},\"returns\":{\"poolPaused\":\"True if the pool is paused\"}},\"isPoolRegistered(address)\":{\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"registered\":\"True if the pool is registered, false otherwise\"}},\"isQueryDisabled()\":{\"details\":\"If true, queries might either be disabled temporarily or permanently.\",\"returns\":{\"queryDisabled\":\"True if query functionality is reversibly disabled\"}},\"isQueryDisabledPermanently()\":{\"details\":\"This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\",\"returns\":{\"queryDisabledPermanently\":\"True if query functionality is permanently disabled\"}},\"isUnlocked()\":{\"details\":\"The Vault must be unlocked to perform state-changing liquidity operations.\",\"returns\":{\"unlocked\":\"True if the Vault is unlocked, false otherwise\"}},\"isVaultPaused()\":{\"details\":\"If the Vault is paused, all non-Recovery Mode state-changing operations on pools will revert. Note that ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they would likely be paused and unpaused together). Call `areBuffersPaused` to check the pause state of the buffers.\",\"returns\":{\"vaultPaused\":\"True if the Vault is paused\"}},\"pausePool(address)\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during pool factory deployment.\",\"params\":{\"pool\":\"The pool being paused\"}},\"pauseVault()\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during deployment. Note that ERC4626 buffer operations have an independent pause mechanism, which is not affected by pausing the Vault. Custom routers could still wrap/unwrap using buffers while the Vault is paused, unless buffers are also paused (with `pauseVaultBuffers`).\"},\"pauseVaultBuffers()\":{\"details\":\"When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. Currently it's not possible to pause vault buffers individually. This is a permissioned call, and is reversible (see `unpauseVaultBuffers`). Note that the Vault has a separate and independent pausing mechanism. It is possible to pause the Vault (i.e. pool operations), without affecting buffers, and vice versa.\"},\"quote(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `onlyWhenUnlocked`. `transient` modifier ensuring balances changes within the Vault are settled.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}},\"quoteAndRevert(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `onlyWhenUnlocked`. `transient` modifier ensuring balances changes within the Vault are settled. This call always reverts, returning the result in the revert reason.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"}},\"registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))\":{\"details\":\"A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused pool will automatically unpause. Balancer timestamps are 32 bits. A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to the Vault. If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the authorizer.\",\"params\":{\"liquidityManagement\":\"Liquidity management flags with implemented methods\",\"pauseWindowEndTime\":\"The timestamp after which it is no longer possible to pause the pool\",\"pool\":\"The address of the pool being registered\",\"poolHooksContract\":\"Contract that implements the hooks for the pool\",\"protocolFeeExempt\":\"If true, the pool's initial aggregate fees will be set to 0\",\"roleAccounts\":\"Addresses the Vault will allow to change certain pool settings\",\"swapFeePercentage\":\"The initial static swap fee percentage of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"details\":\"Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user. Untrusted routers require prior approval from the user. This is the only function allowed to call _queryModeBalanceIncrease (and only in a query context).\",\"params\":{\"params\":\"Parameters for the remove liquidity (see above for struct definition)\"},\"returns\":{\"amountsOut\":\"Actual amounts of output tokens\",\"bptAmountIn\":\"Actual amount of BPT burned\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"removeLiquidityFromBuffer(address,uint256,uint256,uint256)\":{\"details\":\"Only proportional exits are supported, and the sender has to be the owner of the shares. This function unlocks the Vault just for this operation; it does not work with a Router as an entrypoint. Pre-conditions: - The buffer needs to be initialized. - sharesOwner is the original msg.sender, it needs to be checked in the Router. That's why   this call is authenticated; only routers approved by the DAO can remove the liquidity of a buffer. - The buffer needs to have some liquidity and have its asset registered in `_bufferAssets` storage.\",\"params\":{\"minAmountUnderlyingOutRaw\":\"Minimum amount of underlying tokens to receive from the buffer. It is expressed in underlying token native decimals\",\"minAmountWrappedOutRaw\":\"Minimum amount of wrapped tokens to receive from the buffer. It is expressed in wrapped token native decimals\",\"sharesToRemove\":\"Amount of shares to remove from the buffer. Cannot be greater than sharesOwner's total shares. It is expressed in underlying token native decimals\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"removedUnderlyingBalanceRaw\":\"Amount of underlying tokens returned to the user\",\"removedWrappedBalanceRaw\":\"Amount of wrapped tokens returned to the user\"}},\"removeLiquidityRecovery(address,address,uint256,uint256[])\":{\"params\":{\"exactBptAmountIn\":\"Input pool token amount\",\"from\":\"Address of user to burn pool tokens from\",\"minAmountsOut\":\"Minimum amounts of tokens to be received, sorted in token registration order\",\"pool\":\"Address of the pool\"},\"returns\":{\"amountsOut\":\"Actual calculated amounts of output tokens, sorted in token registration order\"}},\"sendTo(address,address,uint256)\":{\"details\":\"There is no inverse operation for this function. Transfer funds to the Vault and call `settle` to cancel debts.\",\"params\":{\"amount\":\"Amount of tokens to send\",\"to\":\"Recipient address\",\"token\":\"Address of the token\"}},\"setAuthorizer(address)\":{\"details\":\"This is a permissioned call. Emits an `AuthorizerChanged` event.\",\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"setProtocolFeeController(address)\":{\"details\":\"This is a permissioned call. Emits a `ProtocolFeeControllerChanged` event.\",\"params\":{\"newProtocolFeeController\":\"The address of the new Protocol Fee Controller\"}},\"setStaticSwapFeePercentage(address,uint256)\":{\"details\":\"This is a permissioned function, disabled if the pool is paused. The swap fee percentage must be within the bounds specified by the pool's implementation of `ISwapFeePercentageBounds`. Emits the SwapFeePercentageChanged event.\",\"params\":{\"pool\":\"The address of the pool for which the static swap fee will be changed\",\"swapFeePercentage\":\"The new swap fee percentage to apply to the pool\"}},\"settle(address,uint256)\":{\"details\":\"Protects the caller against leftover dust in the Vault for the token being settled. The caller should know in advance how many tokens were paid to the Vault, so it can provide it as a hint to discard any excess in the Vault balance. If the given hint is equal to or higher than the difference in reserves, the difference in reserves is given as credit to the caller. If it's higher, the caller sent fewer tokens than expected, so settlement would fail. If the given hint is lower than the difference in reserves, the hint is given as credit to the caller. In this case, the excess would be absorbed by the Vault (and reflected correctly in the reserves), but would not affect settlement. The credit supplied by the Vault can be calculated as `min(reserveDifference, amountHint)`, where the reserve difference equals current balance of the token minus existing reserves of the token when the function is called.\",\"params\":{\"amountHint\":\"Amount paid as reported by the caller\",\"token\":\"Address of the token\"},\"returns\":{\"credit\":\"Credit received in return of the payment\"}},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"details\":\"All parameters are given in raw token decimal encoding.\",\"params\":{\"vaultSwapParams\":\"Parameters for the swap (see above for struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"totalSupply(address)\":{\"params\":{\"token\":\"The token address\"},\"returns\":{\"tokenTotalSupply\":\"Total supply of the token\"}},\"transfer(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"owner\":\"Address of the owner\",\"to\":\"Address of the recipient\"},\"returns\":{\"_0\":\"success True if successful, false otherwise\"}},\"transferFrom(address,address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"from\":\"Address of the sender\",\"spender\":\"Address allowed to perform the transfer\",\"to\":\"Address of the recipient\"},\"returns\":{\"success\":\"True if successful, false otherwise\"}},\"unlock(bytes)\":{\"details\":\"Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`, meaning all balances for the caller have to be settled at the end.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}},\"unpausePool(address)\":{\"details\":\"This is a permissioned function that will only work on a paused Pool within the Buffer Period set during deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\",\"params\":{\"pool\":\"The pool being unpaused\"}},\"unpauseVault()\":{\"details\":\"This is a permissioned function that will only work on a paused Vault within the Buffer Period set during deployment. Note that the Vault will automatically unpause after the Buffer Period expires. As noted above, ERC4626 buffers and Vault operations on pools are independent. Unpausing the Vault does not reverse `pauseVaultBuffers`. If buffers were also paused, they will remain in that state until explicitly unpaused.\"},\"unpauseVaultBuffers()\":{\"details\":\"When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. As noted above, ERC4626 buffers and Vault operations on pools are independent. Unpausing buffers does not reverse `pauseVault`. If the Vault was also paused, it will remain in that state until explicitly unpaused. This is a permissioned call.\"},\"updateAggregateSwapFeePercentage(address,uint256)\":{\"details\":\"Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol). Emits an `AggregateSwapFeePercentageChanged` event.\",\"params\":{\"newAggregateSwapFeePercentage\":\"The new aggregate swap fee percentage\",\"pool\":\"The pool whose swap fee percentage will be updated\"}},\"updateAggregateYieldFeePercentage(address,uint256)\":{\"details\":\"Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol). Emits an `AggregateYieldFeePercentageChanged` event.\",\"params\":{\"newAggregateYieldFeePercentage\":\"The new aggregate yield fee percentage\",\"pool\":\"The pool whose yield fee percentage will be updated\"}},\"vault()\":{\"returns\":{\"_0\":\"vault The main Vault address.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AfterAddLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert.\"}],\"AfterInitializeHookFailed()\":[{\"notice\":\"The pool has returned false to the afterInitialize hook, indicating the transaction should revert.\"}],\"AfterRemoveLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert.\"}],\"AfterSwapHookFailed()\":[{\"notice\":\"The pool has returned false to the afterSwap hook, indicating the transaction should revert.\"}],\"AmountGivenZero()\":[{\"notice\":\"The user tried to swap zero tokens.\"}],\"AmountInAboveMax(address,uint256,uint256)\":[{\"notice\":\"A required amountIn exceeds the maximum limit specified for the operation.\"}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"notice\":\"The actual amount out is below the minimum limit specified for the operation.\"}],\"BalanceNotSettled()\":[{\"notice\":\"A transient accounting operation completed with outstanding token deltas.\"}],\"BeforeAddLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert.\"}],\"BeforeInitializeHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeInitialize hook, indicating the transaction should revert.\"}],\"BeforeRemoveLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert.\"}],\"BeforeSwapHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"notice\":\"The required BPT amount in exceeds the maximum limit specified for the operation.\"}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"notice\":\"The BPT amount received from adding liquidity is below the minimum specified for the operation.\"}],\"BufferAlreadyInitialized(address)\":[{\"notice\":\"The buffer for the given wrapped token was already initialized.\"}],\"BufferNotInitialized(address)\":[{\"notice\":\"The buffer for the given wrapped token was not initialized.\"}],\"BufferSharesInvalidOwner()\":[{\"notice\":\"Buffer shares were burned from the zero address.\"}],\"BufferSharesInvalidReceiver()\":[{\"notice\":\"Buffer shares were minted to the zero address.\"}],\"BufferTotalSupplyTooLow(uint256)\":[{\"notice\":\"The total supply of a buffer can't be lower than the absolute minimum.\"}],\"CannotReceiveEth()\":[{\"notice\":\"The contract should not receive ETH.\"}],\"CannotSwapSameToken()\":[{\"notice\":\"The user attempted to swap a token for itself.\"}],\"DoesNotSupportAddLiquidityCustom()\":[{\"notice\":\"Pool does not support adding liquidity with a customized input.\"}],\"DoesNotSupportDonation()\":[{\"notice\":\"Pool does not support adding liquidity through donation.\"}],\"DoesNotSupportRemoveLiquidityCustom()\":[{\"notice\":\"Pool does not support removing liquidity with a customized input.\"}],\"DoesNotSupportUnbalancedLiquidity()\":[{\"notice\":\"Pool does not support adding / removing liquidity with an unbalanced input.\"}],\"DynamicSwapFeeHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"FeePrecisionTooHigh()\":[{\"notice\":\"Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\"}],\"HookAdjustedAmountInAboveMax(address,uint256,uint256)\":[{\"notice\":\"A hook adjusted amountIn exceeds the maximum limit specified for the operation.\"}],\"HookAdjustedAmountOutBelowMin(address,uint256,uint256)\":[{\"notice\":\"The hook adjusted amount out is below the minimum limit specified for the operation.\"}],\"HookAdjustedSwapLimit(uint256,uint256)\":[{\"notice\":\"A hook adjusted amount in or out has exceeded the limit specified in the swap request.\"}],\"HookRegistrationFailed(address,address,address)\":[{\"notice\":\"A hook contract rejected a pool on registration.\"}],\"InvalidAddLiquidityKind()\":[{\"notice\":\"Add liquidity kind not supported.\"}],\"InvalidRemoveLiquidityKind()\":[{\"notice\":\"Remove liquidity kind not supported.\"}],\"InvalidToken()\":[{\"notice\":\"Invalid tokens (e.g., zero) cannot be registered.\"}],\"InvalidTokenConfiguration()\":[{\"notice\":\"The data in a TokenConfig struct is inconsistent or unsupported.\"}],\"InvalidTokenDecimals()\":[{\"notice\":\"Tokens with more than 18 decimals are not supported.\"}],\"InvalidTokenType()\":[{\"notice\":\"The token type given in a TokenConfig during pool registration is invalid.\"}],\"InvalidUnderlyingToken(address)\":[{\"notice\":\"A wrapped token reported the zero address as its underlying token asset.\"}],\"MaxTokens()\":[{\"notice\":\"The token count is above the maximum allowed.\"}],\"MinTokens()\":[{\"notice\":\"The token count is below the minimum allowed.\"}],\"NotEnoughBufferShares()\":[{\"notice\":\"The user is trying to remove more than their allocated shares from the buffer.\"}],\"NotVaultDelegateCall()\":[{\"notice\":\"The `VaultExtension` contract was called by an account directly.\"}],\"PauseBufferPeriodDurationTooLarge()\":[{\"notice\":\"The caller specified a buffer period longer than the maximum.\"}],\"PercentageAboveMax()\":[{\"notice\":\"A given percentage is above the maximum (usually a value close to FixedPoint.ONE, or 1e18 wei).\"}],\"PoolAlreadyInitialized(address)\":[{\"notice\":\"A pool has already been initialized. `initialize` may only be called once.\"}],\"PoolAlreadyRegistered(address)\":[{\"notice\":\"A pool has already been registered. `registerPool` may only be called once.\"}],\"PoolInRecoveryMode(address)\":[{\"notice\":\"Cannot enable recovery mode when already enabled.\"}],\"PoolNotInRecoveryMode(address)\":[{\"notice\":\"Cannot disable recovery mode when not enabled.\"}],\"PoolNotInitialized(address)\":[{\"notice\":\"A referenced pool has not been initialized.\"}],\"PoolNotPaused(address)\":[{\"notice\":\"Governance tried to unpause the Pool when it was not paused.\"}],\"PoolNotRegistered(address)\":[{\"notice\":\"A pool has not been registered.\"}],\"PoolPauseWindowExpired(address)\":[{\"notice\":\"Governance tried to pause a Pool after the pause period expired.\"}],\"PoolPaused(address)\":[{\"notice\":\"A user tried to perform an operation involving a paused Pool.\"}],\"ProtocolFeesExceedTotalCollected()\":[{\"notice\":\"Error raised when there is an overflow in the fee calculation.\"}],\"QueriesDisabled()\":[{\"notice\":\"A user tried to execute a query operation when they were disabled.\"}],\"QueriesDisabledPermanently()\":[{\"notice\":\"An admin tried to re-enable queries, but they were disabled permanently.\"}],\"QuoteResultSpoofed()\":[{\"notice\":\"Quote reverted with a reserved error code.\"}],\"RouterNotTrusted()\":[{\"notice\":\"An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance).\"}],\"SenderIsNotVault(address)\":[{\"notice\":\"Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\"}],\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}],\"SwapFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the swap fee percentage is greater than the maximum allowed value.\"}],\"SwapFeePercentageTooLow()\":[{\"notice\":\"Error raised when the swap fee percentage is less than the minimum allowed value.\"}],\"SwapLimit(uint256,uint256)\":[{\"notice\":\"An amount in or out has exceeded the limit specified in the swap request.\"}],\"TokenAlreadyRegistered(address)\":[{\"notice\":\"A token was already registered (i.e., it is a duplicate in the pool).\"}],\"TokenNotRegistered(address)\":[{\"notice\":\"The user attempted to operate with a token that is not in the pool.\"}],\"TokensMismatch(address,address,address)\":[{\"notice\":\"The token list passed into an operation does not match the pool tokens in the pool.\"}],\"TradeAmountTooSmall()\":[{\"notice\":\"The amount given or calculated for an operation is below the minimum limit.\"}],\"VaultBuffersArePaused()\":[{\"notice\":\"Buffer operation attempted while vault buffers are paused.\"}],\"VaultIsNotUnlocked()\":[{\"notice\":\"A user called a Vault function (swap, add/remove liquidity) outside the lock context.\"}],\"VaultNotPaused()\":[{\"notice\":\"Governance tried to unpause the Vault when it was not paused.\"}],\"VaultPauseWindowDurationTooLarge()\":[{\"notice\":\"The caller specified a pause window period longer than the maximum.\"}],\"VaultPauseWindowExpired()\":[{\"notice\":\"Governance tried to pause the Vault after the pause period expired.\"}],\"VaultPaused()\":[{\"notice\":\"A user tried to perform an operation while the Vault was paused.\"}],\"WrapAmountTooSmall(address)\":[{\"notice\":\"The amount given to wrap/unwrap was too small, which can introduce rounding issues.\"}],\"WrongProtocolFeeControllerDeployment()\":[{\"notice\":\"The `ProtocolFeeController` contract was configured with an incorrect Vault address.\"}],\"WrongUnderlyingToken(address,address)\":[{\"notice\":\"The wrapped token asset does not match the underlying token.\"}],\"WrongVaultAdminDeployment()\":[{\"notice\":\"The `VaultAdmin` contract was configured with an incorrect Vault address.\"}],\"WrongVaultExtensionDeployment()\":[{\"notice\":\"The `VaultExtension` contract was configured with an incorrect Vault address.\"}]},\"events\":{\"AggregateSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"A protocol or pool creator fee has changed, causing an update to the aggregate swap fee.\"},\"AggregateYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"A protocol or pool creator fee has changed, causing an update to the aggregate yield fee.\"},\"AuthorizerChanged(address)\":{\"notice\":\"A new authorizer is set by `setAuthorizer`.\"},\"BufferSharesBurned(address,address,uint256)\":{\"notice\":\"Buffer shares were burned for an ERC4626 buffer corresponding to a given wrapped token.\"},\"BufferSharesMinted(address,address,uint256)\":{\"notice\":\"Buffer shares were minted for an ERC4626 buffer corresponding to a given wrapped token.\"},\"LiquidityAdded(address,address,uint8,uint256,uint256[],uint256[])\":{\"notice\":\"Liquidity has been added to a pool (including initialization).\"},\"LiquidityAddedToBuffer(address,uint256,uint256,bytes32)\":{\"notice\":\"Liquidity was added to an ERC4626 buffer corresponding to the given wrapped token.\"},\"LiquidityRemoved(address,address,uint8,uint256,uint256[],uint256[])\":{\"notice\":\"Liquidity has been removed from a pool.\"},\"LiquidityRemovedFromBuffer(address,uint256,uint256,bytes32)\":{\"notice\":\"Liquidity was removed from an ERC4626 buffer.\"},\"PoolInitialized(address)\":{\"notice\":\"A Pool was initialized by calling `initialize`.\"},\"PoolPausedStateChanged(address,bool)\":{\"notice\":\"A Pool's pause status has changed.\"},\"PoolRecoveryModeStateChanged(address,bool)\":{\"notice\":\"Recovery mode has been enabled or disabled for a pool.\"},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,uint32,(address,address,address),(bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),(bool,bool,bool,bool))\":{\"notice\":\"A Pool was registered by calling `registerPool`.\"},\"ProtocolFeeControllerChanged(address)\":{\"notice\":\"A new protocol fee controller is set by `setProtocolFeeController`.\"},\"Swap(address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"A swap has occurred.\"},\"SwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the swap fee percentage of a pool is updated.\"},\"Unwrap(address,uint256,uint256,bytes32)\":{\"notice\":\"An unwrap operation has occurred.\"},\"VaultAuxiliary(address,bytes32,bytes)\":{\"notice\":\"Pools can use this event to emit event data from the Vault.\"},\"VaultBuffersPausedStateChanged(bool)\":{\"notice\":\"The Vault buffers pause status has changed.\"},\"VaultPausedStateChanged(bool)\":{\"notice\":\"The Vault's pause status has changed.\"},\"VaultQueriesDisabled()\":{\"notice\":\"`disableQuery` has been called on the Vault, disabling query functionality.\"},\"VaultQueriesEnabled()\":{\"notice\":\"`enableQuery` has been called on the Vault, enabling query functionality.\"},\"Wrap(address,uint256,uint256,bytes32)\":{\"notice\":\"A wrap operation has occurred.\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"notice\":\"Adds liquidity to a pool.\"},\"addLiquidityToBuffer(address,uint256,uint256,uint256,address)\":{\"notice\":\"Adds liquidity to an internal ERC4626 buffer in the Vault, proportionally.\"},\"allowance(address,address,address)\":{\"notice\":\"Gets the allowance of a spender for a given ERC20 token and owner.\"},\"approve(address,address,uint256)\":{\"notice\":\"Approves a spender to spend pool tokens on behalf of sender.\"},\"areBuffersPaused()\":{\"notice\":\"Indicates whether the Vault buffers are paused.\"},\"balanceOf(address,address)\":{\"notice\":\"Gets the balance of an account for a given ERC20 token.\"},\"collectAggregateFees(address)\":{\"notice\":\"Collects accumulated aggregate swap and yield fees for the specified pool.\"},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"notice\":\"Query the current dynamic swap fee percentage of a pool, given a set of swap parameters.\"},\"disableQuery()\":{\"notice\":\"Disables query functionality on the Vault. Can only be called by governance.\"},\"disableQueryPermanently()\":{\"notice\":\"Disables query functionality permanently on the Vault. Can only be called by governance.\"},\"disableRecoveryMode(address)\":{\"notice\":\"Disable recovery mode for a pool.\"},\"emitAuxiliaryEvent(bytes32,bytes)\":{\"notice\":\"Pools can use this event to emit event data from the Vault.\"},\"enableQuery()\":{\"notice\":\"Enables query functionality on the Vault. Can only be called by governance.\"},\"enableRecoveryMode(address)\":{\"notice\":\"Enable recovery mode for a pool.\"},\"erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))\":{\"notice\":\"Wraps/unwraps tokens based on the parameters provided.\"},\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getAddLiquidityCalledFlag(address)\":{\"notice\":\"This flag is used to detect and tax \\\"round-trip\\\" interactions (adding and removing liquidity in the same pool).\"},\"getAggregateSwapFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\"},\"getAggregateYieldFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\"},\"getAuthorizer()\":{\"notice\":\"Returns the Authorizer address.\"},\"getBptRate(address)\":{\"notice\":\"The current rate of a pool token (BPT) = invariant / totalSupply.\"},\"getBufferAsset(address)\":{\"notice\":\"Returns the asset registered for a given wrapped token.\"},\"getBufferBalance(address)\":{\"notice\":\"Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\"},\"getBufferMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\"},\"getBufferOwnerShares(address,address)\":{\"notice\":\"Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets in the buffer.\"},\"getBufferPeriodDuration()\":{\"notice\":\"Returns the Vault's buffer period duration.\"},\"getBufferPeriodEndTime()\":{\"notice\":\"Returns the Vault's buffer period end time.\"},\"getBufferTotalShares(address)\":{\"notice\":\"Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\"},\"getCurrentLiveBalances(address)\":{\"notice\":\"Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in registration order.\"},\"getERC4626BufferAsset(address)\":{\"notice\":\"Gets the registered asset for a given buffer.\"},\"getHooksConfig(address)\":{\"notice\":\"Gets the hooks configuration parameters of a pool.\"},\"getMaximumPoolTokens()\":{\"notice\":\"Get the maximum number of tokens in a pool.\"},\"getMinimumPoolTokens()\":{\"notice\":\"Get the minimum number of tokens in a pool.\"},\"getMinimumTradeAmount()\":{\"notice\":\"Get the minimum trade amount in a pool operation.\"},\"getMinimumWrapAmount()\":{\"notice\":\"Get the minimum wrap amount in a buffer operation.\"},\"getNonzeroDeltaCount()\":{\"notice\":\"Returns the count of non-zero deltas.\"},\"getPauseWindowEndTime()\":{\"notice\":\"Returns the Vault's pause window end time.\"},\"getPoolConfig(address)\":{\"notice\":\"Gets the configuration parameters of a pool.\"},\"getPoolData(address)\":{\"notice\":\"Returns comprehensive pool data for the given pool.\"},\"getPoolMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of pool tokens (BPT) for an initialized pool.\"},\"getPoolPausedState(address)\":{\"notice\":\"Returns the paused status, and end times of the Pool's pause window and buffer period.\"},\"getPoolRoleAccounts(address)\":{\"notice\":\"Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\"},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"notice\":\"Gets the index of a token in a given pool.\"},\"getPoolTokenInfo(address)\":{\"notice\":\"Gets the raw data for a pool: tokens, raw balances, scaling factors.\"},\"getPoolTokenRates(address)\":{\"notice\":\"Gets pool token rates.\"},\"getPoolTokens(address)\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"getProtocolFeeController()\":{\"notice\":\"Returns the Protocol Fee Controller address.\"},\"getReservesOf(address)\":{\"notice\":\"Retrieves the reserve (i.e., total Vault balance) of a given token.\"},\"getStaticSwapFeePercentage(address)\":{\"notice\":\"Fetches the static swap fee percentage for a given pool.\"},\"getTokenDelta(address)\":{\"notice\":\"Retrieves the token delta for a specific token.\"},\"getVaultAdmin()\":{\"notice\":\"Returns the VaultAdmin contract address.\"},\"getVaultExtension()\":{\"notice\":\"Returns the VaultExtension contract address.\"},\"getVaultPausedState()\":{\"notice\":\"Returns the paused status, and end times of the Vault's pause window and buffer period.\"},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"notice\":\"Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\"},\"initializeBuffer(address,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes buffer for the given wrapped token.\"},\"isERC4626BufferInitialized(address)\":{\"notice\":\"Checks if the wrapped token has an initialized buffer in the Vault.\"},\"isPoolInRecoveryMode(address)\":{\"notice\":\"Checks whether a pool is in Recovery Mode.\"},\"isPoolInitialized(address)\":{\"notice\":\"Checks whether a pool is initialized.\"},\"isPoolPaused(address)\":{\"notice\":\"Indicates whether a pool is paused.\"},\"isPoolRegistered(address)\":{\"notice\":\"Checks whether a pool is registered.\"},\"isQueryDisabled()\":{\"notice\":\"Returns true if queries are disabled on the Vault.\"},\"isQueryDisabledPermanently()\":{\"notice\":\"Returns true if queries are disabled permanently; false if they are enabled.\"},\"isUnlocked()\":{\"notice\":\"Returns whether the Vault is unlocked (i.e., executing an operation).\"},\"isVaultPaused()\":{\"notice\":\"Indicates whether the Vault is paused.\"},\"pausePool(address)\":{\"notice\":\"Pause the Pool: an emergency action which disables all pool functions.\"},\"pauseVault()\":{\"notice\":\"Pause the Vault: an emergency action which disables all operational state-changing functions on pools.\"},\"pauseVaultBuffers()\":{\"notice\":\"Pauses native vault buffers globally.\"},\"quote(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"quoteAndRevert(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))\":{\"notice\":\"Registers a pool, associating it with its factory and the tokens it manages.\"},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"notice\":\"Removes liquidity from a pool.\"},\"removeLiquidityFromBuffer(address,uint256,uint256,uint256)\":{\"notice\":\"Removes liquidity from an internal ERC4626 buffer in the Vault.\"},\"removeLiquidityRecovery(address,address,uint256,uint256[])\":{\"notice\":\"Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out. The request is implemented by the Vault without any interaction with the pool, ensuring that it works the same for all pools, and cannot be disabled by a new pool type.\"},\"sendTo(address,address,uint256)\":{\"notice\":\"Sends tokens to a recipient.\"},\"setAuthorizer(address)\":{\"notice\":\"Sets a new Authorizer for the Vault.\"},\"setProtocolFeeController(address)\":{\"notice\":\"Sets a new Protocol Fee Controller for the Vault.\"},\"setStaticSwapFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new static swap fee percentage to the specified pool.\"},\"settle(address,uint256)\":{\"notice\":\"Settles deltas for a token; must be successful for the current lock to be released.\"},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"notice\":\"Swaps tokens based on provided parameters.\"},\"totalSupply(address)\":{\"notice\":\"Gets the total supply of a given ERC20 token.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers pool token from owner to a recipient.\"},\"transferFrom(address,address,address,uint256)\":{\"notice\":\"Transfers pool token from a sender to a recipient using an allowance.\"},\"unlock(bytes)\":{\"notice\":\"Creates a context for a sequence of operations (i.e., \\\"unlocks\\\" the Vault).\"},\"unpausePool(address)\":{\"notice\":\"Reverse a `pause` operation, and restore the Pool to normal functionality.\"},\"unpauseVault()\":{\"notice\":\"Reverse a `pause` operation, and restore Vault pool operations to normal functionality.\"},\"unpauseVaultBuffers()\":{\"notice\":\"Unpauses native vault buffers globally.\"},\"updateAggregateSwapFeePercentage(address,uint256)\":{\"notice\":\"Update an aggregate swap fee percentage.\"},\"updateAggregateYieldFeePercentage(address,uint256)\":{\"notice\":\"Update an aggregate yield fee percentage.\"}},\"notice\":\"Composite interface for all Vault operations: swap, add/remove liquidity, and associated queries.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":\"IVault\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol":{"IVaultAdmin":{"abi":[{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"maxAmountUnderlyingInRaw","type":"uint256"},{"internalType":"uint256","name":"maxAmountWrappedInRaw","type":"uint256"},{"internalType":"uint256","name":"exactSharesToIssue","type":"uint256"},{"internalType":"address","name":"sharesOwner","type":"address"}],"name":"addLiquidityToBuffer","outputs":[{"internalType":"uint256","name":"amountUnderlyingRaw","type":"uint256"},{"internalType":"uint256","name":"amountWrappedRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"areBuffersPaused","outputs":[{"internalType":"bool","name":"buffersPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFees","outputs":[{"internalType":"uint256[]","name":"swapFeeAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"yieldFeeAmounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"disableQuery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"disableQueryPermanently","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"disableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enableQuery","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"enableRecoveryMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferAsset","outputs":[{"internalType":"address","name":"underlyingToken","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferBalance","outputs":[{"internalType":"uint256","name":"underlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"wrappedBalanceRaw","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"bufferMinimumTotalSupply","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"liquidityOwner","type":"address"}],"name":"getBufferOwnerShares","outputs":[{"internalType":"uint256","name":"ownerShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodDuration","outputs":[{"internalType":"uint32","name":"bufferPeriodDuration","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBufferPeriodEndTime","outputs":[{"internalType":"uint32","name":"bufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getBufferTotalShares","outputs":[{"internalType":"uint256","name":"bufferShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaximumPoolTokens","outputs":[{"internalType":"uint256","name":"maxTokens","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getMinimumPoolTokens","outputs":[{"internalType":"uint256","name":"minTokens","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getMinimumTradeAmount","outputs":[{"internalType":"uint256","name":"minimumTradeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumWrapAmount","outputs":[{"internalType":"uint256","name":"minimumWrapAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPauseWindowEndTime","outputs":[{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPoolMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"poolMinimumTotalSupply","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getVaultPausedState","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"},{"internalType":"uint32","name":"vaultPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"vaultBufferPeriodEndTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"amountUnderlyingRaw","type":"uint256"},{"internalType":"uint256","name":"amountWrappedRaw","type":"uint256"},{"internalType":"uint256","name":"minIssuedShares","type":"uint256"},{"internalType":"address","name":"sharesOwner","type":"address"}],"name":"initializeBuffer","outputs":[{"internalType":"uint256","name":"issuedShares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isVaultPaused","outputs":[{"internalType":"bool","name":"vaultPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"pausePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseVaultBuffers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"sharesToRemove","type":"uint256"},{"internalType":"uint256","name":"minAmountUnderlyingOutRaw","type":"uint256"},{"internalType":"uint256","name":"minAmountWrappedOutRaw","type":"uint256"}],"name":"removeLiquidityFromBuffer","outputs":[{"internalType":"uint256","name":"removedUnderlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"removedWrappedBalanceRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"setAuthorizer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IProtocolFeeController","name":"newProtocolFeeController","type":"address"}],"name":"setProtocolFeeController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"setStaticSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"unpausePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseVaultBuffers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newAggregateSwapFeePercentage","type":"uint256"}],"name":"updateAggregateSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newAggregateYieldFeePercentage","type":"uint256"}],"name":"updateAggregateYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addLiquidityToBuffer(address,uint256,uint256,uint256,address)":"e2a92b1a","areBuffersPaused()":"55cba7fe","collectAggregateFees(address)":"8f4ab9ca","disableQuery()":"de1a36a6","disableQueryPermanently()":"821440f2","disableRecoveryMode(address)":"bffb78b2","enableQuery()":"e0d55605","enableRecoveryMode(address)":"dc3f574e","getBufferAsset(address)":"0387587d","getBufferBalance(address)":"4021fe0f","getBufferMinimumTotalSupply()":"26a8a991","getBufferOwnerShares(address,address)":"9385e39a","getBufferPeriodDuration()":"20c1fb7a","getBufferPeriodEndTime()":"cd51c12f","getBufferTotalShares(address)":"f2784e07","getMaximumPoolTokens()":"2e42f4d5","getMinimumPoolTokens()":"a8175b27","getMinimumTradeAmount()":"e2cb0ba0","getMinimumWrapAmount()":"53956aa2","getPauseWindowEndTime()":"8a8d123a","getPoolMinimumTotalSupply()":"d0965a6b","getVaultPausedState()":"85c8c015","initializeBuffer(address,uint256,uint256,uint256,address)":"653eb3b0","isVaultPaused()":"098401f5","pausePool(address)":"55aca1ec","pauseVault()":"9e0879c2","pauseVaultBuffers()":"e085c5a8","removeLiquidityFromBuffer(address,uint256,uint256,uint256)":"ebc7955c","setAuthorizer(address)":"058a628f","setProtocolFeeController(address)":"2d771389","setStaticSwapFeePercentage(address,uint256)":"d15126ba","unpausePool(address)":"f21c38cd","unpauseVault()":"0b7562be","unpauseVaultBuffers()":"b9212b49","updateAggregateSwapFeePercentage(address,uint256)":"5e0b06f4","updateAggregateYieldFeePercentage(address,uint256)":"e253670a","vault()":"fbfa77cf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountUnderlyingInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountWrappedInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactSharesToIssue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sharesOwner\",\"type\":\"address\"}],\"name\":\"addLiquidityToBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlyingRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWrappedRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areBuffersPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"buffersPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yieldFeeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQueryPermanently\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"disableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityOwner\",\"type\":\"address\"}],\"name\":\"getBufferOwnerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ownerShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTradeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumWrapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumWrapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseWindowEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolMinimumTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vaultPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vaultBufferPeriodEndTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountUnderlyingRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWrappedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIssuedShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sharesOwner\",\"type\":\"address\"}],\"name\":\"initializeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vaultPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVaultBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesToRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountUnderlyingOutRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountWrappedOutRaw\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityFromBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"removedUnderlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removedWrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"newProtocolFeeController\",\"type\":\"address\"}],\"name\":\"setProtocolFeeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setStaticSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVaultBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAggregateSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateAggregateSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateAggregateYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"`VaultAdmin` is the Proxy extension of `VaultExtension`, and handles the least critical operations, as two delegate calls add gas to each call. Most of the permissioned calls are here.\",\"kind\":\"dev\",\"methods\":{\"addLiquidityToBuffer(address,uint256,uint256,uint256,address)\":{\"details\":\"The buffer needs to be initialized beforehand.\",\"params\":{\"exactSharesToIssue\":\"The value in underlying tokens that `sharesOwner` wants to add to the buffer, in underlying token decimals\",\"maxAmountUnderlyingInRaw\":\"Maximum amount of underlying tokens to add to the buffer. It is expressed in underlying token native decimals\",\"maxAmountWrappedInRaw\":\"Maximum amount of wrapped tokens to add to the buffer. It is expressed in wrapped token native decimals\",\"sharesOwner\":\"Address that will own the deposited liquidity. Only this address will be able to remove liquidity from the buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"amountUnderlyingRaw\":\"Amount of underlying tokens deposited into the buffer\",\"amountWrappedRaw\":\"Amount of wrapped tokens deposited into the buffer\"}},\"areBuffersPaused()\":{\"details\":\"When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true) will revert. Pausing buffers is reversible. Note that ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they would likely be paused and unpaused together). Call `isVaultPaused` to check the pause state of the Vault.\",\"returns\":{\"buffersPaused\":\"True if the Vault buffers are paused\"}},\"collectAggregateFees(address)\":{\"details\":\"Fees are sent to the ProtocolFeeController address.\",\"params\":{\"pool\":\"The pool on which all aggregate fees should be collected\"},\"returns\":{\"swapFeeAmounts\":\"An array with the total swap fees collected, sorted in token registration order\",\"yieldFeeAmounts\":\"An array with the total yield fees collected, sorted in token registration order\"}},\"disableQuery()\":{\"details\":\"The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2). This function can be acted upon as an emergency measure in ambiguous contexts where it's not 100% clear whether disabling queries is completely necessary; queries can still be re-enabled after this call.\"},\"disableQueryPermanently()\":{\"details\":\"Shall only be used when there is no doubt that queries pose a fundamental threat to the system.\"},\"disableRecoveryMode(address)\":{\"details\":\"This is a permissioned function. It re-syncs live balances (which could not be updated during Recovery Mode), forfeiting any yield fees that accrued while enabled. It makes external calls, and could potentially fail if there is an issue with any associated Rate Providers.\",\"params\":{\"pool\":\"The address of the pool\"}},\"enableQuery()\":{\"details\":\"Only works if queries are not permanently disabled.\"},\"enableRecoveryMode(address)\":{\"details\":\"This is a permissioned function. It enables a safe proportional withdrawal, with no external calls. Since there are no external calls, ensuring that entering Recovery Mode cannot fail, we cannot compute and so must forfeit any yield fees between the last operation and enabling Recovery Mode. For the same reason, live balances cannot be updated while in Recovery Mode, as doing so might cause withdrawals to fail.\",\"params\":{\"pool\":\"The address of the pool\"}},\"getBufferAsset(address)\":{\"details\":\"The asset can never change after buffer initialization.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingToken\":\"Address of the underlying token registered for the wrapper; `address(0)` if the buffer has not been initialized.\"}},\"getBufferBalance(address)\":{\"details\":\"All values are in native token decimals of the wrapped or underlying tokens.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingBalanceRaw\":\"Amount of underlying tokens deposited into the buffer, in native token decimals\",\"wrappedBalanceRaw\":\"Amount of wrapped tokens deposited into the buffer, in native token decimals\"}},\"getBufferMinimumTotalSupply()\":{\"details\":\"This prevents buffers from being completely drained. When the buffer is initialized, this minimum number of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal to the Vault, as buffers are not tokenized.\",\"returns\":{\"bufferMinimumTotalSupply\":\"The minimum total supply a buffer can have after initialization\"}},\"getBufferOwnerShares(address,address)\":{\"params\":{\"liquidityOwner\":\"Address of the user that owns liquidity in the wrapped token's buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"ownerShares\":\"Amount of shares allocated to the liquidity owner, in native underlying token decimals\"}},\"getBufferPeriodDuration()\":{\"details\":\"This value is immutable. It represents the period during which, if paused, the Vault will remain paused. This ensures there is time available to address whatever issue caused the Vault to be paused. Balancer timestamps are 32 bits.\",\"returns\":{\"bufferPeriodDuration\":\"The length of the buffer period in seconds\"}},\"getBufferPeriodEndTime()\":{\"details\":\"This value is immutable. If already paused, the Vault can be unpaused until this timestamp. Balancer timestamps are 32 bits.\",\"returns\":{\"bufferPeriodEndTime\":\"The timestamp after which the Vault remains permanently unpaused\"}},\"getBufferTotalShares(address)\":{\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"bufferShares\":\"Amount of supply shares of the buffer, in native underlying token decimals\"}},\"getMaximumPoolTokens()\":{\"returns\":{\"maxTokens\":\"The maximum token count of a pool\"}},\"getMinimumPoolTokens()\":{\"details\":\"We expect the vast majority of pools to be 2-token.\",\"returns\":{\"minTokens\":\"The minimum token count of a pool\"}},\"getMinimumTradeAmount()\":{\"details\":\"This limit is applied to the 18-decimal \\\"upscaled\\\" amount in any operation (swap, add/remove liquidity).\",\"returns\":{\"minimumTradeAmount\":\"The minimum trade amount as an 18-decimal floating point number\"}},\"getMinimumWrapAmount()\":{\"details\":\"This limit is applied to the wrap operation amount, in native underlying token decimals.\",\"returns\":{\"minimumWrapAmount\":\"The minimum wrap amount in native underlying token decimals\"}},\"getPauseWindowEndTime()\":{\"details\":\"This value is immutable, and represents the timestamp after which the Vault can no longer be paused by governance. Balancer timestamps are 32 bits.\",\"returns\":{\"pauseWindowEndTime\":\"The timestamp when the Vault's pause window ends\"}},\"getPoolMinimumTotalSupply()\":{\"details\":\"This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\",\"returns\":{\"poolMinimumTotalSupply\":\"The minimum total supply a pool can have after initialization\"}},\"getVaultPausedState()\":{\"details\":\"Balancer timestamps are 32 bits.\",\"returns\":{\"vaultBufferPeriodEndTime\":\"The timestamp of the end of the Vault's buffer period\",\"vaultPauseWindowEndTime\":\"The timestamp of the end of the Vault's pause window\",\"vaultPaused\":\"True if the Vault is paused\"}},\"initializeBuffer(address,uint256,uint256,uint256,address)\":{\"params\":{\"amountUnderlyingRaw\":\"Amount of underlying tokens that will be deposited into the buffer\",\"amountWrappedRaw\":\"Amount of wrapped tokens that will be deposited into the buffer\",\"minIssuedShares\":\"Minimum amount of shares to receive from the buffer, expressed in underlying token native decimals\",\"sharesOwner\":\"Address that will own the deposited liquidity. Only this address will be able to remove liquidity from the buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"issuedShares\":\"the amount of tokens sharesOwner has in the buffer, expressed in underlying token amounts. (it is the BPT of an internal ERC4626 buffer). It is expressed in underlying token native decimals.\"}},\"isVaultPaused()\":{\"details\":\"If the Vault is paused, all non-Recovery Mode state-changing operations on pools will revert. Note that ERC4626 buffers and the Vault have separate and independent pausing mechanisms. Pausing the Vault does not also pause buffers (though we anticipate they would likely be paused and unpaused together). Call `areBuffersPaused` to check the pause state of the buffers.\",\"returns\":{\"vaultPaused\":\"True if the Vault is paused\"}},\"pausePool(address)\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during pool factory deployment.\",\"params\":{\"pool\":\"The pool being paused\"}},\"pauseVault()\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during deployment. Note that ERC4626 buffer operations have an independent pause mechanism, which is not affected by pausing the Vault. Custom routers could still wrap/unwrap using buffers while the Vault is paused, unless buffers are also paused (with `pauseVaultBuffers`).\"},\"pauseVaultBuffers()\":{\"details\":\"When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. Currently it's not possible to pause vault buffers individually. This is a permissioned call, and is reversible (see `unpauseVaultBuffers`). Note that the Vault has a separate and independent pausing mechanism. It is possible to pause the Vault (i.e. pool operations), without affecting buffers, and vice versa.\"},\"removeLiquidityFromBuffer(address,uint256,uint256,uint256)\":{\"details\":\"Only proportional exits are supported, and the sender has to be the owner of the shares. This function unlocks the Vault just for this operation; it does not work with a Router as an entrypoint. Pre-conditions: - The buffer needs to be initialized. - sharesOwner is the original msg.sender, it needs to be checked in the Router. That's why   this call is authenticated; only routers approved by the DAO can remove the liquidity of a buffer. - The buffer needs to have some liquidity and have its asset registered in `_bufferAssets` storage.\",\"params\":{\"minAmountUnderlyingOutRaw\":\"Minimum amount of underlying tokens to receive from the buffer. It is expressed in underlying token native decimals\",\"minAmountWrappedOutRaw\":\"Minimum amount of wrapped tokens to receive from the buffer. It is expressed in wrapped token native decimals\",\"sharesToRemove\":\"Amount of shares to remove from the buffer. Cannot be greater than sharesOwner's total shares. It is expressed in underlying token native decimals\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"removedUnderlyingBalanceRaw\":\"Amount of underlying tokens returned to the user\",\"removedWrappedBalanceRaw\":\"Amount of wrapped tokens returned to the user\"}},\"setAuthorizer(address)\":{\"details\":\"This is a permissioned call. Emits an `AuthorizerChanged` event.\",\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"setProtocolFeeController(address)\":{\"details\":\"This is a permissioned call. Emits a `ProtocolFeeControllerChanged` event.\",\"params\":{\"newProtocolFeeController\":\"The address of the new Protocol Fee Controller\"}},\"setStaticSwapFeePercentage(address,uint256)\":{\"details\":\"This is a permissioned function, disabled if the pool is paused. The swap fee percentage must be within the bounds specified by the pool's implementation of `ISwapFeePercentageBounds`. Emits the SwapFeePercentageChanged event.\",\"params\":{\"pool\":\"The address of the pool for which the static swap fee will be changed\",\"swapFeePercentage\":\"The new swap fee percentage to apply to the pool\"}},\"unpausePool(address)\":{\"details\":\"This is a permissioned function that will only work on a paused Pool within the Buffer Period set during deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\",\"params\":{\"pool\":\"The pool being unpaused\"}},\"unpauseVault()\":{\"details\":\"This is a permissioned function that will only work on a paused Vault within the Buffer Period set during deployment. Note that the Vault will automatically unpause after the Buffer Period expires. As noted above, ERC4626 buffers and Vault operations on pools are independent. Unpausing the Vault does not reverse `pauseVaultBuffers`. If buffers were also paused, they will remain in that state until explicitly unpaused.\"},\"unpauseVaultBuffers()\":{\"details\":\"When buffers are paused, it's not possible to add liquidity or wrap/unwrap tokens using the Vault's `erc4626BufferWrapOrUnwrap` primitive. However, it's still possible to remove liquidity. As noted above, ERC4626 buffers and Vault operations on pools are independent. Unpausing buffers does not reverse `pauseVault`. If the Vault was also paused, it will remain in that state until explicitly unpaused. This is a permissioned call.\"},\"updateAggregateSwapFeePercentage(address,uint256)\":{\"details\":\"Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol). Emits an `AggregateSwapFeePercentageChanged` event.\",\"params\":{\"newAggregateSwapFeePercentage\":\"The new aggregate swap fee percentage\",\"pool\":\"The pool whose swap fee percentage will be updated\"}},\"updateAggregateYieldFeePercentage(address,uint256)\":{\"details\":\"Can only be called by the current protocol fee controller. Called when governance overrides a protocol fee for a specific pool, or to permissionlessly update a pool to a changed global protocol fee value (if the pool's fee has not previously been set by governance). Ensures the aggregate percentage <= FixedPoint.ONE, and also that the final value does not lose precision when stored in 24 bits (see `FEE_BITLENGTH` in VaultTypes.sol). Emits an `AggregateYieldFeePercentageChanged` event.\",\"params\":{\"newAggregateYieldFeePercentage\":\"The new aggregate yield fee percentage\",\"pool\":\"The pool whose yield fee percentage will be updated\"}},\"vault()\":{\"details\":\"The main Vault contains the entrypoint and main liquidity operation implementations.\",\"returns\":{\"_0\":\"vault The address of the main Vault\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidityToBuffer(address,uint256,uint256,uint256,address)\":{\"notice\":\"Adds liquidity to an internal ERC4626 buffer in the Vault, proportionally.\"},\"areBuffersPaused()\":{\"notice\":\"Indicates whether the Vault buffers are paused.\"},\"collectAggregateFees(address)\":{\"notice\":\"Collects accumulated aggregate swap and yield fees for the specified pool.\"},\"disableQuery()\":{\"notice\":\"Disables query functionality on the Vault. Can only be called by governance.\"},\"disableQueryPermanently()\":{\"notice\":\"Disables query functionality permanently on the Vault. Can only be called by governance.\"},\"disableRecoveryMode(address)\":{\"notice\":\"Disable recovery mode for a pool.\"},\"enableQuery()\":{\"notice\":\"Enables query functionality on the Vault. Can only be called by governance.\"},\"enableRecoveryMode(address)\":{\"notice\":\"Enable recovery mode for a pool.\"},\"getBufferAsset(address)\":{\"notice\":\"Returns the asset registered for a given wrapped token.\"},\"getBufferBalance(address)\":{\"notice\":\"Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\"},\"getBufferMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\"},\"getBufferOwnerShares(address,address)\":{\"notice\":\"Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets in the buffer.\"},\"getBufferPeriodDuration()\":{\"notice\":\"Returns the Vault's buffer period duration.\"},\"getBufferPeriodEndTime()\":{\"notice\":\"Returns the Vault's buffer period end time.\"},\"getBufferTotalShares(address)\":{\"notice\":\"Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\"},\"getMaximumPoolTokens()\":{\"notice\":\"Get the maximum number of tokens in a pool.\"},\"getMinimumPoolTokens()\":{\"notice\":\"Get the minimum number of tokens in a pool.\"},\"getMinimumTradeAmount()\":{\"notice\":\"Get the minimum trade amount in a pool operation.\"},\"getMinimumWrapAmount()\":{\"notice\":\"Get the minimum wrap amount in a buffer operation.\"},\"getPauseWindowEndTime()\":{\"notice\":\"Returns the Vault's pause window end time.\"},\"getPoolMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of pool tokens (BPT) for an initialized pool.\"},\"getVaultPausedState()\":{\"notice\":\"Returns the paused status, and end times of the Vault's pause window and buffer period.\"},\"initializeBuffer(address,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes buffer for the given wrapped token.\"},\"isVaultPaused()\":{\"notice\":\"Indicates whether the Vault is paused.\"},\"pausePool(address)\":{\"notice\":\"Pause the Pool: an emergency action which disables all pool functions.\"},\"pauseVault()\":{\"notice\":\"Pause the Vault: an emergency action which disables all operational state-changing functions on pools.\"},\"pauseVaultBuffers()\":{\"notice\":\"Pauses native vault buffers globally.\"},\"removeLiquidityFromBuffer(address,uint256,uint256,uint256)\":{\"notice\":\"Removes liquidity from an internal ERC4626 buffer in the Vault.\"},\"setAuthorizer(address)\":{\"notice\":\"Sets a new Authorizer for the Vault.\"},\"setProtocolFeeController(address)\":{\"notice\":\"Sets a new Protocol Fee Controller for the Vault.\"},\"setStaticSwapFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new static swap fee percentage to the specified pool.\"},\"unpausePool(address)\":{\"notice\":\"Reverse a `pause` operation, and restore the Pool to normal functionality.\"},\"unpauseVault()\":{\"notice\":\"Reverse a `pause` operation, and restore Vault pool operations to normal functionality.\"},\"unpauseVaultBuffers()\":{\"notice\":\"Unpauses native vault buffers globally.\"},\"updateAggregateSwapFeePercentage(address,uint256)\":{\"notice\":\"Update an aggregate swap fee percentage.\"},\"updateAggregateYieldFeePercentage(address,uint256)\":{\"notice\":\"Update an aggregate yield fee percentage.\"},\"vault()\":{\"notice\":\"Returns the main Vault address.\"}},\"notice\":\"Interface for functions defined on the `VaultAdmin` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":\"IVaultAdmin\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol":{"IVaultErrors":{"abi":[{"inputs":[],"name":"AfterAddLiquidityHookFailed","type":"error"},{"inputs":[],"name":"AfterInitializeHookFailed","type":"error"},{"inputs":[],"name":"AfterRemoveLiquidityHookFailed","type":"error"},{"inputs":[],"name":"AfterSwapHookFailed","type":"error"},{"inputs":[],"name":"AmountGivenZero","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"AmountInAboveMax","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"AmountOutBelowMin","type":"error"},{"inputs":[],"name":"BalanceNotSettled","type":"error"},{"inputs":[],"name":"BeforeAddLiquidityHookFailed","type":"error"},{"inputs":[],"name":"BeforeInitializeHookFailed","type":"error"},{"inputs":[],"name":"BeforeRemoveLiquidityHookFailed","type":"error"},{"inputs":[],"name":"BeforeSwapHookFailed","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"BptAmountInAboveMax","type":"error"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"BptAmountOutBelowMin","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"BufferAlreadyInitialized","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"BufferNotInitialized","type":"error"},{"inputs":[],"name":"BufferSharesInvalidOwner","type":"error"},{"inputs":[],"name":"BufferSharesInvalidReceiver","type":"error"},{"inputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"}],"name":"BufferTotalSupplyTooLow","type":"error"},{"inputs":[],"name":"CannotReceiveEth","type":"error"},{"inputs":[],"name":"CannotSwapSameToken","type":"error"},{"inputs":[],"name":"DoesNotSupportAddLiquidityCustom","type":"error"},{"inputs":[],"name":"DoesNotSupportDonation","type":"error"},{"inputs":[],"name":"DoesNotSupportRemoveLiquidityCustom","type":"error"},{"inputs":[],"name":"DoesNotSupportUnbalancedLiquidity","type":"error"},{"inputs":[],"name":"DynamicSwapFeeHookFailed","type":"error"},{"inputs":[],"name":"FeePrecisionTooHigh","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"HookAdjustedAmountInAboveMax","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"HookAdjustedAmountOutBelowMin","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"HookAdjustedSwapLimit","type":"error"},{"inputs":[{"internalType":"address","name":"poolHooksContract","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"poolFactory","type":"address"}],"name":"HookRegistrationFailed","type":"error"},{"inputs":[],"name":"InvalidAddLiquidityKind","type":"error"},{"inputs":[],"name":"InvalidRemoveLiquidityKind","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[],"name":"InvalidTokenConfiguration","type":"error"},{"inputs":[],"name":"InvalidTokenDecimals","type":"error"},{"inputs":[],"name":"InvalidTokenType","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"InvalidUnderlyingToken","type":"error"},{"inputs":[{"internalType":"uint256","name":"issuedShares","type":"uint256"},{"internalType":"uint256","name":"minIssuedShares","type":"uint256"}],"name":"IssuedSharesBelowMin","type":"error"},{"inputs":[],"name":"MaxTokens","type":"error"},{"inputs":[],"name":"MinTokens","type":"error"},{"inputs":[],"name":"NotEnoughBufferShares","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"expectedUnderlyingAmount","type":"uint256"},{"internalType":"uint256","name":"actualUnderlyingAmount","type":"uint256"}],"name":"NotEnoughUnderlying","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"expectedWrappedAmount","type":"uint256"},{"internalType":"uint256","name":"actualWrappedAmount","type":"uint256"}],"name":"NotEnoughWrapped","type":"error"},{"inputs":[],"name":"NotVaultDelegateCall","type":"error"},{"inputs":[],"name":"PauseBufferPeriodDurationTooLarge","type":"error"},{"inputs":[],"name":"PercentageAboveMax","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyInitialized","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolInRecoveryMode","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotInRecoveryMode","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotInitialized","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotPaused","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolNotRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolPauseWindowExpired","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolPaused","type":"error"},{"inputs":[],"name":"ProtocolFeesExceedTotalCollected","type":"error"},{"inputs":[],"name":"QueriesDisabled","type":"error"},{"inputs":[],"name":"QueriesDisabledPermanently","type":"error"},{"inputs":[],"name":"QuoteResultSpoofed","type":"error"},{"inputs":[],"name":"RouterNotTrusted","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderIsNotVault","type":"error"},{"inputs":[],"name":"SwapFeePercentageTooHigh","type":"error"},{"inputs":[],"name":"SwapFeePercentageTooLow","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"name":"SwapLimit","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TokenAlreadyRegistered","type":"error"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"TokenNotRegistered","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"expectedToken","type":"address"},{"internalType":"address","name":"actualToken","type":"address"}],"name":"TokensMismatch","type":"error"},{"inputs":[],"name":"TradeAmountTooSmall","type":"error"},{"inputs":[],"name":"VaultBuffersArePaused","type":"error"},{"inputs":[],"name":"VaultIsNotUnlocked","type":"error"},{"inputs":[],"name":"VaultNotPaused","type":"error"},{"inputs":[],"name":"VaultPauseWindowDurationTooLarge","type":"error"},{"inputs":[],"name":"VaultPauseWindowExpired","type":"error"},{"inputs":[],"name":"VaultPaused","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"WrapAmountTooSmall","type":"error"},{"inputs":[],"name":"WrongProtocolFeeControllerDeployment","type":"error"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"underlyingToken","type":"address"}],"name":"WrongUnderlyingToken","type":"error"},{"inputs":[],"name":"WrongVaultAdminDeployment","type":"error"},{"inputs":[],"name":"WrongVaultExtensionDeployment","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AfterAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountGivenZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"AmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"AmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"BptAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"BptAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"BufferAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"BufferNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BufferSharesInvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BufferSharesInvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"BufferTotalSupplyTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReceiveEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSwapSameToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportAddLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportDonation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportRemoveLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportUnbalancedLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DynamicSwapFeeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeePrecisionTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"HookAdjustedSwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolHooksContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"HookRegistrationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRemoveLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"InvalidUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minIssuedShares\",\"type\":\"uint256\"}],\"name\":\"IssuedSharesBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBufferShares\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedUnderlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualUnderlyingAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughUnderlying\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedWrappedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualWrappedAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughWrapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaultDelegateCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PauseBufferPeriodDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PercentageAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeesExceedTotalCollected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabledPermanently\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteResultSpoofed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterNotTrusted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualToken\",\"type\":\"address\"}],\"name\":\"TokensMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradeAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultBuffersArePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultIsNotUnlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"WrapAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongProtocolFeeControllerDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"WrongUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultAdminDeployment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultExtensionDeployment\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"AmountInAboveMax(address,uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total token amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\",\"tokenIn\":\"The incoming token\"}}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\",\"tokenOut\":\"The outgoing token\"}}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total BPT amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\"}}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\"}}],\"BufferAlreadyInitialized(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"BufferNotInitialized(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"BufferTotalSupplyTooLow(uint256)\":[{\"params\":{\"totalSupply\":\"The total supply value that was below the minimum\"}}],\"FeePrecisionTooHigh()\":[{\"details\":\"Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%). Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between the aggregate fee calculated here and that stored in the Vault.\"}],\"HookAdjustedAmountInAboveMax(address,uint256,uint256)\":[{\"params\":{\"amountIn\":\"The total token amount in\",\"maxAmountIn\":\"The amount of the limit that has been exceeded\",\"tokenIn\":\"The incoming token\"}}],\"HookAdjustedAmountOutBelowMin(address,uint256,uint256)\":[{\"params\":{\"amountOut\":\"The total BPT amount out\",\"minAmountOut\":\"The amount of the limit that has been exceeded\",\"tokenOut\":\"The outgoing token\"}}],\"HookAdjustedSwapLimit(uint256,uint256)\":[{\"params\":{\"amount\":\"The total amount in or out\",\"limit\":\"The amount of the limit that has been exceeded\"}}],\"HookRegistrationFailed(address,address,address)\":[{\"params\":{\"pool\":\"Address of the rejected pool\",\"poolFactory\":\"Address of the pool factory\",\"poolHooksContract\":\"Address of the hook contract that rejected the pool registration\"}}],\"InvalidUnderlyingToken(address)\":[{\"details\":\"This should never happen, but a malicious wrapper contract might do this (e.g., in an attempt to re-initialize the buffer).\",\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"IssuedSharesBelowMin(uint256,uint256)\":[{\"details\":\"Shares issued during initialization are below the requested amount.\"}],\"NotEnoughUnderlying(address,uint256,uint256)\":[{\"details\":\"A wrap/unwrap operation consumed more or returned less underlying tokens than it should.\"}],\"NotEnoughWrapped(address,uint256,uint256)\":[{\"details\":\"A wrap/unwrap operation consumed more or returned less wrapped tokens than it should.\"}],\"NotVaultDelegateCall()\":[{\"details\":\"It can only be called by the Vault via delegatecall.\"}],\"PoolAlreadyInitialized(address)\":[{\"params\":{\"pool\":\"The already initialized pool\"}}],\"PoolAlreadyRegistered(address)\":[{\"params\":{\"pool\":\"The already registered pool\"}}],\"PoolInRecoveryMode(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInRecoveryMode(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInitialized(address)\":[{\"params\":{\"pool\":\"The uninitialized pool\"}}],\"PoolNotPaused(address)\":[{\"params\":{\"pool\":\"The unpaused pool\"}}],\"PoolNotRegistered(address)\":[{\"params\":{\"pool\":\"The unregistered pool\"}}],\"PoolPauseWindowExpired(address)\":[{\"params\":{\"pool\":\"The pool\"}}],\"PoolPaused(address)\":[{\"params\":{\"pool\":\"The paused pool\"}}],\"ProtocolFeesExceedTotalCollected()\":[{\"details\":\"This occurs when the sum of the parts (aggregate swap or yield fee) is greater than the whole (total swap or yield fee). Also validated when the protocol fee controller updates aggregate fee percentages in the Vault.\"}],\"SenderIsNotVault(address)\":[{\"params\":{\"sender\":\"The account attempting to call a permissioned function\"}}],\"SwapFeePercentageTooHigh()\":[{\"details\":\"The Vault itself does not impose a universal minimum. Rather, it validates against the range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error if it is above the maximum value returned by the pool. Pools with dynamic fees do not check these limits.\"}],\"SwapFeePercentageTooLow()\":[{\"details\":\"The Vault itself does not impose a universal minimum. Rather, it validates against the range specified by the `ISwapFeePercentageBounds` interface. and reverts with this error if it is below the minimum value returned by the pool. Pools with dynamic fees do not check these limits.\"}],\"SwapLimit(uint256,uint256)\":[{\"params\":{\"amount\":\"The total amount in or out\",\"limit\":\"The amount of the limit that has been exceeded\"}}],\"TokenAlreadyRegistered(address)\":[{\"params\":{\"token\":\"The duplicate token\"}}],\"TokenNotRegistered(address)\":[{\"params\":{\"token\":\"The unregistered token\"}}],\"TokensMismatch(address,address,address)\":[{\"params\":{\"actualToken\":\"The actual token found at that index\",\"expectedToken\":\"The correct token at a given index in the pool\",\"pool\":\"Address of the pool\"}}],\"WrapAmountTooSmall(address)\":[{\"params\":{\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}],\"WrongUnderlyingToken(address,address)\":[{\"details\":\"This should never happen, but a malicious wrapper contract might not return the correct address. Legitimate wrapper contracts should make the asset a constant or immutable value.\",\"params\":{\"underlyingToken\":\"The underlying token returned by `asset`\",\"wrappedToken\":\"The wrapped token corresponding to the buffer\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"AfterAddLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert.\"}],\"AfterInitializeHookFailed()\":[{\"notice\":\"The pool has returned false to the afterInitialize hook, indicating the transaction should revert.\"}],\"AfterRemoveLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert.\"}],\"AfterSwapHookFailed()\":[{\"notice\":\"The pool has returned false to the afterSwap hook, indicating the transaction should revert.\"}],\"AmountGivenZero()\":[{\"notice\":\"The user tried to swap zero tokens.\"}],\"AmountInAboveMax(address,uint256,uint256)\":[{\"notice\":\"A required amountIn exceeds the maximum limit specified for the operation.\"}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"notice\":\"The actual amount out is below the minimum limit specified for the operation.\"}],\"BalanceNotSettled()\":[{\"notice\":\"A transient accounting operation completed with outstanding token deltas.\"}],\"BeforeAddLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert.\"}],\"BeforeInitializeHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeInitialize hook, indicating the transaction should revert.\"}],\"BeforeRemoveLiquidityHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert.\"}],\"BeforeSwapHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"notice\":\"The required BPT amount in exceeds the maximum limit specified for the operation.\"}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"notice\":\"The BPT amount received from adding liquidity is below the minimum specified for the operation.\"}],\"BufferAlreadyInitialized(address)\":[{\"notice\":\"The buffer for the given wrapped token was already initialized.\"}],\"BufferNotInitialized(address)\":[{\"notice\":\"The buffer for the given wrapped token was not initialized.\"}],\"BufferSharesInvalidOwner()\":[{\"notice\":\"Buffer shares were burned from the zero address.\"}],\"BufferSharesInvalidReceiver()\":[{\"notice\":\"Buffer shares were minted to the zero address.\"}],\"BufferTotalSupplyTooLow(uint256)\":[{\"notice\":\"The total supply of a buffer can't be lower than the absolute minimum.\"}],\"CannotReceiveEth()\":[{\"notice\":\"The contract should not receive ETH.\"}],\"CannotSwapSameToken()\":[{\"notice\":\"The user attempted to swap a token for itself.\"}],\"DoesNotSupportAddLiquidityCustom()\":[{\"notice\":\"Pool does not support adding liquidity with a customized input.\"}],\"DoesNotSupportDonation()\":[{\"notice\":\"Pool does not support adding liquidity through donation.\"}],\"DoesNotSupportRemoveLiquidityCustom()\":[{\"notice\":\"Pool does not support removing liquidity with a customized input.\"}],\"DoesNotSupportUnbalancedLiquidity()\":[{\"notice\":\"Pool does not support adding / removing liquidity with an unbalanced input.\"}],\"DynamicSwapFeeHookFailed()\":[{\"notice\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"FeePrecisionTooHigh()\":[{\"notice\":\"Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\"}],\"HookAdjustedAmountInAboveMax(address,uint256,uint256)\":[{\"notice\":\"A hook adjusted amountIn exceeds the maximum limit specified for the operation.\"}],\"HookAdjustedAmountOutBelowMin(address,uint256,uint256)\":[{\"notice\":\"The hook adjusted amount out is below the minimum limit specified for the operation.\"}],\"HookAdjustedSwapLimit(uint256,uint256)\":[{\"notice\":\"A hook adjusted amount in or out has exceeded the limit specified in the swap request.\"}],\"HookRegistrationFailed(address,address,address)\":[{\"notice\":\"A hook contract rejected a pool on registration.\"}],\"InvalidAddLiquidityKind()\":[{\"notice\":\"Add liquidity kind not supported.\"}],\"InvalidRemoveLiquidityKind()\":[{\"notice\":\"Remove liquidity kind not supported.\"}],\"InvalidToken()\":[{\"notice\":\"Invalid tokens (e.g., zero) cannot be registered.\"}],\"InvalidTokenConfiguration()\":[{\"notice\":\"The data in a TokenConfig struct is inconsistent or unsupported.\"}],\"InvalidTokenDecimals()\":[{\"notice\":\"Tokens with more than 18 decimals are not supported.\"}],\"InvalidTokenType()\":[{\"notice\":\"The token type given in a TokenConfig during pool registration is invalid.\"}],\"InvalidUnderlyingToken(address)\":[{\"notice\":\"A wrapped token reported the zero address as its underlying token asset.\"}],\"MaxTokens()\":[{\"notice\":\"The token count is above the maximum allowed.\"}],\"MinTokens()\":[{\"notice\":\"The token count is below the minimum allowed.\"}],\"NotEnoughBufferShares()\":[{\"notice\":\"The user is trying to remove more than their allocated shares from the buffer.\"}],\"NotVaultDelegateCall()\":[{\"notice\":\"The `VaultExtension` contract was called by an account directly.\"}],\"PauseBufferPeriodDurationTooLarge()\":[{\"notice\":\"The caller specified a buffer period longer than the maximum.\"}],\"PercentageAboveMax()\":[{\"notice\":\"A given percentage is above the maximum (usually a value close to FixedPoint.ONE, or 1e18 wei).\"}],\"PoolAlreadyInitialized(address)\":[{\"notice\":\"A pool has already been initialized. `initialize` may only be called once.\"}],\"PoolAlreadyRegistered(address)\":[{\"notice\":\"A pool has already been registered. `registerPool` may only be called once.\"}],\"PoolInRecoveryMode(address)\":[{\"notice\":\"Cannot enable recovery mode when already enabled.\"}],\"PoolNotInRecoveryMode(address)\":[{\"notice\":\"Cannot disable recovery mode when not enabled.\"}],\"PoolNotInitialized(address)\":[{\"notice\":\"A referenced pool has not been initialized.\"}],\"PoolNotPaused(address)\":[{\"notice\":\"Governance tried to unpause the Pool when it was not paused.\"}],\"PoolNotRegistered(address)\":[{\"notice\":\"A pool has not been registered.\"}],\"PoolPauseWindowExpired(address)\":[{\"notice\":\"Governance tried to pause a Pool after the pause period expired.\"}],\"PoolPaused(address)\":[{\"notice\":\"A user tried to perform an operation involving a paused Pool.\"}],\"ProtocolFeesExceedTotalCollected()\":[{\"notice\":\"Error raised when there is an overflow in the fee calculation.\"}],\"QueriesDisabled()\":[{\"notice\":\"A user tried to execute a query operation when they were disabled.\"}],\"QueriesDisabledPermanently()\":[{\"notice\":\"An admin tried to re-enable queries, but they were disabled permanently.\"}],\"QuoteResultSpoofed()\":[{\"notice\":\"Quote reverted with a reserved error code.\"}],\"RouterNotTrusted()\":[{\"notice\":\"An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance).\"}],\"SenderIsNotVault(address)\":[{\"notice\":\"Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\"}],\"SwapFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the swap fee percentage is greater than the maximum allowed value.\"}],\"SwapFeePercentageTooLow()\":[{\"notice\":\"Error raised when the swap fee percentage is less than the minimum allowed value.\"}],\"SwapLimit(uint256,uint256)\":[{\"notice\":\"An amount in or out has exceeded the limit specified in the swap request.\"}],\"TokenAlreadyRegistered(address)\":[{\"notice\":\"A token was already registered (i.e., it is a duplicate in the pool).\"}],\"TokenNotRegistered(address)\":[{\"notice\":\"The user attempted to operate with a token that is not in the pool.\"}],\"TokensMismatch(address,address,address)\":[{\"notice\":\"The token list passed into an operation does not match the pool tokens in the pool.\"}],\"TradeAmountTooSmall()\":[{\"notice\":\"The amount given or calculated for an operation is below the minimum limit.\"}],\"VaultBuffersArePaused()\":[{\"notice\":\"Buffer operation attempted while vault buffers are paused.\"}],\"VaultIsNotUnlocked()\":[{\"notice\":\"A user called a Vault function (swap, add/remove liquidity) outside the lock context.\"}],\"VaultNotPaused()\":[{\"notice\":\"Governance tried to unpause the Vault when it was not paused.\"}],\"VaultPauseWindowDurationTooLarge()\":[{\"notice\":\"The caller specified a pause window period longer than the maximum.\"}],\"VaultPauseWindowExpired()\":[{\"notice\":\"Governance tried to pause the Vault after the pause period expired.\"}],\"VaultPaused()\":[{\"notice\":\"A user tried to perform an operation while the Vault was paused.\"}],\"WrapAmountTooSmall(address)\":[{\"notice\":\"The amount given to wrap/unwrap was too small, which can introduce rounding issues.\"}],\"WrongProtocolFeeControllerDeployment()\":[{\"notice\":\"The `ProtocolFeeController` contract was configured with an incorrect Vault address.\"}],\"WrongUnderlyingToken(address,address)\":[{\"notice\":\"The wrapped token asset does not match the underlying token.\"}],\"WrongVaultAdminDeployment()\":[{\"notice\":\"The `VaultAdmin` contract was configured with an incorrect Vault address.\"}],\"WrongVaultExtensionDeployment()\":[{\"notice\":\"The `VaultExtension` contract was configured with an incorrect Vault address.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Errors are declared inside an interface (namespace) to improve DX with Typechain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":\"IVaultErrors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol":{"IVaultEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"}],"name":"AggregateSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}],"name":"AggregateYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"AuthorizerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnedShares","type":"uint256"}],"name":"BufferSharesBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"issuedShares","type":"uint256"}],"name":"BufferSharesMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":true,"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"amountsAddedRaw","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"swapFeeAmountsRaw","type":"uint256[]"}],"name":"LiquidityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWrapped","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"LiquidityAddedToBuffer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":true,"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"amountsRemovedRaw","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"swapFeeAmountsRaw","type":"uint256[]"}],"name":"LiquidityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountWrapped","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"LiquidityRemovedFromBuffer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"}],"name":"PoolInitialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"PoolPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"bool","name":"recoveryMode","type":"bool"}],"name":"PoolRecoveryModeStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"factory","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"indexed":false,"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"indexed":false,"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"},{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"indexed":false,"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"indexed":false,"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"PoolRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IProtocolFeeController","name":"newProtocolFeeController","type":"address"}],"name":"ProtocolFeeControllerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"SwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnedShares","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"withdrawnUnderlying","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"Unwrap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"bytes32","name":"eventKey","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"eventData","type":"bytes"}],"name":"VaultAuxiliary","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"VaultBuffersPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"VaultPausedStateChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"VaultQueriesDisabled","type":"event"},{"anonymous":false,"inputs":[],"name":"VaultQueriesEnabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"depositedUnderlying","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"mintedShares","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bufferBalances","type":"bytes32"}],"name":"Wrap","type":"event"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"AggregateSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"AggregateYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"}],\"name\":\"BufferSharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuedShares\",\"type\":\"uint256\"}],\"name\":\"BufferSharesMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsAddedRaw\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmountsRaw\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"LiquidityAddedToBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsRemovedRaw\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapFeeAmountsRaw\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"LiquidityRemovedFromBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PoolPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"recoveryMode\",\"type\":\"bool\"}],\"name\":\"PoolRecoveryModeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IProtocolFeeController\",\"name\":\"newProtocolFeeController\",\"type\":\"address\"}],\"name\":\"ProtocolFeeControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"Unwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"eventKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"VaultAuxiliary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultBuffersPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultQueriesDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VaultQueriesEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedUnderlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bufferBalances\",\"type\":\"bytes32\"}],\"name\":\"Wrap\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Events are declared inside an interface (namespace) to improve DX with Typechain.\",\"events\":{\"AggregateSwapFeePercentageChanged(address,uint256)\":{\"details\":\"The `ProtocolFeeController` will emit an event with the underlying change.\",\"params\":{\"aggregateSwapFeePercentage\":\"The new aggregate swap fee percentage\",\"pool\":\"The pool whose aggregate swap fee percentage changed\"}},\"AggregateYieldFeePercentageChanged(address,uint256)\":{\"details\":\"The `ProtocolFeeController` will emit an event with the underlying change.\",\"params\":{\"aggregateYieldFeePercentage\":\"The new aggregate yield fee percentage\",\"pool\":\"The pool whose aggregate yield fee percentage changed\"}},\"AuthorizerChanged(address)\":{\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"BufferSharesBurned(address,address,uint256)\":{\"details\":\"The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares` retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the \\\"totalSupply\\\" of a buffer.\",\"params\":{\"burnedShares\":\"The amount of \\\"internal BPT\\\" shares burned\",\"from\":\"The owner of the burned shares\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"BufferSharesMinted(address,address,uint256)\":{\"details\":\"The shares are not tokenized like pool BPT, but accounted for in the Vault. `getBufferOwnerShares` retrieves the current total shares for a given buffer and address, and `getBufferTotalShares` returns the \\\"totalSupply\\\" of a buffer.\",\"params\":{\"issuedShares\":\"The amount of \\\"internal BPT\\\" shares created\",\"to\":\"The owner of the minted shares\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"LiquidityAdded(address,address,uint8,uint256,uint256[],uint256[])\":{\"params\":{\"amountsAddedRaw\":\"The amount of each token that was added, sorted in token registration order\",\"kind\":\"The add liquidity operation type (e.g., proportional, custom)\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool with liquidity added\",\"swapFeeAmountsRaw\":\"The total swap fees charged, sorted in token registration order\",\"totalSupply\":\"The total supply of the pool after the operation\"}},\"LiquidityAddedToBuffer(address,uint256,uint256,bytes32)\":{\"details\":\"The underlying token can be derived from the wrapped token, so it's not included here.\",\"params\":{\"amountUnderlying\":\"The amount of the underlying token that was deposited\",\"amountWrapped\":\"The amount of the wrapped token that was deposited\",\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"LiquidityRemoved(address,address,uint8,uint256,uint256[],uint256[])\":{\"params\":{\"amountsRemovedRaw\":\"The amount of each token that was removed, sorted in token registration order\",\"kind\":\"The remove liquidity operation type (e.g., proportional, custom)\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool with liquidity removed\",\"swapFeeAmountsRaw\":\"The total swap fees charged, sorted in token registration order\",\"totalSupply\":\"The total supply of the pool after the operation\"}},\"LiquidityRemovedFromBuffer(address,uint256,uint256,bytes32)\":{\"details\":\"The underlying token can be derived from the wrapped token, so it's not included here.\",\"params\":{\"amountUnderlying\":\"The amount of the underlying token that was withdrawn\",\"amountWrapped\":\"The amount of the wrapped token that was withdrawn\",\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"wrappedToken\":\"The wrapped token that identifies the buffer\"}},\"PoolInitialized(address)\":{\"params\":{\"pool\":\"The pool being initialized\"}},\"PoolPausedStateChanged(address,bool)\":{\"params\":{\"paused\":\"True if the pool was paused\",\"pool\":\"The pool that was just paused or unpaused\"}},\"PoolRecoveryModeStateChanged(address,bool)\":{\"params\":{\"pool\":\"The pool\",\"recoveryMode\":\"True if recovery mode was enabled\"}},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,uint32,(address,address,address),(bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),(bool,bool,bool,bool))\":{\"params\":{\"factory\":\"The factory creating the pool\",\"hooksConfig\":\"Flags indicating which hooks the pool supports and address of hooks contract\",\"liquidityManagement\":\"Supported liquidity management hook flags\",\"pauseWindowEndTime\":\"The pool's pause window end time\",\"pool\":\"The pool being registered\",\"roleAccounts\":\"Addresses the Vault will allow to change certain pool settings\",\"swapFeePercentage\":\"The static swap fee of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"ProtocolFeeControllerChanged(address)\":{\"params\":{\"newProtocolFeeController\":\"The address of the new protocol fee controller\"}},\"Swap(address,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"Number of tokenIn tokens\",\"amountOut\":\"Number of tokenOut tokens\",\"pool\":\"The pool with the tokens being swapped\",\"swapFeeAmount\":\"Swap fee amount paid\",\"swapFeePercentage\":\"Swap fee percentage applied (can differ if dynamic)\",\"tokenIn\":\"The token entering the Vault (balance increases)\",\"tokenOut\":\"The token leaving the Vault (balance decreases)\"}},\"SwapFeePercentageChanged(address,uint256)\":{\"params\":{\"swapFeePercentage\":\"The new swap fee percentage for the pool\"}},\"Unwrap(address,uint256,uint256,bytes32)\":{\"params\":{\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"burnedShares\":\"Number of shares (wrapped tokens) burned\",\"withdrawnUnderlying\":\"Number of underlying tokens withdrawn\",\"wrappedToken\":\"The wrapped token address\"}},\"VaultAuxiliary(address,bytes32,bytes)\":{\"params\":{\"eventData\":\"Encoded event data\",\"eventKey\":\"Event key\",\"pool\":\"Pool address\"}},\"VaultBuffersPausedStateChanged(bool)\":{\"details\":\"If buffers all paused, all buffer operations (i.e., all calls through the Router with `isBuffer` set to true) will revert.\",\"params\":{\"paused\":\"True if the Vault buffers were paused\"}},\"VaultPausedStateChanged(bool)\":{\"params\":{\"paused\":\"True if the Vault was paused\"}},\"Wrap(address,uint256,uint256,bytes32)\":{\"params\":{\"bufferBalances\":\"The final buffer balances, packed in 128-bit words (underlying, wrapped)\",\"depositedUnderlying\":\"Number of underlying tokens deposited\",\"mintedShares\":\"Number of shares (wrapped tokens) minted\",\"wrappedToken\":\"The wrapped token address\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AggregateSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"A protocol or pool creator fee has changed, causing an update to the aggregate swap fee.\"},\"AggregateYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"A protocol or pool creator fee has changed, causing an update to the aggregate yield fee.\"},\"AuthorizerChanged(address)\":{\"notice\":\"A new authorizer is set by `setAuthorizer`.\"},\"BufferSharesBurned(address,address,uint256)\":{\"notice\":\"Buffer shares were burned for an ERC4626 buffer corresponding to a given wrapped token.\"},\"BufferSharesMinted(address,address,uint256)\":{\"notice\":\"Buffer shares were minted for an ERC4626 buffer corresponding to a given wrapped token.\"},\"LiquidityAdded(address,address,uint8,uint256,uint256[],uint256[])\":{\"notice\":\"Liquidity has been added to a pool (including initialization).\"},\"LiquidityAddedToBuffer(address,uint256,uint256,bytes32)\":{\"notice\":\"Liquidity was added to an ERC4626 buffer corresponding to the given wrapped token.\"},\"LiquidityRemoved(address,address,uint8,uint256,uint256[],uint256[])\":{\"notice\":\"Liquidity has been removed from a pool.\"},\"LiquidityRemovedFromBuffer(address,uint256,uint256,bytes32)\":{\"notice\":\"Liquidity was removed from an ERC4626 buffer.\"},\"PoolInitialized(address)\":{\"notice\":\"A Pool was initialized by calling `initialize`.\"},\"PoolPausedStateChanged(address,bool)\":{\"notice\":\"A Pool's pause status has changed.\"},\"PoolRecoveryModeStateChanged(address,bool)\":{\"notice\":\"Recovery mode has been enabled or disabled for a pool.\"},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,uint32,(address,address,address),(bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),(bool,bool,bool,bool))\":{\"notice\":\"A Pool was registered by calling `registerPool`.\"},\"ProtocolFeeControllerChanged(address)\":{\"notice\":\"A new protocol fee controller is set by `setProtocolFeeController`.\"},\"Swap(address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"A swap has occurred.\"},\"SwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the swap fee percentage of a pool is updated.\"},\"Unwrap(address,uint256,uint256,bytes32)\":{\"notice\":\"An unwrap operation has occurred.\"},\"VaultAuxiliary(address,bytes32,bytes)\":{\"notice\":\"Pools can use this event to emit event data from the Vault.\"},\"VaultBuffersPausedStateChanged(bool)\":{\"notice\":\"The Vault buffers pause status has changed.\"},\"VaultPausedStateChanged(bool)\":{\"notice\":\"The Vault's pause status has changed.\"},\"VaultQueriesDisabled()\":{\"notice\":\"`disableQuery` has been called on the Vault, disabling query functionality.\"},\"VaultQueriesEnabled()\":{\"notice\":\"`enableQuery` has been called on the Vault, enabling query functionality.\"},\"Wrap(address,uint256,uint256,bytes32)\":{\"notice\":\"A wrap operation has occurred.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":\"IVaultEvents\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol":{"IVaultExtension":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"tokenAllowance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"tokenBalance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct PoolSwapParams","name":"swapParams","type":"tuple"}],"name":"computeDynamicSwapFeePercentage","outputs":[{"internalType":"uint256","name":"dynamicSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"eventKey","type":"bytes32"},{"internalType":"bytes","name":"eventData","type":"bytes"}],"name":"emitAuxiliaryEvent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getAddLiquidityCalledFlag","outputs":[{"internalType":"bool","name":"liquidityAdded","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateSwapFeeAmount","outputs":[{"internalType":"uint256","name":"swapFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getAggregateYieldFeeAmount","outputs":[{"internalType":"uint256","name":"yieldFeeAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"authorizer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getBptRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getCurrentLiveBalances","outputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"getERC4626BufferAsset","outputs":[{"internalType":"address","name":"asset","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getHooksConfig","outputs":[{"components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}],"internalType":"struct HooksConfig","name":"hooksConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonzeroDeltaCount","outputs":[{"internalType":"uint256","name":"nonzeroDeltaCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolConfig","outputs":[{"components":[{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"},{"internalType":"uint40","name":"tokenDecimalDiffs","type":"uint40"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"isPoolRegistered","type":"bool"},{"internalType":"bool","name":"isPoolInitialized","type":"bool"},{"internalType":"bool","name":"isPoolPaused","type":"bool"},{"internalType":"bool","name":"isPoolInRecoveryMode","type":"bool"}],"internalType":"struct PoolConfig","name":"poolConfig","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolData","outputs":[{"components":[{"internalType":"PoolConfigBits","name":"poolConfigBits","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"},{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"}],"internalType":"struct PoolData","name":"poolData","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolPausedState","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"},{"internalType":"uint32","name":"poolPauseWindowEndTime","type":"uint32"},{"internalType":"uint32","name":"poolBufferPeriodEndTime","type":"uint32"},{"internalType":"address","name":"pauseManager","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolRoleAccounts","outputs":[{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenInfo","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"lastBalancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokenRates","outputs":[{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeeController","outputs":[{"internalType":"contract IProtocolFeeController","name":"protocolFeeController","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getReservesOf","outputs":[{"internalType":"uint256","name":"reserveAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getStaticSwapFeePercentage","outputs":[{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getTokenDelta","outputs":[{"internalType":"int256","name":"tokenDelta","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultAdmin","outputs":[{"internalType":"address","name":"vaultAdmin","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"initialize","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"name":"isERC4626BufferInitialized","outputs":[{"internalType":"bool","name":"isBufferInitialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInRecoveryMode","outputs":[{"internalType":"bool","name":"inRecoveryMode","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolInitialized","outputs":[{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolPaused","outputs":[{"internalType":"bool","name":"poolPaused","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"registered","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabled","outputs":[{"internalType":"bool","name":"queryDisabled","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isQueryDisabledPermanently","outputs":[{"internalType":"bool","name":"queryDisabledPermanently","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isUnlocked","outputs":[{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"quote","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"quoteAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}],"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"protocolFeeExempt","type":"bool"},{"components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}],"internalType":"struct PoolRoleAccounts","name":"roleAccounts","type":"tuple"},{"internalType":"address","name":"poolHooksContract","type":"address"},{"components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}],"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple"}],"name":"registerPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"}],"name":"removeLiquidityRecovery","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"tokenTotalSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address,address)":"927da105","approve(address,address,uint256)":"e1f21c67","balanceOf(address,address)":"f7888aec","computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))":"4d472bdd","emitAuxiliaryEvent(bytes32,bytes)":"c8088247","getAddLiquidityCalledFlag(address)":"ace9b89b","getAggregateSwapFeeAmount(address,address)":"85e0b999","getAggregateYieldFeeAmount(address,address)":"00fdfa13","getAuthorizer()":"aaabadc5","getBptRate(address)":"4f037ee7","getCurrentLiveBalances(address)":"535cfd8a","getERC4626BufferAsset(address)":"4afbaf5a","getHooksConfig(address)":"ce8630d4","getNonzeroDeltaCount()":"db817187","getPoolConfig(address)":"f29486a1","getPoolData(address)":"13d21cdf","getPoolPausedState(address)":"15e32046","getPoolRoleAccounts(address)":"e9ddeb26","getPoolTokenInfo(address)":"67e0e076","getPoolTokenRates(address)":"7e361bde","getPoolTokens(address)":"ca4f2803","getProtocolFeeController()":"85f2dbd4","getReservesOf(address)":"96787092","getStaticSwapFeePercentage(address)":"b45090f9","getTokenDelta(address)":"9e825ff5","getVaultAdmin()":"1ba0ae45","initialize(address,address,address[],uint256[],uint256,bytes)":"ba8a2be0","isERC4626BufferInitialized(address)":"6844846b","isPoolInRecoveryMode(address)":"be7d628a","isPoolInitialized(address)":"532cec7c","isPoolPaused(address)":"6c9bc732","isPoolRegistered(address)":"c673bdaf","isQueryDisabled()":"b4aef0ab","isQueryDisabledPermanently()":"13ef8a5d","isUnlocked()":"8380edb7","quote(bytes)":"edfa3568","quoteAndRevert(bytes)":"757d64b3","registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))":"eeec802f","removeLiquidityRecovery(address,address,uint256,uint256[])":"a07d6040","totalSupply(address)":"e4dc2aa4","vault()":"fbfa77cf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"}],\"name\":\"computeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynamicSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"emitAuxiliaryEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAddLiquidityCalledFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"liquidityAdded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateSwapFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateYieldFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"authorizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBptRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getCurrentLiveBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getERC4626BufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getHooksConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"internalType\":\"struct HooksConfig\",\"name\":\"hooksConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonzeroDeltaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonzeroDeltaCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"tokenDecimalDiffs\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPoolRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInRecoveryMode\",\"type\":\"bool\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"poolConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"PoolConfigBits\",\"name\":\"poolConfigBits\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"poolPauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"poolBufferPeriodEndTime\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolRoleAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastBalancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeController\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"protocolFeeController\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStaticSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"tokenDelta\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultAdmin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"isERC4626BufferInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBufferInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inRecoveryMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabledPermanently\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"queryDisabledPermanently\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quoteAndRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"roleAccounts\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"poolHooksContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"removeLiquidityRecovery\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"`VaultExtension` handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and liquidity operations.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"params\":{\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\",\"token\":\"Address of the token\"},\"returns\":{\"tokenAllowance\":\"Amount of tokens the spender is allowed to spend\"}},\"approve(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to approve\",\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\"},\"returns\":{\"success\":\"True if successful, false otherwise\"}},\"balanceOf(address,address)\":{\"params\":{\"account\":\"Address of the account\",\"token\":\"Address of the token\"},\"returns\":{\"tokenBalance\":\"Token balance of the account\"}},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"details\":\"Reverts if the hook doesn't return the success flag set to `true`.\",\"params\":{\"pool\":\"The pool\",\"swapParams\":\"The swap parameters used to compute the fee\"},\"returns\":{\"dynamicSwapFeePercentage\":\"The dynamic swap fee percentage\"}},\"emitAuxiliaryEvent(bytes32,bytes)\":{\"params\":{\"eventData\":\"Encoded event data\",\"eventKey\":\"Event key\"}},\"getAddLiquidityCalledFlag(address)\":{\"details\":\"Taxing remove liquidity proportional whenever liquidity was added in the same `unlock` call adds an extra layer of security, discouraging operations that try to undo others for profit. Remove liquidity proportional is the only standard way to exit a position without fees, and this flag is used to enable fees in that case. It also discourages indirect swaps via unbalanced add and remove proportional, as they are expected to be worse than a simple swap for every pool type.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"liquidityAdded\":\"True if liquidity has been added to this pool in the current transaction Note that there is no `sessionId` argument; it always returns the value for the current (i.e., latest) session.\"}},\"getAggregateSwapFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"swapFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAggregateYieldFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"yieldFeeAmount\":\"The total amount of fees accumulated in the specified token\"}},\"getAuthorizer()\":{\"details\":\"The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can be changed through a permissioned call.\",\"returns\":{\"authorizer\":\"Address of the authorizer contract\"}},\"getBptRate(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"rate\":\"BPT rate\"}},\"getCurrentLiveBalances(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesLiveScaled18\":\"Token balances after paying yield fees, applying decimal scaling and rates\"}},\"getERC4626BufferAsset(address)\":{\"details\":\"To avoid malicious wrappers (e.g., that might potentially change their asset after deployment), routers should never call `wrapper.asset()` directly, at least without checking it against the asset registered with the Vault on initialization.\",\"params\":{\"wrappedToken\":\"The wrapped token specifying the buffer\"},\"returns\":{\"asset\":\"The underlying asset of the wrapped token\"}},\"getHooksConfig(address)\":{\"details\":\"The `HooksConfig` contains flags indicating which pool hooks are implemented.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"hooksConfig\":\"The hooks configuration as a `HooksConfig` struct\"}},\"getNonzeroDeltaCount()\":{\"returns\":{\"nonzeroDeltaCount\":\"The current value of `_nonzeroDeltaCount`\"}},\"getPoolConfig(address)\":{\"details\":\"The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"poolConfig\":\"The pool configuration as a `PoolConfig` struct\"}},\"getPoolData(address)\":{\"details\":\"This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\",\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"poolData\":\"The `PoolData` result\"}},\"getPoolPausedState(address)\":{\"details\":\"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period. Balancer timestamps are 32 bits.\",\"params\":{\"pool\":\"The pool whose data is requested\"},\"returns\":{\"pauseManager\":\"The pause manager, or the zero address\",\"poolBufferPeriodEndTime\":\"The timestamp after which the Pool unpauses itself (if paused)\",\"poolPauseWindowEndTime\":\"The timestamp of the end of the Pool's pause window\",\"poolPaused\":\"True if the Pool is paused\"}},\"getPoolRoleAccounts(address)\":{\"params\":{\"pool\":\"The address of the pool whose roles are being queried\"},\"returns\":{\"roleAccounts\":\"A struct containing the role accounts for the pool (or 0 if unassigned)\"}},\"getPoolTokenInfo(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesRaw\":\"Current native decimal balances of the pool tokens, sorted in token registration order\",\"lastBalancesLiveScaled18\":\"Last saved live balances, sorted in token registration order\",\"tokenInfo\":\"Token info structs (type, rate provider, yield flag), sorted in token registration order\",\"tokens\":\"The pool tokens, sorted in registration order\"}},\"getPoolTokenRates(address)\":{\"details\":\"This function performs external calls if tokens are yield-bearing. All returned arrays are in token registration order.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"decimalScalingFactors\":\"Conversion factor used to adjust for token decimals for uniform precision in calculations. FP(1) for 18-decimal tokens\",\"tokenRates\":\"18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\"}},\"getPoolTokens(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"tokens\":\"List of tokens in the pool\"}},\"getProtocolFeeController()\":{\"returns\":{\"protocolFeeController\":\"Address of the ProtocolFeeController\"}},\"getReservesOf(address)\":{\"params\":{\"token\":\"The token for which to retrieve the reserve\"},\"returns\":{\"reserveAmount\":\"The amount of reserves for the given token\"}},\"getStaticSwapFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool whose static swap fee percentage is being queried\"},\"returns\":{\"swapFeePercentage\":\"The current static swap fee percentage for the specified pool\"}},\"getTokenDelta(address)\":{\"details\":\"This function allows reading the value from the `_tokenDeltas` mapping.\",\"params\":{\"token\":\"The token for which the delta is being fetched\"},\"returns\":{\"tokenDelta\":\"The delta of the specified token\"}},\"getVaultAdmin()\":{\"details\":\"The VaultAdmin contract mostly implements permissioned functions.\",\"returns\":{\"vaultAdmin\":\"The address of the Vault admin\"}},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Address of the pool to initialize\",\"to\":\"Address that will receive the output BPT\",\"tokens\":\"Tokens used to seed the pool (must match the registered tokens)\",\"userData\":\"Additional (optional) data required for adding initial liquidity\"},\"returns\":{\"bptAmountOut\":\"Output pool token amount\"}},\"isERC4626BufferInitialized(address)\":{\"details\":\"An initialized buffer should have an asset registered in the Vault.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"isBufferInitialized\":\"True if the ERC4626 buffer is initialized\"}},\"isPoolInRecoveryMode(address)\":{\"details\":\"Recovery Mode enables a safe proportional withdrawal path, with no external calls.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"inRecoveryMode\":\"True if the pool is in Recovery Mode, false otherwise\"}},\"isPoolInitialized(address)\":{\"details\":\"An initialized pool can be considered registered as well.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"initialized\":\"True if the pool is initialized, false otherwise\"}},\"isPoolPaused(address)\":{\"details\":\"If a pool is paused, all non-Recovery Mode state-changing operations will revert.\",\"params\":{\"pool\":\"The pool to be checked\"},\"returns\":{\"poolPaused\":\"True if the pool is paused\"}},\"isPoolRegistered(address)\":{\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"registered\":\"True if the pool is registered, false otherwise\"}},\"isQueryDisabled()\":{\"details\":\"If true, queries might either be disabled temporarily or permanently.\",\"returns\":{\"queryDisabled\":\"True if query functionality is reversibly disabled\"}},\"isQueryDisabledPermanently()\":{\"details\":\"This is a one-way switch. Once queries are disabled permanently, they can never be re-enabled.\",\"returns\":{\"queryDisabledPermanently\":\"True if query functionality is permanently disabled\"}},\"isUnlocked()\":{\"details\":\"The Vault must be unlocked to perform state-changing liquidity operations.\",\"returns\":{\"unlocked\":\"True if the Vault is unlocked, false otherwise\"}},\"quote(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `onlyWhenUnlocked`. `transient` modifier ensuring balances changes within the Vault are settled.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}},\"quoteAndRevert(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `onlyWhenUnlocked` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `onlyWhenUnlocked`. `transient` modifier ensuring balances changes within the Vault are settled. This call always reverts, returning the result in the revert reason.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"}},\"registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))\":{\"details\":\"A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused pool will automatically unpause. Balancer timestamps are 32 bits. A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to the Vault. If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the authorizer.\",\"params\":{\"liquidityManagement\":\"Liquidity management flags with implemented methods\",\"pauseWindowEndTime\":\"The timestamp after which it is no longer possible to pause the pool\",\"pool\":\"The address of the pool being registered\",\"poolHooksContract\":\"Contract that implements the hooks for the pool\",\"protocolFeeExempt\":\"If true, the pool's initial aggregate fees will be set to 0\",\"roleAccounts\":\"Addresses the Vault will allow to change certain pool settings\",\"swapFeePercentage\":\"The initial static swap fee percentage of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"removeLiquidityRecovery(address,address,uint256,uint256[])\":{\"params\":{\"exactBptAmountIn\":\"Input pool token amount\",\"from\":\"Address of user to burn pool tokens from\",\"minAmountsOut\":\"Minimum amounts of tokens to be received, sorted in token registration order\",\"pool\":\"Address of the pool\"},\"returns\":{\"amountsOut\":\"Actual calculated amounts of output tokens, sorted in token registration order\"}},\"totalSupply(address)\":{\"params\":{\"token\":\"The token address\"},\"returns\":{\"tokenTotalSupply\":\"Total supply of the token\"}},\"vault()\":{\"details\":\"The main Vault contains the entrypoint and main liquidity operation implementations.\",\"returns\":{\"_0\":\"vault The address of the main Vault\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"Gets the allowance of a spender for a given ERC20 token and owner.\"},\"approve(address,address,uint256)\":{\"notice\":\"Approves a spender to spend pool tokens on behalf of sender.\"},\"balanceOf(address,address)\":{\"notice\":\"Gets the balance of an account for a given ERC20 token.\"},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"notice\":\"Query the current dynamic swap fee percentage of a pool, given a set of swap parameters.\"},\"emitAuxiliaryEvent(bytes32,bytes)\":{\"notice\":\"Pools can use this event to emit event data from the Vault.\"},\"getAddLiquidityCalledFlag(address)\":{\"notice\":\"This flag is used to detect and tax \\\"round-trip\\\" interactions (adding and removing liquidity in the same pool).\"},\"getAggregateSwapFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\"},\"getAggregateYieldFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\"},\"getAuthorizer()\":{\"notice\":\"Returns the Authorizer address.\"},\"getBptRate(address)\":{\"notice\":\"The current rate of a pool token (BPT) = invariant / totalSupply.\"},\"getCurrentLiveBalances(address)\":{\"notice\":\"Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in registration order.\"},\"getERC4626BufferAsset(address)\":{\"notice\":\"Gets the registered asset for a given buffer.\"},\"getHooksConfig(address)\":{\"notice\":\"Gets the hooks configuration parameters of a pool.\"},\"getNonzeroDeltaCount()\":{\"notice\":\"Returns the count of non-zero deltas.\"},\"getPoolConfig(address)\":{\"notice\":\"Gets the configuration parameters of a pool.\"},\"getPoolData(address)\":{\"notice\":\"Returns comprehensive pool data for the given pool.\"},\"getPoolPausedState(address)\":{\"notice\":\"Returns the paused status, and end times of the Pool's pause window and buffer period.\"},\"getPoolRoleAccounts(address)\":{\"notice\":\"Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\"},\"getPoolTokenInfo(address)\":{\"notice\":\"Gets the raw data for a pool: tokens, raw balances, scaling factors.\"},\"getPoolTokenRates(address)\":{\"notice\":\"Gets pool token rates.\"},\"getPoolTokens(address)\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"getProtocolFeeController()\":{\"notice\":\"Returns the Protocol Fee Controller address.\"},\"getReservesOf(address)\":{\"notice\":\"Retrieves the reserve (i.e., total Vault balance) of a given token.\"},\"getStaticSwapFeePercentage(address)\":{\"notice\":\"Fetches the static swap fee percentage for a given pool.\"},\"getTokenDelta(address)\":{\"notice\":\"Retrieves the token delta for a specific token.\"},\"getVaultAdmin()\":{\"notice\":\"Returns the VaultAdmin contract address.\"},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"notice\":\"Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\"},\"isERC4626BufferInitialized(address)\":{\"notice\":\"Checks if the wrapped token has an initialized buffer in the Vault.\"},\"isPoolInRecoveryMode(address)\":{\"notice\":\"Checks whether a pool is in Recovery Mode.\"},\"isPoolInitialized(address)\":{\"notice\":\"Checks whether a pool is initialized.\"},\"isPoolPaused(address)\":{\"notice\":\"Indicates whether a pool is paused.\"},\"isPoolRegistered(address)\":{\"notice\":\"Checks whether a pool is registered.\"},\"isQueryDisabled()\":{\"notice\":\"Returns true if queries are disabled on the Vault.\"},\"isQueryDisabledPermanently()\":{\"notice\":\"Returns true if queries are disabled permanently; false if they are enabled.\"},\"isUnlocked()\":{\"notice\":\"Returns whether the Vault is unlocked (i.e., executing an operation).\"},\"quote(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"quoteAndRevert(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"registerPool(address,(address,uint8,address,bool)[],uint256,uint32,bool,(address,address,address),address,(bool,bool,bool,bool))\":{\"notice\":\"Registers a pool, associating it with its factory and the tokens it manages.\"},\"removeLiquidityRecovery(address,address,uint256,uint256[])\":{\"notice\":\"Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out. The request is implemented by the Vault without any interaction with the pool, ensuring that it works the same for all pools, and cannot be disabled by a new pool type.\"},\"totalSupply(address)\":{\"notice\":\"Gets the total supply of a given ERC20 token.\"},\"vault()\":{\"notice\":\"Returns the main Vault address.\"}},\"notice\":\"Interface for functions defined on the `VaultExtension` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":\"IVaultExtension\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol":{"IVaultMain":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct AddLiquidityParams","name":"params","type":"tuple"}],"name":"addLiquidity","outputs":[{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"enum WrappingDirection","name":"direction","type":"uint8"},{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"}],"internalType":"struct BufferWrapOrUnwrapParams","name":"params","type":"tuple"}],"name":"erc4626BufferWrapOrUnwrap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getPoolTokenCountAndIndexOfToken","outputs":[{"internalType":"uint256","name":"tokenCount","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaultExtension","outputs":[{"internalType":"address","name":"vaultExtension","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct RemoveLiquidityParams","name":"params","type":"tuple"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"sendTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amountHint","type":"uint256"}],"name":"settle","outputs":[{"internalType":"uint256","name":"credit","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct VaultSwapParams","name":"vaultSwapParams","type":"tuple"}],"name":"swap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"unlock","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addLiquidity((address,address,uint256[],uint256,uint8,bytes))":"4af29ec4","erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))":"43583be5","getPoolTokenCountAndIndexOfToken(address,address)":"c9c1661b","getVaultExtension()":"b9a8effa","removeLiquidity((address,address,uint256,uint256[],uint8,bytes))":"21457897","sendTo(address,address,uint256)":"ae639329","settle(address,uint256)":"15afd409","swap((uint8,address,address,address,uint256,uint256,bytes))":"2bfb780c","transfer(address,address,uint256)":"beabacc8","transferFrom(address,address,address,uint256)":"15dacbea","unlock(bytes)":"48c89491"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"enum WrappingDirection\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"}],\"internalType\":\"struct BufferWrapOrUnwrapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"erc4626BufferWrapOrUnwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenCountAndIndexOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultExtension\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountHint\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct VaultSwapParams\",\"name\":\"vaultSwapParams\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These are generally \\\"critical path\\\" functions (swap, add/remove liquidity) that are in the main contract for technical or performance reasons.\",\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"details\":\"Caution should be exercised when adding liquidity because the Vault has the capability to transfer tokens from any user, given that it holds all allowances.\",\"params\":{\"params\":\"Parameters for the add liquidity (see above for struct definition)\"},\"returns\":{\"amountsIn\":\"Actual amounts of input tokens\",\"bptAmountOut\":\"Output pool token amount\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))\":{\"details\":\"All parameters are given in raw token decimal encoding. It requires the buffer to be initialized, and uses the internal wrapped token buffer when it has enough liquidity to avoid external calls.\",\"params\":{\"params\":\"Parameters for the wrap/unwrap operation (see struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"details\":\"Reverts if the pool is not registered, or if the token does not belong to the pool.\",\"params\":{\"pool\":\"Address of the pool\",\"token\":\"Address of the token\"},\"returns\":{\"index\":\"Index corresponding to the given token in the pool's token list\",\"tokenCount\":\"Number of tokens in the pool\"}},\"getVaultExtension()\":{\"details\":\"Function is in the main Vault contract. The VaultExtension handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls.\",\"returns\":{\"vaultExtension\":\"Address of the VaultExtension\"}},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"details\":\"Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user. Untrusted routers require prior approval from the user. This is the only function allowed to call _queryModeBalanceIncrease (and only in a query context).\",\"params\":{\"params\":\"Parameters for the remove liquidity (see above for struct definition)\"},\"returns\":{\"amountsOut\":\"Actual amounts of output tokens\",\"bptAmountIn\":\"Actual amount of BPT burned\",\"returnData\":\"Arbitrary (optional) data with an encoded response from the pool\"}},\"sendTo(address,address,uint256)\":{\"details\":\"There is no inverse operation for this function. Transfer funds to the Vault and call `settle` to cancel debts.\",\"params\":{\"amount\":\"Amount of tokens to send\",\"to\":\"Recipient address\",\"token\":\"Address of the token\"}},\"settle(address,uint256)\":{\"details\":\"Protects the caller against leftover dust in the Vault for the token being settled. The caller should know in advance how many tokens were paid to the Vault, so it can provide it as a hint to discard any excess in the Vault balance. If the given hint is equal to or higher than the difference in reserves, the difference in reserves is given as credit to the caller. If it's higher, the caller sent fewer tokens than expected, so settlement would fail. If the given hint is lower than the difference in reserves, the hint is given as credit to the caller. In this case, the excess would be absorbed by the Vault (and reflected correctly in the reserves), but would not affect settlement. The credit supplied by the Vault can be calculated as `min(reserveDifference, amountHint)`, where the reserve difference equals current balance of the token minus existing reserves of the token when the function is called.\",\"params\":{\"amountHint\":\"Amount paid as reported by the caller\",\"token\":\"Address of the token\"},\"returns\":{\"credit\":\"Credit received in return of the payment\"}},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"details\":\"All parameters are given in raw token decimal encoding.\",\"params\":{\"vaultSwapParams\":\"Parameters for the swap (see above for struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"transfer(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"owner\":\"Address of the owner\",\"to\":\"Address of the recipient\"},\"returns\":{\"_0\":\"success True if successful, false otherwise\"}},\"transferFrom(address,address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"from\":\"Address of the sender\",\"spender\":\"Address allowed to perform the transfer\",\"to\":\"Address of the recipient\"},\"returns\":{\"success\":\"True if successful, false otherwise\"}},\"unlock(bytes)\":{\"details\":\"Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`, meaning all balances for the caller have to be settled at the end.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"notice\":\"Adds liquidity to a pool.\"},\"erc4626BufferWrapOrUnwrap((uint8,uint8,address,uint256,uint256))\":{\"notice\":\"Wraps/unwraps tokens based on the parameters provided.\"},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"notice\":\"Gets the index of a token in a given pool.\"},\"getVaultExtension()\":{\"notice\":\"Returns the VaultExtension contract address.\"},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"notice\":\"Removes liquidity from a pool.\"},\"sendTo(address,address,uint256)\":{\"notice\":\"Sends tokens to a recipient.\"},\"settle(address,uint256)\":{\"notice\":\"Settles deltas for a token; must be successful for the current lock to be released.\"},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"notice\":\"Swaps tokens based on provided parameters.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers pool token from owner to a recipient.\"},\"transferFrom(address,address,address,uint256)\":{\"notice\":\"Transfers pool token from a sender to a recipient using an allowance.\"},\"unlock(bytes)\":{\"notice\":\"Creates a context for a sequence of operations (i.e., \\\"unlocks\\\" the Vault).\"}},\"notice\":\"Interface for functions defined on the main Vault contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":\"IVaultMain\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol":{"Authentication":{"abi":[{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied to external functions to make them only callable by authorized accounts. Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in multi-contract systems. There are two main uses for it:  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers    unique. The contract's own address is a good option.  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier    shared by the entire family (and no other contract) should be used instead.\"},\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"_0\":\"The computed actionId\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}]},\"kind\":\"user\",\"methods\":{\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"notice\":\"Building block for performing access control on external functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\":\"Authentication\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\":{\"keccak256\":\"0x807237870f3aaa26cd815c5f600c1d0c60861a2f962fcc341d4b80942288ab52\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://90f108409488d0c38147d2ac7b9facd694dbf1001c501136a249091788c22232\",\"dweb:/ipfs/QmRCaCCGcuL4kxBEbrpq6FfENBJk4Zo8CNe8TRusatuYJ6\"]}},\"version\":1}"}},"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol":{"FixedPoint":{"abi":[{"inputs":[],"name":"ZeroDivision","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220e9cc622b7f35aaf8f3efa30ad767c4a02aedd5ccde9b7738c8491078c2823d0164736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE9 0xCC PUSH3 0x2B7F35 0xAA 0xF8 RETURN 0xEF LOG3 EXP 0xD7 PUSH8 0xC4A02AEDD5CCDE9B PUSH24 0x38C8491078C2823D0164736F6C634300081B003300000000 ","sourceMap":"239:5688:14:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea2646970667358221220e9cc622b7f35aaf8f3efa30ad767c4a02aedd5ccde9b7738c8491078c2823d0164736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE9 0xCC PUSH3 0x2B7F35 0xAA 0xF8 RETURN 0xEF LOG3 EXP 0xD7 PUSH8 0xC4A02AEDD5CCDE9B PUSH24 0x38C8491078C2823D0164736F6C634300081B003300000000 ","sourceMap":"239:5688:14:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ZeroDivision\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"ZeroDivision()\":[{\"notice\":\"Attempted division by zero.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Support 18-decimal fixed point arithmetic. All Vault calculations use this for high and uniform precision.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol\":\"FixedPoint\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol\":{\"keccak256\":\"0x84bcae7004be7e91a88e76a3ac317490bc6845754a12cee88fcab76b1c5de37b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://15f903480fec5ae8042baf458e2246693b0b4a22687e65c2ed3afdf6993bff82\",\"dweb:/ipfs/QmcxsVeSbQ4qYnEZFoeFmiqaoV3rAx1oNhACCZCMZ1E6uf\"]},\"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol\":{\"keccak256\":\"0x70449e2b423b9850e39adddd7301205aa8b6e9e4ae788fd44d0968cac018eb2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce2174a3629b45dca032f9cf53df35dea240626913b8882a9e2da21610b02796\",\"dweb:/ipfs/Qmf8E4DePnZXjqb3V4A38gSobjgRK6VqavqPByuXvJxtBG\"]}},\"version\":1}"}},"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol":{"LogExpMath":{"abi":[{"inputs":[],"name":"BaseOutOfBounds","type":"error"},{"inputs":[],"name":"ExponentOutOfBounds","type":"error"},{"inputs":[],"name":"InvalidExponent","type":"error"},{"inputs":[],"name":"OutOfBounds","type":"error"},{"inputs":[],"name":"ProductOutOfBounds","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220f7e8e3ef4405ba858296891409b167de675961dcc03dc03125ef5eed9c9eb29264736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 0xE8 0xE3 0xEF PREVRANDAO SDIV 0xBA DUP6 DUP3 SWAP7 DUP10 EQ MULMOD 0xB1 PUSH8 0xDE675961DCC03DC0 BALANCE 0x25 0xEF MCOPY 0xED SWAP13 SWAP15 0xB2 SWAP3 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"595:21889:15:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea2646970667358221220f7e8e3ef4405ba858296891409b167de675961dcc03dc03125ef5eed9c9eb29264736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 0xE8 0xE3 0xEF PREVRANDAO SDIV 0xBA DUP6 DUP3 SWAP7 DUP10 EQ MULMOD 0xB1 PUSH8 0xDE675961DCC03DC0 BALANCE 0x25 0xEF MCOPY 0xED SWAP13 SWAP15 0xB2 SWAP3 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"595:21889:15:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaseOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExponentOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExponent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProductOutOfBounds\",\"type\":\"error\"}],\"devdoc\":{\"author\":\"Fernando Martinelli - @fernandomartinelliSergio Yuhjtman     - @sergioyuhjtmanDaniel Fernandez    - @dmf7z\",\"details\":\"Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument). Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural exponentiation and logarithm (where the base is Euler's number). All math operations are unchecked in order to save gas.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"BaseOutOfBounds()\":[{\"notice\":\"This error is thrown when a base is not within an acceptable range.\"}],\"ExponentOutOfBounds()\":[{\"notice\":\"This error is thrown when a exponent is not within an acceptable range.\"}],\"InvalidExponent()\":[{\"notice\":\"This error is thrown when an exponent used in the exp function is not within an acceptable range.\"}],\"OutOfBounds()\":[{\"notice\":\"This error is thrown when a variable or result is not within the acceptable bounds defined in the function.\"}],\"ProductOutOfBounds()\":[{\"notice\":\"This error is thrown when the exponent * ln(base) is not within an acceptable range.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol\":\"LogExpMath\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol\":{\"keccak256\":\"0x70449e2b423b9850e39adddd7301205aa8b6e9e4ae788fd44d0968cac018eb2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce2174a3629b45dca032f9cf53df35dea240626913b8882a9e2da21610b02796\",\"dweb:/ipfs/Qmf8E4DePnZXjqb3V4A38gSobjgRK6VqavqPByuXvJxtBG\"]}},\"version\":1}"}},"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol":{"ReentrancyGuardTransient":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"NOTE: This variant only works on networks where EIP-1153 is available.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"notice\":\"Unauthorized reentrant call.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Variant of {ReentrancyGuard} that uses transient storage.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol\":\"ReentrancyGuardTransient\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol\":{\"keccak256\":\"0x0986ee17e49747c89956b4d46947b65b7c2942d5854fd39d764a7cb2735ff8af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://38fedef8f551d12a155f54ab1c863db60fed1226a397a321ac729e9db65f4593\",\"dweb:/ipfs/QmaxBFc45J79aehsbSoLzNWVfBhqxkkWnKpunmKrbzV1pL\"]},\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol\":{\"keccak256\":\"0xba524eab3f4f1b735008624cf11264842bec509e05ac025f93b8c843547fbfd3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c539df1afd342c47fdbd96fb28a183b7b30e055c4e435cdf77140ec92e68a42\",\"dweb:/ipfs/QmZ4akawS7TKrJkBeoi4bfyGWRmQgXshtkAMupuxkgH5Ur\"]}},\"version\":1}"}},"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol":{"StorageSlotExtension":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212207d1ece238b2a90fbead6c43dfa8046238cc35e0b4dec12d000c4f2cebfef20e164736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0x1ECE238B2A90FBEAD6C43DFA8046238CC35E0B4DEC12D000C4F2CEBFEF20 0xE1 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"278:4371:17:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea26469706673582212207d1ece238b2a90fbead6c43dfa8046238cc35e0b4dec12d000c4f2cebfef20e164736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0x1ECE238B2A90FBEAD6C43DFA8046238CC35E0B4DEC12D000C4F2CEBFEF20 0xE1 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"278:4371:17:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"TIP: Consider using this library along with {SlotDerivation}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for reading and writing primitive types to specific storage slots. Based on OpenZeppelin; just adding support for int256.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol\":\"StorageSlotExtension\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol\":{\"keccak256\":\"0xba524eab3f4f1b735008624cf11264842bec509e05ac025f93b8c843547fbfd3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c539df1afd342c47fdbd96fb28a183b7b30e055c4e435cdf77140ec92e68a42\",\"dweb:/ipfs/QmZ4akawS7TKrJkBeoi4bfyGWRmQgXshtkAMupuxkgH5Ur\"]}},\"version\":1}"}},"@balancer-labs/v3-vault/contracts/CommonAuthentication.sol":{"CommonAuthentication":{"abi":[{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Base contract for performing access control on external functions within pools.\",\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"_0\":\"The computed actionId\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}]},\"kind\":\"user\",\"methods\":{\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-vault/contracts/CommonAuthentication.sol\":\"CommonAuthentication\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\":{\"keccak256\":\"0x807237870f3aaa26cd815c5f600c1d0c60861a2f962fcc341d4b80942288ab52\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://90f108409488d0c38147d2ac7b9facd694dbf1001c501136a249091788c22232\",\"dweb:/ipfs/QmRCaCCGcuL4kxBEbrpq6FfENBJk4Zo8CNe8TRusatuYJ6\"]},\"@balancer-labs/v3-vault/contracts/CommonAuthentication.sol\":{\"keccak256\":\"0x2b001b0e402cb94f135c49e40cec96138e3842db5b2b1f46b1bb8d34abe1eecb\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://5d4336b62b3919e0fbd5e0f3ff2f29e1056c07b4c62c742797003733404416e2\",\"dweb:/ipfs/QmbQqFz4DPBcEEaHAV5HbB5aAQkSw4JZtck1fJCJrmbpw2\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-vault/contracts/ProtocolFeeController.sol":{"ProtocolFeeController":{"abi":[{"inputs":[{"internalType":"contract IVault","name":"vault_","type":"address"},{"internalType":"uint256","name":"initialGlobalSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"initialGlobalYieldFeePercentage","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"pool","type":"address"}],"name":"CallerIsNotPoolCreator","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"FeePrecisionTooHigh","type":"error"},{"inputs":[],"name":"InvalidMigrationSource","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolAlreadyRegistered","type":"error"},{"inputs":[],"name":"PoolCreatorFeePercentageTooHigh","type":"error"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"PoolCreatorNotRegistered","type":"error"},{"inputs":[],"name":"ProtocolSwapFeePercentageTooHigh","type":"error"},{"inputs":[],"name":"ProtocolYieldFeePercentageTooHigh","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderIsNotVault","type":"error"},{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[],"name":"ZeroDivision","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"GlobalProtocolSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"yieldFeePercentage","type":"uint256"}],"name":"GlobalProtocolYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"indexed":false,"internalType":"bool","name":"isProtocolFeeExempt","type":"bool"}],"name":"InitialPoolAggregateSwapFeePercentage","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"},{"indexed":false,"internalType":"bool","name":"isProtocolFeeExempt","type":"bool"}],"name":"InitialPoolAggregateYieldFeePercentage","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PoolCreatorFeesWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolCreatorSwapFeePercentage","type":"uint256"}],"name":"PoolCreatorSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolCreatorYieldFeePercentage","type":"uint256"}],"name":"PoolCreatorYieldFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"address","name":"poolCreator","type":"address"},{"indexed":false,"internalType":"bool","name":"protocolFeeExempt","type":"bool"}],"name":"PoolRegisteredWithFeeController","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ProtocolFeesWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ProtocolSwapFeeCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"name":"ProtocolSwapFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ProtocolYieldFeeCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"uint256","name":"yieldFeePercentage","type":"uint256"}],"name":"ProtocolYieldFeePercentageChanged","type":"event"},{"inputs":[],"name":"MAX_CREATOR_FEE_PERCENTAGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_PROTOCOL_SWAP_FEE_PERCENTAGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_PROTOCOL_YIELD_FEE_PERCENTAGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"collectAggregateFeesHook","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"protocolFeePercentage","type":"uint256"},{"internalType":"uint256","name":"poolCreatorFeePercentage","type":"uint256"}],"name":"computeAggregateFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGlobalProtocolSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGlobalProtocolYieldFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolCreatorFeeAmounts","outputs":[{"internalType":"uint256[]","name":"feeAmounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolCreatorSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolCreatorYieldFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolProtocolSwapFeeInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getPoolProtocolYieldFeeInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"getProtocolFeeAmounts","outputs":[{"internalType":"uint256[]","name":"feeAmounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"migratePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"},{"internalType":"bool","name":"protocolFeeExempt","type":"bool"}],"name":"registerPool","outputs":[{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newProtocolSwapFeePercentage","type":"uint256"}],"name":"setGlobalProtocolSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newProtocolYieldFeePercentage","type":"uint256"}],"name":"setGlobalProtocolYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"poolCreatorSwapFeePercentage","type":"uint256"}],"name":"setPoolCreatorSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"poolCreatorYieldFeePercentage","type":"uint256"}],"name":"setPoolCreatorYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newProtocolSwapFeePercentage","type":"uint256"}],"name":"setProtocolSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"newProtocolYieldFeePercentage","type":"uint256"}],"name":"setProtocolYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"updateProtocolSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"updateProtocolYieldFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"withdrawPoolCreatorFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawPoolCreatorFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"withdrawProtocolFeesForToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"fun_ensureValidPrecision":{"entryPoint":466,"id":6297,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"60e0346101ba57601f612f7138819003918201601f19168301916001600160401b038311848410176101be578084926060946040528339810103126101ba578051906001600160a01b03821682036101ba576040602082015191015191306080528060a05260c0526706f05b59d3b20000908181116101ab576020816100a57fbf5ac0fc89bbf8819be79f280146b65ea2af2a9705cd9cfe0c9d93f6e87f307d936101d2565b805f55604051908152a1811161019c576020816100e27f48c5c3ccec54c4e0ea08d83d838fa9bb725eb0b52c591cb00bd6e63bca8c44f6936101d2565b80600155604051908152a1604051612d5b9081610216823960805181612172015260a051818181610ed6015281816110fc015261283b015260c0518181816102530152818161036e015281816103f8015281816105170152818161058501528181610864015281816108d201528181610c7d01528181610db3015281816115d60152818161177b0152818161191c01528181611a7601528181611be401528181612350015281816126060152818161278201526129860152f35b6353c24f4760e11b5f5260045ffd5b637e6eb7fb60e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b64174876e80080820481810291818304149015171561020157036101f257565b63419fd9e760e11b5f5260045ffd5b634e487b7160e01b5f52601160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c9081630252aab514611fa6575080630874327f14611b935780630b8e059b14611b5b5780630ddd60c614611b3a5780631377c16c14611a1b5780632772d156146118385780632e1d388d146119f95780633af52712146118c157806352f125f01461189657806355fb76af146118795780635c15a0b41461183d5780635e32e4e81461183857806371447ea81461169357806371ecc8fb146114ef57806377ff76e71461125b5780637869ee181461123f5780637a2b97dc146111d4578063851c1bb3146111845780638a3c5c69146111205780638d928af8146110dd5780638df44c54146110555780638f4ab9ca146110345780639e95f3fd14610fa8578063a93df2a414610f43578063aaabadc514610e90578063abaa335614610ce7578063b53a70b214610c00578063c673bdaf14610bc3578063cf7b287f14610b5d578063f706144514610b28578063fa399f2a14610392578063fbfa77cf1461034f5763fd267f3914610187575f80fd5b34610323576040600319360112610323576101a0611fda565b602435906101ac6127d6565b6706f05b59d3b200008211610327576101c482612a5b565b6101cd8161228e565b6101d68261246f565b916040516101e381612063565b67ffffffffffffffff80941681526020810190600182526001600160a01b039182851695865f52600260205260405f209251167fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000068ff000000000000000084549351151560401b169216171790557f0000000000000000000000000000000000000000000000000000000000000000169161027d81612b67565b833b15610323576040517f5e0b06f40000000000000000000000000000000000000000000000000000000081526001600160a01b039290921660048301526024820152915f908390604490829084905af1908115610318577f97cff4b6e6d80e307faab8b730d9f69264e860f2e0e10cfb8cdaf8a2f44e839e92602092610309575b50604051908152a2005b610312906120ac565b5f6102ff565b6040513d5f823e3d90fd5b5f80fd5b7f7e6eb7fb000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610323575f6003193601126103235760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610323576020600319360112610323576103ab611fda565b6103b3612778565b6040517f8f4ab9ca0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201525f81602481836001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1908115610318575f905f92610acb575b506001600160a01b0383165f52600260205267ffffffffffffffff60405f20541690600560205260405f2054905f928215159384610ac1575b84610ab1575b61047287612947565b94905f5b8681106108225789896001600160a01b0382165f52600360205267ffffffffffffffff60405f205416905f92600660205260405f2054925f8415159485610818575b85610806575b6104c784612947565b96905f5b8881106104d457005b6104de8189612213565b516104ec575b6001016104cb565b986001600160a01b036104ff8b84612213565b51169061050c8b8a612213565b516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163b1561080257604051907fae63932900000000000000000000000000000000000000000000000000000000825283600483015230602483015260448201528181606481836001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af180156107f7579082916107e0575b506107b357505f99816105c8828b612213565b516040519081527fe505e41b0d437b47350a9990142ccf38acb11ffa0e5af8f973b9e172f3d5d5e260206001600160a01b038c1692a383156107385761060e818a612213565b5186156107105761061e906124c1565b6001670de0b6b3a764000061065f8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94848c8783010401901515026124de565b928301040190151502916001600160a01b0389165f52600760205260405f20815f5260205260405f206106938482546124b4565b905561069f828b612213565b519081848103116106e3576001936106d9916001600160a01b038c165f52600860205260405f20905f5260205260405f20920382546124b4565b90555b90506104e4565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b7f0a0c22c7000000000000000000000000000000000000000000000000000000005f5260045ffd5b6001918561077d5761074a828b612213565b51906001600160a01b038a165f52600760205260405f20905f5260205261077660405f209182546124b4565b90556106dc565b610787828b612213565b51906001600160a01b038a165f52600860205260405f20905f5260205261077660405f209182546124b4565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526021600452fd5b6107e9906120ac565b6107f457808c6105b5565b80fd5b6040513d84823e3d90fd5b5080fd5b905061081281836124f1565b906104be565b82151595506104b8565b61082c8187612213565b5161083a575b600101610476565b6001600160a01b0361084c8284612213565b5116906108598188612213565b516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163b1561032357604051907fae63932900000000000000000000000000000000000000000000000000000000825283600483015230602483015260448201525f81606481836001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1801561031857610aa2575b50818b7fae7ebad9fc3d1d17965f063fa520d393595e2ef6c8e22ae8413b60900444e19f60206001600160a01b03610937868d612213565b51936040519485521692a38815610a27576109528188612213565b51851561071057610962906124c1565b6001670de0b6b3a76400006109a3897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94848b8783010401901515026124de565b928301040190151502916001600160a01b038c165f52600760205260405f20815f5260205260405f206109d78482546124b4565b90556109e38289612213565b519081848103116106e357600193610a1d916001600160a01b038f165f52600860205260405f20905f5260205260405f20920382546124b4565b90555b9050610832565b60019184610a6c57610a398289612213565b51906001600160a01b038d165f52600760205260405f20905f52602052610a6560405f209182546124b4565b9055610a20565b610a768289612213565b51906001600160a01b038d165f52600860205260405f20905f52602052610a6560405f209182546124b4565b610aab906120ac565b8b6108ff565b50610abc83826124f1565b610469565b8115159450610463565b9150503d805f833e610add81836120dc565b8101906040818303126103235780519167ffffffffffffffff928381116103235781610b0a91840161240e565b92602083015190811161032357610b21920161240e565b908361042a565b3461032357604060031936011261032357610b5b610b44611fda565b610b4c611ff0565b90610b5681612532565b6126c1565b005b3461032357604060031936011261032357610b76611fda565b610b7e611ff0565b90610b876127d6565b610b9081612947565b915f5b838110610b9c57005b80610bbd6001600160a01b03610bb460019487612213565b51168785612aa3565b01610b93565b34610323576020600319360112610323576001600160a01b03610be4611fda565b165f526004602052602060ff60405f2054166040519015158152f35b3461032357606060031936011261032357610c19611fda565b610c21611ff0565b604435906001600160a01b039283831680840361032357604090610c436127d6565b60448251809781937fc9c1661b000000000000000000000000000000000000000000000000000000008352818716600484015260248301527f0000000000000000000000000000000000000000000000000000000000000000165afa801561031857610cb4575b610b5b9350612aa3565b6040843d604011610cdf575b81610ccd604093836120dc565b8101031261032357610b5b9350610caa565b3d9150610cc0565b3461032357604060031936011261032357610d00611fda565b60243590610d0c6127d6565b6706f05b59d3b200008211610e6857610d2482612a5b565b610d2d8161228e565b610d368261246f565b91604051610d4381612063565b67ffffffffffffffff80941681526020810190600182526001600160a01b039182851695865f52600360205260405f209251167fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000068ff000000000000000084549351151560401b169216171790557f00000000000000000000000000000000000000000000000000000000000000001691610ddd81612b35565b833b15610323576040517fe253670a0000000000000000000000000000000000000000000000000000000081526001600160a01b039290921660048301526024820152915f908390604490829084905af1908115610318577faf47449d1c3597ccc9f5ec3acad03cef57aa90a719000441b320687087948efd926020926103095750604051908152a2005b7fa7849e8e000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610323575f600319360112610323576040517faaabadc50000000000000000000000000000000000000000000000000000000081526001600160a01b036020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa908115610318576020925f92610f14575b5060405191168152f35b610f35919250833d8511610f3c575b610f2d81836120dc565b8101906123ef565b9083610f0a565b503d610f23565b3461032357602060031936011261032357600435610f5f6127d6565b6706f05b59d3b200008111610e6857602081610f9b7f48c5c3ccec54c4e0ea08d83d838fa9bb725eb0b52c591cb00bd6e63bca8c44f693612a5b565b80600155604051908152a1005b346103235760208060031936011261032357610fc2611fda565b90610fcc82612947565b90610fd6826121c4565b925f946001600160a01b03809116955b848110610fff5760405180610ffb8882612028565b0390f35b600190875f526008845260405f20836110188388612213565b51165f52845260405f205461102d8289612213565b5201610fe6565b3461032357602060031936011261032357610b5b611050611fda565b61228e565b34610323576020806003193601126103235761106f611fda565b9061107982612947565b90611083826121c4565b925f946001600160a01b03809116955b8481106110a85760405180610ffb8882612028565b600190875f526007845260405f20836110c18388612213565b51165f52845260405f20546110d68289612213565b5201611093565b34610323575f6003193601126103235760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b346103235760206003193601126103235760043561113c6127d6565b6706f05b59d3b200008111610327576020816111787fbf5ac0fc89bbf8819be79f280146b65ea2af2a9705cd9cfe0c9d93f6e87f307d93612a5b565b805f55604051908152a1005b34610323576020600319360112610323576004357fffffffff0000000000000000000000000000000000000000000000000000000081168103610323576111cc602091612147565b604051908152f35b34610323576020600319360112610323576001600160a01b036111f5611fda565b165f526003602052602060405f206040519061121082612063565b5467ffffffffffffffff811680835260ff604092831c1615159390920183905280519182526020820192909252f35b34610323575f6003193601126103235760205f54604051908152f35b3461032357606060031936011261032357611274611fda565b61127c611ff0565b90604435918215159081840361032357611294612778565b6001600160a01b0380931691825f52826020926004845260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055865f146114e457835f9687925b8915611469578483878c5f9b7fa34ad86562f9716c2f1e723934cc63f44a9b4695cb8535c30dd8308d03a7856460409f7fd9725c347996d9a5d6001b5f7c2a2515d365258012fceff4f49e84310ed079129a8f96611454967fce1d009285405b74cf77294916c17664de2c84eef81225c71f265f823b358bcb985b6113698461246f565b6040519061137682612063565b67ffffffffffffffff809116825260036113e6868401948686528b5f5260028852604084905f209551169480549651151560401b967fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000968768ff0000000000000000809a1692161717905561246f565b956040839051976113f689612063565b1687528087019586528a5f525260405f209451169184549351151560401b16921617179055604061143a905192839283909291602090604083019483521515910152565b0390a28d518c815290151560208201529081906040820190565b0390a289519586521693a38351928352820152f35b8483878c6001549b7fa34ad86562f9716c2f1e723934cc63f44a9b4695cb8535c30dd8308d03a7856460409f7fd9725c347996d9a5d6001b5f7c2a2515d365258012fceff4f49e84310ed079129a8f96611454967fce1d009285405b74cf77294916c17664de2c84eef81225c71f265f823b358bcb98611360565b835f549687926112e5565b346103235760208060031936011261032357611509611fda565b6115128161228e565b6001600160a01b039182821692835f526002825260405f20906040519161153883612063565b549167ffffffffffffffff9060ff8285169485835260401c1615908582159101525f549381611688575b5061156957005b6115728361246f565b90806040519261158184612063565b168252848201905f8252875f526002865260405f209251167fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000068ff000000000000000084549351151560401b169216171790557f0000000000000000000000000000000000000000000000000000000000000000169261160081612b67565b843b15610323576040517f5e0b06f40000000000000000000000000000000000000000000000000000000081526001600160a01b039290921660048301526024820152925f908490604490829084905af1928315610318577f97cff4b6e6d80e307faab8b730d9f69264e860f2e0e10cfb8cdaf8a2f44e839e936103095750604051908152a2005b905083141587611562565b3461032357602080600319360112610323576116ad611fda565b6116b68161228e565b6001600160a01b039182821692835f526003825260405f2090604051916116dc83612063565b549167ffffffffffffffff9060ff8285169485835260401c161590858215910152600154938161182d575b5061170e57005b6117178361246f565b90806040519261172684612063565b168252848201905f8252875f526003865260405f209251167fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000068ff000000000000000084549351151560401b169216171790557f000000000000000000000000000000000000000000000000000000000000000016926117a581612b35565b843b15610323576040517fe253670a0000000000000000000000000000000000000000000000000000000081526001600160a01b039290921660048301526024820152925f908490604490829084905af1928315610318577faf47449d1c3597ccc9f5ec3acad03cef57aa90a719000441b320687087948efd936103095750604051908152a2005b905083141587611707565b612006565b34610323576020600319360112610323576001600160a01b0361185e611fda565b165f526002602052602060405f206040519061121082612063565b34610323575f600319360112610323576020600154604051908152f35b3461032357602060031936011261032357610b5b6118b2611fda565b6118bb816125c7565b906126c1565b34610323576040600319360112610323576118da611fda565b602435906118e781612532565b670de0ad9b58f1600082116119d1576118ff8161228e565b6001600160a01b039182821692835f5260066020528160405f20557f0000000000000000000000000000000000000000000000000000000000000000169161194681612b35565b833b15610323576040517fe253670a0000000000000000000000000000000000000000000000000000000081526001600160a01b039290921660048301526024820152915f908390604490829084905af1908115610318577f47f70ddbc624c299cef7841aaea0a86b677c800203e953104e958c9ec9bdab34926020926103095750604051908152a2005b7f0370da74000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610323575f600319360112610323576020604051670de0ad9b58f160008152f35b3461032357604060031936011261032357611a34611fda565b60243590611a4181612532565b670de0ad9b58f1600082116119d157611a598161228e565b6001600160a01b039182821692835f5260056020528160405f20557f00000000000000000000000000000000000000000000000000000000000000001691611aa081612b67565b833b15610323576040517f5e0b06f40000000000000000000000000000000000000000000000000000000081526001600160a01b039290921660048301526024820152915f908390604490829084905af1908115610318577fb7cf36369623c01ed7b2eafc4025224e924a2836d5fb49428a0f65417586bf5c92602092611b2b5750604051908152a2005b611b34906120ac565b846102ff565b346103235760406003193601126103235760206111cc6024356004356124f1565b34610323576020600319360112610323576001600160a01b03611b7c611fda565b165f526005602052602060405f2054604051908152f35b346103235760208060031936011261032357611bad611fda565b906001600160a01b036040517f85f2dbd40000000000000000000000000000000000000000000000000000000081528281600481857f0000000000000000000000000000000000000000000000000000000000000000165afa80156103185782915f91611f6c575b501692308414611f44571690815f526004815260ff60405f205416611f1857815f526004815260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790556040517f5c15a0b4000000000000000000000000000000000000000000000000000000008152826004820152604081602481875afa908115610318575f905f92611ef4575b50611cb79061246f565b9060405190611cc582612063565b67ffffffffffffffff80931682528382019015158152845f52600284528260405f209251169180549151151560401b917fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000938468ff0000000000000000809516921617179055604051917f7a2b97dc0000000000000000000000000000000000000000000000000000000083528560048401526040836024818a5afa928315610318575f905f94611ec0575b50611d7b9061246f565b938060405195611d8a87612063565b1685528585019315158452865f526003865260405f209451169184549351151560401b169216171790556040517f0b8e059b0000000000000000000000000000000000000000000000000000000081528260048201528181602481875afa5f9181611e8e575b50938291602495611e7c575b50604051948580927f0252aab50000000000000000000000000000000000000000000000000000000082528660048301525afa5f9381611e4d575b50611e3e57005b6006915f525260405f20555f80f35b9093508181813d8311611e75575b611e6581836120dc565b8101031261032357519284611e37565b503d611e5b565b845f526005835260405f205585611dfc565b9150938282813d8311611eb9575b611ea681836120dc565b8101031261032357905190936024611df0565b503d611e9c565b611d7b9450611ee7915060403d604011611eed575b611edf81836120dc565b81019061212a565b93611d71565b503d611ed5565b611cb79250611f12915060403d604011611eed57611edf81836120dc565b91611cad565b507fdb771c80000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b7fb82fd5bf000000000000000000000000000000000000000000000000000000005f5260045ffd5b809250848092503d8311611f9f575b611f8581836120dc565b810103126103235751818116810361032357819085611c15565b503d611f7b565b34610323576020600319360112610323576020906001600160a01b03611fca611fda565b165f526006825260405f20548152f35b600435906001600160a01b038216820361032357565b602435906001600160a01b038216820361032357565b34610323575f6003193601126103235760206040516706f05b59d3b200008152f35b60209060206040818301928281528551809452019301915f5b82811061204f575050505090565b835185529381019392810192600101612041565b6040810190811067ffffffffffffffff82111761207f57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b67ffffffffffffffff811161207f57604052565b6060810190811067ffffffffffffffff82111761207f57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761207f57604052565b5190811515820361032357565b91908260409103126103235761214460208351930161211d565b90565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060208201927f00000000000000000000000000000000000000000000000000000000000000008452166040820152602481526121a6816120c0565b51902090565b67ffffffffffffffff811161207f5760051b60200190565b906121ce826121ac565b6121db60405191826120dc565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061220982946121ac565b0190602036910137565b80518210156122275760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b67ffffffffffffffff811161207f57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0905f601f6001600160a01b036040519383604460209684888201947ffa399f2a00000000000000000000000000000000000000000000000000000000865216602482015260248152612300816120c0565b604051988996879586937f48c894910000000000000000000000000000000000000000000000000000000085528b60048601525180918160248701528686015e85858286010152011681010301927f0000000000000000000000000000000000000000000000000000000000000000165af1801561031857612380575050565b3d805f843e61238f81846120dc565b82019181818403126103235780519067ffffffffffffffff821161032357019180601f84011215610323578251906123c682612254565b906123d460405192836120dc565b8282528383860101116103235781835f95018483015e010152565b9081602091031261032357516001600160a01b03811681036103235790565b9080601f8301121561032357815190602091612429816121ac565b9361243760405195866120dc565b81855260208086019260051b82010192831161032357602001905b828210612460575050505090565b81518152908301908301612452565b67ffffffffffffffff90818111612484571690565b7f6dfcc650000000000000000000000000000000000000000000000000000000005f52604060045260245260445ffd5b919082018092116106e357565b90670de0b6b3a7640000918281029281840414901517156106e357565b818102929181159184041417156106e357565b9061251e64174876e800928392612517670de0b6b3a764000091838303838510026124de565b04906124b4565b048181029181830414901517156106e35790565b6001600160a01b039081612545826125c7565b168015612586573303612556575050565b7ffbecdbf4000000000000000000000000000000000000000000000000000000005f52336004521660245260445ffd5b507f8bcbf353000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b51906001600160a01b038216820361032357565b604080517fe9ddeb260000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201526060816024817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156126b7575f9161263e575b5001511690565b90506060813d6060116126af575b81612659606093836120dc565b81010312610323578151906060820182811067ffffffffffffffff82111761207f576126a5918491825261268c816125b3565b845261269a602082016125b3565b6020850152016125b3565b828201525f612637565b3d915061264c565b82513d5f823e3d90fd5b906126cb82612947565b92905f5b8481106126dd575050505050565b6001906001600160a01b03806126f38386612213565b5116818616805f5260086020818152604094855f20855f528252855f20549586612725575b50505050505050016126cf565b7f938f3a3a03ee425ccc0f8010b0468938cbafd3750fa43bbdf09c6f75e97e51f993855f528352805f20865f5283525f81812055612764878d88612b99565b519586528a1694a45f808080808080612718565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036127aa57565b7f089676d5000000000000000000000000000000000000000000000000000000005f523360045260245ffd5b6128027fffffffff000000000000000000000000000000000000000000000000000000005f3516612147565b6001600160a01b036040517faaabadc50000000000000000000000000000000000000000000000000000000081526020928382600481867f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103185784925f92612925575b5060649060405194859384927f9be2a8840000000000000000000000000000000000000000000000000000000084526004840152336024840152306044840152165afa918215610318575f926128ef575b5050156128c757565b7f23dada53000000000000000000000000000000000000000000000000000000005f5260045ffd5b90809250813d831161291e575b61290681836120dc565b81010312610323576129179061211d565b5f806128be565b503d6128fc565b606491925061294090843d8611610f3c57610f2d81836120dc565b919061286d565b906001600160a01b0380604051937fca4f28030000000000000000000000000000000000000000000000000000000085521660048401525f83602481847f0000000000000000000000000000000000000000000000000000000000000000165afa928315610318575f936129bd575b5050815190565b909192503d805f833e6129d081836120dc565b810160209182818303126103235780519067ffffffffffffffff821161032357019281601f85011215610323578351612a08816121ac565b94612a1660405196876120dc565b818652848087019260051b820101938411610323578401905b838210612a43575050505050905f806129b6565b81518381168103610323578152908401908401612a2f565b64174876e8008082048181029181830414901517156106e35703612a7b57565b7f833fb3ce000000000000000000000000000000000000000000000000000000005f5260045ffd5b91906001600160a01b0380931690815f52600760205260405f209284811693845f5260205260405f20549485612adc575b505050505050565b82612b21877f1c2887fcb98f75e66bb9a36311f2d3d22fb204e6362106f30e9df7eaf63131b595602095885f526007875260405f208a5f5287525f6040812055612b99565b6040519687521694a45f8080808080612ad4565b6001600160a01b03165f52600360205261214467ffffffffffffffff60405f205416600660205260405f2054906124f1565b6001600160a01b03165f52600260205261214467ffffffffffffffff60405f205416600560205260405f2054906124f1565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082019081526001600160a01b03938416602483015260448083019590955293815292612c2d925f9283929190612bf66064886120dc565b1694519082865af13d15612c91573d90612c0f82612254565b91612c1d60405193846120dc565b82523d5f602084013e5b83612c99565b8051908115159182612c6e575b5050612c435750565b7f5274afe7000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b8192509060209181010312610323576020612c89910161211d565b155f80612c3a565b606090612c27565b90612cd65750805115612cae57805190602001fd5b7f1425ea42000000000000000000000000000000000000000000000000000000005f5260045ffd5b81511580612d1c575b612ce7575090565b6001600160a01b03907f9996b315000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b50803b15612cdf56fea2646970667358221220ac702bf6c267f2611555b40f68b78bf41368145a08eee05a8c562e82cb69e05564736f6c634300081b0033","opcodes":"PUSH1 0xE0 CALLVALUE PUSH2 0x1BA JUMPI PUSH1 0x1F PUSH2 0x2F71 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x1BE JUMPI DUP1 DUP5 SWAP3 PUSH1 0x60 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x1BA JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1BA JUMPI PUSH1 0x40 PUSH1 0x20 DUP3 ADD MLOAD SWAP2 ADD MLOAD SWAP2 ADDRESS PUSH1 0x80 MSTORE DUP1 PUSH1 0xA0 MSTORE PUSH1 0xC0 MSTORE PUSH8 0x6F05B59D3B20000 SWAP1 DUP2 DUP2 GT PUSH2 0x1AB JUMPI PUSH1 0x20 DUP2 PUSH2 0xA5 PUSH32 0xBF5AC0FC89BBF8819BE79F280146B65EA2AF2A9705CD9CFE0C9D93F6E87F307D SWAP4 PUSH2 0x1D2 JUMP JUMPDEST DUP1 PUSH0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 DUP2 GT PUSH2 0x19C JUMPI PUSH1 0x20 DUP2 PUSH2 0xE2 PUSH32 0x48C5C3CCEC54C4E0EA08D83D838FA9BB725EB0B52C591CB00BD6E63BCA8C44F6 SWAP4 PUSH2 0x1D2 JUMP JUMPDEST DUP1 PUSH1 0x1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 PUSH1 0x40 MLOAD PUSH2 0x2D5B SWAP1 DUP2 PUSH2 0x216 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x2172 ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH2 0xED6 ADD MSTORE DUP2 DUP2 PUSH2 0x10FC ADD MSTORE PUSH2 0x283B ADD MSTORE PUSH1 0xC0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x253 ADD MSTORE DUP2 DUP2 PUSH2 0x36E ADD MSTORE DUP2 DUP2 PUSH2 0x3F8 ADD MSTORE DUP2 DUP2 PUSH2 0x517 ADD MSTORE DUP2 DUP2 PUSH2 0x585 ADD MSTORE DUP2 DUP2 PUSH2 0x864 ADD MSTORE DUP2 DUP2 PUSH2 0x8D2 ADD MSTORE DUP2 DUP2 PUSH2 0xC7D ADD MSTORE DUP2 DUP2 PUSH2 0xDB3 ADD MSTORE DUP2 DUP2 PUSH2 0x15D6 ADD MSTORE DUP2 DUP2 PUSH2 0x177B ADD MSTORE DUP2 DUP2 PUSH2 0x191C ADD MSTORE DUP2 DUP2 PUSH2 0x1A76 ADD MSTORE DUP2 DUP2 PUSH2 0x1BE4 ADD MSTORE DUP2 DUP2 PUSH2 0x2350 ADD MSTORE DUP2 DUP2 PUSH2 0x2606 ADD MSTORE DUP2 DUP2 PUSH2 0x2782 ADD MSTORE PUSH2 0x2986 ADD MSTORE RETURN JUMPDEST PUSH4 0x53C24F47 PUSH1 0xE1 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x7E6EB7FB PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH5 0x174876E800 DUP1 DUP3 DIV DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x201 JUMPI SUB PUSH2 0x1F2 JUMPI JUMP JUMPDEST PUSH4 0x419FD9E7 PUSH1 0xE1 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x252AAB5 EQ PUSH2 0x1FA6 JUMPI POP DUP1 PUSH4 0x874327F EQ PUSH2 0x1B93 JUMPI DUP1 PUSH4 0xB8E059B EQ PUSH2 0x1B5B JUMPI DUP1 PUSH4 0xDDD60C6 EQ PUSH2 0x1B3A JUMPI DUP1 PUSH4 0x1377C16C EQ PUSH2 0x1A1B JUMPI DUP1 PUSH4 0x2772D156 EQ PUSH2 0x1838 JUMPI DUP1 PUSH4 0x2E1D388D EQ PUSH2 0x19F9 JUMPI DUP1 PUSH4 0x3AF52712 EQ PUSH2 0x18C1 JUMPI DUP1 PUSH4 0x52F125F0 EQ PUSH2 0x1896 JUMPI DUP1 PUSH4 0x55FB76AF EQ PUSH2 0x1879 JUMPI DUP1 PUSH4 0x5C15A0B4 EQ PUSH2 0x183D JUMPI DUP1 PUSH4 0x5E32E4E8 EQ PUSH2 0x1838 JUMPI DUP1 PUSH4 0x71447EA8 EQ PUSH2 0x1693 JUMPI DUP1 PUSH4 0x71ECC8FB EQ PUSH2 0x14EF JUMPI DUP1 PUSH4 0x77FF76E7 EQ PUSH2 0x125B JUMPI DUP1 PUSH4 0x7869EE18 EQ PUSH2 0x123F JUMPI DUP1 PUSH4 0x7A2B97DC EQ PUSH2 0x11D4 JUMPI DUP1 PUSH4 0x851C1BB3 EQ PUSH2 0x1184 JUMPI DUP1 PUSH4 0x8A3C5C69 EQ PUSH2 0x1120 JUMPI DUP1 PUSH4 0x8D928AF8 EQ PUSH2 0x10DD JUMPI DUP1 PUSH4 0x8DF44C54 EQ PUSH2 0x1055 JUMPI DUP1 PUSH4 0x8F4AB9CA EQ PUSH2 0x1034 JUMPI DUP1 PUSH4 0x9E95F3FD EQ PUSH2 0xFA8 JUMPI DUP1 PUSH4 0xA93DF2A4 EQ PUSH2 0xF43 JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0xE90 JUMPI DUP1 PUSH4 0xABAA3356 EQ PUSH2 0xCE7 JUMPI DUP1 PUSH4 0xB53A70B2 EQ PUSH2 0xC00 JUMPI DUP1 PUSH4 0xC673BDAF EQ PUSH2 0xBC3 JUMPI DUP1 PUSH4 0xCF7B287F EQ PUSH2 0xB5D JUMPI DUP1 PUSH4 0xF7061445 EQ PUSH2 0xB28 JUMPI DUP1 PUSH4 0xFA399F2A EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0xFBFA77CF EQ PUSH2 0x34F JUMPI PUSH4 0xFD267F39 EQ PUSH2 0x187 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x1A0 PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x1AC PUSH2 0x27D6 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP3 GT PUSH2 0x327 JUMPI PUSH2 0x1C4 DUP3 PUSH2 0x2A5B JUMP JUMPDEST PUSH2 0x1CD DUP2 PUSH2 0x228E JUMP JUMPDEST PUSH2 0x1D6 DUP3 PUSH2 0x246F JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD PUSH2 0x1E3 DUP2 PUSH2 0x2063 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 SWAP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP6 AND SWAP6 DUP7 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 MLOAD AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 PUSH9 0xFF0000000000000000 DUP5 SLOAD SWAP4 MLOAD ISZERO ISZERO PUSH1 0x40 SHL AND SWAP3 AND OR OR SWAP1 SSTORE PUSH32 0x0 AND SWAP2 PUSH2 0x27D DUP2 PUSH2 0x2B67 JUMP JUMPDEST DUP4 EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5E0B06F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP2 PUSH0 SWAP1 DUP4 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH32 0x97CFF4B6E6D80E307FAAB8B730D9F69264E860F2E0E10CFB8CDAF8A2F44E839E SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x309 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST PUSH2 0x312 SWAP1 PUSH2 0x20AC JUMP JUMPDEST PUSH0 PUSH2 0x2FF JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH32 0x7E6EB7FB00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x3AB PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0x3B3 PUSH2 0x2778 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8F4AB9CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0x24 DUP2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH0 SWAP1 PUSH0 SWAP3 PUSH2 0xACB JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND SWAP1 PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP1 PUSH0 SWAP3 DUP3 ISZERO ISZERO SWAP4 DUP5 PUSH2 0xAC1 JUMPI JUMPDEST DUP5 PUSH2 0xAB1 JUMPI JUMPDEST PUSH2 0x472 DUP8 PUSH2 0x2947 JUMP JUMPDEST SWAP5 SWAP1 PUSH0 JUMPDEST DUP7 DUP2 LT PUSH2 0x822 JUMPI DUP10 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND SWAP1 PUSH0 SWAP3 PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP3 PUSH0 DUP5 ISZERO ISZERO SWAP5 DUP6 PUSH2 0x818 JUMPI JUMPDEST DUP6 PUSH2 0x806 JUMPI JUMPDEST PUSH2 0x4C7 DUP5 PUSH2 0x2947 JUMP JUMPDEST SWAP7 SWAP1 PUSH0 JUMPDEST DUP9 DUP2 LT PUSH2 0x4D4 JUMPI STOP JUMPDEST PUSH2 0x4DE DUP2 DUP10 PUSH2 0x2213 JUMP JUMPDEST MLOAD PUSH2 0x4EC JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x4CB JUMP JUMPDEST SWAP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x4FF DUP12 DUP5 PUSH2 0x2213 JUMP JUMPDEST MLOAD AND SWAP1 PUSH2 0x50C DUP12 DUP11 PUSH2 0x2213 JUMP JUMPDEST MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x802 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xAE63932900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP4 PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD MSTORE DUP2 DUP2 PUSH1 0x64 DUP2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x7F7 JUMPI SWAP1 DUP3 SWAP2 PUSH2 0x7E0 JUMPI JUMPDEST POP PUSH2 0x7B3 JUMPI POP PUSH0 SWAP10 DUP2 PUSH2 0x5C8 DUP3 DUP12 PUSH2 0x2213 JUMP JUMPDEST MLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xE505E41B0D437B47350A9990142CCF38ACB11FFA0E5AF8F973B9E172F3D5D5E2 PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP3 LOG3 DUP4 ISZERO PUSH2 0x738 JUMPI PUSH2 0x60E DUP2 DUP11 PUSH2 0x2213 JUMP JUMPDEST MLOAD DUP7 ISZERO PUSH2 0x710 JUMPI PUSH2 0x61E SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH1 0x1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x65F DUP11 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP5 DUP13 DUP8 DUP4 ADD DIV ADD SWAP1 ISZERO ISZERO MUL PUSH2 0x24DE JUMP JUMPDEST SWAP3 DUP4 ADD DIV ADD SWAP1 ISZERO ISZERO MUL SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x693 DUP5 DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x69F DUP3 DUP12 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP1 DUP2 DUP5 DUP2 SUB GT PUSH2 0x6E3 JUMPI PUSH1 0x1 SWAP4 PUSH2 0x6D9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 SUB DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST SWAP1 POP PUSH2 0x4E4 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0xA0C22C700000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x1 SWAP2 DUP6 PUSH2 0x77D JUMPI PUSH2 0x74A DUP3 DUP12 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x776 PUSH1 0x40 PUSH0 KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x6DC JUMP JUMPDEST PUSH2 0x787 DUP3 DUP12 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x776 PUSH1 0x40 PUSH0 KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST DUP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x24 SWAP3 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH2 0x7E9 SWAP1 PUSH2 0x20AC JUMP JUMPDEST PUSH2 0x7F4 JUMPI DUP1 DUP13 PUSH2 0x5B5 JUMP JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST SWAP1 POP PUSH2 0x812 DUP2 DUP4 PUSH2 0x24F1 JUMP JUMPDEST SWAP1 PUSH2 0x4BE JUMP JUMPDEST DUP3 ISZERO ISZERO SWAP6 POP PUSH2 0x4B8 JUMP JUMPDEST PUSH2 0x82C DUP2 DUP8 PUSH2 0x2213 JUMP JUMPDEST MLOAD PUSH2 0x83A JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x476 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x84C DUP3 DUP5 PUSH2 0x2213 JUMP JUMPDEST MLOAD AND SWAP1 PUSH2 0x859 DUP2 DUP9 PUSH2 0x2213 JUMP JUMPDEST MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xAE63932900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP4 PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0x64 DUP2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x318 JUMPI PUSH2 0xAA2 JUMPI JUMPDEST POP DUP2 DUP12 PUSH32 0xAE7EBAD9FC3D1D17965F063FA520D393595E2EF6C8E22AE8413B60900444E19F PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x937 DUP7 DUP14 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND SWAP3 LOG3 DUP9 ISZERO PUSH2 0xA27 JUMPI PUSH2 0x952 DUP2 DUP9 PUSH2 0x2213 JUMP JUMPDEST MLOAD DUP6 ISZERO PUSH2 0x710 JUMPI PUSH2 0x962 SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH1 0x1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x9A3 DUP10 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP5 DUP12 DUP8 DUP4 ADD DIV ADD SWAP1 ISZERO ISZERO MUL PUSH2 0x24DE JUMP JUMPDEST SWAP3 DUP4 ADD DIV ADD SWAP1 ISZERO ISZERO MUL SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x9D7 DUP5 DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x9E3 DUP3 DUP10 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP1 DUP2 DUP5 DUP2 SUB GT PUSH2 0x6E3 JUMPI PUSH1 0x1 SWAP4 PUSH2 0xA1D SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP16 AND PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 SUB DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST SWAP1 POP PUSH2 0x832 JUMP JUMPDEST PUSH1 0x1 SWAP2 DUP5 PUSH2 0xA6C JUMPI PUSH2 0xA39 DUP3 DUP10 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0xA65 PUSH1 0x40 PUSH0 KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xA20 JUMP JUMPDEST PUSH2 0xA76 DUP3 DUP10 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0xA65 PUSH1 0x40 PUSH0 KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST PUSH2 0xAAB SWAP1 PUSH2 0x20AC JUMP JUMPDEST DUP12 PUSH2 0x8FF JUMP JUMPDEST POP PUSH2 0xABC DUP4 DUP3 PUSH2 0x24F1 JUMP JUMPDEST PUSH2 0x469 JUMP JUMPDEST DUP2 ISZERO ISZERO SWAP5 POP PUSH2 0x463 JUMP JUMPDEST SWAP2 POP POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0xADD DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x40 DUP2 DUP4 SUB SLT PUSH2 0x323 JUMPI DUP1 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP2 GT PUSH2 0x323 JUMPI DUP2 PUSH2 0xB0A SWAP2 DUP5 ADD PUSH2 0x240E JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD MLOAD SWAP1 DUP2 GT PUSH2 0x323 JUMPI PUSH2 0xB21 SWAP3 ADD PUSH2 0x240E JUMP JUMPDEST SWAP1 DUP4 PUSH2 0x42A JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xB5B PUSH2 0xB44 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0xB4C PUSH2 0x1FF0 JUMP JUMPDEST SWAP1 PUSH2 0xB56 DUP2 PUSH2 0x2532 JUMP JUMPDEST PUSH2 0x26C1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xB76 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0xB7E PUSH2 0x1FF0 JUMP JUMPDEST SWAP1 PUSH2 0xB87 PUSH2 0x27D6 JUMP JUMPDEST PUSH2 0xB90 DUP2 PUSH2 0x2947 JUMP JUMPDEST SWAP2 PUSH0 JUMPDEST DUP4 DUP2 LT PUSH2 0xB9C JUMPI STOP JUMPDEST DUP1 PUSH2 0xBBD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xBB4 PUSH1 0x1 SWAP5 DUP8 PUSH2 0x2213 JUMP JUMPDEST MLOAD AND DUP8 DUP6 PUSH2 0x2AA3 JUMP JUMPDEST ADD PUSH2 0xB93 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xBE4 PUSH2 0x1FDA JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xC19 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0xC21 PUSH2 0x1FF0 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP4 AND DUP1 DUP5 SUB PUSH2 0x323 JUMPI PUSH1 0x40 SWAP1 PUSH2 0xC43 PUSH2 0x27D6 JUMP JUMPDEST PUSH1 0x44 DUP3 MLOAD DUP1 SWAP8 DUP2 SWAP4 PUSH32 0xC9C1661B00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP2 DUP8 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x318 JUMPI PUSH2 0xCB4 JUMPI JUMPDEST PUSH2 0xB5B SWAP4 POP PUSH2 0x2AA3 JUMP JUMPDEST PUSH1 0x40 DUP5 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0xCDF JUMPI JUMPDEST DUP2 PUSH2 0xCCD PUSH1 0x40 SWAP4 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x323 JUMPI PUSH2 0xB5B SWAP4 POP PUSH2 0xCAA JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xCC0 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xD00 PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xD0C PUSH2 0x27D6 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP3 GT PUSH2 0xE68 JUMPI PUSH2 0xD24 DUP3 PUSH2 0x2A5B JUMP JUMPDEST PUSH2 0xD2D DUP2 PUSH2 0x228E JUMP JUMPDEST PUSH2 0xD36 DUP3 PUSH2 0x246F JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD PUSH2 0xD43 DUP2 PUSH2 0x2063 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 SWAP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP6 AND SWAP6 DUP7 PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 MLOAD AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 PUSH9 0xFF0000000000000000 DUP5 SLOAD SWAP4 MLOAD ISZERO ISZERO PUSH1 0x40 SHL AND SWAP3 AND OR OR SWAP1 SSTORE PUSH32 0x0 AND SWAP2 PUSH2 0xDDD DUP2 PUSH2 0x2B35 JUMP JUMPDEST DUP4 EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE253670A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP2 PUSH0 SWAP1 DUP4 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH32 0xAF47449D1C3597CCC9F5EC3ACAD03CEF57AA90A719000441B320687087948EFD SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x309 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST PUSH32 0xA7849E8E00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH1 0x20 SWAP3 PUSH0 SWAP3 PUSH2 0xF14 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH2 0xF35 SWAP2 SWAP3 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0xF3C JUMPI JUMPDEST PUSH2 0xF2D DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x23EF JUMP JUMPDEST SWAP1 DUP4 PUSH2 0xF0A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xF23 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xF5F PUSH2 0x27D6 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 GT PUSH2 0xE68 JUMPI PUSH1 0x20 DUP2 PUSH2 0xF9B PUSH32 0x48C5C3CCEC54C4E0EA08D83D838FA9BB725EB0B52C591CB00BD6E63BCA8C44F6 SWAP4 PUSH2 0x2A5B JUMP JUMPDEST DUP1 PUSH1 0x1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xFC2 PUSH2 0x1FDA JUMP JUMPDEST SWAP1 PUSH2 0xFCC DUP3 PUSH2 0x2947 JUMP JUMPDEST SWAP1 PUSH2 0xFD6 DUP3 PUSH2 0x21C4 JUMP JUMPDEST SWAP3 PUSH0 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP6 JUMPDEST DUP5 DUP2 LT PUSH2 0xFFF JUMPI PUSH1 0x40 MLOAD DUP1 PUSH2 0xFFB DUP9 DUP3 PUSH2 0x2028 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 SWAP1 DUP8 PUSH0 MSTORE PUSH1 0x8 DUP5 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP4 PUSH2 0x1018 DUP4 DUP9 PUSH2 0x2213 JUMP JUMPDEST MLOAD AND PUSH0 MSTORE DUP5 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH2 0x102D DUP3 DUP10 PUSH2 0x2213 JUMP JUMPDEST MSTORE ADD PUSH2 0xFE6 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xB5B PUSH2 0x1050 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0x228E JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x106F PUSH2 0x1FDA JUMP JUMPDEST SWAP1 PUSH2 0x1079 DUP3 PUSH2 0x2947 JUMP JUMPDEST SWAP1 PUSH2 0x1083 DUP3 PUSH2 0x21C4 JUMP JUMPDEST SWAP3 PUSH0 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP6 JUMPDEST DUP5 DUP2 LT PUSH2 0x10A8 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH2 0xFFB DUP9 DUP3 PUSH2 0x2028 JUMP JUMPDEST PUSH1 0x1 SWAP1 DUP8 PUSH0 MSTORE PUSH1 0x7 DUP5 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP4 PUSH2 0x10C1 DUP4 DUP9 PUSH2 0x2213 JUMP JUMPDEST MLOAD AND PUSH0 MSTORE DUP5 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH2 0x10D6 DUP3 DUP10 PUSH2 0x2213 JUMP JUMPDEST MSTORE ADD PUSH2 0x1093 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x113C PUSH2 0x27D6 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 GT PUSH2 0x327 JUMPI PUSH1 0x20 DUP2 PUSH2 0x1178 PUSH32 0xBF5AC0FC89BBF8819BE79F280146B65EA2AF2A9705CD9CFE0C9D93F6E87F307D SWAP4 PUSH2 0x2A5B JUMP JUMPDEST DUP1 PUSH0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x4 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 SUB PUSH2 0x323 JUMPI PUSH2 0x11CC PUSH1 0x20 SWAP2 PUSH2 0x2147 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x11F5 PUSH2 0x1FDA JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1210 DUP3 PUSH2 0x2063 JUMP JUMPDEST SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP1 DUP4 MSTORE PUSH1 0xFF PUSH1 0x40 SWAP3 DUP4 SHR AND ISZERO ISZERO SWAP4 SWAP1 SWAP3 ADD DUP4 SWAP1 MSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x1274 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0x127C PUSH2 0x1FF0 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP2 DUP3 ISZERO ISZERO SWAP1 DUP2 DUP5 SUB PUSH2 0x323 JUMPI PUSH2 0x1294 PUSH2 0x2778 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND SWAP2 DUP3 PUSH0 MSTORE DUP3 PUSH1 0x20 SWAP3 PUSH1 0x4 DUP5 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE DUP7 PUSH0 EQ PUSH2 0x14E4 JUMPI DUP4 PUSH0 SWAP7 DUP8 SWAP3 JUMPDEST DUP10 ISZERO PUSH2 0x1469 JUMPI DUP5 DUP4 DUP8 DUP13 PUSH0 SWAP12 PUSH32 0xA34AD86562F9716C2F1E723934CC63F44A9B4695CB8535C30DD8308D03A78564 PUSH1 0x40 SWAP16 PUSH32 0xD9725C347996D9A5D6001B5F7C2A2515D365258012FCEFF4F49E84310ED07912 SWAP11 DUP16 SWAP7 PUSH2 0x1454 SWAP7 PUSH32 0xCE1D009285405B74CF77294916C17664DE2C84EEF81225C71F265F823B358BCB SWAP9 JUMPDEST PUSH2 0x1369 DUP5 PUSH2 0x246F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1376 DUP3 PUSH2 0x2063 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 SWAP2 AND DUP3 MSTORE PUSH1 0x3 PUSH2 0x13E6 DUP7 DUP5 ADD SWAP5 DUP7 DUP7 MSTORE DUP12 PUSH0 MSTORE PUSH1 0x2 DUP9 MSTORE PUSH1 0x40 DUP5 SWAP1 PUSH0 KECCAK256 SWAP6 MLOAD AND SWAP5 DUP1 SLOAD SWAP7 MLOAD ISZERO ISZERO PUSH1 0x40 SHL SWAP7 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 SWAP7 DUP8 PUSH9 0xFF0000000000000000 DUP1 SWAP11 AND SWAP3 AND OR OR SWAP1 SSTORE PUSH2 0x246F JUMP JUMPDEST SWAP6 PUSH1 0x40 DUP4 SWAP1 MLOAD SWAP8 PUSH2 0x13F6 DUP10 PUSH2 0x2063 JUMP JUMPDEST AND DUP8 MSTORE DUP1 DUP8 ADD SWAP6 DUP7 MSTORE DUP11 PUSH0 MSTORE MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP5 MLOAD AND SWAP2 DUP5 SLOAD SWAP4 MLOAD ISZERO ISZERO PUSH1 0x40 SHL AND SWAP3 AND OR OR SWAP1 SSTORE PUSH1 0x40 PUSH2 0x143A SWAP1 MLOAD SWAP3 DUP4 SWAP3 DUP4 SWAP1 SWAP3 SWAP2 PUSH1 0x20 SWAP1 PUSH1 0x40 DUP4 ADD SWAP5 DUP4 MSTORE ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG2 DUP14 MLOAD DUP13 DUP2 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x40 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG2 DUP10 MLOAD SWAP6 DUP7 MSTORE AND SWAP4 LOG3 DUP4 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD MSTORE RETURN JUMPDEST DUP5 DUP4 DUP8 DUP13 PUSH1 0x1 SLOAD SWAP12 PUSH32 0xA34AD86562F9716C2F1E723934CC63F44A9B4695CB8535C30DD8308D03A78564 PUSH1 0x40 SWAP16 PUSH32 0xD9725C347996D9A5D6001B5F7C2A2515D365258012FCEFF4F49E84310ED07912 SWAP11 DUP16 SWAP7 PUSH2 0x1454 SWAP7 PUSH32 0xCE1D009285405B74CF77294916C17664DE2C84EEF81225C71F265F823B358BCB SWAP9 PUSH2 0x1360 JUMP JUMPDEST DUP4 PUSH0 SLOAD SWAP7 DUP8 SWAP3 PUSH2 0x12E5 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x1509 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0x1512 DUP2 PUSH2 0x228E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x2 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1538 DUP4 PUSH2 0x2063 JUMP JUMPDEST SLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0xFF DUP3 DUP6 AND SWAP5 DUP6 DUP4 MSTORE PUSH1 0x40 SHR AND ISZERO SWAP1 DUP6 DUP3 ISZERO SWAP2 ADD MSTORE PUSH0 SLOAD SWAP4 DUP2 PUSH2 0x1688 JUMPI JUMPDEST POP PUSH2 0x1569 JUMPI STOP JUMPDEST PUSH2 0x1572 DUP4 PUSH2 0x246F JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1581 DUP5 PUSH2 0x2063 JUMP JUMPDEST AND DUP3 MSTORE DUP5 DUP3 ADD SWAP1 PUSH0 DUP3 MSTORE DUP8 PUSH0 MSTORE PUSH1 0x2 DUP7 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 MLOAD AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 PUSH9 0xFF0000000000000000 DUP5 SLOAD SWAP4 MLOAD ISZERO ISZERO PUSH1 0x40 SHL AND SWAP3 AND OR OR SWAP1 SSTORE PUSH32 0x0 AND SWAP3 PUSH2 0x1600 DUP2 PUSH2 0x2B67 JUMP JUMPDEST DUP5 EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5E0B06F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP3 PUSH0 SWAP1 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x318 JUMPI PUSH32 0x97CFF4B6E6D80E307FAAB8B730D9F69264E860F2E0E10CFB8CDAF8A2F44E839E SWAP4 PUSH2 0x309 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST SWAP1 POP DUP4 EQ ISZERO DUP8 PUSH2 0x1562 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x16AD PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0x16B6 DUP2 PUSH2 0x228E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x3 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x16DC DUP4 PUSH2 0x2063 JUMP JUMPDEST SLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0xFF DUP3 DUP6 AND SWAP5 DUP6 DUP4 MSTORE PUSH1 0x40 SHR AND ISZERO SWAP1 DUP6 DUP3 ISZERO SWAP2 ADD MSTORE PUSH1 0x1 SLOAD SWAP4 DUP2 PUSH2 0x182D JUMPI JUMPDEST POP PUSH2 0x170E JUMPI STOP JUMPDEST PUSH2 0x1717 DUP4 PUSH2 0x246F JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1726 DUP5 PUSH2 0x2063 JUMP JUMPDEST AND DUP3 MSTORE DUP5 DUP3 ADD SWAP1 PUSH0 DUP3 MSTORE DUP8 PUSH0 MSTORE PUSH1 0x3 DUP7 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 MLOAD AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 PUSH9 0xFF0000000000000000 DUP5 SLOAD SWAP4 MLOAD ISZERO ISZERO PUSH1 0x40 SHL AND SWAP3 AND OR OR SWAP1 SSTORE PUSH32 0x0 AND SWAP3 PUSH2 0x17A5 DUP2 PUSH2 0x2B35 JUMP JUMPDEST DUP5 EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE253670A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP3 PUSH0 SWAP1 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x318 JUMPI PUSH32 0xAF47449D1C3597CCC9F5EC3ACAD03CEF57AA90A719000441B320687087948EFD SWAP4 PUSH2 0x309 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST SWAP1 POP DUP4 EQ ISZERO DUP8 PUSH2 0x1707 JUMP JUMPDEST PUSH2 0x2006 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x185E PUSH2 0x1FDA JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1210 DUP3 PUSH2 0x2063 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xB5B PUSH2 0x18B2 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0x18BB DUP2 PUSH2 0x25C7 JUMP JUMPDEST SWAP1 PUSH2 0x26C1 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x18DA PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x18E7 DUP2 PUSH2 0x2532 JUMP JUMPDEST PUSH8 0xDE0AD9B58F16000 DUP3 GT PUSH2 0x19D1 JUMPI PUSH2 0x18FF DUP2 PUSH2 0x228E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH32 0x0 AND SWAP2 PUSH2 0x1946 DUP2 PUSH2 0x2B35 JUMP JUMPDEST DUP4 EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE253670A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP2 PUSH0 SWAP1 DUP4 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH32 0x47F70DDBC624C299CEF7841AAEA0A86B677C800203E953104E958C9EC9BDAB34 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x309 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST PUSH32 0x370DA7400000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH8 0xDE0AD9B58F16000 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x1A34 PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x1A41 DUP2 PUSH2 0x2532 JUMP JUMPDEST PUSH8 0xDE0AD9B58F16000 DUP3 GT PUSH2 0x19D1 JUMPI PUSH2 0x1A59 DUP2 PUSH2 0x228E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH32 0x0 AND SWAP2 PUSH2 0x1AA0 DUP2 PUSH2 0x2B67 JUMP JUMPDEST DUP4 EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5E0B06F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP2 PUSH0 SWAP1 DUP4 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH32 0xB7CF36369623C01ED7B2EAFC4025224E924A2836D5FB49428A0F65417586BF5C SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x1B2B JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST PUSH2 0x1B34 SWAP1 PUSH2 0x20AC JUMP JUMPDEST DUP5 PUSH2 0x2FF JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH2 0x11CC PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x24F1 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1B7C PUSH2 0x1FDA JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x1BAD PUSH2 0x1FDA JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 MLOAD PUSH32 0x85F2DBD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 DUP2 PUSH1 0x4 DUP2 DUP6 PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x318 JUMPI DUP3 SWAP2 PUSH0 SWAP2 PUSH2 0x1F6C JUMPI JUMPDEST POP AND SWAP3 ADDRESS DUP5 EQ PUSH2 0x1F44 JUMPI AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH2 0x1F18 JUMPI DUP2 PUSH0 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x5C15A0B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x40 DUP2 PUSH1 0x24 DUP2 DUP8 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH0 SWAP1 PUSH0 SWAP3 PUSH2 0x1EF4 JUMPI JUMPDEST POP PUSH2 0x1CB7 SWAP1 PUSH2 0x246F JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1CC5 DUP3 PUSH2 0x2063 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 SWAP4 AND DUP3 MSTORE DUP4 DUP3 ADD SWAP1 ISZERO ISZERO DUP2 MSTORE DUP5 PUSH0 MSTORE PUSH1 0x2 DUP5 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SWAP3 MLOAD AND SWAP2 DUP1 SLOAD SWAP2 MLOAD ISZERO ISZERO PUSH1 0x40 SHL SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 SWAP4 DUP5 PUSH9 0xFF0000000000000000 DUP1 SWAP6 AND SWAP3 AND OR OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 PUSH32 0x7A2B97DC00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP6 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x40 DUP4 PUSH1 0x24 DUP2 DUP11 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x318 JUMPI PUSH0 SWAP1 PUSH0 SWAP5 PUSH2 0x1EC0 JUMPI JUMPDEST POP PUSH2 0x1D7B SWAP1 PUSH2 0x246F JUMP JUMPDEST SWAP4 DUP1 PUSH1 0x40 MLOAD SWAP6 PUSH2 0x1D8A DUP8 PUSH2 0x2063 JUMP JUMPDEST AND DUP6 MSTORE DUP6 DUP6 ADD SWAP4 ISZERO ISZERO DUP5 MSTORE DUP7 PUSH0 MSTORE PUSH1 0x3 DUP7 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP5 MLOAD AND SWAP2 DUP5 SLOAD SWAP4 MLOAD ISZERO ISZERO PUSH1 0x40 SHL AND SWAP3 AND OR OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB8E059B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 PUSH1 0x4 DUP3 ADD MSTORE DUP2 DUP2 PUSH1 0x24 DUP2 DUP8 GAS STATICCALL PUSH0 SWAP2 DUP2 PUSH2 0x1E8E JUMPI JUMPDEST POP SWAP4 DUP3 SWAP2 PUSH1 0x24 SWAP6 PUSH2 0x1E7C JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP3 PUSH32 0x252AAB500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP7 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL PUSH0 SWAP4 DUP2 PUSH2 0x1E4D JUMPI JUMPDEST POP PUSH2 0x1E3E JUMPI STOP JUMPDEST PUSH1 0x6 SWAP2 PUSH0 MSTORE MSTORE PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH0 DUP1 RETURN JUMPDEST SWAP1 SWAP4 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1E75 JUMPI JUMPDEST PUSH2 0x1E65 DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x323 JUMPI MLOAD SWAP3 DUP5 PUSH2 0x1E37 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1E5B JUMP JUMPDEST DUP5 PUSH0 MSTORE PUSH1 0x5 DUP4 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SSTORE DUP6 PUSH2 0x1DFC JUMP JUMPDEST SWAP2 POP SWAP4 DUP3 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1EB9 JUMPI JUMPDEST PUSH2 0x1EA6 DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x323 JUMPI SWAP1 MLOAD SWAP1 SWAP4 PUSH1 0x24 PUSH2 0x1DF0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1E9C JUMP JUMPDEST PUSH2 0x1D7B SWAP5 POP PUSH2 0x1EE7 SWAP2 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x1EED JUMPI JUMPDEST PUSH2 0x1EDF DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x212A JUMP JUMPDEST SWAP4 PUSH2 0x1D71 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1ED5 JUMP JUMPDEST PUSH2 0x1CB7 SWAP3 POP PUSH2 0x1F12 SWAP2 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x1EED JUMPI PUSH2 0x1EDF DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST SWAP2 PUSH2 0x1CAD JUMP JUMPDEST POP PUSH32 0xDB771C8000000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0xB82FD5BF00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP1 SWAP3 POP DUP5 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x1F9F JUMPI JUMPDEST PUSH2 0x1F85 DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x323 JUMPI MLOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x323 JUMPI DUP2 SWAP1 DUP6 PUSH2 0x1C15 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1F7B JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1FCA PUSH2 0x1FDA JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x6 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x323 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x323 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH8 0x6F05B59D3B20000 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x20 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH0 JUMPDEST DUP3 DUP2 LT PUSH2 0x204F JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x2041 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x207F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x207F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x207F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x207F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x323 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x323 JUMPI PUSH2 0x2144 PUSH1 0x20 DUP4 MLOAD SWAP4 ADD PUSH2 0x211D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x0 DUP5 MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x21A6 DUP2 PUSH2 0x20C0 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x207F JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x21CE DUP3 PUSH2 0x21AC JUMP JUMPDEST PUSH2 0x21DB PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x20DC JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0x2209 DUP3 SWAP5 PUSH2 0x21AC JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x2227 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x207F JUMPI PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 PUSH0 PUSH1 0x1F PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 MLOAD SWAP4 DUP4 PUSH1 0x44 PUSH1 0x20 SWAP7 DUP5 DUP9 DUP3 ADD SWAP5 PUSH32 0xFA399F2A00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x2300 DUP2 PUSH2 0x20C0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP7 DUP8 SWAP6 DUP7 SWAP4 PUSH32 0x48C8949100000000000000000000000000000000000000000000000000000000 DUP6 MSTORE DUP12 PUSH1 0x4 DUP7 ADD MSTORE MLOAD DUP1 SWAP2 DUP2 PUSH1 0x24 DUP8 ADD MSTORE DUP7 DUP7 ADD MCOPY DUP6 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND DUP2 ADD SUB ADD SWAP3 PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x318 JUMPI PUSH2 0x2380 JUMPI POP POP JUMP JUMPDEST RETURNDATASIZE DUP1 PUSH0 DUP5 RETURNDATACOPY PUSH2 0x238F DUP2 DUP5 PUSH2 0x20DC JUMP JUMPDEST DUP3 ADD SWAP2 DUP2 DUP2 DUP5 SUB SLT PUSH2 0x323 JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x323 JUMPI ADD SWAP2 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x323 JUMPI DUP3 MLOAD SWAP1 PUSH2 0x23C6 DUP3 PUSH2 0x2254 JUMP JUMPDEST SWAP1 PUSH2 0x23D4 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP3 DUP3 MSTORE DUP4 DUP4 DUP7 ADD ADD GT PUSH2 0x323 JUMPI DUP2 DUP4 PUSH0 SWAP6 ADD DUP5 DUP4 ADD MCOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x323 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x323 JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x323 JUMPI DUP2 MLOAD SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x2429 DUP2 PUSH2 0x21AC JUMP JUMPDEST SWAP4 PUSH2 0x2437 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x20DC JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x323 JUMPI PUSH1 0x20 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x2460 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x2452 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP2 DUP2 GT PUSH2 0x2484 JUMPI AND SWAP1 JUMP JUMPDEST PUSH32 0x6DFCC65000000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x40 PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x6E3 JUMPI JUMP JUMPDEST SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x6E3 JUMPI JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x6E3 JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x251E PUSH5 0x174876E800 SWAP3 DUP4 SWAP3 PUSH2 0x2517 PUSH8 0xDE0B6B3A7640000 SWAP2 DUP4 DUP4 SUB DUP4 DUP6 LT MUL PUSH2 0x24DE JUMP JUMPDEST DIV SWAP1 PUSH2 0x24B4 JUMP JUMPDEST DIV DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x6E3 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH2 0x2545 DUP3 PUSH2 0x25C7 JUMP JUMPDEST AND DUP1 ISZERO PUSH2 0x2586 JUMPI CALLER SUB PUSH2 0x2556 JUMPI POP POP JUMP JUMPDEST PUSH32 0xFBECDBF400000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE AND PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST POP PUSH32 0x8BCBF35300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x323 JUMPI JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xE9DDEB2600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x60 DUP2 PUSH1 0x24 DUP2 PUSH32 0x0 DUP8 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x26B7 JUMPI PUSH0 SWAP2 PUSH2 0x263E JUMPI JUMPDEST POP ADD MLOAD AND SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP2 RETURNDATASIZE PUSH1 0x60 GT PUSH2 0x26AF JUMPI JUMPDEST DUP2 PUSH2 0x2659 PUSH1 0x60 SWAP4 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x323 JUMPI DUP2 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x207F JUMPI PUSH2 0x26A5 SWAP2 DUP5 SWAP2 DUP3 MSTORE PUSH2 0x268C DUP2 PUSH2 0x25B3 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x269A PUSH1 0x20 DUP3 ADD PUSH2 0x25B3 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE ADD PUSH2 0x25B3 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH0 PUSH2 0x2637 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x264C JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x26CB DUP3 PUSH2 0x2947 JUMP JUMPDEST SWAP3 SWAP1 PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x26DD JUMPI POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x26F3 DUP4 DUP7 PUSH2 0x2213 JUMP JUMPDEST MLOAD AND DUP2 DUP7 AND DUP1 PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP5 DUP6 PUSH0 KECCAK256 DUP6 PUSH0 MSTORE DUP3 MSTORE DUP6 PUSH0 KECCAK256 SLOAD SWAP6 DUP7 PUSH2 0x2725 JUMPI JUMPDEST POP POP POP POP POP POP POP ADD PUSH2 0x26CF JUMP JUMPDEST PUSH32 0x938F3A3A03EE425CCC0F8010B0468938CBAFD3750FA43BBDF09C6F75E97E51F9 SWAP4 DUP6 PUSH0 MSTORE DUP4 MSTORE DUP1 PUSH0 KECCAK256 DUP7 PUSH0 MSTORE DUP4 MSTORE PUSH0 DUP2 DUP2 KECCAK256 SSTORE PUSH2 0x2764 DUP8 DUP14 DUP9 PUSH2 0x2B99 JUMP JUMPDEST MLOAD SWAP6 DUP7 MSTORE DUP11 AND SWAP5 LOG4 PUSH0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x2718 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER SUB PUSH2 0x27AA JUMPI JUMP JUMPDEST PUSH32 0x89676D500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x2802 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH0 CALLDATALOAD AND PUSH2 0x2147 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 MLOAD PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP3 PUSH1 0x4 DUP2 DUP7 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI DUP5 SWAP3 PUSH0 SWAP3 PUSH2 0x2925 JUMPI JUMPDEST POP PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0x9BE2A88400000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE CALLER PUSH1 0x24 DUP5 ADD MSTORE ADDRESS PUSH1 0x44 DUP5 ADD MSTORE AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x318 JUMPI PUSH0 SWAP3 PUSH2 0x28EF JUMPI JUMPDEST POP POP ISZERO PUSH2 0x28C7 JUMPI JUMP JUMPDEST PUSH32 0x23DADA5300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 DUP1 SWAP3 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x291E JUMPI JUMPDEST PUSH2 0x2906 DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x323 JUMPI PUSH2 0x2917 SWAP1 PUSH2 0x211D JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x28BE JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x28FC JUMP JUMPDEST PUSH1 0x64 SWAP2 SWAP3 POP PUSH2 0x2940 SWAP1 DUP5 RETURNDATASIZE DUP7 GT PUSH2 0xF3C JUMPI PUSH2 0xF2D DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x286D JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x40 MLOAD SWAP4 PUSH32 0xCA4F280300000000000000000000000000000000000000000000000000000000 DUP6 MSTORE AND PUSH1 0x4 DUP5 ADD MSTORE PUSH0 DUP4 PUSH1 0x24 DUP2 DUP5 PUSH32 0x0 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x318 JUMPI PUSH0 SWAP4 PUSH2 0x29BD JUMPI JUMPDEST POP POP DUP2 MLOAD SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x29D0 DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD PUSH1 0x20 SWAP2 DUP3 DUP2 DUP4 SUB SLT PUSH2 0x323 JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x323 JUMPI ADD SWAP3 DUP2 PUSH1 0x1F DUP6 ADD SLT ISZERO PUSH2 0x323 JUMPI DUP4 MLOAD PUSH2 0x2A08 DUP2 PUSH2 0x21AC JUMP JUMPDEST SWAP5 PUSH2 0x2A16 PUSH1 0x40 MLOAD SWAP7 DUP8 PUSH2 0x20DC JUMP JUMPDEST DUP2 DUP7 MSTORE DUP5 DUP1 DUP8 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP4 DUP5 GT PUSH2 0x323 JUMPI DUP5 ADD SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x2A43 JUMPI POP POP POP POP POP SWAP1 PUSH0 DUP1 PUSH2 0x29B6 JUMP JUMPDEST DUP2 MLOAD DUP4 DUP2 AND DUP2 SUB PUSH2 0x323 JUMPI DUP2 MSTORE SWAP1 DUP5 ADD SWAP1 DUP5 ADD PUSH2 0x2A2F JUMP JUMPDEST PUSH5 0x174876E800 DUP1 DUP3 DIV DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x6E3 JUMPI SUB PUSH2 0x2A7B JUMPI JUMP JUMPDEST PUSH32 0x833FB3CE00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 DUP5 DUP2 AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP5 DUP6 PUSH2 0x2ADC JUMPI JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP3 PUSH2 0x2B21 DUP8 PUSH32 0x1C2887FCB98F75E66BB9A36311F2D3D22FB204E6362106F30E9DF7EAF63131B5 SWAP6 PUSH1 0x20 SWAP6 DUP9 PUSH0 MSTORE PUSH1 0x7 DUP8 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP11 PUSH0 MSTORE DUP8 MSTORE PUSH0 PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2B99 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP7 DUP8 MSTORE AND SWAP5 LOG4 PUSH0 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x2AD4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x2144 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP1 PUSH2 0x24F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x2144 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP1 PUSH2 0x24F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP2 MSTORE SWAP3 PUSH2 0x2C2D SWAP3 PUSH0 SWAP3 DUP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BF6 PUSH1 0x64 DUP9 PUSH2 0x20DC JUMP JUMPDEST AND SWAP5 MLOAD SWAP1 DUP3 DUP7 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x2C91 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x2C0F DUP3 PUSH2 0x2254 JUMP JUMPDEST SWAP2 PUSH2 0x2C1D PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x20DC JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP4 PUSH2 0x2C99 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 ISZERO ISZERO SWAP2 DUP3 PUSH2 0x2C6E JUMPI JUMPDEST POP POP PUSH2 0x2C43 JUMPI POP JUMP JUMPDEST PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 SWAP3 POP SWAP1 PUSH1 0x20 SWAP2 DUP2 ADD SUB SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH2 0x2C89 SWAP2 ADD PUSH2 0x211D JUMP JUMPDEST ISZERO PUSH0 DUP1 PUSH2 0x2C3A JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x2C27 JUMP JUMPDEST SWAP1 PUSH2 0x2CD6 JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x2CAE JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x2D1C JUMPI JUMPDEST PUSH2 0x2CE7 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x2CDF JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC PUSH17 0x2BF6C267F2611555B40F68B78BF4136814 GAS ADDMOD 0xEE 0xE0 GAS DUP13 JUMP 0x2E DUP3 0xCB PUSH10 0xE05564736F6C63430008 SHL STOP CALLER ","sourceMap":"3120:30799:19:-:0;;;;;;;;;;;;;-1:-1:-1;;3120:30799:19;;;;-1:-1:-1;;;;;3120:30799:19;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3120:30799:19;;;;;;;;;;;;;;922:4:20;;1347:46:13;;872:14:18;;;409::21;;4720:5:19;7248:55;;;;7244:127;;3120:30799;7402:20;;25803:68;7402:20;;:::i;:::-;3120:30799;-1:-1:-1;3120:30799:19;;;;;;25803:68;7581:57;;7577:130;;3120:30799;7738:21;;26371:70;7738:21;;:::i;:::-;3120:30799;;;;;;;;26371:70;3120:30799;;;;;;;;1347:46:13;3120:30799:19;;;;;872:14:18;3120:30799:19;;;;;;;;;;;;;;;409:14:21;3120:30799:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7577:130;7661:35;;;-1:-1:-1;7661:35:19;;-1:-1:-1;7661:35:19;7244:127;7326:34;;;-1:-1:-1;7326:34:19;;-1:-1:-1;7326:34:19;3120:30799;-1:-1:-1;3120:30799:19;;;;;;-1:-1:-1;3120:30799:19;;;;;-1:-1:-1;3120:30799:19;33168:749;19669:4:12;;;;;;;;;;;;;;;;;;33769:74:19;33765:146;;33168:749::o;33765:146::-;33866:34;;;-1:-1:-1;33866:34:19;;-1:-1:-1;33866:34:19;19669:4:12;3120:30799:19;;;-1:-1:-1;19669:4:12;;;;;-1:-1:-1;19669:4:12"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":8154,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_18784":{"entryPoint":8176,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":9651,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_fromMemory":{"entryPoint":9230,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":8477,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_contract_IAuthorizer_fromMemory":{"entryPoint":9199,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint256t_bool_fromMemory":{"entryPoint":8490,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":8232,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint256_bool":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_and_zero_memory_array_array_uint256_dyn":{"entryPoint":8644,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":8620,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":8788,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_uint256":{"entryPoint":9396,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256":{"entryPoint":9438,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256_18915":{"entryPoint":9409,"id":null,"parameterSlots":1,"returnSlots":1},"external_fun_MAX_PROTOCOL_SWAP_FEE_PERCENTAGE":{"entryPoint":8198,"id":null,"parameterSlots":0,"returnSlots":0},"finalize_allocation":{"entryPoint":8412,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_18767":{"entryPoint":8291,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_18900":{"entryPoint":8364,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_43287":{"entryPoint":8384,"id":null,"parameterSlots":1,"returnSlots":0},"fun_authenticateCaller":{"entryPoint":10198,"id":2462,"parameterSlots":0,"returnSlots":0},"fun_collectAggregateFees":{"entryPoint":8846,"id":4836,"parameterSlots":1,"returnSlots":0},"fun_computeAggregateFeePercentage":{"entryPoint":9457,"id":5483,"parameterSlots":2,"returnSlots":1},"fun_ensureCallerIsPoolCreator":{"entryPoint":9522,"id":5519,"parameterSlots":1,"returnSlots":0},"fun_ensureOnlyVault":{"entryPoint":10104,"id":6405,"parameterSlots":0,"returnSlots":0},"fun_ensureValidPrecision":{"entryPoint":10843,"id":6297,"parameterSlots":1,"returnSlots":0},"fun_getActionId":{"entryPoint":8519,"id":2480,"parameterSlots":1,"returnSlots":1},"fun_getAggregateFeePercentage":{"entryPoint":11061,"id":5453,"parameterSlots":1,"returnSlots":1},"fun_getAggregateFeePercentage_18901":{"entryPoint":11111,"id":5453,"parameterSlots":1,"returnSlots":1},"fun_getPoolCreator":{"entryPoint":9671,"id":5562,"parameterSlots":1,"returnSlots":1},"fun_getPoolTokensAndCount":{"entryPoint":10567,"id":5543,"parameterSlots":1,"returnSlots":2},"fun_safeTransfer":{"entryPoint":11161,"id":6766,"parameterSlots":3,"returnSlots":0},"fun_toUint64":{"entryPoint":9327,"id":7958,"parameterSlots":1,"returnSlots":1},"fun_verifyCallResultFromTarget":{"entryPoint":11417,"id":7218,"parameterSlots":3,"returnSlots":1},"fun_withdrawPoolCreatorFees":{"entryPoint":9921,"id":6200,"parameterSlots":2,"returnSlots":0},"fun_withdrawProtocolFees":{"entryPoint":10915,"id":6096,"parameterSlots":3,"returnSlots":0},"memory_array_index_access_contract_IERC20_dyn":{"entryPoint":8723,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[],"immutableReferences":{"2420":[{"length":32,"start":8562}],"4440":[{"length":32,"start":3798},{"length":32,"start":4348},{"length":32,"start":10299}],"6367":[{"length":32,"start":595},{"length":32,"start":878},{"length":32,"start":1016},{"length":32,"start":1303},{"length":32,"start":1413},{"length":32,"start":2148},{"length":32,"start":2258},{"length":32,"start":3197},{"length":32,"start":3507},{"length":32,"start":5590},{"length":32,"start":6011},{"length":32,"start":6428},{"length":32,"start":6774},{"length":32,"start":7140},{"length":32,"start":9040},{"length":32,"start":9734},{"length":32,"start":10114},{"length":32,"start":10630}]},"linkReferences":{},"object":"6080806040526004361015610012575f80fd5b5f3560e01c9081630252aab514611fa6575080630874327f14611b935780630b8e059b14611b5b5780630ddd60c614611b3a5780631377c16c14611a1b5780632772d156146118385780632e1d388d146119f95780633af52712146118c157806352f125f01461189657806355fb76af146118795780635c15a0b41461183d5780635e32e4e81461183857806371447ea81461169357806371ecc8fb146114ef57806377ff76e71461125b5780637869ee181461123f5780637a2b97dc146111d4578063851c1bb3146111845780638a3c5c69146111205780638d928af8146110dd5780638df44c54146110555780638f4ab9ca146110345780639e95f3fd14610fa8578063a93df2a414610f43578063aaabadc514610e90578063abaa335614610ce7578063b53a70b214610c00578063c673bdaf14610bc3578063cf7b287f14610b5d578063f706144514610b28578063fa399f2a14610392578063fbfa77cf1461034f5763fd267f3914610187575f80fd5b34610323576040600319360112610323576101a0611fda565b602435906101ac6127d6565b6706f05b59d3b200008211610327576101c482612a5b565b6101cd8161228e565b6101d68261246f565b916040516101e381612063565b67ffffffffffffffff80941681526020810190600182526001600160a01b039182851695865f52600260205260405f209251167fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000068ff000000000000000084549351151560401b169216171790557f0000000000000000000000000000000000000000000000000000000000000000169161027d81612b67565b833b15610323576040517f5e0b06f40000000000000000000000000000000000000000000000000000000081526001600160a01b039290921660048301526024820152915f908390604490829084905af1908115610318577f97cff4b6e6d80e307faab8b730d9f69264e860f2e0e10cfb8cdaf8a2f44e839e92602092610309575b50604051908152a2005b610312906120ac565b5f6102ff565b6040513d5f823e3d90fd5b5f80fd5b7f7e6eb7fb000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610323575f6003193601126103235760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610323576020600319360112610323576103ab611fda565b6103b3612778565b6040517f8f4ab9ca0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201525f81602481836001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1908115610318575f905f92610acb575b506001600160a01b0383165f52600260205267ffffffffffffffff60405f20541690600560205260405f2054905f928215159384610ac1575b84610ab1575b61047287612947565b94905f5b8681106108225789896001600160a01b0382165f52600360205267ffffffffffffffff60405f205416905f92600660205260405f2054925f8415159485610818575b85610806575b6104c784612947565b96905f5b8881106104d457005b6104de8189612213565b516104ec575b6001016104cb565b986001600160a01b036104ff8b84612213565b51169061050c8b8a612213565b516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163b1561080257604051907fae63932900000000000000000000000000000000000000000000000000000000825283600483015230602483015260448201528181606481836001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af180156107f7579082916107e0575b506107b357505f99816105c8828b612213565b516040519081527fe505e41b0d437b47350a9990142ccf38acb11ffa0e5af8f973b9e172f3d5d5e260206001600160a01b038c1692a383156107385761060e818a612213565b5186156107105761061e906124c1565b6001670de0b6b3a764000061065f8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94848c8783010401901515026124de565b928301040190151502916001600160a01b0389165f52600760205260405f20815f5260205260405f206106938482546124b4565b905561069f828b612213565b519081848103116106e3576001936106d9916001600160a01b038c165f52600860205260405f20905f5260205260405f20920382546124b4565b90555b90506104e4565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b7f0a0c22c7000000000000000000000000000000000000000000000000000000005f5260045ffd5b6001918561077d5761074a828b612213565b51906001600160a01b038a165f52600760205260405f20905f5260205261077660405f209182546124b4565b90556106dc565b610787828b612213565b51906001600160a01b038a165f52600860205260405f20905f5260205261077660405f209182546124b4565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526021600452fd5b6107e9906120ac565b6107f457808c6105b5565b80fd5b6040513d84823e3d90fd5b5080fd5b905061081281836124f1565b906104be565b82151595506104b8565b61082c8187612213565b5161083a575b600101610476565b6001600160a01b0361084c8284612213565b5116906108598188612213565b516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163b1561032357604051907fae63932900000000000000000000000000000000000000000000000000000000825283600483015230602483015260448201525f81606481836001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1801561031857610aa2575b50818b7fae7ebad9fc3d1d17965f063fa520d393595e2ef6c8e22ae8413b60900444e19f60206001600160a01b03610937868d612213565b51936040519485521692a38815610a27576109528188612213565b51851561071057610962906124c1565b6001670de0b6b3a76400006109a3897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94848b8783010401901515026124de565b928301040190151502916001600160a01b038c165f52600760205260405f20815f5260205260405f206109d78482546124b4565b90556109e38289612213565b519081848103116106e357600193610a1d916001600160a01b038f165f52600860205260405f20905f5260205260405f20920382546124b4565b90555b9050610832565b60019184610a6c57610a398289612213565b51906001600160a01b038d165f52600760205260405f20905f52602052610a6560405f209182546124b4565b9055610a20565b610a768289612213565b51906001600160a01b038d165f52600860205260405f20905f52602052610a6560405f209182546124b4565b610aab906120ac565b8b6108ff565b50610abc83826124f1565b610469565b8115159450610463565b9150503d805f833e610add81836120dc565b8101906040818303126103235780519167ffffffffffffffff928381116103235781610b0a91840161240e565b92602083015190811161032357610b21920161240e565b908361042a565b3461032357604060031936011261032357610b5b610b44611fda565b610b4c611ff0565b90610b5681612532565b6126c1565b005b3461032357604060031936011261032357610b76611fda565b610b7e611ff0565b90610b876127d6565b610b9081612947565b915f5b838110610b9c57005b80610bbd6001600160a01b03610bb460019487612213565b51168785612aa3565b01610b93565b34610323576020600319360112610323576001600160a01b03610be4611fda565b165f526004602052602060ff60405f2054166040519015158152f35b3461032357606060031936011261032357610c19611fda565b610c21611ff0565b604435906001600160a01b039283831680840361032357604090610c436127d6565b60448251809781937fc9c1661b000000000000000000000000000000000000000000000000000000008352818716600484015260248301527f0000000000000000000000000000000000000000000000000000000000000000165afa801561031857610cb4575b610b5b9350612aa3565b6040843d604011610cdf575b81610ccd604093836120dc565b8101031261032357610b5b9350610caa565b3d9150610cc0565b3461032357604060031936011261032357610d00611fda565b60243590610d0c6127d6565b6706f05b59d3b200008211610e6857610d2482612a5b565b610d2d8161228e565b610d368261246f565b91604051610d4381612063565b67ffffffffffffffff80941681526020810190600182526001600160a01b039182851695865f52600360205260405f209251167fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000068ff000000000000000084549351151560401b169216171790557f00000000000000000000000000000000000000000000000000000000000000001691610ddd81612b35565b833b15610323576040517fe253670a0000000000000000000000000000000000000000000000000000000081526001600160a01b039290921660048301526024820152915f908390604490829084905af1908115610318577faf47449d1c3597ccc9f5ec3acad03cef57aa90a719000441b320687087948efd926020926103095750604051908152a2005b7fa7849e8e000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610323575f600319360112610323576040517faaabadc50000000000000000000000000000000000000000000000000000000081526001600160a01b036020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa908115610318576020925f92610f14575b5060405191168152f35b610f35919250833d8511610f3c575b610f2d81836120dc565b8101906123ef565b9083610f0a565b503d610f23565b3461032357602060031936011261032357600435610f5f6127d6565b6706f05b59d3b200008111610e6857602081610f9b7f48c5c3ccec54c4e0ea08d83d838fa9bb725eb0b52c591cb00bd6e63bca8c44f693612a5b565b80600155604051908152a1005b346103235760208060031936011261032357610fc2611fda565b90610fcc82612947565b90610fd6826121c4565b925f946001600160a01b03809116955b848110610fff5760405180610ffb8882612028565b0390f35b600190875f526008845260405f20836110188388612213565b51165f52845260405f205461102d8289612213565b5201610fe6565b3461032357602060031936011261032357610b5b611050611fda565b61228e565b34610323576020806003193601126103235761106f611fda565b9061107982612947565b90611083826121c4565b925f946001600160a01b03809116955b8481106110a85760405180610ffb8882612028565b600190875f526007845260405f20836110c18388612213565b51165f52845260405f20546110d68289612213565b5201611093565b34610323575f6003193601126103235760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b346103235760206003193601126103235760043561113c6127d6565b6706f05b59d3b200008111610327576020816111787fbf5ac0fc89bbf8819be79f280146b65ea2af2a9705cd9cfe0c9d93f6e87f307d93612a5b565b805f55604051908152a1005b34610323576020600319360112610323576004357fffffffff0000000000000000000000000000000000000000000000000000000081168103610323576111cc602091612147565b604051908152f35b34610323576020600319360112610323576001600160a01b036111f5611fda565b165f526003602052602060405f206040519061121082612063565b5467ffffffffffffffff811680835260ff604092831c1615159390920183905280519182526020820192909252f35b34610323575f6003193601126103235760205f54604051908152f35b3461032357606060031936011261032357611274611fda565b61127c611ff0565b90604435918215159081840361032357611294612778565b6001600160a01b0380931691825f52826020926004845260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055865f146114e457835f9687925b8915611469578483878c5f9b7fa34ad86562f9716c2f1e723934cc63f44a9b4695cb8535c30dd8308d03a7856460409f7fd9725c347996d9a5d6001b5f7c2a2515d365258012fceff4f49e84310ed079129a8f96611454967fce1d009285405b74cf77294916c17664de2c84eef81225c71f265f823b358bcb985b6113698461246f565b6040519061137682612063565b67ffffffffffffffff809116825260036113e6868401948686528b5f5260028852604084905f209551169480549651151560401b967fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000968768ff0000000000000000809a1692161717905561246f565b956040839051976113f689612063565b1687528087019586528a5f525260405f209451169184549351151560401b16921617179055604061143a905192839283909291602090604083019483521515910152565b0390a28d518c815290151560208201529081906040820190565b0390a289519586521693a38351928352820152f35b8483878c6001549b7fa34ad86562f9716c2f1e723934cc63f44a9b4695cb8535c30dd8308d03a7856460409f7fd9725c347996d9a5d6001b5f7c2a2515d365258012fceff4f49e84310ed079129a8f96611454967fce1d009285405b74cf77294916c17664de2c84eef81225c71f265f823b358bcb98611360565b835f549687926112e5565b346103235760208060031936011261032357611509611fda565b6115128161228e565b6001600160a01b039182821692835f526002825260405f20906040519161153883612063565b549167ffffffffffffffff9060ff8285169485835260401c1615908582159101525f549381611688575b5061156957005b6115728361246f565b90806040519261158184612063565b168252848201905f8252875f526002865260405f209251167fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000068ff000000000000000084549351151560401b169216171790557f0000000000000000000000000000000000000000000000000000000000000000169261160081612b67565b843b15610323576040517f5e0b06f40000000000000000000000000000000000000000000000000000000081526001600160a01b039290921660048301526024820152925f908490604490829084905af1928315610318577f97cff4b6e6d80e307faab8b730d9f69264e860f2e0e10cfb8cdaf8a2f44e839e936103095750604051908152a2005b905083141587611562565b3461032357602080600319360112610323576116ad611fda565b6116b68161228e565b6001600160a01b039182821692835f526003825260405f2090604051916116dc83612063565b549167ffffffffffffffff9060ff8285169485835260401c161590858215910152600154938161182d575b5061170e57005b6117178361246f565b90806040519261172684612063565b168252848201905f8252875f526003865260405f209251167fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000068ff000000000000000084549351151560401b169216171790557f000000000000000000000000000000000000000000000000000000000000000016926117a581612b35565b843b15610323576040517fe253670a0000000000000000000000000000000000000000000000000000000081526001600160a01b039290921660048301526024820152925f908490604490829084905af1928315610318577faf47449d1c3597ccc9f5ec3acad03cef57aa90a719000441b320687087948efd936103095750604051908152a2005b905083141587611707565b612006565b34610323576020600319360112610323576001600160a01b0361185e611fda565b165f526002602052602060405f206040519061121082612063565b34610323575f600319360112610323576020600154604051908152f35b3461032357602060031936011261032357610b5b6118b2611fda565b6118bb816125c7565b906126c1565b34610323576040600319360112610323576118da611fda565b602435906118e781612532565b670de0ad9b58f1600082116119d1576118ff8161228e565b6001600160a01b039182821692835f5260066020528160405f20557f0000000000000000000000000000000000000000000000000000000000000000169161194681612b35565b833b15610323576040517fe253670a0000000000000000000000000000000000000000000000000000000081526001600160a01b039290921660048301526024820152915f908390604490829084905af1908115610318577f47f70ddbc624c299cef7841aaea0a86b677c800203e953104e958c9ec9bdab34926020926103095750604051908152a2005b7f0370da74000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610323575f600319360112610323576020604051670de0ad9b58f160008152f35b3461032357604060031936011261032357611a34611fda565b60243590611a4181612532565b670de0ad9b58f1600082116119d157611a598161228e565b6001600160a01b039182821692835f5260056020528160405f20557f00000000000000000000000000000000000000000000000000000000000000001691611aa081612b67565b833b15610323576040517f5e0b06f40000000000000000000000000000000000000000000000000000000081526001600160a01b039290921660048301526024820152915f908390604490829084905af1908115610318577fb7cf36369623c01ed7b2eafc4025224e924a2836d5fb49428a0f65417586bf5c92602092611b2b5750604051908152a2005b611b34906120ac565b846102ff565b346103235760406003193601126103235760206111cc6024356004356124f1565b34610323576020600319360112610323576001600160a01b03611b7c611fda565b165f526005602052602060405f2054604051908152f35b346103235760208060031936011261032357611bad611fda565b906001600160a01b036040517f85f2dbd40000000000000000000000000000000000000000000000000000000081528281600481857f0000000000000000000000000000000000000000000000000000000000000000165afa80156103185782915f91611f6c575b501692308414611f44571690815f526004815260ff60405f205416611f1857815f526004815260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790556040517f5c15a0b4000000000000000000000000000000000000000000000000000000008152826004820152604081602481875afa908115610318575f905f92611ef4575b50611cb79061246f565b9060405190611cc582612063565b67ffffffffffffffff80931682528382019015158152845f52600284528260405f209251169180549151151560401b917fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000938468ff0000000000000000809516921617179055604051917f7a2b97dc0000000000000000000000000000000000000000000000000000000083528560048401526040836024818a5afa928315610318575f905f94611ec0575b50611d7b9061246f565b938060405195611d8a87612063565b1685528585019315158452865f526003865260405f209451169184549351151560401b169216171790556040517f0b8e059b0000000000000000000000000000000000000000000000000000000081528260048201528181602481875afa5f9181611e8e575b50938291602495611e7c575b50604051948580927f0252aab50000000000000000000000000000000000000000000000000000000082528660048301525afa5f9381611e4d575b50611e3e57005b6006915f525260405f20555f80f35b9093508181813d8311611e75575b611e6581836120dc565b8101031261032357519284611e37565b503d611e5b565b845f526005835260405f205585611dfc565b9150938282813d8311611eb9575b611ea681836120dc565b8101031261032357905190936024611df0565b503d611e9c565b611d7b9450611ee7915060403d604011611eed575b611edf81836120dc565b81019061212a565b93611d71565b503d611ed5565b611cb79250611f12915060403d604011611eed57611edf81836120dc565b91611cad565b507fdb771c80000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b7fb82fd5bf000000000000000000000000000000000000000000000000000000005f5260045ffd5b809250848092503d8311611f9f575b611f8581836120dc565b810103126103235751818116810361032357819085611c15565b503d611f7b565b34610323576020600319360112610323576020906001600160a01b03611fca611fda565b165f526006825260405f20548152f35b600435906001600160a01b038216820361032357565b602435906001600160a01b038216820361032357565b34610323575f6003193601126103235760206040516706f05b59d3b200008152f35b60209060206040818301928281528551809452019301915f5b82811061204f575050505090565b835185529381019392810192600101612041565b6040810190811067ffffffffffffffff82111761207f57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b67ffffffffffffffff811161207f57604052565b6060810190811067ffffffffffffffff82111761207f57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761207f57604052565b5190811515820361032357565b91908260409103126103235761214460208351930161211d565b90565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060208201927f00000000000000000000000000000000000000000000000000000000000000008452166040820152602481526121a6816120c0565b51902090565b67ffffffffffffffff811161207f5760051b60200190565b906121ce826121ac565b6121db60405191826120dc565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061220982946121ac565b0190602036910137565b80518210156122275760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b67ffffffffffffffff811161207f57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0905f601f6001600160a01b036040519383604460209684888201947ffa399f2a00000000000000000000000000000000000000000000000000000000865216602482015260248152612300816120c0565b604051988996879586937f48c894910000000000000000000000000000000000000000000000000000000085528b60048601525180918160248701528686015e85858286010152011681010301927f0000000000000000000000000000000000000000000000000000000000000000165af1801561031857612380575050565b3d805f843e61238f81846120dc565b82019181818403126103235780519067ffffffffffffffff821161032357019180601f84011215610323578251906123c682612254565b906123d460405192836120dc565b8282528383860101116103235781835f95018483015e010152565b9081602091031261032357516001600160a01b03811681036103235790565b9080601f8301121561032357815190602091612429816121ac565b9361243760405195866120dc565b81855260208086019260051b82010192831161032357602001905b828210612460575050505090565b81518152908301908301612452565b67ffffffffffffffff90818111612484571690565b7f6dfcc650000000000000000000000000000000000000000000000000000000005f52604060045260245260445ffd5b919082018092116106e357565b90670de0b6b3a7640000918281029281840414901517156106e357565b818102929181159184041417156106e357565b9061251e64174876e800928392612517670de0b6b3a764000091838303838510026124de565b04906124b4565b048181029181830414901517156106e35790565b6001600160a01b039081612545826125c7565b168015612586573303612556575050565b7ffbecdbf4000000000000000000000000000000000000000000000000000000005f52336004521660245260445ffd5b507f8bcbf353000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b51906001600160a01b038216820361032357565b604080517fe9ddeb260000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201526060816024817f000000000000000000000000000000000000000000000000000000000000000087165afa9081156126b7575f9161263e575b5001511690565b90506060813d6060116126af575b81612659606093836120dc565b81010312610323578151906060820182811067ffffffffffffffff82111761207f576126a5918491825261268c816125b3565b845261269a602082016125b3565b6020850152016125b3565b828201525f612637565b3d915061264c565b82513d5f823e3d90fd5b906126cb82612947565b92905f5b8481106126dd575050505050565b6001906001600160a01b03806126f38386612213565b5116818616805f5260086020818152604094855f20855f528252855f20549586612725575b50505050505050016126cf565b7f938f3a3a03ee425ccc0f8010b0468938cbafd3750fa43bbdf09c6f75e97e51f993855f528352805f20865f5283525f81812055612764878d88612b99565b519586528a1694a45f808080808080612718565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036127aa57565b7f089676d5000000000000000000000000000000000000000000000000000000005f523360045260245ffd5b6128027fffffffff000000000000000000000000000000000000000000000000000000005f3516612147565b6001600160a01b036040517faaabadc50000000000000000000000000000000000000000000000000000000081526020928382600481867f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103185784925f92612925575b5060649060405194859384927f9be2a8840000000000000000000000000000000000000000000000000000000084526004840152336024840152306044840152165afa918215610318575f926128ef575b5050156128c757565b7f23dada53000000000000000000000000000000000000000000000000000000005f5260045ffd5b90809250813d831161291e575b61290681836120dc565b81010312610323576129179061211d565b5f806128be565b503d6128fc565b606491925061294090843d8611610f3c57610f2d81836120dc565b919061286d565b906001600160a01b0380604051937fca4f28030000000000000000000000000000000000000000000000000000000085521660048401525f83602481847f0000000000000000000000000000000000000000000000000000000000000000165afa928315610318575f936129bd575b5050815190565b909192503d805f833e6129d081836120dc565b810160209182818303126103235780519067ffffffffffffffff821161032357019281601f85011215610323578351612a08816121ac565b94612a1660405196876120dc565b818652848087019260051b820101938411610323578401905b838210612a43575050505050905f806129b6565b81518381168103610323578152908401908401612a2f565b64174876e8008082048181029181830414901517156106e35703612a7b57565b7f833fb3ce000000000000000000000000000000000000000000000000000000005f5260045ffd5b91906001600160a01b0380931690815f52600760205260405f209284811693845f5260205260405f20549485612adc575b505050505050565b82612b21877f1c2887fcb98f75e66bb9a36311f2d3d22fb204e6362106f30e9df7eaf63131b595602095885f526007875260405f208a5f5287525f6040812055612b99565b6040519687521694a45f8080808080612ad4565b6001600160a01b03165f52600360205261214467ffffffffffffffff60405f205416600660205260405f2054906124f1565b6001600160a01b03165f52600260205261214467ffffffffffffffff60405f205416600560205260405f2054906124f1565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082019081526001600160a01b03938416602483015260448083019590955293815292612c2d925f9283929190612bf66064886120dc565b1694519082865af13d15612c91573d90612c0f82612254565b91612c1d60405193846120dc565b82523d5f602084013e5b83612c99565b8051908115159182612c6e575b5050612c435750565b7f5274afe7000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b8192509060209181010312610323576020612c89910161211d565b155f80612c3a565b606090612c27565b90612cd65750805115612cae57805190602001fd5b7f1425ea42000000000000000000000000000000000000000000000000000000005f5260045ffd5b81511580612d1c575b612ce7575090565b6001600160a01b03907f9996b315000000000000000000000000000000000000000000000000000000005f521660045260245ffd5b50803b15612cdf56fea2646970667358221220ac702bf6c267f2611555b40f68b78bf41368145a08eee05a8c562e82cb69e05564736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x252AAB5 EQ PUSH2 0x1FA6 JUMPI POP DUP1 PUSH4 0x874327F EQ PUSH2 0x1B93 JUMPI DUP1 PUSH4 0xB8E059B EQ PUSH2 0x1B5B JUMPI DUP1 PUSH4 0xDDD60C6 EQ PUSH2 0x1B3A JUMPI DUP1 PUSH4 0x1377C16C EQ PUSH2 0x1A1B JUMPI DUP1 PUSH4 0x2772D156 EQ PUSH2 0x1838 JUMPI DUP1 PUSH4 0x2E1D388D EQ PUSH2 0x19F9 JUMPI DUP1 PUSH4 0x3AF52712 EQ PUSH2 0x18C1 JUMPI DUP1 PUSH4 0x52F125F0 EQ PUSH2 0x1896 JUMPI DUP1 PUSH4 0x55FB76AF EQ PUSH2 0x1879 JUMPI DUP1 PUSH4 0x5C15A0B4 EQ PUSH2 0x183D JUMPI DUP1 PUSH4 0x5E32E4E8 EQ PUSH2 0x1838 JUMPI DUP1 PUSH4 0x71447EA8 EQ PUSH2 0x1693 JUMPI DUP1 PUSH4 0x71ECC8FB EQ PUSH2 0x14EF JUMPI DUP1 PUSH4 0x77FF76E7 EQ PUSH2 0x125B JUMPI DUP1 PUSH4 0x7869EE18 EQ PUSH2 0x123F JUMPI DUP1 PUSH4 0x7A2B97DC EQ PUSH2 0x11D4 JUMPI DUP1 PUSH4 0x851C1BB3 EQ PUSH2 0x1184 JUMPI DUP1 PUSH4 0x8A3C5C69 EQ PUSH2 0x1120 JUMPI DUP1 PUSH4 0x8D928AF8 EQ PUSH2 0x10DD JUMPI DUP1 PUSH4 0x8DF44C54 EQ PUSH2 0x1055 JUMPI DUP1 PUSH4 0x8F4AB9CA EQ PUSH2 0x1034 JUMPI DUP1 PUSH4 0x9E95F3FD EQ PUSH2 0xFA8 JUMPI DUP1 PUSH4 0xA93DF2A4 EQ PUSH2 0xF43 JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0xE90 JUMPI DUP1 PUSH4 0xABAA3356 EQ PUSH2 0xCE7 JUMPI DUP1 PUSH4 0xB53A70B2 EQ PUSH2 0xC00 JUMPI DUP1 PUSH4 0xC673BDAF EQ PUSH2 0xBC3 JUMPI DUP1 PUSH4 0xCF7B287F EQ PUSH2 0xB5D JUMPI DUP1 PUSH4 0xF7061445 EQ PUSH2 0xB28 JUMPI DUP1 PUSH4 0xFA399F2A EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0xFBFA77CF EQ PUSH2 0x34F JUMPI PUSH4 0xFD267F39 EQ PUSH2 0x187 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x1A0 PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x1AC PUSH2 0x27D6 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP3 GT PUSH2 0x327 JUMPI PUSH2 0x1C4 DUP3 PUSH2 0x2A5B JUMP JUMPDEST PUSH2 0x1CD DUP2 PUSH2 0x228E JUMP JUMPDEST PUSH2 0x1D6 DUP3 PUSH2 0x246F JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD PUSH2 0x1E3 DUP2 PUSH2 0x2063 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 SWAP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP6 AND SWAP6 DUP7 PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 MLOAD AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 PUSH9 0xFF0000000000000000 DUP5 SLOAD SWAP4 MLOAD ISZERO ISZERO PUSH1 0x40 SHL AND SWAP3 AND OR OR SWAP1 SSTORE PUSH32 0x0 AND SWAP2 PUSH2 0x27D DUP2 PUSH2 0x2B67 JUMP JUMPDEST DUP4 EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5E0B06F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP2 PUSH0 SWAP1 DUP4 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH32 0x97CFF4B6E6D80E307FAAB8B730D9F69264E860F2E0E10CFB8CDAF8A2F44E839E SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x309 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST PUSH2 0x312 SWAP1 PUSH2 0x20AC JUMP JUMPDEST PUSH0 PUSH2 0x2FF JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH32 0x7E6EB7FB00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x3AB PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0x3B3 PUSH2 0x2778 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8F4AB9CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0x24 DUP2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH0 SWAP1 PUSH0 SWAP3 PUSH2 0xACB JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND SWAP1 PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP1 PUSH0 SWAP3 DUP3 ISZERO ISZERO SWAP4 DUP5 PUSH2 0xAC1 JUMPI JUMPDEST DUP5 PUSH2 0xAB1 JUMPI JUMPDEST PUSH2 0x472 DUP8 PUSH2 0x2947 JUMP JUMPDEST SWAP5 SWAP1 PUSH0 JUMPDEST DUP7 DUP2 LT PUSH2 0x822 JUMPI DUP10 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND SWAP1 PUSH0 SWAP3 PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP3 PUSH0 DUP5 ISZERO ISZERO SWAP5 DUP6 PUSH2 0x818 JUMPI JUMPDEST DUP6 PUSH2 0x806 JUMPI JUMPDEST PUSH2 0x4C7 DUP5 PUSH2 0x2947 JUMP JUMPDEST SWAP7 SWAP1 PUSH0 JUMPDEST DUP9 DUP2 LT PUSH2 0x4D4 JUMPI STOP JUMPDEST PUSH2 0x4DE DUP2 DUP10 PUSH2 0x2213 JUMP JUMPDEST MLOAD PUSH2 0x4EC JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x4CB JUMP JUMPDEST SWAP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x4FF DUP12 DUP5 PUSH2 0x2213 JUMP JUMPDEST MLOAD AND SWAP1 PUSH2 0x50C DUP12 DUP11 PUSH2 0x2213 JUMP JUMPDEST MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x802 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xAE63932900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP4 PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD MSTORE DUP2 DUP2 PUSH1 0x64 DUP2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x7F7 JUMPI SWAP1 DUP3 SWAP2 PUSH2 0x7E0 JUMPI JUMPDEST POP PUSH2 0x7B3 JUMPI POP PUSH0 SWAP10 DUP2 PUSH2 0x5C8 DUP3 DUP12 PUSH2 0x2213 JUMP JUMPDEST MLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xE505E41B0D437B47350A9990142CCF38ACB11FFA0E5AF8F973B9E172F3D5D5E2 PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP3 LOG3 DUP4 ISZERO PUSH2 0x738 JUMPI PUSH2 0x60E DUP2 DUP11 PUSH2 0x2213 JUMP JUMPDEST MLOAD DUP7 ISZERO PUSH2 0x710 JUMPI PUSH2 0x61E SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH1 0x1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x65F DUP11 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP5 DUP13 DUP8 DUP4 ADD DIV ADD SWAP1 ISZERO ISZERO MUL PUSH2 0x24DE JUMP JUMPDEST SWAP3 DUP4 ADD DIV ADD SWAP1 ISZERO ISZERO MUL SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x693 DUP5 DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x69F DUP3 DUP12 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP1 DUP2 DUP5 DUP2 SUB GT PUSH2 0x6E3 JUMPI PUSH1 0x1 SWAP4 PUSH2 0x6D9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 SUB DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST SWAP1 POP PUSH2 0x4E4 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0xA0C22C700000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x1 SWAP2 DUP6 PUSH2 0x77D JUMPI PUSH2 0x74A DUP3 DUP12 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x776 PUSH1 0x40 PUSH0 KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x6DC JUMP JUMPDEST PUSH2 0x787 DUP3 DUP12 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x776 PUSH1 0x40 PUSH0 KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST DUP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x24 SWAP3 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH2 0x7E9 SWAP1 PUSH2 0x20AC JUMP JUMPDEST PUSH2 0x7F4 JUMPI DUP1 DUP13 PUSH2 0x5B5 JUMP JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST SWAP1 POP PUSH2 0x812 DUP2 DUP4 PUSH2 0x24F1 JUMP JUMPDEST SWAP1 PUSH2 0x4BE JUMP JUMPDEST DUP3 ISZERO ISZERO SWAP6 POP PUSH2 0x4B8 JUMP JUMPDEST PUSH2 0x82C DUP2 DUP8 PUSH2 0x2213 JUMP JUMPDEST MLOAD PUSH2 0x83A JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x476 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x84C DUP3 DUP5 PUSH2 0x2213 JUMP JUMPDEST MLOAD AND SWAP1 PUSH2 0x859 DUP2 DUP9 PUSH2 0x2213 JUMP JUMPDEST MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH32 0xAE63932900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP4 PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0x64 DUP2 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x318 JUMPI PUSH2 0xAA2 JUMPI JUMPDEST POP DUP2 DUP12 PUSH32 0xAE7EBAD9FC3D1D17965F063FA520D393595E2EF6C8E22AE8413B60900444E19F PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x937 DUP7 DUP14 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND SWAP3 LOG3 DUP9 ISZERO PUSH2 0xA27 JUMPI PUSH2 0x952 DUP2 DUP9 PUSH2 0x2213 JUMP JUMPDEST MLOAD DUP6 ISZERO PUSH2 0x710 JUMPI PUSH2 0x962 SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH1 0x1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x9A3 DUP10 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP5 DUP12 DUP8 DUP4 ADD DIV ADD SWAP1 ISZERO ISZERO MUL PUSH2 0x24DE JUMP JUMPDEST SWAP3 DUP4 ADD DIV ADD SWAP1 ISZERO ISZERO MUL SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x9D7 DUP5 DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x9E3 DUP3 DUP10 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP1 DUP2 DUP5 DUP2 SUB GT PUSH2 0x6E3 JUMPI PUSH1 0x1 SWAP4 PUSH2 0xA1D SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP16 AND PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 SUB DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST SWAP1 POP PUSH2 0x832 JUMP JUMPDEST PUSH1 0x1 SWAP2 DUP5 PUSH2 0xA6C JUMPI PUSH2 0xA39 DUP3 DUP10 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0xA65 PUSH1 0x40 PUSH0 KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xA20 JUMP JUMPDEST PUSH2 0xA76 DUP3 DUP10 PUSH2 0x2213 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0xA65 PUSH1 0x40 PUSH0 KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x24B4 JUMP JUMPDEST PUSH2 0xAAB SWAP1 PUSH2 0x20AC JUMP JUMPDEST DUP12 PUSH2 0x8FF JUMP JUMPDEST POP PUSH2 0xABC DUP4 DUP3 PUSH2 0x24F1 JUMP JUMPDEST PUSH2 0x469 JUMP JUMPDEST DUP2 ISZERO ISZERO SWAP5 POP PUSH2 0x463 JUMP JUMPDEST SWAP2 POP POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0xADD DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x40 DUP2 DUP4 SUB SLT PUSH2 0x323 JUMPI DUP1 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP2 GT PUSH2 0x323 JUMPI DUP2 PUSH2 0xB0A SWAP2 DUP5 ADD PUSH2 0x240E JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD MLOAD SWAP1 DUP2 GT PUSH2 0x323 JUMPI PUSH2 0xB21 SWAP3 ADD PUSH2 0x240E JUMP JUMPDEST SWAP1 DUP4 PUSH2 0x42A JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xB5B PUSH2 0xB44 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0xB4C PUSH2 0x1FF0 JUMP JUMPDEST SWAP1 PUSH2 0xB56 DUP2 PUSH2 0x2532 JUMP JUMPDEST PUSH2 0x26C1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xB76 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0xB7E PUSH2 0x1FF0 JUMP JUMPDEST SWAP1 PUSH2 0xB87 PUSH2 0x27D6 JUMP JUMPDEST PUSH2 0xB90 DUP2 PUSH2 0x2947 JUMP JUMPDEST SWAP2 PUSH0 JUMPDEST DUP4 DUP2 LT PUSH2 0xB9C JUMPI STOP JUMPDEST DUP1 PUSH2 0xBBD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xBB4 PUSH1 0x1 SWAP5 DUP8 PUSH2 0x2213 JUMP JUMPDEST MLOAD AND DUP8 DUP6 PUSH2 0x2AA3 JUMP JUMPDEST ADD PUSH2 0xB93 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xBE4 PUSH2 0x1FDA JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xC19 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0xC21 PUSH2 0x1FF0 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP4 AND DUP1 DUP5 SUB PUSH2 0x323 JUMPI PUSH1 0x40 SWAP1 PUSH2 0xC43 PUSH2 0x27D6 JUMP JUMPDEST PUSH1 0x44 DUP3 MLOAD DUP1 SWAP8 DUP2 SWAP4 PUSH32 0xC9C1661B00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP2 DUP8 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x318 JUMPI PUSH2 0xCB4 JUMPI JUMPDEST PUSH2 0xB5B SWAP4 POP PUSH2 0x2AA3 JUMP JUMPDEST PUSH1 0x40 DUP5 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0xCDF JUMPI JUMPDEST DUP2 PUSH2 0xCCD PUSH1 0x40 SWAP4 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x323 JUMPI PUSH2 0xB5B SWAP4 POP PUSH2 0xCAA JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xCC0 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xD00 PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xD0C PUSH2 0x27D6 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP3 GT PUSH2 0xE68 JUMPI PUSH2 0xD24 DUP3 PUSH2 0x2A5B JUMP JUMPDEST PUSH2 0xD2D DUP2 PUSH2 0x228E JUMP JUMPDEST PUSH2 0xD36 DUP3 PUSH2 0x246F JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD PUSH2 0xD43 DUP2 PUSH2 0x2063 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 SWAP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP6 AND SWAP6 DUP7 PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 MLOAD AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 PUSH9 0xFF0000000000000000 DUP5 SLOAD SWAP4 MLOAD ISZERO ISZERO PUSH1 0x40 SHL AND SWAP3 AND OR OR SWAP1 SSTORE PUSH32 0x0 AND SWAP2 PUSH2 0xDDD DUP2 PUSH2 0x2B35 JUMP JUMPDEST DUP4 EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE253670A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP2 PUSH0 SWAP1 DUP4 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH32 0xAF47449D1C3597CCC9F5EC3ACAD03CEF57AA90A719000441B320687087948EFD SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x309 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST PUSH32 0xA7849E8E00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH1 0x20 SWAP3 PUSH0 SWAP3 PUSH2 0xF14 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH2 0xF35 SWAP2 SWAP3 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0xF3C JUMPI JUMPDEST PUSH2 0xF2D DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x23EF JUMP JUMPDEST SWAP1 DUP4 PUSH2 0xF0A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xF23 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xF5F PUSH2 0x27D6 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 GT PUSH2 0xE68 JUMPI PUSH1 0x20 DUP2 PUSH2 0xF9B PUSH32 0x48C5C3CCEC54C4E0EA08D83D838FA9BB725EB0B52C591CB00BD6E63BCA8C44F6 SWAP4 PUSH2 0x2A5B JUMP JUMPDEST DUP1 PUSH1 0x1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xFC2 PUSH2 0x1FDA JUMP JUMPDEST SWAP1 PUSH2 0xFCC DUP3 PUSH2 0x2947 JUMP JUMPDEST SWAP1 PUSH2 0xFD6 DUP3 PUSH2 0x21C4 JUMP JUMPDEST SWAP3 PUSH0 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP6 JUMPDEST DUP5 DUP2 LT PUSH2 0xFFF JUMPI PUSH1 0x40 MLOAD DUP1 PUSH2 0xFFB DUP9 DUP3 PUSH2 0x2028 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 SWAP1 DUP8 PUSH0 MSTORE PUSH1 0x8 DUP5 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP4 PUSH2 0x1018 DUP4 DUP9 PUSH2 0x2213 JUMP JUMPDEST MLOAD AND PUSH0 MSTORE DUP5 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH2 0x102D DUP3 DUP10 PUSH2 0x2213 JUMP JUMPDEST MSTORE ADD PUSH2 0xFE6 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xB5B PUSH2 0x1050 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0x228E JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x106F PUSH2 0x1FDA JUMP JUMPDEST SWAP1 PUSH2 0x1079 DUP3 PUSH2 0x2947 JUMP JUMPDEST SWAP1 PUSH2 0x1083 DUP3 PUSH2 0x21C4 JUMP JUMPDEST SWAP3 PUSH0 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP6 JUMPDEST DUP5 DUP2 LT PUSH2 0x10A8 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH2 0xFFB DUP9 DUP3 PUSH2 0x2028 JUMP JUMPDEST PUSH1 0x1 SWAP1 DUP8 PUSH0 MSTORE PUSH1 0x7 DUP5 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP4 PUSH2 0x10C1 DUP4 DUP9 PUSH2 0x2213 JUMP JUMPDEST MLOAD AND PUSH0 MSTORE DUP5 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH2 0x10D6 DUP3 DUP10 PUSH2 0x2213 JUMP JUMPDEST MSTORE ADD PUSH2 0x1093 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x113C PUSH2 0x27D6 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 GT PUSH2 0x327 JUMPI PUSH1 0x20 DUP2 PUSH2 0x1178 PUSH32 0xBF5AC0FC89BBF8819BE79F280146B65EA2AF2A9705CD9CFE0C9D93F6E87F307D SWAP4 PUSH2 0x2A5B JUMP JUMPDEST DUP1 PUSH0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x4 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 SUB PUSH2 0x323 JUMPI PUSH2 0x11CC PUSH1 0x20 SWAP2 PUSH2 0x2147 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x11F5 PUSH2 0x1FDA JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1210 DUP3 PUSH2 0x2063 JUMP JUMPDEST SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP1 DUP4 MSTORE PUSH1 0xFF PUSH1 0x40 SWAP3 DUP4 SHR AND ISZERO ISZERO SWAP4 SWAP1 SWAP3 ADD DUP4 SWAP1 MSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x60 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x1274 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0x127C PUSH2 0x1FF0 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP2 DUP3 ISZERO ISZERO SWAP1 DUP2 DUP5 SUB PUSH2 0x323 JUMPI PUSH2 0x1294 PUSH2 0x2778 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND SWAP2 DUP3 PUSH0 MSTORE DUP3 PUSH1 0x20 SWAP3 PUSH1 0x4 DUP5 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE DUP7 PUSH0 EQ PUSH2 0x14E4 JUMPI DUP4 PUSH0 SWAP7 DUP8 SWAP3 JUMPDEST DUP10 ISZERO PUSH2 0x1469 JUMPI DUP5 DUP4 DUP8 DUP13 PUSH0 SWAP12 PUSH32 0xA34AD86562F9716C2F1E723934CC63F44A9B4695CB8535C30DD8308D03A78564 PUSH1 0x40 SWAP16 PUSH32 0xD9725C347996D9A5D6001B5F7C2A2515D365258012FCEFF4F49E84310ED07912 SWAP11 DUP16 SWAP7 PUSH2 0x1454 SWAP7 PUSH32 0xCE1D009285405B74CF77294916C17664DE2C84EEF81225C71F265F823B358BCB SWAP9 JUMPDEST PUSH2 0x1369 DUP5 PUSH2 0x246F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1376 DUP3 PUSH2 0x2063 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 SWAP2 AND DUP3 MSTORE PUSH1 0x3 PUSH2 0x13E6 DUP7 DUP5 ADD SWAP5 DUP7 DUP7 MSTORE DUP12 PUSH0 MSTORE PUSH1 0x2 DUP9 MSTORE PUSH1 0x40 DUP5 SWAP1 PUSH0 KECCAK256 SWAP6 MLOAD AND SWAP5 DUP1 SLOAD SWAP7 MLOAD ISZERO ISZERO PUSH1 0x40 SHL SWAP7 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 SWAP7 DUP8 PUSH9 0xFF0000000000000000 DUP1 SWAP11 AND SWAP3 AND OR OR SWAP1 SSTORE PUSH2 0x246F JUMP JUMPDEST SWAP6 PUSH1 0x40 DUP4 SWAP1 MLOAD SWAP8 PUSH2 0x13F6 DUP10 PUSH2 0x2063 JUMP JUMPDEST AND DUP8 MSTORE DUP1 DUP8 ADD SWAP6 DUP7 MSTORE DUP11 PUSH0 MSTORE MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP5 MLOAD AND SWAP2 DUP5 SLOAD SWAP4 MLOAD ISZERO ISZERO PUSH1 0x40 SHL AND SWAP3 AND OR OR SWAP1 SSTORE PUSH1 0x40 PUSH2 0x143A SWAP1 MLOAD SWAP3 DUP4 SWAP3 DUP4 SWAP1 SWAP3 SWAP2 PUSH1 0x20 SWAP1 PUSH1 0x40 DUP4 ADD SWAP5 DUP4 MSTORE ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG2 DUP14 MLOAD DUP13 DUP2 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x40 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG2 DUP10 MLOAD SWAP6 DUP7 MSTORE AND SWAP4 LOG3 DUP4 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD MSTORE RETURN JUMPDEST DUP5 DUP4 DUP8 DUP13 PUSH1 0x1 SLOAD SWAP12 PUSH32 0xA34AD86562F9716C2F1E723934CC63F44A9B4695CB8535C30DD8308D03A78564 PUSH1 0x40 SWAP16 PUSH32 0xD9725C347996D9A5D6001B5F7C2A2515D365258012FCEFF4F49E84310ED07912 SWAP11 DUP16 SWAP7 PUSH2 0x1454 SWAP7 PUSH32 0xCE1D009285405B74CF77294916C17664DE2C84EEF81225C71F265F823B358BCB SWAP9 PUSH2 0x1360 JUMP JUMPDEST DUP4 PUSH0 SLOAD SWAP7 DUP8 SWAP3 PUSH2 0x12E5 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x1509 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0x1512 DUP2 PUSH2 0x228E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x2 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1538 DUP4 PUSH2 0x2063 JUMP JUMPDEST SLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0xFF DUP3 DUP6 AND SWAP5 DUP6 DUP4 MSTORE PUSH1 0x40 SHR AND ISZERO SWAP1 DUP6 DUP3 ISZERO SWAP2 ADD MSTORE PUSH0 SLOAD SWAP4 DUP2 PUSH2 0x1688 JUMPI JUMPDEST POP PUSH2 0x1569 JUMPI STOP JUMPDEST PUSH2 0x1572 DUP4 PUSH2 0x246F JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1581 DUP5 PUSH2 0x2063 JUMP JUMPDEST AND DUP3 MSTORE DUP5 DUP3 ADD SWAP1 PUSH0 DUP3 MSTORE DUP8 PUSH0 MSTORE PUSH1 0x2 DUP7 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 MLOAD AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 PUSH9 0xFF0000000000000000 DUP5 SLOAD SWAP4 MLOAD ISZERO ISZERO PUSH1 0x40 SHL AND SWAP3 AND OR OR SWAP1 SSTORE PUSH32 0x0 AND SWAP3 PUSH2 0x1600 DUP2 PUSH2 0x2B67 JUMP JUMPDEST DUP5 EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5E0B06F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP3 PUSH0 SWAP1 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x318 JUMPI PUSH32 0x97CFF4B6E6D80E307FAAB8B730D9F69264E860F2E0E10CFB8CDAF8A2F44E839E SWAP4 PUSH2 0x309 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST SWAP1 POP DUP4 EQ ISZERO DUP8 PUSH2 0x1562 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x16AD PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0x16B6 DUP2 PUSH2 0x228E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x3 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x16DC DUP4 PUSH2 0x2063 JUMP JUMPDEST SLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0xFF DUP3 DUP6 AND SWAP5 DUP6 DUP4 MSTORE PUSH1 0x40 SHR AND ISZERO SWAP1 DUP6 DUP3 ISZERO SWAP2 ADD MSTORE PUSH1 0x1 SLOAD SWAP4 DUP2 PUSH2 0x182D JUMPI JUMPDEST POP PUSH2 0x170E JUMPI STOP JUMPDEST PUSH2 0x1717 DUP4 PUSH2 0x246F JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1726 DUP5 PUSH2 0x2063 JUMP JUMPDEST AND DUP3 MSTORE DUP5 DUP3 ADD SWAP1 PUSH0 DUP3 MSTORE DUP8 PUSH0 MSTORE PUSH1 0x3 DUP7 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 MLOAD AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 PUSH9 0xFF0000000000000000 DUP5 SLOAD SWAP4 MLOAD ISZERO ISZERO PUSH1 0x40 SHL AND SWAP3 AND OR OR SWAP1 SSTORE PUSH32 0x0 AND SWAP3 PUSH2 0x17A5 DUP2 PUSH2 0x2B35 JUMP JUMPDEST DUP5 EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE253670A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP3 PUSH0 SWAP1 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x318 JUMPI PUSH32 0xAF47449D1C3597CCC9F5EC3ACAD03CEF57AA90A719000441B320687087948EFD SWAP4 PUSH2 0x309 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST SWAP1 POP DUP4 EQ ISZERO DUP8 PUSH2 0x1707 JUMP JUMPDEST PUSH2 0x2006 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x185E PUSH2 0x1FDA JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1210 DUP3 PUSH2 0x2063 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0xB5B PUSH2 0x18B2 PUSH2 0x1FDA JUMP JUMPDEST PUSH2 0x18BB DUP2 PUSH2 0x25C7 JUMP JUMPDEST SWAP1 PUSH2 0x26C1 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x18DA PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x18E7 DUP2 PUSH2 0x2532 JUMP JUMPDEST PUSH8 0xDE0AD9B58F16000 DUP3 GT PUSH2 0x19D1 JUMPI PUSH2 0x18FF DUP2 PUSH2 0x228E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH32 0x0 AND SWAP2 PUSH2 0x1946 DUP2 PUSH2 0x2B35 JUMP JUMPDEST DUP4 EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE253670A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP2 PUSH0 SWAP1 DUP4 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH32 0x47F70DDBC624C299CEF7841AAEA0A86B677C800203E953104E958C9EC9BDAB34 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x309 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST PUSH32 0x370DA7400000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH8 0xDE0AD9B58F16000 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x1A34 PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x1A41 DUP2 PUSH2 0x2532 JUMP JUMPDEST PUSH8 0xDE0AD9B58F16000 DUP3 GT PUSH2 0x19D1 JUMPI PUSH2 0x1A59 DUP2 PUSH2 0x228E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH32 0x0 AND SWAP2 PUSH2 0x1AA0 DUP2 PUSH2 0x2B67 JUMP JUMPDEST DUP4 EXTCODESIZE ISZERO PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5E0B06F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP2 PUSH0 SWAP1 DUP4 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH32 0xB7CF36369623C01ED7B2EAFC4025224E924A2836D5FB49428A0F65417586BF5C SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x1B2B JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 STOP JUMPDEST PUSH2 0x1B34 SWAP1 PUSH2 0x20AC JUMP JUMPDEST DUP5 PUSH2 0x2FF JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x40 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH2 0x11CC PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x24F1 JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1B7C PUSH2 0x1FDA JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH2 0x1BAD PUSH2 0x1FDA JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 MLOAD PUSH32 0x85F2DBD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 DUP2 PUSH1 0x4 DUP2 DUP6 PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x318 JUMPI DUP3 SWAP2 PUSH0 SWAP2 PUSH2 0x1F6C JUMPI JUMPDEST POP AND SWAP3 ADDRESS DUP5 EQ PUSH2 0x1F44 JUMPI AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH2 0x1F18 JUMPI DUP2 PUSH0 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x5C15A0B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x40 DUP2 PUSH1 0x24 DUP2 DUP8 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI PUSH0 SWAP1 PUSH0 SWAP3 PUSH2 0x1EF4 JUMPI JUMPDEST POP PUSH2 0x1CB7 SWAP1 PUSH2 0x246F JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1CC5 DUP3 PUSH2 0x2063 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 SWAP4 AND DUP3 MSTORE DUP4 DUP3 ADD SWAP1 ISZERO ISZERO DUP2 MSTORE DUP5 PUSH0 MSTORE PUSH1 0x2 DUP5 MSTORE DUP3 PUSH1 0x40 PUSH0 KECCAK256 SWAP3 MLOAD AND SWAP2 DUP1 SLOAD SWAP2 MLOAD ISZERO ISZERO PUSH1 0x40 SHL SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 SWAP4 DUP5 PUSH9 0xFF0000000000000000 DUP1 SWAP6 AND SWAP3 AND OR OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 PUSH32 0x7A2B97DC00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP6 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x40 DUP4 PUSH1 0x24 DUP2 DUP11 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x318 JUMPI PUSH0 SWAP1 PUSH0 SWAP5 PUSH2 0x1EC0 JUMPI JUMPDEST POP PUSH2 0x1D7B SWAP1 PUSH2 0x246F JUMP JUMPDEST SWAP4 DUP1 PUSH1 0x40 MLOAD SWAP6 PUSH2 0x1D8A DUP8 PUSH2 0x2063 JUMP JUMPDEST AND DUP6 MSTORE DUP6 DUP6 ADD SWAP4 ISZERO ISZERO DUP5 MSTORE DUP7 PUSH0 MSTORE PUSH1 0x3 DUP7 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP5 MLOAD AND SWAP2 DUP5 SLOAD SWAP4 MLOAD ISZERO ISZERO PUSH1 0x40 SHL AND SWAP3 AND OR OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB8E059B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 PUSH1 0x4 DUP3 ADD MSTORE DUP2 DUP2 PUSH1 0x24 DUP2 DUP8 GAS STATICCALL PUSH0 SWAP2 DUP2 PUSH2 0x1E8E JUMPI JUMPDEST POP SWAP4 DUP3 SWAP2 PUSH1 0x24 SWAP6 PUSH2 0x1E7C JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP3 PUSH32 0x252AAB500000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP7 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL PUSH0 SWAP4 DUP2 PUSH2 0x1E4D JUMPI JUMPDEST POP PUSH2 0x1E3E JUMPI STOP JUMPDEST PUSH1 0x6 SWAP2 PUSH0 MSTORE MSTORE PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH0 DUP1 RETURN JUMPDEST SWAP1 SWAP4 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1E75 JUMPI JUMPDEST PUSH2 0x1E65 DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x323 JUMPI MLOAD SWAP3 DUP5 PUSH2 0x1E37 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1E5B JUMP JUMPDEST DUP5 PUSH0 MSTORE PUSH1 0x5 DUP4 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SSTORE DUP6 PUSH2 0x1DFC JUMP JUMPDEST SWAP2 POP SWAP4 DUP3 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1EB9 JUMPI JUMPDEST PUSH2 0x1EA6 DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x323 JUMPI SWAP1 MLOAD SWAP1 SWAP4 PUSH1 0x24 PUSH2 0x1DF0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1E9C JUMP JUMPDEST PUSH2 0x1D7B SWAP5 POP PUSH2 0x1EE7 SWAP2 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x1EED JUMPI JUMPDEST PUSH2 0x1EDF DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x212A JUMP JUMPDEST SWAP4 PUSH2 0x1D71 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1ED5 JUMP JUMPDEST PUSH2 0x1CB7 SWAP3 POP PUSH2 0x1F12 SWAP2 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x1EED JUMPI PUSH2 0x1EDF DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST SWAP2 PUSH2 0x1CAD JUMP JUMPDEST POP PUSH32 0xDB771C8000000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0xB82FD5BF00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP1 SWAP3 POP DUP5 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x1F9F JUMPI JUMPDEST PUSH2 0x1F85 DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x323 JUMPI MLOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x323 JUMPI DUP2 SWAP1 DUP6 PUSH2 0x1C15 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1F7B JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1FCA PUSH2 0x1FDA JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x6 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x323 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x323 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x323 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH8 0x6F05B59D3B20000 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x20 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH0 JUMPDEST DUP3 DUP2 LT PUSH2 0x204F JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x2041 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x207F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x207F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x207F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x207F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x323 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x323 JUMPI PUSH2 0x2144 PUSH1 0x20 DUP4 MLOAD SWAP4 ADD PUSH2 0x211D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x0 DUP5 MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x21A6 DUP2 PUSH2 0x20C0 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x207F JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x21CE DUP3 PUSH2 0x21AC JUMP JUMPDEST PUSH2 0x21DB PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x20DC JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0x2209 DUP3 SWAP5 PUSH2 0x21AC JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x2227 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x207F JUMPI PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 PUSH0 PUSH1 0x1F PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 MLOAD SWAP4 DUP4 PUSH1 0x44 PUSH1 0x20 SWAP7 DUP5 DUP9 DUP3 ADD SWAP5 PUSH32 0xFA399F2A00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x2300 DUP2 PUSH2 0x20C0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP7 DUP8 SWAP6 DUP7 SWAP4 PUSH32 0x48C8949100000000000000000000000000000000000000000000000000000000 DUP6 MSTORE DUP12 PUSH1 0x4 DUP7 ADD MSTORE MLOAD DUP1 SWAP2 DUP2 PUSH1 0x24 DUP8 ADD MSTORE DUP7 DUP7 ADD MCOPY DUP6 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND DUP2 ADD SUB ADD SWAP3 PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x318 JUMPI PUSH2 0x2380 JUMPI POP POP JUMP JUMPDEST RETURNDATASIZE DUP1 PUSH0 DUP5 RETURNDATACOPY PUSH2 0x238F DUP2 DUP5 PUSH2 0x20DC JUMP JUMPDEST DUP3 ADD SWAP2 DUP2 DUP2 DUP5 SUB SLT PUSH2 0x323 JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x323 JUMPI ADD SWAP2 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x323 JUMPI DUP3 MLOAD SWAP1 PUSH2 0x23C6 DUP3 PUSH2 0x2254 JUMP JUMPDEST SWAP1 PUSH2 0x23D4 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP3 DUP3 MSTORE DUP4 DUP4 DUP7 ADD ADD GT PUSH2 0x323 JUMPI DUP2 DUP4 PUSH0 SWAP6 ADD DUP5 DUP4 ADD MCOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x323 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x323 JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x323 JUMPI DUP2 MLOAD SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x2429 DUP2 PUSH2 0x21AC JUMP JUMPDEST SWAP4 PUSH2 0x2437 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x20DC JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x323 JUMPI PUSH1 0x20 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x2460 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x2452 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP2 DUP2 GT PUSH2 0x2484 JUMPI AND SWAP1 JUMP JUMPDEST PUSH32 0x6DFCC65000000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x40 PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x6E3 JUMPI JUMP JUMPDEST SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x6E3 JUMPI JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x6E3 JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x251E PUSH5 0x174876E800 SWAP3 DUP4 SWAP3 PUSH2 0x2517 PUSH8 0xDE0B6B3A7640000 SWAP2 DUP4 DUP4 SUB DUP4 DUP6 LT MUL PUSH2 0x24DE JUMP JUMPDEST DIV SWAP1 PUSH2 0x24B4 JUMP JUMPDEST DIV DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x6E3 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH2 0x2545 DUP3 PUSH2 0x25C7 JUMP JUMPDEST AND DUP1 ISZERO PUSH2 0x2586 JUMPI CALLER SUB PUSH2 0x2556 JUMPI POP POP JUMP JUMPDEST PUSH32 0xFBECDBF400000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE AND PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST POP PUSH32 0x8BCBF35300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x323 JUMPI JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xE9DDEB2600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x60 DUP2 PUSH1 0x24 DUP2 PUSH32 0x0 DUP8 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x26B7 JUMPI PUSH0 SWAP2 PUSH2 0x263E JUMPI JUMPDEST POP ADD MLOAD AND SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP2 RETURNDATASIZE PUSH1 0x60 GT PUSH2 0x26AF JUMPI JUMPDEST DUP2 PUSH2 0x2659 PUSH1 0x60 SWAP4 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x323 JUMPI DUP2 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x207F JUMPI PUSH2 0x26A5 SWAP2 DUP5 SWAP2 DUP3 MSTORE PUSH2 0x268C DUP2 PUSH2 0x25B3 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x269A PUSH1 0x20 DUP3 ADD PUSH2 0x25B3 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE ADD PUSH2 0x25B3 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH0 PUSH2 0x2637 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x264C JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x26CB DUP3 PUSH2 0x2947 JUMP JUMPDEST SWAP3 SWAP1 PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x26DD JUMPI POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x26F3 DUP4 DUP7 PUSH2 0x2213 JUMP JUMPDEST MLOAD AND DUP2 DUP7 AND DUP1 PUSH0 MSTORE PUSH1 0x8 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP5 DUP6 PUSH0 KECCAK256 DUP6 PUSH0 MSTORE DUP3 MSTORE DUP6 PUSH0 KECCAK256 SLOAD SWAP6 DUP7 PUSH2 0x2725 JUMPI JUMPDEST POP POP POP POP POP POP POP ADD PUSH2 0x26CF JUMP JUMPDEST PUSH32 0x938F3A3A03EE425CCC0F8010B0468938CBAFD3750FA43BBDF09C6F75E97E51F9 SWAP4 DUP6 PUSH0 MSTORE DUP4 MSTORE DUP1 PUSH0 KECCAK256 DUP7 PUSH0 MSTORE DUP4 MSTORE PUSH0 DUP2 DUP2 KECCAK256 SSTORE PUSH2 0x2764 DUP8 DUP14 DUP9 PUSH2 0x2B99 JUMP JUMPDEST MLOAD SWAP6 DUP7 MSTORE DUP11 AND SWAP5 LOG4 PUSH0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x2718 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER SUB PUSH2 0x27AA JUMPI JUMP JUMPDEST PUSH32 0x89676D500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x2802 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH0 CALLDATALOAD AND PUSH2 0x2147 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 MLOAD PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP3 PUSH1 0x4 DUP2 DUP7 PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x318 JUMPI DUP5 SWAP3 PUSH0 SWAP3 PUSH2 0x2925 JUMPI JUMPDEST POP PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0x9BE2A88400000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE CALLER PUSH1 0x24 DUP5 ADD MSTORE ADDRESS PUSH1 0x44 DUP5 ADD MSTORE AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x318 JUMPI PUSH0 SWAP3 PUSH2 0x28EF JUMPI JUMPDEST POP POP ISZERO PUSH2 0x28C7 JUMPI JUMP JUMPDEST PUSH32 0x23DADA5300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 DUP1 SWAP3 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x291E JUMPI JUMPDEST PUSH2 0x2906 DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x323 JUMPI PUSH2 0x2917 SWAP1 PUSH2 0x211D JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x28BE JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x28FC JUMP JUMPDEST PUSH1 0x64 SWAP2 SWAP3 POP PUSH2 0x2940 SWAP1 DUP5 RETURNDATASIZE DUP7 GT PUSH2 0xF3C JUMPI PUSH2 0xF2D DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x286D JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x40 MLOAD SWAP4 PUSH32 0xCA4F280300000000000000000000000000000000000000000000000000000000 DUP6 MSTORE AND PUSH1 0x4 DUP5 ADD MSTORE PUSH0 DUP4 PUSH1 0x24 DUP2 DUP5 PUSH32 0x0 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x318 JUMPI PUSH0 SWAP4 PUSH2 0x29BD JUMPI JUMPDEST POP POP DUP2 MLOAD SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x29D0 DUP2 DUP4 PUSH2 0x20DC JUMP JUMPDEST DUP2 ADD PUSH1 0x20 SWAP2 DUP3 DUP2 DUP4 SUB SLT PUSH2 0x323 JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x323 JUMPI ADD SWAP3 DUP2 PUSH1 0x1F DUP6 ADD SLT ISZERO PUSH2 0x323 JUMPI DUP4 MLOAD PUSH2 0x2A08 DUP2 PUSH2 0x21AC JUMP JUMPDEST SWAP5 PUSH2 0x2A16 PUSH1 0x40 MLOAD SWAP7 DUP8 PUSH2 0x20DC JUMP JUMPDEST DUP2 DUP7 MSTORE DUP5 DUP1 DUP8 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP4 DUP5 GT PUSH2 0x323 JUMPI DUP5 ADD SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x2A43 JUMPI POP POP POP POP POP SWAP1 PUSH0 DUP1 PUSH2 0x29B6 JUMP JUMPDEST DUP2 MLOAD DUP4 DUP2 AND DUP2 SUB PUSH2 0x323 JUMPI DUP2 MSTORE SWAP1 DUP5 ADD SWAP1 DUP5 ADD PUSH2 0x2A2F JUMP JUMPDEST PUSH5 0x174876E800 DUP1 DUP3 DIV DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x6E3 JUMPI SUB PUSH2 0x2A7B JUMPI JUMP JUMPDEST PUSH32 0x833FB3CE00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND SWAP1 DUP2 PUSH0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 DUP5 DUP2 AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP5 DUP6 PUSH2 0x2ADC JUMPI JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP3 PUSH2 0x2B21 DUP8 PUSH32 0x1C2887FCB98F75E66BB9A36311F2D3D22FB204E6362106F30E9DF7EAF63131B5 SWAP6 PUSH1 0x20 SWAP6 DUP9 PUSH0 MSTORE PUSH1 0x7 DUP8 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP11 PUSH0 MSTORE DUP8 MSTORE PUSH0 PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x2B99 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP7 DUP8 MSTORE AND SWAP5 LOG4 PUSH0 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x2AD4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x2144 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP1 PUSH2 0x24F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x2144 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP1 PUSH2 0x24F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP2 MSTORE SWAP3 PUSH2 0x2C2D SWAP3 PUSH0 SWAP3 DUP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BF6 PUSH1 0x64 DUP9 PUSH2 0x20DC JUMP JUMPDEST AND SWAP5 MLOAD SWAP1 DUP3 DUP7 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x2C91 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x2C0F DUP3 PUSH2 0x2254 JUMP JUMPDEST SWAP2 PUSH2 0x2C1D PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x20DC JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP4 PUSH2 0x2C99 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 ISZERO ISZERO SWAP2 DUP3 PUSH2 0x2C6E JUMPI JUMPDEST POP POP PUSH2 0x2C43 JUMPI POP JUMP JUMPDEST PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 SWAP3 POP SWAP1 PUSH1 0x20 SWAP2 DUP2 ADD SUB SLT PUSH2 0x323 JUMPI PUSH1 0x20 PUSH2 0x2C89 SWAP2 ADD PUSH2 0x211D JUMP JUMPDEST ISZERO PUSH0 DUP1 PUSH2 0x2C3A JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x2C27 JUMP JUMPDEST SWAP1 PUSH2 0x2CD6 JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x2CAE JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x2D1C JUMPI JUMPDEST PUSH2 0x2CE7 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE AND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x2CDF JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC PUSH17 0x2BF6C267F2611555B40F68B78BF4136814 GAS ADDMOD 0xEE 0xE0 GAS DUP13 JUMP 0x2E DUP3 0xCB PUSH10 0xE05564736F6C63430008 SHL STOP CALLER ","sourceMap":"3120:30799:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1424:26:20;3120:30799:19;1424:26:20;;;3120:30799:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;;;1525:73:13;;;:::i;:::-;4720:5:19;7248:55;;7244:127;;7402:20;;;:::i;:::-;8176:4;;;:::i;:::-;31750:39;;;:::i;:::-;3120:30799;;;;;;:::i;:::-;;;;;;;31707:129;;;3120:30799;26774:4;3120:30799;;-1:-1:-1;;;;;3120:30799:19;;;;;;;;31667:31;31707:129;3120:30799;;;;;;;;;;;;;;;;;;;;;;;;31931:6;3120:30799;31977:54;;;;:::i;:::-;31931:101;;;;;3120:30799;;;31931:101;;-1:-1:-1;;;;;3120:30799:19;;;;;31931:101;;3120:30799;;;;;;-1:-1:-1;;3120:30799:19;;;;;;-1:-1:-1;;31931:101:19;;;;;;;32048:68;31931:101;31707:129;31931:101;;;3120:30799;;;;;;;32048:68;3120:30799;31931:101;;;;:::i;:::-;3120:30799;31931:101;;;3120:30799;;;;;;;;;31931:101;3120:30799;;;7244:127;7326:34;3120:30799;7326:34;3120:30799;;7326:34;3120:30799;;;;;-1:-1:-1;;3120:30799:19;;;;;;;;-1:-1:-1;;;;;8671:6:19;3120:30799;;;;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;436:67:21;;:::i;:::-;3120:30799:19;;;9345:33;;-1:-1:-1;;;;;3120:30799:19;;;9345:33;;3120:30799;;9345:6;3120:30799;9345:6;;-1:-1:-1;;;;;9345:6:19;3120:30799;9345:33;;;;;;;3120:30799;;;9345:33;;;3120:30799;;-1:-1:-1;;;;;3120:30799:19;;;;;;;;;;;;;;11336:30;3120:30799;;;;;;11435:30;3120:30799;11499:28;;;;:57;;;;3120:30799;11566:199;;;3120:30799;11825:28;;;:::i;:::-;11868:13;;3120:30799;11883:13;;;;;;11091:20;;-1:-1:-1;;;;;3120:30799:19;;;;11192:32;3120:30799;;;;;;;;11290:134;3120:30799;;11387:31;3120:30799;;;;;;11435:30;3120:30799;11499:28;;;:57;;;;11863:1939;11566:199;;;11863:1939;11825:28;;;:::i;:::-;11868:13;;3120:30799;11883:13;;;;;;3120:30799;11898:3;11921:13;;;;:::i;:::-;3120:30799;11917:1875;;11898:3;3120:30799;;11868:13;;11917:1875;11973:13;-1:-1:-1;;;;;11973:13:19;;;;:::i;:::-;3120:30799;;12041:13;;;;;:::i;:::-;3120:30799;-1:-1:-1;;;;;9345:6:19;3120:30799;12005:50;;;;3120:30799;;12005:50;3120:30799;12005:50;;;3120:30799;12005:50;;3120:30799;12034:4;3120:30799;;;;;;;;9345:6;;3120:30799;9345:6;;-1:-1:-1;;;;;9345:6:19;3120:30799;12005:50;;;;;;;;;;;11917:1875;3120:30799;;;12230:240;3120:30799;12437:13;;;;;;:::i;:::-;3120:30799;;;;;;12398:53;3120:30799;-1:-1:-1;;;;;3120:30799:19;;12398:53;;12488:1290;;;;13094:13;;;;:::i;:::-;3120:30799;2004:6:14;;2000:58;;2153:5;;;:::i;:::-;3120:30799:19;465:4:14;1068:5;2560:120;;;;;;;;;;;;;;1068:5;:::i;:::-;1186:122;;;;;;;;;3120:30799:19;-1:-1:-1;;;;;3120:30799:19;;;;13254:19;3120:30799;;;;;;;;;;;;;13254:51;3120:30799;;;13254:51;:::i;:::-;3120:30799;;13366:13;;;;:::i;:::-;3120:30799;;;;;;;;;;;13327:70;3120:30799;-1:-1:-1;;;;;3120:30799:19;;;;13327:22;3120:30799;;;;;;;;;;;;;;;;;13327:70;:::i;:::-;3120:30799;;12488:1290;11917:1875;;;;3120:30799;;;;;;;;;;2000:58:14;2033:14;3120:30799:19;2033:14:14;3120:30799:19;;2033:14:14;12488:1290:19;3120:30799;;11499:28;;;13617:13;;;;:::i;:::-;3120:30799;;-1:-1:-1;;;;;3120:30799:19;;;;13581:19;3120:30799;;;;;;;;;;13581:49;3120:30799;;;;;;13581:49;:::i;:::-;3120:30799;;12488:1290;;13520:240;13724:13;;;;:::i;:::-;3120:30799;;-1:-1:-1;;;;;3120:30799:19;;;;13685:22;3120:30799;;;;;;;;;;13685:52;3120:30799;;;;;;13685:52;:::i;3120:30799::-;;;;;;;;;;12005:50;;;;:::i;:::-;3120:30799;;12005:50;;;;3120:30799;;;12005:50;3120:30799;;;;;;;;;12005:50;3120:30799;;;11566:199;11675:79;;;;;;:::i;:::-;11566:199;;;11499:57;11531:25;;;;-1:-1:-1;11499:57:19;;11898:3;11921:13;;;;:::i;:::-;3120:30799;11917:1875;;11898:3;3120:30799;;11868:13;;11917:1875;-1:-1:-1;;;;;11973:13:19;;;;:::i;:::-;3120:30799;;12041:13;;;;;:::i;:::-;3120:30799;-1:-1:-1;;;;;9345:6:19;3120:30799;12005:50;;;;3120:30799;;12005:50;3120:30799;12005:50;;;3120:30799;12005:50;;3120:30799;12034:4;3120:30799;;;;;;;;;9345:6;3120:30799;9345:6;;-1:-1:-1;;;;;9345:6:19;3120:30799;12005:50;;;;;;;;11917:1875;12332:13;;;12294:52;3120:30799;-1:-1:-1;;;;;12332:13:19;;;;:::i;:::-;3120:30799;;;;;;;;12294:52;;12488:1290;;;;13094:13;;;;:::i;:::-;3120:30799;2004:6:14;;2000:58;;2153:5;;;:::i;:::-;3120:30799:19;465:4:14;1068:5;2560:120;;;;;;;;;;;;;;1068:5;:::i;:::-;1186:122;;;;;;;;;3120:30799:19;-1:-1:-1;;;;;3120:30799:19;;;;13254:19;3120:30799;;;;;;;;;;;;;13254:51;3120:30799;;;13254:51;:::i;:::-;3120:30799;;13366:13;;;;:::i;:::-;3120:30799;;;;;;;;;;;13327:70;3120:30799;-1:-1:-1;;;;;3120:30799:19;;;;13327:22;3120:30799;;;;;;;;;;;;;;;;;13327:70;:::i;:::-;3120:30799;;12488:1290;11917:1875;;;;12488:1290;3120:30799;;11499:28;;;13617:13;;;;:::i;:::-;3120:30799;;-1:-1:-1;;;;;3120:30799:19;;;;13581:19;3120:30799;;;;;;;;;;13581:49;3120:30799;;;;;;13581:49;:::i;:::-;3120:30799;;12488:1290;;13520:240;13724:13;;;;:::i;:::-;3120:30799;;-1:-1:-1;;;;;3120:30799:19;;;;13685:22;3120:30799;;;;;;;;;;13685:52;3120:30799;;;;;;13685:52;:::i;12005:50::-;;;;:::i;:::-;;;;11566:199;11675:79;;;;;:::i;:::-;11566:199;;11499:57;11531:25;;;;-1:-1:-1;11499:57:19;;9345:33;;;;;;3120:30799;9345:33;;;;;;:::i;:::-;;;3120:30799;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;9345:33;;;;3120:30799;;;;;-1:-1:-1;;3120:30799:19;;;;;30298:9;3120:30799;;:::i;:::-;;;:::i;:::-;7088:4;;;;:::i;:::-;30298:9;:::i;:::-;3120:30799;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;;;:::i;:::-;1525:73:13;;;:::i;:::-;29131:28:19;;;:::i;:::-;29175:13;3120:30799;29190:13;;;;;;3120:30799;29205:3;29239:13;29306:5;-1:-1:-1;;;;;29239:13:19;3120:30799;29239:13;;;:::i;:::-;3120:30799;;29306:5;;;:::i;:::-;3120:30799;29175:13;;3120:30799;;;;;-1:-1:-1;;3120:30799:19;;;;;-1:-1:-1;;;;;3120:30799:19;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;;;:::i;:::-;;;;-1:-1:-1;;;;;3120:30799:19;;;;;;;;;;1525:73:13;;;:::i;:::-;3120:30799:19;;;29588:52;;;;3120:30799;29588:52;;3120:30799;;;;29588:52;;3120:30799;;;;;29588:6;3120:30799;29588:52;;;;;;;;3120:30799;29689:5;;;;:::i;29588:52::-;3120:30799;29588:52;;3120:30799;29588:52;;;;;;3120:30799;29588:52;;;:::i;:::-;;;3120:30799;;;;29689:5;;-1:-1:-1;29588:52:19;;;;;-1:-1:-1;29588:52:19;;3120:30799;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;;;1525:73:13;;;:::i;:::-;4720:5:19;7581:57;;7577:130;;7738:21;;;:::i;:::-;8176:4;;;:::i;:::-;32783:40;;;:::i;:::-;3120:30799;;;;;;:::i;:::-;;;;;;;32740:130;;;3120:30799;27118:4;3120:30799;;-1:-1:-1;;;;;3120:30799:19;;;;;;;;32699:32;32740:130;3120:30799;;;;;;;;;;;;;;;;;;;;;;;;32966:6;3120:30799;33013:55;;;;:::i;:::-;32966:103;;;;;3120:30799;;;32966:103;;-1:-1:-1;;;;;3120:30799:19;;;;;32966:103;;3120:30799;;;;;;-1:-1:-1;;3120:30799:19;;;;;;-1:-1:-1;;32966:103:19;;;;;;;33085:70;32966:103;32740:130;32966:103;;;3120:30799;;;;;;33085:70;3120:30799;7577:130;7661:35;3120:30799;7661:35;3120:30799;;7661:35;3120:30799;;;;;-1:-1:-1;;3120:30799:19;;;;;;;;1424:26:20;;-1:-1:-1;;;;;1424:26:20;3120:30799:19;;;968:6:18;3120:30799:19;;1424:26:20;;;;;;;;;3120:30799:19;1424:26:20;;;3120:30799:19;;;;;;;;;1424:26:20;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;3120:30799:19;;;;;-1:-1:-1;;3120:30799:19;;;;;;;1525:73:13;;:::i;:::-;4720:5:19;7581:57;;7577:130;;3120:30799;7738:21;;26371:70;7738:21;;:::i;:::-;3120:30799;;;;;;;;26371:70;3120:30799;;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;15924:28;;;;:::i;:::-;15976:24;;;;:::i;:::-;16015:13;3120:30799;;-1:-1:-1;;;;;3120:30799:19;;;16010:124;16030:13;;;;;;3120:30799;;;;;;;:::i;:::-;;;;16045:3;3120:30799;;;;;16080:22;3120:30799;;;;;16109:13;;;;;:::i;:::-;3120:30799;;;;;;;;;;16064:59;;;;:::i;:::-;3120:30799;;16015:13;;3120:30799;;;;;-1:-1:-1;;3120:30799:19;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;15502:28;;;;:::i;:::-;15554:24;;;;:::i;:::-;15593:13;3120:30799;;-1:-1:-1;;;;;3120:30799:19;;;15588:121;15608:13;;;;;;3120:30799;;;;;;;:::i;15623:3::-;3120:30799;;;;;15658:19;3120:30799;;;;;15684:13;;;;;:::i;:::-;3120:30799;;;;;;;;;;15642:56;;;;:::i;:::-;3120:30799;;15593:13;;3120:30799;;;;;-1:-1:-1;;3120:30799:19;;;;;;;;-1:-1:-1;;;;;968:6:18;3120:30799:19;;;;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;1525:73:13;;:::i;:::-;4720:5:19;7248:55;;7244:127;;3120:30799;7402:20;;25803:68;7402:20;;:::i;:::-;3120:30799;;;;;;;;25803:68;3120:30799;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;3120:30799:19;;;;;-1:-1:-1;;;;;3120:30799:19;;:::i;:::-;;;;14798:32;3120:30799;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;436:67:21;;:::i;:::-;-1:-1:-1;;;;;3120:30799:19;;;;;;;;;;;;;;;;23815:4;3120:30799;;;;;;;23948:56;;;;;;3120:30799;23948:56;;;;24044:57;;;;;;;;3120:30799;24044:57;25031:90;3120:30799;24044:57;25244:69;24044:57;;;25136:92;24044:57;25136:92;24044:57;;24632:37;;;:::i;:::-;3120:30799;;;;;;:::i;:::-;;;;;;;24733:32;24817:38;24589:134;;;3120:30799;;;;;;;24549:31;3120:30799;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24817:38;:::i;:::-;3120:30799;;;;;;;;;:::i;:::-;;;;24774:135;;;3120:30799;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25031:90;3120:30799;;25031:90;;;;3120:30799;;;;;;;;;;;;;;;;;25031:90;;;;3120:30799;;;;;;;;;;;;;;;;;;;;25136:92;;;;3120:30799;;;;;;25244:69;;3120:30799;;;;;;;;;24044:57;3120:30799;;;;23815:4;3120:30799;24044:57;25031:90;3120:30799;24044:57;25244:69;24044:57;;;25136:92;24044:57;25136:92;24044:57;;;23948:56;3120:30799;;;23948:56;;;;;3120:30799;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;8176:4;;;:::i;:::-;-1:-1:-1;;;;;3120:30799:19;;;;;;;;16627:31;3120:30799;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;16753:81;;;;3120:30799;16749:176;;;3120:30799;16749:176;31750:39;;;:::i;:::-;3120:30799;;;;;;;;:::i;:::-;;;;31707:129;;;3120:30799;;;;;;;16627:31;3120:30799;;;;;;;;;;;;;;;;;;;;;;;;;31931:6;3120:30799;31977:54;;;;:::i;:::-;31931:101;;;;;3120:30799;;;31931:101;;-1:-1:-1;;;;;3120:30799:19;;;;;31931:101;;3120:30799;;;;;;-1:-1:-1;;3120:30799:19;;;;;;-1:-1:-1;;31931:101:19;;;;;;;32048:68;31931:101;;;3120:30799;;;;;;32048:68;3120:30799;16753:81;16786:48;;;;;16753:81;;;3120:30799;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;8176:4;;;:::i;:::-;-1:-1:-1;;;;;3120:30799:19;;;;;;;;17109:32;3120:30799;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;17190:33;3120:30799;17238:82;;;;3120:30799;17234:179;;;3120:30799;17234:179;32783:40;;;:::i;:::-;3120:30799;;;;;;;;:::i;:::-;;;;32740:130;;;3120:30799;;;;;;;17109:32;3120:30799;;;;;;;;;;;;;;;;;;;;;;;;;32966:6;3120:30799;33013:55;;;;:::i;:::-;32966:103;;;;;3120:30799;;;32966:103;;-1:-1:-1;;;;;3120:30799:19;;;;;32966:103;;3120:30799;;;;;;-1:-1:-1;;3120:30799:19;;;;;;-1:-1:-1;;32966:103:19;;;;;;;33085:70;32966:103;;;3120:30799;;;;;;33085:70;3120:30799;17238:82;17271:49;;;;;17238:82;;;3120:30799;;:::i;:::-;;;;;-1:-1:-1;;3120:30799:19;;;;;-1:-1:-1;;;;;3120:30799:19;;:::i;:::-;;;;14517:31;3120:30799;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;3120:30799:19;;;;;;14136:33;3120:30799;;;;;;;;;;;;-1:-1:-1;;3120:30799:19;;;;;30461:21;3120:30799;;:::i;:::-;30461:21;;;:::i;:::-;;;:::i;3120:30799::-;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;;;7088:4;;;;:::i;:::-;4975:9;7868:56;;7864:127;;8176:4;;;:::i;:::-;-1:-1:-1;;;;;3120:30799:19;;;;;;;;28563:31;3120:30799;;;;;;;28729:6;3120:30799;28776:55;;;;:::i;:::-;28729:103;;;;;3120:30799;;;28729:103;;-1:-1:-1;;;;;3120:30799:19;;;;;28729:103;;3120:30799;;;;;;-1:-1:-1;;3120:30799:19;;;;;;-1:-1:-1;;28729:103:19;;;;;;;28852:68;28729:103;3120:30799;28729:103;;;3120:30799;;;;;;28852:68;3120:30799;7864:127;7947:33;3120:30799;7947:33;3120:30799;;7947:33;3120:30799;;;;;-1:-1:-1;;3120:30799:19;;;;;;;;4975:9;3120:30799;;;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;;;7088:4;;;;:::i;:::-;4975:9;7868:56;;7864:127;;8176:4;;;:::i;:::-;-1:-1:-1;;;;;3120:30799:19;;;;;;;;28180:30;3120:30799;;;;;;;28344:6;3120:30799;28390:54;;;;:::i;:::-;28344:101;;;;;3120:30799;;;28344:101;;-1:-1:-1;;;;;3120:30799:19;;;;;28344:101;;3120:30799;;;;;;-1:-1:-1;;3120:30799:19;;;;;;-1:-1:-1;;28344:101:19;;;;;;;28465:67;28344:101;3120:30799;28344:101;;;3120:30799;;;;;;28465:67;3120:30799;28344:101;;;;:::i;:::-;;;;3120:30799;;;;;-1:-1:-1;;3120:30799:19;;;;;;16364:79;3120:30799;;;;16364:79;:::i;3120:30799::-;;;;;-1:-1:-1;;3120:30799:19;;;;;-1:-1:-1;;;;;3120:30799:19;;:::i;:::-;;;;15055:30;3120:30799;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3120:30799:19;;;;;;;:::i;:::-;;-1:-1:-1;;;;;3120:30799:19;;;21277:33;;:6;;3120:30799;21277:6;;;3120:30799;21277:33;;;;;;;;3120:30799;21277:33;;;3120:30799;;;21362:4;;21325:42;;21321:104;;3120:30799;;;;;;;;;;;;;;21435:87;;3120:30799;;;;;;;;;21557:4;3120:30799;;;;;;;;;;21634:49;;;3120:30799;21634:49;;3120:30799;;21634:49;3120:30799;21634:49;;;;;;;;;3120:30799;;;21634:49;;;3120:30799;21776:36;;;;:::i;:::-;3120:30799;;;;;;;:::i;:::-;;;;;;;21733:133;;;3120:30799;;;;;;;;21693:31;3120:30799;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21941:72;3120:30799;21941:72;;;3120:30799;21941:72;;3120:30799;;21941:72;3120:30799;21941:72;;;;;;;;;3120:30799;;;21941:72;;;3120:30799;22107:37;;;;:::i;:::-;3120:30799;;;;;;;;:::i;:::-;;;;22064:135;;;3120:30799;;;;;;;;22023:32;3120:30799;;;;;;;;;;;;;;;;;;;;;;;;;;;22731:54;;;3120:30799;22731:54;;3120:30799;22731:54;;3120:30799;22731:54;;;;3120:30799;;22731:54;;;3120:30799;22727:277;;;;3120:30799;22727:277;;;3120:30799;;;;23018:55;;;;3120:30799;23018:55;;;3120:30799;23018:55;;3120:30799;23018:55;;3120:30799;;23018:55;;;3120:30799;23014:281;;;3120:30799;23014:281;23136:31;3120:30799;;;;;;;;;;;23018:55;;;;;;;;;;;;;;;;;:::i;:::-;;;3120:30799;;;;;23018:55;;;;;;;;;22727:277;3120:30799;;;22847:30;3120:30799;;;;;;22727:277;;;22731:54;;;;;;;;;;;;;;;;;:::i;:::-;;;3120:30799;;;;;;22731:54;;3120:30799;22731:54;;;;;;;21941:72;22107:37;21941:72;;;;;3120:30799;21941:72;3120:30799;21941:72;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;21634:49;21776:36;21634:49;;;;;3120:30799;21634:49;3120:30799;21634:49;;;;;;;:::i;:::-;;;;21435:87;21484:27;;3120:30799;21484:27;3120:30799;;;;21484:27;21321:104;21390:24;3120:30799;21390:24;3120:30799;;21390:24;21277:33;;;;;;;;;;;;;;;;;;:::i;:::-;;;3120:30799;;;;;;;;;;;;21277:33;;;;;;;;;;3120:30799;;;;;-1:-1:-1;;3120:30799:19;;;;;;;-1:-1:-1;;;;;3120:30799:19;;:::i;:::-;;;;15252:31;3120:30799;;;;;;;;;;;;;-1:-1:-1;;;;;3120:30799:19;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;3120:30799:19;;;;;;:::o;:::-;;;;;-1:-1:-1;;3120:30799:19;;;;;;;;4720:5;3120:30799;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;1931:430:13:-;3120:30799:19;;;2303:50:13;;;2320:22;;3120:30799:19;;;;;;;2303:50:13;;;;;;:::i;:::-;3120:30799:19;2293:61:13;;1931:430;:::o;3120:30799:19:-;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;8733:151::-;8808:68;8733:151;-1:-1:-1;3120:30799:19;-1:-1:-1;;;;;3120:30799:19;;8808:68;;3120:30799;8808:68;;;;;;;;;;3120:30799;8808:68;;;3120:30799;8808:68;;;;;;:::i;:::-;3120:30799;;8794:83;;;;;;;3120:30799;8794:83;;;8808:68;8794:83;;3120:30799;;;;;8808:68;3120:30799;;;;;;;;;;;;;;;;;;8794:83;;:6;;3120:30799;8794:83;;;;;;;;8733:151;;:::o;8794:83::-;;;-1:-1:-1;8794:83:19;;;;;;:::i;:::-;;;3120:30799;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;3120:30799:19;;;;;;;;;8733:151::o;3120:30799::-;;;;;;;;;;-1:-1:-1;;;;;3120:30799:19;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;13291:213:28;3120:30799:19;13369:24:28;;;;13365:103;;3120:30799:19;13291:213:28;:::o;13365:103::-;13416:41;;;13447:2;13416:41;3120:30799:19;;;;13416:41:28;;3120:30799:19;;;;;;;;;;:::o;19669:4:12:-;;465::14;19669::12;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;18132:1064:19:-;;18361:104;19669:4:12;5832:87:14;;;838:5;5832:87;;;;;;;;;838:5;:::i;:::-;19669:4:12;18361:104:19;;:::i;:::-;19669:4:12;;;;;;;;;;;;;;;18132:1064:19;:::o;19202:340::-;-1:-1:-1;;;;;19298:21:19;;;;;:::i;:::-;3120:30799;19334:25;;19330:93;;19452:10;19437:25;19433:103;;19202:340;;:::o;19433:103::-;19485:40;19357:1;19485:40;19452:10;19485:40;3120:30799;;;;;19357:1;19485:40;19330:93;19382:30;;19357:1;19382:30;3120:30799;19382:30;3120:30799;;19357:1;19382:30;3120:30799;;;-1:-1:-1;;;;;3120:30799:19;;;;;;:::o;19813:201::-;3120:30799;;;;19933:32;;-1:-1:-1;;;;;3120:30799:19;;;19933:32;;;3120:30799;19933:32;3120:30799;;;19933:6;3120:30799;;19933:32;;;;;;;-1:-1:-1;19933:32:19;;;19813:201;19983:24;;3120:30799;;19813:201;:::o;19933:32::-;;;;;;;;;;;;;;;;;:::i;:::-;;;3120:30799;;;;;;;19933:32;3120:30799;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;19933:32;;;;;;-1:-1:-1;19933:32:19;;;3120:30799;;;-1:-1:-1;3120:30799:19;;;;;30496:616;;30631:28;;;:::i;:::-;30675:13;;30687:1;30690:13;;;;;;30496:616;;;;;:::o;30705:3::-;3120:30799;;-1:-1:-1;;;;;30739:13:19;;;;;:::i;:::-;3120:30799;;;;;;30687:1;3120:30799;30794:22;3120:30799;;;;;;;30687:1;3120:30799;;30687:1;3120:30799;;;;30687:1;3120:30799;;30847:20;;30843:253;;30705:3;;;;;;;;3120:30799;30675:13;;30843:253;31015:66;3120:30799;;30687:1;3120:30799;;;;30687:1;3120:30799;;30687:1;3120:30799;;;30687:1;3120:30799;;;;30974:16;;;;;:::i;:::-;3120:30799;;;;;;31015:66;;30843:253;;;;;;;;;509:165:21;-1:-1:-1;;;;;586:6:21;3120:30799:19;564:10:21;:29;560:108;;509:165::o;560:108::-;616:41;;;564:10;616:41;3120:30799:19;;616:41:21;;1688:201:13;1762:20;1774:7;;;;1762:20;:::i;:::-;-1:-1:-1;;;;;3120:30799:19;;;1180:22:18;;;:6;;;:22;:6;;;3120:30799:19;1180:22:18;;;;;;;;;1774:7:13;1180:22:18;;;1688:201:13;3120:30799:19;;;;;1180:64:18;;;;;3120:30799:19;1180:64:18;;:22;:64;;3120:30799:19;1820:10:13;3120:30799:19;;;;1238:4:18;3120:30799:19;;;;;1180:64:18;;;;;;;1774:7:13;1180:64:18;;;1688:201:13;1797:34;;;1793:90;;1688:201::o;1793:90::-;1854:18;1774:7;1854:18;1180:22:18;1774:7:13;1854:18;1180:64:18;;;;;;;;;;;;;;;;:::i;:::-;;;3120:30799:19;;;;;;;:::i;:::-;1180:64:18;;;;;;;;;:22;3120:30799:19;1180:22:18;;;;;;;;;;;;;;;:::i;:::-;;;;;19548:199:19;;-1:-1:-1;;;;;3120:30799:19;;;19679:26;3120:30799;19679:26;;3120:30799;19679:26;;;3120:30799;19679:26;:6;3120:30799;19679:6;;;3120:30799;19679:26;;;;;;;;;;;19548:199;19670:35;;;3120:30799;19548:199;:::o;19679:26::-;;;;;;;;;;;;;;:::i;:::-;;;3120:30799;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;19679:26;;;;;;;;;;3120:30799;;;;;;;;;;;;;;;;;;;;33168:749;19669:4:12;;;;;;;;;;;;;;;;;;33769:74:19;33765:146;;33168:749::o;33765:146::-;33866:34;-1:-1:-1;33866:34:19;;-1:-1:-1;33866:34:19;29708:403;;;-1:-1:-1;;;;;3120:30799:19;;;;;-1:-1:-1;3120:30799:19;29832:19;3120:30799;;;-1:-1:-1;3120:30799:19;;;;;;;-1:-1:-1;3120:30799:19;;;;-1:-1:-1;3120:30799:19;;29878:20;;29874:231;;29708:403;;;;;;;:::o;29874:231::-;3120:30799;29994:16;3120:30799;30031:63;3120:30799;;;;-1:-1:-1;3120:30799:19;29832:19;3120:30799;;;-1:-1:-1;3120:30799:19;;-1:-1:-1;3120:30799:19;;;-1:-1:-1;3120:30799:19;;;;29994:16;:::i;:::-;3120:30799;;;;;;30031:63;;29874:231;;;;;;;;17425:701;-1:-1:-1;;;;;3120:30799:19;17624:399;3120:30799;17882:32;3120:30799;;18040:79;3120:30799;;17624:399;3120:30799;;;17975:31;3120:30799;;;17624:399;3120:30799;;18040:79;;:::i;17425:701::-;-1:-1:-1;;;;;3120:30799:19;-1:-1:-1;3120:30799:19;;;;18040:79;3120:30799;;-1:-1:-1;3120:30799:19;;;17791:30;3120:30799;;;-1:-1:-1;3120:30799:19;;18040:79;;:::i;1303:160:26:-;3120:30799:19;;;1412:43:26;;;;;;-1:-1:-1;;;;;3120:30799:19;;;1412:43:26;;;3120:30799:19;;;;;;;;;1412:43:26;;;3120:30799:19;3510:55:27;;-1:-1:-1;;;;1412:43:26;3120:30799:19;1412:43:26;3120:30799:19;;1412:43:26;:::i;:::-;3120:30799:19;3462:31:27;;;;;;;3120:30799:19;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;2847:1:27;1412:43:26;3120:30799:19;;;;3510:55:27;;:::i;:::-;3120:30799:19;;4551:22:26;;;;:57;;;;3120:30799:19;4547:135:26;;;;1303:160;:::o;4547:135::-;4631:40;2847:1:27;4631:40:26;;3120:30799:19;1412:43:26;2847:1:27;4631:40:26;4551:57;4578:30;;;;1412:43;4578:30;;;3120:30799:19;;;;1412:43:26;3120:30799:19;4578:30:26;;3120:30799:19;:::i;:::-;4577:31:26;4551:57;;;;3120:30799:19;;;;;4625:582:27;;4797:8;;-1:-1:-1;3120:30799:19;;5874:21:27;:17;;6046:142;;;;;;5870:383;6225:17;5894:1;6225:17;;5894:1;6225:17;4793:408;3120:30799:19;;5045:22:27;:49;;;4793:408;5041:119;;5173:17;;:::o;5041:119::-;-1:-1:-1;;;;;5121:24:27;;5066:1;5121:24;3120:30799:19;5121:24:27;3120:30799:19;;5066:1:27;5121:24;5045:49;5071:18;;;:23;5045:49;"},"methodIdentifiers":{"MAX_CREATOR_FEE_PERCENTAGE()":"2e1d388d","MAX_PROTOCOL_SWAP_FEE_PERCENTAGE()":"2772d156","MAX_PROTOCOL_YIELD_FEE_PERCENTAGE()":"5e32e4e8","collectAggregateFees(address)":"8f4ab9ca","collectAggregateFeesHook(address)":"fa399f2a","computeAggregateFeePercentage(uint256,uint256)":"0ddd60c6","getActionId(bytes4)":"851c1bb3","getAuthorizer()":"aaabadc5","getGlobalProtocolSwapFeePercentage()":"7869ee18","getGlobalProtocolYieldFeePercentage()":"55fb76af","getPoolCreatorFeeAmounts(address)":"9e95f3fd","getPoolCreatorSwapFeePercentage(address)":"0b8e059b","getPoolCreatorYieldFeePercentage(address)":"0252aab5","getPoolProtocolSwapFeeInfo(address)":"5c15a0b4","getPoolProtocolYieldFeeInfo(address)":"7a2b97dc","getProtocolFeeAmounts(address)":"8df44c54","getVault()":"8d928af8","isPoolRegistered(address)":"c673bdaf","migratePool(address)":"0874327f","registerPool(address,address,bool)":"77ff76e7","setGlobalProtocolSwapFeePercentage(uint256)":"8a3c5c69","setGlobalProtocolYieldFeePercentage(uint256)":"a93df2a4","setPoolCreatorSwapFeePercentage(address,uint256)":"1377c16c","setPoolCreatorYieldFeePercentage(address,uint256)":"3af52712","setProtocolSwapFeePercentage(address,uint256)":"fd267f39","setProtocolYieldFeePercentage(address,uint256)":"abaa3356","updateProtocolSwapFeePercentage(address)":"71ecc8fb","updateProtocolYieldFeePercentage(address)":"71447ea8","vault()":"fbfa77cf","withdrawPoolCreatorFees(address)":"52f125f0","withdrawPoolCreatorFees(address,address)":"f7061445","withdrawProtocolFees(address,address)":"cf7b287f","withdrawProtocolFeesForToken(address,address,address)":"b53a70b2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialGlobalSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialGlobalYieldFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"CallerIsNotPoolCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeePrecisionTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMigrationSource\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolCreatorFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreatorNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolSwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolYieldFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDivision\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"GlobalProtocolSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"GlobalProtocolYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProtocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"InitialPoolAggregateSwapFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProtocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"InitialPoolAggregateYieldFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolCreatorFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolCreatorSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"PoolCreatorSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolCreatorYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"PoolCreatorYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"PoolRegisteredWithFeeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolSwapFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ProtocolSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolYieldFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ProtocolYieldFeePercentageChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CREATOR_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROTOCOL_SWAP_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROTOCOL_YIELD_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFeesHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolCreatorFeePercentage\",\"type\":\"uint256\"}],\"name\":\"computeAggregateFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalProtocolSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalProtocolYieldFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCreatorFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCreatorSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCreatorYieldFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolProtocolSwapFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolProtocolYieldFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getProtocolFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"migratePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"protocolFeeExempt\",\"type\":\"bool\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setGlobalProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setGlobalProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolCreatorSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setPoolCreatorSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolCreatorYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setPoolCreatorYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"updateProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"updateProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"withdrawPoolCreatorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawPoolCreatorFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFeesForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract stores global default protocol swap and yield fees, and also tracks the values of those fees for each pool (the `PoolFeeConfig` described below). Protocol fees can always be overwritten by governance, but pool creator fees are controlled by the registered poolCreator (see `PoolRoleAccounts`). The Vault stores a single aggregate percentage for swap and yield fees; only this `ProtocolFeeController` knows the component fee percentages, and how to compute the aggregate from the components. This is done for performance reasons, to minimize gas on the critical path, as this way the Vault simply applies a single \\\"cut\\\", and stores the fee amounts separately from the pool balances. The pool creator fees are \\\"net\\\" protocol fees, meaning the protocol fee is taken first, and the pool creator fee percentage is applied to the remainder. Essentially, the protocol is paid first, then the remainder is divided between the pool creator and the LPs. There is a permissionless function (`collectAggregateFees`) that transfers these tokens from the Vault to this contract, and distributes them between the protocol and pool creator, after which they can be withdrawn at any time by governance and the pool creator, respectively. Protocol fees can be zero in some cases (e.g., the token is registered as exempt), and pool creator fees are zero if there is no creator role address defined. Protocol fees are capped at a maximum percentage (50%); pool creator fees are computed \\\"net\\\" protocol fees, so they can be any value from 0 to 100%. Any combination is possible. A protocol-fee-exempt pool with a 100% pool creator fee would send all fees to the creator. If there is no pool creator, a pool with a 50% protocol fee would divide the fees evenly between the protocol and LPs. This contract is deployed with the Vault, but can be changed by governance.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"CallerIsNotPoolCreator(address,address)\":[{\"params\":{\"caller\":\"The account attempting to withdraw pool creator fees\",\"pool\":\"The pool the caller tried to withdraw from\"}}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"FeePrecisionTooHigh()\":[{\"details\":\"Primary fee percentages are 18-decimal values, stored here in 64 bits, and calculated with full 256-bit precision. However, the resulting aggregate fees are stored in the Vault with 24-bit precision, which corresponds to 0.00001% resolution (i.e., a fee can be 1%, 1.00001%, 1.00002%, but not 1.000005%). Disallow setting fees such that there would be precision loss in the Vault, leading to a discrepancy between the aggregate fee calculated here and that stored in the Vault.\"}],\"PoolAlreadyRegistered(address)\":[{\"details\":\"This can happen if there is an error in the migration, or if governance somehow grants permission to `migratePool`, which should never happen.\",\"params\":{\"pool\":\"The pool\"}}],\"PoolCreatorNotRegistered(address)\":[{\"params\":{\"pool\":\"The pool with no creator\"}}],\"ProtocolSwapFeePercentageTooHigh()\":[{\"details\":\"Note that this is checked for both the global and pool-specific protocol swap fee percentages.\"}],\"ProtocolYieldFeePercentageTooHigh()\":[{\"details\":\"Note that this is checked for both the global and pool-specific protocol yield fee percentages.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"SenderIsNotVault(address)\":[{\"params\":{\"sender\":\"The account attempting to call a permissioned function\"}}]},\"events\":{\"GlobalProtocolSwapFeePercentageChanged(uint256)\":{\"params\":{\"swapFeePercentage\":\"The updated protocol swap fee percentage\"}},\"GlobalProtocolYieldFeePercentageChanged(uint256)\":{\"params\":{\"yieldFeePercentage\":\"The updated protocol yield fee percentage\"}},\"InitialPoolAggregateSwapFeePercentage(address,uint256,bool)\":{\"details\":\"If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will equal the current global swap fee percentage.\",\"params\":{\"aggregateSwapFeePercentage\":\"The initial aggregate swap fee percentage\",\"isProtocolFeeExempt\":\"True if the pool is exempt from taking protocol fees initially\",\"pool\":\"The pool being registered\"}},\"InitialPoolAggregateYieldFeePercentage(address,uint256,bool)\":{\"details\":\"If the pool is registered as protocol fee exempt, this will be zero (until changed). Otherwise, it will equal the current global yield fee percentage.\",\"params\":{\"aggregateYieldFeePercentage\":\"The initial aggregate yield fee percentage\",\"isProtocolFeeExempt\":\"True if the pool is exempt from taking protocol fees initially\",\"pool\":\"The pool being registered\"}},\"PoolCreatorFeesWithdrawn(address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the fee token that was withdrawn\",\"pool\":\"The pool from which pool creator fees are being withdrawn\",\"recipient\":\"The recipient of the funds (the pool creator if permissionless, or another account)\",\"token\":\"The token being withdrawn\"}},\"PoolCreatorSwapFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose pool creator swap fee will be changed\",\"poolCreatorSwapFeePercentage\":\"The new pool creator swap fee percentage for the pool\"}},\"PoolCreatorYieldFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose pool creator yield fee will be changed\",\"poolCreatorYieldFeePercentage\":\"The new pool creator yield fee percentage for the pool\"}},\"PoolRegisteredWithFeeController(address,address,bool)\":{\"details\":\"The `PoolRegistered` event includes the `roleAccounts` field, which also records the pool creator, but this simpler event is also provided for convenience. Though `InitialPoolAggregateSwapFeePercentage` and its yield fee counterpart also include the protocol fee exemption flag, we might as well include it here as well.\",\"params\":{\"pool\":\"The address of the pool being registered\",\"poolCreator\":\"The address of the pool creator (non-zero, or the event would not be emitted)\",\"protocolFeeExempt\":\"True if the pool is initially exempt from protocol fees\"}},\"ProtocolFeesWithdrawn(address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the fee token that was withdrawn\",\"pool\":\"The pool from which protocol fees are being withdrawn\",\"recipient\":\"The recipient of the funds\",\"token\":\"The token being withdrawn\"}},\"ProtocolSwapFeeCollected(address,address,uint256)\":{\"details\":\"Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs in the Vault, but fee collection happens in the ProtocolFeeController, the swap fees reported here may encompass multiple operations.\",\"params\":{\"amount\":\"The amount of the token collected in fees\",\"pool\":\"The pool on which the swap fee was charged\",\"token\":\"The token in which the swap fee was charged\"}},\"ProtocolSwapFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose protocol swap fee will be changed\",\"swapFeePercentage\":\"The updated protocol swap fee percentage\"}},\"ProtocolYieldFeeCollected(address,address,uint256)\":{\"details\":\"Note that since charging protocol fees (i.e., distributing tokens between pool and fee balances) occurs in the Vault, but fee collection happens in the ProtocolFeeController, the yield fees reported here may encompass multiple operations.\",\"params\":{\"amount\":\"The amount of the token collected in fees\",\"pool\":\"The pool on which the yield fee was charged\",\"token\":\"The token in which the yield fee was charged\"}},\"ProtocolYieldFeePercentageChanged(address,uint256)\":{\"params\":{\"pool\":\"The pool whose protocol yield fee will be changed\",\"yieldFeePercentage\":\"The updated protocol yield fee percentage\"}}},\"kind\":\"dev\",\"methods\":{\"collectAggregateFees(address)\":{\"params\":{\"pool\":\"The pool with aggregate fees\"}},\"collectAggregateFeesHook(address)\":{\"details\":\"Copy and zero out the `aggregateFeeAmounts` collected in the Vault accounting, supplying credit for each token. Then have the Vault transfer tokens to this contract, debiting each token for the amount transferred so that the transaction settles when the hook returns.\"},\"computeAggregateFeePercentage(uint256,uint256)\":{\"details\":\"Not tied to any particular pool; this just performs the low-level \\\"additive fee\\\" calculation. Note that pool creator fees are calculated based on creatorAndLpFees, and not in totalFees. Since aggregate fees are stored in the Vault with 24-bit precision, this will truncate any values that require greater precision. It is expected that pool creators will negotiate with the DAO and agree on reasonable values for these fee components, but the truncation ensures it will not revert for any valid set of fee percentages. See example below: tokenOutAmount = 10000; poolSwapFeePct = 10%; protocolFeePct = 40%; creatorFeePct = 60% totalFees = tokenOutAmount * poolSwapFeePct = 10000 * 10% = 1000 protocolFees = totalFees * protocolFeePct = 1000 * 40% = 400 creatorAndLpFees = totalFees - protocolFees = 1000 - 400 = 600 creatorFees = creatorAndLpFees * creatorFeePct = 600 * 60% = 360 lpFees (will stay in the pool) = creatorAndLpFees - creatorFees = 600 - 360 = 240\",\"params\":{\"poolCreatorFeePercentage\":\"The pool creator portion of the aggregate fee percentage\",\"protocolFeePercentage\":\"The protocol portion of the aggregate fee percentage\"},\"returns\":{\"_0\":\"The computed aggregate percentage\"}},\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"_0\":\"The computed actionId\"}},\"getAuthorizer()\":{\"returns\":{\"_0\":\"authorizer An interface pointer to the Authorizer\"}},\"getGlobalProtocolSwapFeePercentage()\":{\"returns\":{\"_0\":\"The global protocol swap fee percentage\"}},\"getGlobalProtocolYieldFeePercentage()\":{\"returns\":{\"_0\":\"The global protocol yield fee percentage\"}},\"getPoolCreatorFeeAmounts(address)\":{\"details\":\"Includes both swap and yield fees.\",\"params\":{\"pool\":\"The address of the pool on which fees were collected\"},\"returns\":{\"feeAmounts\":\"The total amounts of each token available for withdrawal, sorted in token registration order\"}},\"getPoolCreatorSwapFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"_0\":\"poolCreatorSwapFeePercentage The pool creator swap fee component of the aggregate swap fee\"}},\"getPoolCreatorYieldFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"_0\":\"poolCreatorSwapFeePercentage The pool creator yield fee component of the aggregate yield fee\"}},\"getPoolProtocolSwapFeeInfo(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"_0\":\"The protocol swap fee percentage for the given pool\",\"_1\":\"True if the protocol fee has been overridden\"}},\"getPoolProtocolYieldFeeInfo(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"_0\":\"The protocol yield fee percentage for the given pool\",\"_1\":\"True if the protocol fee has been overridden\"}},\"getProtocolFeeAmounts(address)\":{\"details\":\"Includes both swap and yield fees.\",\"params\":{\"pool\":\"The address of the pool on which fees were collected\"},\"returns\":{\"feeAmounts\":\"The total amounts of each token available for withdrawal, sorted in token registration order\"}},\"getVault()\":{\"returns\":{\"_0\":\"vault An interface pointer to the Vault\"}},\"isPoolRegistered(address)\":{\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"_0\":\"isRegistered True if the pool configuration has been set (e.g., through `registerPool`)\"}},\"migratePool(address)\":{\"details\":\"Permission should NEVER be granted to this function outside of a migration contract. It is necessary to permit migration of the `ProtocolFeeController` with all state (in particular, protocol fee overrides and pool creator fees) that cannot be written outside of the `registerPool` function called by the Vault during pool deployment. Even if governance were to grant permission to call this function, the `_registeredPools` latch keeps it safe, guaranteeing that it is impossible to use this function to change anything after registration. A pool can only be registered / configured once - either copied to a new controller in the migration context, or added normally through the Vault calling `registerPool`.\",\"params\":{\"pool\":\"The address of the pool to be migrated\"}},\"registerPool(address,address,bool)\":{\"details\":\"This must be called from the Vault during pool registration. It will initialize the pool to the global protocol fee percentage values (or 0, if the `protocolFeeExempt` flags is set), and return the initial aggregate fee percentages, based on an initial pool creator fee of 0.\",\"params\":{\"pool\":\"The address of the pool being registered\",\"poolCreator\":\"The address of the pool creator (or 0 if there won't be a pool creator fee)\",\"protocolFeeExempt\":\"If true, the pool is initially exempt from protocol fees\"},\"returns\":{\"aggregateSwapFeePercentage\":\"The initial aggregate swap fee percentage\",\"aggregateYieldFeePercentage\":\"The initial aggregate yield fee percentage\"}},\"setGlobalProtocolSwapFeePercentage(uint256)\":{\"params\":{\"newProtocolSwapFeePercentage\":\"The new protocol swap fee percentage\"}},\"setGlobalProtocolYieldFeePercentage(uint256)\":{\"params\":{\"newProtocolYieldFeePercentage\":\"The new protocol yield fee percentage\"}},\"setPoolCreatorSwapFeePercentage(address,uint256)\":{\"details\":\"Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to the \\\"net\\\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\",\"params\":{\"pool\":\"The address of the pool for which the pool creator fee will be changed\",\"poolCreatorSwapFeePercentage\":\"The new pool creator swap fee percentage to apply to the pool\"}},\"setPoolCreatorYieldFeePercentage(address,uint256)\":{\"details\":\"Fees are divided between the protocol, pool creator, and LPs. The pool creator percentage is applied to the \\\"net\\\" amount after protocol fees, and divides the remainder between the pool creator and LPs. If the pool creator fee is near 100%, almost none of the fee amount remains in the pool for LPs.\",\"params\":{\"pool\":\"The address of the pool for which the pool creator fee will be changed\",\"poolCreatorYieldFeePercentage\":\"The new pool creator yield fee percentage to apply to the pool\"}},\"setProtocolSwapFeePercentage(address,uint256)\":{\"params\":{\"newProtocolSwapFeePercentage\":\"The new protocol swap fee percentage for the pool\",\"pool\":\"The address of the pool for which we are setting the protocol swap fee\"}},\"setProtocolYieldFeePercentage(address,uint256)\":{\"params\":{\"newProtocolYieldFeePercentage\":\"The new protocol yield fee percentage for the pool\",\"pool\":\"The address of the pool for which we are setting the protocol yield fee\"}},\"updateProtocolSwapFeePercentage(address)\":{\"details\":\"This is a permissionless call, and will set the pool's fee to the current global fee, if it is different from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\",\"params\":{\"pool\":\"The pool for which we are setting the protocol swap fee\"}},\"updateProtocolYieldFeePercentage(address)\":{\"details\":\"This is a permissionless call, and will set the pool's fee to the current global fee, if it is different from the current value, and the fee is not controlled by governance (i.e., has never been overridden).\",\"params\":{\"pool\":\"The pool for which we are setting the protocol yield fee\"}},\"vault()\":{\"returns\":{\"_0\":\"vault The Vault address\"}},\"withdrawPoolCreatorFees(address)\":{\"details\":\"Sends swap and yield pool creator fees to the registered poolCreator. Since this is a known and immutable value, this function is permissionless.\",\"params\":{\"pool\":\"The pool on which fees were collected\"}},\"withdrawPoolCreatorFees(address,address)\":{\"details\":\"Sends swap and yield pool creator fees to the recipient.\",\"params\":{\"pool\":\"The pool on which fees were collected\",\"recipient\":\"Address to send the tokens\"}},\"withdrawProtocolFees(address,address)\":{\"details\":\"Sends swap and yield protocol fees to the recipient.\",\"params\":{\"pool\":\"The pool on which fees were collected\",\"recipient\":\"Address to send the tokens\"}},\"withdrawProtocolFeesForToken(address,address,address)\":{\"details\":\"Sends swap and yield protocol fees to the recipient.\",\"params\":{\"pool\":\"The pool on which fees were collected\",\"recipient\":\"Address to send the tokens\",\"token\":\"Token to withdraw\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"CallerIsNotPoolCreator(address,address)\":[{\"notice\":\"Error raised if the wrong account attempts to withdraw pool creator fees.\"}],\"FeePrecisionTooHigh()\":[{\"notice\":\"Primary fee percentages result in an aggregate fee that cannot be stored with the required precision.\"}],\"InvalidMigrationSource()\":[{\"notice\":\"Migration source cannot be this contract.\"}],\"PoolAlreadyRegistered(address)\":[{\"notice\":\"Prevent pool data from being registered more than once.\"}],\"PoolCreatorFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the pool creator swap or yield fee percentage exceeds the maximum allowed value.\"}],\"PoolCreatorNotRegistered(address)\":[{\"notice\":\"Error raised if there is no pool creator on a withdrawal attempt from the given pool.\"}],\"ProtocolSwapFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\"}],\"ProtocolYieldFeePercentageTooHigh()\":[{\"notice\":\"Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\"}],\"ReentrancyGuardReentrantCall()\":[{\"notice\":\"Unauthorized reentrant call.\"}],\"SenderIsNotVault(address)\":[{\"notice\":\"Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\"}],\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}],\"ZeroDivision()\":[{\"notice\":\"Attempted division by zero.\"}]},\"events\":{\"GlobalProtocolSwapFeePercentageChanged(uint256)\":{\"notice\":\"Emitted when the protocol swap fee percentage is updated.\"},\"GlobalProtocolYieldFeePercentageChanged(uint256)\":{\"notice\":\"Emitted when the protocol yield fee percentage is updated.\"},\"InitialPoolAggregateSwapFeePercentage(address,uint256,bool)\":{\"notice\":\"Emitted on pool registration with the initial aggregate swap fee percentage, for off-chain processes.\"},\"InitialPoolAggregateYieldFeePercentage(address,uint256,bool)\":{\"notice\":\"Emitted on pool registration with the initial aggregate yield fee percentage, for off-chain processes.\"},\"PoolCreatorFeesWithdrawn(address,address,address,uint256)\":{\"notice\":\"Logs the withdrawal of pool creator fees in a specific token and amount.\"},\"PoolCreatorSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the pool creator swap fee percentage of a pool is updated.\"},\"PoolCreatorYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the pool creator yield fee percentage of a pool is updated.\"},\"PoolRegisteredWithFeeController(address,address,bool)\":{\"notice\":\"Emitted as a convenience during pool registration, more focused than the Vault's `PoolRegistered` event.\"},\"ProtocolFeesWithdrawn(address,address,address,uint256)\":{\"notice\":\"Logs the withdrawal of protocol fees in a specific token and amount.\"},\"ProtocolSwapFeeCollected(address,address,uint256)\":{\"notice\":\"Logs the collection of protocol swap fees in a specific token and amount.\"},\"ProtocolSwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the protocol swap fee percentage is updated for a specific pool.\"},\"ProtocolYieldFeeCollected(address,address,uint256)\":{\"notice\":\"Logs the collection of protocol yield fees in a specific token and amount.\"},\"ProtocolYieldFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the protocol yield fee percentage is updated for a specific pool.\"}},\"kind\":\"user\",\"methods\":{\"collectAggregateFees(address)\":{\"notice\":\"Collects aggregate fees from the Vault for a given pool.\"},\"computeAggregateFeePercentage(uint256,uint256)\":{\"notice\":\"Returns a calculated aggregate percentage from protocol and pool creator fee percentages.\"},\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getAuthorizer()\":{\"notice\":\"Get the address of the Authorizer.\"},\"getGlobalProtocolSwapFeePercentage()\":{\"notice\":\"Getter for the current global protocol swap fee.\"},\"getGlobalProtocolYieldFeePercentage()\":{\"notice\":\"Getter for the current global protocol yield fee.\"},\"getPoolCreatorFeeAmounts(address)\":{\"notice\":\"Returns the amount of each pool token allocated to the pool creator for withdrawal.\"},\"getPoolCreatorSwapFeePercentage(address)\":{\"notice\":\"Getter for the current pool creator swap fee percentage for a given pool.\"},\"getPoolCreatorYieldFeePercentage(address)\":{\"notice\":\"Getter for the current pool creator yield fee percentage for a given pool.\"},\"getPoolProtocolSwapFeeInfo(address)\":{\"notice\":\"Getter for the current protocol swap fee for a given pool.\"},\"getPoolProtocolYieldFeeInfo(address)\":{\"notice\":\"Getter for the current protocol yield fee for a given pool.\"},\"getProtocolFeeAmounts(address)\":{\"notice\":\"Returns the amount of each pool token allocated to the protocol for withdrawal.\"},\"getVault()\":{\"notice\":\"Get the address of the Balancer Vault.\"},\"isPoolRegistered(address)\":{\"notice\":\"Getter for pool registration flag.\"},\"migratePool(address)\":{\"notice\":\"Not exposed in the interface, this enables migration of hidden pool state.\"},\"registerPool(address,address,bool)\":{\"notice\":\"Add pool-specific entries to the protocol swap and yield percentages.\"},\"setGlobalProtocolSwapFeePercentage(uint256)\":{\"notice\":\"Set the global protocol swap fee percentage, used by standard pools.\"},\"setGlobalProtocolYieldFeePercentage(uint256)\":{\"notice\":\"Set the global protocol yield fee percentage, used by standard pools.\"},\"setPoolCreatorSwapFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new pool creator swap fee percentage to the specified pool.\"},\"setPoolCreatorYieldFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new pool creator yield fee percentage to the specified pool.\"},\"setProtocolSwapFeePercentage(address,uint256)\":{\"notice\":\"Override the protocol swap fee percentage for a specific pool.\"},\"setProtocolYieldFeePercentage(address,uint256)\":{\"notice\":\"Override the protocol yield fee percentage for a specific pool.\"},\"updateProtocolSwapFeePercentage(address)\":{\"notice\":\"Override the protocol swap fee percentage for a specific pool.\"},\"updateProtocolYieldFeePercentage(address)\":{\"notice\":\"Override the protocol yield fee percentage for a specific pool.\"},\"vault()\":{\"notice\":\"Get the address of the main Vault contract.\"},\"withdrawPoolCreatorFees(address)\":{\"notice\":\"Withdraw collected pool creator fees for a given pool.\"},\"withdrawPoolCreatorFees(address,address)\":{\"notice\":\"Withdraw collected pool creator fees for a given pool. This is a permissioned function.\"},\"withdrawProtocolFees(address,address)\":{\"notice\":\"Withdraw collected protocol fees for a given pool (all tokens). This is a permissioned function.\"},\"withdrawProtocolFeesForToken(address,address,address)\":{\"notice\":\"Withdraw collected protocol fees for a given pool and a given token. This is a permissioned function.\"}},\"notice\":\"Helper contract to manage protocol and creator fees outside the Vault.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-vault/contracts/ProtocolFeeController.sol\":\"ProtocolFeeController\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\":{\"keccak256\":\"0x807237870f3aaa26cd815c5f600c1d0c60861a2f962fcc341d4b80942288ab52\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://90f108409488d0c38147d2ac7b9facd694dbf1001c501136a249091788c22232\",\"dweb:/ipfs/QmRCaCCGcuL4kxBEbrpq6FfENBJk4Zo8CNe8TRusatuYJ6\"]},\"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol\":{\"keccak256\":\"0x84bcae7004be7e91a88e76a3ac317490bc6845754a12cee88fcab76b1c5de37b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://15f903480fec5ae8042baf458e2246693b0b4a22687e65c2ed3afdf6993bff82\",\"dweb:/ipfs/QmcxsVeSbQ4qYnEZFoeFmiqaoV3rAx1oNhACCZCMZ1E6uf\"]},\"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol\":{\"keccak256\":\"0x70449e2b423b9850e39adddd7301205aa8b6e9e4ae788fd44d0968cac018eb2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce2174a3629b45dca032f9cf53df35dea240626913b8882a9e2da21610b02796\",\"dweb:/ipfs/Qmf8E4DePnZXjqb3V4A38gSobjgRK6VqavqPByuXvJxtBG\"]},\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol\":{\"keccak256\":\"0x0986ee17e49747c89956b4d46947b65b7c2942d5854fd39d764a7cb2735ff8af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://38fedef8f551d12a155f54ab1c863db60fed1226a397a321ac729e9db65f4593\",\"dweb:/ipfs/QmaxBFc45J79aehsbSoLzNWVfBhqxkkWnKpunmKrbzV1pL\"]},\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol\":{\"keccak256\":\"0xba524eab3f4f1b735008624cf11264842bec509e05ac025f93b8c843547fbfd3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c539df1afd342c47fdbd96fb28a183b7b30e055c4e435cdf77140ec92e68a42\",\"dweb:/ipfs/QmZ4akawS7TKrJkBeoi4bfyGWRmQgXshtkAMupuxkgH5Ur\"]},\"@balancer-labs/v3-vault/contracts/CommonAuthentication.sol\":{\"keccak256\":\"0x2b001b0e402cb94f135c49e40cec96138e3842db5b2b1f46b1bb8d34abe1eecb\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://5d4336b62b3919e0fbd5e0f3ff2f29e1056c07b4c62c742797003733404416e2\",\"dweb:/ipfs/QmbQqFz4DPBcEEaHAV5HbB5aAQkSw4JZtck1fJCJrmbpw2\"]},\"@balancer-labs/v3-vault/contracts/ProtocolFeeController.sol\":{\"keccak256\":\"0x4e6eceea41f31faa3f4228315c1d54c0d6f7befaaa1d158775e0b2a860c9de12\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6fc6d998ca7860d5c8f08a4fc045d5d1ebdcb4c777e934f6cd081d05252a024f\",\"dweb:/ipfs/QmbsPGHVrBdVfpcWkm3BNWPQXUZWbvPb6VGiEbf5ezvAmj\"]},\"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol\":{\"keccak256\":\"0x3a1f98316c5f245ff0fc29f496fdaa36c44baa3d72fd300bb506b9758245ee2c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://13b7c348e2dc88ef28dcfbe48c8bae0c938cac1f094f3ddca63aea062a457146\",\"dweb:/ipfs/QmPpFJUrsYaehBecfdHLNPcYeWZrcdbd8dBwLQWRtr3HUf\"]},\"@balancer-labs/v3-vault/contracts/VaultGuard.sol\":{\"keccak256\":\"0x678a36266505ecef51b514707c3050baaeb970644894f64eb0a442aa4ab013ec\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://d1514c0d27ad60f5f2d863f08258d67d937ec5e7b003d9c9f60526509d72bbef\",\"dweb:/ipfs/QmUVkCKFi1N8ZCzQ8VHD92eD1tzJciBowHmZ6fY8hEwNqF\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c\",\"dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj\"]}},\"version\":1}"}},"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol":{"SingletonAuthentication":{"abi":[{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3","getAuthorizer()":"aaabadc5","getVault()":"8d928af8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The disambiguator is the contract's own address. This is used in the construction of actionIds for permissioned functions, to avoid conflicts when multiple contracts (or multiple versions of the same contract) use the same function name.\",\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"_0\":\"The computed actionId\"}},\"getAuthorizer()\":{\"returns\":{\"_0\":\"authorizer An interface pointer to the Authorizer\"}},\"getVault()\":{\"returns\":{\"_0\":\"vault An interface pointer to the Vault\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}]},\"kind\":\"user\",\"methods\":{\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getAuthorizer()\":{\"notice\":\"Get the address of the Authorizer.\"},\"getVault()\":{\"notice\":\"Get the address of the Balancer Vault.\"}},\"notice\":\"Base contract suitable for Singleton contracts (e.g., pool factories) that have permissioned functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol\":\"SingletonAuthentication\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\":{\"keccak256\":\"0x807237870f3aaa26cd815c5f600c1d0c60861a2f962fcc341d4b80942288ab52\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://90f108409488d0c38147d2ac7b9facd694dbf1001c501136a249091788c22232\",\"dweb:/ipfs/QmRCaCCGcuL4kxBEbrpq6FfENBJk4Zo8CNe8TRusatuYJ6\"]},\"@balancer-labs/v3-vault/contracts/CommonAuthentication.sol\":{\"keccak256\":\"0x2b001b0e402cb94f135c49e40cec96138e3842db5b2b1f46b1bb8d34abe1eecb\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://5d4336b62b3919e0fbd5e0f3ff2f29e1056c07b4c62c742797003733404416e2\",\"dweb:/ipfs/QmbQqFz4DPBcEEaHAV5HbB5aAQkSw4JZtck1fJCJrmbpw2\"]},\"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol\":{\"keccak256\":\"0x3a1f98316c5f245ff0fc29f496fdaa36c44baa3d72fd300bb506b9758245ee2c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://13b7c348e2dc88ef28dcfbe48c8bae0c938cac1f094f3ddca63aea062a457146\",\"dweb:/ipfs/QmPpFJUrsYaehBecfdHLNPcYeWZrcdbd8dBwLQWRtr3HUf\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@balancer-labs/v3-vault/contracts/VaultGuard.sol":{"VaultGuard":{"abi":[{"inputs":[{"internalType":"contract IVault","name":"vault","type":"address"}],"stateMutability":"nonpayable","type":"constructor"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a034606057601f60b238819003918201601f19168301916001600160401b03831184841017606457808492602094604052833981010312606057516001600160a01b03811681036060576080526040516039908160798239608051815050f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe5f80fdfea26469706673582212205eb38cb825d4eb9173120381e173db99b9a726aee63c8bf1b9ab18ca0b07c5c964736f6c634300081b0033","opcodes":"PUSH1 0xA0 CALLVALUE PUSH1 0x60 JUMPI PUSH1 0x1F PUSH1 0xB2 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH1 0x64 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x20 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH1 0x60 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH1 0x60 JUMPI PUSH1 0x80 MSTORE PUSH1 0x40 MLOAD PUSH1 0x39 SWAP1 DUP2 PUSH1 0x79 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MCOPY 0xB3 DUP13 0xB8 0x25 0xD4 0xEB SWAP2 PUSH20 0x120381E173DB99B9A726AEE63C8BF1B9AB18CA0B SMOD 0xC5 0xC9 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"308:368:21:-:0;;;;;;;;;;;;;-1:-1:-1;;308:368:21;;;;-1:-1:-1;;;;;308:368:21;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;308:368:21;;;;;;409:14;;308:368;;;;;;;;409:14;308:368;;;;;;-1:-1:-1;308:368:21;;;;;;-1:-1:-1;308:368:21;;;;;-1:-1:-1;308:368:21"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea26469706673582212205eb38cb825d4eb9173120381e173db99b9a726aee63c8bf1b9ab18ca0b07c5c964736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MCOPY 0xB3 DUP13 0xB8 0x25 0xD4 0xEB SWAP2 PUSH20 0x120381E173DB99B9A726AEE63C8BF1B9AB18CA0B SMOD 0xC5 0xC9 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"308:368:21:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract that shares the modifier `onlyVault`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v3-vault/contracts/VaultGuard.sol\":\"VaultGuard\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@balancer-labs/v3-vault/contracts/VaultGuard.sol\":{\"keccak256\":\"0x678a36266505ecef51b514707c3050baaeb970644894f64eb0a442aa4ab013ec\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://d1514c0d27ad60f5f2d863f08258d67d937ec5e7b003d9c9f60526509d72bbef\",\"dweb:/ipfs/QmUVkCKFi1N8ZCzQ8VHD92eD1tzJciBowHmZ6fY8hEwNqF\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@openzeppelin/contracts/interfaces/IERC4626.sol":{"IERC4626":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asset","outputs":[{"internalType":"address","name":"assetTokenAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"convertToAssets","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"convertToShares","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"maxDeposit","outputs":[{"internalType":"uint256","name":"maxAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"maxMint","outputs":[{"internalType":"uint256","name":"maxShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxRedeem","outputs":[{"internalType":"uint256","name":"maxShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxWithdraw","outputs":[{"internalType":"uint256","name":"maxAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewDeposit","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewMint","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewRedeem","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewWithdraw","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"totalManagedAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","asset()":"38d52e0f","balanceOf(address)":"70a08231","convertToAssets(uint256)":"07a2d13a","convertToShares(uint256)":"c6e6f592","decimals()":"313ce567","deposit(uint256,address)":"6e553f65","maxDeposit(address)":"402d267d","maxMint(address)":"c63d75b6","maxRedeem(address)":"d905777e","maxWithdraw(address)":"ce96cb77","mint(uint256,address)":"94bf804d","name()":"06fdde03","previewDeposit(uint256)":"ef8b30f7","previewMint(uint256)":"b3d7f6b9","previewRedeem(uint256)":"4cdad506","previewWithdraw(uint256)":"0a28a477","redeem(uint256,address,address)":"ba087652","symbol()":"95d89b41","totalAssets()":"01e1d114","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","withdraw(uint256,address,address)":"b460af94"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"asset()\":{\"details\":\"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"deposit(uint256,address)\":{\"details\":\"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"maxDeposit(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert.\"},\"maxMint(address)\":{\"details\":\"Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert.\"},\"maxRedeem(address)\":{\"details\":\"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert.\"},\"maxWithdraw(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert.\"},\"mint(uint256,address)\":{\"details\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"redeem(uint256,address,address)\":{\"details\":\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalAssets()\":{\"details\":\"Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"withdraw(uint256,address,address)\":{\"details\":\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":\"IERC4626\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"currentAllowance","type":"uint256"},{"internalType":"uint256","name":"requestedDecrease","type":"uint256"}],"name":"SafeERC20FailedDecreaseAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212202d84903a7d88d39beea6e8c10e7299cd816b0bde2b5e6443ed9adc8d7885d05564736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D DUP5 SWAP1 GASPRICE PUSH30 0x88D39BEEA6E8C10E7299CD816B0BDE2B5E6443ED9ADC8D7885D05564736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"751:5018:26:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea26469706673582212202d84903a7d88d39beea6e8c10e7299cd816b0bde2b5e6443ed9adc8d7885d05564736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D DUP5 SWAP1 GASPRICE PUSH30 0x88D39BEEA6E8C10E7299CD816B0BDE2B5E6443ED9ADC8D7885D05564736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"751:5018:26:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212207308dc04867882e716a35b4e93fd57711740b1913fb9480b2ee92ca52acf78a664736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x8DC04867882E716A35B4E93FD57711740B1913F 0xB9 BASEFEE SIGNEXTEND 0x2E 0xE9 0x2C 0xA5 0x2A 0xCF PUSH25 0xA664736F6C634300081B003300000000000000000000000000 ","sourceMap":"195:6066:27:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea26469706673582212207308dc04867882e716a35b4e93fd57711740b1913fb9480b2ee92ca52acf78a664736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x8DC04867882E716A35B4E93FD57711740B1913F 0xB9 BASEFEE SIGNEXTEND 0x2E 0xE9 0x2C 0xA5 0x2A 0xCF PUSH25 0xA664736F6C634300081B003300000000000000000000000000 ","sourceMap":"195:6066:27:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"SafeCast":{"abi":[{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntDowncast","type":"error"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntToUint","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintToInt","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220c8c1339c0f0f32d1cd42e01b472992f3fdb072f8c07de7950d5d5c048b0f797464736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 0xC1 CALLER SWAP13 0xF 0xF ORIGIN 0xD1 0xCD TIMESTAMP 0xE0 SHL SELFBALANCE 0x29 SWAP3 RETURN REVERT 0xB0 PUSH19 0xF8C07DE7950D5D5C048B0F797464736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"764:33927:28:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"5f80fdfea2646970667358221220c8c1339c0f0f32d1cd42e01b472992f3fdb072f8c07de7950d5d5c048b0f797464736f6c634300081b0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 0xC1 CALLER SWAP13 0xF 0xF ORIGIN 0xD1 0xCD TIMESTAMP 0xE0 SHL SELFBALANCE 0x29 SWAP3 RETURN REVERT 0xB0 PUSH19 0xF8C07DE7950D5D5C048B0F797464736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"764:33927:28:-:0;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"errors\":{\"SafeCastOverflowedIntDowncast(uint8,int256)\":[{\"details\":\"Value doesn't fit in an int of `bits` size.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c\",\"dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj\"]}},\"version\":1}"}},"contracts/ProtocolFeeControllerMigration.sol":{"ProtocolFeeControllerMigration":{"abi":[{"inputs":[{"internalType":"contract IVault","name":"_vault","type":"address"},{"internalType":"contract IProtocolFeeController","name":"_newFeeController","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AlreadyMigrated","type":"error"},{"inputs":[],"name":"InvalidFeeController","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[],"name":"SenderNotAllowed","type":"error"},{"inputs":[],"name":"finalizeMigration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isMigrationComplete","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"pools","type":"address[]"}],"name":"migratePools","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"newFeeController","outputs":[{"internalType":"contract IProtocolFeeController","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oldFeeController","outputs":[{"internalType":"contract IProtocolFeeController","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"abi_decode_contract_IVault_fromMemory":{"entryPoint":671,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":616,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"6101206040818152346101bc5780826114eb80380380916100208285610268565b8339810103126101bc576100338261029f565b610040602080940161029f565b3060805260a0829052825163217cb6f560e21b81526001600160a01b03928381169290918681600481875afa90811561022657908592915f91610230575b5060c0521691845163fbfa77cf60e01b81528681600481875afa90811561022657829186915f916101ed575b5016148015906101e0575b6101d157600492869260e05260018060a01b03195f5416175f5584519283809263aaabadc560e01b82525afa9384156101c7575f9461018a575b5050610100921682525161123791826102b483396080518261118a015260a051828181610ad001528181610f610152610fea015260c05182818161054d015281816105c2015261108a015260e05182818160af0152610bf30152518181816103c10152818161042401528181610482015281816104c3015281816106d80152818161073b01528181610799015281816107db0152610c2e0152f35b9080929450813d83116101c0575b6101a28183610268565b810103126101bc575182811681036101bc57915f806100ef565b5f80fd5b503d610198565b83513d5f823e3d90fd5b63d6f1cb0560e01b5f5260045ffd5b508360c0511683146100b5565b925050508681813d831161021f575b6102068183610268565b810103126101bc5784610219839261029f565b5f6100aa565b503d6101fc565b86513d5f823e3d90fd5b809350888092503d8311610261575b6102498183610268565b810103126101bc5761025b859261029f565b5f61007e565b503d61023f565b601f909101601f19168101906001600160401b0382119082101761028b57604052565b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036101bc5756fe6080806040526004361015610012575f80fd5b5f905f358060e01c91826351da116d146110ae575081637ea3a9641461105e578163851c1bb31461100e5781638d928af814610fbe578163aaabadc514610f0e578163b78b608714610a4b57508063b8350e27146100fb578063d7128084146100d65763fbfa77cf14610083575f80fd5b346100d357806003193601126100d357602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b80fd5b50346100d357806003193601126100d35760ff6020915460a01c166040519015158152f35b50346100d35760206003193601126100d35767ffffffffffffffff60043581811161083c573660238201121561083c578060040135918211610a1e578160051b906040519261014d602084018561111e565b8352602460208401928201019036821161087357602401915b8183106109f1575050507f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005c6109c95760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d815460ff8160a01c166109a1578060ff849260a81c16156102ac575b50805b82518110156102855773ffffffffffffffffffffffffffffffffffffffff808354169060208360051b8601015116813b156102815783916024839260405194859384927f0874327f00000000000000000000000000000000000000000000000000000000845260048401525af190811561027657839161025e575b50506001016101d9565b610267906110dd565b61027257815f610254565b5080fd5b6040513d85823e3d90fd5b8380fd5b50807f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d80f35b8075010000000000000000000000000000000000000000007fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff9316178355166040517f851c1bb3000000000000000000000000000000000000000000000000000000008082527f8a3c5c69000000000000000000000000000000000000000000000000000000006004830152602082602481865afa918215610854578492610969575b5060209060246040518095819382527fa93df2a40000000000000000000000000000000000000000000000000000000060048301525afa918215610276578392610932575b5073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561083c576040517f2f2ff15d0000000000000000000000000000000000000000000000000000000080825260048201839052306024830152908481604481837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165af190811561088b57859161091e575b505073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561028157604051908152600481018390523060248201528381604481837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165af190811561085457849161090a575b50506040517f7869ee1800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156108545784916108d5575b50604051907f55fb76af00000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561088b57859261089a575b5073ffffffffffffffffffffffffffffffffffffffff85541690813b156108965785916024839260405194859384927f8a3c5c6900000000000000000000000000000000000000000000000000000000845260048401525af190811561088b578591610877575b505473ffffffffffffffffffffffffffffffffffffffff1690813b156108735784916024839260405194859384927fa93df2a400000000000000000000000000000000000000000000000000000000845260048401525af190811561085457849161085f575b505073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561083c576040517f36568abe0000000000000000000000000000000000000000000000000000000080825260048201929092523060248201528381604481837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165af1908115610854578491610840575b505073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561083c5760405190815260048101919091523060248201528181604481837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165af1801561083157156101d657610826906110dd565b61027257815f6101d6565b6040513d84823e3d90fd5b8280fd5b610849906110dd565b61083c57825f610780565b6040513d86823e3d90fd5b610868906110dd565b61083c57825f6106bf565b8480fd5b610880906110dd565b61028157835f610659565b6040513d87823e3d90fd5b8580fd5b945090506020843d6020116108cd575b816108b76020938361111e565b810103126108c957859351905f6105f2565b5f80fd5b3d91506108aa565b9350506020833d602011610902575b816108f16020938361111e565b810103126108c9578492515f61057d565b3d91506108e4565b610913906110dd565b61083c57825f610508565b610927906110dd565b61028157835f610469565b925090506020823d602011610961575b8161094f6020938361111e565b810103126108c957839151905f6103a9565b3d9150610942565b935090506020833d602011610999575b816109866020938361111e565b810103126108c957915184926020610364565b3d9150610979565b6004837fca1c3cbc000000000000000000000000000000000000000000000000000000008152fd5b6004827f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b823573ffffffffffffffffffffffffffffffffffffffff8116810361089657815260209283019201610166565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b9050346108c9575f6003193601126108c9577fffffffff00000000000000000000000000000000000000000000000000000000610a88911661115f565b9073ffffffffffffffffffffffffffffffffffffffff604051927faaabadc50000000000000000000000000000000000000000000000000000000084526020938481600481867f0000000000000000000000000000000000000000000000000000000000000000165afa8015610e1c57839286925f92610edc575b5060649060405194859384927f9be2a8840000000000000000000000000000000000000000000000000000000084526004840152336024840152306044840152165afa908115610e1c575f91610ea6575b5015610e7e575f5460ff8160a01c16610e56577fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000175f556040517f851c1bb30000000000000000000000000000000000000000000000000000000081527f2d7713890000000000000000000000000000000000000000000000000000000060048201819052937f000000000000000000000000000000000000000000000000000000000000000083168183602481845afa928315610e1c575f93610e27575b50837f00000000000000000000000000000000000000000000000000000000000000001693843b156108c9576040517f2f2ff15d000000000000000000000000000000000000000000000000000000008152600481018590523060248201525f81604481838a5af18015610e1c57610e09575b50958596865416823b15610e055760248792836040519586948593845260048401525af190811561088b578591610df1575b5050823b15610da7576040517f36568abe000000000000000000000000000000000000000000000000000000008082526004820193909352306024820152848160448183885af190811561088b578591610ddd575b50506040517fa217fddf0000000000000000000000000000000000000000000000000000000081528181600481875afa91821561088b578592610dac575b5050823b15610da75760405191825260048201523060248201529082908290604490829084905af1801561083157610d975750f35b610da0906110dd565b6100d35780f35b505050fd5b8195508092503d8311610dd6575b610dc4818361111e565b810103126108c9578392515f80610d62565b503d610dba565b610de6906110dd565b610da757835f610d24565b610dfa906110dd565b610da757835f610ccf565b8680fd5b610e149196506110dd565b5f945f610c9d565b6040513d5f823e3d90fd5b9092508181813d8311610e4f575b610e3f818361111e565b810103126108c95751915f610c2a565b503d610e35565b7fca1c3cbc000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f23dada53000000000000000000000000000000000000000000000000000000005f5260045ffd5b90508381813d8311610ed5575b610ebd818361111e565b810103126108c9575180151581036108c9575f610b54565b503d610eb3565b6064919250610f0090843d8611610f07575b610ef8818361111e565b8101906111d5565b9190610b03565b503d610eee565b346108c9575f6003193601126108c9576040517faaabadc500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa908115610e1c576020925f92610f9f575b5060405191168152f35b610fb7919250833d8511610f0757610ef8818361111e565b9083610f95565b346108c9575f6003193601126108c957602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346108c95760206003193601126108c9576004357fffffffff00000000000000000000000000000000000000000000000000000000811681036108c95761105660209161115f565b604051908152f35b346108c9575f6003193601126108c957602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346108c9575f6003193601126108c95760209073ffffffffffffffffffffffffffffffffffffffff5f54168152f35b67ffffffffffffffff81116110f157604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176110f157604052565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060208201927f00000000000000000000000000000000000000000000000000000000000000008452166040820152602481526060810181811067ffffffffffffffff8211176110f15760405251902090565b908160209103126108c9575173ffffffffffffffffffffffffffffffffffffffff811681036108c9579056fea2646970667358221220125bce215259ea60cf119045f492046669f9f38f7080a1ace3863c2eb3a863b464736f6c634300081b0033","opcodes":"PUSH2 0x120 PUSH1 0x40 DUP2 DUP2 MSTORE CALLVALUE PUSH2 0x1BC JUMPI DUP1 DUP3 PUSH2 0x14EB DUP1 CODESIZE SUB DUP1 SWAP2 PUSH2 0x20 DUP3 DUP6 PUSH2 0x268 JUMP JUMPDEST DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x1BC JUMPI PUSH2 0x33 DUP3 PUSH2 0x29F JUMP JUMPDEST PUSH2 0x40 PUSH1 0x20 DUP1 SWAP5 ADD PUSH2 0x29F JUMP JUMPDEST ADDRESS PUSH1 0x80 MSTORE PUSH1 0xA0 DUP3 SWAP1 MSTORE DUP3 MLOAD PUSH4 0x217CB6F5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP2 AND SWAP3 SWAP1 SWAP2 DUP7 DUP2 PUSH1 0x4 DUP2 DUP8 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x226 JUMPI SWAP1 DUP6 SWAP3 SWAP2 PUSH0 SWAP2 PUSH2 0x230 JUMPI JUMPDEST POP PUSH1 0xC0 MSTORE AND SWAP2 DUP5 MLOAD PUSH4 0xFBFA77CF PUSH1 0xE0 SHL DUP2 MSTORE DUP7 DUP2 PUSH1 0x4 DUP2 DUP8 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x226 JUMPI DUP3 SWAP2 DUP7 SWAP2 PUSH0 SWAP2 PUSH2 0x1ED JUMPI JUMPDEST POP AND EQ DUP1 ISZERO SWAP1 PUSH2 0x1E0 JUMPI JUMPDEST PUSH2 0x1D1 JUMPI PUSH1 0x4 SWAP3 DUP7 SWAP3 PUSH1 0xE0 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT PUSH0 SLOAD AND OR PUSH0 SSTORE DUP5 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0xAAABADC5 PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x1C7 JUMPI PUSH0 SWAP5 PUSH2 0x18A JUMPI JUMPDEST POP POP PUSH2 0x100 SWAP3 AND DUP3 MSTORE MLOAD PUSH2 0x1237 SWAP2 DUP3 PUSH2 0x2B4 DUP4 CODECOPY PUSH1 0x80 MLOAD DUP3 PUSH2 0x118A ADD MSTORE PUSH1 0xA0 MLOAD DUP3 DUP2 DUP2 PUSH2 0xAD0 ADD MSTORE DUP2 DUP2 PUSH2 0xF61 ADD MSTORE PUSH2 0xFEA ADD MSTORE PUSH1 0xC0 MLOAD DUP3 DUP2 DUP2 PUSH2 0x54D ADD MSTORE DUP2 DUP2 PUSH2 0x5C2 ADD MSTORE PUSH2 0x108A ADD MSTORE PUSH1 0xE0 MLOAD DUP3 DUP2 DUP2 PUSH1 0xAF ADD MSTORE PUSH2 0xBF3 ADD MSTORE MLOAD DUP2 DUP2 DUP2 PUSH2 0x3C1 ADD MSTORE DUP2 DUP2 PUSH2 0x424 ADD MSTORE DUP2 DUP2 PUSH2 0x482 ADD MSTORE DUP2 DUP2 PUSH2 0x4C3 ADD MSTORE DUP2 DUP2 PUSH2 0x6D8 ADD MSTORE DUP2 DUP2 PUSH2 0x73B ADD MSTORE DUP2 DUP2 PUSH2 0x799 ADD MSTORE DUP2 DUP2 PUSH2 0x7DB ADD MSTORE PUSH2 0xC2E ADD MSTORE RETURN JUMPDEST SWAP1 DUP1 SWAP3 SWAP5 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1C0 JUMPI JUMPDEST PUSH2 0x1A2 DUP2 DUP4 PUSH2 0x268 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1BC JUMPI MLOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0x1BC JUMPI SWAP2 PUSH0 DUP1 PUSH2 0xEF JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x198 JUMP JUMPDEST DUP4 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0xD6F1CB05 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST POP DUP4 PUSH1 0xC0 MLOAD AND DUP4 EQ PUSH2 0xB5 JUMP JUMPDEST SWAP3 POP POP POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x21F JUMPI JUMPDEST PUSH2 0x206 DUP2 DUP4 PUSH2 0x268 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1BC JUMPI DUP5 PUSH2 0x219 DUP4 SWAP3 PUSH2 0x29F JUMP JUMPDEST PUSH0 PUSH2 0xAA JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1FC JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP1 SWAP4 POP DUP9 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x261 JUMPI JUMPDEST PUSH2 0x249 DUP2 DUP4 PUSH2 0x268 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1BC JUMPI PUSH2 0x25B DUP6 SWAP3 PUSH2 0x29F JUMP JUMPDEST PUSH0 PUSH2 0x7E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x23F JUMP JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH2 0x28B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1BC JUMPI JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP1 PUSH0 CALLDATALOAD DUP1 PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x51DA116D EQ PUSH2 0x10AE JUMPI POP DUP2 PUSH4 0x7EA3A964 EQ PUSH2 0x105E JUMPI DUP2 PUSH4 0x851C1BB3 EQ PUSH2 0x100E JUMPI DUP2 PUSH4 0x8D928AF8 EQ PUSH2 0xFBE JUMPI DUP2 PUSH4 0xAAABADC5 EQ PUSH2 0xF0E JUMPI DUP2 PUSH4 0xB78B6087 EQ PUSH2 0xA4B JUMPI POP DUP1 PUSH4 0xB8350E27 EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0xD7128084 EQ PUSH2 0xD6 JUMPI PUSH4 0xFBFA77CF EQ PUSH2 0x83 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xD3 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD3 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xD3 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD3 JUMPI PUSH1 0xFF PUSH1 0x20 SWAP2 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xD3 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD3 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x83C JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x83C JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0xA1E JUMPI DUP2 PUSH1 0x5 SHL SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x14D PUSH1 0x20 DUP5 ADD DUP6 PUSH2 0x111E JUMP JUMPDEST DUP4 MSTORE PUSH1 0x24 PUSH1 0x20 DUP5 ADD SWAP3 DUP3 ADD ADD SWAP1 CALLDATASIZE DUP3 GT PUSH2 0x873 JUMPI PUSH1 0x24 ADD SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x9F1 JUMPI POP POP POP PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 TLOAD PUSH2 0x9C9 JUMPI PUSH1 0x1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 TSTORE DUP2 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH2 0x9A1 JUMPI DUP1 PUSH1 0xFF DUP5 SWAP3 PUSH1 0xA8 SHR AND ISZERO PUSH2 0x2AC JUMPI JUMPDEST POP DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x285 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 SLOAD AND SWAP1 PUSH1 0x20 DUP4 PUSH1 0x5 SHL DUP7 ADD ADD MLOAD AND DUP2 EXTCODESIZE ISZERO PUSH2 0x281 JUMPI DUP4 SWAP2 PUSH1 0x24 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0x874327F00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x276 JUMPI DUP4 SWAP2 PUSH2 0x25E JUMPI JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x1D9 JUMP JUMPDEST PUSH2 0x267 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x272 JUMPI DUP2 PUSH0 PUSH2 0x254 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP DUP1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 TSTORE DUP1 RETURN JUMPDEST DUP1 PUSH22 0x1000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 AND OR DUP4 SSTORE AND PUSH1 0x40 MLOAD PUSH32 0x851C1BB300000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH32 0x8A3C5C6900000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH1 0x24 DUP2 DUP7 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x854 JUMPI DUP5 SWAP3 PUSH2 0x969 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP6 DUP2 SWAP4 DUP3 MSTORE PUSH32 0xA93DF2A400000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x276 JUMPI DUP4 SWAP3 PUSH2 0x932 JUMPI JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x83C JUMPI PUSH1 0x40 MLOAD PUSH32 0x2F2FF15D00000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP4 SWAP1 MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE SWAP1 DUP5 DUP2 PUSH1 0x44 DUP2 DUP4 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x88B JUMPI DUP6 SWAP2 PUSH2 0x91E JUMPI JUMPDEST POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x281 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP4 DUP2 PUSH1 0x44 DUP2 DUP4 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x854 JUMPI DUP5 SWAP2 PUSH2 0x90A JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x7869EE1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x854 JUMPI DUP5 SWAP2 PUSH2 0x8D5 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 PUSH32 0x55FB76AF00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x88B JUMPI DUP6 SWAP3 PUSH2 0x89A JUMPI JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 SLOAD AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x896 JUMPI DUP6 SWAP2 PUSH1 0x24 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0x8A3C5C6900000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x88B JUMPI DUP6 SWAP2 PUSH2 0x877 JUMPI JUMPDEST POP SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x873 JUMPI DUP5 SWAP2 PUSH1 0x24 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0xA93DF2A400000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x854 JUMPI DUP5 SWAP2 PUSH2 0x85F JUMPI JUMPDEST POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x83C JUMPI PUSH1 0x40 MLOAD PUSH32 0x36568ABE00000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH1 0x4 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP4 DUP2 PUSH1 0x44 DUP2 DUP4 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x854 JUMPI DUP5 SWAP2 PUSH2 0x840 JUMPI JUMPDEST POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x83C JUMPI PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP2 DUP2 PUSH1 0x44 DUP2 DUP4 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GAS CALL DUP1 ISZERO PUSH2 0x831 JUMPI ISZERO PUSH2 0x1D6 JUMPI PUSH2 0x826 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x272 JUMPI DUP2 PUSH0 PUSH2 0x1D6 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH2 0x849 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x83C JUMPI DUP3 PUSH0 PUSH2 0x780 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x868 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x83C JUMPI DUP3 PUSH0 PUSH2 0x6BF JUMP JUMPDEST DUP5 DUP1 REVERT JUMPDEST PUSH2 0x880 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x281 JUMPI DUP4 PUSH0 PUSH2 0x659 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST SWAP5 POP SWAP1 POP PUSH1 0x20 DUP5 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x8CD JUMPI JUMPDEST DUP2 PUSH2 0x8B7 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI DUP6 SWAP4 MLOAD SWAP1 PUSH0 PUSH2 0x5F2 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x8AA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP4 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x902 JUMPI JUMPDEST DUP2 PUSH2 0x8F1 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI DUP5 SWAP3 MLOAD PUSH0 PUSH2 0x57D JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x8E4 JUMP JUMPDEST PUSH2 0x913 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x83C JUMPI DUP3 PUSH0 PUSH2 0x508 JUMP JUMPDEST PUSH2 0x927 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x281 JUMPI DUP4 PUSH0 PUSH2 0x469 JUMP JUMPDEST SWAP3 POP SWAP1 POP PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x961 JUMPI JUMPDEST DUP2 PUSH2 0x94F PUSH1 0x20 SWAP4 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI DUP4 SWAP2 MLOAD SWAP1 PUSH0 PUSH2 0x3A9 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x942 JUMP JUMPDEST SWAP4 POP SWAP1 POP PUSH1 0x20 DUP4 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x999 JUMPI JUMPDEST DUP2 PUSH2 0x986 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI SWAP2 MLOAD DUP5 SWAP3 PUSH1 0x20 PUSH2 0x364 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x979 JUMP JUMPDEST PUSH1 0x4 DUP4 PUSH32 0xCA1C3CBC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x4 DUP3 PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST DUP3 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x896 JUMPI DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x166 JUMP JUMPDEST PUSH1 0x24 DUP4 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x8C9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C9 JUMPI PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH2 0xA88 SWAP2 AND PUSH2 0x115F JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD SWAP3 PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 DUP2 PUSH1 0x4 DUP2 DUP7 PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0xE1C JUMPI DUP4 SWAP3 DUP7 SWAP3 PUSH0 SWAP3 PUSH2 0xEDC JUMPI JUMPDEST POP PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0x9BE2A88400000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE CALLER PUSH1 0x24 DUP5 ADD MSTORE ADDRESS PUSH1 0x44 DUP5 ADD MSTORE AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE1C JUMPI PUSH0 SWAP2 PUSH2 0xEA6 JUMPI JUMPDEST POP ISZERO PUSH2 0xE7E JUMPI PUSH0 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH2 0xE56 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 OR PUSH0 SSTORE PUSH1 0x40 MLOAD PUSH32 0x851C1BB300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x2D77138900000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP4 PUSH32 0x0 DUP4 AND DUP2 DUP4 PUSH1 0x24 DUP2 DUP5 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0xE1C JUMPI PUSH0 SWAP4 PUSH2 0xE27 JUMPI JUMPDEST POP DUP4 PUSH32 0x0 AND SWAP4 DUP5 EXTCODESIZE ISZERO PUSH2 0x8C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2F2FF15D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0x44 DUP2 DUP4 DUP11 GAS CALL DUP1 ISZERO PUSH2 0xE1C JUMPI PUSH2 0xE09 JUMPI JUMPDEST POP SWAP6 DUP6 SWAP7 DUP7 SLOAD AND DUP3 EXTCODESIZE ISZERO PUSH2 0xE05 JUMPI PUSH1 0x24 DUP8 SWAP3 DUP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x88B JUMPI DUP6 SWAP2 PUSH2 0xDF1 JUMPI JUMPDEST POP POP DUP3 EXTCODESIZE ISZERO PUSH2 0xDA7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x36568ABE00000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH1 0x4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP5 DUP2 PUSH1 0x44 DUP2 DUP4 DUP9 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x88B JUMPI DUP6 SWAP2 PUSH2 0xDDD JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xA217FDDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 DUP2 PUSH1 0x4 DUP2 DUP8 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x88B JUMPI DUP6 SWAP3 PUSH2 0xDAC JUMPI JUMPDEST POP POP DUP3 EXTCODESIZE ISZERO PUSH2 0xDA7 JUMPI PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x831 JUMPI PUSH2 0xD97 JUMPI POP RETURN JUMPDEST PUSH2 0xDA0 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0xD3 JUMPI DUP1 RETURN JUMPDEST POP POP POP REVERT JUMPDEST DUP2 SWAP6 POP DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0xDD6 JUMPI JUMPDEST PUSH2 0xDC4 DUP2 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI DUP4 SWAP3 MLOAD PUSH0 DUP1 PUSH2 0xD62 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xDBA JUMP JUMPDEST PUSH2 0xDE6 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0xDA7 JUMPI DUP4 PUSH0 PUSH2 0xD24 JUMP JUMPDEST PUSH2 0xDFA SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0xDA7 JUMPI DUP4 PUSH0 PUSH2 0xCCF JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST PUSH2 0xE14 SWAP2 SWAP7 POP PUSH2 0x10DD JUMP JUMPDEST PUSH0 SWAP5 PUSH0 PUSH2 0xC9D JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP3 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xE4F JUMPI JUMPDEST PUSH2 0xE3F DUP2 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI MLOAD SWAP2 PUSH0 PUSH2 0xC2A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE35 JUMP JUMPDEST PUSH32 0xCA1C3CBC00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH32 0x23DADA5300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xED5 JUMPI JUMPDEST PUSH2 0xEBD DUP2 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x8C9 JUMPI PUSH0 PUSH2 0xB54 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xEB3 JUMP JUMPDEST PUSH1 0x64 SWAP2 SWAP3 POP PUSH2 0xF00 SWAP1 DUP5 RETURNDATASIZE DUP7 GT PUSH2 0xF07 JUMPI JUMPDEST PUSH2 0xEF8 DUP2 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x11D5 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xB03 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xEEE JUMP JUMPDEST CALLVALUE PUSH2 0x8C9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE1C JUMPI PUSH1 0x20 SWAP3 PUSH0 SWAP3 PUSH2 0xF9F JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH2 0xFB7 SWAP2 SWAP3 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0xF07 JUMPI PUSH2 0xEF8 DUP2 DUP4 PUSH2 0x111E JUMP JUMPDEST SWAP1 DUP4 PUSH2 0xF95 JUMP JUMPDEST CALLVALUE PUSH2 0x8C9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C9 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x8C9 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C9 JUMPI PUSH1 0x4 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 SUB PUSH2 0x8C9 JUMPI PUSH2 0x1056 PUSH1 0x20 SWAP2 PUSH2 0x115F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x8C9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C9 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x8C9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C9 JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH0 SLOAD AND DUP2 MSTORE RETURN JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x10F1 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x10F1 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x0 DUP5 MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x10F1 JUMPI PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x8C9 JUMPI MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x8C9 JUMPI SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT JUMPDEST 0xCE 0x21 MSTORE MSIZE 0xEA PUSH1 0xCF GT SWAP1 GASLIMIT DELEGATECALL SWAP3 DIV PUSH7 0x69F9F38F7080A1 0xAC 0xE3 DUP7 EXTCODECOPY 0x2E 0xB3 0xA8 PUSH4 0xB464736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"2282:5362:29:-:0;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;922:4:20;1347:46:13;;872:14:18;;;;2282:5362:29;;-1:-1:-1;;;3427:33:29;;-1:-1:-1;;;;;2282:5362:29;;;;;872:14:18;;3427:33:29;2282:5362;3427:33;2282:5362;;3427:33;;;;;;;;;;;-1:-1:-1;3427:33:29;;;-1:-1:-1;3408:52:29;;;2282:5362;;;;;;;3593:25;;;;3427:33;3593:25;;;;;;;;;;;;;-1:-1:-1;3593:25:29;;;-1:-1:-1;2282:5362:29;;3593:35;;;:76;;;-1:-1:-1;3589:136:29;;3427:33;3735:14;;;2282:5362;3735:14;2282:5362;;;;;;-1:-1:-1;2282:5362:29;;;-1:-1:-1;2282:5362:29;;;;;;;;;;3845:21;;;;;;;;;-1:-1:-1;3845:21:29;;;-1:-1:-1;3806:62:29;;;2282:5362;;3806:62;;2282:5362;;;;;;;1347:46:13;2282:5362:29;;;;;872:14:18;2282:5362:29;;;;;;;;;;;;;;;3408:52;2282:5362;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3845:21;;;;;;;;;;;;;;;;;:::i;:::-;;;2282:5362;;;;;;;;;;;;3845:21;;;;;2282:5362;-1:-1:-1;2282:5362:29;;3845:21;;;;;;2282:5362;;;-1:-1:-1;2282:5362:29;;;;;3589:136;3692:22;;;-1:-1:-1;3692:22:29;3427:33;-1:-1:-1;3692:22:29;3593:76;2282:5362;;3408:52;2282:5362;;3632:37;;3593:76;;:25;;;;;;;;;;;;;;;;;;:::i;:::-;;;2282:5362;;;;;;;;;:::i;:::-;3593:25;;;;;;;;;2282:5362;;;-1:-1:-1;2282:5362:29;;;;;3427:33;;;;;;;;;;;;;;;;;;:::i;:::-;;;2282:5362;;;;;;;;:::i;:::-;3427:33;;;;;;;;2282:5362;;;;;-1:-1:-1;;2282:5362:29;;;;-1:-1:-1;;;;;2282:5362:29;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;2282:5362:29;;;;;;:::o"},"deployedBytecode":{"functionDebugData":{"abi_decode_contract_IAuthorizer_fromMemory":{"entryPoint":4565,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes32_address":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"finalize_allocation":{"entryPoint":4382,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_10033":{"entryPoint":4317,"id":null,"parameterSlots":1,"returnSlots":0},"fun_getActionId":{"entryPoint":4447,"id":2480,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"immutableReferences":{"2420":[{"length":32,"start":4490}],"4440":[{"length":32,"start":2768},{"length":32,"start":3937},{"length":32,"start":4074}],"9043":[{"length":32,"start":1357},{"length":32,"start":1474},{"length":32,"start":4234}],"9049":[{"length":32,"start":175},{"length":32,"start":3059}],"9052":[{"length":32,"start":961},{"length":32,"start":1060},{"length":32,"start":1154},{"length":32,"start":1219},{"length":32,"start":1752},{"length":32,"start":1851},{"length":32,"start":1945},{"length":32,"start":2011},{"length":32,"start":3118}]},"linkReferences":{},"object":"6080806040526004361015610012575f80fd5b5f905f358060e01c91826351da116d146110ae575081637ea3a9641461105e578163851c1bb31461100e5781638d928af814610fbe578163aaabadc514610f0e578163b78b608714610a4b57508063b8350e27146100fb578063d7128084146100d65763fbfa77cf14610083575f80fd5b346100d357806003193601126100d357602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b80fd5b50346100d357806003193601126100d35760ff6020915460a01c166040519015158152f35b50346100d35760206003193601126100d35767ffffffffffffffff60043581811161083c573660238201121561083c578060040135918211610a1e578160051b906040519261014d602084018561111e565b8352602460208401928201019036821161087357602401915b8183106109f1575050507f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005c6109c95760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d815460ff8160a01c166109a1578060ff849260a81c16156102ac575b50805b82518110156102855773ffffffffffffffffffffffffffffffffffffffff808354169060208360051b8601015116813b156102815783916024839260405194859384927f0874327f00000000000000000000000000000000000000000000000000000000845260048401525af190811561027657839161025e575b50506001016101d9565b610267906110dd565b61027257815f610254565b5080fd5b6040513d85823e3d90fd5b8380fd5b50807f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005d80f35b8075010000000000000000000000000000000000000000007fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff9316178355166040517f851c1bb3000000000000000000000000000000000000000000000000000000008082527f8a3c5c69000000000000000000000000000000000000000000000000000000006004830152602082602481865afa918215610854578492610969575b5060209060246040518095819382527fa93df2a40000000000000000000000000000000000000000000000000000000060048301525afa918215610276578392610932575b5073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561083c576040517f2f2ff15d0000000000000000000000000000000000000000000000000000000080825260048201839052306024830152908481604481837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165af190811561088b57859161091e575b505073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561028157604051908152600481018390523060248201528381604481837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165af190811561085457849161090a575b50506040517f7869ee1800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156108545784916108d5575b50604051907f55fb76af00000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561088b57859261089a575b5073ffffffffffffffffffffffffffffffffffffffff85541690813b156108965785916024839260405194859384927f8a3c5c6900000000000000000000000000000000000000000000000000000000845260048401525af190811561088b578591610877575b505473ffffffffffffffffffffffffffffffffffffffff1690813b156108735784916024839260405194859384927fa93df2a400000000000000000000000000000000000000000000000000000000845260048401525af190811561085457849161085f575b505073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561083c576040517f36568abe0000000000000000000000000000000000000000000000000000000080825260048201929092523060248201528381604481837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165af1908115610854578491610840575b505073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561083c5760405190815260048101919091523060248201528181604481837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165af1801561083157156101d657610826906110dd565b61027257815f6101d6565b6040513d84823e3d90fd5b8280fd5b610849906110dd565b61083c57825f610780565b6040513d86823e3d90fd5b610868906110dd565b61083c57825f6106bf565b8480fd5b610880906110dd565b61028157835f610659565b6040513d87823e3d90fd5b8580fd5b945090506020843d6020116108cd575b816108b76020938361111e565b810103126108c957859351905f6105f2565b5f80fd5b3d91506108aa565b9350506020833d602011610902575b816108f16020938361111e565b810103126108c9578492515f61057d565b3d91506108e4565b610913906110dd565b61083c57825f610508565b610927906110dd565b61028157835f610469565b925090506020823d602011610961575b8161094f6020938361111e565b810103126108c957839151905f6103a9565b3d9150610942565b935090506020833d602011610999575b816109866020938361111e565b810103126108c957915184926020610364565b3d9150610979565b6004837fca1c3cbc000000000000000000000000000000000000000000000000000000008152fd5b6004827f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b823573ffffffffffffffffffffffffffffffffffffffff8116810361089657815260209283019201610166565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b9050346108c9575f6003193601126108c9577fffffffff00000000000000000000000000000000000000000000000000000000610a88911661115f565b9073ffffffffffffffffffffffffffffffffffffffff604051927faaabadc50000000000000000000000000000000000000000000000000000000084526020938481600481867f0000000000000000000000000000000000000000000000000000000000000000165afa8015610e1c57839286925f92610edc575b5060649060405194859384927f9be2a8840000000000000000000000000000000000000000000000000000000084526004840152336024840152306044840152165afa908115610e1c575f91610ea6575b5015610e7e575f5460ff8160a01c16610e56577fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000175f556040517f851c1bb30000000000000000000000000000000000000000000000000000000081527f2d7713890000000000000000000000000000000000000000000000000000000060048201819052937f000000000000000000000000000000000000000000000000000000000000000083168183602481845afa928315610e1c575f93610e27575b50837f00000000000000000000000000000000000000000000000000000000000000001693843b156108c9576040517f2f2ff15d000000000000000000000000000000000000000000000000000000008152600481018590523060248201525f81604481838a5af18015610e1c57610e09575b50958596865416823b15610e055760248792836040519586948593845260048401525af190811561088b578591610df1575b5050823b15610da7576040517f36568abe000000000000000000000000000000000000000000000000000000008082526004820193909352306024820152848160448183885af190811561088b578591610ddd575b50506040517fa217fddf0000000000000000000000000000000000000000000000000000000081528181600481875afa91821561088b578592610dac575b5050823b15610da75760405191825260048201523060248201529082908290604490829084905af1801561083157610d975750f35b610da0906110dd565b6100d35780f35b505050fd5b8195508092503d8311610dd6575b610dc4818361111e565b810103126108c9578392515f80610d62565b503d610dba565b610de6906110dd565b610da757835f610d24565b610dfa906110dd565b610da757835f610ccf565b8680fd5b610e149196506110dd565b5f945f610c9d565b6040513d5f823e3d90fd5b9092508181813d8311610e4f575b610e3f818361111e565b810103126108c95751915f610c2a565b503d610e35565b7fca1c3cbc000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f23dada53000000000000000000000000000000000000000000000000000000005f5260045ffd5b90508381813d8311610ed5575b610ebd818361111e565b810103126108c9575180151581036108c9575f610b54565b503d610eb3565b6064919250610f0090843d8611610f07575b610ef8818361111e565b8101906111d5565b9190610b03565b503d610eee565b346108c9575f6003193601126108c9576040517faaabadc500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa908115610e1c576020925f92610f9f575b5060405191168152f35b610fb7919250833d8511610f0757610ef8818361111e565b9083610f95565b346108c9575f6003193601126108c957602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346108c95760206003193601126108c9576004357fffffffff00000000000000000000000000000000000000000000000000000000811681036108c95761105660209161115f565b604051908152f35b346108c9575f6003193601126108c957602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346108c9575f6003193601126108c95760209073ffffffffffffffffffffffffffffffffffffffff5f54168152f35b67ffffffffffffffff81116110f157604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176110f157604052565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060208201927f00000000000000000000000000000000000000000000000000000000000000008452166040820152602481526060810181811067ffffffffffffffff8211176110f15760405251902090565b908160209103126108c9575173ffffffffffffffffffffffffffffffffffffffff811681036108c9579056fea2646970667358221220125bce215259ea60cf119045f492046669f9f38f7080a1ace3863c2eb3a863b464736f6c634300081b0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP1 PUSH0 CALLDATALOAD DUP1 PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x51DA116D EQ PUSH2 0x10AE JUMPI POP DUP2 PUSH4 0x7EA3A964 EQ PUSH2 0x105E JUMPI DUP2 PUSH4 0x851C1BB3 EQ PUSH2 0x100E JUMPI DUP2 PUSH4 0x8D928AF8 EQ PUSH2 0xFBE JUMPI DUP2 PUSH4 0xAAABADC5 EQ PUSH2 0xF0E JUMPI DUP2 PUSH4 0xB78B6087 EQ PUSH2 0xA4B JUMPI POP DUP1 PUSH4 0xB8350E27 EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0xD7128084 EQ PUSH2 0xD6 JUMPI PUSH4 0xFBFA77CF EQ PUSH2 0x83 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xD3 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD3 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xD3 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD3 JUMPI PUSH1 0xFF PUSH1 0x20 SWAP2 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xD3 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD3 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x83C JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x83C JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0xA1E JUMPI DUP2 PUSH1 0x5 SHL SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x14D PUSH1 0x20 DUP5 ADD DUP6 PUSH2 0x111E JUMP JUMPDEST DUP4 MSTORE PUSH1 0x24 PUSH1 0x20 DUP5 ADD SWAP3 DUP3 ADD ADD SWAP1 CALLDATASIZE DUP3 GT PUSH2 0x873 JUMPI PUSH1 0x24 ADD SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x9F1 JUMPI POP POP POP PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 TLOAD PUSH2 0x9C9 JUMPI PUSH1 0x1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 TSTORE DUP2 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH2 0x9A1 JUMPI DUP1 PUSH1 0xFF DUP5 SWAP3 PUSH1 0xA8 SHR AND ISZERO PUSH2 0x2AC JUMPI JUMPDEST POP DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x285 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 SLOAD AND SWAP1 PUSH1 0x20 DUP4 PUSH1 0x5 SHL DUP7 ADD ADD MLOAD AND DUP2 EXTCODESIZE ISZERO PUSH2 0x281 JUMPI DUP4 SWAP2 PUSH1 0x24 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0x874327F00000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x276 JUMPI DUP4 SWAP2 PUSH2 0x25E JUMPI JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x1D9 JUMP JUMPDEST PUSH2 0x267 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x272 JUMPI DUP2 PUSH0 PUSH2 0x254 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP DUP1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 TSTORE DUP1 RETURN JUMPDEST DUP1 PUSH22 0x1000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 AND OR DUP4 SSTORE AND PUSH1 0x40 MLOAD PUSH32 0x851C1BB300000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH32 0x8A3C5C6900000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH1 0x24 DUP2 DUP7 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x854 JUMPI DUP5 SWAP3 PUSH2 0x969 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP6 DUP2 SWAP4 DUP3 MSTORE PUSH32 0xA93DF2A400000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x276 JUMPI DUP4 SWAP3 PUSH2 0x932 JUMPI JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x83C JUMPI PUSH1 0x40 MLOAD PUSH32 0x2F2FF15D00000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP4 SWAP1 MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE SWAP1 DUP5 DUP2 PUSH1 0x44 DUP2 DUP4 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x88B JUMPI DUP6 SWAP2 PUSH2 0x91E JUMPI JUMPDEST POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x281 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP4 DUP2 PUSH1 0x44 DUP2 DUP4 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x854 JUMPI DUP5 SWAP2 PUSH2 0x90A JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0x7869EE1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x854 JUMPI DUP5 SWAP2 PUSH2 0x8D5 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 PUSH32 0x55FB76AF00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x88B JUMPI DUP6 SWAP3 PUSH2 0x89A JUMPI JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 SLOAD AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x896 JUMPI DUP6 SWAP2 PUSH1 0x24 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0x8A3C5C6900000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x88B JUMPI DUP6 SWAP2 PUSH2 0x877 JUMPI JUMPDEST POP SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x873 JUMPI DUP5 SWAP2 PUSH1 0x24 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0xA93DF2A400000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x854 JUMPI DUP5 SWAP2 PUSH2 0x85F JUMPI JUMPDEST POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x83C JUMPI PUSH1 0x40 MLOAD PUSH32 0x36568ABE00000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH1 0x4 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP4 DUP2 PUSH1 0x44 DUP2 DUP4 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x854 JUMPI DUP5 SWAP2 PUSH2 0x840 JUMPI JUMPDEST POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x83C JUMPI PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP2 DUP2 PUSH1 0x44 DUP2 DUP4 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GAS CALL DUP1 ISZERO PUSH2 0x831 JUMPI ISZERO PUSH2 0x1D6 JUMPI PUSH2 0x826 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x272 JUMPI DUP2 PUSH0 PUSH2 0x1D6 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH2 0x849 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x83C JUMPI DUP3 PUSH0 PUSH2 0x780 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x868 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x83C JUMPI DUP3 PUSH0 PUSH2 0x6BF JUMP JUMPDEST DUP5 DUP1 REVERT JUMPDEST PUSH2 0x880 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x281 JUMPI DUP4 PUSH0 PUSH2 0x659 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST SWAP5 POP SWAP1 POP PUSH1 0x20 DUP5 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x8CD JUMPI JUMPDEST DUP2 PUSH2 0x8B7 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI DUP6 SWAP4 MLOAD SWAP1 PUSH0 PUSH2 0x5F2 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x8AA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP4 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x902 JUMPI JUMPDEST DUP2 PUSH2 0x8F1 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI DUP5 SWAP3 MLOAD PUSH0 PUSH2 0x57D JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x8E4 JUMP JUMPDEST PUSH2 0x913 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x83C JUMPI DUP3 PUSH0 PUSH2 0x508 JUMP JUMPDEST PUSH2 0x927 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x281 JUMPI DUP4 PUSH0 PUSH2 0x469 JUMP JUMPDEST SWAP3 POP SWAP1 POP PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x961 JUMPI JUMPDEST DUP2 PUSH2 0x94F PUSH1 0x20 SWAP4 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI DUP4 SWAP2 MLOAD SWAP1 PUSH0 PUSH2 0x3A9 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x942 JUMP JUMPDEST SWAP4 POP SWAP1 POP PUSH1 0x20 DUP4 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x999 JUMPI JUMPDEST DUP2 PUSH2 0x986 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI SWAP2 MLOAD DUP5 SWAP3 PUSH1 0x20 PUSH2 0x364 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x979 JUMP JUMPDEST PUSH1 0x4 DUP4 PUSH32 0xCA1C3CBC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x4 DUP3 PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST DUP3 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x896 JUMPI DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x166 JUMP JUMPDEST PUSH1 0x24 DUP4 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x8C9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C9 JUMPI PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH2 0xA88 SWAP2 AND PUSH2 0x115F JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x40 MLOAD SWAP3 PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 DUP2 PUSH1 0x4 DUP2 DUP7 PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0xE1C JUMPI DUP4 SWAP3 DUP7 SWAP3 PUSH0 SWAP3 PUSH2 0xEDC JUMPI JUMPDEST POP PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH32 0x9BE2A88400000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE CALLER PUSH1 0x24 DUP5 ADD MSTORE ADDRESS PUSH1 0x44 DUP5 ADD MSTORE AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE1C JUMPI PUSH0 SWAP2 PUSH2 0xEA6 JUMPI JUMPDEST POP ISZERO PUSH2 0xE7E JUMPI PUSH0 SLOAD PUSH1 0xFF DUP2 PUSH1 0xA0 SHR AND PUSH2 0xE56 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 OR PUSH0 SSTORE PUSH1 0x40 MLOAD PUSH32 0x851C1BB300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x2D77138900000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP4 PUSH32 0x0 DUP4 AND DUP2 DUP4 PUSH1 0x24 DUP2 DUP5 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0xE1C JUMPI PUSH0 SWAP4 PUSH2 0xE27 JUMPI JUMPDEST POP DUP4 PUSH32 0x0 AND SWAP4 DUP5 EXTCODESIZE ISZERO PUSH2 0x8C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2F2FF15D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0x44 DUP2 DUP4 DUP11 GAS CALL DUP1 ISZERO PUSH2 0xE1C JUMPI PUSH2 0xE09 JUMPI JUMPDEST POP SWAP6 DUP6 SWAP7 DUP7 SLOAD AND DUP3 EXTCODESIZE ISZERO PUSH2 0xE05 JUMPI PUSH1 0x24 DUP8 SWAP3 DUP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x88B JUMPI DUP6 SWAP2 PUSH2 0xDF1 JUMPI JUMPDEST POP POP DUP3 EXTCODESIZE ISZERO PUSH2 0xDA7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x36568ABE00000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE PUSH1 0x4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP5 DUP2 PUSH1 0x44 DUP2 DUP4 DUP9 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x88B JUMPI DUP6 SWAP2 PUSH2 0xDDD JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xA217FDDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 DUP2 PUSH1 0x4 DUP2 DUP8 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x88B JUMPI DUP6 SWAP3 PUSH2 0xDAC JUMPI JUMPDEST POP POP DUP3 EXTCODESIZE ISZERO PUSH2 0xDA7 JUMPI PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x831 JUMPI PUSH2 0xD97 JUMPI POP RETURN JUMPDEST PUSH2 0xDA0 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0xD3 JUMPI DUP1 RETURN JUMPDEST POP POP POP REVERT JUMPDEST DUP2 SWAP6 POP DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0xDD6 JUMPI JUMPDEST PUSH2 0xDC4 DUP2 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI DUP4 SWAP3 MLOAD PUSH0 DUP1 PUSH2 0xD62 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xDBA JUMP JUMPDEST PUSH2 0xDE6 SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0xDA7 JUMPI DUP4 PUSH0 PUSH2 0xD24 JUMP JUMPDEST PUSH2 0xDFA SWAP1 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0xDA7 JUMPI DUP4 PUSH0 PUSH2 0xCCF JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST PUSH2 0xE14 SWAP2 SWAP7 POP PUSH2 0x10DD JUMP JUMPDEST PUSH0 SWAP5 PUSH0 PUSH2 0xC9D JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP3 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xE4F JUMPI JUMPDEST PUSH2 0xE3F DUP2 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI MLOAD SWAP2 PUSH0 PUSH2 0xC2A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE35 JUMP JUMPDEST PUSH32 0xCA1C3CBC00000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH32 0x23DADA5300000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xED5 JUMPI JUMPDEST PUSH2 0xEBD DUP2 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C9 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x8C9 JUMPI PUSH0 PUSH2 0xB54 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xEB3 JUMP JUMPDEST PUSH1 0x64 SWAP2 SWAP3 POP PUSH2 0xF00 SWAP1 DUP5 RETURNDATASIZE DUP7 GT PUSH2 0xF07 JUMPI JUMPDEST PUSH2 0xEF8 DUP2 DUP4 PUSH2 0x111E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x11D5 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xB03 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xEEE JUMP JUMPDEST CALLVALUE PUSH2 0x8C9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAAABADC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 DUP6 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE1C JUMPI PUSH1 0x20 SWAP3 PUSH0 SWAP3 PUSH2 0xF9F JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH2 0xFB7 SWAP2 SWAP3 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0xF07 JUMPI PUSH2 0xEF8 DUP2 DUP4 PUSH2 0x111E JUMP JUMPDEST SWAP1 DUP4 PUSH2 0xF95 JUMP JUMPDEST CALLVALUE PUSH2 0x8C9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C9 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x8C9 JUMPI PUSH1 0x20 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C9 JUMPI PUSH1 0x4 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 SUB PUSH2 0x8C9 JUMPI PUSH2 0x1056 PUSH1 0x20 SWAP2 PUSH2 0x115F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x8C9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C9 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x8C9 JUMPI PUSH0 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C9 JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH0 SLOAD AND DUP2 MSTORE RETURN JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x10F1 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x10F1 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0x0 DUP5 MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x10F1 JUMPI PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x8C9 JUMPI MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x8C9 JUMPI SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT JUMPDEST 0xCE 0x21 MSTORE MSIZE 0xEA PUSH1 0xCF GT SWAP1 GASLIMIT DELEGATECALL SWAP3 DIV PUSH7 0x69F9F38F7080A1 0xAC 0xE3 DUP7 EXTCODECOPY 0x2E 0xB3 0xA8 PUSH4 0xB464736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"2282:5362:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1424:26:20;2282:5362:29;1424:26:20;;;2282:5362:29;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2282:5362:29;;;;;;;;;2496:29;2282:5362;;;;;;;;;;;;;-1:-1:-1;;2282:5362:29;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2282:5362:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;2806:53:17;;;551:66:16;2806:53:17;1316:93:16;;1529:4;551:66;3051:52:17;2282:5362:29;;;;;;;4645:76;;2282:5362;;;;;;;;4815:141;;2282:5362;5458:13;;5491:3;2282:5362;;5473:16;;;;;2282:5362;;;;;;;;;;;;;;;5571:70;;;;;2282:5362;;;;;;;5571:70;;;;;2282:5362;5571:70;;2282:5362;5571:70;;2282:5362;5571:70;;;;;;;;;;;5491:3;;;1529:4:16;2282:5362:29;5458:13;;5571:70;;;;:::i;:::-;2282:5362;;5571:70;;;;2282:5362;;;;5571:70;2282:5362;;;;;;;;;5571:70;2282:5362;;;5473:16;;3051:52:17;551:66:16;3051:52:17;2282:5362:29;;4815:141;2282:5362;;;;;;;;;;;;;6208:144;;;6276:66;2282:5362;6208:144;;2282:5362;;6208:144;2282:5362;6208:144;;;;;;;;;;;;;4815:141;2282:5362;;;;;;6386:145;;;;;;6454:67;2282:5362;6386:145;;2282:5362;6386:145;;;;;;;;;;;4815:141;6542:11;2282:5362;6542:11;2282:5362;6542:49;;;;2282:5362;;;6542:49;;;2282:5362;6542:49;;2282:5362;;;6585:4;2282:5362;;;;;6585:4;2282:5362;;;6585:4;6542:11;2282:5362;;6542:49;;;;;;;;;;;4815:141;6542:11;;2282:5362;6542:11;2282:5362;6601:50;;;;2282:5362;;6601:50;;;2282:5362;6601:50;;2282:5362;;;6585:4;2282:5362;;;;6585:4;2282:5362;;;6585:4;6542:11;2282:5362;;6601:50;;;;;;;;;;;4815:141;2282:5362;;;;;6743:53;;2282:5362;6743:16;2282:5362;6743:16;2282:5362;6743:16;2282:5362;6743:53;;;;;;;;;;;4815:141;2282:5362;;;6841:54;2282:5362;6841:54;;2282:5362;6743:16;2282:5362;6743:16;2282:5362;6743:16;2282:5362;6841:54;;;;;;;;;;;4815:141;2282:5362;;;;;6906:76;;;;;;2282:5362;;;;;;;6906:76;;;;;6276:66;6906:76;;2282:5362;6906:76;;2282:5362;6906:76;;;;;;;;;;;4815:141;-1:-1:-1;2282:5362:29;;;;6992:78;;;;;2282:5362;;;;;;;6992:78;;;;;6454:67;6992:78;;2282:5362;6992:78;;2282:5362;6992:78;;;;;;;;;;;4815:141;6542:11;;2282:5362;6542:11;2282:5362;7112:52;;;;2282:5362;;;7112:52;;;2282:5362;7112:52;;2282:5362;;;;6585:4;2282:5362;;;;;;;;;6542:11;2282:5362;;7112:52;;;;;;;;;;;4815:141;6542:11;;2282:5362;6542:11;2282:5362;7174:53;;;;2282:5362;;7174:53;;;2282:5362;7174:53;;2282:5362;;;;6585:4;2282:5362;;;;;;;;;6542:11;2282:5362;;7174:53;;;;;;;4815:141;7174:53;;;;:::i;:::-;2282:5362;;7174:53;;4815:141;;7174:53;2282:5362;;;;;;;;;7174:53;2282:5362;;;7112:52;;;;:::i;:::-;2282:5362;;7112:52;;;;;2282:5362;;;;;;;;;6992:78;;;;:::i;:::-;2282:5362;;6992:78;;;;;2282:5362;;;6906:76;;;;:::i;:::-;2282:5362;;6906:76;;;;;2282:5362;;;;;;;;;6906:76;2282:5362;;;6841:54;;;;;2282:5362;6841:54;;2282:5362;6841:54;;;;;;2282:5362;6841:54;;;:::i;:::-;;;2282:5362;;;;;;;6841:54;;;;2282:5362;;;;6841:54;;;-1:-1:-1;6841:54:29;;6743:53;;;;2282:5362;6743:53;;2282:5362;6743:53;;;;;;2282:5362;6743:53;;;:::i;:::-;;;2282:5362;;;;;;;6743:53;;;;;;-1:-1:-1;6743:53:29;;6601:50;;;;:::i;:::-;2282:5362;;6601:50;;;;6542:49;;;;:::i;:::-;2282:5362;;6542:49;;;;6386:145;;;;;2282:5362;6386:145;;2282:5362;6386:145;;;;;;2282:5362;6386:145;;;:::i;:::-;;;2282:5362;;;;;;;6386:145;;;;;;;-1:-1:-1;6386:145:29;;6208:144;;;;;2282:5362;6208:144;;2282:5362;6208:144;;;;;;2282:5362;6208:144;;;:::i;:::-;;;2282:5362;;;;;;;;;6208:144;;;;;-1:-1:-1;6208:144:29;;4645:76;2282:5362;4693:17;;;;;1316:93:16;2282:5362:29;1368:30:16;;;;;2282:5362:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2282:5362:29;;;;;1774:7:13;1762:20;1774:7;;1762:20;:::i;:::-;2282:5362:29;;;;1180:22:18;2282:5362:29;1180:22:18;;;:6;;;2282:5362:29;1180:6:18;;;2282:5362:29;1180:22:18;;;;;;;;;;2282:5362:29;1180:22:18;;;2282:5362:29;;;;;;1180:64:18;;;;;2282:5362:29;1180:64:18;;2282:5362:29;1180:64:18;;2282:5362:29;1820:10:13;2282:5362:29;;;;1238:4:18;2282:5362:29;;;;;1180:64:18;;;;;;;2282:5362:29;1180:64:18;;;2282:5362:29;1797:34:13;;1793:90;;2282:5362:29;;;;;;;5733:76;;2282:5362;;;;;;;;;7323:112;;7380:45;2282:5362;7323:112;;2282:5362;;;7380:45;7347:5;2282:5362;;;;;;;7323:112;;;;;;;2282:5362;7323:112;;;2282:5362;7446:11;;;2282:5362;7446:58;;;;;;2282:5362;;;7446:58;;2282:5362;7446:58;;2282:5362;;;1238:4:18;2282:5362:29;;;;-1:-1:-1;2282:5362:29;;;-1:-1:-1;7446:58:29;;;;;;;;;2282:5362;;;;;;;;7515:48;;;;;2282:5362;;;;;;7515:48;;;;;;;2282:5362;7515:48;;2282:5362;7515:48;;;;;;;;;;;2282:5362;7574:61;;;;;;;2282:5362;;;7574:61;;;2282:5362;7574:61;;2282:5362;;;;1238:4:18;2282:5362:29;;;;;;;;;7574:61;;;;;;;;;;;;2282:5362;;;;;;5992:32;;;;2282:5362;5992:32;;;;;;;;;;;;;2282:5362;5967:73;;;;;;;2282:5362;;5967:73;;;2282:5362;5967:73;;2282:5362;1238:4:18;2282:5362:29;;;;;;;;;;;;;;;5967:73;;;;;;;;2282:5362;;5967:73;;;;:::i;:::-;2282:5362;;5967:73;2282:5362;5967:73;2282:5362;;;;5992:32;;;;;;;;;;;;;;;;;:::i;:::-;;;2282:5362;;;;;;;5992:32;;;;;;;;;7574:61;;;;:::i;:::-;2282:5362;;7574:61;;;;7515:48;;;;:::i;:::-;2282:5362;;7515:48;;;;;2282:5362;;;7446:58;;;;;;:::i;:::-;2282:5362;7446:58;;;;;2282:5362;;;;;;;;;7323:112;;;;;;;;;;;;;;;;;:::i;:::-;;;2282:5362;;;;;7323:112;;;;;;;;;5733:76;5781:17;2282:5362;5781:17;2282:5362;;5781:17;1793:90:13;1854:18;2282:5362:29;1854:18:13;2282:5362:29;;1854:18:13;1180:64:18;;;;;;;;;;;;;;;;:::i;:::-;;;2282:5362:29;;;;;;;;;;;;1180:64:18;;;;;;;;:22;2282:5362:29;1180:22:18;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;2282:5362:29;;;;;-1:-1:-1;;2282:5362:29;;;;;;;;1424:26:20;;2282:5362:29;1424:26:20;2282:5362:29;;;968:6:18;2282:5362:29;;1424:26:20;;;;;;;;;2282:5362:29;1424:26:20;;;2282:5362:29;;;;;;;;;1424:26:20;;;;;;;;;;;;;;;:::i;:::-;;;;;2282:5362:29;;;;;-1:-1:-1;;2282:5362:29;;;;;;;;;968:6:18;2282:5362:29;;;;;;;;;-1:-1:-1;;2282:5362:29;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;2282:5362:29;;;;;;;;;2381:56;2282:5362;;;;;;;;;-1:-1:-1;;2282:5362:29;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1931:430:13:-;2282:5362:29;;;2303:50:13;;;2320:22;;2282:5362:29;;;;;;;2303:50:13;;;2282:5362:29;;;;;;;;;;;;;;;2293:61:13;;1931:430;:::o;2282:5362:29:-;;;;;;;;;;;;;;;;;;:::o"},"methodIdentifiers":{"finalizeMigration()":"b78b6087","getActionId(bytes4)":"851c1bb3","getAuthorizer()":"aaabadc5","getVault()":"8d928af8","isMigrationComplete()":"d7128084","migratePools(address[])":"b8350e27","newFeeController()":"51da116d","oldFeeController()":"7ea3a964","vault()":"fbfa77cf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"_newFeeController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyMigrated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"finalizeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrationComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"migratePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newFeeController\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldFeeController\",\"outputs\":[{\"internalType\":\"contract IProtocolFeeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These events enable tracking pool protocol fees under all circumstances (in particular, when protocol fees are initially turned off). After deployment, call `migratePools` as many times as necessary. The list must be generated externally, as pools are not iterable on-chain. The batch interface allows an unlimited number of pools to be migrated; it's possible there might be too many to migrate in a single call. The first time `migratePools` is called, the contract will first copy the global (pool-independent data). This could be done in a separate stage, but we're trying to keep the contract simple, vs. duplicating the staging coordinator system of v2 just yet. When all pools have been migrated, call `finalizeMigration` to disable further migration, update the address in the Vault, and renounce all permissions. While `migratePools` is permissionless, this call must be permissioned to prevent premature termination in case multiple transactions are required to migrate all the pools. Associated with `20250221-protocol-fee-controller-migration` (fork test only).\",\"errors\":{\"InvalidFeeController()\":[{\"details\":\"ProtocolFeeController contracts return the address of the Vault they were deployed with. Ensure that both the old and new controllers reference the same vault.\"}]},\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"params\":{\"selector\":\"The 4-byte selector of the permissioned function\"},\"returns\":{\"_0\":\"The computed actionId\"}},\"getAuthorizer()\":{\"returns\":{\"_0\":\"authorizer An interface pointer to the Authorizer\"}},\"getVault()\":{\"returns\":{\"_0\":\"vault An interface pointer to the Vault\"}},\"isMigrationComplete()\":{\"details\":\"It can only be done once.\",\"returns\":{\"_0\":\"isComplete True if `finalizeMigration` has been called.\"}},\"migratePools(address[])\":{\"details\":\"This can be called multiple times, if there are too many pools for a single transaction. Note that the first time this is called, it will migrate the global fee percentages, then proceed with the first set of pools.\",\"params\":{\"pools\":\"The set of pools to be migrated in this call\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyMigrated()\":[{\"notice\":\"Migration can only be performed once.\"}],\"InvalidFeeController()\":[{\"notice\":\"Attempt to deploy this contract with invalid parameters.\"}],\"ReentrancyGuardReentrantCall()\":[{\"notice\":\"Unauthorized reentrant call.\"}],\"SenderNotAllowed()\":[{\"notice\":\"The sender does not have permission to call a function.\"}]},\"kind\":\"user\",\"methods\":{\"getActionId(bytes4)\":{\"notice\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getAuthorizer()\":{\"notice\":\"Get the address of the Authorizer.\"},\"getVault()\":{\"notice\":\"Get the address of the Balancer Vault.\"},\"isMigrationComplete()\":{\"notice\":\"Check whether migration has been completed.\"},\"migratePools(address[])\":{\"notice\":\"Migrate pools from the old fee controller to the new one.\"}},\"notice\":\"Migrate to a ProtocolFeeController with extra events and infrastructure for future migrations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeeControllerMigration.sol\":\"ProtocolFeeControllerMigration\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf [ xa[r]EscLM cCTUtTOntnfDIul Lcul Vcul [j] Tpeul xa[rul] xa[r]cL gvif CTUca[r]LSsTFOtfDnca[r]Iulc ] jmul[jul] VcTOcul jmul : fDnTOcmu\",\"stackAllocation\":true}},\"runs\":9999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@balancer-labs/v3-interfaces/contracts/governance-scripts/IBasicAuthorizer.sol\":{\"keccak256\":\"0x434eda908f66d99d967c2c2b233337227c331cd79655ec5b0ddcc76db7a20606\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b0b6c4bc095113dfbaeb9d9a6f9602f0f1a79b075c82d5ccccff7a1b67af1ce8\",\"dweb:/ipfs/QmaePfy8V5U9UFqkDtdTvPjJLmo1XEorPrC1fMVB35n86Y\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0xa383f78ec04a4ebadbf64ce0fcef8c14f2487f02330acf2fbab80055c54a5d74\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://077fdb9728fd22008ca58ca9f63cc7ea1b86f9cec778c5ff8943d9322b812f06\",\"dweb:/ipfs/QmVCYYCeuUZK1GqAHzTZBo59cjjh9iQhNYWQvAy2AYAVoN\"]},\"@balancer-labs/v3-interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x3a9a626d90cdf64042441895ce981bf570d9aa56e7c188b34f8603b1d629aae3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0ac7096c0d5cd5e0c20dcc6681d24eb04ad7e14cbb61d0ebf136f96a2b9752c4\",\"dweb:/ipfs/QmWryZQqLxpxaCBwK6uEfSLKWKsGBsDL7xbdGqFMkW4Uxp\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x288b9590b9fb743964d46f610c2b0d4eee8457bfe52b890e31be5e11661759e3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11373e74f2bb6112ae47b709e0161c09b3a2e1a7659bd15fa4ab4bcf8eadcab0\",\"dweb:/ipfs/QmfELyCgCckJz6hPwCw9thNA5kvaoUcCw7gcoxRgWrjMg1\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x51fabcdeaefc15a895a04c457968a7fc0ce4f4647d42a91d07a863170d812c28\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://85822ed25a050521ec4b1af2e21d48e2b85cf48828cb9be5d7e5eb104d4ade6a\",\"dweb:/ipfs/QmU4QSNMfQCEacdgQizCxgNUzfnKxdmyqAndNJgLsCQ32t\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IProtocolFeeController.sol\":{\"keccak256\":\"0xa549105cdf64e06ab49473ab810b4ec2342e7e1593707a297f7965044d75fdb1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f641d0f440b2085580aa8b79cb3241bc0c3ea0af275fad953d727ec8f7482795\",\"dweb:/ipfs/QmPULYHXMhCGCztE5ccKzRhb99K3LJSAicbxpWm36gcFVg\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0xf02dcb0b4fe9b71eb46fc66e327e166091d4e479fc3987c766859c94d505fe03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://de42ab0fa6f22010ac305d785e787a60fbb94c2d0ba17042a6e60bce33c5ed9f\",\"dweb:/ipfs/QmVonnCCZVGzA3EERuQ4PbtpTTKrtgoXxYmtJ4CqaSmc4e\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultAdmin.sol\":{\"keccak256\":\"0x9a651c10b5b352386341d65a37b63c95fbd0c4d401d4539730f3dfb4825acc18\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://26e398b4fc37c80a86327b9cbe14335e5378fa69b3fb222c2dc8cf33707c30fd\",\"dweb:/ipfs/QmY2E1b8DADLp3MStbVK93GACRJgJZxHYJpDrow1xzVhWB\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultErrors.sol\":{\"keccak256\":\"0xb2c6deaa8701201af5d31ac270fbc30ebe6b66a1f9b6b12d1d17d807f7decb66\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://28d6751bc7e7c7221745742cfe906387e0d806ea0a0041b9377fb5a537146063\",\"dweb:/ipfs/QmcphjQ6ramZM6Qxv84jaJbtZ7d5FNFJ8xHWCHZwk7CdZ3\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultEvents.sol\":{\"keccak256\":\"0x0ff416b358949bb5d9553118f7cbfd42aa9aa33fa6bbe4bf470159df07cf6989\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f033bb516eb8d85554aea408a0a750bf6ccd5655035abd307cc8388a533f1c40\",\"dweb:/ipfs/QmPCjG5jrXU4FrJWsputirF7JXZsNxhopetnHZTfRAFvMn\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultExtension.sol\":{\"keccak256\":\"0xa547348926764942de6030bf7d303684ff675a4a08fab3320f98154450ca5bb8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6c440d5d23034e35803f135d9336f256ece717370adb93d1f2fb992fa5ffd869\",\"dweb:/ipfs/QmbCaxRG3X9kUEbdrhRbm7JZZoK2nYp8FUXqh7Bn4wnFra\"]},\"@balancer-labs/v3-interfaces/contracts/vault/IVaultMain.sol\":{\"keccak256\":\"0x7df60e55516bf9cfa5156a03afc22e222fb87edf1bb9af48586ff0ff1be71e92\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://baf5a2e16cdb139182df24e2d103f80c72b730be20a04b2486e751af16652ac9\",\"dweb:/ipfs/Qmd6kdQmUFxPRJT1YrRJVVsUYAmpohBRvCM2qdXzVGcv5d\"]},\"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0x670a4c7cdc970ed8cc82432894318558d67a530591617177603e0fea631addbc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b240af11378ac8ce54000b7defbd63c3a78d34c8f2bd6061173e35326fb6a042\",\"dweb:/ipfs/Qmf161h2SEXEQ2oahYcwCkxRC6QZocP2GsSjSJW2K57UzR\"]},\"@balancer-labs/v3-solidity-utils/contracts/helpers/Authentication.sol\":{\"keccak256\":\"0x807237870f3aaa26cd815c5f600c1d0c60861a2f962fcc341d4b80942288ab52\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://90f108409488d0c38147d2ac7b9facd694dbf1001c501136a249091788c22232\",\"dweb:/ipfs/QmRCaCCGcuL4kxBEbrpq6FfENBJk4Zo8CNe8TRusatuYJ6\"]},\"@balancer-labs/v3-solidity-utils/contracts/math/FixedPoint.sol\":{\"keccak256\":\"0x84bcae7004be7e91a88e76a3ac317490bc6845754a12cee88fcab76b1c5de37b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://15f903480fec5ae8042baf458e2246693b0b4a22687e65c2ed3afdf6993bff82\",\"dweb:/ipfs/QmcxsVeSbQ4qYnEZFoeFmiqaoV3rAx1oNhACCZCMZ1E6uf\"]},\"@balancer-labs/v3-solidity-utils/contracts/math/LogExpMath.sol\":{\"keccak256\":\"0x70449e2b423b9850e39adddd7301205aa8b6e9e4ae788fd44d0968cac018eb2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce2174a3629b45dca032f9cf53df35dea240626913b8882a9e2da21610b02796\",\"dweb:/ipfs/Qmf8E4DePnZXjqb3V4A38gSobjgRK6VqavqPByuXvJxtBG\"]},\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/ReentrancyGuardTransient.sol\":{\"keccak256\":\"0x0986ee17e49747c89956b4d46947b65b7c2942d5854fd39d764a7cb2735ff8af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://38fedef8f551d12a155f54ab1c863db60fed1226a397a321ac729e9db65f4593\",\"dweb:/ipfs/QmaxBFc45J79aehsbSoLzNWVfBhqxkkWnKpunmKrbzV1pL\"]},\"@balancer-labs/v3-solidity-utils/contracts/openzeppelin/StorageSlotExtension.sol\":{\"keccak256\":\"0xba524eab3f4f1b735008624cf11264842bec509e05ac025f93b8c843547fbfd3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c539df1afd342c47fdbd96fb28a183b7b30e055c4e435cdf77140ec92e68a42\",\"dweb:/ipfs/QmZ4akawS7TKrJkBeoi4bfyGWRmQgXshtkAMupuxkgH5Ur\"]},\"@balancer-labs/v3-vault/contracts/CommonAuthentication.sol\":{\"keccak256\":\"0x2b001b0e402cb94f135c49e40cec96138e3842db5b2b1f46b1bb8d34abe1eecb\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://5d4336b62b3919e0fbd5e0f3ff2f29e1056c07b4c62c742797003733404416e2\",\"dweb:/ipfs/QmbQqFz4DPBcEEaHAV5HbB5aAQkSw4JZtck1fJCJrmbpw2\"]},\"@balancer-labs/v3-vault/contracts/ProtocolFeeController.sol\":{\"keccak256\":\"0x4e6eceea41f31faa3f4228315c1d54c0d6f7befaaa1d158775e0b2a860c9de12\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6fc6d998ca7860d5c8f08a4fc045d5d1ebdcb4c777e934f6cd081d05252a024f\",\"dweb:/ipfs/QmbsPGHVrBdVfpcWkm3BNWPQXUZWbvPb6VGiEbf5ezvAmj\"]},\"@balancer-labs/v3-vault/contracts/SingletonAuthentication.sol\":{\"keccak256\":\"0x3a1f98316c5f245ff0fc29f496fdaa36c44baa3d72fd300bb506b9758245ee2c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://13b7c348e2dc88ef28dcfbe48c8bae0c938cac1f094f3ddca63aea062a457146\",\"dweb:/ipfs/QmPpFJUrsYaehBecfdHLNPcYeWZrcdbd8dBwLQWRtr3HUf\"]},\"@balancer-labs/v3-vault/contracts/VaultGuard.sol\":{\"keccak256\":\"0x678a36266505ecef51b514707c3050baaeb970644894f64eb0a442aa4ab013ec\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://d1514c0d27ad60f5f2d863f08258d67d937ec5e7b003d9c9f60526509d72bbef\",\"dweb:/ipfs/QmUVkCKFi1N8ZCzQ8VHD92eD1tzJciBowHmZ6fY8hEwNqF\"]},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4aed79c0fa6f0546ed02f2f683e8f77f0fd2ed7eb34d8bbf3d373c9a6d95b13c\",\"dweb:/ipfs/QmWqVz6UAVqmnWU5pqYPt1o6iDEZyPaBraAA3rKfTTSfYj\"]},\"contracts/ProtocolFeeControllerMigration.sol\":{\"keccak256\":\"0xaae2aa9dea8a337f20cf97202e2f397763a96191ce5301ee9a3320556ac96f9c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://765384c3d9d13a2a20df396a73969d49deff80c235a959647b9f863ab1057dac\",\"dweb:/ipfs/QmV3jk1gVuGoueUWKvrNvveiGD8JFFNpu42yX2PCNQM5fh\"]}},\"version\":1}"}}}}}